- en: Navigating Between Screens
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在屏幕之间导航
- en: The focus of this chapter is navigating between the screens that make up your
    React Native application. Navigation in native apps is slightly different than
    navigation in web apps—mainly because there isn't any notion of a URL that the
    user is aware of. In prior versions of React Native, there were primitive navigator
    components that you could use to control the navigation between screens. There
    were a number of challenges with these components that resulted in more code to
    accomplish basic navigation tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是在React Native应用程序中导航到组成应用程序的屏幕之间。原生应用程序中的导航与Web应用程序中的导航略有不同——主要是因为用户没有任何URL的概念。在之前的React
    Native版本中，有原始的导航器组件，可以用来控制屏幕之间的导航。这些组件存在一些挑战，导致需要更多的代码来完成基本的导航任务。
- en: More recent versions of React Native encourage you to use the `react-navigation`
    package, which will be the focus of this chapter, even though there are several
    other options. You'll learn navigation basics, passing parameters to screens,
    changing the header content, using tab and drawer navigation, and handling state
    with navigation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的React Native版本鼓励你使用`react-navigation`包，这将是本章的重点，尽管还有其他几个选项。你将学习导航基础知识，向屏幕传递参数，更改标题内容，使用选项卡和抽屉导航，以及处理导航状态。
- en: Navigation basics
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航基础知识
- en: 'Let''s start off with the basics of moving from one page to another using `react-navigation`.
    Here''s what the `App` component looks like:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从使用`react-navigation`进行从一个页面到另一个页面的基础知识开始。`App`组件的外观如下：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `createStackNavigator()` function is all you need to set up your navigation.
    The first argument to this function is a mapping to the screen components that
    can be navigated. The second argument is for more general navigation options—in
    this case, you're telling the navigator that `Home` should be the default screen
    component that's rendered.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`createStackNavigator()`函数是设置导航所需的全部内容。这个函数的第一个参数是一个屏幕组件的映射，可以进行导航。第二个参数是更一般的导航选项——在这种情况下，你告诉导航器`Home`应该是默认的屏幕组件。'
- en: 'Here''s what the `Home` component looks like:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`Home`组件的外观如下：'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is your typical functional React component. You could use a class-based
    component here, but there's no need since there are no life cycle methods or state.
    It renders a `View` component where the container style is applied. This is followed
    by a `Text` component that labels the screen followed by a `Button` component.
    A screen can be anything you want - it's just a regular React Native component.
    The navigator component handles the routing and the transitions between screens
    for you.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您典型的功能性React组件。你可以在这里使用基于类的组件，但没有必要，因为没有生命周期方法或状态。它呈现了一个应用了容器样式的`View`组件。接下来是一个标记屏幕的`Text`组件，后面是一个`Button`组件。屏幕可以是任何你想要的东西——它只是一个常规的React
    Native组件。导航器组件为你处理路由和屏幕之间的过渡。
- en: The `onPress` handler for this button navigates to the `Settings` screen when
    clicked. This is done by calling `navigation.navigate('Settings')`. The `navigation`
    property is passed to your screen component by `react-navigation` and contains
    all of the routing functionality you need. In contrast to working with URLs in
    React web apps, here you call navigator API functions and pass them the names
    of screens.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个按钮的`onPress`处理程序在点击时导航到`Settings`屏幕。这是通过调用`navigation.navigate('Settings')`来实现的。`navigation`属性是由`react-navigation`传递给屏幕组件的，并包含你需要的所有路由功能。与在React
    web应用程序中使用URL不同，在这里你调用导航器API函数并传递屏幕的名称。
- en: 'Next, let''s take a look at the `Settings` component:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看看`Settings`组件：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This component is just like the `Home` component, except with different text
    and when the button is clicked on, you're taken back to the `Home` screen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件就像`主页`组件一样，只是文本不同，当点击按钮时，您会被带回到`主页`屏幕。
- en: 'Here''s what the home screen looks like:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`主页`屏幕的样子：
- en: '![](Images/5afc73f6-11a8-472b-996b-4cc346c11553.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5afc73f6-11a8-472b-996b-4cc346c11553.png)'
- en: 'You can click the **Settings** button and you''ll be taken to the `Settings`
    screen, which looks like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以单击**设置**按钮，然后将被带到`设置`屏幕，看起来像这样：
- en: '![](Images/7e83075d-2129-490c-b77a-7d0147bd1aee.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7e83075d-2129-490c-b77a-7d0147bd1aee.png)'
- en: This screen looks almost identical to the `Home` screen. It has different text
    and a different button that will take you back to the `Home` screen when clicked.
    However, there's another way to get back to the `Home` screen. Take a look at
    the top of the screen and you'll notice a white navigation bar. On the left side
    of the navigation bar, there's a back arrow. This works just like the back button
    in a web browser and will take you back to the previous screen. What's nice about
    `react-navigation` is that it takes care of rendering this navigation bar for
    you.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个屏幕看起来几乎和`主页`屏幕一样。它有不同的文本和一个不同的按钮，当点击时会带您回到`主页`屏幕。但是，还有另一种方法可以回到`主页`屏幕。看一下屏幕顶部，您会注意到一个白色的导航栏。在导航栏的左侧，有一个返回箭头。这就像Web浏览器中的返回按钮一样，会带您回到上一个屏幕。`react-navigation`的好处在于它会为您渲染这个导航栏。
- en: With this navigation bar in place, you don't have to worry about how your layout
    styles impact the status bar. You only need to worry about the layout within each
    of your screens.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个导航栏，您不必担心布局样式如何影响状态栏。您只需要担心每个屏幕内的布局。
- en: If you run this app in Android, you'll see the same back button in the navigation
    bar. But you can also use the standard back button found outside of the app on
    most Android devices.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Android上运行此应用程序，您将在导航栏中看到相同的返回按钮。但您也可以使用大多数Android设备上应用程序外部找到的标准返回按钮。
- en: Route parameters
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由参数
- en: When you develop React web applications, some of your routes have dynamic data
    in them. For example, you can link to a details page and within that URL, you
    would have some sort of identifier. The component then has what it needs to render
    specific detailed information. The same concept exists within `react-navigation`.
    Instead of just specifying the name of the screen that you want to navigate to,
    you can pass along additional data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开发React Web应用程序时，一些路由中有动态数据。例如，您可以链接到一个详情页面，在URL中，您会有某种标识符。然后组件就有了渲染特定详细信息所需的内容。相同的概念也存在于`react-navigation`中。您不仅可以指定要导航到的屏幕的名称，还可以传递额外的数据。
- en: 'Let''s take a look at route parameters in action, starting with the `App` component:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看路由参数的实际应用，从`App`组件开始：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This looks just like the preceding example, except instead of a `Settings`
    page, there''s a `Details` page. This is the page that you want to pass data to
    dynamically so it can render the appropriate information. First, let''s take a
    look at the `Home` screen component:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来和前面的例子一样，只是没有`设置`页面，而是有一个`详情`页面。这是您想要动态传递数据的页面，以便它可以呈现适当的信息。首先，让我们看看`主页`屏幕组件：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `Home` screen has three `Button` components that each navigate to the `Details`
    screen. Pay attention to the `navigation.navigate()` calls. In addition to the
    screen name, they each have a second argument. These are objects that contain
    specific data that is passed to the `Details` screen. Next, let''s take a look
    at the `Details` screen and see how it consumes these route parameters:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “主页”屏幕有三个`Button`组件，每个都导航到“详情”屏幕。注意`navigation.navigate()`的调用。除了屏幕名称，它们每个都有第二个参数。这些是包含特定数据的对象，这些数据将传递给“详情”屏幕。接下来，让我们看看“详情”屏幕，并了解它如何使用这些路由参数：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Although this example is only passing one parameter—`title`—you can pass as
    many parameters to the screen as you need to. You can access these parameters
    using the `navigator.getParam()` function to look up the value.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此示例只传递了一个参数—`title`—您可以根据需要向屏幕传递尽可能多的参数。您可以使用`navigator.getParam()`函数来查找值来访问这些参数。
- en: 'Here''s what the home screen looks like when rendered:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染时，“主页”屏幕如下所示：
- en: '![](Images/cb6a4cf6-cf5d-414e-b14f-03ed7cba50eb.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cb6a4cf6-cf5d-414e-b14f-03ed7cba50eb.png)'
- en: 'And if you click on the **First Item** button, you''ll be taken to the Details
    screen that is rendered using route parameter data:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击**第一项**按钮，您将进入使用路由参数数据呈现的详情屏幕：
- en: '![](Images/e48783cb-16e4-4ef1-90d5-7b221e56b9dd.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e48783cb-16e4-4ef1-90d5-7b221e56b9dd.png)'
- en: You can click the back button in the navigation bar to get back to the `home`
    screen. If you click on any of the other buttons on the `Home` screen, you'll
    be taken back to the `Details` screen with updated data. Route parameters are
    necessary to avoid having to write duplicate components. You can think of passing
    parameters to `navigator.navigate()` as passing props to a React component.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航栏中，您可以点击返回按钮返回到“主页”屏幕。如果您点击“主页”屏幕上的任何其他按钮，您将被带回到带有更新数据的“详情”屏幕。路由参数是必要的，以避免编写重复的组件。您可以将参数传递给`navigator.navigate()`，就像将props传递给React组件一样。
- en: The navigation header
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航头
- en: The navigation bars that you've created so far in this chapter have been sort
    of plain. That's because you haven't configured them to do anything, so `react-navigation`
    will just render a plain bar with a back button. Each screen component that you
    create can configure specific navigation header content.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中创建的导航栏都有点普通。这是因为您还没有配置它们执行任何操作，所以`react-navigation`只会渲染一个带有返回按钮的普通栏。您创建的每个屏幕组件都可以配置特定的导航头内容。
- en: 'Let''s build on the previous example that used buttons to navigate to a details
    page. The `App` component stays the same, so let''s take a look at the `Home`
    component first:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在之前使用按钮导航到详情页面的示例上进行扩展。`App`组件保持不变，所以让我们先看看`Home`组件：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The first thing you''ll notice is that each button is passing more route parameters
    to the `Details` component: `content` and `stock`. You''ll see why in a moment.
    It''s the `Home.navigationOptions` value that configures the navigation header
    for you. In this case, the `Home` screen is setting the `title`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您将注意到的第一件事是，每个按钮都向“详情”组件传递了更多的路由参数：`content`和`stock`。您马上就会明白为什么。正是`Home.navigationOptions`的值为您配置了导航头。在这种情况下，“主页”屏幕正在设置“标题”。
- en: 'The `Home` screen is a functional component, so you can just set `navigationOptions`
    as a property on the function. If your component is class based because it has
    the state of life cycle methods, you can define it as a static class property:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “主页”屏幕是一个功能性组件，所以您可以将`navigationOptions`设置为函数的属性。如果您的组件是基于类的，因为它具有生命周期方法的状态，您可以将其定义为静态类属性：
- en: '`class MyScreen extends Component { static navigationOptions = {...} ... }`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`class MyScreen extends Component { static navigationOptions = {...} ... }`'
- en: 'Next, let''s take a look at the `Details` component:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看“详情”组件：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This time, the `Details` component renders the content route parameter. Like
    the `Home` component, it also has a `navigationOptions` property. In this case,
    it's a function instead of an object. This is because you're dynamically changing
    navigation header content based on the parameters that are passed to the screen.
    The function is passed a `navigation` property - this is the same value that's
    passed to the `Details` component. You can call `navigation.getParam()` to get
    the title to change the navigation header based on a route parameter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '这一次，`Details`组件呈现内容路由参数。像`Home`组件一样，它也有一个`navigationOptions`属性。在这种情况下，它是一个函数，而不是一个对象。这是因为您根据传递给屏幕的参数动态更改导航头内容。该函数传递了一个`navigation`属性
    - 这与传递给`Details`组件的值相同。您可以调用`navigation.getParam()`来获取标题，以根据路由参数更改导航头。 '
- en: Next, the `headerRight` option is used to add a `Button` component to the right
    side of the navigation bar. This is where the stock parameter comes into play.
    If this value is 0 because there isn't anything in stock, you want to disable
    the **Buy** button.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`headerRight`选项将`Button`组件添加到导航栏的右侧。这就是股票参数发挥作用的地方。如果这个值是0，因为没有任何库存，你想要禁用**购买**按钮。
- en: 'Let''s see how all of this works now, starting with the `Home` screen:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看所有这些是如何工作的，从“主页”屏幕开始：
- en: '![](Images/f21a99d6-558c-453b-ab3d-d0d302eedd96.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f21a99d6-558c-453b-ab3d-d0d302eedd96.png)'
- en: 'There is how header text in the navigation bar, is set by the `Home` screen
    component. Next, try clicking on the **First Item** button:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏中的标题文本是由“主页”屏幕组件设置的。接下来，尝试点击**第一项**按钮：
- en: '![](Images/3a484181-14ba-4b58-859d-f6131d6b9e5d.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3a484181-14ba-4b58-859d-f6131d6b9e5d.png)'
- en: 'The title in the navigation bar is set based on the `title` parameter that''s
    passed to the `Details` component. The **Buy** button that''s rendered on the
    right side of the navigation bar is rendered by the `Details` component as well.
    It''s enabled because the `stock` parameter value is 1\. Now try returning to
    the `Home` screen and clicking on the **Second Item** button:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏中的标题是根据传递给`Details`组件的`title`参数设置的。导航栏右侧呈现的**购买**按钮也由`Details`组件呈现。它是启用的，因为`stock`参数值为1。现在尝试返回到“主页”屏幕，并点击**第二项**按钮：
- en: '![](Images/9228ad78-b384-4c73-8b65-2bd246a2a282.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9228ad78-b384-4c73-8b65-2bd246a2a282.png)'
- en: The title and the page content both reflect the new parameter values passed
    to `Details`. But so does the **Buy** button. It is in a disabled state because
    the stock parameter value was 0, meaning that it can't be bought.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 标题和页面内容都反映了传递给`Details`的新参数值。但**购买**按钮也是如此。它处于禁用状态，因为股票参数值为0，这意味着它无法购买。
- en: Tab and drawer navigation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项卡和抽屉导航
- en: Each example so far in this chapter has used `Button` components to link to
    other screens in the app. You can use functions from `react-navigation` that will
    create tab or drawer navigation for you automatically based on the screen components
    that you give it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章中的每个示例都使用了`Button`组件来链接到应用程序中的其他屏幕。您可以使用`react-navigation`中的函数，根据您提供的屏幕组件自动为您创建选项卡或抽屉导航。
- en: Let's create an example that uses bottom tab navigation on iOS and drawer navigation
    on Android.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个示例，在iOS上使用底部选项卡导航，在Android上使用抽屉导航。
- en: 'You aren''t limited to using tab navigation on iOS or drawer navigation on
    Android. I''m just picking these two to demonstrate how to use different modes
    of navigation based on the platform. You can use the exact same navigation mode
    on both platforms if you prefer.Here''s what the `App` component looks like:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您不仅限于在iOS上使用选项卡导航或在Android上使用抽屉导航。我只是选择这两个来演示如何根据平台使用不同的导航模式。如果您愿意，您可以在两个平台上使用完全相同的导航模式。这是`App`组件的外观：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Instead of using the `createStackNavigator()` function to create your navigator,
    you''re importing the `createBottomTabNavigator()` and `createDrawerNavigator()`
    functions from `react-navigation`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用`createStackNavigator()`函数来创建你的导航器，而是从`react-navigation`中导入`createBottomTabNavigator()`和`createDrawerNavigator()`函数：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then you''re using the `Platform` utility from `react-native` to decide which
    of these two functions to use. The result, depending on the platform, is assigned
    to `createNavigator()`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你使用`react-native`中的`Platform`实用程序来决定使用这两个函数中的哪一个。根据平台的不同，结果被分配给`createNavigator()`：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now you can call `createNavigator()` and pass it to your screens. The resulting
    tab or drawer navigation will be created and rendered for you:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以调用`createNavigator()`并将其传递给你的屏幕。生成的选项卡或抽屉导航将被创建和渲染给你：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, let''s take a look at the `Home` screen component:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一下`Home`屏幕组件：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It sets the `title` in the navigation bar and renders some basic content. The
    `News` and `Settings` components are essentially the same as `Home`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它在导航栏中设置`title`并呈现一些基本内容。`News`和`Settings`组件本质上与`Home`相同。
- en: 'Here''s what the bottom tab navigation looks like on iOS:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: iOS上的底部选项卡导航如下所示：
- en: '![](Images/9b570d61-e6ec-48af-9168-3ad8fe4d209e.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9b570d61-e6ec-48af-9168-3ad8fe4d209e.png)'
- en: The three screens that make up your app are listed at the bottom. The current
    screen is marked as active and you can click on the other tabs to move around.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 组成你的应用程序的三个屏幕在底部列出。当前屏幕被标记为活动状态，你可以点击其他选项卡来移动。
- en: 'Now, let''s see what the drawer layout looks like on Android:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看Android上的抽屉布局是什么样子的：
- en: '![](Images/16c598d2-9a7b-47c4-9ea2-eeacf04e432d.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/16c598d2-9a7b-47c4-9ea2-eeacf04e432d.png)'
- en: To open the drawer, you need to swipe from the left side of the screen. Once
    open, you'll see buttons that will take you to the various screens of your app.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开抽屉，你需要从屏幕的左侧滑动。一旦打开，你将看到按钮，可以带你到应用程序的各个屏幕。
- en: Swiping the drawer open from the left side of the screen is the default mode.
    You can configure the drawer to swipe open from any direction.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从屏幕左侧滑动打开抽屉是默认模式。你可以配置抽屉从任何方向滑动打开。
- en: Handling state
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理状态
- en: React applications have state that gets passed down to components that render
    features and require state data. For example, imagine that you're designing an
    app that uses `react-navigation` and different screens depend on the same state
    data. How do you get state data into these screen components? How do they update
    the application state?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: React应用程序具有传递给呈现功能并需要状态数据的组件的状态。例如，想象一下，你正在设计一个使用`react-navigation`的应用程序，不同的屏幕依赖于相同的状态数据。你如何将状态数据传递给这些屏幕组件？它们如何更新应用程序状态？
- en: To start with, let's think about where to put your application state. The most
    natural place to put it would be the `App` component. So far in this chapter,
    the examples have directly exported calls to `createStackNavigator()`. This function
    is a higher-order function - it returns a new React component. This means that
    you can wrap your own stateful component around the navigation component that's
    returned by `createStackNavigator()`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们考虑将应用程序状态放在哪里。最自然的地方是`App`组件。到目前为止，在本章中，示例直接导出了对`createStackNavigator()`的调用。这个函数是一个高阶函数
    - 它返回一个新的React组件。这意味着你可以在由`createStackNavigator()`返回的导航组件周围包装自己的有状态组件。
- en: 'To illustrate this idea, let''s revisit the example from earlier where you
    have a `Home` screen that lists item buttons that navigate to a `Details` screen.
    Here''s what the new `App` component looks like:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个想法，让我们重新访问之前的例子，其中你有一个列出导航到`Details`屏幕的项目按钮的`Home`屏幕。下面是新的`App`组件的样子：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'First, you use the `createStackNavigator()` function to create your navigator
    component:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你使用`createStackNavigator()`函数来创建你的导航器组件：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now you have a `Nav` component that you can render. Next, you can create a
    regular React component with state:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有一个可以渲染的“Nav”组件。接下来，您可以创建一个带有状态的常规React组件：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The state used in this component represents the number quantity of each item
    that is available to buy. Next, you have the `updateStock()` function that is
    used to update the stock state for a given item ID:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件中使用的状态表示每个物品可供购买的数量。接下来，您有“updateStock()”函数，用于更新给定物品ID的库存状态：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The ID that''s passed to this function has its stock state decremented by `1`,
    unless it''s already at 0\. This function can be used when the **Buy** button
    is clicked for the item to check its stuck quantity by `1`. Finally, you have
    the `render()` method, which can render the `Nav` component:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给这个函数的ID的库存状态会减少1，除非已经为0。当单击物品的“购买”按钮时，可以使用这个函数来检查其库存数量是否减少1。最后，您有“render()”方法，它可以渲染“Nav”组件：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The state of `App` is passed to `Nav` as props. The `updateStock()` function
    is also passed as a prop so that it can be used by the screen components. Now
    let''s take a look at the `Home` screen:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: “App”的状态作为props传递给“Nav”。还将“updateStock()”函数作为prop传递，以便屏幕组件可以使用它。现在让我们来看一下“Home”屏幕：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once again, you have the three `Button` components that navigate to the `Details`
    screen and pass route parameters. There''s a new parameter added in this version:
    `id`. The title of each button reflects the stock count of the given item. This
    value is part of the application state and is passed to the screen component via
    properties. However, these properties are all accessed through the `screenProps`
    property.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您有三个“Button”组件，用于导航到“Details”屏幕并传递路由参数。在这个版本中添加了一个新参数：“id”。每个按钮的标题都反映了给定物品的库存数量。这个值是应用程序状态的一部分，并通过属性传递给屏幕组件。然而，所有这些属性都是通过“screenProps”属性访问的。
- en: '**Rule of thumb**: If a prop is passed to the navigation component, it''s accessible
    via the `screenProps` property. If a value is passed to the screen via `navigator.navigate()`,
    it''s accessible by calling `navigator.getParam()`.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**经验法则**：如果将prop传递给导航组件，则可以通过“screenProps”属性访问它。如果通过“navigator.navigate()”将值传递给屏幕，则可以通过调用“navigator.getParam()”来访问它。'
- en: 'Let''s take a look at the `Details` component next:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们来看一下“Details”组件：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `id` and the `title` route parameters are used to manipulate content in
    the navigation bar. The `title` parameter sets the title. The `id` is used by
    the `onPress` handler of the **Buy** button, by passing it to `updateStock()`,
    and the appropriate item stock count is updated when the button is pressed. The
    `disabled` property also relies on the `id` parameter to look up the stock quantity.
    Just like the `Home` screen, the stock and `updateStock()` props that are passed
    down from the `App` component are accessible through the screenProps app.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: “id”和“title”路由参数用于操作导航栏中的内容。“title”参数设置标题。“id”被“Buy”按钮的“onPress”处理程序使用，通过将其传递给“updateStock()”，当按钮被按下时，适当的物品库存数量会更新。“disabled”属性也依赖于“id”参数来查找库存数量。就像“Home”屏幕一样，从“App”组件传递下来的库存和“updateStock()”props都可以通过screenProps应用程序访问。
- en: 'Here''s what the `Home` screen looks like when it''s first rendered:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是“Home”屏幕在首次渲染时的样子：
- en: '![](Images/e65820bb-e4dd-4577-8eb5-e7c5d5197054.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e65820bb-e4dd-4577-8eb5-e7c5d5197054.png)'
- en: 'The stock quantity is reflected in each item button as a number. Let''s press
    the **First Item** button and navigate to the `Details` page:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 每个物品按钮上的库存数量都反映了一个数字。让我们按下“First Item”按钮并导航到“Details”页面：
- en: '![](Images/5ecc1b4f-ddf5-4704-9f37-c89bf6490359.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5ecc1b4f-ddf5-4704-9f37-c89bf6490359.png)'
- en: 'The **Buy** button in the navigation bar is enabled because the stock quantity
    is 1\. Let''s go ahead and press the Buy button and see what happens:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏中的**购买**按钮已启用，因为库存数量为1。让我们继续按下购买按钮，看看会发生什么：
- en: '![](Images/c3a28b61-dd7d-4742-8ec8-bc4d61924787.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c3a28b61-dd7d-4742-8ec8-bc4d61924787.png)'
- en: After pressing the **Buy** button, it becomes disabled. This is because the
    stock value for this item was 1\. By pressing **Buy**, you caused the `updateStock()`
    function to be called, which updated this value to 0\. As a result of the state
    change, the `App` component re-rendered the `Nav` component, which, in turn re-rendered
    your `Details` screen component with new prop values.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 按下**购买**按钮后，它变为禁用状态。这是因为该商品的库存值为1。通过按下**购买**按钮，你调用了`updateStock()`函数，将该值更新为0。由于状态改变，`App`组件重新渲染了`Nav`组件，进而使用新的属性值重新渲染了你的`Details`屏幕组件。
- en: 'Let''s go back to the `Home` screen and see what''s changed there as a result
    of the state update:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到“主页”屏幕，看看由于状态更新而发生了什么变化：
- en: '![](Images/6c5b95b7-850b-41e2-a085-88e42f8546fa.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6c5b95b7-850b-41e2-a085-88e42f8546fa.png)'
- en: As expected, the stock quantity that is rendered beside the **First Item** button
    text is 0, reflective of the state change that just happened.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，**第一项**按钮文本旁边呈现的库存数量为0，反映了刚刚发生的状态变化。
- en: This example shows that you can have a top-level `App` component handle the
    application state while passing it down to the individual app screens, along with
    the functions that issue state updates.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子表明，你可以让顶层的`App`组件处理应用程序状态，同时将其传递给各个应用程序屏幕，以及发出状态更新的函数。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned that mobile web applications require navigation
    just like web applications do. Although different, web application and mobile
    application navigation have enough conceptual similarities that mobile app routing
    and navigation doesn't have to be a nuisance.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了移动web应用程序和web应用程序一样需要导航。尽管有所不同，但是移动应用程序和web应用程序的导航有足够的概念上的相似之处，使得移动应用程序的路由和导航不必成为一个麻烦。
- en: Older versions of React Native made attempts to provide components to help manage
    navigation within mobile apps, but these never really took hold. Instead, the
    React Native community has dominated this area. One example of this is the `react-navigation`
    library, the focus of this chapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 早期版本的React Native尝试提供组件来帮助管理移动应用程序中的导航，但这些从未真正生效。相反，React Native社区主导了这一领域。其中一个例子就是`react-navigation`库，本章的重点。
- en: You learned how basic navigation works with react-navigation. You then learned
    how to control the header components within the navigation bar. Next, you learned
    about tab and drawer navigation. These two navigation components can automatically
    render the navigation buttons for your app based on the screen components. Finally,
    you learned how to maintain navigation while still being able to pass state data
    down to screen components from the top level app.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你学会了如何使用react-navigation进行基本导航。然后，你学会了如何控制导航栏中的标题组件。接下来，你学会了选项卡和抽屉导航。这两个导航组件可以根据屏幕组件自动渲染应用的导航按钮。最后，你学会了如何在保持导航的同时，仍然能够从顶层应用向屏幕组件传递状态数据。
- en: In the next chapter, you'll learn how to render lists of data.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何渲染数据列表。
- en: Test your knowledege
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: What's the main difference between navigation in React web apps and React Native
    apps?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在React web应用和React Native应用中，导航的主要区别是什么？
- en: There is no meaningful difference between web and mobile applications in terms
    of navigation.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航方面，Web应用和移动应用之间没有实质性的区别。
- en: Web applications rely on URLs as the central concept for moving around. Native
    apps have no such concept, so it's up to the developer and the navigation libs
    they use to manage their screens.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web 应用程序依赖 URL 作为移动的中心概念。原生应用程序没有这样的概念，所以开发人员和他们使用的导航库来管理他们的屏幕。
- en: Native application code uses URLs the same way as with web applications, but
    these just aren't exposed to the user.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原生应用代码与 web 应用程序一样使用 URL，但这些 URL 对用户来说是不可见的。
- en: What function should be used to navigate to a new screen?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该使用什么函数来导航到新的屏幕？
- en: Screen components are passed a navigation property. You should use **`navigation.navigate()`**
    to move to another screen.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕组件会被传递一个导航属性。你应该使用**`navigation.navigate()`**来切换到另一个屏幕。
- en: The screen component automatically has navigation methods added to it.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕组件会自动添加导航方法。
- en: There's a global navigation object that has navigation methods that you can
    use.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一个全局导航对象，其中包含可以使用的导航方法。
- en: Does react-navigation handle back button functionality for you?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: react-navigation是否为你处理返回按钮功能？
- en: Yes. Including the built-in back button on Android systems.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的。包括在安卓系统上内置的返回按钮。
- en: No, you have to implement all back button behavior yourself.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，你必须自己实现所有返回按钮的行为。
- en: How do you pass data to screens?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何将数据传递给屏幕？
- en: You can pass a plain object as the second argument to **`navigation.navigate()`**.
    The properties are then accessible to the screen via **`navigation.getParam()`.**
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以将一个普通对象作为**`navigation.navigate()`**的第二个参数。然后可以通过**`navigation.getParam()`**在屏幕上访问这些属性。
- en: You have to re-render the screen component, passing it parameters that you get
    as properties from navigation.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须重新渲染屏幕组件，将从导航中作为属性获取的参数传递给它。
- en: You don't pass data to screens. Setting application level state is the only
    way to get data into screen components.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你不会将数据传递给屏幕。设置应用级别的状态是将数据传递给屏幕组件的唯一方法。
- en: Further reading
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Check out the following link for more information:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接获取更多信息：
- en: '[https://reactnavigation.org/](https://reactnavigation.org/)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactnavigation.org/](https://reactnavigation.org/)'
