- en: Our App&#x27;s Login Page
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的应用程序的登录页面
- en: We've spent the last couple of chapters getting our application completely set
    up for development with React. Now, let's go full steam ahead with building our
    application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几章中，我们已经完全准备好了使用React进行开发。现在，让我们全力以赴地构建我们的应用程序。
- en: In this chapter, we will create our application's login page in React. By the
    end, you should feel comfortable with basic React syntax.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在React中创建我们应用程序的登录页面。最后，你应该对基本的React语法感到舒适。
- en: 'We will cover the following key React concepts:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下关键的React概念：
- en: Separating the UI into components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将UI分成组件
- en: Writing JSX
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写JSX
- en: Functional components versus class components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数组件与类组件
- en: Component state
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件状态
- en: Creating reusable components
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可重用的组件
- en: What is a React component?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是React组件？
- en: A **React component**, at the most basic level, is a piece of the user interface,
    more specifically, a section of UI devoted to a single purpose.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**React组件**，在最基本的层面上，是用户界面的一部分，更具体地说，是专门用于单一目的的UI部分。'
- en: With React, your UI is split up into sections, sections within those sections,
    then sections within those, and so on; you get the picture. Each section is its
    own component, and lives in a separate file.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，你的UI被分成了各个部分，这些部分又包含在其他部分中，依此类推；你明白了吧。每个部分都是自己的组件，并且存在于单独的文件中。
- en: The beauty of this system may not be obvious now, but once we dive into it,
    you'll see how it makes our application much more comprehendible, that is, easy
    for us to understand and navigate as we're developing. We'll only be building
    a small application with a few components. The effect increases as your application
    grows to hundreds of components.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个系统的美妙之处现在可能并不明显，但一旦我们深入了解，你会发现它使我们的应用程序更易理解，也就是说，在开发过程中更容易理解和导航。我们只会构建一个包含几个组件的小应用程序。当你的应用程序增长到数百个组件时，效果会更加明显。
- en: 'Let''s look at a quick example of splitting a UI into components. Here''s the
    online store of Packt, the publishers of this book:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个将UI拆分成组件的快速示例。这是Packt的在线商店，也是这本书的出版商：
- en: '![](../images/00022.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00022.jpeg)'
- en: If we were to rebuild this in React, we would start by dividing the UI into
    meaningful sections. Which parts are concerned with different purposes?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要在React中重建这个UI，我们将首先将UI分成有意义的部分。哪些部分涉及不同的目的？
- en: 'Note that there is no single correct answer to this question; different developers
    will do it differently, but here''s a division that makes sense to me: splitting
    it up into a **FilterControl**, a **SearchBar**, and a **ResultsGrid**:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个问题并没有一个正确的答案；不同的开发人员会有不同的做法，但是以下的划分对我来说是有意义的：将其分成**FilterControl**、**SearchBar**和**ResultsGrid**：
- en: '![](../images/00023.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00023.jpeg)'
- en: Here's my thinking--the **FilterControl** (at the top) has to do with sorting
    and pagination, the **SearchSideBar** is all about searching for specific results,
    and the **ResultsGrid** is all about displaying matching results. Each has a very
    specific and distinct purpose.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我的想法是——**FilterControl**（在顶部）与排序和分页有关，**SearchSideBar** 是搜索特定结果的功能，**ResultsGrid**
    则是显示匹配结果的功能。每个组件都有非常具体和明确的目的。
- en: Then, within those three components, we can make smaller divisions. Each book
    in the **ResultsGrid** can be a **BookCard** component, with a **BookInfo** and
    **BookImage** component within it, and so on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在这三个组件中，我们可以进行更小的划分。**ResultsGrid** 中的每本书可以是一个**BookCard**组件，其中包含**BookInfo**和**BookImage**组件，依此类推。
- en: How fine-grained we want to make these divisions is up to us. Generally, a greater
    number of smaller components is better, but one does have to write more boilerplate
    the more components one decides to write.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要将这些划分做得多细致，取决于我们自己。一般来说，更多数量的小组件更好，但是随着组件数量的增加，我们需要编写更多的样板代码。
- en: 'The other advantage of React componentization is reusability. Let''s say that,
    within our **ResultsGrid**, we make a **BookCard** component for each result.
    Then, on the Packt home page, we can reuse the same component! No more rewriting
    the same code twice in two places:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: React组件化的另一个优势是可重用性。假设在我们的**ResultsGrid**中，我们为每个结果制作一个**BookCard**组件。然后，在Packt主页上，我们可以重用相同的组件！不再在两个地方重复编写相同的代码：
- en: '![](../images/00024.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00024.jpeg)'
- en: Code reusability is also why smaller components are better. If you build your
    components to maximize reusability (to fit in the greatest number of contexts),
    you can build new features out of the existing parts. This increases development
    speed and ease. We'll build a reuseable component as part of our login form, and
    plug it elsewhere as our application expands.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的可重用性也是为什么较小的组件更好。如果您构建组件以最大化可重用性（以适应最多的上下文），您可以利用现有部分构建新功能。这增加了开发速度和便利性。我们将构建一个可重用的组件作为我们登录表单的一部分，并在应用程序扩展时在其他地方使用它。
- en: 'Let''s jump into our `App.js` file and take a look at the first component that
    we built:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们跳转到我们的`App.js`文件，看看我们构建的第一个组件：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Our `App` component is a function that returns a bit of JSX. That's it. This
    is a very handy way of thinking of React components, as functions that return
    part of the view. By calling certain functions in a certain order, we construct
    our UI.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`App`组件是一个返回一部分JSX的函数。就是这样。这是一种非常方便的思考React组件的方式，作为返回视图的一部分的函数。通过按照特定顺序调用某些函数，我们构建我们的UI。
- en: 'It does, of course, get a bit more complicated than that. However, if you ever
    feel overwhelmed by the React syntax and concepts, come back to this core principle:
    React components are just functions that return parts of the UI.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，情况会变得更加复杂。然而，如果你对React的语法和概念感到不知所措，请回到这个核心原则：React组件只是返回UI的一部分的函数。
- en: Controversies and Separation of Concerns
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 争议和关注点的分离
- en: When React first emerged on the scene, it was very controversial (and for many
    people, it still is). The core point of concern for many developers was JSX, having
    what appeared to be HTML in the middle of JavaScript code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当React首次出现时，它非常具有争议性（对许多人来说，它仍然是）。许多开发人员关注的核心问题是JSX，在JavaScript代码中间出现类似HTML的东西。
- en: For years, developers had been writing their HTML, CSS, and JavaScript in separate
    files. React violated that tradition. Some developers accused the library of violating
    the programming principle of **Separation of Concerns** (**SoC**)--the idea that
    code should be separated into files, each intended to do one thing. In this sense,
    they argued that you should have an HTML file, a CSS file, and a JavaScript file—no
    mingling of HTML and JavaScript.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，开发人员一直在不同的文件中编写他们的HTML、CSS和JavaScript。React违反了这一传统。一些开发人员指责该库违反了**关注点分离**（**SoC**）的编程原则-代码应该分离到各自用于一件事的文件中。从这个意义上讲，他们认为你应该有一个HTML文件，一个CSS文件和一个JavaScript文件-不应该混合HTML和JavaScript。
- en: What the React developers pointed out is that separating files based on type
    (HTML versus JavaScript) was a separation of technology, not a Separation of Concerns.
    The HTML and JavaScript were both concerned with rendering a functional UI—they
    belonged together.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: React开发人员指出的是，根据类型（HTML与JavaScript）分离文件是一种技术上的分离，而不是关注点的分离。HTML和JavaScript都关注于呈现功能性UI-它们是一体的。
- en: React proposed that if you had a button, both the HTML structure of the button
    and what made it functional (what happened when it was clicked on) should live
    in the same file, since that was all the same concern.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: React提出，如果你有一个按钮，按钮的HTML结构和使其功能（点击时发生的事情）应该存在于同一个文件中，因为这都是同一个关注点。
- en: Thus, the important thing to remember with React is the idea of Separation of
    Concerns—you can draw lines between your components based on what their purpose
    is.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，记住React的重要事情是关注点的分离——你可以根据组件的目的划定它们之间的界限。
- en: The missing piece of all of this is, of course, CSS. Shouldn't it be in the
    same file as well? Many think so, but a mature solution to do so has yet to emerge.
    You can read more about CSS in JS at [https://medium.freecodecamp.org/css-in-javascript-the-future-of-component-based-styling-70b161a79a32](https://medium.freecodecamp.org/css-in-javascript-the-future-of-component-based-styling-70b161a79a32).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这一切的缺失部分当然是CSS。它不应该在同一个文件中吗？很多人都这么认为，但是尚未出现成熟的解决方案。你可以在[https://medium.freecodecamp.org/css-in-javascript-the-future-of-component-based-styling-70b161a79a32](https://medium.freecodecamp.org/css-in-javascript-the-future-of-component-based-styling-70b161a79a32)阅读更多关于JS中的CSS。
- en: Class components versus functional components
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类组件与函数组件
- en: We just defined React components as functions that return a piece of the UI.
    This is a useful way of thinking about them, and is certainly true for our `App`
    component. However, there's another way of writing React components.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚将React组件定义为返回UI片段的函数。这是一种有用的思考方式，对于我们的`App`组件来说当然是正确的。然而，还有另一种编写React组件的方式。
- en: Right now, our `App` component is a functional component. This means it's literally
    written as a function, but you can also write components as JavaScript classes.
    These are called **class-based** or **stateful** components (we'll talk about
    the stateful part in a bit).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`App`组件是一个函数组件。这意味着它实际上是作为一个函数编写的，但你也可以将组件编写为JavaScript类。这些被称为**基于类**或**有状态**组件（我们稍后会讨论有状态部分）。
- en: 'JavaScript classes are a new feature of ES6\. They work in a similar (but not
    identical) way to classes in other languages. We won''t delve too deep into them
    here, but for our purpose, you can do the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript类是ES6的一个新特性。它们以一种类似（但不完全相同）的方式工作于其他语言中的类。我们不会在这里深入探讨它们，但是对于我们的目的，你可以做到以下几点：
- en: Have a class extend another class (and inherit its properties)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让一个类扩展另一个类（并继承其属性）
- en: Create an instance of a class with the new keyword (that is, instantiate it)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用new关键字创建一个类的实例（即实例化它）
- en: Let's see an example by converting our `App` component into a class-based component.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过将我们的`App`组件转换为基于类的组件来看一个例子。
- en: 'Every class component must do two things: it must extend the `Component` class
    from the React library, and it must have a `render` method.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类组件必须做两件事：它必须扩展React库中的`Component`类，并且它必须有一个`render`方法。
- en: 'Let''s start by importing the `Component` class from React:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从React中导入`Component`类开始：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For those of you unfamiliar with this syntax, it''s an example of object destructuring
    in ES6\. Consider the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对这种语法不熟悉的人来说，这是ES6中对象解构的一个例子。考虑以下内容：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Object destructuring turns the preceding code into this, which saves some typing,
    but does the same thing:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对象解构将前面的代码转换为这样，这样可以节省一些输入，但是做的事情是一样的：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Anyway, now that we''ve imported our `Component` class, let''s make a class
    that extends it; delete our `App` function, and write the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，既然我们已经导入了我们的`Component`类，让我们创建一个扩展它的类；删除我们的`App`函数，并编写以下内容：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'JavaScript classes function a lot like objects. They can have properties that
    are either values or functions (called methods). As we said earlier, we need a
    `render` method. Here''s what that looks like:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript类的功能很像对象。它们可以有属性，这些属性可以是值或函数（称为方法）。正如我们之前所说，我们需要一个`render`方法。下面是它的样子：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'What does the `render` method do? In essence, when we wrote our `App` as a
    functional component, it consisted solely of a `render` method. The whole thing
    was just a big `render()`. So, the render method does what we expect from a React
    component: it returns a bit of the view:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`render`方法做什么？实质上，当我们将我们的`App`作为一个函数组件编写时，它仅由一个`render`方法组成。整个东西只是一个大的`render()`。因此，`render`方法做了我们从React组件中期望的事情：它返回了一部分视图：'
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you start up the app (or if it's already running), you'll note that nothing
    has changed at all.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你启动了应用程序（或者它已经在运行），你会注意到什么都没有改变。
- en: So, what is the difference between a class component and a functional component?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，类组件和函数组件之间有什么区别呢？
- en: A best practice is to try to make as many small, functional components as possible
    in your application. They're a bit faster performance-wise, and the React team
    has expressed an interest in optimizing the library for functional components.
    They're also easier to understand.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一个最佳实践是尽可能在应用程序中创建尽可能多的小型功能组件。从性能上讲，它们会快一点，而且React团队已经表达了对优化函数组件的兴趣。它们也更容易理解。
- en: 'However, class components give us a lot of handy functionality. They can have
    properties, which we then use in the `render` method:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，类组件给了我们很多方便的功能。它们可以有属性，然后我们在`render`方法中使用这些属性：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can call methods from the `render` method:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从`render`方法中调用方法：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As we discussed earlier, classes can be instantiated (in syntax such as `const
    app = new App()`). This is what React does in our `ReactDOM.render` call; it instantiates
    our `App` and then calls the `render` method to get the JSX.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的那样，类可以被实例化（在诸如`const app = new App()`的语法中）。这就是React在我们的`ReactDOM.render`调用中所做的；它实例化我们的`App`，然后调用`render`方法来获取JSX。
- en: Therefore, it's still useful to think of React components as functions that
    return bits of view. Class components just add a little extra functionality wrapped
    around that `render` function.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将React组件视为返回视图片段的函数仍然是有用的。类组件只是在`render`函数周围添加了一些额外的功能。
- en: Our second component
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第二个组件
- en: We've made one React component; let's make another!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经制作了一个React组件；让我们再制作一个！
- en: As we discussed earlier, the goal of this chapter is to create our application's
    login page. First, let's create a folder called `components/` in our `src` folder,
    and then inside, let's create a file called `LoginContainer.js`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，本章的目标是创建我们应用程序的登录页面。首先，让我们在我们的`src`文件夹中创建一个名为`components/`的文件夹，然后在里面创建一个名为`LoginContainer.js`的文件。
- en: If you still have the folder from our [Chapter 2](part0048.html#1DOR00-7dd7c66301294003b85168009fe95fa4),
    *Getting Started with* *Webpack*, with `Component1.js`, `Component2.js`, and `Component3.js`,
    feel free to delete those files now.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然有我们[第2章](part0048.html#1DOR00-7dd7c66301294003b85168009fe95fa4)中的文件夹，*开始使用Webpack*，其中包括`Component1.js`，`Component2.js`和`Component3.js`，现在可以随意删除这些文件。
- en: 'Our `LoginContainer` will be another class component, for reasons that we''ll
    look at down the road. Just as with our app, let''s set up a basic class component
    skeleton:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`LoginContainer`将是另一个类组件，原因我们将在后面看。就像我们的应用程序一样，让我们设置一个基本的类组件框架：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's test out rendering our component before we dive any further in. Return
    a simple `<h1>Hello from LoginContainer</h1>` from our `render` method; then,
    let's jump back to our `App.js`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在深入研究之前测试一下渲染我们的组件。从我们的`render`方法中返回一个简单的`<h1>Hello from LoginContainer</h1>`；然后，让我们回到我们的`App.js`。
- en: 'I''m a bit of a stickler for code organization, so before we go on, let''s
    move our `App.js` inside our `components` folder. This also means that we''ll
    have to change our import statement in `index.js` to the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我对代码组织有点挑剔，所以在继续之前，让我们将我们的`App.js`移动到我们的`components`文件夹中。这也意味着我们将不得不更改`index.js`中的导入语句如下：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Also, move our `app.css` inside the `components` folder, and then change our
    hot reloader configuration inside `index.js`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 还有，将我们的`app.css`移到`components`文件夹中，然后在`index.js`中更改我们的热重载器配置：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that all our components are living together in the same folder, it's much
    better.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们所有的组件都住在同一个文件夹里，这样好多了。
- en: 'Inside `App.js`, we first import the `LoginContainer`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.js`中，我们首先导入`LoginContainer`：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, we `render` it instead of the `<h1>`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将其`render`而不是`<h1>`：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Flip back to the app, and you should see the Hello from LoginContainer of our
    new component:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 翻转回到应用程序，你应该看到我们新组件的LoginContainer的Hello：
- en: '![](../images/00025.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00025.jpeg)'
- en: 'As we shall see as we build more components, our `App` will be a wrapper for
    our main `Container` component. It''ll be, in essence, a container for our Containers.
    Inside `App.js`, let''s wrap our `LoginContainer` in a `div#container` for CSS
    purposes:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在构建更多组件时将看到的那样，我们的`App`将是我们主要`Container`组件的包装器。它将是我们容器的容器。在`App.js`中，让我们为了CSS的目的将我们的`LoginContainer`包装在一个`div#container`中：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Alright, getting back to `LoginContainer.js`, let's write some JSX!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，回到`LoginContainer.js`，让我们写一些JSX！
- en: 'Delete our `<h1>` tag and replace it with the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 删除我们的`<h1>`标签，并用以下内容替换它：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is a pattern I really like--having most React components wrapped in a `div`
    with an `id` of the class name; it's just a preference, though (a preference you'll
    have to follow for this book, since I wrote the CSS!).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我非常喜欢的一种模式 - 大多数React组件都包裹在一个带有类名的`div`中；尽管这只是一种偏好（一种你必须遵循的偏好，因为我写了CSS！）。
- en: Note the brackets around the JSX! This format makes multiline JSX much more
    readable.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意JSX周围的括号！这种格式使多行JSX更易读。
- en: 'The essence of our login form is, of course, a form. This form will handle
    both login and signup. Here''s the basic JSX:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们登录表单的本质就是一个表单。这个表单将处理登录和注册。以下是基本的JSX：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the preceding JSX, you may note that I wrote `className` instead of class
    for the `<button>`. Remember that I said JSX had a few caveats? This is one: since
    class is a protected keyword in JavaScript, we can''t use it, so we use `className`
    instead. You''ll get used to it in no time.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的JSX中，你可能注意到我写了`<button>`的`className`而不是class。记住我说过JSX有一些注意事项吗？这就是其中之一：因为class是JavaScript中的一个受保护的关键字，我们不能使用它，所以我们使用`className`代替。你很快就会习惯的。
- en: On that note, pay attention to the `ID` and `className` in the preceding JSX,
    otherwise your CSS won't look spiffy.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意前面JSX中的`ID`和`className`，否则你的CSS看起来就不会那么漂亮。
- en: 'Above our form, we''ll write a basic header with our logo:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的表单上面，我们将写一个带有我们的标志的基本标题：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Your app should now look like this (if you haven''t done so, delete the `<h1>`
    and `<img>` tags from `index.html`):'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的应用程序应该看起来像这样（如果你还没有这样做，请从`index.html`中删除`<h1>`和`<img>`标签）：
- en: '![](../images/00026.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00026.jpeg)'
- en: Looks pretty, but what does it do?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来漂亮，但它能做什么呢？
- en: State in React
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React中的状态
- en: Every React component has something called **state.** You can think of this
    as the configuration of the component at a certain point of time.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每个React组件都有一个叫做**state**的东西。你可以把它看作是组件在某个特定时间点的配置。
- en: 'Take, for example, a heart icon that turns red when you click on it, as in
    the case of Twitter. The button has two states: **unclicked** and **clicked***.*
    Clicking on the button causes its state, and thus its appearance, to change.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，当你点击它时变红的心形图标，就像Twitter的情况一样。按钮有两种状态：**未点击**和**已点击**。点击按钮会导致它的状态，从而导致它的外观发生变化。
- en: That's the flow in React; user actions or events cause the component state to
    change, which causes the component's appearance to change.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是React的流程；用户的操作或事件会导致组件状态的改变，从而导致组件的外观改变。
- en: 'The preceding statement comes with an enormous helping of "Well, not always…,"
    but it''s a useful starting point to understand state:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的陈述带有大量的“嗯，并不总是……”，但这是理解状态的一个有用的起点：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Let's add some `state` to our `LoginContainer`, and then go from there.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给我们的`LoginContainer`添加一些`state`，然后从那里开始。
- en: 'State is easy to define; it''s an object that is the property of the class.
    We can define it as shown:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 状态很容易定义；它是类的属性的对象。我们可以像这样定义它：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We always define `state` at the top of our component.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总是在组件的顶部定义`state`。
- en: 'We can then access our `state` right in the `render` method:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在`render`方法中访问我们的`state`：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, the curly braces inside JSX mean we're inserting some
    Javascript code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，JSX中的花括号表示我们正在插入一些Javascript代码。
- en: This is how we initialize our `state`, but this state isn't very useful, since
    there’s no mechanism for changing it.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们初始化`state`的方式，但这个状态并不是很有用，因为没有改变它的机制。
- en: What we need to do is to provide a way to respond to user events, and modify
    the state based on them.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的是提供一种响应用户事件并根据它们修改状态的方法。
- en: What if the text changed when the user clicked on Hello from state!?
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户点击Hello from state!时文本发生了变化会怎么样？
- en: 'Let''s add an `onClick` property to our `h1` tag, as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给我们的`h1`标签添加一个`onClick`属性，如下所示：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It references a method on our class called `handleClick`, which we can define
    as shown:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 它引用了我们类上的一个叫做`handleClick`的方法，我们可以定义如下：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Inside `handleClick`, we want to change our state. We can do that in React via
    a function called `this.setState`, into which we pass the new state object.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`handleClick`中，我们想要改变我们的状态。我们可以通过React中的一个叫做`this.setState`的函数来实现这一点，我们将新的状态对象传递给它。
- en: Try it out! When you click on Hello from state!, it should immediately change
    to the new text.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 试一试！当你点击Hello from state!时，它应该立即改变为新的文本。
- en: So, how does this work? What `setState` does is to take the object passed in
    as an argument and merge it into the current state (if you have multiple properties
    in state but only pass in an object with one property to `setState`, it'll change
    only that property, rather than overwriting the rest). Then, it calls the `render()`
    method again, and our component is updated in the DOM to reflect the new state.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这是如何工作的呢？`setState`的作用是将传入的对象合并到当前状态中（如果状态中有多个属性，但只传入一个属性的对象给`setState`，它将只改变该属性，而不是覆盖其他属性）。然后，它再次调用`render()`方法，我们的组件在DOM中更新以反映新的状态。
- en: If this seems confusing, don't worry, we have a couple more examples to go through,
    so you’ll get a bit more practice with component state.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这看起来令人困惑，不用担心，我们还有几个例子要讲解，所以你会对组件状态有更多的练习。
- en: Our `LoginContainer` will have two pieces of state, one to go with each `<input>`
    tag. We will store what the user types in the email and password fields in state
    so that when they submit the form, we can access them.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`LoginContainer`将有两个状态，一个与每个`<input>`标签配对。我们将在状态中存储用户在电子邮件和密码字段中输入的内容，以便在他们提交表单时我们可以访问它们。
- en: '"Hold on Scott," you may say, "Why don''t we just reach into the DOM and grab
    the value of each input when the user submits the form, the jQuery way?"'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: “等一下，斯科特，”你可能会说，“为什么我们不直接进入DOM，当用户提交表单时抓取每个输入的值，用jQuery的方式呢？”
- en: 'We can certainly do that, but it will break the React flow, which is as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然可以这样做，但这将打破React的流程，具体如下：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This way, our input's value is stored in state and the view is kept in sync
    with it, rather than having our input's value stored as a property of a DOM element,
    and accessed when needed.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们的输入值就存储在状态中，视图与之保持同步，而不是将输入值存储为DOM元素的属性，并在需要时访问它。
- en: The advantage of this approach may not seem obvious at this point, but it makes
    our code much more explicit and understandable.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优势在这一点上可能并不明显，但它使我们的代码更加明确和可理解。
- en: 'So, in the preceding flow, we need to update our state whenever the user changes
    an input. First, let''s change how our state initializes:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在上述流程中，每当用户更改输入时，我们需要更新我们的状态。首先，让我们改变我们的状态初始化方式：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, let''s delete `handleClick` and add the `handleEmailChange` and `handlePasswordChange`
    methods to our component:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们删除`handleClick`并将`handleEmailChange`和`handlePasswordChange`方法添加到我们的组件中：
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding methods take in an event (the user typing in the field), grab
    the value from the event, and then set state to that value.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法接收一个事件（用户在字段中输入），从事件中获取值，然后将状态设置为该值。
- en: Again, note that we don't have to define both the email and password every time
    we call `setState`; it will merge in the changes to the existing state object
    without overwriting the other values.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，我们不必每次调用`setState`时都定义电子邮件和密码；它将合并到现有状态对象的更改，而不会覆盖其他值。
- en: 'Okay, now the last step. Let''s add the `onChange` properties to our inputs,
    which call our change handlers. Another crucial step is that our input''s `value`
    must be derived from state. We can do so like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在是最后一步。让我们为我们的输入添加`onChange`属性，调用我们的change处理程序。另一个关键步骤是，我们的输入的`value`必须来源于状态。我们可以这样做：
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can reset your `h1` to `<h1>Chatastrophe</h1>`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将您的`h1`重置为`<h1>Chatastrophe</h1>`。
- en: 'If everything worked out, you should note no change in how your input functions
    (if there''s a typo in your code, you won''t be able to type in one or the other).
    Let''s ensure that it''s actually working by adding a handler for when our form
    submits:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您应该注意到您的输入功能没有任何变化（如果您的代码中有拼写错误，您将无法在其中一个字段中输入）。让我们通过为表单提交添加一个处理程序来确保它实际上是有效的：
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And our method:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 和我们的方法：
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The preceding method will just log out the state for us when the user submits
    the form (clicks on the button), and prevent the form from actually submitting.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交表单（点击按钮）时，上述方法将只为我们记录状态，并阻止表单实际提交。
- en: 'Try typing in both fields and then click on Submit. You should see a console
    log with the `state` object:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在两个字段中输入，然后单击提交。您应该看到一个带有`state`对象的控制台日志：
- en: '[PRE29]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We did it! Our first React component with state.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做到了！我们的第一个具有状态的React组件。
- en: 'I hope you''ve gotten a sense of the React data flow. Our application has state
    (stored in different components), which updates in response to events (often user-initiated),
    which causes parts of our application to rerender in response to the new state:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你已经对React数据流有了一定的了解。我们的应用程序具有状态（存储在不同的组件中），它会在事件（通常是用户发起的）的响应中更新，这会导致我们应用程序的部分根据新状态重新渲染：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: It's a simple pattern once you wrap your head around it, and makes it easy to
    trace why your application looks the way it does at any point of time.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你理解了这种简单的模式，就很容易追踪你的应用程序在任何时间点看起来的原因。
- en: Reusing components
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重用组件
- en: There's one more change I want to make before we finish up with our `LoginContainer`
    skeleton.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成`LoginContainer`骨架之前，我想再做一个改变。
- en: We talked earlier about making React components reusable, so you can implement
    the same code in multiple places in your application. We should try to split our
    UI into as many small and reusable pieces as possible to save us time, and I see
    a great candidate in our `LoginContainer`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前谈到过如何使React组件可重用，这样你就可以在应用程序的多个地方实现相同的代码。我们应该尽量将我们的UI拆分成尽可能多的小而可重用的部分，以节省时间，我在我们的`LoginContainer`中看到了一个很好的候选者。
- en: '`LoginContainer` won''t be our only container. In the next few chapters, we''ll
    create new pages with different content, but we want them to have the same look,
    and we''ll want to have the Chatastrophe logo and title at the top in the same
    place as it is now.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoginContainer`不会是我们唯一的容器。在接下来的几章中，我们将创建具有不同内容的新页面，但我们希望它们具有相同的外观，并且我们希望Chatastrophe的标志和标题仍然在顶部的相同位置。'
- en: What I propose is that we make a new `Header` component that we can save for
    future use.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议我们制作一个新的`Header`组件，以备将来使用。
- en: Now, we made our `LoginContainer` a class component because we needed to use
    state and methods. Our header, on the other hand, won't have any state or functionality;
    it's literally just a piece of UI. The best choice is to make it a functional
    component, because we can.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将`LoginContainer`设置为类组件，因为我们需要使用状态和方法。另一方面，我们的页眉不会有任何状态或功能；它只是一个UI元素。最好的选择是将其设置为函数组件，因为我们可以。
- en: The rule for a class versus a functional component is essentially make a component
    functional wherever you can, unless you need state or methods.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 类组件与函数组件的规则基本上是，尽可能将组件设置为函数组件，除非你需要状态或方法。
- en: 'Inside our `src/` components folder, make a new file called `Header.js`. Then,
    we can create the skeleton of a functional component. Copy and paste the relevant
    `div#Header` from `LoginContainer` and add it as the `return` statement:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`src/`组件文件夹中，创建一个名为`Header.js`的新文件。然后，我们可以创建一个函数组件的框架。复制并粘贴`LoginContainer`中相关的`div#Header`，并将其添加为`return`语句：
- en: '[PRE31]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, back in our `LoginContainer`, we want to import our header, as illustrated:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到我们的`LoginContainer`，我们想要导入我们的页眉，如下所示：
- en: '[PRE32]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then we can replace the `div#Header` with a simple `<Header />` tag:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以用简单的`<Header />`标签替换`div#Header`：
- en: '[PRE33]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Another JSX gotcha--all JSX tags must be closed. You can’t just use `<Header>`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个JSX的陷阱是，所有的JSX标签都必须关闭。你不能只是使用`<Header>`。
- en: That's it! That's all it takes to make a small, reusable component. Our `LoginContainer`
    now looks cleaner, and we’ve saved ourselves some typing down the road.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！制作一个小型、可重用的组件就是这么简单。我们的`LoginContainer`现在看起来更整洁了，而且我们节省了一些将来的打字时间。
- en: Our login form looks fantastic, but there's a problem. As you demo it for the
    team at Chatastrophe headquarters (the team having somehow swelled to twenty,
    despite you being the only developer), an intern raises her hand--"How does it
    actually, you know, work?"
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的登录表单看起来很棒，但有一个问题。当你在Chatastrophe总部向团队进行演示时（尽管你是唯一的开发人员，但团队不知何故膨胀到了二十人），一名实习生举手发问：“它实际上是怎么工作的？”
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We created our first stateful React component, a login form. We learned all
    about React components, and best practices for creating them. We then built our
    login form and covered how to handle changes to the form, updating our state.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了我们的第一个有状态的React组件，一个登录表单。我们学习了关于React组件的所有知识，以及创建它们的最佳实践。然后我们构建了我们的登录表单，并介绍了如何处理表单的更改，更新我们的状态。
- en: Unfortunately, a login form that only logs out the email and password isn't
    that useful (or secure!). Our next step will be to set up the backend of our application
    so that users can actually create accounts and log in.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，只记录电子邮件和密码的登录表单并不那么有用（或安全！）。我们的下一步将是设置应用程序的后端，以便用户实际上可以创建账户并登录。
