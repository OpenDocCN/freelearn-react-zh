- en: Controlling Image Display
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制图像显示
- en: So far, the examples in this book haven't rendered any images on mobile screens.
    This doesn't reflect the reality of mobile applications. Web applications display
    lots of images. If anything, native mobile applications rely on images even more
    than web applications because images are a powerful tool when you have a limited
    amount of space.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书中的示例在移动屏幕上还没有渲染任何图像。这并不反映移动应用程序的现实情况。Web应用程序显示大量图像。如果说什么，原生移动应用程序比Web应用程序更依赖图像，因为图像是在有限空间下的强大工具。
- en: You'll learn how to use the React Native `Image` component in this chapter,
    starting with loading images from different sources. Then, you'll see how you
    can use the `Image` component to resize images, and how you can set placeholders
    for lazily loaded images. Finally, you'll learn how to implement icons using the
    `react-native-vector-icons` package.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用React Native的`Image`组件，从不同来源加载图像。然后，您将看到如何使用`Image`组件调整图像大小，以及如何为懒加载的图像设置占位符。最后，您将学习如何使用`react-native-vector-icons`包实现图标。
- en: Loading images
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载图像
- en: 'Let''s get things started by figuring out how to load images. You can render
    the `<Image>` component and pass it properties just like any other React component.
    But this particular component needs image blob data to be of any use. Let''s look
    at some code:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始解决如何加载图像的问题。您可以渲染`<Image>`组件并像任何其他React组件一样传递属性。但是这个特定的组件需要图像blob数据才能发挥作用。让我们看一些代码：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are two ways to load the blob data into an `<Image>` component. The first
    approach loads the image data from the network. This is done by passing an object
    with a `uri` property to `source`. The second `<Image>` component in this example
    is using a local image file, by calling `require()` and passing the result to
    `source`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以将blob数据加载到`<Image>`组件中。第一种方法是从网络加载图像数据。通过将带有`uri`属性的对象传递给`source`来实现。在这个例子中的第二个`<Image>`组件是使用本地图像文件，通过调用`require()`并将结果传递给`source`。
- en: Take a look at the `sourceProp` property type validator. This gives you an idea
    of what can be passed to the `source` property. It's either an object with a `uri`
    string property or a number. It expects a number because `require()` returns a
    number.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下`sourceProp`属性类型验证器。这让您了解可以传递给`source`属性的内容。它要么是一个带有`uri`字符串属性的对象，要么是一个数字。它期望一个数字，因为`require()`返回一个数字。
- en: 'Now, let''s see what the rendered result looks like as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看渲染结果如下：
- en: '![](Images/91c9947b-0c8f-4e97-be62-ea2a1317bf82.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/91c9947b-0c8f-4e97-be62-ea2a1317bf82.png)'
- en: 'Here''s the style that was used with these images:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与这些图像一起使用的样式：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that without `width` and `height` style properties, images will not render.
    In the next section, you'll learn how image resizing works when `width` and `height`
    values are set.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果没有`width`和`height`样式属性，图像将不会渲染。在下一节中，您将学习在设置`width`和`height`值时图像调整大小的工作原理。
- en: Resizing images
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整图像大小
- en: The `width` and `height` style properties of `Image` components determine the
    size of what's rendered on the screen. For example, you'll probably have to work
    with images at some point that have a larger resolution than you want displayed
    in your React Native application. Simply setting the `width` and `height` style
    properties on the `Image` is enough to properly scale the image.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`Image`组件的`width`和`height`样式属性决定了在屏幕上渲染的大小。例如，您可能会在某个时候需要处理分辨率比您在React Native应用程序中想要显示的更大的图像。只需在`Image`上设置`width`和`height`样式属性就足以正确缩放图像。'
- en: 'Let''s look at some code that lets you dynamically adjust the dimensions of
    an image using a control as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些代码，让您可以使用控件动态调整图像的尺寸，如下所示：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s what the image looks like if you''re using the default 100 x 100 dimensions:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用默认的100 x 100尺寸，图像的外观如下：
- en: '![](Images/b40ab7d7-8519-454a-a44d-8edff602c351.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b40ab7d7-8519-454a-a44d-8edff602c351.png)'
- en: 'Here''s a scaled-down version of the image:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是图像的缩小版本：
- en: '![](Images/801928a3-1a5b-425a-b415-11b2c971d59d.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/801928a3-1a5b-425a-b415-11b2c971d59d.png)'
- en: 'Lastly, here''s a scaled-up version of the image:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是图像的放大版本：
- en: '![](Images/53427742-e4ed-4b55-9369-fdd00facd101.png)There''s a `resizeMode`
    property that you can pass to `Image` components. This determines how the scaled
    image fits within the dimensions of the actual component. You''ll see this property
    in action in the final section of this chapter.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/53427742-e4ed-4b55-9369-fdd00facd101.png)“Image”组件可以传递“resizeMode”属性。这确定了缩放图像如何适应实际组件的尺寸。您将在本章的最后一节中看到此属性的作用。'
- en: Lazy image loading
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟加载图像
- en: Sometimes, you don't necessarily want an image to load at the exact moment that
    it's rendered. For example, you might be rendering something that's not yet visible
    on the screen. Most of the time, it's perfectly fine to fetch the image source
    from the network before it's actually visible. But if you're fine-tuning your
    application and discover that loading lots of images over the network causes performance
    issues, you can lazily—load the source.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您不一定希望图像在渲染时立即加载。例如，您可能正在渲染尚未在屏幕上可见的内容。大多数情况下，从网络获取图像源在实际可见之前是完全可以的。但是，如果您正在微调应用程序并发现通过网络加载大量图像会导致性能问题，您可以懒惰地加载源。
- en: I think the more common use case in a mobile context is handling a scenario
    where you've rendered one or more images where they're visible, but the network
    is slow to respond. In this case, you will probably want to render a placeholder
    image so that the user sees something right away, rather than empty space.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为在移动环境中更常见的用例是处理渲染一个或多个图像的情况，其中它们是可见的，但网络响应速度很慢。在这种情况下，您可能希望渲染一个占位图像，以便用户立即看到一些东西，而不是空白空间。
- en: 'To do this, you can implement an abstraction that wraps the actual image that
    you want to show once it''s loaded. Here''s the code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，您可以实现一个包装实际图像的抽象，一旦加载完成，您就可以显示它。以下是代码：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This component renders a `View` with two `Image` components inside. It also
    has a `loaded` state, which is initially false. When `loaded` is false, the placeholder
    image is rendered. The `loaded` state is set to true when the `onLoad()` handler
    is called. This means that the placeholder image is removed, and the main image
    is displayed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件呈现一个带有两个“Image”组件的“View”。它还具有一个“loaded”状态，最初为false。当“loaded”为false时，将呈现占位图像。当调用“onLoad（）”处理程序时，“loaded”状态设置为true。这意味着占位图像被移除，主图像被显示。
- en: 'Now let''s use the `LazyImage` component that you''ve just implemented. You''ll
    render the image without a source, and the placeholder image should be displayed.
    Let''s add a button that gives the lazy image a source, and when it loads, the
    placeholder image should be replaced. Here''s what the main app module looks like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用您刚刚实现的“LazyImage”组件。您将渲染没有源的图像，并且应该显示占位图像。让我们添加一个按钮，为懒惰图像提供源，当它加载时，占位图像应该被替换。主应用程序模块的外观如下：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is what the screen looks like initially:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是屏幕最初的样子：
- en: '![](Images/1121ca04-d35f-4b1a-8400-9cc5ae289db0.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1121ca04-d35f-4b1a-8400-9cc5ae289db0.png)'
- en: 'Then, if you click the Load Remote button, you''ll eventually see the image
    that we actually want:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果单击“加载远程”按钮，最终将看到我们实际想要的图像：
- en: '![](Images/1d6dbeaa-95cf-4594-b1c6-145df85e3d84.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1d6dbeaa-95cf-4594-b1c6-145df85e3d84.png)'
- en: You might notice that, depending on your network speed, the placeholder image
    remains visible even after you click the Load Remote button. This is by design,
    because you don't want to remove the placeholder image until you know for sure
    that the actual image is ready to be displayed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，根据你的网络速度，占位图片在你点击加载远程按钮后仍然可见。这是有意设计的，因为你不希望在确保实际图片准备好显示之前移除占位图片。
- en: Rendering icons
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染图标
- en: In the final section of this chapter, you'll learn how to render icons in React
    Native components. Using icons to indicate meaning makes web applications more
    usable. So, why should native mobile applications be any different?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后一节中，你将学习如何在React Native组件中渲染图标。使用图标来表示含义使web应用更易用。那么，原生移动应用为什么要有所不同呢？
- en: 'You''ll want to use the `react-native-vector-icons` package to pull in various
    vector font packages into your React Native project:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你会想要使用`react-native-vector-icons`包将各种矢量字体包引入到你的React Native项目中：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now you can import the `Icon` component and render them. Let''s implement an
    example that renders several `FontAwesome` icons based on a selected icon category:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以导入`Icon`组件并渲染它们。让我们实现一个示例，根据选择的图标类别渲染几个`FontAwesome`图标：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you run the example, you should see something that looks like the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行示例时，你应该看到类似以下的东西：
- en: '![](Images/be6fc32f-96f8-416d-b798-42da75a7de63.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/be6fc32f-96f8-416d-b798-42da75a7de63.png)'
- en: The color of each icon is specified in the same way you would specify the color
    of text, via styles.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每个图标的颜色都是以与文本颜色相同的方式指定的，通过样式。
- en: Summary
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about handling images in your React Native applications.
    Images in a native application are just as important in a native mobile context
    as they are in a web context—they improve the user experience.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何在React Native应用中处理图片。在原生移动应用中，图片和在web上下文中一样重要——它们提高了用户体验。
- en: You learned the different approaches to loading images, and then how to resize
    them. You also learned how to implement a lazy image that uses a placeholder image
    to display while the actual image is loading. Finally, you learned how to use
    icons in a React Native app.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你学会了加载图片的不同方法，然后如何调整它们的大小。你还学会了如何实现一个懒加载图片，使用占位图片来显示，直到实际图片加载完成。最后，你学会了如何在React
    Native应用中使用图标。
- en: In the next chapter, you'll learn about local storage in React Native, which
    is handy when your app goes offline.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习关于React Native中的本地存储，这在你的应用离线时非常方便。
- en: Test your knowledge
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检验你的知识
- en: What types of values does the `source` property of the `Image` component accept?
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Image`组件的`source`属性接受什么类型的值？'
- en: '`Image` components accept paths to local files.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Image`组件接受本地文件的路径。'
- en: '`Image` components accept remote image URLs.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Image`组件接受远程图片URL的路径。'
- en: '`Image` components accept paths to local files and remote image URLs.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Image`组件接受本地文件和远程图片URL的路径。'
- en: What should you use as a placeholder while images load?
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图片加载时，你应该使用什么作为占位符？
- en: You should use a placeholder image that makes sense for the context where the
    image is used.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该使用一个在图片使用的上下文中有意义的占位图片。
- en: You should use an `ActivityIndicator` component for any images on the screen
    that haven't loaded yet.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该为屏幕上尚未加载的任何图片使用`ActivityIndicator`组件。
- en: The `Image` component automatically handles placeholders for you.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Image`组件会自动为你处理占位符。'
- en: How can you scale an image using the `Image` component?
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用`Image`组件来缩放图片？
- en: You have to make sure that only scaled images are used in the Image component.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须确保`Image`组件中只使用缩放后的图片。
- en: By setting the `width` and the `height` property, the `Image` component will
    automatically handle scaling the image for you.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置`width`和`height`属性，`Image`组件将自动处理图像的缩放。
- en: Scaling images in a mobile app is CPU intensive and should be avoided.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在移动应用程序中缩放图像会消耗大量CPU，并且应该避免。
- en: Is it worth installing the `react-native-vector-icons` package for your app?
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 值得为您的应用程序安装`react-native-vector-icons`包吗？
- en: Yes, this package makes thousands of icons available to your app and icons are
    an important tool for communicating intent to users.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，这个包可以为您的应用程序提供数千个图标，并且图标是向用户传达意图的重要工具。
- en: No, it's a lot of overhead and icons aren't helpful in mobile apps.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，这会增加很多额外开销，并且图标在移动应用程序中并不有用。
- en: Further reading
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Check out the following links for more information:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以获取更多信息：
- en: '[https://facebook.github.io/react-native/docs/image](https://facebook.github.io/react-native/docs/image)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/image](https://facebook.github.io/react-native/docs/image)'
- en: '[https://github.com/oblador/react-native-vector-icons](https://github.com/oblador/react-native-vector-icons)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/oblador/react-native-vector-icons](https://github.com/oblador/react-native-vector-icons)'
