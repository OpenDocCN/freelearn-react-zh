- en: Validating Component Properties
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证组件属性
- en: In this chapter, you'll learn about property validation in React components.
    This might seem simple at first glance, but it's an important topic because it
    leads to bug-free components. I'll start things off with a discussion about **predictable
    outcomes** and how this leads to components that are portable throughout the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习关于React组件中的属性验证。乍一看，这可能看起来很简单，但这是一个重要的主题，因为它可以使组件无bug。我将从讨论**可预测的结果**开始，以及如何使组件在整个应用程序中具有可移植性。
- en: Next, you'll walk through examples of some of the type-checking property validators
    that come with React. Then, you'll walk through some more complex property-validation
    scenarios. Finally, I'll wrap the chapter up with an example of how to implement
    your own custom validators.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将通过一些React自带的类型检查属性验证器的示例进行学习。然后，你将学习一些更复杂的属性验证场景。最后，我将用一个示例来结束本章，展示如何实现自定义验证器。
- en: Knowing what to expect
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解预期结果
- en: '**Property validation** in React components is like field validation in HTML
    forms. The basic premise of validating form fields is letting the user know that
    they''ve provided a value that''s not acceptable. Ideally, the validation error
    message is clear enough that the user can easily fix the situation. With React
    component property validation, you''re doing the same thing—making it easy to
    fix a situation where an unexpected value was provided. Property validation enhances
    the developer experience, rather than the user experience.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在React组件中的**属性验证**就像HTML表单中的字段验证。验证表单字段的基本原则是让用户知道他们提供了一个不可接受的值。理想情况下，验证错误消息应该清晰明了，以便用户可以轻松地解决问题。通过React组件属性验证，你正在做同样的事情——让意外值的情况变得容易修复。属性验证增强了开发人员的体验，而不是用户体验。
- en: The key aspect of property validation is knowing what's passed into the component
    as a property value. For example, if you're expecting an array and a boolean is
    passed instead, something will probably go wrong. If you validate the property
    values using the `prop-types` React validation package, then you know that something
    unexpected was passed. If the component is expecting an array so that it can call
    the `map()` method, it'll fail if a Boolean value is passed because it has no
    `map()` method. However, before this failure happens, you'll see the property
    validation warning.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 属性验证的关键方面是了解作为属性值传递到组件的内容。例如，如果你期望一个数组，而实际传递了一个布尔值，可能会出现问题。如果你使用`prop-types`
    React验证包来验证属性值，那么你就知道传递了一些意外的内容。如果组件期望一个数组以便调用`map()`方法，如果传递了布尔值，它将失败，因为布尔值没有`map()`方法。然而，在这种失败发生之前，你会看到属性验证警告。
- en: The idea isn't to **fail fast** with property validation. It's to provide information
    to the developer. When property validation fails, you know that something was
    provided as a component property that shouldn't have been. It's a matter of finding
    where the value is passed in the code and fixing it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是要通过属性验证来**快速失败**，而是为开发人员提供信息。当属性验证失败时，你知道作为组件属性提供了一些不应该有的内容。这是要找到代码中传递值的位置并修复它的问题。
- en: Fail fast is an architectural property of software in which the system will
    crash completely rather than continue running in an inconsistent state.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 快速失败是软件架构的一个特性，系统会完全崩溃，而不是继续以不一致的状态运行。
- en: Promoting portable components
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推广可移植组件
- en: When you know what to expect from your component properties, the context in
    which the component is used becomes less important. This means that as long as
    the component is able to validate its property values, it really shouldn't matter
    where the component is used; it could easily be used by any feature.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当您知道组件属性可以期望什么时，组件使用的上下文变得不那么重要。这意味着只要组件能够验证其属性值，组件在哪里使用实际上并不重要；它可以轻松地被任何功能使用。
- en: If you want a generic component that's portable across application features,
    you can either write component validation code or you can write **defensive code**
    that runs at render time. The challenge with programming defensively is that it
    dilutes the value of declarative React components. Using React-style property
    validation, you can avoid writing defensive code. Instead, the property validation
    mechanism emits a warning when something doesn't pass, informing you that you
    need to fix something.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要一个通用组件，可以跨应用程序功能进行移植，您可以编写组件验证代码，也可以编写在渲染时运行的**防御性代码**。编程防御性的挑战在于它削弱了声明式React组件的价值。使用React风格的属性验证，您可以避免编写防御性代码。相反，属性验证机制在某些情况下会发出警告，通知您需要修复某些问题。
- en: Defensive code is code that needs to account for a number of edge cases during
    runtime, in a production environment. Coding defensively is necessary when potential
    problems cannot be detected during development, like with React component property
    validation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 防御性代码是在生产环境中需要考虑许多边缘情况的代码。在开发过程中无法检测到潜在问题时，例如React组件属性验证，编写防御性代码是必要的。
- en: Simple property validators
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单属性验证器
- en: In this section, you'll learn how to use the simple property type validators
    available in the `prop-types` package. Then, you'll learn how to accept any property
    value as well as make a property **required** instead of **optional**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何使用`prop-types`包中提供的简单属性类型验证器。然后，您将学习如何接受任何属性值，以及如何将属性**必需**而不是**可选**。
- en: Basic type validation
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本类型验证
- en: 'Let''s take a look at validators that handle the most primitive types of JavaScript
    values. You will use these validators frequently, as you''ll want to know that
    a property is a string or that it''s a function, for example. This example will
    also introduce you to the mechanisms involved with setting up validation on a
    component. Here''s the component; it just renders some properties using basic
    markup:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看处理JavaScript值最基本类型的验证器。您将经常使用这些验证器，因为您想知道一个属性是字符串还是函数，例如。这个例子还将介绍您在组件上设置验证所涉及的机制。这是组件；它只是使用基本标记呈现一些属性：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are two key pieces to the property validation mechanism. First, you have
    the static `propTypes` property. This is a class-level property, not an instance
    property. When React finds `propTypes`, it uses this object as the property specification
    of the component. Second, you have the `PropTypes` object from the `prop-types`
    package, which has several built-in validator functions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 属性验证机制有两个关键部分。首先，您有静态的`propTypes`属性。这是一个类级别的属性，而不是实例属性。当React找到`propTypes`时，它将使用此对象作为组件的属性规范。其次，您有来自`prop-types`包的`PropTypes`对象，其中包含几个内置的验证器函数。
- en: The `PropTypes` object used to be built into React. It was split from the React
    core and moved into the `prop-types` package so that it became an opt-in to use
    – a request by React developers that do not use property validation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`PropTypes`对象曾经是内置在React中的。它从React核心中分离出来，并移动到`prop-types`包中，因此成为了一个可选择使用的内容
    - 这是React开发人员的一个请求，他们不使用属性验证。'
- en: 'In this example, `MyComponent` has six properties, each with their own type.
    When you look at the `propTypes` specification, you can see what type of values
    this component will accept. Let''s render this component with some property values:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`MyComponent`有六个属性，每个属性都有自己的类型。当您查看`propTypes`规范时，可以看到这个组件将接受什么类型的值。让我们使用一些属性值来渲染这个组件：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The first time `<MyComponent>` is rendered, it uses the `validProps` properties.
    These values all meet the component property specification, so no warnings are
    logged in the console. The second time around, the `invalidProps` properties are
    used, and this fails the property validation, because the wrong type is used in
    every property. The console output should look something like the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次渲染`<MyComponent>`时，它使用`validProps`属性。这些值都符合组件属性规范，因此控制台中不会记录任何警告。第二次，使用`invalidProps`属性，这将导致属性验证失败，因为每个属性中都使用了错误的类型。控制台输出应该类似于以下内容：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This last error is interesting. You can clearly see that the property validation
    is complaining about the invalid property types. This includes the invalid function
    that was passed to `myFunc`. So, despite the type checking that happens on the
    property, the component will still try to call the value as though it were a function.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个错误很有趣。您可以清楚地看到属性验证正在抱怨无效的属性类型。这包括传递给`myFunc`的无效函数。因此，尽管在属性上进行了类型检查，但组件仍会尝试调用该值，就好像它是一个函数一样。
- en: 'Here''s what the rendered output looks like:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染输出如下所示：
- en: '![](Images/fe0fcdfb-8e2b-4b88-9860-538c1cee3c61.png)Once again, the aim of
    property validation in React components is to help you discover bugs during development.
    When React is in production mode, property validation is turned off completely.
    This means that you don''t have to concern yourself with writing expensive property
    validation code; it''ll never run in production. However, the error will still
    occur, so fix it.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/fe0fcdfb-8e2b-4b88-9860-538c1cee3c61.png)再次强调，React组件中属性验证的目的是帮助您在开发过程中发现错误。当React处于生产模式时，属性验证将完全关闭。这意味着您不必担心编写昂贵的属性验证代码；它永远不会在生产中运行。但是错误仍然会发生，所以要修复它。'
- en: Requiring values
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求值
- en: 'Let''s make some adjustments to the preceding example. The component property
    specification required specific types for values, but these are only checked if
    the property is passed to the component as a JSX attribute. For example, you could
    have completely omitted the `myFunc` property and it would have validated. Thankfully,
    the `PropTypes` functions have a tool that lets you specify that a property must
    be provided and it must have a specific type. Here''s the modified component:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对前面的示例进行一些调整。组件属性规范需要特定类型的值，但只有在将属性作为JSX属性传递给组件时才会进行检查。例如，您可以完全省略`myFunc`属性，它也会通过验证。幸运的是，`PropTypes`函数有一个工具，让您可以指定必须提供属性并且必须具有特定类型。以下是修改后的组件：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Not much has changed between this component and the one that you implemented
    in the preceding section. The main difference is with the specs in `propTypes`.
    The `isRequired` value is appended to each of the type validators used. So, for
    instance, `string.isRequired` means that the property value must be a string,
    and the property cannot be missing. Let''s put this component to the test now:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件和前面部分实现的组件之间没有太多变化。主要区别在于`propTypes`中的规格。`isRequired`值被附加到每个使用的类型验证器上。因此，例如，`string.isRequired`表示属性值必须是字符串，并且属性不能为空。现在让我们测试一下这个组件：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The first time around, the component is rendered with all of the correct property
    types. The second time around, the component is rendered without the `myObject`
    property. The console errors should be as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次渲染时，组件使用了所有正确的属性类型。第二次渲染时，组件没有使用 `myObject` 属性。控制台错误应该如下：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Thanks to the property specification and subsequent error message for `myObject`,
    it's clear that an object value needs to be provided to the `myObject` property.
    The last error is because the component assumes that there is an object with `myProp`
    as a property.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于属性规范和后续对 `myObject` 的错误消息，很明显需要为 `myObject` 属性提供一个对象值。最后一个错误是因为组件假设存在一个具有
    `myProp` 作为属性的对象。
- en: Ideally, you would validate for the `myProp` object property in this example
    since it's directly used in the JSX. The specific properties that are used in
    the JSX markup for the shape of an object, and shape can be validated, as you'll
    see later in the chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，在这个例子中，你应该验证 `myProp` 对象属性，因为它直接用在 JSX 中。在 JSX 标记中使用的特定属性可以验证对象的形状，正如你将在本章后面看到的那样。
- en: Any property value
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任何属性值
- en: 'The final topic of this section is the `any` property validator. That is, it
    doesn''t actually care what value it gets—anything is valid, including not passing
    a value at all. In fact, the `isRequired` validator can be combined with the `any`
    validator. For example, if you''re working on a component and you just want to
    make sure that something is passed, but not sure exactly which type you''re going
    to need yet, you could do something like `myProp: PropTypes.any.isRequired`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '本节的最后一个主题是 `any` 属性验证器。也就是说，它实际上并不关心它得到什么值——任何值都是有效的，包括根本不传递值。事实上，`isRequired`
    验证器可以与 `any` 验证器结合使用。例如，如果你正在开发一个组件，你只想确保传递了某些东西，但还不确定你将需要哪种类型，你可以做类似这样的事情：`myProp:
    PropTypes.any.isRequired`。'
- en: Another reason to have the `any` property validator is for the sake of consistency.
    Every component should have property specifications. The `any` validator is useful
    in the beginning, when you're not exactly sure what the property type will be.
    You can at least begin the property spec, and then refine it later as things unfold.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有 `any` 属性验证器的另一个原因是为了一致性。每个组件都应该有属性规范。在开始时，`any` 验证器是有用的，当你不确定属性类型时。你至少可以开始属性规范，然后随着事情的展开逐渐完善它。
- en: 'Let''s take a look at some code now:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一些代码：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This component doesn''t actually validate anything because the three properties
    in its property spec will accept anything. However, it''s a good starting point,
    because at a glance, I can see the names of the three properties that this component
    uses. So later on, when I decide exactly which types these properties should have,
    the change is simple. Let''s see this component in action now:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件实际上并不验证任何东西，因为它的属性规范中的三个属性将接受任何东西。然而，这是一个很好的起点，因为乍一看，我就可以看到这个组件使用的三个属性的名称。所以以后，当我决定这些属性应该具有哪些类型时，更改是简单的。现在让我们看看这个组件的实际效果：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Strings and numbers are interchangeable in several places. Allowing just one
    or the other seems overly restrictive. As you'll see in the next section, React
    has other property validators that allow you to further restrict property values
    allowed by your component.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串和数字在几个地方是可以互换的。只允许其中一个似乎过于限制了。正如你将在下一节中看到的，React 还有其他属性验证器，允许你进一步限制组件允许的属性值。
- en: 'Here''s what our component looks like when rendered:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的组件在渲染时是这样的：
- en: '![](Images/070e9a68-1e63-4c79-a9d3-f31bb093adb2.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/070e9a68-1e63-4c79-a9d3-f31bb093adb2.png)'
- en: Type and value validators
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型和值验证器
- en: In this section, you'll learn about the more advanced validator functionality
    available in the React `prop-types` package. First, you'll learn about the element
    and node validators that check for values that can be rendered inside HTML markup.
    Then, you'll see how to check for specific types, beyond the primitive type checking
    that you just learned about. Finally, you'll implement validation that looks for
    specific values.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将学习React `prop-types`包中更高级的验证功能。首先，你将学习检查可以在HTML标记内渲染的值的元素和节点验证器。然后，你将看到如何检查特定类型，超出了你刚刚学到的原始类型检查。最后，你将实现寻找特定值的验证。
- en: Things that can be rendered
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可以渲染的东西
- en: Sometimes, you just want to make sure that a property value is something that
    can be rendered by JSX markup. For example, if a property value is an array of
    plain objects, this can't be rendered by putting it in `{}`. You have to map the
    array items to JSX elements.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你只想确保属性值是可以由JSX标记渲染的东西。例如，如果属性值是一组普通对象，这不能通过将其放在`{}`中来渲染。你必须将数组项映射到JSX元素。
- en: 'This sort of checking is especially useful if your component passes property
    values to other elements as children. Let''s look at an example of what this looks
    like:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这种检查特别有用，如果你的组件将属性值传递给其他元素作为子元素。让我们看一个例子，看看这是什么样子的：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This component has two properties that require values that can be rendered.
    The `myHeader` property wants an `element`. This can be any JSX element. The `myContent`
    property wants a `node`. This can be any JSX element or any string value. Let''s
    pass this component some values and render it:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件有两个属性，需要渲染数值。`myHeader`属性需要一个`element`，可以是任何JSX元素。`myContent`属性需要一个`node`，可以是任何JSX元素或任何字符串值。让我们给这个组件传递一些值并渲染它：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `myHeader` property is more restrictive about the values it will accept.
    The `myContent` property will accept a string, an element, or an array of elements.
    These two validators are important when passing in child data from properties,
    as this component does. For example, trying to pass a plain object or a function
    as a child will not work, and it's best if you check for this situation using
    a validator.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`myHeader`属性对其接受的值更加严格。`myContent`属性将接受一个字符串、一个元素或一个元素数组。当从属性中传递子数据时，这两个验证器非常重要，就像这个组件所做的那样。例如，尝试将一个普通对象或函数作为子元素传递将不起作用，最好使用验证器检查这种情况。'
- en: 'Here''s what this component looks like when rendered:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当渲染时，这个组件看起来是这样的：
- en: '![](Images/34cff75d-ef5e-493b-bf5c-0952fff62538.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/34cff75d-ef5e-493b-bf5c-0952fff62538.png)'
- en: Requiring specific types
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要特定类型
- en: 'Sometimes, you need a property validator that checks for a type defined by
    your application. For example, let''s say you have the following user class:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你需要一个属性验证器，检查你的应用程序定义的类型。例如，假设你有以下用户类：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, suppose that you have a component that wants to use an instance of this
    class as a property value. You would need a validator that checks that the property
    value is an instance of `MyUser`. Let''s implement a component that does just
    that:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你有一个组件想要使用这个类的实例作为属性值。你需要一个验证器来检查属性值是否是`MyUser`的实例。让我们实现一个做到这一点的组件：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This component has three properties that require specific types, each going
    beyond the basic type validators that you''ve seen so far in this chapter. Let''s
    walk through these now:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件有三个需要特定类型的属性，每一个都超出了本章中到目前为止所见的基本类型验证器。让我们现在逐步了解这些：
- en: '`myDate` requires an instance of `Date`. It uses the `instanceOf()` function
    to build a validator function that ensures the value is a `Date` instance.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myDate`需要一个`Date`的实例。它使用`instanceOf()`函数来构建一个验证函数，确保值是`Date`的实例。'
- en: '`myCount` requires that the value either be a number or a string. This validator
    function is created by combining `oneOfType`, `PropTypes.number()`, and `PropTypes.string()`.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myCount` 要求值要么是一个数字，要么是一个字符串。这个验证器函数是通过结合 `oneOfType`、`PropTypes.number()`
    和 `PropTypes.string()` 创建的。'
- en: '`myUsers` requires an array of `MyUser` instances. This validator is built
    by combining `arrayOf()` and `instanceOf()`.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myUsers` 需要一个 `MyUser` 实例的数组。这个验证器是通过结合 `arrayOf()` 和 `instanceOf()` 构建的。'
- en: 'This example illustrates the number of scenarios that you can handle by combining
    the property validators provided by React. Here''s what the rendered output looks
    like:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子说明了通过结合 React 提供的属性验证器可以处理的场景数量。渲染输出如下：
- en: '![](Images/aac1c9ee-ab58-4201-905a-e5ea0eb47ca0.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/aac1c9ee-ab58-4201-905a-e5ea0eb47ca0.png)'
- en: Requiring specific values
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要特定的值
- en: 'I''ve focused on validating the type of property values so far, but that''s
    not always what you''ll want to check for. Sometimes, specific values matter.
    Let''s see how you can validate specific property values:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我专注于验证属性值的类型，但这并不总是你想要检查的。有时候，特定的值很重要。让我们看看如何验证特定的属性值：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `level` property is expected to be a number from the `levels` array. This
    is easy to validate using the `oneOf()` function. The `user` property is expecting
    a specific shape. A shape is the expected properties and types of an object. The
    `userShape` defined in this example requires a `name` string and an `age` number.
    The key difference between `shape()` and `instanceOf()` is that you don't necessarily
    care about the type. You might only care about the values that are used in the
    JSX of the component.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`level` 属性预期是来自 `levels` 数组的数字。这很容易使用 `oneOf()` 函数进行验证。`user` 属性预期一个特定的形状。形状是对象的预期属性和类型。在这个例子中定义的
    `userShape` 需要一个 `name` 字符串和一个 `age` 数字。`shape()` 和 `instanceOf()` 之间的关键区别是你不一定关心类型。你可能只关心组件
    JSX 中使用的值。'
- en: 'Let''s take a look at how this component is used:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个组件是如何使用的：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here''s what the component looks like when it''s rendered:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 组件渲染时的样子如下：
- en: '![](Images/73b1b803-db22-4c20-84ae-72d2b13e0105.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/73b1b803-db22-4c20-84ae-72d2b13e0105.png)'
- en: Writing custom property validators
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自定义属性验证器
- en: In this final section, you'll learn how to build your own custom property validation
    functions and apply them in the property specification. Generally speaking, you
    should only implement your own property validator if you absolutely have to. The
    default validators available in `prop-types` cover a wide range of scenarios.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这最后一节中，你将学习如何构建自己的自定义属性验证函数，并将它们应用在属性规范中。一般来说，只有在绝对必要的情况下才应该实现自己的属性验证器。`prop-types`
    中提供的默认验证器涵盖了广泛的场景。
- en: 'However, sometimes, you need to make sure that very specific property values
    are passed to the component. Remember, these will not be run in production mode,
    so it''s perfectly acceptable for a validator function to iterate over collections.
    Let''s implement some custom validator functions now:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时候，你需要确保非常特定的属性值被传递给组件。记住，这些不会在生产模式下运行，所以验证器函数迭代集合是完全可以接受的。现在让我们实现一些自定义验证器函数：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `myArray` property expects a non-empty array, and the `myNumber` property
    expects a number that''s greater than `0` and less than `100`. Let''s try passing
    these validators some data:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`myArray` 属性预期一个非空数组，`myNumber` 属性预期一个大于 `0` 且小于 `100` 的数字。让我们尝试传递一些数据给这些验证器：'
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The first element renders just fine, as both of the validators return null.
    However, the empty array and the number `100` cause both validators to return
    errors:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个元素渲染得很好，因为这两个验证器都返回 null。然而，空数组和数字 `100` 导致这两个验证器都返回错误：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here''s what the rendered output looks like:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染输出如下：
- en: '![](Images/cc4bf346-2ab7-4e36-a9a4-77b8e9392185.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cc4bf346-2ab7-4e36-a9a4-77b8e9392185.png)'
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The focus of this chapter has been React component property validation. When
    you implement property validation, you know what to expect; this promotes portability.
    The component doesn't care how the property values are passed to it, just as long
    as they're valid.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是React组件属性验证。当您实施属性验证时，您知道可以期望什么；这有助于可移植性。组件不关心属性值是如何传递给它的，只要它们是有效的即可。
- en: Then, you worked on several examples that used the basic React validators that
    check primitive JavaScript types. You also learned that if a property is required,
    this must be made explicit. Next, you learned how to validate more complex property
    values by combining the built-in validators that come with React.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将使用基本的React验证器来处理几个示例，这些验证器检查原始JavaScript类型。您还了解到，如果属性是必需的，必须明确指出。接下来，您将学习如何通过组合React提供的内置验证器来验证更复杂的属性值。
- en: Finally, you implemented your own custom validator functions to perform validation
    that goes beyond what's possible with the `prop-types` validators. In the next
    chapter, you'll learn how to extend React components with new data and behavior.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将实现自己的自定义验证器函数，以执行超出“prop-types”验证器可能的验证。在下一章中，您将学习如何通过新数据和行为扩展React组件。
- en: Test your knowledge
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的知识
- en: Which of the following best describes the `prop-types` package?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是描述“prop-types”包的最佳描述之一？
- en: A strongly typed JavaScript utility for compiling React components.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于编译React组件的强类型JavaScript实用程序。
- en: A tool to validate prop values that are passed to components during development.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于在开发过程中验证传递给组件的prop值的工具。
- en: A tool to validate prop values that are passed to components in production.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于在生产环境中验证传递给组件的prop值的工具。
- en: How do you validate that a property value is something that can be rendered?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何验证属性值是否可以呈现？
- en: If it has a `toString()` function, this is enough to render it.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它具有`toString()`函数，则足以呈现它。
- en: Use the **`PropTypes.node`** validator.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**`PropTypes.node`**验证器。
- en: Use the `PropTypes.renderable` validator.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`PropTypes.renderable`验证器。
- en: What is the purpose of the PropTypes.shape validator?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PropTypes.shape验证器的目的是什么？
- en: To make sure that an object has certain properties with certain types, ignoring
    any additional properties.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保对象具有特定类型的特定属性，忽略任何其他属性。
- en: To make sure that an object passed as a prop is of a particular class.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保作为prop传递的对象是特定类的对象。
- en: To make sure that an object has certain property names.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保对象具有特定的属性名称。
- en: Further reading
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[https://reactjs.org/docs/typechecking-with-proptypes.html](https://reactjs.org/docs/typechecking-with-proptypes.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/typechecking-with-proptypes.html](https://reactjs.org/docs/typechecking-with-proptypes.html)'
