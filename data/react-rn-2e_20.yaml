- en: Alerts, Notifications, and Confirmation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警报、通知和确认
- en: The goal of this chapter is to show you how to present information to the user
    in ways that don't disrupt the current page. Pages use a `View` component, and
    render it directly on the screen. There are times, however, when there's important
    information that the user needs to see, but you don't necessarily want to kick
    them off of the current page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是向你展示如何以不干扰当前页面的方式向用户呈现信息。页面使用`View`组件，并直接在屏幕上呈现。然而，有时候有重要信息需要用户看到，但你不一定希望将他们从当前页面中踢出去。
- en: You'll start by learning how to display important information. Knowing what
    important information is and when to use it, you'll see how to get user acknowledgement—both
    for error and success scenarios. Then, you'll implement passive notifications
    that show the user that something has happened. Finally, you'll implement modal
    views that show the user that something is happening in the background.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你将首先学习如何显示重要信息。了解重要信息是什么以及何时使用它，你将看到如何获得用户的确认，无论是错误还是成功的情况。然后，你将实现被动通知，向用户显示发生了某事。最后，你将实现模态视图，向用户显示后台正在发生某事。
- en: Important information
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'Before you dive into implementing alerts, notifications, and confirmations,
    let''s take a few minutes and think about what each of these items mean. I think
    this is important, because if you end up passively notifying the user about an
    error, it can easily get missed. Here are my definitions of the types of information
    that you''ll want to display:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始实施警报、通知和确认之前，让我们花几分钟时间思考一下这些项目各自的含义。我认为这很重要，因为如果你只是被动地通知用户发生了错误，很容易被忽视。以下是我对你需要显示的信息类型的定义：
- en: '**Alert**: Something important just happened and you need to ensure that the
    user sees what''s going on. Possibly, the user needs to acknowledge the alert.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警报**：发生了重要的事情，你需要确保用户看到发生了什么。可能用户需要确认警报。'
- en: '**Notification**: Something happened but it''s not important enough to completely
    block what the user is doing. These typically go away on their own.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知**：发生了某事，但不重要到完全阻止用户正在做的事情。这些通常会自行消失。'
- en: Confirmation is actually part of an alert. For example, if the user has just
    performed an action, and then wants to make sure that it was successful before
    carrying on, they would have to confirm that they've seen the information in order
    to close the modal. A confirmation could also exist within an alert, warning the
    user about an action that they're about to perform.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 确认实际上是警报的一部分。例如，如果用户刚刚执行了一个操作，然后想要确保操作成功后才继续进行，他们必须确认已经看到了信息才能关闭模态框。确认也可以存在于警报中，警告用户即将执行的操作。
- en: The trick is to try to use notifications where the information is good to know,
    but not critical. Use confirmations only when the workflow of the feature cannot
    continue without the user acknowledging what's going on. In the following sections,
    you'll see examples of alerts and notifications used for different purposes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是要尝试在信息是好知道但不是关键的情况下使用通知。只有在没有用户确认发生的情况下功能的工作流程无法继续进行时才使用确认。在接下来的章节中，你将看到警报和通知用于不同目的的示例。
- en: Getting user confirmation
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获得用户确认
- en: In this section, you'll learn how to show modal views in order to get confirmation
    from the user. First, you'll learn how to implement the successful scenario, where
    an action generates a successful outcome that you want the user to be aware of.
    Then, you'll learn how to implement the error scenario, where something went wrong
    and you don't want the user to move forward without acknowledging the issue.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何显示模态视图以从用户那里获得确认。首先，您将学习如何实现成功的情景，其中一个操作生成了您希望用户知晓的成功结果。然后，您将学习如何实现错误情景，其中出现了问题，您不希望用户在未确认问题的情况下继续前进。
- en: Success confirmation
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成功确认
- en: 'Let''s start by implementing a modal view that''s displayed as the result of
    the user successfully performing an action. Here''s the `Modal` component, which
    is used to show the user a success confirmation:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先实现一个模态视图，作为用户成功执行操作的结果显示出来。以下是用于显示用户成功确认的`Modal`组件：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The properties that are passed to `ConfirmationModal` are forwarded to the
    React Native `Modal` component. You''ll see why in a moment. First, let''s see
    what this confirmation modal looks like:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`ConfirmationModal`的属性被转发到React Native的`Modal`组件。一会儿您就会明白为什么。首先，让我们看看这个确认模态框是什么样子的：
- en: '![](Images/f808d094-c51e-475a-a818-84690e98995c.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f808d094-c51e-475a-a818-84690e98995c.png)'
- en: 'The modal that''s displayed once the user completes an action has our own styling
    and confirmation message. It also has two actions, but it might only need one,
    depending on whether this confirmation is pre- or post-action. Here are the styles
    used for this modal:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用户完成操作后显示的模态框具有我们自己的样式和确认消息。它还有两个操作，但根据确认是在操作前还是操作后，可能只需要一个。以下是用于此模态框的样式：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With the React Native `Modal` component, it's pretty much up to you how you
    want your confirmation modal view to look. Think of them as regular views, with
    the only difference being that they're rendered on top of other views.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React Native的`Modal`组件，您基本上可以自行决定您希望确认模态视图的外观。将它们视为常规视图，唯一的区别是它们是在其他视图之上渲染的。
- en: A lot of the time, you might not care to style your own modal views. For example,
    in web browsers, you can simply call the `alert()` function, which shows text
    in a window that's styled by the browser. React Native has something similar: `Alert.alert()`.
    The tricky part here is that this is an imperative API, and you don't necessarily
    want to expose it directly in your application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，您可能不在意样式化自己的模态视图。例如，在Web浏览器中，您可以简单地调用`alert()`函数，它会在浏览器样式的窗口中显示文本。React
    Native有类似的功能：`Alert.alert()`。这里的棘手之处在于这是一个命令式API，并且您不一定希望直接在应用程序中公开它。
- en: 'Instead, let''s implement an alert confirmation component that hides the details
    of this particular React Native API so that your app can just treat this like
    any other component:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们实现一个警报确认组件，隐藏这个特定的React Native API的细节，以便您的应用程序可以将其视为任何其他组件：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are two important aspects to this component. First, take a look at the
    `actions` map. Its keys—`true` and `false`—correspond to the `visible` state value.
    The values correspond to the imperative `alert()` API and a `noop` function. This
    is the key to translating the declarative React component interface we know and
    love into something that's hidden from view.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件有两个重要方面。首先，看一下`actions`映射。它的键——`true`和`false`——对应于`visible`状态值。值对应于命令式的`alert()`API和一个`noop`函数。这是将我们所熟悉和喜爱的声明式React组件接口转换为隐藏视图的关键。
- en: Second, note that the `render()` method doesn't need to render anything, since
    this component deals exclusively with imperative React Native calls. But, it feels
    like something is being rendered to the person that's using `ConfirmationAlert`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，注意`render()`方法不需要渲染任何东西，因为这个组件专门处理命令式的React Native调用。但是，对于使用`ConfirmationAlert`的人来说，感觉就像有东西被渲染出来了。
- en: 'Here''s what the alert looks like on iOS:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是iOS上警报的外观：
- en: '![](Images/f69d9dd3-e933-4cf8-ab2e-727fb3fd8a94.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f69d9dd3-e933-4cf8-ab2e-727fb3fd8a94.png)'
- en: 'In terms of functionality, there''s nothing really different here. There''s
    a title and text beneath it, but that''s something that could easily be added
    to a modal view if you wanted. The real difference is that this modal looks like
    an iOS modal, instead of something that''s styled by the app. Let''s see how this
    alert appears on Android:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在功能上，这里并没有真正的不同。有一个标题和下面的文本，但如果你想的话，这很容易添加到模态视图中。真正的区别在于这个模态看起来像一个iOS模态，而不是应用程序样式的东西。让我们看看这个警报在Android上是什么样子的：
- en: '![](Images/c197f225-866f-4310-91f0-066850b67a75.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c197f225-866f-4310-91f0-066850b67a75.png)'
- en: 'This modal looks like an Android modal, and you didn''t have to style it. I
    think using alerts over modals is a better choice most of the time. It makes sense
    to have something styled to look like it''s part of iOS or part of Android. However,
    there are times when you need more control over how the modal looks, such as when
    displaying error confirmations. Here''s the code that''s used to display both
    the modal and the alert confirmation dialogs:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模态看起来像一个Android模态，而你不需要对它进行样式设置。我认为大多数情况下，使用警报而不是模态是一个更好的选择。让它看起来像iOS的一部分或Android的一部分是有意义的。然而，有时候你需要更多地控制模态的外观，比如显示错误确认。以下是用于显示模态和警报确认对话框的代码：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The approach to rendering modals is different to the approach to rendering alerts.
    However, they're both still declarative components that change based on changing
    property values.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染模态的方法与渲染警报的方法不同。然而，它们都是根据属性值的变化而改变的声明式组件。
- en: Error confirmation
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误确认
- en: 'All of the principles you learned about in the preceding section are applicable
    when you need the user to acknowledge an error. If you need more control of the
    display, use a modal. For example, you might want the modal to be red and scary
    looking:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面部分学到的所有原则在需要用户确认错误时都是适用的。如果你需要更多地控制显示，使用模态。例如，你可能希望模态是红色和令人恐惧的外观：
- en: '![](Images/603ecf14-5931-4273-b97e-5f3121260cd3.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/603ecf14-5931-4273-b97e-5f3121260cd3.png)'
- en: 'Here are the styles used to create this look. Maybe you want something a little
    more subtle, but the point is that you can make this look however you want:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于创建这种外观的样式。也许你想要更加低调的东西，但重点是你可以根据自己的喜好来定制这种外观：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The same modal styles that you used for the success confirmations are still
    here. That''s because the error confirmation modal needs many of the same styles.
    Here''s how you apply both to the `Modal` component:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你用于成功确认的相同模态样式仍然在这里。这是因为错误确认模态需要许多相同的样式。以下是如何将它们都应用到`Modal`组件中的方法：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The styles are combined as arrays before they're passed to the `style` property.
    The error styles always come last since conflicting style properties, such as
    `backgroundColor`, will be overridden by whatever comes later in the array.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 样式在传递给`style`属性之前会被组合成数组。错误样式总是最后出现的，因为冲突的样式属性，比如`backgroundColor`，会被数组中后面出现的样式覆盖。
- en: In addition to styles in error confirmations, you can include whatever advanced
    controls you want. It really depends on how your application lets users cope with
    errors; for example, maybe there are several courses of action that can be taken.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了错误确认中的样式，您可以包含任何您想要的高级控件。这取决于您的应用程序如何让用户处理错误；例如，可能有几种可以采取的行动。
- en: 'However, the more common case is that something went wrong and there''s nothing
    you can do about it, besides making sure that the user is aware of the situation.
    In these cases, you can probably get away with just displaying an alert:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，更常见的情况是出了问题，你无能为力，除了确保用户意识到情况。在这些情况下，您可能只需显示一个警报：
- en: '![](Images/7f627ed7-5e3c-4786-9d7d-99bad334d539.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7f627ed7-5e3c-4786-9d7d-99bad334d539.png)'
- en: Passive notifications
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 被动通知
- en: The notifications you've examined so far in this chapter all have required input
    from the user. This is by design because it's important information that you're
    forcing the user to look at. You don't want to over-do this, however. For notifications
    that are important but not life-altering if ignored, you can use passive notifications.
    These are displayed in a less obtrusive way than modals, and don't require any
    user action to dismiss.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中您所检查的通知都需要用户输入。这是有意设计的，因为这是您强制用户查看的重要信息。然而，您不希望过度使用这一点。对于重要但如果被忽略不会改变生活的通知，您可以使用被动通知。这些通知以比模态框更不显眼的方式显示，并且不需要任何用户操作来解除。
- en: 'In this section, you''ll create a `Notification` component, which uses the
    Toast API for Android, and creates a custom modal for iOS. It''s called the Toast
    API because the information that''s displayed looks like a piece of toast popping
    up. Here''s what the Android component looks like:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将创建一个`Notification`组件，该组件使用Android的Toast API，并为iOS创建一个自定义模态框。它被称为Toast
    API，因为显示的信息看起来像是弹出的一片吐司。以下是Android组件的样子：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once again, you''re dealing with an imperative React Native API that you don''t
    want to expose to the rest of your app. Instead, this component hides the imperative
    `ToastAndroid.show()` function behind a declarative React component. No matter
    what, this component returns `null`, because it doesn''t actually render anything.
    Here''s what the `ToastAndroid` notification looks like:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您正在处理一个命令式的React Native API，您不希望将其暴露给应用程序的其他部分。相反，这个组件将命令式的`ToastAndroid.show()`函数隐藏在一个声明性的React组件后面。无论如何，这个组件都会返回`null`，因为它实际上不会渲染任何内容。以下是`ToastAndroid`通知的样子：
- en: '![](Images/c0351dbf-71f6-4b1a-a9ed-cfe831306c88.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c0351dbf-71f6-4b1a-a9ed-cfe831306c88.png)'
- en: The notification that something has happened is displayed at the bottom of the
    screen and is removed after a short delay. The key is that the notification is
    unobtrusive.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了某事的通知显示在屏幕底部，并在短暂延迟后移除。关键是通知不会打扰。
- en: 'The iOS notification component is a little more involved, because it needs
    state and lifecycle events to make a modal view behave like a transient notification.
    Here''s the code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: iOS通知组件涉及更多，因为它需要状态和生命周期事件，使模态视图的行为类似于瞬态通知。以下是代码：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You have to style the modal to display the notification text, as well as the
    state that''s used to hide the notification after a delay. Here''s what the end
    result looks like for iOS:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须设计模态框以显示通知文本，以及用于在延迟后隐藏通知的状态。以下是iOS的最终结果：
- en: '![](Images/48be01c3-93cb-46f1-a098-2aac63f8b625.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/48be01c3-93cb-46f1-a098-2aac63f8b625.png)'
- en: 'The same principle with the `ToastAndroid` API applies here. You might have
    noticed that there''s another button in addition to the Show Notification button.
    This is a simple counter that re-renders the view. There''s actually a reason
    for demonstrating this seemingly obtuse feature, as you''ll see momentarily. Here''s
    the code for the main application view:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ToastAndroid` API相同的原则适用于这里。您可能已经注意到，除了显示通知按钮之外，还有另一个按钮。这是一个简单的计数器，重新渲染视图。实际上，演示这个看似晦涩的功能是有原因的，您马上就会看到。这是主应用视图的代码：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The whole point of the press counter is to demonstrate that, even though the
    `Notification` component is declarative and accepts new property values when the
    state changes, you still have to set the message state to null when changing other
    state values. The reason for this is that if you re-render the component and the
    message state still has a string in it, it will display the same notification,
    over and over.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 按下计数器的整个目的是要证明，即使`Notification`组件是声明性的，并在状态改变时接受新的属性值，当改变其他状态值时，仍然必须将消息状态设置为null。原因是，如果重新渲染组件并且消息状态仍然包含字符串，它将一遍又一遍地显示相同的通知。
- en: Activity modals
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动模态
- en: 'In this final section of the chapter, you''ll implement a modal that shows
    a progress indicator. The idea is to display the modal, and then hide it when
    the promise resolves. Here''s the code for the generic `Activity` component that
    shows a modal with an activity indicator:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后一节中，您将实现一个显示进度指示器的模态。想法是显示模态，然后在promise解析时隐藏它。以下是显示带有活动指示器的模态的通用`Activity`组件的代码：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You might be tempted to pass the promise to the component so that it automatically
    hides itself when the promise resolves. I don''t think this is a good idea, because
    then you would have to introduce the state into this component. Furthermore, it
    would depend on a promise in order to function. With the way you''ve implemented
    this component, you can show or hide the modal based on the `visible` property
    alone. Here''s what the activity modal looks like on iOS:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想要将promise传递给组件，以便在promise解析时自动隐藏自己。我认为这不是一个好主意，因为这样你就必须将状态引入到这个组件中。此外，它将依赖于promise才能正常工作。通过您实现这个组件的方式，您可以仅基于`visible`属性来显示或隐藏模态。这是iOS上活动模态的样子：
- en: '![](Images/7331738d-0be0-4f4a-bc12-393db27a661e.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7331738d-0be0-4f4a-bc12-393db27a661e.png)'
- en: 'There''s a semi-transparent background on the modal that''s placed over the
    main view with the Fetch Stuff... link. Here''s how this effect is created in
    `styles.js`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 模态上有一个半透明的背景，覆盖在带有获取内容...链接的主视图上。以下是在`styles.js`中创建此效果的方法：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Instead of setting the actual `Modal` component to be transparent, you set
    the transparency in `backgroundColor`, which gives the look of an overlay. Now,
    let''s take a look at the code that controls this component:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与其将实际的“Modal”组件设置为透明，不如在`backgroundColor`中设置透明度，这样看起来就像是一个覆盖层。现在，让我们来看看控制这个组件的代码：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When the fetch link is pressed, a new promise is created that simulates async
    network activity. Then, when the promise resolves, you change the `fetching` state
    back to false so that the activity dialog is hidden.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下获取链接时，将创建一个模拟异步网络活动的新promise。然后，当promise解析时，将`fetching`状态更改回false，以便隐藏活动对话框。
- en: Summary
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the need to show mobile users important information.
    This sometimes involves explicit feedback from the user, even if that just means
    acknowledgement of the message. In other cases, passive notifications work better,
    since they're less obtrusive than the confirmation modals.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解到向移动用户显示重要信息的必要性。有时，这需要用户的明确反馈，即使只是对消息的确认。在其他情况下，被动通知效果更好，因为它们比确认模态更不显眼。
- en: 'There are two tools that you can use to display messages to users: modals and
    alerts. Modals are more flexible, because they''re just like regular views. Alerts
    are good for displaying plain text and they take care of styling concerns for
    you. On Android, you have the additional `ToastAndroid` interface. You saw that
    it''s also possible to do this on iOS, but it just requires more work.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种工具可用于向用户显示消息：模态和警报。模态更灵活，因为它们就像常规视图一样。警报适用于显示纯文本，并且它们会为您处理样式问题。在 Android
    上，您还有额外的 `ToastAndroid` 接口。您看到这在 iOS 上也是可能的，但这需要更多的工作。
- en: In the next chapter, we'll dig deeper into the gesture response system inside
    React Native, which makes for a better mobile experience than browsers are able
    to provide.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入研究 React Native 中的手势响应系统，这比浏览器能提供更好的移动体验。
- en: Test your knowledge
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: What's the difference between an alert and a modal?
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 警报和模态之间有什么区别？
- en: Alerts are used for unimportant information, whereas modals are used for less
    important information.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 警报用于不重要的信息，而模态用于不太重要的信息。
- en: They serve the same purpose and it doesn't matter which one you use.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们用途相同，使用哪一个都无所谓。
- en: Alerts are good at inheriting the look and feel of the mobile environment whereas
    modals are regular React Native views that you have total stylistic control over.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 警报很擅长继承移动环境的外观和感觉，而模态框是常规的 React Native 视图，您可以完全控制其样式。
- en: Which React Native component can be used to create a modal view that overlays
    other components on the screen?
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 React Native 组件可用于创建覆盖屏幕上其他组件的模态视图？
- en: There is no way to do this.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有办法做到这一点。
- en: The `Modal` component.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Modal` 组件。'
- en: The `Modal.open()` function is used for this.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Modal.open()` 函数用于此目的。'
- en: What's the best way to display passive notifications on Android systems?
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android 系统上显示被动通知的最佳方法是什么？
- en: React Native has a notification API for this purpose.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React Native 有一个通知 API 用于此目的。
- en: You can use the `ToastAndroid` React Native API. There's no good alternative
    on iOS that doesn't involve rolling your own code.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用 `ToastAndroid` React Native API。在 iOS 上，没有不涉及自己编写代码的好的替代方法。
- en: React Native only supports passive notifications on iOS.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React Native 仅支持 iOS 上的被动通知。
- en: The React Native Alert API is only available on iOS.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React Native 警报 API 仅在 iOS 上可用。
- en: 'True'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真
- en: 'False'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假
- en: Further reading
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Check out the following links for more information:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以获取更多信息：
- en: '[https://facebook.github.io/react-native/docs/modal](https://facebook.github.io/react-native/docs/modal)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/modal](https://facebook.github.io/react-native/docs/modal)'
- en: '[https://facebook.github.io/react-native/docs/alert](https://facebook.github.io/react-native/docs/alert)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/alert](https://facebook.github.io/react-native/docs/alert)'
- en: '[https://facebook.github.io/react-native/docs/toastandroid](https://facebook.github.io/react-native/docs/toastandroid)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/toastandroid](https://facebook.github.io/react-native/docs/toastandroid)'
