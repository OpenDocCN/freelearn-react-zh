- en: Testing and Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试和调试
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下教程：
- en: Testing our first component with Jest and Enzyme
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jest和Enzyme测试我们的第一个组件
- en: Testing a Redux Container, Actions, and Reducers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试Redux容器、操作和减速器
- en: Debugging a React application using React and Redux Dev Tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React和Redux Dev Tools调试React应用程序
- en: Simulating events
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟事件
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Testing and debugging are very important for any project that wants to have
    high quality. Unfortunately, many developers do not care about testing (unit tests)
    because they think that will reduce the speed of the development and some of them
    leave it until the end of the project. In my personal experience, I can say that
    testing from the beginning of the project will save you time because, at the end,
    you will have fewer bugs to fix. React uses Jest to test its components, containers,
    actions, and reducers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和调试对于任何希望具有高质量的项目来说都非常重要。不幸的是，许多开发人员不关心测试（单元测试），因为他们认为这会减慢开发速度，有些人把它留到项目结束时再做。根据我的个人经验，我可以说，从项目开始就进行测试会节省您的时间，因为最后您将有更少的错误需要修复。React使用Jest来测试其组件、容器、操作和减速器。
- en: In the following recipes, we are also going to learn how to debug our React/Redux
    application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的教程中，我们还将学习如何调试我们的React/Redux应用程序。
- en: Testing our first component with Jest and Enzyme
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jest和Enzyme测试我们的第一个组件
- en: In this recipe, we are going to learn how to install and configure Jest in our
    project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何在项目中安装和配置Jest。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we need to install a few packages to test our React application:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们需要安装一些包来测试我们的React应用程序：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'After we''ve installed Jest, we need to configure it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Jest之后，我们需要对其进行配置：
- en: 'Add the `tests` scripts and the Jest configuration into our `package.json`:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`tests`脚本和Jest配置添加到我们的`package.json`中：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'File: package.json'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：package.json
- en: 'As you can see in our Jest configuration, we need to add the `setupTestFramework.js` file
    where we''ll configure our enzyme to use it with Jest:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如您在我们的Jest配置中所看到的，我们需要添加`setupTestFramework.js`文件，我们将在其中配置我们的enzyme以便与Jest一起使用：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'File: config/jest/setupTestFramework.js'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：config/jest/setupTestFramework.js
- en: 'In the `setupFiles` node, we can specify our `browserMocks.js` file, which
    is where we can mock any browser method we use in our App. For example, if you
    want to test `localStorage` in your app, this file is the proper place to mock
    it:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setupFiles`节点中，我们可以指定我们的`browserMocks.js`文件，这是我们可以模拟在我们的应用程序中使用的任何浏览器方法的地方。例如，如果您想在应用程序中测试`localStorage`，这个文件就是模拟它的合适位置：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'File: config/jest/browserMocks.js'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：config/jest/browserMocks.js
- en: If you are using Sass, Stylus, or Less in your components, you need to specify
    the `moduleNameMapper` mode with a regex to match all the `.scss` files (or `.styl`/`.less`)
    in your project and handle those files with `identity-obj-proxy`, which is a package
    that mocks Webpack imports, such as CSS modules.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在组件中使用Sass、Stylus或Less，您需要使用正则表达式指定`moduleNameMapper`模式，以匹配项目中的所有`.scss`文件（或`.styl`/`.less`），并使用`identity-obj-proxy`处理这些文件，这是一个模拟Webpack导入的包，比如CSS模块。
- en: 'You may have noticed we added two new NPM scripts: one for test our app and
    the other to get the coverage (percentage of covered unit tests). For those, we
    are using a particular script, which is at `scripts/test.js`, let''s create that
    file:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能已经注意到我们添加了两个新的NPM脚本：一个用于测试我们的应用程序，另一个用于获取覆盖率（覆盖的单元测试百分比）。对于这些，我们使用了一个特殊的脚本，就在`scripts/test.js`，让我们创建这个文件：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'File: scripts/test.js'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：scripts/test.js
- en: 'Let''s imagine we have this `Home` component:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们想象我们有这个`Home`组件：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'File: src/client/home/index.jsx'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/home/index.jsx
- en: 'If you want to test this component, you need to create a file with the same
    name but add the `.test` suffix in the file. In this case, our test file will
    be named `index.test.jsx`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想测试这个组件，您需要创建一个同名的文件，但在文件名后面加上`.test`后缀。在这种情况下，我们的测试文件将被命名为`index.test.jsx`：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'File: src/client/home/index.test.jsx'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/home/index.test.jsx
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you want to test your application, you need to run the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想测试您的应用程序，您需要运行以下命令：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If your test is correct, you should see this result:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的测试正确，您应该会看到这个结果：
- en: '![](assets/06f4d070-eb65-4f5e-8c03-3ce0c38da895.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/06f4d070-eb65-4f5e-8c03-3ce0c38da895.png)'
- en: 'The `PASS` label means that all of your tests in that file passed successfully;
    if you failed at least one test, you would see the `FAIL` label. Let''s modify
    our `"should has .Home class` test. I''m going to change the value to `"Home2"`
    to force the fail:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`PASS`标签表示该文件中的所有测试都已成功通过；如果您至少有一个测试失败，您将看到`FAIL`标签。让我们修改我们的`"should has .Home
    class`测试。我将把值改为`"Home2"`以强制失败：'
- en: '![](assets/fafaa5db-75bc-4f49-a392-b8d84e029ed7.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fafaa5db-75bc-4f49-a392-b8d84e029ed7.png)'
- en: As you can see, now we got the `FAIL` label and specified with an X the failed
    test. Also, the `Expected` and `Received` values provide useful information, with
    these, we can see which value is expected and which value is being received.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，现在我们得到了`FAIL`标签，并用X指定了失败的测试。此外，`Expected`和`Received`值提供了有用的信息，通过这些信息，我们可以看到期望的值和接收到的值。
- en: There's more...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Now if you want to see the coverage percentage of all your unit tests, you
    can use the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您想查看所有单元测试的覆盖百分比，您可以使用以下命令：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Right now we only have 1 unit test for our `Home` component as you can see
    is in color green and at 100%, all the other files are in red with 0% because
    those have not been tested yet:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只有1个`Home`组件的单元测试，如您所见是绿色的并且达到了100%，所有其他文件都是红色的并且为0%，因为它们还没有被测试：
- en: '![](assets/4e139a3d-06f8-4f18-b59d-74853a9fe635.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4e139a3d-06f8-4f18-b59d-74853a9fe635.png)'
- en: 'Also, the coverage command generates an HTML version of the result. There is
    a directory called `"coverage"` and inside other called `"Icov-report"`. If you
    open `index.html` in your browser, you will see something like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，覆盖命令会生成结果的HTML版本。有一个名为`"coverage"`的目录，里面有一个名为`"Icov-report"`的目录。如果您在浏览器中打开`index.html`，您将看到类似于这样的内容：
- en: '![](assets/c4d20b1a-8bc7-4bcd-acd3-a656736525f8.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c4d20b1a-8bc7-4bcd-acd3-a656736525f8.png)'
- en: Testing a Redux Container, Actions, and Reducers
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Redux容器、操作和减速器
- en: In this recipe, we are going to test a Redux Container, Actions, and Reducers.
    For this example, we will test the Todo list that we created in [Chapter 11](884074f8-0a8a-4e3f-b9dc-b817e0f3f7c3.xhtml)*,
    Implementing Server-Side Rendering.*
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将测试Redux容器、操作和减速器。在这个例子中，我们将测试我们在[第11章](884074f8-0a8a-4e3f-b9dc-b817e0f3f7c3.xhtml)中创建的待办事项列表，实现服务器端渲染。
- en: Remember always that we use an existing recipe you must run npm install command
    first to restore all the project dependencies otherwise, you will get dependency
    errors.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果您使用现有的示例，您必须先运行npm install命令来恢复所有项目依赖项，否则您将收到依赖错误。
- en: Getting Ready
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We need to install the `redux-mock-store`, `moxios`, and `redux-thunk` packages
    to test our Redux containers. You will need to run `npm install` first to install
    all the dependencies:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装`redux-mock-store`，`moxios`和`redux-thunk`包来测试我们的Redux容器。您需要先运行`npm install`来安装所有依赖项：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s test our Redux containers:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试我们的Redux容器：
- en: 'Redux containers should not have any JSX code; the best practice is to have `mapStateToProps`
    and `mapDispatchToProps` in our `connect` method passing another component (such
    as a `Layout` component) in the export, for example, let''s see our Todo List
    Container:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Redux容器不应该有任何JSX代码；最佳实践是在我们的`connect`方法中使用`mapStateToProps`和`mapDispatchToProps`，在导出时传递另一个组件（比如`Layout`组件），例如，让我们看看我们的Todo
    List容器：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'File: src/client/todo/container/index.js'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/todo/container/index.js
- en: 'You might be wondering what exactly we need to test in here. Well, the most
    important things we need to test in a container are the action dispatch (the `fetchTodo`
    action) and get our `todo` state from Redux with data. That being said, this is
    our container unit test file:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能想知道我们需要在这里测试什么。嗯，在容器中最重要的事情是测试动作分发（`fetchTodo`动作）并从Redux中获取我们的`todo`状态和数据。也就是说，这是我们的容器单元测试文件：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'File: src/client/todo/container/index.test.js'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/todo/container/index.test.js
- en: 'Test the `fetchTodo` action. This is the code for our action file:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试`fetchTodo`动作。这是我们的动作文件的代码：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'File: src/client/todo/actions/index.js'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/todo/actions/index.js
- en: 'This is our `actionTypes.js` file:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我们的`actionTypes.js`文件：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'File: src/client/todo/actions/actionTypes.js'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/todo/actions/actionTypes.js
- en: 'To test an async Redux Action, we need to use `redux-thunk` and `moxios` to
    test an action that is using `axios` to retrieve data from the server. Our test
    file should look like this:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试异步Redux动作，我们需要使用`redux-thunk`和`moxios`来测试使用`axios`从服务器检索数据的动作。我们的测试文件应该是这样的：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'File: src/client/todo/actions/index.test.js'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/todo/actions/index.test.js
- en: 'Let''s test our reducer. This is the Todo reducer file:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们测试我们的reducer。这是Todo reducer文件：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'File: src/client/todo/reducer/index.js'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/todo/reducer/index.js
- en: 'We need to test two things in our reducer: the initial state and the state
    when the `FETCH_TODO` action is a success:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在我们的reducer中测试两件事：初始状态和`FETCH_TODO`动作成功时的状态。
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'File: src/client/todo/reducer/index.test.js'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/todo/reducer/index.test.js
- en: Debugging a React application using React and Redux Dev Tools
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React和Redux Dev Tools调试React应用程序
- en: Debugging is essential for any application, it helps us to identify and fix
    bugs. Chrome has two powerful tools to debug React/Redux applications integrating
    those to its Developer Tools. React Dev Tool and Redux Dev Tool.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 调试对于任何应用程序都是必不可少的，它帮助我们识别和修复错误。Chrome有两个强大的工具来调试React/Redux应用程序，并将其集成到其开发者工具中。React
    Dev Tool和Redux Dev Tool。
- en: Getting Ready
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Using Google Chrome, you have to install both extensions:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Google Chrome，您需要安装这两个扩展程序：
- en: '**React Developer Tools**: [https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React Developer Tools**：[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)'
- en: '**Redux DevTools**: [https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Redux DevTools**：[https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es)'
- en: 'Also, you need to install the `redux-devtools-extension` package:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您需要安装`redux-devtools-extension`包：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once you've installed React Developer Tools and Redux DevTools, you need to
    configure them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了React Developer Tools和Redux DevTools之后，您需要对其进行配置。
- en: 'If you try to use Redux DevTools directly, it won''t work; this is because
    we need to pass the `composeWithDevTools` method into our Redux store, this should
    be our `configureStore.js` file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试直接使用Redux DevTools，它不会起作用；这是因为我们需要将`composeWithDevTools`方法传递到我们的Redux存储中，这应该是我们的`configureStore.js`文件：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: File: src/shared/redux/configureStore.js
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/redux/configureStore.js
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s debug our application:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调试我们的应用程序：
- en: 'If you want to debug your React application, open your application with Google
    Chrome (`http://localhost:3000/todo`), open your Google Dev Tools (Right click
    > Inspect), select the React tab, and you will see your React components:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想要调试您的React应用程序，请使用Google Chrome打开您的应用程序（`http://localhost:3000/todo`），打开Google
    Dev Tools（右键单击>检查），选择React选项卡，您将看到您的React组件：
- en: '![](assets/6ad319a8-580f-42d5-8dd8-3b8878e0af58.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6ad319a8-580f-42d5-8dd8-3b8878e0af58.png)'
- en: 'You can select the component you want to debug, and one of the coolest things
    is that you can see the props of your component in the right side:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以选择要调试的组件，其中最酷的一件事是您可以在组件的右侧看到组件的props：
- en: '![](assets/7ea082be-ef33-48bc-9b64-0dda7be0e9a6.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7ea082be-ef33-48bc-9b64-0dda7be0e9a6.png)'
- en: 'If you want to debug Redux in your application and see which actions are being
    dispatched, you need to select the Redux tab in your Chrome Dev Tools:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想要调试Redux并查看应用程序中正在分发的动作，您需要在Chrome Dev Tools中选择Redux选项卡：
- en: '![](assets/32c8b4c0-9815-4fd0-8a83-50fda8bef7df.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/32c8b4c0-9815-4fd0-8a83-50fda8bef7df.png)'
- en: We are dispatching two actions in our Todo application: `FETCH_TODO_REQUEST`
    and `FETCH_TODO_SUCCESS`. The `@@INIT` action is being dispatched by default in
    Redux, and this happens in any application.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的Todo应用程序中，我们正在分发两个动作：`FETCH_TODO_REQUEST`和`FETCH_TODO_SUCCESS`。`@@INIT`动作在Redux中默认被分发，这在任何应用程序中都会发生。
- en: 'If you select the `FETCH_TODO_REQUEST` action, you will see that on the Diff
    tab it says, "(states are equal)". That means there were no changes within that
    action, but you have four tabs: Action, State, Diff, and Test.'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您选择`FETCH_TODO_REQUEST`动作，您会看到在Diff选项卡上显示“(states are equal)”。这意味着在该动作中没有任何更改，但您有四个选项卡：Action、State、Diff和Test。
- en: 'If you select the Action tab, you can see that specific action:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您选择Action选项卡，您可以看到特定的动作：
- en: '![](assets/63d061e4-e5f4-40dc-8884-014baa38dfe7.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/63d061e4-e5f4-40dc-8884-014baa38dfe7.png)'
- en: 'If you select `FETCH_TODO_SUCCESS`, you will see the data for the todo reducer:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您选择`FETCH_TODO_SUCCESS`，您将看到todo reducer的数据：
- en: '![](assets/eb869384-482d-4f3a-be4f-6e607f09a13e.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eb869384-482d-4f3a-be4f-6e607f09a13e.png)'
- en: Simulating Events
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟事件
- en: In this recipe, we are going to learn how to simulate the `onClick` and `onChange`
    events on a simple Calculator component.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何模拟简单计算器组件上的`onClick`和`onChange`事件。
- en: How to do it...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We will re-use the code of the last recipe (`Repository: Chapter12/Recipe3/debugging`):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将重用上一个示例的代码（`Repository: Chapter12/Recipe3/debugging`）：'
- en: 'We will create a simple `Calculator` component to sum two values (input) and
    then we will get the result when the user clicks on the equals (`=`) button:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的`Calculator`组件来对两个值（输入）进行求和，然后当用户点击等号（`=`）按钮时，我们将得到结果：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'File: src/client/calculator/index.jsx'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/calculator/index.jsx
- en: 'If you want to see this component in your browser (it was created for testing
    purpose), you need to include it in your routes file:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想要在浏览器中查看此组件（它是为测试目的而创建的），您需要在路由文件中包含它：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'File: src/shared/routes/index.jsx'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/routes/index.jsx
- en: 'If you want to see some basic styles, we can use these:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想要查看一些基本样式，我们可以使用这些：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'File: src/client/calculator/Calculator.scss'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/calculator/Calculator.scss
- en: 'In our test file, we need to simulate the `onChange` event to change the values
    of our input and then simulate the click on the equals (`=`) button:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的测试文件中，我们需要模拟`onChange`事件来改变输入的值，然后模拟点击等号（`=`）按钮：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you want to see the component in your browser, run the application using
    `npm start`, and you will see something like this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要在浏览器中查看组件，请使用`npm start`运行应用程序，您将看到类似于这样的东西：
- en: '![](assets/9886aeca-21eb-4807-9527-61e5538643b6.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9886aeca-21eb-4807-9527-61e5538643b6.png)'
- en: 'Now let''s test our calculator by using the `npm test` command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用`npm test`命令来测试我们的计算器：
- en: '![](assets/3c81c289-7a97-4cc0-9ffd-3e02d50c3e04.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: 抱歉，我无法识别图片中的文本。
