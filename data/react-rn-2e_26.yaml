- en: Building a Relay React App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Relay React应用
- en: In the previous chapter, you got a ten thousand foot introduction to Relay/GraphQL,
    and learned why you should use the approach for your React application. Now you
    can build your Todo React Native application using Relay. By the end of this chapter,
    you should feel comfortable about how data moves around in a GraphQL centric architecture.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你对Relay/GraphQL有了一个概览，并了解了为什么应该在React应用程序中使用这种方法。现在你可以使用Relay构建你的Todo
    React Native应用程序。在本章结束时，你应该对GraphQL中心架构中的数据传输感到自如。
- en: TodoMVC and Relay
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TodoMVC和Relay
- en: I had originally planned to extend the Neckbeard News app that we worked on
    earlier in this chapter. Instead, I decided that the TodoMVC example for Relay
    ([https://github.com/taion/relay-todomvc](https://github.com/taion/relay-todomvc))
    is a robust yet concise example that I would have trouble beating.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我最初计划扩展我们在本章前面工作过的Neckbeard News应用程序。但我决定使用Relay的TodoMVC示例（[https://github.com/taion/relay-todomvc](https://github.com/taion/relay-todomvc)），这是一个强大而简洁的示例，我很难超越它。
- en: I'm going to walk you through an example React Native implementation of a Todo
    app. The key is that it'll use the same GraphQL backend as the web UI. I think
    this is a win for React developers that want to build both web and native versions
    of their apps; they can share the same schema!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我将带你走过一个示例React Native实现的Todo应用程序。关键是，它将使用与Web UI相同的GraphQL后端。我认为这对于想要构建其应用程序的Web和原生版本的React开发人员来说是一个胜利；他们可以共享相同的模式！
- en: 'I''ve included the web version of the TodoMVC app in the code that ships with
    this book, but I won''t dwell on the details of how it works. If you''ve worked
    on web development in the past 5 years, you''ve probably come across a sample
    Todo app. Here''s what the web version looks like:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经在随本书一起提供的代码中包含了TodoMVC应用程序的Web版本，但我不会详细介绍它的工作原理。如果你在过去5年里从事过Web开发，你可能已经接触过一个样本Todo应用程序。这是Web版本的样子：
- en: '![](Images/750d45e8-c429-4262-a5e9-b1b9559a072b.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/750d45e8-c429-4262-a5e9-b1b9559a072b.png)'
- en: Even if you haven't used any of the TodoMVC apps before, I would recommend playing
    with this one before trying to implement the native version, which is what you'll
    be doing for the remainder of the chapter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你以前没有使用过任何TodoMVC应用程序，我建议在尝试实现本章剩余部分的原生版本之前，先尝试玩一下这个。
- en: The goal of the native version that you're about to implement isn't functional
    parity. In fact, you're shooting for a very minimal subset of todo functionality.
    The aim is to show you that Relay works mostly the same on native platforms as
    it does on web platforms and that the GraphQL backend can be shared between web
    and native apps.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你即将实现的原生版本的目标不是功能平等。事实上，你的目标是实现一个非常简化的todo功能子集。目标是向你展示，Relay在原生平台上的工作方式与在Web平台上基本相同，并且GraphQL后端可以在Web和原生应用程序之间共享。
- en: The GraphQL schema
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GraphQL模式
- en: The schema is the vocabulary used by GraphQL backend server, and the Relay components
    in the frontend. The GraphQL type system enables the schema to describe the data
    that's available, and how to put it all together when a query request comes in.
    This is what makes the whole approach so scalable, the fact that the GraphQL runtime
    figures out how to put data together. All you need to supply are functions that
    tell GraphQL where the data is; for example, in a database or in some remote service
    endpoint.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 模式是GraphQL后端服务器和前端Relay组件使用的词汇。GraphQL类型系统使模式能够描述可用的数据，以及在查询请求到来时如何将所有数据组合在一起。这就是整个方法如此可扩展的原因，因为GraphQL运行时会找出如何组合数据。你只需要提供告诉GraphQL数据在哪里的函数；例如，在数据库中或在某个远程服务端点中。
- en: 'Let''s take a look at the types used in the GraphQL schema for the TodoMVC
    app, as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看在TodoMVC应用程序的GraphQL模式中使用的类型，如下所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are a lot of things being imported here, so I'll start with the imports.
    I wanted to include all of these imports because I think they're contextually
    relevant for this discussion. First, there's the primitive GraphQL types from
    the the `graphql` library. Next, you have helpers from the `graphql-relay` library
    that simplify defining a GraphQL schema. Lastly, there's imports from your own
    `database` module. This isn't necessarily a database, in fact, in this case, it's
    just mock data. You could replace `database` with `api` for instance, if you needed
    to talk to remote API endpoints, or we could combine the two; it's all GraphQL
    as far as your React components are concerned.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里导入了很多东西，所以我将从导入开始。我想包括所有这些导入，因为我认为它们在这次讨论中是相关的。首先，有来自`graphql`库的基本GraphQL类型。接下来，您有来自`graphql-relay`库的辅助程序，简化了定义GraphQL模式。最后，有来自您自己的`database`模块的导入。这不一定是一个数据库，实际上，在这种情况下，它只是模拟数据。例如，如果您需要与远程API端点通信，您可以将`database`替换为`api`，或者我们可以将两者结合起来；就您的React组件而言，这都是GraphQL。
- en: Then, you define some of your own GraphQL types. For example, the `GraphQLTodo`
    type has two fields—`text` and `complete`. One is a Boolean and one is a string.
    The important thing to note about GraphQL fields is the `resolve()` function.
    This is how you tell the GraphQL runtime how to populate these fields when they're
    required. These two fields simply return property values.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您定义了一些自己的GraphQL类型。例如，`GraphQLTodo`类型有两个字段——`text`和`complete`。一个是布尔值，一个是字符串。关于GraphQL字段的重要事情是`resolve()`函数。这是告诉GraphQL运行时如何在需要时填充这些字段的方法。这两个字段只是返回属性值。
- en: Then, there's the `GraphQLUser` type. This field represents the user's entire
    universe within the UI, hence the name. The `todos` field, for example, is how
    you query for todo items from Relay components. It's resolved using the `connectionFromArray()`
    function, which is a shortcut that removes the need for more verbose field definitions.
    Then, there's the `GraphQLRoot` type. This has a single `viewer` field that's
    used as the root of all queries.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，有`GraphQLUser`类型。这个字段代表了用户在UI中的整个宇宙，因此得名。例如，`todos`字段是您如何从Relay组件查询待办事项的方式。它使用`connectionFromArray()`函数进行解析，这是一种快捷方式，可以省去更冗长的字段定义。然后，有`GraphQLRoot`类型。这有一个单一的`viewer`字段，用作所有查询的根。
- en: 'Now let''s take a closer look at the add todo mutation, as follows. I''m not
    going to go over every mutation that''s used by the web version of this app, in
    the interests of space:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更仔细地看一下添加待办事项的突变，如下所示。出于篇幅考虑，我不会介绍此应用程序的Web版本中使用的每个突变：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All mutations have a `mutateAndGetPayload()` method, which is how the mutation
    actually makes a call to some external service to change the data. The returned
    payload can be the changed entity, but it can also include data that's changed
    as a side-effect. This is where the `outputFields` come into play. This is the
    information that's handed back to Relay in the browser so that it has enough information
    to properly update components based on the side effects of the mutation. Don't
    worry, you'll see what this looks like from Relay's perspective shortly.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的突变都有一个`mutateAndGetPayload()`方法，这是突变实际上调用某个外部服务来改变数据的方法。返回的有效负载可以是已更改的实体，但也可以包括作为副作用而更改的数据。这就是`outputFields`发挥作用的地方。这是传递给Relay在浏览器中的信息，以便它有足够的信息来根据突变的副作用正确更新组件。别担心，您很快就会从Relay的角度看到这是什么样子。
- en: 'The mutation type that you''ve created here is used to hold all application
    mutations. Lastly, here''s how the entire schema is put together and exported
    from the module:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您在这里创建的突变类型用于保存所有应用程序突变。最后，这是整个模式如何组合并从模块中导出的方式：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Don't worry about how this schema is fed into the GraphQL server for now.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不要担心将此模式馈送到GraphQL服务器中。
- en: Bootstrapping Relay
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导Relay
- en: 'At this point, you have the GraphQL backend up and running. Now, you can focus
    on your React components in the frontend. In particular, you''re going to look
    at Relay in a React Native context, which really only has minor differences. For
    example, in web apps, it''s usually `react-router` that bootstraps Relay. In React
    Native, it''s a little different. Let''s look at the `App.js` file that serves
    as the entry point for your native app:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的GraphQL后端已经启动运行。现在，您可以专注于前端的React组件。特别是，您将在React Native环境中查看Relay，这实际上只有一些细微的差异。例如，在Web应用程序中，通常是`react-router`引导Relay。在React
    Native中，情况有些不同。让我们看看作为本机应用程序入口点的`App.js`文件：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s break down what''s happening here, starting with the environment constant:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这里开始分解发生的事情，从环境常量开始：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is how you communicate with the GraphQL backend, by configuring a network.
    In this example, you're importing `Network` from `relay-local-schema`, which means
    that no network requests are being made. This is really handy for when you're
    getting started—especially building a React Native app.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您与GraphQL后端通信的方式，通过配置网络。在这个例子中，您从`relay-local-schema`中导入`Network`，这意味着没有进行网络请求。这对于刚开始使用特别方便，尤其是构建React
    Native应用程序。
- en: 'Next, there''s the `QueryRenderer` component. This Relay component is used
    to render other components that depend on GraphQL queries. It expects a query
    property:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`QueryRenderer`组件。这个Relay组件用于渲染依赖于GraphQL查询的其他组件。它期望一个查询属性：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note that queries are prefixed by the module that they''re in. In this case,
    `App`. This query uses a GraphQL fragment from another module, `TodoList`, and
    is named `TodoList_viewer`. You can pass variables to the query:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，查询是由它们所在的模块前缀的。在这种情况下，是`App`。这个查询使用了另一个模块`TodoList`中的GraphQL片段，并命名为`TodoList_viewer`。您可以向查询传递变量：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, the `render` property is a function that renders your components when
    the GraphQL data is ready:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`render`属性是一个在GraphQL数据准备就绪时渲染组件的函数：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If something went wrong, error will contain information about the error. If
    there's no error and no props, it's safe to assume that the GraphQL data is still
    loading.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现问题，错误将包含有关错误的信息。如果没有错误和没有属性，那么可以安全地假定GraphQL数据仍在加载中。
- en: Adding todo items
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加待办事项
- en: 'In the `TodoInput` component, there''s a text input that allows the user to
    enter new todo items. When they''re done entering the todo, Relay will need to
    send a mutation to the backend GraphQL server. Here''s what the component code
    looks like:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`TodoInput`组件中，有一个文本输入框，允许用户输入新的待办事项。当他们输入完待办事项后，Relay将需要向后端GraphQL服务器发送一个mutation。以下是组件代码的样子：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It doesn't look that different from your typical React Native component. The
    piece that stands out is the mutation—`AddTodoMutation`. This is how you tell
    the GraphQL backend that you want a new `todo` node created.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来并不比您典型的React Native组件有多大的不同。突出的部分是mutation——`AddTodoMutation`。这是告诉GraphQL后端您想要创建一个新的`todo`节点的方式。
- en: 'Let''s see what the application looks like so far:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看目前为止应用程序的样子：
- en: '![](Images/e3ff8741-63d2-4e06-804a-1bc807755549.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e3ff8741-63d2-4e06-804a-1bc807755549.png)'
- en: The textbox for adding new todo items is just above the list of todo items.
    Now, let's look at the `TodoList` component, which is responsible for rendering
    the todo item list.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 用于添加新待办事项的文本框就在待办事项列表的上方。现在，让我们看看`TodoList`组件，它负责渲染待办事项列表。
- en: Rendering todo items
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染待办事项
- en: 'It''s the job of the `TodoList` component to render the todo list items. When
    `AddTodoMutation` takes place, the `TodoList` component needs to be able to render
    this new item. Relay takes care of updating the internal data stores where all
    of our GraphQL data lives. Here''s a look at the item list again, with several
    more todos added:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`TodoList`组件的工作是渲染待办事项列表项。当`AddTodoMutation`发生时，`TodoList`组件需要能够渲染这个新项目。Relay负责更新内部数据存储，其中包含我们所有的GraphQL数据。再次查看项目列表，添加了几个更多的待办事项：'
- en: '![](Images/39f4da0a-c9ea-457a-8eaa-efea4c539730.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/39f4da0a-c9ea-457a-8eaa-efea4c539730.png)'
- en: 'Here''s the `TodoList` component itself:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`TodoList`组件本身：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The relevant GraphQL to get the data you need is passed as a second argument
    to `createFragmentContainer()`. This is the declarative data dependency for the
    component. When you you render the `<Todo>` component, you're passing it the `edge.todo`
    data. Now, let's see what the `Todo` component itself looks like.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 获取所需数据的相关GraphQL作为第二个参数传递给`createFragmentContainer()`。这是组件的声明性数据依赖关系。当您渲染`<Todo>`组件时，您会将`edge.todo`数据传递给它。现在，让我们看看`Todo`组件本身是什么样子。
- en: Completing todo items
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成待办事项
- en: 'The last piece of this application is rendering each todo item and providing
    the ability to change the status of the todo. Let''s take a look at this code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序的最后一部分是渲染每个待办事项并提供更改待办事项状态的能力。让我们看看这段代码：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The actual component that's rendered is a switch control and the item text.
    When the user marks the todo as complete, the item text is styled as crossed off.
    The user can also uncheck items. The `ChangeTodoStatusMutation` mutation sends
    the request to the GraphQL backend to change the `todo` state. The GraphQL backend
    then talks to any microservices that are needed to make this happen. Then, it
    responds with the fields that this component depends on.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 实际渲染的组件是一个开关控件和项目文本。当用户标记待办事项为完成时，项目文本会被划掉。用户也可以取消选中项目。`ChangeTodoStatusMutation`变异发送请求到GraphQL后端以更改`todo`状态。GraphQL后端然后与任何需要使此操作发生的微服务进行通信。然后，它会响应此组件所依赖的字段。
- en: The important part of this code that I want to point out is the fragments used
    in the Relay container. This container doesn't actually use them directly. Instead,
    they're used by the `todos` query in the `TodoList` component (`Todo.getFrament()`).
    This is useful because it means that you can use the `Todo` component in another
    context, with another query, and its data dependencies will always be satisfied.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我想指出的这段代码的重要部分是Relay容器中使用的片段。这个容器实际上并不直接使用它们。相反，它们被`TodoList`组件中的`todos`查询使用（`Todo.getFrament()`）。这很有用，因为这意味着您可以在另一个上下文中使用`Todo`组件，使用另一个查询，并且它的数据依赖关系总是会被满足。
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you implemented some specific Relay and GraphQL ideas. Starting
    with the GraphQL schema, you learned how to declare the data that's used by the
    application and how these data types resolve to specific data sources, such as
    microservice endpoints. Then, you learned about bootstrapping GraphQL queries
    from Relay in your React Native app. Next, you walked through the specifics of
    adding, changing, and listing todo items. The application itself uses the same
    schema as the web version of the Todo application, which makes things much easier
    when you're developing web and native React applications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您实现了一些特定的Relay和GraphQL想法。从GraphQL模式开始，您学习了如何声明应用程序使用的数据以及这些数据类型如何解析为特定的数据源，例如微服务端点。然后，您学习了如何在React
    Native应用程序中从Relay引导GraphQL查询。接下来，您将详细了解如何添加、更改和列出待办事项。应用程序本身使用与Todo应用程序的Web版本相同的模式，这在开发Web和原生React应用程序时会更加容易。
- en: Well, that's a wrap for this book. We've gone over a lot of material together,
    and I hope that you've learned from reading it as much as I have from writing
    it. If there was one theme from this book that you should walk away with, it's
    that React is simply a rendering abstraction. As new rendering targets emerge,
    new React libraries will emerge as well. As developers think of novel ways to
    deal with state at scale, you'll see new techniques and libraries released. My
    hope is that you're now well prepared to work in this rapidly evolving React ecosystem.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这本书就到这里了。我们一起学习了很多材料，我希望你从阅读中学到的东西和我从写作中学到的一样多。如果有一个主题是你应该记住的，那就是React只是一个渲染抽象。随着新的渲染目标出现，新的React库也会出现。随着开发人员想出处理大规模状态的新方法，你会看到新的技术和库发布。我希望你现在已经准备好在这个快速发展的React生态系统中工作了。
