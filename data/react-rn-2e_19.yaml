- en: Collecting User Input
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集用户输入
- en: In web applications, you can collect user input from standard HTML form elements
    that look and behave similarly on all browsers. With native UI platforms, collecting
    user input is more nuanced.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中，您可以从标准HTML表单元素中收集用户输入，这些元素在所有浏览器上看起来和行为类似。对于原生UI平台，收集用户输入更加微妙。
- en: In this chapter, you'll learn how to work with the various React Native components
    that are used to collect user input. These include text input, selecting from
    a list of options, checkboxes, and date/time selectors. You'll see the differences
    between iOS and Android, and how to implement the appropriate abstractions for
    your app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用各种React Native组件来收集用户输入。这些包括文本输入、从选项列表中选择、复选框和日期/时间选择器。您将看到iOS和Android之间的区别，以及如何为您的应用程序实现适当的抽象。
- en: Collecting text input
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集文本输入
- en: It turns out that there's a lot to think about when implementing text inputs.
    For example, should it have placeholder text? Is this sensitive data that shouldn't
    be displayed on screen? Should you process text as it's entered, or when the user
    moves to another field?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 实施文本输入时，原来有很多要考虑的事情。例如，它是否应该有占位文本？这是不应该在屏幕上显示的敏感数据吗？在用户移动到另一个字段时，您应该如何处理文本？
- en: 'The noticeable difference with mobile text input versus traditional web text
    input is that the former has its own built-in virtual keyboard that you can configure
    and respond to. Let''s build an example that renders several instances of the
    `<TextInput>` component:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统的Web文本输入相比，移动文本输入的显着区别在于前者有自己内置的虚拟键盘，您可以对其进行配置和响应。让我们构建一个示例，渲染几个`<TextInput>`组件的实例：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I won''t go into depth on what each of these `<TextInput>` components is doing—there
    are comments in the code. Let''s see what these components look like on screen:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会深入讨论每个`<TextInput>`组件正在做什么 - 代码中有注释。让我们看看这些组件在屏幕上是什么样子的：
- en: '![](Images/45409a22-50c1-4dac-926f-1d2208fe5804.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/45409a22-50c1-4dac-926f-1d2208fe5804.png)'
- en: The plain text input shows the text that's been entered. The password field
    doesn't reveal any characters. The Placeholder Text is displayed when the input
    is empty. The Changed text state is also displayed. You're not seeing the submitted
    text state because I didn't press the Submitted button on the virtual keyboard
    before I took the screenshot.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 纯文本输入显示已输入的文本。密码字段不会显示任何字符。当输入为空时，占位文本会显示。还显示了更改的文本状态。您没有看到提交的文本状态，因为在我截屏之前我没有按下虚拟键盘上的提交按钮。
- en: 'Let''s take a look at the virtual keyboard for the input element where you
    changed the return key text via the `returnKeyType` prop:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看输入元素的虚拟键盘，您可以通过`returnKeyType`属性更改返回键文本：
- en: '![](Images/d54505b7-a055-4b4e-af99-41528e8bb530.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d54505b7-a055-4b4e-af99-41528e8bb530.png)'
- en: When the keyboard Return Key reflects what's going to happen when they press
    it, the user feels more in tune with the application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当键盘返回键反映用户按下它时会发生什么时，用户会更加与应用程序保持一致。
- en: Selecting from a list of options
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从选项列表中进行选择
- en: 'In web applications, you typically use the `<select>` element to let the user
    choose from a list of options. React Native comes with a `<Picker>` component,
    which works on both iOS and Android. There is some trickery involved with styling
    this component based on which platform the user is on, so let''s hide all of this
    inside of a generic `Select` component. Here''s the `Select.ios.js` module:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中，通常使用`<select>`元素让用户从选项列表中进行选择。React Native带有一个`<Picker>`组件，可以在iOS和Android上使用。根据用户所在的平台对此组件进行样式处理有一些技巧，因此让我们将所有这些隐藏在一个通用的`Select`组件中。这是`Select.ios.js`模块：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'That''s a lot of overhead for a simple `Select` component. Well, it turns out
    that it''s actually quite hard to style the React Native `<Picker>` component.
    Here''s the `Select.android.js` module:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于一个简单的`Select`组件来说有很多额外的开销。事实证明，样式化React Native的`<Picker>`组件实际上是相当困难的。以下是`Select.android.js`模块：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here are what the styles look like:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是样式的样子：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now you can render your `<Select>` component:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以渲染你的`<Select>`组件：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The basic idea of this example is that the selected option in the first selector
    changes the available options in the second selector. When the second selector
    changes, the label shows the selected size and garment as a string. Here''s how
    the screen looks:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的基本思想是，第一个选择器中选择的选项会改变第二个选择器中的可用选项。当第二个选择器改变时，标签会显示所选的尺寸和服装。以下是屏幕的样子：
- en: '![](Images/e00386aa-aaed-4619-ab70-16ef408d81b0.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e00386aa-aaed-4619-ab70-16ef408d81b0.png)'
- en: Toggling between off and on
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在关闭和打开之间切换
- en: 'Another common element you''ll see in web forms is checkboxes. React Native
    has a `Switch` component that works on both iOS and Android. Thankfully, this
    component is a little easier to style than the `Picker` component. Here''s a look
    at a simple abstraction you can implement to provide labels for your switches:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web表单中，你会看到另一个常见的元素是复选框。React Native有一个`Switch`组件，可以在iOS和Android上使用。幸运的是，这个组件比`Picker`组件更容易样式化。以下是一个简单的抽象，你可以实现为你的开关提供标签：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s see how we can use a couple of switches to control application
    state:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用一对开关来控制应用程序状态：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'These two switches simply toggle the `disabled` property of one another. Here''s
    what the screen looks like in iOS:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个开关简单地切换彼此的`disabled`属性。以下是iOS上屏幕的样子：
- en: '![](Images/f05182b4-03e9-4d1c-85fe-ff151c2be0a0.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f05182b4-03e9-4d1c-85fe-ff151c2be0a0.png)'
- en: 'Here''s what the same screen looks like on Android:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Android上相同屏幕的样子：
- en: '![](Images/531afc4e-9505-45db-b0d8-4e33aea963f5.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/531afc4e-9505-45db-b0d8-4e33aea963f5.png)'
- en: Collecting date/time input
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集日期/时间输入
- en: In this final section of the chapter, you'll learn how to implement date/time
    pickers. React Native has independent date/time picker components for iOS and
    Android, which means that it is up to you to handle the cross-platform differences
    between the components.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章的最后一节中，你将学习如何实现日期/时间选择器。React Native为iOS和Android分别提供了独立的日期/时间选择器组件，这意味着你需要处理组件之间的跨平台差异。 '
- en: 'So, let''s start with a date picker component for iOS:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们从iOS的日期选择器组件开始：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There''s not a lot to this component; it simply adds a label to the `DatePickerIOS`
    component. The Android version of the date picker needs a little more work. Let''s
    take a look at the implementation:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件并不复杂；它只是向`DatePickerIOS`组件添加了一个标签。日期选择器的Android版本需要更多的工作。让我们看一下实现：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The key difference between the two date pickers is that the Android version
    doesn't use a React Native component, such as `DatePickerIOS`. Instead, we have
    to use the imperative `DatePickerAndroid.open()` API. This is triggered when the
    user presses the date text that our component renders, and opens a date picker
    dialog. The good news is that this component of ours hides this API behind a declarative
    component.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 两个日期选择器之间的关键区别是，Android版本不使用React Native组件，比如`DatePickerIOS`。相反，我们必须使用命令式的`DatePickerAndroid.open()`
    API。当用户按下我们组件渲染的日期文本时，这将被触发，并打开一个日期选择器对话框。好消息是，我们的这个组件将这个API隐藏在一个声明性组件后面。
- en: I've also implemented a time picker component that follows this exact pattern.
    So, rather than listing that code here, I suggest that you download the code for
    this book from [https://github.com/PacktPublishing/React-and-React-Native-Second-Edition](https://github.com/PacktPublishing/React-and-React-Native-Second-Edition),
    so that you can see the subtle differences and run the example.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我还实现了一个遵循这个确切模式的时间选择器组件。因此，我建议您从[https://github.com/PacktPublishing/React-and-React-Native-Second-Edition](https://github.com/PacktPublishing/React-and-React-Native-Second-Edition)下载本书的代码，这样您就可以看到微妙的差异并运行示例。
- en: 'Now, let''s see how to use our date and time picker components:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用我们的日期和时间选择器组件：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Awesome! Now we have two simple components that work on iOS and Android. Let''s
    see how the pickers look on iOS:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们有两个简单的组件，可以在iOS和Android上使用。让我们看看在iOS上选择器的外观：
- en: '![](Images/b92c203b-0980-47c4-9c49-6f056649bb9a.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b92c203b-0980-47c4-9c49-6f056649bb9a.png)'
- en: 'As you can see, the iOS date and time pickers use the `Picker` component that
    you learned about earlier in this chapter. The Android picker looks a lot different—let''s
    look at it now:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，iOS的日期和时间选择器使用了您在本章中学到的`Picker`组件。Android选择器看起来大不相同-让我们现在看看它：
- en: '![](Images/e8208396-bca8-4529-89e2-f992075ec7ca.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e8208396-bca8-4529-89e2-f992075ec7ca.png)'
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the various React Native components that
    resemble the form elements from the web that you're used to. You started off by
    learning about text input, and how each text input has its own virtual keyboard
    to take into consideration. Next, you learned about `Picker` components that allow
    the user to select an item from a list of options. Then, you learned about `Switch`
    component,which are kind of like checkboxes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了各种类似于您习惯的Web表单元素的React Native组件。您首先学习了文本输入，以及每个文本输入都有自己的虚拟键盘需要考虑。接下来，您了解了`Picker`组件，允许用户从选项列表中选择项目。然后，您了解了`Switch`组件，类似于复选框。
- en: In the final section, you learned how to implement generic date/time pickers
    that work on both iOS and Android. In the next chapter, you'll learn about modal
    dialogs in React Native.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一节中，您学会了如何实现通用的日期/时间选择器，可以在iOS和Android上使用。在下一章中，您将学习有关React Native中模态对话框的内容。
- en: Test your knowledge
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的知识
- en: Why would you want to change the return key on the virtual keyboard for text
    inputs?
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么要更改文本输入的虚拟键盘上的返回键？
- en: You should never change the return key
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您永远不应该更改返回键
- en: Because in some cases, it makes sense to have a search button or something else
    that better matches the context of the input
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为在某些情况下，有意义的是有一个搜索按钮或其他更符合输入上下文的内容
- en: You should only change the return key for search inputs or password inputs
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您只应该更改搜索输入或密码输入的返回键
- en: Which `TextInput` property should be used to mark the input as a password field?
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该使用哪个`TextInput`属性来标记输入为密码字段？
- en: '**`secureTextEntry `**'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**`secureTextEntry`**'
- en: '`password`'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`password`'
- en: '`securePassword`'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`securePassword`'
- en: '`secureText`'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`secureText`'
- en: Why should you create an abstraction for selection elements?
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么要为选择元素创建抽象？
- en: Because the components are completely different for iOS and Android
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为iOS和Android的组件完全不同
- en: Because of styling challenges between the two platforms
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为两个平台之间的样式挑战
- en: You don't need to create an abstraction.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不需要创建一个抽象。
- en: Why should you create abstraction for date and time pickers?
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么要为日期和时间选择器创建抽象？
- en: Because the components are completely different for iOS and Android
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为iOS和Android的组件完全不同
- en: Because of styling challenges between the two platforms
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为两个平台之间的样式挑战
- en: You don't need to create an abstraction
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不需要创建一个抽象
- en: Further reading
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Visit the following links for more information:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下链接获取更多信息：
- en: '[https://facebook.github.io/react-native/docs/handling-text-input](https://facebook.github.io/react-native/docs/handling-text-input)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: https://facebook.github.io/react-native/docs/handling-text-input
- en: '[https://facebook.github.io/react-native/docs/switch](https://facebook.github.io/react-native/docs/switch)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: https://facebook.github.io/react-native/docs/switch
- en: '[https://facebook.github.io/react-native/docs/picker](https://facebook.github.io/react-native/docs/picker)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: https://facebook.github.io/react-native/docs/picker
- en: '[https://facebook.github.io/react-native/docs/datepickerios](https://facebook.github.io/react-native/docs/datepickerios)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: https://facebook.github.io/react-native/docs/datepickerios
- en: '[https://facebook.github.io/react-native/docs/datepickerandroid.html](https://facebook.github.io/react-native/docs/datepickerandroid.html)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: https://facebook.github.io/react-native/docs/datepickerandroid.html
