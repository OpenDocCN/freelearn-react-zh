- en: Preparing the Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备开发环境
- en: Before building applications with the MERN stack, we first need to prepare the
    development environment with each technology, and also with tools to aid development
    and debugging. This chapter guides you through understanding workspace options,
    essential development tools, how to set up the MERN technologies in your workspace,
    and the steps to check this setup with actual code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用MERN堆栈构建应用程序之前，我们首先需要准备每种技术的开发环境，以及用于辅助开发和调试的工具。本章将指导您了解工作空间选项、基本开发工具、如何在工作空间中设置MERN技术以及检查此设置的实际代码步骤。
- en: 'We are going to cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Workspace options
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作空间选项
- en: Code editors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码编辑器
- en: Chrome Developer Tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome开发者工具
- en: Git setup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git设置
- en: MongoDB setup
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB设置
- en: Node setup
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node设置
- en: npm modules to complete the MERN stack
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm模块以完成MERN堆栈
- en: Code to check MERN setup
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于检查MERN设置的代码
- en: Selecting development tools
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择开发工具
- en: There are plenty of options available when it comes to selecting basic development
    tools such as text editors or IDEs, version control software, and even the development
    workspace itself. In this section, we go over options and recommendations relevant
    to web development with MERN so you can make informed decisions when selecting
    these tools based on individual preferences.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择基本开发工具（如文本编辑器或IDE、版本控制软件甚至开发工作空间本身）时有很多选择。在本节中，我们将介绍与MERN Web开发相关的选项和建议，以便您可以根据个人偏好做出明智的决定。
- en: Workspace options
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作空间选项
- en: Developing on a local machine is the most common practice among programmers,
    but with the advent of good cloud development services, such as Cloud9 ([https://aws.amazon.com/cloud9/?origin=c9io](https://aws.amazon.com/cloud9/?origin=c9io)),
    it's now possible to use either or both. You can set up your local workspace with
    MERN technologies, and this will be assumed to be the case in the rest of the
    book, but you can also choose to run and develop the code in the cloud services
    that come equipped for Node development.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地计算机上开发是程序员中最常见的做法，但随着诸如Cloud9（[https://aws.amazon.com/cloud9/?origin=c9io](https://aws.amazon.com/cloud9/?origin=c9io)）等优秀的云开发服务的出现，现在可以同时使用本地和云端。您可以使用MERN技术设置本地工作空间，并且在本书的其余部分将假定为这种情况，但您也可以选择在配备了Node开发的云服务中运行和开发代码。
- en: Local and cloud development
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地和云开发
- en: You can choose to use both types of workspaces to enjoy the benefits of working
    locally without worrying about bandwidth/internet issues and to work remotely
    when you don't physically have your favorite local machine. To do this, you can
    use Git to version control your code, store your latest code on remote Git hosting
    services such as GitHub or BitBucket, and then share the same code across all
    your workspaces.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择同时使用这两种类型的工作空间，以享受在本地工作的好处，而不必担心带宽/互联网问题，并在没有您喜爱的本地计算机时远程工作。为此，您可以使用Git对代码进行版本控制，将最新代码存储在GitHub或BitBucket等远程Git托管服务上，然后在所有工作空间中共享相同的代码。
- en: IDE or text editors
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IDE或文本编辑器
- en: 'Most cloud development environments will come integrated with source code editors.
    But for your local workspace, you can pick any based on your preference as a programmer,
    then customize it for MERN development. For example, the following popular options
    can each be customized as required:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数云开发环境都将集成源代码编辑器。但是对于您的本地工作空间，您可以根据自己作为程序员的偏好选择任何编辑器，然后为MERN开发进行自定义。例如，以下流行选项都可以根据需要进行自定义：
- en: '**Atom** ([https://atom.io/](https://atom.io/)): A free, open-source text editor
    for GitHub that has many MERN stack relevant packages available from other developers'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Atom**（[https://atom.io/](https://atom.io/)）：GitHub的免费开源文本编辑器，有许多其他开发人员提供的与MERN堆栈相关的包可用'
- en: '**SublimeText** ([https://www.sublimetext.com/](https://www.sublimetext.com/)):
    A proprietary, cross-platform text editor that also has many MERN stack relevant
    packages available, along with support for JavaScript development'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SublimeText（https://www.sublimetext.com/）：一款专有的跨平台文本编辑器，还有许多与MERN堆栈相关的软件包可用，支持JavaScript开发
- en: '**Visual Studio Code** ([https://code.visualstudio.com/](https://code.visualstudio.com/)):
    A feature-rich source code editor by Microsoft with extensive support for modern
    web application development workflow, including support for MERN stack technologies'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code（https://code.visualstudio.com/）：微软开发的功能丰富的源代码编辑器，广泛支持现代Web应用程序开发工作流程，包括对MERN堆栈技术的支持
- en: '**WebStorm** ([https://www.jetbrains.com/webstorm/](https://www.jetbrains.com/webstorm/)):
    A full-fledged JavaScript IDE by JetBrains, with support for MERN stack-based
    development'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebStorm（https://www.jetbrains.com/webstorm/）：由JetBrains开发的全功能JavaScript IDE，支持基于MERN堆栈的开发
- en: Chrome Developer Tools
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chrome开发者工具
- en: Loading, viewing and debugging the frontend is a very crucial part of the web
    development process. The Chrome Developer Tools, which are a part of the Chrome
    Browser, have many great features that allow debugging, testing, and experimenting
    with the frontend code, and the look, feel, responsiveness, and performance of
    the UI. Additionally, the React Developer Tools extension is available as a Chrome
    plugin, and it adds React debugging tools to the Chrome Developer Tools.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 加载、查看和调试前端是Web开发过程中非常关键的一部分。Chrome开发者工具是Chrome浏览器的一部分，具有许多出色的功能，允许调试、测试和实验前端代码，以及UI的外观、响应和性能。此外，React开发者工具扩展可作为Chrome插件使用，并将React调试工具添加到Chrome开发者工具中。
- en: Git
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git
- en: Any development workflow is incomplete without a version control system that
    enables tracking code changes, code sharing, and collaboration. Over the years,
    Git has become the de facto version control system for many developers and is
    the most widely used distributed source code management tool. For code development
    in this book, Git will help primarily to track progress as we go through the steps
    to build out each application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 任何开发工作流程都不完整，如果没有版本控制系统来跟踪代码更改、共享代码和协作。多年来，Git已成为许多开发人员的事实标准版本控制系统，并且是最广泛使用的分布式源代码管理工具。在本书中，Git将主要帮助跟踪进度，因为我们逐步构建每个应用程序。
- en: Installation
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: To start using Git, first install it on your local machine or cloud development
    environment based on your system specifications. Relevant instructions to download
    and install the latest Git, along with documentation on using Git commands can
    be found at: [https://git-scm.com/downloads](https://git-scm.com/downloads).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Git，首先根据您的系统规格在本地计算机或基于云的开发环境上安装它。有关下载和安装最新Git的相关说明，以及使用Git命令的文档，可在以下网址找到：https://git-scm.com/downloads。
- en: Remote Git hosting services
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程Git托管服务
- en: Cloud-based Git repository hosting services such as GitHub and BitBucket help
    share your latest code across workspaces and deployment environments, and also
    to back up your code. These services pack in a lot of useful features to help
    with code management and the development workflow. To get started, you can create
    an account and set up remote repositories for your code bases.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 基于云的Git存储库托管服务，如GitHub和BitBucket，有助于在工作空间和部署环境之间共享最新的代码，并备份代码。这些服务提供了许多有用的功能，以帮助代码管理和开发工作流程。要开始使用，您可以创建一个帐户，并为您的代码库设置远程存储库。
- en: All these essential tools will enrich your web development workflow and increase
    productivity once you complete the necessary setup in your workspace and start
    building MERN applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些基本工具将丰富您的 Web 开发工作流程，并在您完成工作区的必要设置并开始构建 MERN 应用程序后提高生产力。
- en: Setting up MERN stack technologies
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 MERN 技术栈
- en: MERN stack technologies are being developed and upgraded as this book is being
    written, so for the work demonstrated throughout this book, we use the latest
    stable versions at the time of writing. Installation guidelines for most of these
    technologies are dependent on the system environment of your workspaces, so this
    section points to all relevant installation resources, and also acts as a guide
    for setting up a fully functioning MERN stack.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: MERN 技术栈正在开发和升级，因此在撰写本书时，我们使用的是最新的稳定版本。大多数这些技术的安装指南取决于工作区的系统环境，因此本节指向所有相关的安装资源，并且也作为设置完全功能的
    MERN 技术栈的指南。
- en: MongoDB
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB
- en: MongoDB must be set up and running in the development environment before any
    database features are added to MERN applications. At the time of writing, the
    current stable version of MongoDB is 3.6.3, and this version of the MongoDB Community
    Edition is used for developing the applications in this book. The rest of this
    section provides resources on how to install and run MongoDB.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在向 MERN 应用程序添加任何数据库功能之前，必须在开发环境中设置并运行 MongoDB。在撰写本文时，MongoDB 的当前稳定版本是 3.6.3，本书中用于开发应用程序的是
    MongoDB Community Edition 的这个版本。本节的其余部分提供了有关如何安装和运行 MongoDB 的资源。
- en: Installation
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: 'You need to install and start MongoDB on your workspace to be able to use it
    for development. The installation and startup process for MongoDB depends on workspace
    specifications:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在工作区安装并启动 MongoDB，以便在开发中使用它。MongoDB 的安装和启动过程取决于工作区的规格：
- en: Cloud development services will have their own instructions for installing and
    setting up MongoDB. For example, the how-to steps for Cloud9 can be found at: [https://community.c9.io/t/setting-up-mongodb/1717](https://community.c9.io/t/setting-up-mongodb/1717).
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云开发服务将有其自己的安装和设置 MongoDB 的说明。例如，Cloud9 的操作步骤可以在此找到：[https://community.c9.io/t/setting-up-mongodb/1717](https://community.c9.io/t/setting-up-mongodb/1717)。
- en: The guides for installation on your local machine are detailed at: [https://docs.mongodb.com/manual/installation/](https://docs.mongodb.com/manual/installation/).
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地机器上安装的指南详见：[https://docs.mongodb.com/manual/installation/](https://docs.mongodb.com/manual/installation/)。
- en: Running the mongo shell
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 mongo shell
- en: The *mongo* shell is an interactive tool for MongoDB and a good place to get
    familiar with MongoDB operations. Once MongoDB is installed and running, you can
    run the *mongo* shell on the command line. In the *mongo* shell, you can try commands
    to query and update data as well as perform administrative operations.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*mongo* shell 是 MongoDB 的交互式工具，是熟悉 MongoDB 操作的好地方。一旦安装并运行了 MongoDB，您可以在命令行上运行
    *mongo* shell。在 *mongo* shell 中，您可以尝试查询和更新数据以及执行管理操作的命令。'
- en: Node
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node
- en: Backend server implementation for the MERN applications relies on Node, and
    also npm. At the time of writing, 8.11.1 is the latest stable Node version available,
    and it comes bundled with npm version 5.6.0\. However, the latest version available
    for npm is 5.8.0, so after installing Node, npm will need to be upgraded as discussed
    in the following section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: MERN 应用程序的后端服务器实现依赖于 Node 和 npm。在撰写本文时，8.11.1 是最新的稳定 Node 版本，并且附带 npm 版本 5.6.0。然而，npm
    的最新版本是 5.8.0，因此在安装 Node 后，需要根据下一节的讨论升级 npm。
- en: Installation
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: 'Node can be installed via direct download, installers, or the Node version
    manager:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Node 可以通过直接下载、安装程序或 Node 版本管理器进行安装。
- en: You can install Node by directly downloading the source code or a pre-built
    installer specific to your workspace platform. Downloads are available at [nodejs.org/en/download](https://nodejs.org/en/download/).
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过直接下载源代码或针对您的工作平台特定的预构建安装程序来安装Node。下载地址为[nodejs.org/en/download](https://nodejs.org/en/download/)。
- en: Cloud development services may come with Node preinstalled, such as in Cloud9,
    or will have specific instructions for adding and updating Node.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云开发服务可能已经预装了Node，比如Cloud9，或者会有特定的添加和更新Node的说明。
- en: To test if the installation was successful, you can open the command line and
    run `node -v` to see if it correctly returns the version number.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试安装是否成功，可以打开命令行并运行`node -v`来查看它是否正确返回版本号。
- en: Upgrading npm versions
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级npm版本
- en: 'In order to install npm version 5.8.0, run the following install command from
    the command line, and check the version with **`npm -v`**:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装npm版本5.8.0，可以从命令行运行以下安装命令，并使用**`npm -v`**检查版本：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Node version management with nvm
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用nvm进行Node版本管理
- en: If you need to maintain multiple versions of Node and npm for different projects,
    nvm is a useful command-line tool to install and manage different versions on
    the same workspace. You have to install nvm separately. Instructions for setup
    can be found at: [github.com/creationix/nvm](https://github.com/creationix/nvm).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要为不同的项目维护多个Node和npm版本，nvm是一个有用的命令行工具，可以在同一工作空间中安装和管理不同的版本。您必须单独安装nvm。设置说明可以在[github.com/creationix/nvm](https://github.com/creationix/nvm)找到。
- en: npm modules for MERN
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MERN的npm模块
- en: The remaining MERN stack technologies are all available as npm modules and can
    be added to each project using `npm install`. These include key modules, such
    as React and Express, which are required to run each MERN application, and also
    modules that will be necessary during development. In this section, we list and
    discuss the modules, then see how to use the modules in a working project in the
    following section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的MERN堆栈技术都可以作为npm模块使用，并且可以通过`npm install`添加到每个项目中。这些包括关键模块，如React和Express，这些模块是运行每个MERN应用程序所必需的，还有在开发过程中将需要的模块。在本节中，我们列出并讨论这些模块，然后在下一节中看如何在一个工作项目中使用这些模块。
- en: Key modules
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键模块
- en: 'To integrate the MERN stack technologies and run your applications, we will
    need the following npm modules:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了集成MERN堆栈技术并运行您的应用程序，我们将需要以下npm模块：
- en: '**React**: To start using React, we will need two modules:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React**：要开始使用React，我们将需要两个模块：'
- en: '`react`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react`'
- en: '`react-dom`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react-dom`'
- en: '**Express**: To use Express in your code, you will need the `express` module'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Express**：要在代码中使用Express，您需要`express`模块'
- en: '**MongoDB**: To use MongoDB with Node applications, you also need to add the
    driver, which is available as an npm module named `mongodb`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MongoDB**：要在Node应用程序中使用MongoDB，还需要添加驱动程序，该驱动程序可作为名为`mongodb`的npm模块使用'
- en: devDependency modules
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: devDependency模块
- en: 'To maintain consistency throughout the development of the MERN applications,
    we will use JavaScript ES6 across the stack. As a consequence, and also to aid
    the development process, we will use the following additional npm modules to compile
    and bundle the code and to automatically reload the server and browser app as
    the code is updated during development:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在MERN应用程序的开发过程中保持一致性，我们将在整个堆栈中使用JavaScript ES6。因此，为了辅助开发过程，我们将使用以下额外的npm模块来编译和捆绑代码，并在开发过程中更新代码时自动重新加载服务器和浏览器应用程序：
- en: 'Babel modules are needed for converting ES6 and JSX to suitable JavaScript
    for all browsers. The modules needed to get Babel working are:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Babel模块用于将ES6和JSX转换为适合所有浏览器的JavaScript。需要的模块来使Babel工作的有：
- en: '`babel-core`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`babel-core`'
- en: '`babel-loader` for transpiling JavaScript files with Webpack'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`babel-loader`用于使用Webpack转换JavaScript文件'
- en: '`babel-preset-env`, `babel-preset-react`, and `babel-preset-stage-2` to provide
    support for React, the latest JS features, and some stage-x features such as declaring
    class fields that are not currently covered under `babel-preset-env`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`babel-preset-env`，`babel-preset-react`和`babel-preset-stage-2`用于支持React，最新的JS功能以及一些stage-x功能，例如声明目前未在`babel-preset-env`下覆盖的类字段'
- en: 'Webpack modules will help bundle the compiled JavaScript, both for the client-side
    and server-side code. Modules needed to get Webpack working are:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack模块将帮助捆绑编译后的JavaScript，用于客户端和服务器端代码。需要使Webpack工作的模块有：
- en: '`webpack`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack`'
- en: '`webpack-cli` to run Webpack commands'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-cli`用于运行Webpack命令'
- en: '`webpack-node-externals` to ignore external Node module files when bundling
    in Webpack'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-node-externals`在Webpack打包时忽略外部Node模块文件'
- en: '`webpack-dev-middleware` to serve the files emitted from Webpack over a connected
    server during development of the code'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-dev-middleware`在开发过程中通过连接的服务器提供从Webpack发出的文件'
- en: '`webpack-hot-middleware` to add hot module reloading into an existing server
    by connecting a browser client to a Webpack server and receiving updates as code
    changes during development'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-hot-middleware`将热模块重新加载添加到现有服务器中，通过将浏览器客户端连接到Webpack服务器，并在开发过程中接收代码更改的更新'
- en: '`nodemon` to watch server-side changes during development, so the server can
    be reloaded to put changes into effect.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nodemon`在开发过程中监视服务器端的更改，以便重新加载服务器以使更改生效。'
- en: '`react-hot-loader` for faster development on the client side. Every time a
    file changes in the React frontend, `react-hot-loader` enables the browser app
    to update without re-bundling the whole frontend code.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react-hot-loader`用于加快客户端的开发。每当React前端中的文件更改时，`react-hot-loader`使浏览器应用程序能够在不重新捆绑整个前端代码的情况下更新。'
- en: Although `react-hot-loader` is meant for aiding development flow, it is safe
    to install this module as a regular dependency rather than a devDependency. It automatically
    ensures hot reloading is disabled in production and the footprint is minimal.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`react-hot-loader`旨在帮助开发流程，但安装此模块作为常规依赖项而不是devDependency是安全的。它会自动确保在生产中禁用热重新加载，并且占用空间很小。
- en: Checking your development setup
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查您的开发设置
- en: In this section, we will go through the development workflow and write code
    step-by-step to ensure the environment is correctly set up to start developing
    and running MERN applications.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将逐步进行开发工作流程，并编写代码，以确保环境正确设置以开始开发和运行MERN应用程序。
- en: 'We will generate these project files in the following folder structure to run
    a simple setup project:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下文件夹结构中生成这些项目文件以运行一个简单的设置项目：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The code discussed in this section is available on GitHub in the repository
    at: [github.com/shamahoque/mern-simplesetup](https://github.com/shamahoque/mern-simplesetup).
    You can clone this code and run it as you go through the code explanations in
    the rest of this chapter.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论的代码可在GitHub的存储库中找到：[github.com/shamahoque/mern-simplesetup](https://github.com/shamahoque/mern-simplesetup)。您可以克隆此代码，并在本章的其余部分中阅读代码解释时运行它。
- en: Initializing package.json and installing npm modules
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化package.json并安装npm模块
- en: We will begin by using npm to install all the required modules. It is a best
    practice to add a `package.json` file in every project folder to maintain, document,
    and share the npm modules being used in the MERN application. The `package.json`
    file will contain meta information about the application, as well as list the
    module dependencies.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用npm安装所有必需的模块。在每个项目文件夹中添加`package.json`文件以维护、记录和共享MERN应用程序中使用的npm模块是最佳实践。`package.json`文件将包含有关应用程序的元信息，以及列出模块依赖项。
- en: 'Perform the steps outlined in the following to generate a `package.json` file,
    modify it, and use it to install the npm modules:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤生成`package.json`文件，修改它，并用它来安装npm模块：
- en: '`npm init`: From the command line, enter your project folder and run `npm init`.
    You will be asked a series of questions and then a `package.json` file will be
    auto-generated with your answers.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm init`: 从命令行进入项目文件夹，运行`npm init`。您将被问及一系列问题，然后将自动生成一个`package.json`文件，其中包含您的答案。'
- en: '`dependencies`: Open the `package.json` in your editor and modify the JSON
    object to add the key modules and `react-hot-loader` as regular `dependencies`.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dependencies`: 在编辑器中打开`package.json`，修改JSON对象，添加关键模块和`react-hot-loader`作为常规的`dependencies`。'
- en: The file path mentioned before a code block indicates the location of the code
    in the project directory. This convention has been maintained throughout the book
    to provide better context and guidance as you follow along with the code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块之前提到的文件路径表示项目目录中代码的位置。本书始终遵循这一约定，以提供更好的上下文和指导，让您能够跟着代码进行学习。
- en: '`mern-simplesetup/package.json`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/package.json`:'
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`devDependencies`: Modify `package.json` further to add the following npm modules
    required during development as `devDependencies`.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devDependencies`: 进一步修改`package.json`，添加以下在开发过程中所需的npm模块作为`devDependencies`。'
- en: '`mern-simplesetup/package.json`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/package.json`:'
- en: '[PRE3]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`npm install`: Save `package.json` and from the command line, run `npm install`
    to fetch and add all these modules to your project.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm install`: 保存`package.json`，然后从命令行运行`npm install`，以获取并添加所有这些模块到您的项目中。'
- en: Configuring Babel, Webpack, and Nodemon
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Babel、Webpack 和 Nodemon
- en: Before we start coding up the web application, we need to configure Babel, Webpack,
    and Nodemon to compile, bundle, and auto reload the changes in the code during
    development.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写Web应用程序之前，我们需要配置Babel、Webpack和Nodemon，在开发过程中编译、打包和自动重新加载代码更改。
- en: Babel
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Babel
- en: Create a `.babelrc` file in your project folder and add the following JSON with
    `presets` and `plugins` specified.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件夹中创建一个`.babelrc`文件，并添加以下 JSON，其中指定了`presets`和`plugins`。
- en: '`mern-simplesetup/.babelrc`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/.babelrc`:'
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `react-hot-loader/babel` plugin is required by the `react-hot-loader` module
    to compile `React` components.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-hot-loader/babel`插件是由`react-hot-loader`模块需要编译`React`组件。'
- en: Webpack
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack
- en: 'We will have to configure Webpack for bundling both the client and server code
    and the client code separately for production code. Create `webpack.config.client.js`,
    `webpack.config.server.js`, and `webpack.config.client.production.js` files in
    your project folder. All three files will have the following code structure:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不得不为捆绑客户端和服务器端代码以及生产代码分别配置Webpack。在项目文件夹中创建`webpack.config.client.js`、`webpack.config.server.js`和`webpack.config.client.production.js`文件。所有三个文件都将具有以下代码结构：
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `config` JSON object will differ with values specific to the client or server-side
    code, and development versus production code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`config` JSON对象的值将根据客户端或服务器端代码以及开发与生产代码而有所不同。'
- en: Client-side Webpack configuration for development
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于开发的客户端Webpack配置
- en: Update the `config` object with the following in your `webpack.config.client.js`
    file, to configure Webpack for bundling and hot loading React code during development.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`webpack.config.client.js`文件中更新`config`对象如下，以配置Webpack在开发过程中捆绑和热加载React代码。
- en: '`mern-simplesetup/webpack.config.client.js`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/webpack.config.client.js`:'
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`mode` sets `process.env.NODE_ENV` to the given value and tells Webpack to
    use its built-in optimizations accordingly. If not explicitly set, it defaults
    to the value `''production''`. It can also be set via the command line by passing
    the value as a CLI argument.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mode`将`process.env.NODE_ENV`设置为给定值，并告诉Webpack相应地使用其内置的优化。如果没有明确设置，它默认为值`''production''`。也可以通过命令行通过将值作为CLI参数传递来设置。'
- en: '`devtool` specifies how source maps are generated, if at all. Generally, a
    source map provides a way of mapping code within a compressed file back to its
    original position in a source file to aid debugging.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devtool`指定了如何生成源映射，如果有的话。通常，源映射提供了一种将压缩文件中的代码映射回源文件中的原始位置以帮助调试的方法。'
- en: '`entry` specifies the entry file where Webpack starts bundling, in this case
    with the `main.js` file in the `client` folder.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry`指定了Webpack开始打包的入口文件，在这种情况下是`client`文件夹中的`main.js`文件。'
- en: '`output` specifies the output path for the bundled code, in this case, set
    to `dist/bundle.js`.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output`指定了打包代码的输出路径，在这种情况下设置为`dist/bundle.js`。'
- en: '`publicPath` allows specifying the base path for all assets in the application.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`publicPath`允许指定应用程序中所有资产的基本路径。'
- en: '`module` sets the regex rule for the file extension to be used for transpilation,
    and the folders to be excluded. The transpilation tool to be used here is `babel-loader`.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module`设置了用于转译的文件扩展名的正则规则，以及要排除的文件夹。这里要使用的转译工具是`babel-loader`。'
- en: '`HotModuleReplacementPlugin` enables hot module replacement for `react-hot-loader`.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HotModuleReplacementPlugin`启用了`react-hot-loader`的热模块替换。'
- en: '`NoEmitOnErrorsPlugin` allows skipping emitting when there are compile errors.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NoEmitOnErrorsPlugin`允许在编译错误时跳过输出。'
- en: Server-side Webpack configuration
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端Webpack配置
- en: Modify the code to require `nodeExternals`, and update the `config` object with
    the following in your `webpack.config.server.js` file to configure Webpack for
    bundling server-side code.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 修改代码以要求`nodeExternals`，并在`webpack.config.server.js`文件中更新`config`对象以配置Webpack用于打包服务器端代码。
- en: '`mern-simplesetup/webpack.config.server.js`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/webpack.config.server.js`：'
- en: '[PRE7]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `mode` option is not set here explicitly but will be passed as required
    when running the Webpack commands with respect to running for development or building
    for production.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`mode`选项在这里没有明确设置，但在运行Webpack命令时，将根据开发或生产的需要进行传递。'
- en: Webpack starts bundling from the server folder with `server.js`, then outputs
    the bundled code in `server.generated.js` in the `dist` folder.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack从`server.js`文件夹开始打包，然后将打包后的代码输出到`dist`文件夹中的`server.generated.js`文件中。
- en: Client-side Webpack configuration for production
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于生产的客户端Webpack配置
- en: For preparing the client-side code for production, update the `config` object
    with the following code in your `webpack.config.client.production.js` file.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备客户端代码用于生产，更新`webpack.config.client.production.js`文件中的`config`对象与以下代码。
- en: '`mern-simplesetup/webpack.config.client.production.js`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/webpack.config.client.production.js`：'
- en: '[PRE8]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will configure Webpack for bundling the React code to be used in production
    mode, where the hot reloading plugin or debug configuration will no longer be
    required.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将配置Webpack用于打包用于生产模式的React代码，其中将不再需要热重载插件或调试配置。
- en: Nodemon
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nodemon
- en: Create a `nodemon.js` file in your project folder, and add the following configuration.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件夹中创建一个`nodemon.js`文件，并添加以下配置。
- en: '`mern-simplesetup/nodemon.js`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/nodemon.js`'
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This configuration will set up `nodemon` to watch for changes in the server
    files during development, then execute compile and build commands as necessary.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置将设置`nodemon`在开发过程中监视服务器文件的更改，然后根据需要执行编译和构建命令。
- en: Frontend views with React
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React的前端视图
- en: In order to start developing a frontend, first create a root template file called
    `template.js` in the project folder, which will render the HTML with `React` components.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始开发前端，首先在项目文件夹中创建一个名为`template.js`的根模板文件，它将使用`React`组件来渲染HTML。
- en: '`mern-simplesetup/template.js`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/template.js`:'
- en: '[PRE10]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When the server receives a request to the root URL, this HTML template will
    be rendered in the browser, and the `div` element with ID `"root"` will contain
    our `React` component.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器收到对根URL的请求时，这个HTML模板将在浏览器中被渲染，ID为`"root"`的`div`元素将包含我们的`React`组件。
- en: Next, create a `client` folder where we will add two React files, `main.js` and
    `HelloWorld.js`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个`client`文件夹，我们将在其中添加两个React文件，`main.js`和`HelloWorld.js`。
- en: The `main.js` file simply renders the top-level entry `React` component in the
    `div` element in the HTML document.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`main.js`文件简单地在HTML文档的`div`元素中渲染顶层入口`React`组件。'
- en: '`mern-simplesetup/client/main.js`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/client/main.js`:'
- en: '[PRE11]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, the entry `React` component is the `HelloWorld` component imported
    from `HelloWorld.js`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，入口`React`组件是从`HelloWorld.js`导入的`HelloWorld`组件。
- en: '`HelloWorld.js` contains a basic `HelloWorld` component, which is hot-exported
    to enable hot reloading with `react-hot-loader` during development.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelloWorld.js`包含一个基本的`HelloWorld`组件，它被热导出以在开发过程中使用`react-hot-loader`进行热重载。'
- en: '`mern-simplesetup/client/HelloWorld.js`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/client/HelloWorld.js`:'
- en: '[PRE12]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To see the `React` component rendered in the browser when the server receives
    a request to the root URL, we need to use the Webpack and Babel setup to compile
    and bundle this code, and add server-side code that responds to the root route
    request with the bundled code.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在服务器收到对根URL的请求时在浏览器中看到`React`组件被渲染，我们需要使用Webpack和Babel设置来编译和打包这段代码，并添加服务器端代码来响应根路由请求并返回打包后的代码。
- en: Server with Express and Node
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Express和Node构建服务器
- en: In the project folder, create a folder called `server`, and add a file called
    `server.js` that will set up the server. Then, add another file called `devBundle.js`,
    which will help compile the React code using Webpack configurations while in development
    mode.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件夹中，创建一个名为`server`的文件夹，并添加一个名为`server.js`的文件来设置服务器。然后，添加另一个名为`devBundle.js`的文件，它将在开发模式下使用Webpack配置来编译React代码。
- en: Express app
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Express应用程序
- en: In `server.js`, we will first add code to import the `express` module in order
    to initialize an Express app.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在`server.js`中，我们首先将添加代码来导入`express`模块，以初始化一个Express应用程序。
- en: '`mern-simplesetup/server/server.js`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/server.js`:'
- en: '[PRE13]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then we will use this Express app to build out the rest of the Node server application.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将使用这个Express应用程序来构建出Node服务器应用程序的其余部分。
- en: Bundle React app during development
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在开发过程中打包React应用程序
- en: In order to keep the development flow simple, we will initialize Webpack to
    compile the client-side code when the server is run. In `devBundle.js`, we will
    set up a compile method that takes the Express app and configures it to use the
    Webpack middleware to compile, bundle, and serve code, as well as enable hot reloading
    in development mode.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持开发流程简单，我们将初始化Webpack来在运行服务器时编译客户端代码。在`devBundle.js`中，我们将设置一个编译方法，它接受Express应用程序并配置它来使用Webpack中间件来编译、打包和提供代码，以及在开发模式下启用热重载。
- en: '`mern-simplesetup/server/devBundle.js`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/devBundle.js`:'
- en: '[PRE14]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We will call this compile method in `server.js` by adding the following lines
    while in development mode.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在开发模式下通过在`server.js`中添加以下行来调用这个编译方法。
- en: '`mern-simplesetup/server/server.js`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/server.js`:'
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These two highlighted lines are only meant for development mode and should be
    commented out when building the application code for production. In development
    mode, when these lines are executed, Webpack will compile and bundle the React
    code to place it in `dist/bundle.js`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这两行突出显示的代码仅用于开发模式，在构建应用程序代码以进行生产时应将其注释掉。在开发模式下，当执行这些行时，Webpack将编译和捆绑React代码并将其放置在`dist/bundle.js`中。
- en: Serving static files from the dist folder
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从dist文件夹中提供静态文件
- en: Webpack will compile client-side code in both development and production mode,
    then place the bundled files in the `dist` folder. To make these static files
    available on requests from the client side, we will add the following code in `server.js` to
    serve static files from `dist/folder`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack将在开发模式和生产模式下编译客户端代码，然后将捆绑文件放置在`dist`文件夹中。为了使这些静态文件在客户端请求时可用，我们将在`server.js`中添加以下代码来从`dist/folder`中提供静态文件。
- en: '`mern-simplesetup/server/server.js`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/server.js`：'
- en: '[PRE16]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Rendering templates at the root
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在根目录渲染模板
- en: When the server receives a request at the root URL `/`, we will render `template.js`
    in the browser. In `server.js`, add the following route handling code to the Express
    app to receive GET requests at `/`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器在根URL `/` 处收到请求时，我们将在浏览器中呈现`template.js`。在`server.js`中，向Express应用程序添加以下路由处理代码，以接收在`/`处的GET请求。
- en: '`mern-simplesetup/server/server.js`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/server.js`：'
- en: '[PRE17]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Finally, add server code to listen on the specified port for incoming requests.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，添加服务器代码以侦听指定端口的传入请求。
- en: '`mern-simplesetup/server/server.js`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/server.js`：'
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Connecting the server to MongoDB
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将服务器连接到MongoDB
- en: To connect your Node server to MongoDB, add the following code to `server.js`,
    and make sure you have MongoDB running in your workspace.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Node服务器连接到MongoDB，请在`server.js`中添加以下代码，并确保您的工作区中正在运行MongoDB。
- en: '`mern-simplesetup/server/server.js`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/server/server.js`：'
- en: '[PRE19]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this code example, `MongoClient` is the driver that connects to the running
    `MongoDB` instance using its `url` and allows us to implement the database related
    code in the backend.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码示例中，`MongoClient`是连接到运行中的`MongoDB`实例的驱动程序，使用其`url`，并允许我们在后端实现与数据库相关的代码。
- en: npm run scripts
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行npm脚本
- en: Update the `package.json` file to add the following npm run scripts for development
    and production.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`package.json`文件，添加以下npm运行脚本以进行开发和生产。
- en: '`mern-simplesetup/package.json`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-simplesetup/package.json`：'
- en: '[PRE20]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`npm run development`: This command will get Nodemon, Webpack, and the server
    started for development'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run development`：此命令将启动Nodemon、Webpack和服务器以进行开发'
- en: '`npm run build`: This will generate the client and server code bundles for
    production mode (before running this script, make sure to remove the `devBundle.compile`
    code from `server.js`)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run build`：这将为生产模式生成客户端和服务器代码包（在运行此脚本之前，请确保从`server.js`中删除`devBundle.compile`代码）'
- en: '`npm run start`: This command will run the bundled code in production'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run start`：此命令将在生产环境中运行捆绑代码'
- en: Developing and debugging in real time
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时开发和调试
- en: 'To run the code developed so far, and to ensure everything is working, you
    can go through the following steps:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行到目前为止开发的代码，并确保一切正常运行，可以按照以下步骤进行：
- en: '**Run the application from the command line**: `npm run development`.'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从命令行运行应用程序**：`npm run development`。'
- en: '**Load in browser**: Open the root URL in the browser, which is `http://localhost:3000`
    if you are using your local machine setup. You should see a page with the title
    MERN Kickstart that just shows Hello World!.'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在浏览器中加载**：在浏览器中打开根URL，即`http://localhost:3000`，如果您正在使用本地机器设置。您应该看到一个标题为MERN
    Kickstart的页面，上面只显示Hello World!。'
- en: '**Develop code and debug live**: Change the `HelloWorld.js` component text
    `''Hello World!''` to just `''hello''`. Save the changes to see the instantaneous
    update in the browser, and also check the command line output to see that `bundle.js`
    is not re-created. Similarly, you can also see instant updates when you change
    the server-side code, increasing productivity during development.'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发代码并调试实时更改：将`HelloWorld.js`组件文本中的`'Hello World!'`更改为`'hello'`。保存更改以在浏览器中看到即时更新，并检查命令行输出以查看`bundle.js`是否未重新创建。类似地，当您更改服务器端代码时，您也可以看到即时更新，从而提高开发效率。
- en: If you have made it this far, congratulations, you are all set to start developing
    exciting MERN applications.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经走到了这一步，恭喜您，您已经准备好开始开发令人兴奋的MERN应用程序了。
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed development tool options and how to install MERN
    technologies, and then we wrote code to check whether the development environment
    is set up correctly.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了开发工具选项以及如何安装MERN技术，然后编写了代码来检查开发环境是否设置正确。
- en: We began by looking at the recommended workspace, IDE, version control software,
    and browser options suitable for web development. You can select from these options
    based on your preferences as a developer.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先看了推荐的工作区、IDE、版本控制软件和适用于Web开发的浏览器选项。您可以根据自己作为开发人员的偏好从这些选项中进行选择。
- en: Next, we set up the MERN stack technologies by first installing MongoDB, Node,
    and npm, and then adding the remaining required libraries using npm.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们首先安装MongoDB、Node和npm，然后使用npm添加其余所需的库，从而设置了MERN堆栈技术。
- en: Before moving on to writing code to check this setup, we configured Webpack
    and Babel to compile and bundle code during development, and to build production
    ready code. We learned that it is necessary to compile the ES6 and JSX code that
    is used for developing a MERN application before opening the application on browsers.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续编写代码以检查此设置之前，我们配置了Webpack和Babel以在开发期间编译和捆绑代码，并构建生产就绪的代码。我们了解到，在在浏览器上打开MERN应用程序之前，有必要编译用于开发MERN应用程序的ES6和JSX代码。
- en: Additionally, we made the development flow efficient by including React Hot
    Loader for frontend development, configuring Nodemon for backend development,
    and compiling both the client and server code in one command when the server is
    run during development.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们通过为前端开发包括React Hot Loader，为后端开发配置Nodemon，并在开发期间运行服务器时编译客户端和服务器端代码的方式，使开发流程更加高效。
- en: In the next chapter, we use this setup to start building a skeleton MERN application
    that will function as a base for full-featured applications.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用此设置开始构建一个骨架MERN应用程序，该应用程序将作为功能齐全应用程序的基础。
