- en: Adding a Service Worker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加服务工作者
- en: Welcome to our first big step into the world of Progressive Web Applications.
    This chapter will be devoted to creating our first service worker which, in turn,
    will unlock much of the functionality that makes PWAs so special.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到我们迈向渐进式Web应用程序世界的第一步。本章将致力于创建我们的第一个服务工作者，这将解锁使PWA如此特别的许多功能。
- en: We’ve talked previously about PWAs bridging web apps and native applications.
    The way they do this is through service workers. Service workers make things such
    as push notifications and offline access possible. They're an exciting new technology
    with many applications (more and more emerging each year); if one piece of tech
    will transform web development in the next five years, it's service workers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经谈到过PWA是如何连接Web应用和原生应用的。它们通过服务工作者来实现这一点。服务工作者使推送通知和离线访问等功能成为可能。它们是一种令人兴奋的新技术，有许多应用（每年都有越来越多的新应用出现）；如果有一种技术能在未来五年内改变Web开发，那就是服务工作者。
- en: However, enough hype; let's dive in to what exactly a service worker is.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，足够的炒作；让我们深入了解服务工作者到底是什么。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is a service worker?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是服务工作者？
- en: The service worker life cycle
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务工作者的生命周期
- en: How to register a service worker on our page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在我们的页面上注册服务工作者
- en: What is a service worker?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是服务工作者？
- en: A **service worker** is a bit of JavaScript that sits between our application
    and the network.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务工作者**是一小段JavaScript代码，位于我们的应用和网络之间。'
- en: You can think of a script that runs outside the context of our application,
    but with which we can communicate from within the bounds of our code. It's a piece
    of our application, but separate from the rest.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以把它想象成在我们的应用程序之外运行的脚本，但我们可以在我们的代码范围内与其通信。它是我们应用的一部分，但与其余部分分开。
- en: The easiest example is in the context of caching files (which we’ll explore
    in the upcoming chapters). Let’s say that our application, when the user navigates
    to [https://chatastrophe.com](https://chatastrophe.com), goes and fetches our
    `icon.png` file.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的例子是在缓存文件的上下文中（我们将在接下来的章节中探讨）。比如说，当用户导航到[https://chatastrophe.com](https://chatastrophe.com)时，我们的应用会获取我们的`icon.png`文件。
- en: A service worker, if we configure it, will sit between our app and the network.
    When our app requests the icon file, the service worker intercepts that request
    and checks the local cache for the file. If found, it returns it; no network request
    is made. Only if it doesn't find the file in the cache does it let the network
    request go through; after the download is complete, it puts the file in the cache.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者，如果我们配置好了，将会位于我们的应用和网络之间。当我们的应用请求图标文件时，服务工作者会拦截该请求并检查本地缓存中是否有该文件。如果找到了，就返回该文件；不会进行网络请求。只有在缓存中找不到文件时，才会让网络请求通过；下载完成后，它会将文件放入缓存中。
- en: You can see where the term "worker" comes from--our service worker is a busy
    little bee.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到“工作者”这个术语是从哪里来的--我们的服务工作者就像一只忙碌的小蜜蜂。
- en: Let's look at another example; push notifications (sneak preview of [Chapter
    9](part0144.html#49AH00-7dd7c66301294003b85168009fe95fa4), *Making Our App Installable
    with a Manifest*). Most push notifications work this way--when a certain event
    happens (a user sends a new chat message), a messaging service is alerted (in
    our case, the message service is managed by Firebase). The messaging service sends
    an alert to the relevant registered users (who are registered via their devices),
    and then their devices create the notification (ding!).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看一个例子；推送通知（[第9章](part0144.html#49AH00-7dd7c66301294003b85168009fe95fa4)的预览，*使用清单使我们的应用可安装*）。大多数推送通知都是这样工作的--当发生某个事件（用户发送新的聊天消息）时，消息服务会被通知（在我们的情况下，消息服务由Firebase管理）。消息服务会向相关注册用户发送通知（这些用户通过他们的设备进行注册），然后他们的设备创建通知（叮咚！）。
- en: The problem with this flow, in a web app context, is that our application stops
    running when the user is not on the page, so we won't be able to notify them unless
    their app is already open, which completely defeats the point of push notifications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序的情况下，这种流程的问题在于，当用户不在页面上时，我们的应用程序会停止运行，因此除非他们的应用程序已经打开，否则我们将无法通知他们，这完全违背了推送通知的初衷。
- en: Service workers solve this problem by always being "on" and listening for messages.
    Now, the messaging service can alert our service worker, which displays a message
    to the user. Our application code is never actually involved, so it doesn't matter
    whether it’s running or not.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Service workers通过始终处于“开启”状态并监听消息来解决了这个问题。现在，消息服务可以提醒我们的service worker，后者向用户显示消息。我们的应用程序代码实际上并没有参与其中，因此它是否运行并不重要。
- en: This is exciting stuff, but with any new technology, there's a few rough edges,
    and some things to watch out for.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是令人兴奋的事情，但是对于任何新技术来说，都存在一些问题，需要注意一些事情。
- en: The service worker life cycle
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: service worker的生命周期
- en: The life of your service worker begins when a user first visits your page. The
    service worker is downloaded and begins running. It may go idle for a time when
    not needed, but can then restart when required.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户首次访问您的页面时，service worker的生命周期就开始了。service worker被下载并开始运行。当不需要时，它可能会空闲一段时间，但在需要时可以重新启动。
- en: This **always on** functionality is what makes the service workers useful for
    push notifications. It also makes service workers a bit unintuitive to work with
    (more on that to come). However, let's take a deep look at the life and death
    of a service worker on a typical page.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种**始终开启**的功能是使service workers对推送通知有用的原因。它也使service workers有点不直观（稍后会详细介绍）。然而，让我们深入了解典型页面上service
    worker的生死。
- en: First, the service worker is installed, if possible. All service worker installations
    will start with a check to see whether the technology is supported by the user's
    browser. As of now, Firefox, Chrome, and Opera have full support, and other browsers
    do not. Apple, for one, views service workers as **experimental technology**,
    indicating that they're still on the fence about the whole thing.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果可能的话，service worker会被安装。所有service worker的安装都将从检查用户浏览器是否支持该技术开始。截至目前，Firefox、Chrome和Opera都提供了全面支持，其他浏览器则没有。例如，苹果认为service
    workers是**实验性技术**，这表明他们对整个事情仍然持观望态度。
- en: If the user's browser is modern enough, the installation begins. The script
    (for example, `sw.js`) is installed (or rather, registered) within a certain scope.
    **Scope**, in this case, refers to what paths of the website it is concerned with.
    A global scope will take `'/'`, for example, all paths on the site, but you can
    also limit your service worker to `'/users'`; for example, to only cache certain
    parts of the application. We'll discuss more about scope in the caching chapters.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户的浏览器足够现代化，安装就会开始。脚本（例如`sw.js`）将在特定范围内安装（或者说注册）。在这种情况下，“范围”指的是它所关注的网站路径。例如，全局范围将采用`'/'`，即网站上的所有路径，但您也可以将service
    worker 限制为`'/users'`，例如，仅缓存应用程序的某些部分。我们将在缓存章节中更多地讨论范围。
- en: Once registered, the service worker is activated. The activation event also
    occurs whenever the service worker is required, for example, when a push notification
    comes in. The activation and deactivation of service workers means that you cannot
    persist state within a service worker; it’s just a bit of code ran in reaction
    to events, rather than a full-blown application of its own. That’s an important
    distinction to remember, lest we ask too much of our workers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注册后，service worker被激活。激活事件也会在需要service worker时发生，例如，当推送通知到来时。service worker的激活和停用意味着您不能在service
    worker中保持状态；它只是对事件的反应而运行的一小段代码，而不是一个完整的应用程序。这是一个重要的区别需要记住，以免我们对我们的工作人员要求过多。
- en: 'The service worker will be idle until an event occurs. As of now, there are
    two events that service workers react to: a `fetch` event (also known as a network
    request from the application) and a `message` (also known as an interaction from
    either the application code or a messaging service). We can register listeners
    for these events within the service worker, and then react as appropriate.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者将处于空闲状态，直到发生事件。目前，服务工作者对两个事件做出反应：`fetch`事件（也称为应用程序的网络请求）和`message`（也称为应用程序代码或消息服务的交互）。我们可以在服务工作者中为这些事件注册监听器，然后根据需要做出反应。
- en: 'The service worker code will update under two conditions: 24 hours has elapsed
    (in which case it stops and redownloads a method to prevent broken code from causing
    too much annoyance), or the user visits the page and the `sw.js` file has changed.
    Every time the user visits the app, the service worker compares its current code
    with the `sw.js` served by the site, and if there is even a byte of difference,
    the new `sw.js` is downloaded and registered.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者代码将在两种情况下更新：已经过去了24小时（在这种情况下，它会停止并重新下载一个方法，以防止损坏的代码引起太多烦恼），或者用户访问页面并且`sw.js`文件已更改。每当用户访问应用程序时，服务工作者将其当前代码与站点提供的`sw.js`进行比较，如果有一丁点的差异，就会下载并注册新的`sw.js`。
- en: That's the basic technical overview of service workers and how they work. It
    may seem complicated, but the good news is that using service workers is relatively
    straightforward; you can get a simple one up and running in a matter of minutes,
    which is exactly what we'll do next!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是服务工作者的基本技术概述以及它们的工作原理。这可能看起来很复杂，但好消息是使用服务工作者相对直接；您可以在几分钟内启动一个简单的服务工作者，这正是我们接下来要做的！
- en: Registering our first service worker
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册我们的第一个服务工作者
- en: Remember the distinction about service workers--they are a piece of our site,
    but run outside our application code. With that in mind, our service worker will
    live inside `public/ folder`, and not in `src/ folder`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 记住服务工作者的区别--它们是我们网站的一部分，但在我们的应用程序代码之外运行。考虑到这一点，我们的服务工作者将位于`public/文件夹`中，而不是`src/文件夹`中。
- en: 'Then, create a file called `sw.js` in your `public/ folder`. We''ll keep it
    simple for now; just add a single `console.log` inside:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`public/文件夹`中创建一个名为`sw.js`的文件。现在我们将保持简单；只需在其中添加一个`console.log`：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The real work (registering the service worker) will be done inside our `index.html`.
    For this process, we want to do the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的工作（注册服务工作者）将在我们的`index.html`中完成。对于这个过程，我们想要做以下事情：
- en: Check whether the browser supports service workers.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查浏览器是否支持服务工作者。
- en: Wait for the page to load.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待页面加载。
- en: Register the service worker.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册服务工作者。
- en: Log out the result.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登出结果。
- en: 'Let''s move through the steps one by one. First, let''s create an empty `script`
    tag below our Firebase initialization, inside `public/index.html`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地进行。首先，在我们的Firebase初始化下面，在`public/index.html`中创建一个空的`script`标签：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Checking for browser support
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查浏览器支持情况
- en: 'Checking whether the user''s browser can handle service workers is very easy.
    In our script tag, we''ll add a simple `if` statement:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 检查用户的浏览器是否支持服务工作者非常容易。在我们的脚本标签中，我们将添加一个简单的`if`语句：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we check the `window.navigator` object for any service worker support.
    The navigator can also be used (via its `userAgent` property) to check what browser
    the user has, though we won't need that here.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们检查`window.navigator`对象是否支持任何服务工作者。导航器还可以使用（通过其`userAgent`属性）来检查用户使用的浏览器，尽管我们在这里不需要。
- en: Listening for the page load
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听页面加载
- en: 'We don''t want to register our service worker until the page has finished loading;
    there''s no point, and it can lead to complications, so we''ll add an event listener
    to the window for the `''load''` event:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面加载完成之前，我们不想注册我们的service worker；这没有意义，而且可能会导致复杂性，因此我们将为窗口添加一个`'load'`事件的事件侦听器：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Registering the service worker
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册service worker
- en: As we noted earlier, the `window.navigator` has a `serviceWorker` property,
    the existence of which confirms browser support for service workers. We can also
    use that same object to register our service worker, via its `register` function.
    I know, it's shocking stuff.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前指出的，`window.navigator`有一个`serviceWorker`属性，其存在确认了浏览器对service worker的支持。我们还可以使用同一个对象通过其`register`函数来注册我们的service
    worker。我知道，这是令人震惊的事情。
- en: 'We call `navigator.serviceWorker.register`, and pass in the path to our service
    worker file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用`navigator.serviceWorker.register`，并传入我们的service worker文件的路径：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Logging out the result
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录结果
- en: 'Lastly, let''s add some `console.logs` so that we know the result of the registration.
    Luckily, `navigator.serviceWorker.register` returns a promise:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们添加一些`console.logs`，这样我们就知道注册的结果。幸运的是，`navigator.serviceWorker.register`返回一个promise：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Okay, let''s test this all out! Reload the page, and if all is good, you should
    see the following in your console:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们测试一下！重新加载页面，如果一切正常，您应该在控制台中看到以下内容：
- en: '![](../images/00051.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00051.jpeg)'
- en: 'You can also check it by navigating to the Application tab in DevTools, and
    then to the Service Workers tab:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过导航到DevTools中的应用程序选项卡，然后转到服务工作者选项卡来检查它：
- en: '![](../images/00052.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00052.jpeg)'
- en: I would recommend taking the opportunity to check the Update on reload button
    at this time. This ensures that your service worker is refreshed every time you
    refresh the page (remember the normal service worker life cycle we discussed earlier).
    Why take this precaution? We're stepping into the world of cached code, where
    the browser may think your service worker hasn't changed, when it actually has.
    This checkbox just ensures that you're always dealing with the freshest build
    of `sw.js`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您此时检查重新加载按钮。这样可以确保每次刷新页面时都刷新您的service worker（记住我们之前讨论的正常service worker生命周期）。为什么要采取这种预防措施？我们正在步入缓存代码的世界，浏览器可能会认为您的service
    worker没有改变，而实际上已经改变了。这个复选框只是确保您始终处理最新版本的`sw.js`。
- en: Okay, we've registered a worker! Fantastic. Let's take a moment to go through
    the service worker life cycle from within our `sw.js`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经注册了一个worker！太棒了。让我们花点时间从我们的`sw.js`中了解service worker的生命周期。
- en: Experiencing the service worker life cycle
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 体验service worker生命周期
- en: The first event that a service worker experiences is the `'install'` event.
    This is when a user first starts up a PWA. The standard user will only experience
    this once.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: service worker体验的第一个事件是`'install'`事件。这是用户第一次启动PWA时发生的。标准用户只会经历一次。
- en: 'To tap into this event, all we have to do is add an event listener to our service
    worker itself. To do that from within `sw.js`, we use the `self` keyword:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用这个事件，我们只需要在service worker本身添加一个事件侦听器。要在`sw.js`中执行这个操作，我们使用`self`关键字：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you reload the page, you should see `'Install!'` appear in the console.
    In fact, you should see it every time you reload the page, unless you uncheck
    the Update on reload option under Application | Service Workers. Then, you will
    only see it the first time.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当您重新加载页面时，您应该在控制台中看到`'Install!'`出现。事实上，除非您在应用程序|服务工作者下取消选中重新加载选项，否则每次重新加载页面时都应该看到它。然后，您只会在第一次看到它。
- en: 'Next up is the `activate` event. This event is triggered when the service worker
    first registers, before the registration completes. In other words, it should
    occur under the same situations as install, only later:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`activate`事件。此事件在服务工作者首次注册时触发，注册完成之前。换句话说，它应该在相同的情况下发生，只是稍后：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The last event we want to cover is the `''fetch''` event. This event is called
    whenever the application makes a network request. It''s called with an event object
    that has a request URL, which we can log out:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要覆盖的最后一个事件是`'fetch'`事件。每当应用程序发出网络请求时，都会调用此事件。它与一个具有请求URL的事件对象一起调用，我们可以将其记录出来：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After adding this in, we should see a very cluttered console:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 添加后，我们应该看到一个非常混乱的控制台：
- en: '![](../images/00053.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00053.jpeg)'
- en: You can delete all the `console.logs` in the service worker for now, but we
    will use each of these event listeners in the future.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以删除服务工作者中的所有`console.logs`，但是我们将在将来使用这些事件监听器中的每一个。
- en: Next, we'll look at hooking into the Firebase messaging service, to lay the
    groundwork for push notifications.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将研究如何连接到Firebase消息服务，为推送通知奠定基础。
- en: Adding Firebase to our service worker
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Firebase添加到我们的服务工作者
- en: Our goal for the rest of the chapter is to integrate Firebase into our service
    worker so that it is ready to receive push notifications and display them.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分目标是将Firebase集成到我们的服务工作者中，以便它准备好接收推送通知并显示它们。
- en: This is a big project. We won't be able to actually display push notifications
    until the end of the next chapter. However, here we'll see how to integrate third-party
    services into service workers, and dive a little more into the theory behind service
    workers.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个大项目。在下一章结束之前，我们将无法实际显示推送通知。然而，在这里，我们将看到如何将第三方服务集成到服务工作者中，并深入了解服务工作者背后的理论。
- en: Naming our service worker
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名我们的服务工作者
- en: The service we will use to send push notifications to user devices is called
    **Firebase Cloud Messaging**, or **FCM**. FCM works on the web by looking for
    a service worker and then sending it a message (containing the notification details).
    The service worker then displays the notification.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用于向用户设备发送推送通知的服务称为**Firebase Cloud Messaging**，或**FCM**。FCM通过寻找服务工作者在网络上运行，然后向其发送消息（包含通知详情）。然后服务工作者显示通知。
- en: 'By default, FCM looks for a service worker named `firebase-messaging-sw.js`.
    You can change that using `firebase.messaging().useServiceWorker` and passing
    a service worker registration object. For our purposes, however, it will be more
    straightforward to simply rename our service worker. Let''s do so; change the
    filename in `public/` and in the registration in `index.html`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，FCM会寻找一个名为`firebase-messaging-sw.js`的服务工作者。您可以使用`firebase.messaging().useServiceWorker`来更改，然后传递一个服务工作者注册对象。然而，为了我们的目的，简单地重命名我们的服务工作者会更直接。让我们这样做；在`public/`中更改文件名，并在`index.html`中更改注册：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once that's done, we can start initializing Firebase inside our service worker.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们可以开始在服务工作者中初始化Firebase。
- en: Let's say it again; a service worker is not linked to your application code.
    This means that it does not have access to our current Firebase initialization.
    We can reinitialize Firebase inside our service worker, though, and only keep
    what's relevant--the `messagingSenderId`. You can get your `messagingSenderId`
    from the Firebase console or your `secrets.js` file.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再说一遍；服务工作者与您的应用程序代码没有关联。这意味着它无法访问我们当前的Firebase初始化。但是，我们可以在服务工作者中重新初始化Firebase，并且只保留相关的内容--`messagingSenderId`。您可以从Firebase控制台或您的`secrets.js`文件中获取您的`messagingSenderId`。
- en: If you're concerned about security, ensure that you add `public/firebase-messaging-sw.js`
    to your `.gitignore`, though keeping your `messagingSenderId` private is not as
    important as keeping your API key secret.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您担心安全性，请确保将`public/firebase-messaging-sw.js`添加到您的`.gitignore`中，尽管保持您的`messagingSenderId`私有性并不像保持API密钥秘密那样重要。
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We also need to import the parts of Firebase we need at the top of the file,
    which include the `app` library and the `messaging` library:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在文件顶部导入我们需要的Firebase部分，包括`app`库和`messaging`库：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once that''s done, we should be able to `console.log` out `firebase.messaging();`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们应该能够`console.log`出`firebase.messaging();`：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should see the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下内容：
- en: '*![](../images/00054.jpeg)*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*！[](../images/00054.jpeg)*'
- en: This means our Firebase is up and running inside our service worker!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的Firebase已经在我们的服务工作者中运行起来了！
- en: If you're still seeing the logs from our old `sw.js`, go to the **Application
    | Service Workers** tab of DevTools and **Unregister** it. This is a good example
    of how service workers will persist even if they're not being reregistered.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然看到来自我们旧的`sw.js`的日志，请转到DevTools的**应用程序|服务工作者**选项卡，并**取消注册**它。这是服务工作者即使未重新注册也会持续存在的一个很好的例子。
- en: As explained earlier, a service worker is an always-running piece of code (though
    not perfectly accurate--think of the life cycle of such workers--which is a good
    way to think of them). This means it will always be waiting for FCM to tell it
    that there's a message coming in.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所解释的，服务工作者是一段始终运行的代码（虽然不完全准确--想想这些工作者的生命周期--这是一个很好的思考方式）。这意味着它将始终等待FCM告诉它有消息进来。
- en: However, right now, we don't have any messages coming. The next step is to start
    configuring when push notifications get sent, and how to display them!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，现在我们没有收到任何消息。下一步是开始配置何时发送推送通知，以及如何显示它们！
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned the basics of service workers, and got one up and
    running. Our next step is to start using it. Specifically, we want to use it to
    listen for notifications, and then display them to the user. Let's take another
    big step towards making our PWA feel like a native app by setting up push notifications.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了服务工作者的基础知识，并使其运行起来。我们的下一步是开始使用它。具体来说，我们希望使用它来监听通知，然后将它们显示给用户。通过设置推送通知，让我们再迈出一大步，使我们的PWA感觉像一个原生应用程序。
