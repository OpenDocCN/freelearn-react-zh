- en: Next Steps
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步
- en: React is one of the most amazing libraries that has been released in the last
    few years, not only because of the library itself and its great features but also,
    most importantly, due to the ecosystem that has been built around it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React是过去几年中发布的最令人惊奇的库之一，不仅因为库本身及其出色的功能，更重要的是由于围绕它构建的生态系统。
- en: Following the React community is very exciting and inspiring; there are new
    projects and tools to learn about and play with every single day. Not just that,
    there are conferences and meetups where you can talk to people in real life and
    build new relationships, blog posts that you can read to improve your skills and
    learn more, and many other ways to become a better developer.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 跟随React社区是非常令人兴奋和鼓舞的；每一天都有新的项目和工具可以学习和玩耍。不仅如此，还有会议和聚会，您可以在现实生活中与人交谈并建立新的关系，可以阅读博客文章来提高技能和学习更多知识，以及许多其他方法来成为更好的开发人员。
- en: The React ecosystem encourages best practices and love for open source developers,
    which is fantastic for the future of our careers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: React生态系统鼓励最佳实践和对开源开发者的热爱，这对我们职业生涯的未来非常棒。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How to contribute to the React library by opening issues and pull requests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过提出问题和拉取请求来为React库做出贡献
- en: Why it is important to give back to the community and share your code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么重要回馈社区并分享您的代码
- en: How to publish an `npm` package and how to use semantic versioning
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何发布一个`npm`包以及如何使用语义版本控制
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，您将需要以下内容：
- en: Node.js 12+
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: Visual Studio Code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: Contributing to React
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为React做出贡献
- en: One thing that people often want to do when they've used React for a while is
    to contribute to the library. React is open source, which means that its source
    code is  public  and anyone who's signed the  **Contributor License Agreement**  (**CLA**)
    can help to fix bugs, write documentation, or  even  add new features.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 人们在使用React一段时间后经常想做的一件事情是为库做出贡献。React是开源的，这意味着它的源代码是公开的，任何签署了**贡献者许可协议**（CLA）的人都可以帮助修复错误，编写文档，甚至添加新功能。
- en: 'You can read the full terms of the  CLA  at the following URL: [https://code.facebook.com/cla](https://code.facebook.com/cla).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址阅读完整的CLA条款：[https://code.facebook.com/cla](https://code.facebook.com/cla)。
- en: You need to make sure that any bug you post in React's GitHub repository is
    100% replicable. Once you verify this, and if you want to file an issue on GitHub,
    you can go to [https](https://github.com/facebook/react/issues/new)[://github.com/facebook/react/issues/new](https://github.com/facebook/react/issues/new).
    As you'll see, the issue comes with some pre-filled instructions, with one of
    those being to set up the minimal demo. The other questions help you to explain
    the problem and to describe current and expected behaviors.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要确保您在React的GitHub存储库中发布的任何错误是100%可复制的。一旦您验证了这一点，并且如果您想在GitHub上提交问题，您可以转到[https](https://github.com/facebook/react/issues/new)[://github.com/facebook/react/issues/new](https://github.com/facebook/react/issues/new)。正如您将看到的，该问题附带了一些预填的说明，其中之一是设置最小演示。其他问题帮助您解释问题并描述当前和预期行为。
- en: It is important for you to read the  *Facebook Code of Conduct*  before  participating  or
    contributing to the repository, at  [https://code.facebook.com/codeofconduct](https://code.facebook.com/codeofconduct).
    The document lists good behaviors that are expected from all community members
    and that everyone should follow. Once the issue is filed, you have to wait for
    one of the core contributors to examine it and tell you what they've decided to
    do with the bug. Depending on the severity of it, they might fix it, or ask you
    to fix it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在参与或贡献到存储库之前，你需要阅读*Facebook行为准则*，网址为[https://code.facebook.com/codeofconduct](https://code.facebook.com/codeofconduct)。该文件列出了所有社区成员期望的良好行为，每个人都应该遵循。问题提交后，你需要等待核心贡献者之一来检查并告诉你他们决定如何处理这个bug。根据bug的严重程度，他们可能会修复它，或者要求你修复它。
- en: In the second case, you can fork the repository and write code to solve the
    problem. It is important to follow the coding style guides and write all the tests
    for the fix. It is also crucial that all the old tests pass to make sure the new
    code does not introduce regressions in the code base. When the fix is ready and
    all the  tests  are green, you can submit a pull request,  and wait for the core
    team members to review it. They may decide to merge it or ask you to make some
    changes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二种情况下，你可以fork存储库并编写代码来解决问题。重要的是要遵循编码风格指南，并为修复编写所有测试。同样重要的是，所有旧测试都通过，以确保新代码不会在代码库中引入退化。当修复准备就绪并且所有测试都通过时，你可以提交一个拉取请求，并等待核心团队成员审查。他们可能决定合并它，或者要求你做一些更改。
- en: 'If you did not find a bug but you still  want  to contribute to the project,
    you can look into the issues tagged with the  good first issue  label on GitHub:
    [https://github.com/facebook/react/labels/good%20first%20issue](https://github.com/facebook/react/labels/good%20first%20issue).
    This is a great way to start contributing and it is fantastic that the React team
    gives everyone, especially new contributors, the possibility of being part of
    the project.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有找到bug，但仍然想为项目做贡献，你可以查看GitHub上标记为good first issue的问题：[https://github.com/facebook/react/labels/good%20first%20issue](https://github.com/facebook/react/labels/good%20first%20issue)。这是开始贡献的好方法，很棒的是React团队给了每个人，特别是新贡献者，成为项目的一部分的可能性。
- en: If you find a good first bug issue that has not already been taken by someone,
    you can add a comment on the issue saying that you are interested in working on
    it. One of the core members will get in touch with you. Make sure to discuss your
    approach and the path you want to take with them before you start coding so that
    you do not have to rewrite the code multiple times.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你找到一个好的第一个bug问题，而且还没有被其他人占用，你可以在问题上添加评论，表示你有兴趣去解决它。核心成员之一会与你联系。在开始编码之前，一定要与他们讨论你的方法和路径，这样你就不必多次重写代码了。
- en: Another way of improving React is by adding new features. It is important to
    say that the React team has a plan to follow, and the main features are designed
    and decided by the core members.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 改进React的另一种方式是添加新功能。重要的是要说React团队有一个计划要遵循，主要功能是由核心成员设计和决定的。
- en: 'If you are interested in  knowing the next steps that the library will take,
    you can find some of them under the Type: Big Picture  label on GitHub: [https://github.com/facebook/react/labels/Type%3A%20Big%20Picture](https://github.com/facebook/react/labels/Type%3A%20Big%20Picture).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你对库接下来的步骤感兴趣，你可以在GitHub上的Type: Big Picture标签下找到其中一些：[https://github.com/facebook/react/labels/Type%3A%20Big%20Picture](https://github.com/facebook/react/labels/Type%3A%20Big%20Picture)。'
- en: That said, if you have some good ideas about features that should be added to
    the library, the first thing to do is open an issue and start talking with the
    React team. You should avoid spending time writing code and submitting a pull
    request before asking them, because the feature you have in mind might not fit
    into their plans, or might conflict with other functionalities they are working
    on.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，如果你有一些关于应该添加到库中的功能的好主意，首先要做的是提出一个问题并开始与React团队交谈。在向他们提问之前，你应该避免花时间编写代码并提交拉取请求，因为你心中的功能可能不符合他们的计划，或者可能与他们正在开发的其他功能产生冲突。
- en: Distributing your code
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分发你的代码
- en: Contributing to the React ecosystem does not only mean pushing code into the
    React repository. To give back to the community and help developers, you can create
    packages, write blog posts, answer questions on Stack Overflow, and perform many
    other activities.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为React生态系统做出贡献不仅意味着将代码推送到React存储库中。为了回馈社区并帮助开发人员，你可以创建软件包，撰写博客文章，回答Stack Overflow上的问题，以及执行许多其他活动。
- en: Suppose, for example, you created a  React  component that solves a complex
    problem, and you think that other developers would benefit from using it instead
    of investing time in building their solutions. The best thing to do is to publish
    it on GitHub and make it available for everyone to read and use. However, pushing
    the code to GitHub is only a small action within a big process, and it comes with
    some responsibilities. So, you should have a clear idea in mind about the reasons
    behind your choice.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你创建了一个解决复杂问题的React组件，并且你认为其他开发人员使用它会比花时间构建他们自己的解决方案更有益。最好的做法是将其发布到GitHub，并使其可供所有人阅读和使用。然而，将代码推送到GitHub只是一个大过程中的一个小动作，并且伴随着一些责任。因此，你应该对你的选择背后的原因有一个清晰的想法。
- en: The motivation behind why you want to share your code contributes to improving
    your skills as a developer. Sharing your code, on the one hand, forces you to
    follow best practices and write better code. On the other hand, it exposes your
    code to feedback and comments from other developers. This is a big opportunity
    for you to receive tips and improve your code to make it better.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要分享你的代码的动机有助于提高你作为开发人员的技能。一方面，分享你的代码迫使你遵循最佳实践并编写更好的代码。另一方面，它使你的代码暴露于其他开发人员的反馈和评论之中。这是一个很好的机会，让你接收建议并改进你的代码，使其更好。
- en: Other than the suggestions related to the code itself, by pushing your code
    to GitHub, you benefit from other people's ideas. In fact, you might have thought
    about a single problem that your component can solve, but another developer may
    use it in a slightly different way, finding new solutions for it. Moreover, they
    might need new features and they could help you implement them, so that everyone,
    yourself included, can benefit from it. Building software together is a great
    way to improve both your skills and your packages, and that is why I strongly
    believe in open source.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了与代码本身相关的建议之外，将代码推送到GitHub，你可以从其他人的想法中受益。事实上，你可能已经考虑过你的组件可以解决一个问题，但另一个开发人员可能会以稍微不同的方式使用它，为其找到新的解决方案。此外，他们可能需要新功能，他们可以帮助你实现这些功能，以便每个人，包括你自己，都能从中受益。共同构建软件是提高自己技能和软件包的一个很好的方式，这就是为什么我坚信开源的原因。
- en: Another significant opportunity that open source can give you is letting you
    get in touch with smart and passionate developers from all around the world. Working
    closely with new people who have different backgrounds and skillsets is one of
    the best ways to keep our minds open and improve ourselves.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 开源还能给你带来的另一个重要机会是让你与来自世界各地的聪明和热情的开发人员联系在一起。与具有不同背景和技能的新人密切合作是保持开放思维和提高自身能力的最佳途径之一。
- en: Sharing code also gives you some responsibilities and it could be time-consuming.
    In fact, once the code is public and people can use it, you have to maintain it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 共享代码也会给您带来一些责任，并且可能会耗费时间。事实上，一旦代码是公开的，人们可以使用它，您就必须对其进行维护。
- en: Maintaining a repository requires commitment because the more popular it gets
    and the more people use it, the higher the number of questions and issues. For
    example, developers may encounter bugs and open issues, so you have to go through
    all of them and try to reproduce the problems. If the problems exist, then you
    have to write the fix and publish a new version of the library. You could receive
    pull requests from developers, which could be long and complex, and they need
    to be reviewed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 维护存储库需要承诺，因为它变得越来越受欢迎，越来越多的人使用，问题和疑问的数量就会越来越多。例如，开发人员可能会遇到错误并提出问题，因此您必须浏览所有这些并尝试重现问题。如果问题存在，那么您必须编写修复程序并发布库的新版本。您可能会收到其他开发人员的拉取请求，这可能会很长，很复杂，需要进行审核。
- en: If you decide to ask people to co-maintain the project and help you with issues
    and pull requests, you have to coordinate with them to share your vision and make
    decisions together.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定邀请其他人共同维护项目，并帮助您处理问题和拉取请求，您必须与他们协调，分享您的愿景并共同做出决策。
- en: Knowing the best practices when pushing open source code
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在推送开源代码时了解最佳实践
- en: We can go through some good practices that can help you make a better repository
    and avoid some of the common pitfalls.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以介绍一些好的实践，可以帮助您创建更好的存储库，并避免一些常见的陷阱。
- en: 'First of all, if you want to publish your  React  component, you have to write
    a comprehensive set of tests. With public code and many people contributing to
    it, tests are very helpful for many reasons:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果您想发布您的 React 组件，您必须编写一套全面的测试。对于公共代码和许多人的贡献，测试在许多方面都非常有帮助：
- en: They make the code more robust.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们使得代码更加健壮。
- en: They help other developers understand what the code does.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们帮助其他开发人员理解代码的功能。
- en: They make it easier to find regression when new code is added.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们使得在添加新代码时更容易找到回归。
- en: They make other contributors more confident in writing the code.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们使其他贡献者更有信心编写代码。
- en: The second important thing to do is add a `README`  with a description of the
    component, an example of its use, and documentation of the APIs and props that
    can be used. This helps users of the package, but it also avoids people opening
    issues and asking questions about how the library works and how it should be used.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第二件重要的事情是添加一个带有组件描述、使用示例和可用的API和props文档的“README”。这有助于包的用户，但也避免了人们提出关于库如何工作以及如何使用它的问题。
- en: It is also essential to add a  `LICENSE`file to your repository to make people
    aware of what they can and cannot do with your code. GitHub has a lot of ready-made
    templates to choose from. Whenever you can, you should keep the package small
    and add as few dependencies as you can. Developers tend to think carefully about
    size when they have to decide whether to use a library or not. Remember that heavy
    packages have a bad impact on performance.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 还必须向存储库添加一个“LICENSE”文件，以使人们了解他们可以做什么，以及不能做什么。GitHub有很多现成的模板可供选择。在您能做到的情况下，您应该保持包的体积小，并尽量减少依赖。当开发人员必须决定是否使用库时，他们往往会仔细考虑大小。请记住，庞大的包对性能有不良影响。
- en: Not only that, depending on too many third-party libraries can create problems
    if any of them are not maintained or have bugs.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅如此，过多地依赖第三方库可能会在其中任何一个未得到维护或存在错误时造成问题。
- en: 'One tricky part in sharing React components comes when you have to decide on
    the styling. Sharing JavaScript code is pretty straightforward while attaching
    the CSS is not as easy as you may think. In fact, there are many different paths
    you can take to provide it: from adding a CSS file to the package to using inline
    styles. The important thing to keep in mind is that CSS is global and generic
    class names may conflict with ones that already exist in the project where the
    component is imported.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在共享React组件时，一个棘手的部分是决定样式。共享JavaScript代码非常简单，而附加CSS并不像您想象的那么容易。事实上，您可以采取许多不同的路径来提供它：从向包中添加CSS文件到使用内联样式。要牢记的重要一点是CSS是全局的，通用的类名可能会与导入组件的项目中已经存在的类名发生冲突。
- en: The best choice is to include the fewest possible styles and make the component
    highly configurable for end users. In this way, developers will be more likely
    to use it because it can be adapted to their custom solutions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的选择是包含尽可能少的样式，并使组件对最终用户高度可配置。这样，开发人员更有可能使用它，因为它可以适应其自定义解决方案。
- en: To show that your component is highly customizable, you can add one or more
    examples to the repository to make it easy for everyone to understand how it works
    and which props it accepts. Examples are also useful so that you can test new
    versions of the component and see whether there are unexpected breaking changes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示您的组件是高度可定制的，您可以向存储库添加一个或多个示例，以便让每个人都能轻松理解它的工作原理和接受哪些属性。示例也很有用，这样您就可以测试组件的新版本，并查看是否存在意外的破坏性更改。
- en: As we saw in  *Chapter 3*,  *React Hooks*, tools such as **React Storybook**  can
    help you create living style guides, which are easier for you to maintain and
    for the  consumer  of your package to navigate and use.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*第3章*，*React Hooks*中看到的，诸如**React Storybook**之类的工具可以帮助您创建生动的样式指南，这样您就更容易维护，包的使用者也更容易导航和使用。
- en: An excellent example of a highly customizable library that uses Storybook to
    show all these variations is  `react-dates`  from Airbnb. You should take that
    repository as the perfect example of how to publish  React  components to GitHub.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常好的例子是使用Storybook展示所有这些变化的高度可定制库是来自Airbnb的`react-dates`。您应该将该存储库视为如何将React组件发布到GitHub的完美示例。
- en: 'As you can see, they use Storybook to show the different options of the component:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，他们使用Storybook来展示组件的不同选项：
- en: '![](assets/9cc2adde-e6fb-4d18-9ab2-072773653d20.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9cc2adde-e6fb-4d18-9ab2-072773653d20.png)'
- en: Last but not least, you might not just want to share your code – you may also
    want to distribute your package. The most popular package manager for JavaScript
    is  `npm`, which we've used throughout this book to install packages and dependencies.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，您可能不仅想分享您的代码 - 您可能还想分发您的包。JavaScript最流行的包管理器是`npm`，我们在本书中一直使用它来安装包和依赖项。
- en: In the next section, we will see how easy it is to publish a new package with  `npm`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到使用`npm`发布新包是多么容易。
- en: Other than  `npm`, some developers may need to add your component as a global
    dependency and use it without a package manager.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`npm`之外，一些开发人员可能需要将您的组件作为全局依赖项添加并在没有包管理器的情况下使用它。
- en: As we saw in *Chapter 1*, *Taking Your First Steps with React*, you can easily
    use  React  by just adding a script tag pointing to [https://unpkg.com/](https://unpkg.com/).
    It is important to give the users of your library the same option.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*第1章*，*开始使用React*中看到的，您可以通过添加一个指向[https://unpkg.com/](https://unpkg.com/)的脚本标签来轻松使用React。给您的库的用户提供相同的选择是很重要的。
- en: So, to offer a global version of your package, you should build the  **Universal
    Module Definition**  (**UMD**) version as well. With webpack,  this is  pretty  straightforward;
    you just  have  to set `libraryTarget`  in the output section of the configuration
    file.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了提供包的全局版本，您还应该构建**通用模块定义**（**UMD**）版本。使用webpack，这非常简单；您只需在配置文件的输出部分设置`libraryTarget`。
- en: Publishing an npm package
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布npm包
- en: The most popular way of making a  package  available to developers is by publishing
    it to  `npm`, the package manager for Node.js.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将包发布给开发者最流行的方式是通过将其发布到`npm`，这是Node.js的包管理器。
- en: We used it in all the examples in this book and you have seen how easy it is
    to install a package; it is just a matter of running the `npm  install` package,
    and that is it. What you may not know is how easy it is to publish a package as
    well.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书的所有示例中都使用了它，您已经看到安装包有多么容易；只需运行`npm install`包，就可以了。您可能不知道的是发布包也同样容易。
- en: 'First of all, let''s say you move into an empty directory and write the following
    in your terminal:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，假设您进入一个空目录，并在终端中输入以下内容：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A new  `package.json` file will be created and some questions will be displayed.
    The first one is the package name, which defaults to the folder name, and then
    the version number. These are the most important ones because the first is the
    name that the users of your package will refer to when they install and use it;
    the second helps you release new versions of your package safely and without breaking
    other people's code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建一个新的`package.json`文件，并显示一些问题。第一个是包名称，默认为文件夹名称，然后是版本号。这些是最重要的，因为第一个是您的包的用户在安装和使用时将引用的名称；第二个帮助您安全地发布新版本的包，而不会破坏其他人的代码。
- en: The version number is composed of three numbers separated by a dot, and they
    all have a meaning. The last number of the package on the right represents the
    patch, and it should be increased when a new version of the library that contains
    bug fixes is pushed to  `npm`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 版本号由三个由点分隔的数字组成，它们都有意义。右侧包的最后一个数字代表补丁，当推送修复bug的新版本库时，应该增加这个数字。
- en: The number in the middle indicates the minor version of the release, and it
    should be changed when new features are added to the library. Those new features
    should not break existing APIs. Finally, the first number on the left represents
    the major version, and it has to be increased when a version containing breaking
    changes is released to the public.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 中间的数字表示发布的次要版本，并且当向库添加新功能时应该更改。这些新功能不应该破坏现有的API。最后，左侧的第一个数字代表主要版本，当发布包含破坏性更改的版本时，它必须增加。
- en: Following this approach, called  **Semantic Versioning**  (**SemVer**), is good
    practice and it makes your users more confident when they  have  to update your
    package.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这种称为**语义化版本控制**（**SemVer**）的方法是一个良好的实践，它会让您的用户更加自信，因为他们需要更新您的包时会更加放心。
- en: The first version of a  package  is usually  `0.1.0`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 包的第一个版本通常是`0.1.0`。
- en: 'To publish an  `npm`  package, you must have an  `npm`  account, which you
    can easily create by running the following command in the console, where  `$username`  is
    the name of your choice:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要发布一个`npm`包，您必须拥有一个`npm`账户，您可以通过在控制台中运行以下命令轻松创建，其中`$username`是您选择的名称：
- en: '[PRE1]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the user is created, you can run the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 用户创建后，您可以运行以下命令：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A new entry will be added to the registry with the package name and the version
    you specified in  `package.json`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 新条目将被添加到注册表中，其中包含您在`package.json`中指定的包名称和版本。
- en: 'Whenever you change something in your library and you want to push a new version,
    you just have to run  `$type`, where one patch is minor or major:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您在库中更改内容并且想要推送新版本时，您只需运行`$type`，其中一个补丁是次要的或主要的：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command will bump the version automatically in your  `package.json` file
    and it will also create a commit and a tag if your folder is under version control.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将自动在您的`package.json`文件中提升版本，并且如果您的文件夹处于版本控制下，它还将创建一个提交和一个标签。
- en: Once the version number is increased, you just have to run  `npm publish`  again,
    and the new version will be available to users.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦版本号增加，您只需再次运行`npm publish`，新版本将可供用户使用。
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In the last stop on this trip around the React world, we have seen some of the
    aspects that make React great – its community and its ecosystem – and how to contribute
    to them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次环绕React世界的旅程的最后一站，我们看到了使React变得伟大的一些方面 - 其社区和生态系统 - 以及如何为它们做出贡献。
- en: You learned how to open an issue if you find a bug in React, and the steps to
    take to make it easier for its core developers to fix it. You now know the best
    practices when making code open source, and the benefits and the responsibilities
    that come with it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您学会了如何在发现React中的错误时提出问题，以及采取的步骤使其核心开发人员更容易修复它。您现在知道在开源代码时的最佳实践，以及随之而来的好处和责任。
- en: Finally, you saw how easy it is to publish packages on the  `npm`  registry,
    and how to choose the right version number to avoid breaking other people's code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您看到了在`npm`注册表上发布软件包有多么容易，以及如何选择正确的版本号以避免破坏其他人的代码。
