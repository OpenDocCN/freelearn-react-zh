- en: Chapter 12. Refining Your Flux Apps with Redux
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。使用Redux完善Flux应用程序
- en: 'The preceding chapter walked you through the implementation of a full-fledged
    React application built on top of a Flux architecture. In this chapter, you''ll
    make some modifications to this app so that it uses the Redux library to implement
    the Flux architecture. Here''s how this chapter is organized:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前一章向您介绍了在Flux架构之上构建的完整的React应用程序的实现。在本章中，您将对此应用程序进行一些修改，以便它使用Redux库来实现Flux架构。本章的组织方式如下：
- en: A brief overview of Redux
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redux的简要概述
- en: Implementing reducer functions that control state
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现控制状态的减速器功能
- en: Building Redux action creators
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Redux动作创建者
- en: Connecting components to Redux stores
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将组件连接到Redux存储库
- en: The Redux entry point into your application's state
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redux进入应用程序状态的入口点
- en: Why Redux?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Redux？
- en: Before we get started with refactoring your application, we'll spend a couple
    of minutes looking at Redux at a high level. Just enough to whet your appetite.
    Ready?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始重构应用程序之前，我们将花几分钟时间高层次地了解Redux。足够激发您的兴趣。准备好了吗？
- en: One store to rule them all
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一切由一个存储库控制
- en: The first major difference between traditional Flux applications and Redux is
    that, with Redux, you only have one store. A traditional Flux architecture might
    only call for one store as well, but it might have several of them. You would
    think that having multiple stores could actually simplify the architecture since
    you could separate states by different sections of the application. Indeed, this
    is a good tactic, but it doesn't necessarily hold up in practice. Creating more
    than one store can lead to confusion. Stores are moving parts in your architecture;
    if you have more of them, there's more potential for something to go wrong.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 传统Flux应用程序和Redux之间的第一个主要区别是，使用Redux时，您只有一个存储库。传统的Flux架构可能也只需要一个存储库，但可能有几个存储库。您可能会认为拥有多个存储库实际上可以简化架构，因为您可以通过应用程序的不同部分分离状态。的确，这是一个不错的策略，但在实践中并不一定成立。创建多个存储库可能会导致混乱。存储库是架构中的移动部件；如果您有更多的存储库，就会有更多的可能出现问题的地方。
- en: Redux removes this factor by allowing only one store. You might think that this
    would lead to a monolithic data structure that's difficult for various application
    features to use. This isn't the case, because you're free to structure your store
    any way you please.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Redux通过只允许一个存储库来消除了这一因素。您可能会认为这会导致一个庞大的数据结构，难以供各种应用程序功能使用。但事实并非如此，因为您可以自由地按照自己的意愿构建存储库。
- en: Fewer moving parts
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更少的移动部件
- en: By only allowing one store, Redux takes moving parts out of the picture. Another
    place where Redux simplifies your architecture is in removing the need for a dedicated
    dispatcher. In traditional Flux architectures, the dispatcher is a distinct component
    that sends messages to stores. Since there's only one store in Redux architectures,
    you can just dispatch actions directly to the store. In other words, the store
    is the dispatcher.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过只允许一个存储库，Redux将移动部件排除在外。Redux简化架构的另一个地方是消除了对专用调度程序的需求。在传统的Flux架构中，调度程序是一个独立的组件，用于向存储库发送消息。由于Redux架构中只有一个存储库，您可以直接将操作分派到存储库。换句话说，存储库就是调度程序。
- en: The final place that Redux reduces the number of moving parts in your code is
    in event listeners. In traditional Flux applications, you have to manually subscribe
    and unsubscribe from store events in order to wire everything up correctly. This
    is a distraction when you can have a library handle the wiring work for you. This
    is something that Redux does well.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Redux在代码中减少移动部件数量的最终位置是事件监听器。在传统的Flux应用程序中，您必须手动订阅和取消订阅存储事件，以正确地连接一切。当您可以让一个库处理连接工作时，这会分散注意力。这是Redux擅长的事情。
- en: Uses the best parts of Flux
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Flux的最佳部分
- en: Redux is not Flux, in the traditional sense. Flux has a specification and a
    library that implements it. Redux is not this. As mentioned in the preceding section,
    Redux is a simplification of Flux. It keeps all of the Flux concepts that lead
    to sound application architectures while ignoring the tedious bits that can make
    Flux difficult to implement and ultimately difficult to adopt.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Redux并不是传统意义上的Flux。Flux有一个规范和一个实现它的库。Redux不是这样的。正如前面所提到的，Redux是对Flux的简化。它保留了所有导致健壮应用架构的Flux概念，同时忽略了那些让Flux难以实现和最终难以采用的繁琐部分。
- en: Controlling state with reducers
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用减速器控制状态
- en: The flagship concept of Redux is that, state is controlled by reducer functions.
    In this section, we'll get you caught up on what reducers are, followed by the
    implementation of reducer functions in your Snapterest app.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Redux的旗舰概念是，状态由减速器函数控制。在本节中，我们将让你了解减速器是什么，然后实现在你的Snapterest应用中的减速器函数。
- en: What are reducers?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是减速器？
- en: Reducers are functions that take a data collection, such as an object or an
    array, and return a new collection. The returned collection can have the same
    data in it, or it can have completely different data than the initial collection.
    In Redux applications, reducer functions take a slice of state, and return a new
    slice of state. That's it! You've just learned the crux of the Redux architecture.
    Now let's see reducer functions in action.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 减速器是函数，它接受一个数据集合，比如对象或数组，并返回一个新的集合。返回的集合可以包含与初始集合相同的数据，也可以包含完全不同的数据。在Redux应用中，减速器函数接受一个状态片段，并返回一个新的状态片段。就是这样！你刚刚学会了Redux架构的关键。现在让我们看看减速器函数的实际应用。
- en: Reducer functions in Redux applications can be separated into modules that represent
    the part of the application state they work with. We'll look at the collection
    reducers, followed by the tweet reducers of the Snapterest app.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Redux应用中的减速器函数可以分成代表它们所处理的应用状态部分的模块。我们将先看看Snapterest应用的集合减速器，然后是推文减速器。
- en: Collection reducers
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合减速器
- en: 'Now let''s walk through the collection reducer function that changes part of
    the application state. First, let''s take a look at the function in its entirety:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看改变应用状态部分的集合减速器函数。首先，让我们来看看完整的函数：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, the new state that's returned is based on the action that was
    dispatched. The action name is supplied to this function as an argument. Now let's
    walk through the different scenarios of this reducer.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，返回的新状态是基于分发的动作。动作名称作为参数提供给这个函数。现在让我们来看看这个减速器的不同情景。
- en: Adding tweets to collections
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将推文添加到集合中
- en: 'Let''s take a look at the `add_tweet_to_collection` action:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`add_tweet_to_collection`动作：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `switch` statement detects that `action type` is `add_tweet_to_collection`.
    The action also has a `tweet` property that contains the actual tweet to add.
    The `tweet` variable is used here to build an object with the `tweet` ID as the
    key, and `tweet` as the value. This is the format that the `collectionTweets`
    object is expecting.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`switch`语句检测到`动作类型`是`add_tweet_to_collection`。动作还有一个包含要添加的实际推文的`推文`属性。这里使用`推文`变量来构建一个以`推文`ID为键，`推文`为值的对象。这是`collectionTweets`对象期望的格式。'
- en: Then we return the new state. It's important to remember that this should always
    be a new object, not a reference to some other object. This is how you avoid unintended
    side-effects in Redux applications. Thankfully, we can use the object spread operator
    to simplify this task.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们返回新状态。重要的是要记住，这应该始终是一个新对象，而不是对其他对象的引用。这是你在Redux应用中避免意外副作用的方法。幸运的是，我们可以使用对象扩展运算符来简化这个任务。
- en: Removing tweets from collections
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从集合中删除推文
- en: 'Removing a tweet from the `collectionTweets` object means that we have to delete
    the key which has the `tweet` ID to be deleted. Let''s see how this is done:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从`collectionTweets`对象中删除推文意味着我们必须删除具有要删除的`tweet` ID的键。让我们看看这是如何完成的：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice how we're assigning a new object to the `collectionTweets` variable?
    Once again, the spread operator comes in handy here to avoid extra syntax. The
    reason we're doing it this way is so that the reducer always returns a new reference.
    Once we delete the tweet from our `collectionTweets` object, we can return the
    new state object that includes `collectionTweets` as a property.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何将一个新对象分配给`collectionTweets`变量？再次，扩展运算符在这里非常有用，可以避免额外的语法。我们这样做的原因是为了使减速器始终返回一个新的引用。一旦我们从`collectionTweets`对象中删除推文，我们可以返回包括`collectionTweets`作为属性的新状态对象。
- en: 'The other tweet removal action is `remove_all_tweets_from_collection`. Here''s
    what it looks like:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个推文删除动作是`remove_all_tweets_from_collection`。以下是它的样子：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Removing all tweets means that we can just replace the `collectionTweets` value
    with a new empty object.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 删除所有推文意味着我们可以用新的空对象替换`collectionTweets`值。
- en: Setting the collection name
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置集合名称
- en: 'When a collection of tweets is renamed, we have to update the Redux store.
    This is done by getting `editingName` from the state when the `set_collection_name`
    action is dispatched:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当一组推文被重命名时，我们必须更新Redux存储。这是通过在调度`set_collection_name`动作时从状态中获取`editingName`来完成的：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can see that the `collectionName` value is set to `editingName`, and `isEditingName`
    is set to `false`. This is meant to indicate that since the value has been set,
    we know that the user is no longer editing the name.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到`collectionName`值设置为`editingName`，`isEditingName`设置为`false`。这意味着自从值被设置以来，我们知道用户不再编辑名称。
- en: Editing collection names
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑集合名称
- en: 'You just saw how to set the collection name once the user saves their changes.
    However, there''s more to editing text when it comes to tracking state in Redux
    stores. First, we have to enable the text to be edited in the first place; this
    gives the user some sort of visual cue:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚看到了如何在用户保存更改后设置集合名称。但是，当涉及在Redux存储中跟踪状态时，编辑文本还有更多内容。首先，我们必须允许文本首先被编辑；这给用户一些视觉提示：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, there''s the text that the user is actively typing in the text input.
    This has to go somewhere in the store too:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，用户正在文本输入中积极输入的文本。这也必须在存储中找到一个位置：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Not only will this cause the appropriate React components to re-render, but
    it also means that we have the text stored in the state, ready to go when the
    user is finished editing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅会导致适当的React组件重新渲染，而且意味着我们在状态中存储了文本，当用户完成编辑时可以使用。
- en: Tweet reducers
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推文减速器
- en: There is only one action that the tweet reducer needs to handle, but this doesn't
    mean that we shouldn't have the tweet reducer in its own module in anticipation
    of future actions for tweets. For now, let's just focus on what our app currently
    does.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 推文减速器只需要处理一个动作，但这并不意味着我们不应该在推特减速器中单独设置模块，以预期未来的推文动作。现在，让我们专注于我们的应用当前的功能。
- en: Receiving tweets
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收推文
- en: 'Let''s take a look at the tweet reducer code that handles the `receive_tweet`
    action:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下处理`receive_tweet`动作的推文减速器代码：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This reducer is pretty straightforward. The `action.tweet` value is returned
    as the new state when the `receive_tweet` action is dispatched. Since this is
    a small reducer function, it might be a good place to point out some things that
    are common to all reducer functions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个减速器非常简单。当调度`receive_tweet`动作时，`action.tweet`值将作为新状态返回。由于这是一个小的减速器函数，这可能是指出所有减速器函数共同点的好地方。
- en: The first argument that is passed to a reducer function is the old state. This
    argument has a default value because the first time the reducer is called, there
    is no state and this value is used to initialize it. In this case, the default
    state is null.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 reducer 函数的第一个参数是旧状态。这个参数有一个默认值，因为第一次调用 reducer 时，没有状态，这个值用于初始化它。在这种情况下，默认状态是
    null。
- en: The second thing to point out about reducers is that they always return a new
    state when called. Even if it doesn't produce any new state, a reducer function
    needs to return the old state. Redux will set the new state to whatever is returned
    by the reducer, even if you return undefined. This is why it's a good idea to
    have a `default` label in your `switch` statements.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 reducer 的第二点是，当调用时它们总是返回一个新的状态。即使它不产生任何新的状态，reducer 函数也需要返回旧状态。Redux 会将 reducer
    返回的任何内容设置为新状态，即使你返回 undefined。这就是为什么在你的 switch 语句中有一个 `default` 标签是个好主意。
- en: Simplified action creators
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简化的 action 创建者
- en: 'In Redux, action creator functions are simpler than their traditional Flux
    counterparts. The main difference is that Redux action creator functions just
    return the action data. In traditional Flux, the action creators are also responsible
    for calling the dispatcher. Let''s take a look at the Redux action creator functions
    for Snapterest:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Redux 中，action 创建者函数比传统的 Flux 对应函数更简单。主要区别在于 Redux 的 action 创建者函数只返回动作数据。在传统的
    Flux 中，action 创建者还负责调用分发器。让我们来看看 Snapterest 的 Redux action 创建者函数。
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, these functions return action objects that can then be dispatched—they
    don't actually call the dispatcher. You'll see why this is the case when we start
    connecting our React components to the Redux store. The main responsibility of
    action creator functions in a Redux app is to make sure that an object with the
    correct `type` property is returned, along with properties that are relevant to
    the action. For example, the `addTweetToCollection()` action creator accepts a
    tweet parameter, which is then passed to the action by returning it as a property
    of the returned object.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这些函数返回动作对象，然后可以被分发——它们实际上并不调用分发器。当我们开始将我们的 React 组件连接到 Redux 存储时，你会明白为什么会这样。在
    Redux 应用中，action 创建者函数的主要责任是确保返回一个带有正确 `type` 属性的对象，以及与动作相关的属性。例如，`addTweetToCollection()`
    action 创建者接受一个 tweet 参数，然后通过将其作为返回对象的属性传递给动作。
- en: Connecting components to an application state
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将组件连接到应用状态
- en: So far, we have the reducer functions that handle creating a new application
    state, and the action creator functions that trigger our reducer functions. We
    still need to connect our React components to the Redux store. In this section,
    you'll learn how to use the `connect()` function to create a new version of your
    component that's connected to the Redux store.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有处理创建新应用状态的 reducer 函数，以及触发我们的 reducer 函数的 action 创建者函数。我们仍然需要将我们的 React
    组件连接到 Redux 存储。在本节中，您将学习如何使用 `connect()` 函数来创建一个连接到 Redux 存储的新版本组件。
- en: Mapping state and action creators to props
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将状态和 action 创建者映射到 props
- en: The idea with Redux and React integration is that you tell Redux to wrap your
    component with a stateful component that has its state set when the Redux store
    changes. All we have to do is write a function that tells Redux how we want state
    values passed to our component as props. Additionally, we have to tell the component
    about any actions that it might want to dispatch.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Redux 和 React 集成的想法是告诉 Redux 用一个有状态的组件包装你的组件，当 Redux 存储改变时，它的状态也会被设置。我们所要做的就是编写一个函数，告诉
    Redux 我们希望状态值以 props 的形式传递给我们的组件。此外，我们还需要告诉组件它可能想要分发的任何操作。
- en: 'Here is the general pattern that we''ll follow when connecting components:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们连接组件时将遵循的一般模式：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here''s a breakdown of how this works:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的工作原理的分解：
- en: The `connect()` function from the React-Redux package returns a new React component.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自React-Redux包的`connect()`函数返回一个新的React组件。
- en: The `mapStateToProps()` function takes a state argument and returns an object
    with property values based on this state.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapStateToProps()`函数接受一个状态参数，并返回一个基于该状态的属性值的对象。'
- en: The `mapDispatchToProps()` function takes a `dispatch()` argument, which is
    used to dispatch actions, and returns an object with functions that can dispatch
    actions. These are added to the component's props.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapDispatchToProps()`函数接受一个`dispatch()`参数，用于分发操作，并返回一个包含可以分发操作的函数的对象。这些函数被添加到组件的props中。'
- en: '`Component` is a React component that you want connected to the Redux store.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Component`是一个你想要连接到Redux存储的React组件。'
- en: As you start connecting components, you'll soon realize that Redux is taking
    care of many React component lifecycle chores for you. Where you would typically
    need to implement `componentDidMount()` functionality, suddenly, you don't need
    to. This leads to clean and concise React components.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始连接组件时，你很快就会意识到Redux正在为你处理许多React组件的生命周期琐事。在你通常需要实现`componentDidMount()`功能的地方，突然间，你不需要了。这导致了清晰简洁的React组件。
- en: Connecting the stream component
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接流组件
- en: 'Let''s take a look at the `Stream` component:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`Stream`组件：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Not much about `Stream` has changed from its previous implementation. The main
    difference is that we've removed some lifecycle methods. All of the Redux connection
    code comes after the component declaration. The `mapStateToProps()` function returns
    the `tweet` property from the state. So now our component has a `tweet` prop.
    The `mapDispatchToProps()` function returns an empty object because `Stream` doesn't
    dispatch any actions. You don't actually have to provide this function when you
    have no actions. However, this might change in the future, and if the function
    is already there, you just need to add properties to the object.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从先前的实现中，`Stream`并没有太多改变。主要区别在于我们删除了一些生命周期方法。所有的Redux连接代码都在组件声明之后。`mapStateToProps()`函数从状态中返回`tweet`属性。所以现在我们的组件有了一个`tweet`属性。`mapDispatchToProps()`函数返回一个空对象，因为`Stream`不分发任何操作。当没有操作时，实际上不需要提供这个函数。然而，这可能会在将来发生变化，如果函数已经存在，你只需要向对象添加属性。
- en: Connecting the StreamTweet component
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接StreamTweet组件
- en: 'The `Stream` component renders the `StreamTweet` component, so let''s take
    a look at this next:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`Stream`组件渲染了`StreamTweet`组件，所以让我们接着看下去：'
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `StreamTweet` component doesn't actually use any state from the Redux store.
    So why bother connecting it? The answer is, so that we can map action dispatcher
    functions to component props. Remember, action creator functions in Redux apps
    just return the action object instead of dispatching the action.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`StreamTweet`组件实际上并没有使用Redux存储中的任何状态。那么为什么要连接它呢？答案是，这样我们就可以将操作分发函数映射到组件props上。记住，在Redux应用中，操作创建函数只返回操作对象，而不是分发操作。'
- en: In the `mapDispatchToProps()` function here, we're dispatching an `addTweetToCollection()`
    action by passing its return value to `dispatch()`. Redux provides us with a simple
    dispatch function that's bound to the Redux store. Any time we want to dispatch
    an action, we can just call `dispatch()`. Now the `StreamTweet` component will
    have an `onImageClick()` function prop that can be used as an event handler to
    handle the click events.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里的`mapDispatchToProps()`函数中，我们通过将其返回值传递给`dispatch()`来分发一个`addTweetToCollection()`操作。Redux为我们提供了一个简单的分发函数，它绑定到Redux存储。每当我们想要分发一个操作时，我们只需要调用`dispatch()`。现在`StreamTweet`组件将有一个`onImageClick()`函数prop，可以作为事件处理程序来处理点击事件。
- en: Connecting the collection component
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接集合组件
- en: 'Now we just have to connect the `Collection` component and its child components.
    Here''s what the `Collection` component looks like:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要连接`Collection`组件及其子组件。`Collection`组件的样子如下：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `Collection` component doesn't dispatch any actions, so our `mapDispatchToProps()`
    function returns an empty object. It does use state from the Redux store though,
    so our `mapStateToProps()` implementation returns `state.collection`. This is
    how we slice the state of the entire application into pieces that the component
    cares about. For example, if our component needed access to some other state in
    addition to `Collection`, we'd return a new object made up of different slices
    of the overall state.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`Collection`组件不会分发任何操作，因此我们的`mapDispatchToProps()`函数返回一个空对象。但它确实使用了Redux存储中的状态，所以我们的`mapStateToProps()`实现返回`state.collection`。这是我们如何将整个应用程序的状态切片成组件关心的部分。例如，如果我们的组件除了`Collection`之外还需要访问其他状态，我们将返回一个由整体状态的不同切片组成的新对象。'
- en: Connecting collection controls
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接集合控件
- en: 'Within the `Collection` component, we have the `CollectionControls` component.
    Let''s see what it looks like once it''s been connected to the Redux store:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Collection`组件内，我们有`CollectionControls`组件。让我们看看它连接到Redux存储后的样子：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This time, we have a component that requires objects from both `mapStateToProps()`
    and `mapDispatchToProps()`. Once again, we need to pass the collection state to
    this component as props. The `onRenameCollection()` event handler dispatches a
    `toggleIsEditingName()` action while the `onEmptyCollection()` event handler dispatches
    the `removeAllTweetsFromCollection()` action.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们有一个组件需要从`mapStateToProps()`和`mapDispatchToProps()`中获取对象。我们再次需要将集合状态作为props传递给这个组件。`onRenameCollection()`事件处理程序分发`toggleIsEditingName()`操作，而`onEmptyCollection()`事件处理程序分发`removeAllTweetsFromCollection()`操作。
- en: Connecting the TweetList component
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接`TweetList`组件
- en: 'Lastly, we have the `TweetList` component; let''s take a look:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有`TweetList`组件；让我们来看一下：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This component doesn't depend on the Redux store for any state. It does map
    an action dispatcher function to its props though. We don't necessarily need to
    connect the dispatcher here. For example, if this component's parent is connecting
    functions to the dispatcher, the function could be declared there and passed into
    this component as a prop. The benefit would be that `TweetList` would no longer
    require Redux at all. The downside would be having too many dispatch functions
    declared in one component. Luckily, you get to implement your component using
    whichever approach you see fit.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件不依赖Redux存储的任何状态。但它确实将一个操作分发函数映射到它的props。我们不一定需要在这里连接分发器。例如，如果这个组件的父组件正在连接函数到分发器，那么函数可以在那里声明并作为props传递到这个组件中。好处是`TweetList`将不再需要Redux。缺点是在一个组件中声明太多的分发函数。幸运的是，您可以使用任何您认为合适的方法来实现您的组件。
- en: Creating stores and wiring your app
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建存储并连接您的应用程序
- en: We're almost done refactoring our Snapterest app from a traditional Flux architecture,
    to one that's based on Redux. There's just two things left to do.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了将Snapterest应用程序从传统的Flux架构重构为基于Redux的架构。只剩下两件事要做。
- en: 'First, we have to combine our reducer functions into a single function in order
    to make a store:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须将我们的减速器函数组合成一个单一的函数，以便创建一个存储：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This uses the `combineReducers()` function to take our two existing reducer
    functions that exist in their own modules, and produces a single reducer that
    we can use to make a Redux store:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用`combineReducers()`函数来获取我们两个现有的减速器函数，这些函数存在于它们自己的模块中，并产生一个单一的减速器，我们可以用来创建一个Redux存储：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'There you have it—our Redux store is created, complete with its initial state
    that''s supplied by reducer functions by default. Now we just have to pass this
    store to our top-level React component:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建了Redux存储库，其中包含默认情况下由减速器函数提供的初始状态。现在我们只需将此存储库传递给我们的顶层React组件：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `Provider` component wraps our top-level application component and provides
    it, along with any child components that depend on an application state, with
    state updates.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`Provider`组件包装了我们的顶层应用程序组件，并为其提供了状态更新，以及任何依赖应用程序状态的子组件。'
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to refine your Flux architecture using the
    Redux library. Redux applications should have only one store, action creators
    can be simple, and reducer functions control the transformation of the immutable
    state. The aim of Redux, in a nutshell, is to reduce the number of moving parts
    typically found in a traditional Flux architecture while retaining the unidirectional
    dataflow.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用Redux库来完善您的Flux架构。Redux应用程序应该只有一个存储库，动作创建者可以很简单，而减速器函数控制着不可变状态的转换。简而言之，Redux的目标是减少传统Flux架构中通常存在的移动部件的数量，同时保留单向数据流。
- en: You then implemented the Snapterest application using Redux. Starting with the
    reducers, you returned a new state for the Redux store any time a valid action
    was dispatched. Then you built action creator functions that returned an object
    with the correct type property. Lastly, you refactored components so that they
    were connected to Redux. You made sure that the components could read store data
    as well as dispatch actions.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您使用Redux实现了Snapterest应用程序。从减速器开始，每当分派有效动作时，您都会为Redux存储库返回一个新状态。然后，您构建了动作创建者函数，返回一个带有正确类型属性的对象。最后，您重构了组件，使它们连接到Redux。您确保组件可以读取存储库数据并分派动作。
- en: This is a wrap for this book. I hope you've learned enough about the essentials
    of React development that you can continue your journey of discovery by learning
    more advanced React topics. More importantly, I hope you learned more about React
    by building awesome React apps and then making them better.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是这本书的总结。我希望您已经学会了关于React开发基础的足够知识，以便通过学习更高级的React主题来继续您的发现之旅。更重要的是，我希望您通过构建令人敬畏的React应用程序并使其更加完善，从而更多地了解了React。
