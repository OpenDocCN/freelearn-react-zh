- en: Showing Progress
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示进度
- en: This chapter is all about communicating progress to the user. React Native has
    different components to handle the different types of progress that you want to
    communicate. First, you'll learn why you need to communicate progress like this
    in the first place. Then, you'll learn how to implement progress indicators and
    progress bars. After that, you'll see specific examples that show you how to use
    progress indicators with navigation while data loads, and how to use progress
    bars to communicate the current position in a series of steps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讨论向用户传达进度的问题。React Native有不同的组件来处理您想要传达的不同类型的进度。首先，您将学习为什么首先需要这样传达进度。然后，您将学习如何实现进度指示器和进度条。之后，您将看到具体的示例，向您展示如何在数据加载时使用进度指示器与导航，以及如何使用进度条来传达一系列步骤中的当前位置。
- en: Progress and usability
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进度和可用性
- en: Imagine that you have a microwave oven that has no window and makes no sound.
    The only way to interact with it, is by pressing a button labeled cook. As absurd
    as this device sounds, it's what many software users are faced with—there's no
    indication of progress. Is the microwave cooking anything? If so, how do we know
    when it will be done?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您有一台没有窗户也不发出声音的微波炉。与它互动的唯一方式是按下标有“烹饪”的按钮。尽管这个设备听起来很荒谬，但许多软件用户面临的情况就是如此——没有进度的指示。微波炉在烹饪什么？如果是的话，我们如何知道什么时候会完成？
- en: One way to improve the microwave situation is to add sound. This way, the user
    gets feedback after pressing the cook button. You've overcome one hurdle, but
    the user is still left guessing—where's my food? Before you go out of business,
    you had better add some sort of progress measurement display, such as a timer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 改善微波炉情况的一种方法是添加声音。这样，用户在按下烹饪按钮后会得到反馈。您已经克服了一个障碍，但用户仍然在猜测——我的食物在哪里？在您破产之前，最好添加某种进度测量显示，比如一个计时器。
- en: It's not that UI programmers don't understand the basic principles of this usability
    concern; it's just that we have stuff to get done and this sort of thing simply
    slips through the cracks in terms of priority. In React Native, there are components
    for giving the user indeterminate progress feedback, and for giving precise progress
    measurements. It's always a good idea to make these things a top priority if you
    want a good user experience.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是UI程序员不理解这种可用性问题的基本原则；只是我们有事情要做，这种事情在优先级方面往往被忽略。在React Native中，有一些组件可以向用户提供不确定的进度反馈，也可以提供精确的进度测量。如果您想要良好的用户体验，将这些事情作为首要任务总是一个好主意。
- en: Indicating progress
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指示进度
- en: In this section, you'll learn how to use the `ActivityIndicator` component.
    As the name suggests, you render this component when you need to indicate to the
    user that something is happening. The actual progress may be indeterminate, but
    at least you have a standardized way to show that something is happening, despite
    there being no results to display yet.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何使用`ActivityIndicator`组件。顾名思义，当您需要向用户指示发生了某事时，您会渲染此组件。实际进度可能是不确定的，但至少您有一种标准化的方式来显示发生了某事，尽管尚无结果可显示。
- en: 'Let''s create an example so that you can see what this component looks like.
    Here''s the `App` component:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个示例，这样你就可以看到这个组件是什么样子的。这里是`App`组件：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `<ActivityIndicator>` component is platform agnostic. Here''s how it looks
    on iOS:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`<ActivityIndicator>`组件是跨平台的。在iOS上它是这样的：'
- en: '![](Images/8030d118-69a1-47ed-853a-6a7124769ee9.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8030d118-69a1-47ed-853a-6a7124769ee9.png)'
- en: 'It renders an animated spinner in the middle of the screen. This is the large
    spinner, as specified in the `size` property. The `ActivityIndicator` spinner
    can also be small, which makes more sense if you''re rendering it inside another
    smaller element. Now let''s take a look at how this looks on an Android device:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 它在屏幕中间渲染一个动画旋转器。这是大旋转器，如`size`属性中指定的那样。`ActivityIndicator`旋转器也可以很小，如果你将其渲染在另一个较小的元素内，这更有意义。现在让我们看看这在Android设备上是什么样子：
- en: '![](Images/afc16e23-452a-47f7-be38-f8f2d646acd8.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/afc16e23-452a-47f7-be38-f8f2d646acd8.png)'
- en: The spinner looks different, as it should, but your app conveys the same thing
    on both platforms—you're waiting for something.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转器看起来不同，这是应该的，但你的应用在两个平台上传达的是同样的事情——你在等待某些东西。
- en: This example just spins forever. Don't worry, there's a more realistic progress
    indicator example coming up that shows you how to work with navigation and loading
    API data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子只是永远旋转。别担心，接下来会有一个更现实的进度指示器示例，向你展示如何处理导航和加载API数据。
- en: Measuring progress
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量进度
- en: The downside of indicating that progress is being made is that there's no end
    in sight for the user. This leads to a feeling of unease, like when waiting for
    food in a microwave with no timer. When you know how much progress has been made,
    and how much is left to go, you feel better. This is why it's always better to
    use a deterministic progress bar whenever possible.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 指示正在取得进展的缺点是用户看不到尽头。这会导致一种不安的感觉，就像在没有定时器的微波炉中等待食物一样。当你知道已经取得了多少进展，还有多少要做时，你会感觉更好。这就是为什么尽可能使用确定性进度条总是更好的原因。
- en: Unlike the `ActivityIndicator` component, there's no platform-agnostic component
    in React Native for progress bars. So, we'll have to make one ourselves. We'll
    create a component that uses `ProgressViewIOS` on iOS and `ProgressBarAndroid` on
    Android.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ActivityIndicator`组件不同，React Native中没有用于进度条的跨平台组件。因此，我们必须自己制作一个。我们将创建一个组件，在iOS上使用`ProgressViewIOS`，在Android上使用`ProgressBarAndroid`。
- en: 'Let''s handle the cross-platform issues first. React Native knows to import
    the correct module based on its file extension. Here''s what the `ProgressBarComponent.ios.js`
    module looks like:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先处理跨平台问题。React Native知道根据文件扩展名导入正确的模块。下面是`ProgressBarComponent.ios.js`模块的样子：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You''re directly exporting the `ProgressViewIOS` component from React Native.
    You''re also exporting properties for the component that are specific to the platform.
    In this case, it''s an empty object because there are no properties that are specific
    to `<ProgressViewIOS>`. Now, let''s take a look at the `ProgressBarComponent.android.js`
    module:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你直接从React Native中导出了`ProgressViewIOS`组件。你还导出了特定于平台的组件属性。在这种情况下，它是一个空对象，因为没有特定于`<ProgressViewIOS>`的属性。现在，让我们看看`ProgressBarComponent.android.js`模块：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This module uses the exact same approach as the `ProgressBarComponent.ios.js`
    module. It exports the Android-specific component as well as Android-specific
    properties to pass to it. Now, let''s build the `ProgressBar` component that the
    application will use:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块使用与`ProgressBarComponent.ios.js`模块完全相同的方法。它导出了特定于Android的组件以及传递给它的特定于Android的属性。现在，让我们构建应用程序将使用的`ProgressBar`组件：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's walk through what's going on in this module, starting with the imports.
    The `ProgressBarComponent` and `progressProps` values are imported from our `ProgressBarComponent`
    module. React Native determines which module to import this from.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解这个模块中发生了什么，从导入开始。`ProgressBarComponent`和`progressProps`的值是从我们的`ProgressBarComponent`模块中导入的。React
    Native确定从哪个模块导入这些值。
- en: Next, you have the `ProgressLabel` utility component. It figures out what label
    is rendered for the progress bar based on the `show` property. If `false`, nothing
    is rendered. If `true`, it renders a `<Text>` component that displays the progress
    as a percentage.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你有`ProgressLabel`实用组件。它根据`show`属性决定为进度条呈现什么标签。如果是`false`，则不呈现任何内容。如果是`true`，它会呈现一个显示进度的`<Text>`组件。
- en: 'Lastly, you have the `ProgressBar` component itself, when our application will
    import and use. This renders the label and the appropriate progress bar component.
    It takes a `progress` property, which is a value between `0` and `1`. Now let''s
    put this component to use in the `App` component:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你有`ProgressBar`组件本身，当我们的应用程序导入和使用。这将呈现标签和适当的进度条组件。它接受一个`progress`属性，这是一个介于`0`和`1`之间的值。现在让我们在`App`组件中使用这个组件：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Initially, the `<ProgressBar>` component is rendered at 0%. In the `componentDidMount()`
    method, the `updateProgress()` function uses a timer to simulate a real process
    that you want to show progress for. Here''s what the iOS screen looks like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，`<ProgressBar>`组件以0%的进度呈现。在`componentDidMount()`方法中，`updateProgress()`函数使用定时器模拟一个真实的进程，你想要显示进度。这是iOS屏幕的样子：
- en: '![](Images/43a111b5-2eca-44c8-9c6f-e931c23859ea.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/43a111b5-2eca-44c8-9c6f-e931c23859ea.png)'
- en: 'Here''s what the same progress bar looks like on Android:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相同的进度条在Android上的样子：
- en: '![](Images/ec0a7014-f585-40d4-ab79-b2351815ca52.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ec0a7014-f585-40d4-ab79-b2351815ca52.png)'
- en: Navigation indicators
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航指示器
- en: Earlier in the chapter, you were introduced to the `ActivityIndicator` component.
    In this section, you'll learn how it can be used when navigating an application
    that loads data. For example, the user navigates from page (screen) one to page
    two. However, page two needs to fetch data from the API to display for the user.
    So while this network call is happening, it makes more sense to display a progress
    indicator instead of a screen devoid of useful information.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，你已经了解了`ActivityIndicator`组件。在本节中，你将学习在导航加载数据的应用程序中如何使用它。例如，用户从页面（屏幕）一导航到页面二。然而，页面二需要从API获取数据来显示给用户。因此，在进行这个网络调用时，显示进度指示器而不是一个缺乏有用信息的屏幕更有意义。
- en: 'Doing this is actually kind of tricky because you have to make sure that the
    data required by the screen is fetched from the API each time the user navigates
    to the screen. Your goals should be the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做实际上有点棘手，因为你必须确保屏幕所需的数据在用户每次导航到屏幕时都从API获取。你的目标应该是以下几点：
- en: Have the `Navigator` component automatically fetch API data for the scene that's
    about to be rendered.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使`Navigator`组件自动为即将呈现的场景获取API数据。
- en: Use the promise that's returned by the API call as a means to display the spinner
    and hide it once the promise has resolved.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用API调用返回的promise来显示旋转器，并在promise解析后隐藏它。
- en: 'Since your components probably don''t care about whether or not a spinner is
    displayed, let''s implement this as a generic higher-order component:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你的组件可能不关心是否显示旋转器，让我们将其实现为一个通用的高阶组件：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This `loading()` function takes a component—the `Wrapped` argumentand returns
    a `LoadingWrapper` component. The returned wrapper accepts a `promise` property,
    and when it resolves or rejects, it changes the `loading` state to `false`. As
    you can see in the `render()` method, the `loading` state determines whether the
    spinner is rendered or the `Wrapped` component.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`loading()`函数接受一个组件——`Wrapped`参数，并返回一个`LoadingWrapper`组件。返回的包装器接受一个`promise`属性，当它解析或拒绝时，它会将`loading`状态更改为`false`。正如你在`render()`方法中所看到的，`loading`状态决定了是呈现旋转器还是`Wrapped`组件。
- en: 'With the `loading()` higher-order function in place, let''s take a look at
    the first screen component that you''ll use with `react-navigation`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有了`loading()`高阶函数，让我们来看看您将与`react-navigation`一起使用的第一个屏幕组件：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This module exports a component that''s wrapped with the `loading()` function
    created earlier. It wraps the `First` component so that a spinner is displayed
    while the `promise` property is pending. The last step is getting that promise
    into the component whenever the user navigates to a given page. This happens in
    the route configuration in the `App` component:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块导出了一个组件，该组件使用之前创建的`loading()`函数进行包装。它包装了`First`组件，以便在`promise`属性挂起时显示旋转器。最后一步是在用户导航到给定页面时将该promise传递到组件中。这发生在`App`组件中的路由配置中：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Instead of just passing the screen components directly to the router config
    argument of `createStackNavigator()`, you're passing an object for each screen.
    The `screen` property allows you to provide the actual screen component to render.
    In this case, you're passing it a promise property by calling an API function
    that resolves data needed by the component. This is how the `loading()` function
    is able to display a spinner while waiting for the promise to resolve. The first
    screen doesn't have to worry about displaying a loading screen.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您不是直接将屏幕组件传递给`createStackNavigator()`的路由配置参数，而是为每个屏幕传递一个对象。`screen`属性允许您提供要渲染的实际屏幕组件。在这种情况下，通过调用解析组件所需数据的API函数来传递`promise`属性。这就是`loading()`函数能够在等待promise解析时显示旋转器的方式。第一个屏幕不必担心显示加载屏幕。
- en: Step progress
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤进度
- en: In this final example, you'll build an app that displays the user's progress
    through a predefined number of steps. For example, it might make sense to split
    a form into several logical sections and organize them in such a way that as the
    user completes one section, they move to the next step. A progress bar would be
    helpful feedback for the user.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个最后的例子中，您将构建一个应用程序，该应用程序显示用户在预定义步骤中的进度。例如，将表单分成几个逻辑部分，并以用户完成一个部分后移动到下一步的方式组织它们可能是有意义的。进度条对用户来说将是有用的反馈。
- en: You'll insert a progress bar into the navigation bar, just below the title,
    so that the user knows how far they've gone and how far is left to go. You'll
    also reuse the `ProgressBar` component that you implemented earlier in this chapter.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在导航栏中插入一个进度条，就在标题下方，以便用户知道他们已经走了多远，还有多远要走。您还将重用在本章中早些时候实现的`ProgressBar`组件。
- en: 'Let''s take a look at the result first. There are four screens in this app
    that the user can navigate to. Here''s what the first page (scene) looks like:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看一下结果。这个应用程序中有四个屏幕，用户可以导航到其中。以下是第一页（场景）的样子：
- en: '![](Images/28469123-c5dc-4323-a57b-74d385d63093.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/28469123-c5dc-4323-a57b-74d385d63093.png)'
- en: 'The progress bar below the title reflects the fact that the user is 25% through
    the navigation. Let''s see what the third screen looks like:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 标题下方的进度条反映了用户在导航中已经完成了25%。让我们看看第三个屏幕是什么样子的：
- en: '![](Images/4df4b66f-8144-4f5f-b445-0c64f978fe74.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/4df4b66f-8144-4f5f-b445-0c64f978fe74.png)'
- en: 'The progress is updated to reflect where the user is in the route stack. Let''s
    take a look at the `App` component:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 进度已更新，以反映用户在路由堆栈中的位置。让我们来看看`App`组件：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This app has four screens. The components that render each of these screens
    is stored in the `routes` constant, which is then used to configure the stack
    navigator using `createStackNavigator()`. The reason for creating the `routes`
    array is so that it can be used by the `progress()` function that is passed to
    the initial route (`First`) as a route parameter. This function takes the current
    route name as an argument and looks up its index position in routes. For example,
    `Second` is in the number `2` position (index of 1 + 1) and the length of the
    array is `4`. This will set the progress bar to 50%.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序有四个屏幕。渲染每个屏幕的组件存储在`routes`常量中，然后使用`createStackNavigator()`配置堆栈导航器。创建`routes`数组的原因是为了让它可以被传递给初始路由(`First`)作为路由参数的`progress()`函数使用。这个函数以当前路由名称作为参数，并查找它在routes中的索引位置。例如，`Second`在数字`2`的位置（索引为1
    + 1），数组的长度为`4`。这将把进度条设置为50%。
- en: 'Let''s see how the `progress` function is used by the `First` component:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`First`组件如何使用`progress`函数：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The function is accessed as `navigation.state.params.progress()`. It's passed
    the value of `navigation.state.routeName` to get the progress value for the current
    page. Also, the calls to `navigation.navigate()` have to pass `navigation.state.params`
    so that the `progress()` function is available to the screen. If you don't do
    this, then `progress()` will only be available to the first screen because it's
    set using the `initialRouteParams` option within the `App` component.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数可以通过`navigation.state.params.progress()`访问。它将`navigation.state.routeName`的值传递给当前页面的进度值。此外，对`navigation.navigate()`的调用必须传递`navigation.state.params`，以便`progress()`函数对屏幕可用。如果不这样做，那么`progress()`将只对第一个屏幕可用，因为它是在`App`组件中使用`initialRouteParams`选项设置的。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about how to show your users that something is
    happening behind the scenes. First, we discussed why showing progress is important
    for the usability of an application. Then, you implemented a basic screen that
    indicated progress was being made. You then implemented a `ProgressBar` component,
    used to measure specific progress amounts.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何向用户显示一些在幕后发生的事情。首先，我们讨论了为什么显示进度对应用程序的可用性很重要。然后，您实现了一个基本的屏幕，指示进度正在进行。然后，您实现了一个`ProgressBar`组件，用于测量特定的进度量。
- en: Indicators are good for indeterminate progress, and you implemented navigation
    that showed progress indicators while network calls were pending. In the final
    section, you implemented a progress bar that showed the user where they were in
    a predefined number of steps.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 指示器适用于不确定的进度，并且您实现了导航，显示了在网络调用挂起时显示进度指示器。在最后一节中，您实现了一个进度条，向用户显示他们在预定义步骤中的位置。
- en: In the following chapter, you'll see React Native maps and geolocation data
    in action.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将看到React Native地图和地理位置数据的实际应用。
- en: Test your knowledge
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: What's the difference between a progress bar and an activity indicator?
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进度条和活动指示器有什么区别？
- en: A progress bar is determinate whereas a progress indicator is used to indicate
    an indeterminate amount of time.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进度条是确定的，而进度指示器用于指示不确定的时间量。
- en: There is no difference. A progress bar and a progress indicator are actually
    the same thing.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有区别。进度条和进度指示器实际上是相同的东西。
- en: A progress bar renders a horizontal bar—everything else is considered a progress
    indicator.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进度条渲染一个水平条，其他所有的都被视为进度指示器。
- en: Does the React Native `ActivityIndicator` component work the same on iOS and
    Android?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React Native的`ActivityIndicator`组件在iOS和Android上是否工作相同？
- en: No, this component is not platform agnostic.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，这个组件不是平台无关的。
- en: Yes, this component is platform agnostic.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，这个组件是平台无关的。
- en: How can you use the `ProgressViewIOS` and the `ProgressBarAndroid` components
    in a platform agnostic way?
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何以平台不可知的方式使用`ProgressViewIOS`和`ProgressBarAndroid`组件？
- en: You can define your own `ProgressBar` component that imports other components
    with platform-specific file extensions.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以定义自己的`ProgressBar`组件，导入具有特定于平台的文件扩展名的其他组件。
- en: You can't; you have to implement platform-checking logic everywhere that you
    want to use a progress bar.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你不能；你必须在想要使用进度条的每个地方实现平台检查逻辑。
- en: Further reading
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Check out the following links for more information:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接获取更多信息：
- en: '[https://facebook.github.io/react-native/docs/activityindicator](https://facebook.github.io/react-native/docs/activityindicator)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/activityindicator](https://facebook.github.io/react-native/docs/activityindicator)'
- en: '[https://facebook.github.io/react-native/docs/progressviewios](https://facebook.github.io/react-native/docs/progressviewios)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/progressviewios](https://facebook.github.io/react-native/docs/progressviewios)'
- en: '[https://facebook.github.io/react-native/docs/progressbarandroid](https://facebook.github.io/react-native/docs/progressbarandroid)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/progressbarandroid](https://facebook.github.io/react-native/docs/progressbarandroid)'
