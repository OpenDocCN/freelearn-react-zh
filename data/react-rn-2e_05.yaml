- en: Crafting Reusable Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打造可重用的组件
- en: The focus of this chapter is to show you how to implement React components that
    serve more than just one purpose. After reading this chapter, you'll feel confident
    about how to compose application features.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是向您展示如何实现不止一种用途的React组件。阅读完本章后，您将对如何组合应用程序功能感到自信。
- en: The chapter starts with a brief look at HTML elements and how they work in terms
    of helping to implement features versus having a high level of utility. Then,
    you'll see the implementation of a monolithic component and discover the issues
    that it will cause down the road. The next section is devoted to re-implementing
    the monolithic component in such a way that the feature is composed of smaller
    components.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章以简要介绍HTML元素及其在帮助实现功能方面的工作方式开始。然后，您将看到一个单片组件的实现，并发现它将在未来引起的问题。接下来的部分致力于以一种使功能由更小的组件组成的方式重新实现单片组件。
- en: Finally, the chapter ends with a discussion of rendering trees of React components,
    and gives you some tips on how to avoid introducing too much complexity as a result
    of decomposing components. I'll close this final section by reiterating the concept
    of high-level feature components versus utility components.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，本章以讨论渲染React组件树结束，并为您提供一些建议，以避免由于分解组件而引入过多复杂性。我将通过重申高级功能组件与实用组件的概念来结束这一最后部分。
- en: Reusable HTML elements
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可重用的HTML元素
- en: Let's think about HTML elements for a moment. Depending on the type of HTML
    element, it's either *feature-centric* or *utility-centric*. Utility-centric HTML
    elements are more reusable than feature-centric HTML elements. For example, consider
    the `<section>` element. This is a generic element that can be used just about
    anywhere, but its primary purpose is to compose the structural aspects of a feature—the
    outer shell of the feature and the inner sections of the feature. This is where
    the `<section>` element is most useful.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一下HTML元素。根据HTML元素的类型，它要么是*以功能为中心*，要么是*以实用为中心*。实用为中心的HTML元素比以功能为中心的HTML元素更具重用性。例如，考虑`<section>`元素。这是一个通用元素，可以在任何地方使用，但它的主要目的是组成功能的结构方面——功能的外壳和功能的内部部分。这就是`<section>`元素最有用的地方。
- en: On the other side of the fence, you have elements such as `<p>` and `<span>`
    and `<button>`. These elements provide a high level of utility because they're
    generic by design. You're supposed to use `<button>` elements whenever you have
    something that's clickable by the user, resulting in an action. This is a level
    lower than the concept of a feature.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，您还有诸如`<p>`、`<span>`和`<button>`之类的元素。这些元素提供了高度的实用性，因为它们从设计上就是通用的。当用户可以点击时，您应该使用`<button>`元素，从而产生一个动作。这比功能的概念低一个级别。
- en: While it's easy to talk about HTML elements that have a high level of utility
    versus those that are geared toward specific features, the discussion is more
    detailed when *data* is involved. HTML is static markup—React components combine
    static markup with data. The question is, how do you make sure that you're creating
    the right feature-centric and utility-centric components?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然谈论具有高度实用性的HTML元素与针对特定功能的元素很容易，但当涉及*数据*时，讨论就会更加详细。HTML是静态标记——React组件将静态标记与数据结合在一起。问题是，如何确保您正在创建正确的以功能为中心和以实用为中心的组件？
- en: The aim of this chapter is to find out how to go from a monolithic React component
    that defines a feature, to a smaller feature-centric component combined with utility
    components.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是找出如何从定义功能的单片React组件转变为与实用组件相结合的更小的以功能为中心的组件。
- en: The difficulty with monolithic components
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单片组件的困难
- en: If you could implement just one component for any given feature, it would simplify
    your job. At the very least, there wouldn't be many components to maintain, and
    there wouldn't be many communication paths for data to flow through, because everything
    would be internal to the component.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以为任何给定功能实现一个组件，那将简化您的工作。至少，就不会有太多需要维护的组件，也不会有太多数据流通的路径，因为一切都将是组件内部的。
- en: However, this idea doesn't work for a number of reasons. Having monolithic feature
    components makes it difficult to coordinate any kind of team development effort.
    The bigger monolithic components become, the more difficult they are to refactor
    into something better later on.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个想法出于许多原因是行不通的。拥有单体功能组件使得协调任何团队开发工作变得困难。单体组件变得越大，以后重构为更好的东西就会变得越困难。
- en: There's also the problem of feature overlap and feature communication. Overlap
    happens because of similarities between features—it's unlikely that an application
    will have a set of features that are completely unique to one another. That would
    make the application very difficult to learn and use. Component communication
    essentially means that the state of something in one feature will impact the state
    of something in another feature. State is difficult to deal with, and even more
    so when there is a lot of state packaged up into a monolithic component.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 还有功能重叠和功能通信的问题。重叠是因为功能之间的相似之处而发生的——一个应用程序不太可能具有完全彼此独特的一组功能。这将使应用程序非常难以学习和使用。组件通信基本上意味着一个功能中的某些东西的状态将影响另一个功能中的某些东西的状态。状态很难处理，当有很多状态打包到单体组件中时更是如此。
- en: The best way to learn how to avoid monolithic components is to experience one
    first hand. You'll spend the remainder of this section implementing a monolithic
    component. In the following section, you'll see how this component can be refactored
    into something a little more sustainable.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何避免单体组件的最佳方法是亲身体验一个。您将在本节的其余部分中实现一个单体组件。在接下来的部分中，您将看到如何将此组件重构为更可持续的东西。
- en: The JSX markup
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSX标记
- en: 'The monolithic component we''re going to implement is a feature that lists
    articles. It''s just for illustrative purposes, so we don''t want to go overboard
    on the size of the component. It''ll be simple, yet monolithic. The user can add
    new items to the list, toggle the summary of items in the list, and remove items
    from the list. Here is the `render` method of the component:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要实现的单体组件是一个列出文章的功能。这只是为了举例说明，所以我们不希望组件过大。它将是简单的，但是单体的。用户可以向列表中添加新项目，切换列表中项目的摘要，并从列表中删除项目。这是组件的`render`方法：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Definitely more JSX than is necessary in one place. You'll improve on this in
    the following section, but for now, let's implement the initial state for this
    component.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个地方使用的JSX肯定比必要的要多。您将在接下来的部分中改进这一点，但现在让我们为这个组件实现初始状态。
- en: I strongly encourage you to download the companion code for this book from [https://github.com/PacktPublishing/React-and-React-Native-Second-Edition](https://github.com/PacktPublishing/React-and-React-Native-Second-Edition).
    I can break apart the component code so that I can explain it on these pages.
    However, it's an easier learning experience if you can see the code modules in
    their entirety, in addition to running them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议您从[https://github.com/PacktPublishing/React-and-React-Native-Second-Edition](https://github.com/PacktPublishing/React-and-React-Native-Second-Edition)下载本书的配套代码。我可以拆分组件代码，以便在这些页面上解释它。但是，如果您可以完整地看到代码模块，并运行它们，学习体验会更容易。
- en: Initial state and state helpers
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始状态和状态助手
- en: 'Now let''s look at the initial state of this component:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看这个组件的初始状态：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There are two interesting functions used to initialize the state. The first
    is `cuid()` from the `cuid` package—a useful tool for generating unique IDs. The
    second is `fromJS()` from the `immutable` package. Here are the imports that pull
    in these two dependencies:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个有趣的函数用于初始化状态。第一个是来自`cuid`包的`cuid()`——一个用于生成唯一ID的有用工具。第二个是来自`immutable`包的`fromJS()`。以下是引入这两个依赖项的导入：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As the name suggests, the `fromJS()` function is used to construct an immutable
    data structure. `Immutable.js` has very useful functionality for manipulating
    the state of React components. You'll be using `Immutable.js` throughout the remainder
    of the book, and you'll learn more of the specifics as you go, starting with this
    example.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`fromJS()`函数用于构建不可变的数据结构。`Immutable.js`对于操作React组件的状态非常有用的功能。在本书的其余部分，你将继续使用`Immutable.js`，并且随着学习的深入，你将了解更多具体内容，从这个例子开始。
- en: For a more in-depth look at **Immutable.js**, check out Mastering Immutable.js: [https://www.packtpub.com/web-development/mastering-immutablejs](https://www.packtpub.com/web-development/mastering-immutablejs)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要更深入地了解**Immutable.js**，请查看《精通Immutable.js》：[https://www.packtpub.com/web-development/mastering-immutablejs](https://www.packtpub.com/web-development/mastering-immutablejs)
- en: 'You may remember from the previous chapter that the `setState()` method only
    works with plain objects. Well, `Immutable.js` objects aren''t plain objects.
    If we want to use immutable data, you need to wrap them in a plain object. Let''s
    implement a helper getter and setter for this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得上一章中提到的`setState()`方法只能使用普通对象。嗯，`Immutable.js`对象不是普通对象。如果我们想使用不可变数据，就需要将它们包装在一个普通对象中。让我们实现一个帮助器的获取器和设置器：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, you can use your immutable component state inside of our event handlers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在我们的事件处理程序中使用不可变的组件状态。
- en: Event handler implementation
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理程序实现
- en: 'At this point, you have the initial state, state helper properties, and the
    JSX of the component. Now it''s time to implement the event handlers themselves:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你已经有了初始状态、状态辅助属性和组件的JSX。现在是时候实现事件处理程序本身了：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Yikes! That''s a lot of `Immutable.js` code! Not to worry, it''s actually less
    code compared to trying to implement these transformations using plain JavaScript.
    Here are some pointers to help you understand this code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 天啊！这是很多`Immutable.js`代码！不用担心，实际上这比使用普通JavaScript实现这些转换要少得多。以下是一些指针，帮助你理解这段代码：
- en: '`setState()` is always called with a plain object as its argument. This is
    why we''ve introduced the data setter. When you assign a new value to `this.data`,
    it will call `setState()` with a plain object. You only need to worry about `Immutable.js`
    data. Likewise, the data getter returns the `Immutable.js` object instead of the
    whole state.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setState()`总是以一个普通对象作为其参数调用。这就是为什么我们引入了数据设置器。当你给`this.data`赋一个新值时，它会用一个普通对象调用`setState()`。你只需要关心`Immutable.js`数据。同样，数据获取器返回`Immutable.js`对象而不是整个状态。'
- en: Immutable methods always return a new instance. When you see something like
    `article.set(...)`, it doesn't actually change the `article`, it creates a new
    one.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可变方法总是返回一个新实例。当你看到像`article.set(...)`这样的东西时，它实际上并没有改变`article`，而是创建了一个新的实例。
- en: In the `render()` method, the immutable data structures are converted back to
    plain JavaScript arrays and objects for use in the JSX markup.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`render()`方法中，不可变数据结构被转换回普通的JavaScript数组和对象，以便在JSX标记中使用。
- en: If necessary, take all the time you need to understand what is happening here.
    As you progress through the book, you'll see ways that immutable state can be
    exploited by React components. These event handlers can only change the state
    of this component. That is, they can't accidentally change the state of other
    components. As you'll see in the following section, these handlers are actually
    in pretty good shape as they are.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，尽管花费你需要的时间来理解这里发生了什么。随着你在书中的进展，你会看到不可变状态可以被React组件利用的方式。这些事件处理程序只能改变这个组件的状态。也就是说，它们不会意外地改变其他组件的状态。正如你将在接下来的部分中看到的，这些处理程序实际上已经相当完善了。
- en: 'Here''s a screenshot of the rendered output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染输出的截图：
- en: '![](Images/82062a09-5dad-4592-bbd9-46ee033c8c8d.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/82062a09-5dad-4592-bbd9-46ee033c8c8d.png)'
- en: Refactoring component structures
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构组件结构
- en: You have a monolithic feature component—now what? Let's make it better.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个庞大的功能组件，现在怎么办？让我们把它做得更好。
- en: In this section, you'll learn how to take the feature component that you just
    implemented in the preceding section and split it into more maintainable components.
    You'll start with the JSX, as this is probably the best refactor starting point.
    Then, you'll implement new components for the feature.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何将刚刚在前一节中实现的功能组件分割成更易维护的组件。你将从JSX开始，因为这可能是最好的重构起点。然后，你将为这个功能实现新的组件。
- en: Next, you'll make these new components functional, instead of class-based. Finally,
    you'll learn how to use render props to reduce the number of direct component
    dependencies in your application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将使这些新组件变成功能性的，而不是基于类的。最后，你将学会如何使用渲染属性来减少应用程序中直接组件的依赖数量。
- en: Start with the JSX
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从JSX开始
- en: 'The JSX of any monolithic component is the best starting point for figuring
    out how to refactor it into smaller components. Let''s visualize the structure
    of the component that we''re currently refactoring:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 任何庞大组件的JSX都是找出如何将其重构为更小组件的最佳起点。让我们来可视化一下我们当前正在重构的组件的结构：
- en: '![](Images/67e3c588-4bad-4016-a2c7-1ab4337467b7.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/67e3c588-4bad-4016-a2c7-1ab4337467b7.png)'
- en: 'The top part of the JSX is form controls, so this could easily become its own
    component:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: JSX的顶部部分是表单控件，所以这很容易成为自己的组件：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, you have the list of articles:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你有文章列表：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Within this list, there's potential for an article item, which would be everything
    in the `<li>` tag.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个列表中，有可能有一个文章项目，它将是`<li>`标签中的所有内容。
- en: The JSX alone paints a picture of how the UI structure can be decomposed into
    smaller React components. This refactoring exercise would be difficult without
    declarative JSX markup.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 单单JSX就展示了UI结构如何可以被分解成更小的React组件。没有声明性的JSX标记，这种重构练习将会很困难。
- en: Implementing an article list component
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现文章列表组件
- en: 'Here''s what the article list component implementation looks like:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 文章列表组件的实现如下：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You''re just taking the relevant JSX out of the monolithic component and putting
    it here. Now let''s see what the feature component JSX looks like:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需从庞大的组件中取出相关的JSX，并放到这里。现在让我们看看功能组件JSX是什么样的：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The list of articles is now rendered by the `<ArticleList>` component. The list
    of articles to render is passed to this component as a property as well as two
    of the event handlers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 文章列表现在由`<ArticleList>`组件渲染。要渲染的文章列表作为属性传递给这个组件，以及两个事件处理程序。
- en: Wait, why are we passing event handlers to a child component? The reason is
    so that the `ArticleList` component doesn't have to worry about state or how the
    state changes. All it cares about is rendering content, and making sure the appropriate
    event callbacks are hooked up to the appropriate DOM elements. This is a *container
    component* concept that I'll expand upon later in this chapter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，为什么我们要将事件处理程序传递给子组件？原因是`ArticleList`组件不需要担心状态或状态如何改变。它只关心呈现内容，并确保适当的事件回调连接到适当的DOM元素。这是我稍后在本章中会扩展的*容器组件*概念。
- en: Implementing an article item component
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现文章项目组件
- en: After implementing the article list component, you might decide that it's a
    good idea to break this component down further, because the item might be rendered
    in another list on another page. Perhaps the most important aspect of implementing
    the article list item as its own component is that we don't know how the markup
    will change in the future.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现文章列表组件之后，您可能会决定进一步拆分此组件，因为该项目可能会在另一页上的另一个列表中呈现。实现文章列表项作为其自己的组件最重要的一点是，我们不知道标记将来会如何改变。
- en: 'Another way to look at it is this—if it turns out that we don''t actually need
    the item as its own component, this new component doesn''t introduce much indirection
    or complexity. Without further ado, here''s the article item component:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种看待它的方式是，如果事实证明我们实际上不需要该项目作为其自己的组件，这个新组件并不会引入太多间接性或复杂性。话不多说，这就是文章项目组件：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here''s the new `ArticleItem` component being rendered by the `ArticleList`
    component:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由`ArticleList`组件呈现的新的`ArticleItem`组件：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Do you see how this list just maps the list of articles? What if you wanted
    to implement another article list that does some filtering too? If so, it's beneficial
    to have a reusable `ArticleItem` component.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您看到这个列表只是映射了文章列表吗？如果您想要实现另一个还进行一些过滤的文章列表呢？如果是这样，拥有可重用的`ArticleItem`组件是有益的。
- en: Implementing an add article component
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现添加文章组件
- en: 'Now that you''re done with the article list, it''s time to think about the
    form controls used to add a new article. Let''s implement a component for this
    aspect of the feature:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了文章列表，是时候考虑用于添加新文章的表单控件了。让我们为这个功能的这一方面实现一个组件：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, your feature component only needs to render `<AddArticle>` and `<ArticleList>`
    components:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的功能组件只需要呈现`<AddArticle>`和`<ArticleList>`组件：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The focus of this component is on the feature data while it defers to other
    components for rendering UI elements.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件的重点是功能数据，同时它会推迟到其他组件来呈现UI元素。
- en: Making components functional
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使组件功能化
- en: While implementing these new components, you might have noticed that they don't
    have any responsibilities other than rendering JSX using property values. These
    components are good candidates for *pure function components*. Whenever you come
    across components that only use property values, it's a good idea to make them
    functional. For one thing, it makes it explicit that the component doesn't rely
    on any state or lifecycle methods. It's also more efficient, because React doesn't
    perform as much work when it detects that a component is a function.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现这些新组件时，您可能已经注意到它们除了使用属性值呈现JSX之外没有任何职责。这些组件是*纯函数组件*的良好候选者。每当您遇到仅使用属性值的组件时，最好将它们制作成功能性组件。首先，这明确表明组件不依赖于任何状态或生命周期方法。它还更有效，因为当React检测到组件是函数时，它不会执行太多工作。
- en: 'Here is the functional version of the article list component:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文章列表组件的功能版本：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is the functional version of the article item component:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文章项目组件的功能版本：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is the functional version of the add article component:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是添加文章组件的功能版本：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Another added benefit of making components functional is that there's less opportunity
    to introduce unnecessary methods or other data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使组件变成功能性的另一个好处是，减少了引入不必要方法或其他数据的机会。
- en: Leveraging render props
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用渲染属性
- en: Imagine implementing a feature that is composed of several smaller components
    – like what you've been working on in this chapter. The `MyFeature` component
    depends on `ArticleList` and `AddArticle`. Now imagine using `MyFeature` in different
    parts of your application where it makes sense to use a different implementation
    of `ArticleList` or `AddArticle`. The fundamental challenge is substituting one
    component for another.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下实现一个由几个较小的组件组成的特性，就像你在本章中一直在做的那样。`MyFeature`组件依赖于`ArticleList`和`AddArticle`。现在想象一下，在应用程序的不同部分使用`MyFeature`，在那里使用不同的`ArticleList`或`AddArticle`的实现是有意义的。根本的挑战是用一个组件替换另一个组件。
- en: Render props are a nice way to address this challenge. The idea is that you
    pass a property to your component whose value is a function that returns a component
    to render. This way, instead of having the feature component directly depend on
    its child components, you can configure them as you like; they pass them in as
    render prop values.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染属性是解决这一挑战的一种好方法。其思想是，你向组件传递一个属性，其值是一个返回要渲染的组件的函数。这样，你可以根据需要配置子组件，而不是让特性组件直接依赖它们；你可以将它们作为渲染属性值传递进去。
- en: '**Render props** aren''t a React 16 feature. They''re a technique whose popularity
    increase coincided with the release of React 16\. It''s an officially recognized
    way to deal with dependency and substitution problems. You can read more about
    render props here: [https://reactjs.org/docs/render-props.html](https://reactjs.org/docs/render-props.html)Let''s
    look at an example. Instead of having `MyFeature` directly depend on `AddArticle`
    and `ArticleList`, you can pass them as render props. Here''s what the `render()`
    method of `MyFeature` looks like when it''s using render props to fill in the
    holes where `<AddArticle>` and `<ArticleList>` used to be:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**渲染属性**不是React 16的新特性。它是一种技术，其流行程度与React 16的发布同时增加。这是一种官方认可的处理依赖和替换问题的方法。你可以在这里阅读更多关于渲染属性的内容：[https://reactjs.org/docs/render-props.html](https://reactjs.org/docs/render-props.html)让我们来看一个例子。不是让`MyFeature`直接依赖于`AddArticle`和`ArticleList`，你可以将它们作为渲染属性传递。当`MyFeature`使用渲染属性来填补`<AddArticle>`和`<ArticleList>`原来的位置时，`MyFeature`的`render()`方法是什么样子的：'
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `addArticle()` and `articleList()` functions are called with the same property
    values that would have been passed to `<AddArticle>` and `<ArticleList>`, respectively.
    The difference now is that this module no longer imports `AddArticle` or `ArticleList`
    as dependencies.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`addArticle()`和`articleList()`函数被调用，传递的是与`<AddArticle>`和`<ArticleList>`应该传递的相同的属性值。现在的区别是，这个模块不再将`AddArticle`或`ArticleList`作为依赖导入。'
- en: 'Now let''s take a look at the `index.js` where `<MyFeature>` is rendered:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下`index.js`，在这里`<MyFeature>`被渲染：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: There's a lot more going on here now than there was when it was just `<MyFeature>`
    being rendered. Let's break down why that is. Here is where you pass the `addArticle`
    and `articleList` render props. These prop values are functions that accept argument
    values from `MyComponent`. For example, the `onClickToggle()` function comes from
    `MyFeature` and is used to change the state of that component. You can use the
    render prop function to pass this to the component that will be rendered, along
    with any other values. The return value of these functions are what is ultimately
    rendered.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里现在发生的事情比只渲染`<MyFeature>`时要多得多。让我们分解一下为什么会这样。在这里，您传递了`addArticle`和`articleList`渲染属性。这些属性值是从`MyComponent`接受参数值的函数。例如，`onClickToggle()`函数来自`MyFeature`，用于更改该组件的状态。您可以使用渲染属性函数将其传递给将要呈现的组件，以及任何其他值。这些函数的返回值最终被呈现。
- en: Rendering component trees
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 呈现组件树
- en: Let's take a moment and reflect on what we've accomplished so far in this chapter.
    The feature component that was once monolithic ended up focusing almost entirely
    on the *state data*. It handled the initial state and handled transforming the
    state, and it would handle network requests that fetch state, if there were any.
    This is a typical *container component* in a React application, and it's the starting
    point for data.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间来反思一下在本章中我们已经取得的成就。曾经是单片的功能组件最终几乎完全专注于*状态数据*。它处理了初始状态并处理了状态的转换，如果有的话，它还会处理获取状态的网络请求。这是React应用程序中典型的*容器组件*，也是数据的起点。
- en: 'The new components that you implemented, to better compose the feature, were
    the recipients of this data. The difference between these components and their
    container is that they only care about the properties that are passed into them
    at the time they''re rendered. In other words, they only care about *data snapshots*
    at a particular point in time. From here, these components might pass the property
    data into their own child components as properties. The generic pattern to composing
    React components is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您实现的新组件，用于更好地组合功能，是这些数据的接收者。这些组件与它们的容器之间的区别在于，它们只关心在它们呈现时传递给它们的属性。换句话说，它们只关心特定时间点的*数据快照*。从这里，这些组件可能将属性数据作为属性传递给它们自己的子组件。组合React组件的通用模式如下：
- en: '![](Images/2cfd94f4-e9eb-48f0-bc45-3f120c2c3055.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2cfd94f4-e9eb-48f0-bc45-3f120c2c3055.png)'
- en: The container component will typically contain one direct child. In this diagram,
    you can see that the container has either an item detail component or a list component.
    Of course, there will be variations in these two categories, as every application
    is different. This generic pattern has three levels of component composition.
    Data flows in one direction from the container all the way down to the utility
    components.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 容器组件通常只包含一个直接子组件。在这个图表中，您可以看到容器既有一个项目详细信息组件，也有一个列表组件。当然，这两个类别会有所不同，因为每个应用程序都是不同的。这种通用模式有三个级别的组件组合。数据从容器一直流向实用组件。
- en: Once you add more than three layers, the application architecture becomes difficult
    to comprehend. There will be the odd case where you'll need to add four layers
    of React components but, as a rule-of-thumb, you should avoid this.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了超过三层，应用程序架构就变得难以理解。会有偶尔需要添加四层React组件的情况，但一般情况下，应该避免这样做。
- en: Feature components and utility components
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能组件和实用组件
- en: In the monolithic component example, you started off with a single component
    that was entirely focused on a feature. This means that the component has very
    little utility elsewhere in the application.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在庞大的组件示例中，你开始时只有一个完全专注于某个特性的组件。这意味着该组件在应用程序的其他地方几乎没有效用。
- en: The reason for this is because top-level components deal with application state.
    **Stateful components** are difficult to use in any other context. As you refactored
    the monolithic feature component, you created new components that moved further
    away from the data. The general rule is that the further your components move
    from stateful data, the more utility they have, because their property values
    could be passed in from anywhere in the application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为顶层组件处理应用程序状态。**有状态的组件**在任何其他上下文中都很难使用。当你重构庞大的特性组件时，你创建了更远离数据的新组件。一般规则是，你的组件离有状态数据越远，它们的效用就越大，因为它们的属性值可以从应用程序的任何地方传递进来。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was about avoiding monolithic component design. However, monoliths
    are often a necessary starting point in the design of any React component.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于避免庞大的组件设计。然而，在任何React组件的设计中，庞大的组件通常是一个必要的起点。
- en: You began by learning about how the different HTML elements have varying degrees
    of utility. Next, you learned about the issues with monolithic React components
    and walked through the implementation of a monolithic component.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你开始学习不同的HTML元素具有不同程度的效用。接下来，你了解了庞大的React组件的问题，并演示了如何实现庞大的组件。
- en: Then, you spent several sections learning how to refactor the monolithic component
    into a more sustainable design. From this exercise, you learned that container
    components should only have to think in terms of handling state, while smaller
    components have more utility because their property values can be passed from
    anywhere. You also learned that you can use render props for better control over
    component dependencies and substitution.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你花了几节课学习如何将庞大的组件重构为更可持续的设计。通过这个练习，你学到了容器组件只需要考虑处理状态，而较小的组件具有更多的效用，因为它们的属性值可以从任何地方传递进来。你还学到了可以使用渲染属性更好地控制组件的依赖关系和替换。
- en: In the next chapter, you'll learn about the React component lifecycle. This
    is an especially relevant topic for implementing container components.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习关于React组件生命周期。这对于实现容器组件来说是一个特别相关的话题。
- en: Test your knowledge
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: Why should monolithic React components be avoided?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么应该避免庞大的React组件？
- en: Because once components reach a certain size, the performance of the overall
    app begins to suffer.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为一旦组件达到一定的大小，整个应用程序的性能就会开始受到影响。
- en: Because they're difficult to comprehend, and difficult to refactor into smaller
    reusable components later on.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为它们难以理解，并且难以在以后重构为更小的可重用组件。
- en: You don't need to worry about avoiding monolithic components.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你不需要担心避免庞大的组件。
- en: Why should you make components functional?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么要使组件功能化？
- en: Functional components only rely on property values that are passed to it. They
    don't rely on state or lifecycle methods, both potential problem sources.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 功能组件只依赖于传递给它的属性值。它们不依赖于状态或生命周期方法，这两者都是潜在的问题来源。
- en: Functional components are easier to read.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 功能组件更容易阅读。
- en: You shouldn't make components functional, even if they don't have any state.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不应该使组件功能化，即使它们没有任何状态。
- en: How do render props simplify React apps?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染属性如何简化React应用程序？
- en: They reduce the amount of code that you need to write for a given component.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们减少了你需要为给定组件编写的代码量。
- en: They don't simplify React apps.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们不会简化React应用程序。
- en: They reduce the number of direct dependencies that a component has, allowing
    you to compose new behavior.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们减少了组件的直接依赖数量，允许您组合新的行为。
- en: Further Reading
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多阅读
- en: 'Visit following links for more information:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 点击以下链接获取更多信息：
- en: '[https://reactjs.org/docs/render-props.html](https://reactjs.org/docs/render-props.html)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/render-props.html](https://reactjs.org/docs/render-props.html)'
- en: '[https://reactjs.org/docs/components-and-props.html#functional-and-class-components](https://reactjs.org/docs/components-and-props.html#functional-and-class-components)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/components-and-props.html#functional-and-class-components](https://reactjs.org/docs/components-and-props.html#functional-and-class-components)'
