- en: Handling Navigation with Routes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理路由导航
- en: Almost every web application requires **routing**: the process of responding
    to a URL, based on a set of route handler declarations. In other words, a mapping
    from the URL to rendered content. However, this task is more involved than it
    seems at first. This is why you're going to leverage the `react-router` package
    in this chapter, the *de facto* routing tool for React.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个Web应用程序都需要**路由**：根据一组路由处理程序声明来响应URL的过程。换句话说，从URL到渲染内容的映射。然而，这个任务比起初看起来更加复杂。这就是为什么在本章中您将利用`react-router`包，这是React的*事实上*的路由工具。
- en: First, you'll learn the basics of declaring routes using JSX syntax. Then, you'll
    learn about the dynamic aspects of routing, such as dynamic path segments and
    query parameters. Next, you'll implement links using components from `react-router`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将学习使用JSX语法声明路由的基础知识。然后，您将了解路由的动态方面，例如动态路径段和查询参数。接下来，您将使用`react-router`中的组件实现链接。
- en: Declaring routes
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明路由
- en: With `react-router`, you can collocate routes with the content that they render.
    In this section, you'll see that this is done using JSX syntax to define routes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`react-router`，您可以将路由与它们渲染的内容放在一起。在本节中，您将看到这是通过使用JSX语法来定义路由的。
- en: You'll create a basic **hello world** example route so that you can see what
    routes look like in React applications. Then, you'll learn how you can organize
    your route declarations by feature instead of in a monolithic module. Finally,
    you'll implement a common parent-child routing pattern.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您将创建一个基本的“hello world”示例路由，以便您可以看到在React应用程序中路由是什么样子的。然后，您将学习如何通过功能而不是在一个庞大的模块中组织路由声明。最后，您将实现一个常见的父子路由模式。
- en: Hello route
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello route
- en: 'Let''s create a simple route that renders a simple component. First, you have
    a small React component that you want to render when the route is activated:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的路由，以渲染一个简单的组件。首先，当路由被激活时，您有一个小的React组件要渲染：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, let''s look at the route definition:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一下路由定义：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Router` component is the top-level component of the application. Let's
    break it down to know what's happening within the router.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`Router`组件是应用程序的顶层组件。让我们来分解一下，了解路由器内部发生了什么。'
- en: 'You have the actual routes declared as `<Route>` elements. There are two key
    properties of any route: `path` and `component`. When the `path` is matched against
    the active URL, the `component` is rendered. But where is it rendered, exactly?
    The `Router` component doesn''t actually render anything itself; it''s responsible
    for managing how other components are rendered based on the current URL. Sure
    enough, when you look at this example in a browser, `<MyComponent>` is rendered
    as expected:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经将实际路由声明为`<Route>`元素。任何路由的两个关键属性是`path`和`component`。当`path`与活动URL匹配时，将渲染`component`。但它到底是在哪里渲染的呢？`Router`组件实际上并不自己渲染任何内容；它负责根据当前URL管理其他组件的渲染方式。当您在浏览器中查看此示例时，`<MyComponent>`会如预期地被渲染：
- en: '![](Images/706173fb-153d-40f6-8b14-cfbf733b4ede.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/706173fb-153d-40f6-8b14-cfbf733b4ede.png)'
- en: When the `path` property matches the current URL, the `<Route>` is replaced
    by the `component` property value. In this example, the route is replaced with
    `<MyComponent>`. If a given route doesn't match, nothing is rendered.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当`path`属性与当前URL匹配时，`<Route>`将被`component`属性值替换。在这个例子中，路由将被`<MyComponent>`替换。如果给定路由不匹配，则不会渲染任何内容。
- en: Decoupling route declarations
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由声明的解耦
- en: The difficulty with routing happens when your application has dozens of routes
    declared within a single module, because it's more difficult to mentally map routes
    to features.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 路由的困难在于当你的应用程序在单个模块中声明了数十个路由时，因为更难将路由映射到功能上。
- en: 'To help with this, each top-level feature of the application can define its
    own routes. This way, it''s clear which routes belong to which feature. So, let''s
    start with the `App` component:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助实现这一点，应用程序的每个顶级功能都可以定义自己的路由。这样，清楚地知道哪些路由属于哪个功能。所以，让我们从`App`组件开始：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this example, the application has two features: `one` and `two`. These are
    imported as components and rendered inside `<Router>`. You have to include the
    `<Fragment>` element because `<Router>` doesn''t like having multiple children.
    By using a fragment, you''re passing one child without having to use an unnecessary
    DOM element. The first child in this router is actually a redirect. This means
    that when the app first loads the URL `/`, the `<Redirect>` component will send
    the user to `/one`. The `render` property is an alternative to the `component`
    property when you need to call a function to render content. You''re using it
    here because you need to pass the property to `<Redirect>`.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，应用程序有两个功能：`one` 和 `two`。这些被导入为组件并在`<Router>`内呈现。您必须包含`<Fragment>`元素，因为`<Router>`不喜欢有多个子元素。通过使用片段，您可以传递一个子元素，而不必使用不必要的DOM元素。这个路由器中的第一个子元素实际上是一个重定向。这意味着当应用程序首次加载URL
    `/` 时，`<Redirect>`组件将把用户发送到 `/one`。`render`属性是`component`属性的替代品，当您需要调用一个函数来呈现内容时。您在这里使用它是因为您需要将属性传递给`<Redirect>`。
- en: 'This module will only get as big as the number of application features, instead
    of the number of routes, which could be substantially larger. Let''s take a look
    at one of the feature routes:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块只会变得像应用程序功能的数量一样大，而不是路由的数量，后者可能会大得多。让我们来看看一个功能路由：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This module, `one/index.js`, exports a component that renders a fragment with
    three routes:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块，`one/index.js`，导出一个呈现带有三个路由的片段的组件：
- en: When the path `/one` is matched, redirect to `/one/1`
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当匹配路径`/one`时，重定向到`/one/1`
- en: When the path `/one/1` is matched, render the `First` component
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当匹配路径`/one/1`时，呈现`First`组件
- en: When the path `/one/2` is matched, render the `Second` component
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当匹配路径`/one/2`时，呈现`Second`组件
- en: 'This follows the same pattern as the `App` component for the path `/`. Often,
    your application doesn''t actually have content to render at the root of a feature
    or at the root of the application itself. This pattern allows you to send the
    user to the appropriate route and the appropriate content. Here''s what you''ll
    see when you first load the app:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这遵循与路径`/`的`App`组件相同的模式。通常，您的应用程序实际上没有要在功能的根或应用程序本身的根处呈现的内容。这种模式允许您将用户发送到适当的路由和适当的内容。这是您首次加载应用程序时会看到的内容：
- en: '![](Images/bfcc12ba-2e40-47f0-a7c0-a83b8b16b798.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/bfcc12ba-2e40-47f0-a7c0-a83b8b16b798.png)'
- en: 'The second feature follows the exact same pattern as the first. Here''s what
    the component first looks like:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个功能遵循与第一个完全相同的模式。以下是组件的初始外观：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each feature in this example uses the same minimal rendered content. These components
    are ultimately what the user needs to see when they navigate to a given route.
    By organizing routes this way, you've made your features self-contained with regard
    to routing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子中的每个功能都使用相同的最小呈现内容。当用户导航到给定路由时，这些组件最终是用户需要看到的内容。通过以这种方式组织路由，您使得您的功能在路由方面是自包含的。
- en: Parent and child routes
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 父级和子级路由
- en: 'The `App` component in the preceding example was the main component of the
    application. This is because it defined the root URL: `/`. However, once the user
    navigated to a specific feature URL, the `App` component was no longer relevant.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`App`组件是应用程序的主要组件。这是因为它定义了根URL：`/`。然而，一旦用户导航到特定的功能URL，`App`组件就不再相关了。
- en: In versions of `react-router` prior to version 4, you could nest your `<Route>`
    elements so that as the path continues to match the current URL, the relevant
    component is rendered. For example, the path `/users/8462` would have nested `<Route>`
    elements. In version 4 and above, `react-router` no longer uses nested routes
    for handling child content. Instead, you have your `App` component as you normally
    would. Then, `<Route>` elements are used to then match paths against the current
    URL in order to render specific content in `App`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`react-router`版本4之前的版本中，您可以嵌套您的`<Route>`元素，以便随着路径继续匹配当前URL，相关组件被渲染。例如，路径`/users/8462`将具有嵌套的`<Route>`元素。在版本4及以上，`react-router`不再使用嵌套路由来处理子内容。相反，您有您通常的`App`组件。然后，使用`<Route>`元素来匹配当前URL的路径，以渲染`App`中的特定内容。
- en: 'Let''s take a look at a parent `App` component that uses `<Route>` elements
    to render child components:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下一个父级`App`组件，它使用`<Route>`元素来渲染子组件：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: First, the `App` component renders some navigation links. These will always
    be visible. Since these links point to pages in your app, you can use the `NavLink`
    component instead of the `Link` component. The only difference is that you can
    use the `activeStyle` property to change the look of the link when its URL matches
    the current URL.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`App`组件渲染一些导航链接。这些链接将始终可见。由于这些链接指向应用程序中的页面，您可以使用`NavLink`组件而不是`Link`组件。唯一的区别是，当其URL与当前URL匹配时，您可以使用`activeStyle`属性来改变链接的外观。
- en: Next, you have the header and main sections. This is where you use the `Route`
    component to determine what is rendered in this part of the `App` component. For
    example, the first route in `<header>` uses the `render` property to render the
    title when the user is at the root of the app. The next two `Route` components
    use the component property to render other header content. The same pattern is
    used in `<main>`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您有标题和主要部分。这是您使用`Route`组件来确定在`App`组件的这部分中渲染什么的地方。例如，`<header>`中的第一个路由使用`render`属性在用户位于应用程序的根目录时渲染标题。接下来的两个`Route`组件使用组件属性来渲染其他标题内容。在`<main>`中也使用相同的模式。
- en: Nested routes can get messy fast. With this flat structure of declaring routes,
    it's easier to scan the routes in your code to figure out what's happening.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套路由可能会很快变得混乱。通过声明路由的扁平结构，更容易扫描代码中的路由，以弄清发生了什么。
- en: This application has two features—`users` and `groups`. Each of them has its
    own `App` components defined. For example, `UsersHeader` is used in `<header>` and
    `UsersMain` is used in `<main>`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序有两个功能——`users`和`groups`。它们各自都有自己的`App`组件定义。例如，`UsersHeader`用于`<header>`，`UsersMain`用于`<main>`。
- en: 'Here''s what the `UsersHeader` component looks like:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`UsersHeader`组件的样子：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And here''s what the `UsersMain` component looks like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`UsersMain`组件的样子：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The components used in the groups feature look almost exactly the same as these.
    If you run this example and navigate to `/users`, here''s what you can expect
    to see:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在组中使用的组件几乎与这些完全相同。如果您运行此示例并导航到`/users`，您可以期望看到：
- en: '![](Images/f491f3ff-e3d4-4a58-9651-4fdc27098853.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f491f3ff-e3d4-4a58-9651-4fdc27098853.png)'
- en: Handling route parameters
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理路由参数
- en: The URLs that you've seen so far in this chapter have all been static. Most
    applications will use both static and dynamic routes. In this section, you'll
    learn how to pass dynamic URL segments into your components, how to make these
    segments optional, and how to get query string parameters.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中您所看到的URL都是静态的。大多数应用程序将同时使用静态和动态路由。在本节中，您将学习如何将动态URL段传递到您的组件中，如何使这些段可选，以及如何获取查询字符串参数。
- en: Resource IDs in routes
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由中的资源ID
- en: One common use case is to make the ID of a resource part of the URL. This makes
    it easy for your code to get the ID, then make an API call that fetches the relevant
    resource data. Let's implement a route that renders a user detail page. This will
    require a route that includes the user ID, which then needs to somehow be passed
    to the component so that it can fetch the user.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的用例是将资源的ID作为URL的一部分。这样可以让您的代码轻松获取ID，然后发出API调用以获取相关的资源数据。让我们实现一个渲染用户详细信息页面的路由。这将需要一个包含用户ID的路由，然后需要以某种方式将其传递给组件，以便它可以获取用户。
- en: 'Let''s start with the `App` component that declares the routes:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从声明路由的`App`组件开始：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `:` syntax marks the beginning of a URL variable. The `id` variable will
    be passed to the `UserContainer` component—here''s how it''s implemented:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`:`语法标记了URL变量的开始。`id`变量将传递给`UserContainer`组件，下面是它的实现方式：'
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `match.params` property contains any dynamic parts of the URL. In this case,
    you're interested in the `id` parameter. Then, you pass the number version of
    this value to the `fetchUser()` API call. If the URL is missing the segment completely,
    then this code won't run at all; the router will revert back to the `/` route.
    However, there's no type-checking done at the route level, which means it's up
    to you to handle non-numbers being passed where numbers are expected, and so on.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`match.params`属性包含URL的任何动态部分。在这种情况下，您对`id`参数感兴趣。然后，将此值的数字版本传递给`fetchUser()`API调用。如果URL完全缺少该段，那么这段代码将根本不运行；路由器将恢复到`/`路由。但是，在路由级别没有进行类型检查，这意味着您需要处理传递非数字的地方期望数字等情况。'
- en: 'In this example, the type cast operation will result in a 500 error if the
    user navigates to, for example, `/users/one`. You could write a function that
    type-checks parameters and, instead of failing with an exception, responds with
    a 404: Not found error. In any case, it''s up to the application, not the `react-router` library,
    to provide a meaningful failure mode.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，如果用户导航到，例如，`/users/one`，类型转换操作将导致500错误。您可以编写一个函数来对参数进行类型检查，并且在出现异常时不会失败，而是响应404：未找到错误。无论如何，提供有意义的失败模式取决于应用程序，而不是`react-router`库。
- en: 'Now let''s take a look at the API functions used in this example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下这个示例中使用的API函数：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `fetchUsers()` function is used by the `UsersContainer` component to populate
    the list of user links. The `fetchUser()` function will find and resolve a value
    from the `users` array of mock data or the promise is rejected. If rejected, the
    error-handling behavior of the `UserContainer` component is invoked.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetchUsers()`函数被`UsersContainer`组件使用来填充用户链接列表。`fetchUser()`函数将在模拟数据的`users`数组中查找并解析值，或者拒绝承诺。如果被拒绝，将调用`UserContainer`组件的错误处理行为。'
- en: 'Here is the `User` component, responsible for rendering the user details:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是负责渲染用户详细信息的`User`组件：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When you run this app and navigate to `/`, you should see a list of users that
    looks like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此应用程序并导航到`/`时，您应该看到一个用户列表，看起来像这样：
- en: '![](Images/b9cb8d10-3f29-43c5-936d-ab00b77d9acf.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b9cb8d10-3f29-43c5-936d-ab00b77d9acf.png)'
- en: 'Clicking on the first link should take you to `/users/0`, which looks like
    this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 点击第一个链接应该带您到`/users/0`，看起来像这样：
- en: '![](Images/bba66852-755f-4517-9f29-030d67c821ef.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/bba66852-755f-4517-9f29-030d67c821ef.png)'
- en: 'And if you navigate to a user that doesn''t exist, `/users/2`, here''s what
    you''ll see:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您导航到一个不存在的用户，`/users/2`，您将看到以下内容：
- en: '![](Images/a4c67402-c41b-4884-9113-603701e443b1.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a4c67402-c41b-4884-9113-603701e443b1.png)'
- en: 'The reason that you see this error message instead of a 500 error is because
    the API endpoint knows how to deal with missing resources:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您看到这个错误消息而不是500错误的原因是因为API端点知道如何处理缺少的资源：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This results in the `UserContainer` setting its error state:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致`UserContainer`设置其错误状态：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This then results in the `User` component rendering the error message:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就导致`User`组件渲染错误消息：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Optional parameters
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可选参数
- en: Sometimes, you need optional URL path values and query parameters. URLs work
    best for simple options, and query parameters work best if there are many values
    that the component can use.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要可选的URL路径值和查询参数。URL对于简单选项效果最佳，如果组件可以使用许多值，则查询参数效果最佳。
- en: 'Let''s implement a user list component that renders a list of users. Optionally,
    you want to be able to sort the list in descending order. Let''s make this an
    optional path segment in the route definition for this page:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一个用户列表组件，它渲染用户列表。可选地，您希望能够按降序对列表进行排序。让我们将这作为此页面的路由定义的可选路径段：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The`:` syntax marks a variable which the `?` suffix marks the variable as optional.
    This means that the user can provide anything they want after `/users/`. This
    also means that the component needs to make sure that the string `desc` is provided,
    and that everything else is ignored.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`:`语法标记一个变量，`?`后缀标记变量为可选。这意味着用户可以在`/users/`后提供任何他们想要的内容。这也意味着组件需要确保提供了字符串`desc`，并且忽略其他所有内容。'
- en: 'It''s also up to the component to handle any query strings provided to it.
    So while the route declaration doesn''t provide any mechanism to define accepted
    query strings, the router will still pass the raw query string to the component.
    Let''s take a look at the user list container component now:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 组件还需要处理提供给它的任何查询字符串。因此，虽然路由声明不提供定义接受的查询字符串的机制，但路由器仍将原始查询字符串传递给组件。现在让我们来看一下用户列表容器组件：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the `componentDidMount()` method, this component looks for either `params.desc`
    or `search.desc`. It uses this as an argument to the `fetchUsers()` API, to determine
    the sort order.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`componentDidMount()`方法中，此组件查找`params.desc`或`search.desc`。它将此作为`fetchUsers()`
    API的参数，以确定排序顺序。
- en: 'Here''s what the `Users` component looks like:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`Users`组件如下所示：'
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here''s what''s rendered when you navigate to `/users`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当您导航到`/users`时，将呈现如下内容：
- en: '![](Images/c2449b0a-5b34-44d4-9a7f-56e6f6ac5024.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c2449b0a-5b34-44d4-9a7f-56e6f6ac5024.png)'
- en: 'And if you include the descending parameter by navigating to `/users/desc`,
    here''s what we get:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您通过导航到`/users/desc`包含降序参数，我们会得到以下结果：
- en: '![](Images/d144b061-68fd-40c4-b239-cd96d7bc559b.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d144b061-68fd-40c4-b239-cd96d7bc559b.png)'
- en: Using link components
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用链接组件
- en: In this section, you'll learn how to create links. You might be tempted to use
    the standard `<a>` elements to link to pages controlled by `react-router`. The
    problem with this approach is that these links will try to locate the page on
    the backend by sending a GET request. This isn't what you want, because the route
    configuration is already in the browser.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何创建链接。您可能会尝试使用标准的`<a>`元素链接到由`react-router`控制的页面。这种方法的问题在于，这些链接将尝试通过发送GET请求在后端定位页面。这不是您想要的，因为路由配置已经在浏览器中。
- en: First, you'll see an example that illustrates how `<Link>` elements are just
    like `<a>` elements in most ways. Then, you'll see how to build links that use
    URL parameters and query parameters.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将看到一个示例，说明`<Link>`元素在大多数方面都像`<a>`元素。然后，您将看到如何构建使用URL参数和查询参数的链接。
- en: Basic linking
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本链接
- en: 'The idea with links in React apps is that they point to routes that point to
    components that render new content. The `Link` component also takes care of the
    browser history API and looking up route/component mappings. Here''s an application
    component that renders two links:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在React应用程序中，链接的想法是它们指向指向渲染新内容的组件的路由。`Link`组件还负责浏览器历史API和查找路由/组件映射。这是一个渲染两个链接的应用程序组件：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `to` property specifies the route to activate when clicked. In this case,
    the application has two routes—`/first` and `/second`. Here is what the rendered
    links look like:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`to`属性指定点击时要激活的路由。在这种情况下，应用程序有两个路由—`/first`和`/second`。渲染的链接如下所示：'
- en: '![](Images/7be082c0-38af-4ec5-9d89-70222dfddc86.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7be082c0-38af-4ec5-9d89-70222dfddc86.png)'
- en: 'When you click the first link, the page content changes to look like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击第一个链接时，页面内容会变成这样：
- en: '![](Images/0bffaa0a-9854-4fd7-9d5b-d271d4d311b3.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0bffaa0a-9854-4fd7-9d5b-d271d4d311b3.png)'
- en: URL and query parameters
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URL和查询参数
- en: Constructing the dynamic segments of a path that is passed to `<Link>` involves
    string manipulation. Everything that's part of the path goes in the `to` property.
    This means that you have to write more code to construct the string, but it also
    means less behind-the-scenes magic happening in the router.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 构建传递给`<Link>`的路径的动态段涉及字符串操作。路径的所有部分都放在`to`属性中。这意味着您必须编写更多的代码来构建字符串，但也意味着在路由器中发生的幕后魔术更少。
- en: 'Let''s create a simple component that will echo back whatever is passed to
    the echo URL segment or the `echo` query parameter:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的组件，它将回显传递给回声URL段或`echo`查询参数的任何内容：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `withRouter()` utility function is a higher-order function that returns
    a new component. This new component will have router-related properties passed
    to it, which you need if you want to work with path segment variables or the query
    string. The two properties used by your `Echo` component are `match.params` for
    the URL path variables and `location.search` for the query string.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`withRouter()`实用程序函数是一个返回新组件的高阶函数。这个新组件将传递给它与路由相关的属性，如果你想要处理路径段变量或查询字符串，这些属性是必需的。你的`Echo`组件使用的两个属性是`match.params`用于URL路径变量和`location.search`用于查询字符串。'
- en: Prior to `react-router` version 4, the query string was parsed and passed in
    as an object. Now that has to be handled in your code. In this example, `URLSearchParams`
    is used.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`react-router`版本4之前，查询字符串被解析并作为对象传递。现在必须在您的代码中处理。在这个例子中，使用了`URLSearchParams`。
- en: 'Now, let''s take a look at the `App` component that renders two links. The
    first will build a string that uses a dynamic value as a URL parameter. The second
    will use `URLSearchParams` to build the query string portion of the URL:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下渲染两个链接的`App`组件。第一个将构建一个使用动态值作为URL参数的字符串。第二个将使用`URLSearchParams`来构建URL的查询字符串部分：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here''s what the two links look like when they''re rendered:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当它们被渲染时，这两个链接看起来像这样：
- en: '![](Images/d894d61b-c4b7-4eea-a6b9-65611090e2aa.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d894d61b-c4b7-4eea-a6b9-65611090e2aa.png)'
- en: 'The param link takes you to `/echo/From Param`, which looks like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 参数链接将带您到`/echo/From Param`，看起来像这样：
- en: '![](Images/e8affd79-21f3-46a3-80d3-49488b8855dc.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e8affd79-21f3-46a3-80d3-49488b8855dc.png)'
- en: 'The query link takes you to `/echo?echo=From+Query`, which looks like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 查询链接将带您到`/echo?echo=From+Query`，看起来像这样：
- en: '![](Images/da41a9cd-d7d5-4a6b-96ca-9d7fcefa58f0.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/da41a9cd-d7d5-4a6b-96ca-9d7fcefa58f0.png)'
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about routing in React applications. The job of
    a router is to render content that corresponds to a URL. The `react-router` package
    is the standard tool for the job.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了React应用程序中的路由。路由的工作是渲染与URL对应的内容。`react-router`包是这项工作的标准工具。
- en: You learned how routes are JSX elements, just like the components they render.
    Sometimes, you need to split routes into feature-based modules. A common pattern
    for structuring page content is to have a parent component that renders the dynamic
    parts as the URL changes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您学会了路由是JSX元素，就像它们渲染的组件一样。有时，您需要将路由拆分为基于特性的模块。结构化页面内容的常见模式是有一个父组件，根据URL的变化来渲染动态部分。
- en: You learned how to handle the dynamic parts of URL segments and query strings.
    You also learned how to build links throughout your application using the `<Link>`
    element.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您学会了如何处理URL段和查询字符串的动态部分。您还学会了如何使用`<Link>`元素在整个应用程序中构建链接。
- en: In the next chapter, you'll learn how to render React components in Node.js.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何在Node.js中呈现React组件。
- en: Test your knowledge
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的知识
- en: The `react-router` package is the official package used for routing in React
    apps and therefore, the only option.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`react-router`包是React应用程序中用于路由的官方包，因此是唯一的选择。'
- en: Yes, `react-router` is the official React routing solution.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，`react-router`是官方的React路由解决方案。
- en: No, `react-router` is one of several routing options and you should spend time
    looking at each of them.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，`react-router`是多个路由选项之一，您应该花时间查看每个选项。
- en: No, **`react-router`** is the de facto routing solution for React and you should
    use it unless you have a strong reason not to.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，**`react-router`**是React的事实标准路由解决方案，除非您有充分的理由不使用它。
- en: What's the difference between `Route` and `Router` components?
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Route`和`Router`组件之间有什么区别？'
- en: A **`Route`** is used to render components based on URL matches and a **`Router`**
    is used to declare route-component mappings.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**`Route`**用于根据URL匹配呈现组件，**`Router`**用于声明路由-组件映射。'
- en: There is no difference.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有区别。
- en: A `Router` should be declared by every component, to declare the routes used
    by the component.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个组件都应该声明一个`Router`，以声明组件使用的路由。
- en: How do you change only certain parts of the UI as the route changes?
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当路由更改时，如何仅更改UI的某些部分？
- en: You can't change only certain parts, you have to re-render the entire component
    tree, starting at the root.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不能仅更改某些部分，必须重新呈现整个组件树，从根开始。
- en: You use **`Route`** components to render content that is specific to any given
    section, based on the provided **`path`** property. You can have more than one
    **`Route`** with the same **`path`** value.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您使用**`Route`**组件根据提供的**`path`**属性呈现特定于任何给定部分的内容。您可以有多个具有相同**`path`**值的**`Route`**。
- en: You pass section names as property values to `Route` components, along with
    the component to render for that section.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将部分名称作为属性值传递给`Route`组件，以及要为该部分呈现的组件。
- en: When should you use the `NavLink` component?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时应该使用`NavLink`组件？
- en: When you want `react-router` to automatically style active links for you.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您希望`react-router`自动为您设置活动链接的样式时。
- en: To show the user which links are navigation links versus regular links.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向用户显示哪些链接是导航链接，哪些是常规链接。
- en: When you want to use the **`activeStyle`** or **`activeClassName`** properties
    to style active links.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您想要使用**`activeStyle`**或**`activeClassName`**属性为活动链接设置样式时。
- en: How do you get values from URL paths?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何从URL路径中获取值？
- en: You can get the value of any URL path segment by passing the index of the segment.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过传递段的索引来获取任何URL路径段的值。
- en: You have to parse the URL yourself and find the value.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须自己解析URL并找到值。
- en: You use the** `:`** syntax to specify that this is a variable and **`react-router`**
    will pass this value into your component as a property.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您使用**`:`**语法来指定这是一个变量，**`react-router`**将此值作为属性传递给您的组件。
- en: Further reading
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Refer to the following links for more information:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参考以下链接：
- en: '[https://reacttraining.com/react-router/](https://reacttraining.com/react-router/)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reacttraining.com/react-router/](https://reacttraining.com/react-router/)'
- en: '[https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)'
