- en: Event Handling, the React Way
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理，React方式
- en: 'The focus of this chapter is event handling. React has a unique approach to
    handling events: declaring event handlers in JSX. I''ll get things going by looking
    at how event handlers for particular elements are declared in JSX. Then, you''ll
    learn about binding handler context and parameter values. Next, we''ll implement
    inline and higher-order event handler functions.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是事件处理。React在处理事件方面有独特的方法：在JSX中声明事件处理程序。我将首先看一下在JSX中声明特定元素的事件处理程序。然后，您将了解如何绑定处理程序上下文和参数值。接下来，我们将实现内联和高阶事件处理程序函数。
- en: Then you'll learn how React actually maps event handlers to DOM elements under
    the hood. Finally, you'll learn about the synthetic events that React passes to
    event handler functions, and how they're pooled for performance purposes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您将了解React实际上是如何将事件处理程序映射到DOM元素的。最后，您将了解React传递给事件处理程序函数的合成事件，以及它们如何为性能目的进行池化。
- en: Declaring event handlers
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明事件处理程序
- en: The differentiating factor with event handling in React components is that it's
    **declarative**. Contrast this with something like jQuery, where you have to write
    imperative code that selects the relevant DOM elements and attaches event handler
    functions to them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在React组件中处理事件的不同因素是它是**声明式**的。与jQuery相比，你必须编写命令式代码来选择相关的DOM元素并将事件处理程序函数附加到它们上。
- en: The advantage with the declarative approach to event handlers in JSX markup
    is that they're part of the UI structure. Not having to track down code that assigns
    event handlers is mentally liberating.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在JSX标记中声明事件处理程序的声明性方法的优势在于它们是UI结构的一部分。不必追踪分配事件处理程序的代码是一种心理上的解放。
- en: In this section, you'll write a basic event handler, so you can get a feel for
    the declarative event handling syntax found in React applications. Then, you'll
    learn how to use generic event handler functions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将编写一个基本的事件处理程序，以便了解在React应用程序中找到的声明性事件处理语法。然后，您将学习如何使用通用事件处理程序函数。
- en: Declaring handler functions
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明处理程序函数
- en: 'Let''s take a look at a basic component that declares an event handler for
    the click event of an element:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个声明了元素点击事件的基本组件：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The event handler function, `this.onClick()`, is passed to the `onClick` property
    of the `<button>` element. By looking at this markup, it's clear what code is
    going to run when the button is clicked.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序函数`this.onClick()`被传递给`<button>`元素的`onClick`属性。通过查看这个标记，清楚地知道按钮被点击时将运行什么代码。
- en: 'See the official React documentation for the full list of supported event property
    names: [https://facebook.github.io/react/docs/](https://facebook.github.io/react/docs/).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅官方的React文档，了解支持的事件属性名称的完整列表：[https://facebook.github.io/react/docs/](https://facebook.github.io/react/docs/)。
- en: Multiple event handlers
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个事件处理程序
- en: 'What I really like about the declarative event handler syntax is that it''s
    easy to read when there''s more than one handler assigned to an element. Sometimes,
    for example, there are two or three handlers for an element. Imperative code is
    difficult to work with for a single event handler, let alone several of them.
    When an element needs more handlers, it''s just another JSX attribute. This scales
    well from a code maintainability perspective:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的很喜欢声明式事件处理程序语法的一点是，当一个元素分配了多个处理程序时，它很容易阅读。有时，例如，一个元素有两个或三个处理程序。命令式代码很难处理单个事件处理程序，更不用说多个事件处理程序了。当一个元素需要更多处理程序时，它只是另一个JSX属性。从代码可维护性的角度来看，这在很大程度上是可扩展的。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This `<input>` element could have several more event handlers, and the code
    would be just as readable.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`<input>`元素可能有几个更多的事件处理程序，代码仍然可以读得很清楚。
- en: As you keep adding more event handlers to your components, you'll notice that
    a lot of them do the same thing. Next, you'll learn how to share generic handler
    functions across components.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当您不断向组件添加更多事件处理程序时，您会注意到很多事件处理程序都在做相同的事情。接下来，您将学习如何在组件之间共享通用处理程序函数。
- en: Importing generic handlers
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入通用处理程序
- en: 'Any React application is likely going to share the same event handling logic
    for different components. For example, in response to a button click, the component
    should sort a list of items. It''s these types of generic behaviors that belong
    in their own modules so that several components can share them. Let''s implement
    a component that uses a generic event handler function:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 任何React应用程序都可能会为不同组件共享相同的事件处理逻辑。例如，响应按钮点击时，组件应该对项目列表进行排序。这些类型的通用行为应该属于它们自己的模块，以便多个组件可以共享它们。让我们实现一个使用通用事件处理程序函数的组件：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let's walk through what's going on here, starting with the imports. You're importing
    a function called `reverse()`. This is the generic event handler function that
    you're using with your `<button>` element. When it's clicked, the list should
    reverse its order.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这里开始，逐步了解正在发生的事情，从导入开始。您正在导入一个名为`reverse()`的函数。这是您在`<button>`元素中使用的通用事件处理程序函数。当它被点击时，列表应该反转其顺序。
- en: The `onReverseClick` method actually calls the generic `reverse()` function.
    It is created using `bind()` to bind the context of the generic function to this
    component instance.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`onReverseClick`方法实际上调用了通用的`reverse()`函数。它是使用`bind()`来将通用函数的上下文绑定到此组件实例而创建的。'
- en: Finally, looking at the JSX markup, you can see that the `onReverseClick()`
    function is used as the handler for the button click.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，看一下JSX标记，您可以看到`onReverseClick()`函数被用作按钮点击的处理程序。
- en: 'So how does this work, exactly? You have a generic function that somehow changes
    the state of this component because you bound context to it? Well, pretty much,
    yes, that''s it. Let''s look at the generic function implementation now:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这到底是如何工作的呢？您有一个通用函数，它以某种方式改变了此组件的状态，因为您将上下文绑定到它？嗯，基本上是的，就是这样。现在让我们来看一下通用函数的实现：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This function depends on a `this.state` property and an `items` array within
    the state. The key is that the state is generic; an application could have many
    components with an `items` array in its state.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数依赖于`this.state`属性和状态中的`items`数组。关键在于状态是通用的；一个应用程序可能有许多具有其状态中的`items`数组的组件。
- en: 'Here''s what our rendered list looks like:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们渲染的列表如下所示：
- en: '![](Images/3f3ca9fb-eafe-488e-97a6-b4aac6401ce6.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3f3ca9fb-eafe-488e-97a6-b4aac6401ce6.png)'
- en: 'As expected, clicking the button causes the list to sort, using your generic
    `reverse()` event handler:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，点击按钮会导致列表排序，使用您的通用`reverse()`事件处理程序：
- en: '![](Images/79b751c3-0cb7-40ee-8d7f-3d4cc5138f7b.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/79b751c3-0cb7-40ee-8d7f-3d4cc5138f7b.png)'
- en: Next, you'll learn how to bind the context and the argument values of event
    handler functions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将学习如何绑定事件处理程序函数的上下文和参数值。
- en: Event handler context and parameters
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理程序上下文和参数
- en: In this section, you'll learn about React components that bind their event handler
    contexts and how you can pass data into event handlers. Having the right context
    is important for React event handler functions, because they usually need access
    to component properties or state. Being able to parameterize event handlers is
    also important, because they don't pull data out of DOM elements.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，您将了解绑定其事件处理程序上下文的React组件以及如何将数据传递给事件处理程序。对于React事件处理程序函数来说，拥有正确的上下文是很重要的，因为它们通常需要访问组件属性或状态。能够对事件处理程序进行参数化也很重要，因为它们不会从DOM元素中提取数据。
- en: Getting component data
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取组件数据
- en: 'In this section, you''ll learn about scenarios where the handler needs access
    to component properties, as well as argument values. You''ll render a custom list
    component that has a click event handler for each item in the list. The component
    is passed an array of values as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解处理程序需要访问组件属性以及参数值的情况。您将渲染一个自定义列表组件，该组件在列表中的每个项目上都有一个点击事件处理程序。组件将按以下方式传递一个值数组：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Each item in the list has an `id` property, used to identify the item. You''ll
    need to be able to access this ID when the item is clicked in the UI so that the
    event handler can work with the item. Here''s what the `MyList` component implementation
    looks like:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的每个项目都有一个`id`属性，用于标识该项目。当用户在UI中点击项目时，您需要能够访问此ID，以便事件处理程序可以处理该项目。以下是`MyList`组件的实现方式：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is what the rendered list looks like:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染列表如下所示：
- en: '![](Images/fd1f7b83-a034-431c-a345-6ccda04e2066.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fd1f7b83-a034-431c-a345-6ccda04e2066.png)'
- en: You have to bind the event handler context, which is done in the constructor.
    If you look at the `onClick()` event handler, you can see that it needs access
    to the component so that it can look up the clicked item in `this.props.items`.
    Also, the `onClick()` handler is expecting an `id` parameter. If you take a look
    at the JSX content of this component, you can see that calling `bind()` supplies
    the argument value for each item in the list. This means that when the handler
    is called in response to a click event, the `id` of the item is already provided.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须绑定事件处理程序的上下文，这是在构造函数中完成的。如果您查看`onClick()`事件处理程序，您会发现它需要访问组件，以便它可以在`this.props.items`中查找被点击的项目。此外，`onClick()`处理程序需要一个`id`参数。如果您查看此组件的JSX内容，您会发现调用`bind()`为列表中的每个项目提供了参数值。这意味着当处理程序响应点击事件时，项目的`id`已经提供了。
- en: This approach to parameterized event handling is quite different from prior
    approaches. For example, I used to rely on getting parameter data from the DOM
    element itself. This works well when you only need one event handler, and it can
    extract the data it needs from the event argument. This approach also doesn't
    require setting up several new functions by iterating over a collection and calling
    `bind()`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这种参数化事件处理的方法与以往的方法有很大不同。例如，我过去常常依赖于从DOM元素本身获取参数数据。当你只需要一个事件处理程序时，这种方法效果很好，它可以从事件参数中提取所需的数据。这种方法也不需要通过迭代集合并调用`bind()`来设置几个新函数。
- en: And therein lies the trade-off. React applications avoid touching the DOM, because
    the DOM is really just a render target for React components. If you can write
    code that doesn't introduce explicit dependencies to DOM elements, your code will
    be portable. This is what you've accomplished with the event handler in this example.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是其中的权衡。React应用程序避免触及DOM，因为DOM实际上只是React组件的渲染目标。如果您可以编写不引入对DOM元素的显式依赖的代码，那么您的代码将是可移植的。这就是您在此示例中事件处理程序所实现的内容。
- en: If you're concerned about the performance implications of creating a new function
    for every item in a collection, don't be. You're not going to render thousands
    of items on the page at a time. Benchmark your code, and if it turns out that
    `bind()` calls on your React event handlers are the slowest part, then you probably
    have a really fast application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你担心为集合中的每个项目创建一个新函数会对性能产生影响，那就不用担心。你不会一次在页面上渲染成千上万个项目。对你的代码进行基准测试，如果结果表明`bind()`调用是React事件处理程序中最慢的部分，那么你可能有一个非常快速的应用程序。
- en: Higher-order event handlers
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高阶事件处理程序
- en: 'A **higher-order function** is a function that returns a new function. Sometimes,
    higher-order functions take functions as arguments too. In the preceding example,
    you used `bind()` to bind the context and argument values of your event handler
    functions. Higher-order functions that return event handler functions are another
    technique. The main advantage of this technique is that you don''t call `bind()`
    several times. Instead, you just call the function where you want to bind parameters
    to the function. Let''s look at an example component:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**高阶函数**是返回新函数的函数。有时，高阶函数也将函数作为参数。在前面的例子中，您使用`bind()`来绑定事件处理程序函数的上下文和参数值。返回事件处理程序函数的高阶函数是另一种技术。这种技术的主要优点是您不需要多次调用`bind()`。相反，您只需在要将参数绑定到函数的位置调用该函数。让我们看一个示例组件：'
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This component renders three buttons and has three pieces of state—a counter
    for each button. The `onClick()` function is automatically bound to the component
    context because it''s defined as an arrow function. It takes a `name` argument
    and returns a new function. The function that is returned uses this `name` value
    when called. It uses computed property syntax (variables inside `[]`) to increment
    the state value for the given name. Here''s what that component content looks
    like after each button has been clicked a few times:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件呈现三个按钮，并具有三个状态片段-每个按钮的计数器。`onClick()`函数会自动绑定到组件上下文，因为它被定义为箭头函数。它接受一个`name`参数并返回一个新函数。返回的函数在调用时使用这个`name`值。它使用计算属性语法（`[]`内的变量）来增加给定名称的状态值。在每个按钮被点击几次后，该组件内容如下：
- en: '![](Images/41bea184-c17d-446a-b4e5-17fbdf0c91cc.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/41bea184-c17d-446a-b4e5-17fbdf0c91cc.png)'
- en: Inline event handlers
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内联事件处理程序
- en: 'The typical approach to assigning handler functions to JSX properties is to
    use a **named** function. However, sometimes you might want to use an **inline**
    function. This is done by assigning an **arrow** function directly to the event
    property in the JSX markup:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将处理程序函数分配给JSX属性的典型方法是使用**命名**函数。但是，有时您可能想要使用**内联**函数。这是通过直接将**箭头**函数分配给JSX标记中的事件属性来完成的：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The main use of inlining event handlers like this is when you have a static
    parameter value that you want to pass to another function. In this example, you're
    calling `console.log()` with the string `clicked`. You could have set up a special
    function for this purpose outside of the JSX markup by creating a new function
    using `bind()`, or by using a higher-order function. But then you would have to
    think of yet another name for yet another function. Inlining is just easier sometimes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样内联事件处理程序的主要用途是当您有一个静态参数值要传递给另一个函数时。在这个例子中，您正在使用字符串`clicked`调用`console.log()`。您可以通过在JSX标记之外创建一个使用`bind()`创建新函数，或者使用高阶函数来为此目的设置一个特殊函数。但是，您将不得不再想一个新的函数名称。有时内联更容易。
- en: Binding handlers to elements
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将处理程序绑定到元素
- en: 'When you assign an event handler function to an element in JSX, React doesn''t
    actually attach an event listener to the underlying DOM element. Instead, it adds
    the function to an internal mapping of functions. There''s a single event listener
    on the document for the page. As events bubble up through the DOM tree to the
    document, the React handler checks to see whether any components have matching
    handlers. The process is illustrated here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将事件处理程序函数分配给JSX中的元素时，React实际上并没有将事件侦听器附加到底层DOM元素上。相反，它将函数添加到内部函数映射中。页面上的文档有一个单一的事件侦听器。当事件通过DOM树冒泡到文档时，React处理程序会检查是否有匹配的处理程序。该过程如下图所示：
- en: '![](Images/dd1ebd5b-d2b9-49e7-ba39-38152fd442b0.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/dd1ebd5b-d2b9-49e7-ba39-38152fd442b0.png)'
- en: Why does React go to all of this trouble, you might ask? It's the same principle
    that I've been covering for the past few chapters; keep the declarative UI structures
    separated from the DOM as much as possible.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，为什么React要费这么大的劲？这与我在过去几章中一直在讲的原则相同；尽可能将声明式UI结构与DOM分开。
- en: For example, when a new component is rendered, its event handler functions are
    simply added to the internal mapping maintained by React. When an event is triggered
    and it hits the `document` object, React maps the event to the handlers. If a
    match is found, it calls the handler. Finally, when the React component is removed,
    the handler is simply removed from the list of handlers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当渲染新组件时，其事件处理程序函数只是添加到React维护的内部映射中。当触发事件并且它命中`document`对象时，React将事件映射到处理程序。如果找到匹配项，它会调用处理程序。最后，当React组件被移除时，处理程序只是从处理程序列表中移除。
- en: None of these DOM operations actually touch the DOM. It's all abstracted by
    a single event listener. This is good for performance and the overall architecture
    (keep the render target separate from the application code).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些DOM操作实际上都没有触及DOM。它都是由单个事件侦听器抽象出来的。这对性能和整体架构都是有利的（保持渲染目标与应用程序代码分开）。
- en: Synthetic event objects
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合成事件对象
- en: When you attach an event handler function to a DOM element using the native
    `addEventListener()` function, the callback will get an event argument passed
    to it. Event handler functions in React are also passed an event argument, but
    it's not the standard `Event` instance. It's called `SyntheticEvent`, and it's
    a simple wrapper for native event instances.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用原生的`addEventListener()`函数将事件处理程序函数附加到DOM元素时，回调函数将会传递一个事件参数。React中的事件处理程序函数也会传递一个事件参数，但它不是标准的`Event`实例。它被称为`SyntheticEvent`，它是原生事件实例的简单包装。
- en: 'Synthetic events serve two purposes in React:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，合成事件有两个目的：
- en: Provides a consistent event interface, normalizing browser inconsistencies
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一致的事件接口，规范浏览器的不一致性
- en: Synthetic events contain information that's necessary for propagation to work
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合成事件包含传播所需的信息
- en: 'Here''s an illustration of the synthetic event in the context of a React component:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在React组件上下文中合成事件的示例：
- en: '![](Images/78ee36b3-8721-44a7-8be9-3bb2a2240db4.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/78ee36b3-8721-44a7-8be9-3bb2a2240db4.png)'
- en: In the next section, you'll see how these synthetic events are pooled for performance
    reasons and the implications of this for asynchronous code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将看到这些合成事件是如何为了性能原因而进行池化的，以及这对异步代码的影响。
- en: Event pooling
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件池化
- en: One challenge with wrapping native event instances is that this can cause performance
    issues. Every synthetic event wrapper that's created will also need to be garbage
    collected at some point, which can be expensive in terms of CPU time.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 用原生事件实例包装的一个挑战是可能会导致性能问题。每个创建的合成事件包装器最终都需要被垃圾回收，这在CPU时间方面可能是昂贵的。
- en: When the garbage collector is running, none of your JavaScript code is able
    to run. This is why it's important to be memory efficient; frequent garbage collection
    means less CPU time for code that responds to user interactions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当垃圾收集器运行时，您的JavaScript代码将无法运行。这就是为什么要节约内存；频繁的垃圾收集意味着对响应用户交互的代码的CPU时间较少。
- en: For example, if your application only handles a few events, this wouldn't matter
    much. But even by modest standards, applications respond to many events, even
    if the handlers don't actually do anything with them. This is problematic if React
    constantly has to allocate new synthetic event instances.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您的应用程序只处理少量事件，这可能并不重要。但即使按照适度的标准，应用程序也会响应许多事件，即使处理程序实际上并不对其执行任何操作。如果React不断地必须分配新的合成事件实例，这就成了一个问题。
- en: 'React deals with this problem by allocating a **synthetic instance pool**.
    Whenever an event is triggered, it takes an instance from the pool and populates
    its properties. When the event handler has finished running, the synthetic event
    instance is released back into the pool, as shown here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: React通过分配**合成实例池**来解决这个问题。每当触发事件时，它都会从池中取出一个实例并填充其属性。当事件处理程序运行结束时，合成事件实例将被释放回池中，如下所示：
- en: '![](Images/d3773e6e-17f6-44b0-a5f8-37103058ff30.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d3773e6e-17f6-44b0-a5f8-37103058ff30.png)'
- en: This prevents the garbage collector from running frequently when a lot of events
    are triggered. The pool keeps a reference to the synthetic event instances, so
    they're never eligible for garbage collection. React never has to allocate new
    instances either.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以防止在触发大量事件时垃圾收集器频繁运行。池保留对合成事件实例的引用，因此它们永远不会被垃圾收集。React也不需要分配新实例。
- en: 'However, there is one gotcha that you need to be aware of. It involves accessing
    the synthetic event instances from asynchronous code in your event handlers. This
    is an issue because, as soon as the handler has finished running, the instance
    goes back into the pool. When it goes back into the pool, all of its properties
    are cleared. Here''s an example that shows how this can go wrong:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个需要注意的地方。它涉及在事件处理程序的异步代码中访问合成事件实例。这是一个问题，因为一旦处理程序运行结束，实例就会返回到池中。当它返回到池中时，它的所有属性都被清除。下面是一个示例，展示了这种情况可能出错的情况：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The second call to  `console.log()` is attempting to access a synthetic event
    property from an asynchronous callback that doesn't run until the event handler
    completes, which causes the event to empty its properties. This results in a warning
    and an `undefined` value.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次调用`console.log()`试图从异步回调中访问合成事件属性，直到事件处理程序完成才运行，这导致事件清空其属性。这会导致警告和`undefined`值。
- en: The aim of this example is to illustrate how things can break when you write
    asynchronous code that interacts with events. Just don't do it!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的目的是说明当您编写与事件交互的异步代码时，事情可能会出错。千万不要这样做！
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduced you to event handling in React. The key differentiator
    between React and other approaches to event handling is that handlers are declared
    in JSX markup. This makes tracking down which elements handle which events much
    simpler.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您介绍了React中的事件处理。React和其他事件处理方法的关键区别在于处理程序是在JSX标记中声明的。这使得追踪哪些元素处理哪些事件变得更加简单。
- en: You learned that having multiple event handlers on a single element is a matter
    of adding new JSX properties. Next, you learned that it's a good idea to share
    event handling functions that handle generic behavior. Context can be important
    for event handler functions, if they need access to component properties or state.
    You learned about the various ways to bind event handler function context, and
    parameter values. These include calling `bind()` and using higher-order event
    handler functions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您学到了在单个元素上有多个事件处理程序是添加新的JSX属性的问题。接下来，您学到了共享处理通用行为的事件处理函数是一个好主意。如果事件处理程序函数需要访问组件属性或状态，则上下文可能很重要。您了解了绑定事件处理程序函数上下文和参数值的各种方法。这些包括调用`bind()`和使用高阶事件处理程序函数。
- en: Then, you learned about inline event handler functions and their potential use,
    as well as how React actually binds a single DOM event handler to the document
    object. Synthetic events are an abstraction that wraps the native event, and you
    learned why they're necessary and how they're pooled for efficient memory consumption.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您了解了内联事件处理程序函数及其潜在用途，以及React实际上是如何将单个DOM事件处理程序绑定到文档对象的。合成事件是包装本机事件的抽象，您了解了它们为什么是必要的以及它们如何被池化以实现高效的内存消耗。
- en: In the next chapter, you'll learn how to create components that are reusable
    for a variety purposes.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何创建可重用于各种目的的组件。
- en: Test your knowledge
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: What makes event handlers in React declarative?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么使React中的事件处理程序是声明式的？
- en: Any event handler function is declarative
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何事件处理程序函数都是声明式的
- en: React event handlers are declared as part of the component JSX
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React事件处理程序被声明为组件JSX的一部分
- en: React event handlers aren't declarative
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React事件处理程序不是声明式的
- en: What's a common use of higher-order event handler functions?
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高阶事件处理程序函数的常见用途是什么？
- en: When you have several components that handle the same event, you can use a higher-order
    function to bind the ID of the item being clicked to the handler function
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你有几个处理相同事件的组件时，你可以使用高阶函数将被点击的项目的ID绑定到处理程序函数
- en: Higher-order functions should be used wherever possible as React event handler
    functions
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该尽可能使用高阶函数作为React事件处理程序函数
- en: When you're not sure what data you'll need in the event handler, higher-order
    functions allow you to pass whatever you need
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你不确定事件处理程序需要什么数据时，高阶函数允许你传递任何你需要的东西
- en: Can you pass inline functions to event properties?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能把内联函数传递给事件属性吗？
- en: Yes. This is preferable when event handlers are simple one-liners.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的。当事件处理程序是简单的一行代码时，这是首选。
- en: No. You should always declare event handler functions as methods or bound functions.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不。你应该总是将事件处理程序函数声明为方法或绑定函数。
- en: Why does React use pools of event instances instead of creating new instances
    with each event?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么React使用事件实例池而不是在每个事件中创建新实例？
- en: React doesn't use event pools
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React不使用事件池
- en: Because if it didn't, you would run out of memory eventually because these objects
    are never deleted
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不这样做，最终会耗尽内存，因为这些对象永远不会被删除
- en: To avoid invoking the garbage collector to delete unused event instances when
    lots of events are fired in a small amount of time
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了避免在短时间内触发大量事件时调用垃圾收集器来删除未使用的事件实例
- en: Further reading
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Visit the following link for more information:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下链接以获取更多信息：
- en: '[https://reactjs.org/docs/handling-events.html](https://reactjs.org/docs/handling-events.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/handling-events.html](https://reactjs.org/docs/handling-events.html)'
