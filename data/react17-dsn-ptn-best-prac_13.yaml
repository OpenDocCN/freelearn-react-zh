- en: Improving the Performance of Your Applications
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 改善应用程序的性能
- en: The effective performance of a web application is critical to providing a good
    user experience and improving conversions. The React library implements different
    techniques to render our components fast and to touch the **Document Object Model**
    (**DOM**) as little as possible. Applying changes to the DOM is usually expensive,
    and so minimizing the number of operations is crucial.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序的有效性能对于提供良好的用户体验和提高转化率至关重要。React库实现了不同的技术来快速渲染我们的组件，并尽可能少地触及**文档对象模型**（**DOM**）。对DOM进行更改通常是昂贵的，因此最小化操作的数量至关重要。
- en: However, there are some particular scenarios where React cannot optimize the
    process, and it's up to the developer to implement specific solutions to make
    the application run smoothly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些特定的情景，React 无法优化这个过程，开发人员需要实现特定的解决方案来使应用程序顺利运行。
- en: In this chapter, we will go through the basic concepts of React and we will
    learn how to use some APIs to help the library find the optimal path to update
    the DOM without degrading the user experience. We will also see some common mistakes
    that can harm our applications and make them slower.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍React的基本概念，并学习如何使用一些API来帮助库找到更新DOM的最佳路径，而不会降低用户体验。我们还将看到一些常见的错误，这些错误可能会损害我们的应用程序并使其变慢。
- en: We should avoid optimizing our components for the sake of it, and it is important
    to apply the techniques that we will see in the following sections only when they
    are needed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该避免仅仅为了优化而优化我们的组件，并且重要的是只在需要时应用我们将在接下来的章节中看到的技术。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How reconciliation works and how we can help React do a better job using the
    keys
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协调的工作原理以及我们如何帮助React使用键更好地完成工作
- en: Common optimization techniques and common performance-related mistakes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的优化技术和常见的与性能相关的错误
- en: What it means to use immutable data and how to do it
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不可变数据的含义以及如何做到这一点
- en: Useful tools and libraries to make our applications run faster
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用的工具和库，使我们的应用程序运行更快
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete this chapter, you will require the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，您将需要以下内容：
- en: Node.js 12+
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: Visual Studio Code
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: You can find the code for this chapter in the book's GitHub Repository at [https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter10).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在书的GitHub存储库中找到本章的代码[https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter10)。
- en: Reconciliation
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协调
- en: Most of the time, React is fast enough by default, and you do not need to do
    anything more to improve the performance of your application. React utilizes different
    techniques to optimize the rendering of the components on the screen.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，React 默认情况下足够快，您无需做任何其他事情来提高应用程序的性能。React 利用不同的技术来优化屏幕上组件的渲染。
- en: When React has to display a component, it calls its `render` method  and the
    `render` methods of its children recursively. The `render` method of a component
    returns a tree of React elements, which React uses to decide which DOM operations
    have to be done to update the UI.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当React需要显示一个组件时，它会调用其`render`方法以及其子组件的`render`方法。组件的`render`方法返回一棵React元素树，React使用它来决定更新UI时必须执行哪些DOM操作。
- en: Whenever the component state changes, React calls the `render` method on the
    nodes again, and it compares the result with the previous tree of React elements.
    The library is smart enough to figure out the minimum set of operations required
    to apply the expected changes on the screen. This process is called  **reconciliation,**  and
    it is managed transparently by React. Thanks to that, we can easily describe how
    our components have to look at a given point in time in a declarative way and
    let the library do the rest.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每当组件状态发生变化时，React都会再次调用节点上的`render`方法，并将结果与React元素的先前树进行比较。该库足够聪明，可以找出在屏幕上应用期望的变化所需的最小操作集。这个过程称为**协调**，由React透明地管理。由于这一点，我们可以轻松地以声明方式描述我们的组件在特定时间点应该是什么样子，然后让库来处理其余部分。
- en: React tries to apply the smallest possible number of operations on the DOM because
    touching the DOM is an expensive operation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: React试图在DOM上应用尽可能少的操作，因为触及DOM是一项昂贵的操作。
- en: 'However, comparing two trees of elements is not free either, and React makes
    two assumptions to reduce its complexity:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，比较两个元素树也不是免费的，React做出了两个假设来减少其复杂性：
- en: If two elements have a different type, they render a different tree.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个元素具有不同的类型，它们将呈现不同的树。
- en: Developers can use keys to mark children as stable across different render calls.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者可以使用键来标记子元素在不同的渲染调用中保持稳定。
- en: The second point is interesting from a developer's perspective because it gives
    us a tool to help React render our views faster.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第二点对开发者来说很有趣，因为它给了我们一个工具来帮助React更快地渲染我们的视图。
- en: By default, when coming back to the children of a DOM node, both lists of children
    are iterated by React at the same time, and whenever there is a difference, it
    creates a mutation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当返回到DOM节点的子元素时，React同时迭代两个子元素列表，每当有差异时，就会创建一个变化。
- en: 'Let''s look at some examples. Converting between the following two trees will
    work well when adding an element at the end of the children:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些例子。在将以下两个树之间进行转换时，在子元素末尾添加一个元素将会很好地工作：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The two `<li>Carlos</li>` trees match the two `<li>Javier</li>` trees by React
    and then it will insert the `<li>Emmanuel</li>` tree.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 两个`<li>Carlos</li>`树与两个`<li>Javier</li>`树匹配，然后它将插入`<li>Emmanuel</li>`树。
- en: 'Inserting an element at the beginning produces an inferior performance if implemented
    naively. If we look at the example, it works very poorly when converting between
    these two trees:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实现得不够聪明，将元素插入开头会导致性能下降。如果我们看一下示例，当在这两个树之间进行转换时，它的效果非常差：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Every child will be mutated by React, instead of it realizing that it can keep
    the subtrees line, `<li>Carlos</li>` and `<li>Javier</li>`, intact. This can possibly
    be an issue. This problem can, of course, be solved and the way for this is the
    `key` attribute that is supported by React. Let's look at that next.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个子元素都会被React改变，而不是意识到它可以保持子树的连续性，`<li>Carlos</li>`和`<li>Javier</li>`。这可能会成为一个问题。当然，这个问题可以解决，解决方法就是React支持的`key`属性。让我们接着看。
- en: Keys
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 键
- en: 'Children possess keys and these keys are used by React to match children between
    the subsequent tree and the original tree. The tree conversion can be made efficient
    by adding a key to our previous example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 子元素拥有键，这些键被React用来匹配后续树和原始树之间的子元素。通过在我们之前的示例中添加一个键，可以使树的转换更加高效：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: React now knows that the `2017` key is the new one and that the `2018` and `2019`
    keys have just moved.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在React知道`2017`键是新的，而`2018`和`2019`键只是移动了。
- en: 'Finding a key is not hard. The element that you will be displaying might already
    have a unique ID. So the key can just come from your data:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 找到一个键并不难。您将要显示的元素可能已经有一个唯一的ID。所以键可以直接来自您的数据：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A new ID can be added to your model by you, or the key can be generated by some
    parts of the content. The key has to only be unique among its siblings; it does
    not have to be unique globally. An item index in the array can be passed as a
    key, but it is now considered a bad practice. However, if the items are never
    recorded, this can work well. The reorders will seriously affect performance.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 新的ID可以由您添加到您的模型中，或者密钥可以由内容的某些部分生成。密钥只需在其同级中是唯一的；它不必在全局范围内是唯一的。数组中的项目索引可以作为密钥传递，但现在被认为是一种不好的做法。然而，如果项目从未被记录，这可能效果很好。重新排序将严重影响性能。
- en: 'If you are rendering multiple items using a `map` function and you don''t specify
    the key property, you will get this message: Warning: Each child in an array or
    iterator should have a unique "key" prop.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`map`函数渲染多个项目，并且没有指定key属性，您将收到此消息：警告：数组或迭代器中的每个子项都应该有一个唯一的“key”属性。
- en: Let's learn some optimization techniques in our next section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中学习一些优化技术。
- en: Optimization techniques
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化技术
- en: It is important to notice that, in all the examples in this book, we are using
    apps that have either been created with  `create-react-app`  or have been created
    from scratch, but always with the development version of React.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，在本书中的所有示例中，我们使用的应用程序要么是使用`create-react-app`创建的，要么是从头开始创建的，但始终使用的是React的开发版本。
- en: Using the development version of React is very useful for coding and debugging
    as it gives you all the necessary information to  fix  the various issues. However,
    all the checks and warnings come with a cost, which we want to avoid in production.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React的开发版本对编码和调试非常有用，因为它为您提供了修复各种问题所需的所有必要信息。然而，所有的检查和警告都是有成本的，我们希望在生产中避免这些成本。
- en: 'So, the very first optimization that we should do to our  applications  is
    to build the bundle, setting the  `NODE_ENV`  environment variable to  `production`.
    This is pretty easy with  `webpack`, and it is just a matter of using  `DefinePlugin`  in
    the following way:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们应该对我们的应用程序做的第一个优化是构建捆绑包，将`NODE_ENV`环境变量设置为`production`。这在`webpack`中非常容易，只需使用以下方式中的`DefinePlugin`：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To achieve the best performance, we not only want to create the bundle with
    the production flag activated, but we also want to split our bundles, one for
    our application and one for `node_modules`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现最佳性能，我们不仅希望使用生产标志来创建捆绑包，还希望将捆绑包拆分为一个用于我们的应用程序，一个用于`node_modules`。
- en: 'To do so, you need to use the new optimization node in `webpack`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，您需要在`webpack`中使用新的优化节点：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Since webpack 4 has two modes, *development* and *production*, by default,
    production mode is enabled, meaning the code will be minified and compressed when
    you compile your bundles using the production mode; you can specify it with the
    following code block:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于webpack 4有两种模式，*开发*和*生产*，默认情况下启用生产模式，这意味着在使用生产模式编译捆绑包时，代码将被最小化和压缩；您可以使用以下代码块指定它：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Your `webpack.config.ts` file should look like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`webpack.config.ts`文件应该如下所示：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this webpack configuration, we are going to get very optimized bundles,
    one for our vendors and one for the actual application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个webpack配置，我们将得到非常优化的捆绑包，一个用于我们的供应商，一个用于实际应用程序。
- en: Tools and libraries
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具和库
- en: In the next section, we will go through a number of techniques, tools, and libraries
    that we can apply to our code base to monitor and improve performance.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍一些技术、工具和库，我们可以应用到我们的代码库中，以监视和改进性能。
- en: Immutability
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可变性
- en: The new React Hooks, such as `React.memo`, use a shallow comparison method against
    the props, which means that if we pass an object as a prop and we mutate one of
    its values, we do not get the expected behavior.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 新的React Hooks，如React.memo，使用浅比较方法来比较props，这意味着如果我们将对象作为prop传递，并且我们改变了其中一个值，我们将无法获得预期的行为。
- en: In fact, a shallow comparison cannot find mutation on the properties and the
    components never get re-rendered, except when the object itself changes. One way
    to solve this issue is by using  **immutable data**, data that, once it gets created,
    cannot be mutated.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，浅比较无法找到属性的变化，组件永远不会重新渲染，除非对象本身发生变化。解决此问题的一种方法是使用**不可变数据**，一旦创建，就无法改变。
- en: 'For example, we  can  set the state in the following mode:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以以以下方式设置状态：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Even if the value of the `foo`  attribute of the object is changed, the reference
    to the object is still the same and the shallow comparison does not recognize
    it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 即使更改对象的foo属性的值，对象的引用仍然相同，浅比较无法识别它。
- en: 'What we can do instead is create a new instance every time we mutate the object,
    as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的是每次改变对象时创建一个新实例，如下所示：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this case, we get a new object with the  `foo` property set to  `bar`, and
    the shallow comparison will be able to find the difference. With ES6 and  Babel,
    there is another way to express the same concept in a more elegant way, and it
    is by using the object spread operator:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们得到一个新对象，其foo属性设置为bar，并且浅比较将能够找到差异。使用ES6和Babel，还有另一种更优雅地表达相同概念的方法，即使用对象扩展运算符：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This structure is more concise than the previous one, and it produces the same
    result, but, at the time of writing, it requires the code to be transpiled in
    order to be executed inside the browser.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构比以前的更简洁，并且产生相同的结果，但在撰写时，需要对代码进行转译才能在浏览器中执行。
- en: React provides some immutability helpers to make it easy to work with immutable
    objects, and there is also a popular library called  `immutable.js`, which has
    more powerful features, but it requires you to learn new APIs.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: React提供了一些不可变性帮助器，使得使用不可变对象变得更加容易，还有一个名为immutable.js的流行库，它具有更强大的功能，但需要您学习新的API。
- en: Babel plugins
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Babel插件
- en: There are also a couple of interesting **B****abel** plugins that we can install
    and use to improve the performance of our React applications. They make the applications
    faster, optimizing parts of the code at build time.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些有趣的Babel插件，我们可以安装并使用它们来提高React应用程序的性能。它们使应用程序更快，优化了构建时的代码部分。
- en: The first one is the  React constant elements transformer, which finds all the
    static elements that do not change depending on the props and  extracts  them
    from `render` (or the functional components) to avoid calling  `_jsx`  unnecessarily.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是React常量元素转换器，它查找所有不根据props更改的静态元素，并从render（或功能组件）中提取它们，以避免不必要地调用_jsx。
- en: 'Using a Babel plugin is pretty straightforward. We first install it with  `npm`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Babel插件非常简单。我们首先使用npm安装它：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You need to create the `.babelrc`  file and add a  `plugins`  key with an array
    that has a value of the list of plugins that we want to activate:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要创建.babelrc文件，并添加一个plugins键，其值为我们要激活的插件列表的数组：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The second Babel plugin that we  can  choose to use to improve performance is
    the  React inline elements transform, which replaces all the JSX declarations
    (or the  `_jsx`  calls) with a more optimized version of them to make execution
    faster.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个Babel插件，我们可以选择使用以提高性能的是React内联元素转换，它用更优化的版本替换所有JSX声明（或_jsx调用），以加快执行速度。
- en: 'Install the plugin using the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装插件：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, you can easily add the plugin to the array of plugins in the `.babelrc`
    file, as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以轻松地将插件添加到`.babelrc`文件中插件数组中，如下所示：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Both plugins should be used only in production because they make debugging harder
    in development mode. So far, we have learned a lot of optimization techniques
    and how to configure some plugins using webpack.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个插件应该只在生产环境中使用，因为它们会使在开发模式下调试变得更加困难。到目前为止，我们已经学会了许多优化技术，以及如何使用webpack配置一些插件。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Our journey through performance is finished, and we can now optimize our applications
    to give users a better UX.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的性能优化之旅已经结束，现在我们可以优化我们的应用程序，以提供更好的用户体验。
- en: In this chapter, we learned how the reconciliation algorithm works and how React
    always tries to take the shortest path to apply changes to the DOM. We can also
    help the library to optimize its job by using the keys. Once you've found your
    bottlenecks, you can apply  one of  the techniques we have seen in this chapter
    to fix the issue.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了协调算法的工作原理，以及React始终试图采用最短的路径来对DOM进行更改。我们还可以通过使用键来帮助库优化其工作。一旦找到了瓶颈，你可以应用本章中所见的技术之一来解决问题。
- en: We have learned how refactoring and designing the structure of your components
    in the proper way could provide a performance boost. Our goal is to have small
    components that do one single thing in the best possible way. At the end of the
    chapter, we talked about immutability, and we've seen why it's important not to
    mutate data to make  `React.memo`  and `shallowCompare`  do their job. Finally,
    we ran through different tools and libraries that can make your applications faster.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何重构和设计组件的结构，以正确的方式提供性能提升。我们的目标是拥有小的组件，以最佳方式执行单一功能。在本章末尾，我们谈到了不可变性，以及为什么重要的是不要改变数据，以使`React.memo`和`shallowCompare`发挥作用。最后，我们介绍了不同的工具和库，可以使您的应用程序更快。
- en: In the next chapter, we'll look at testing and debugging using Jest, React Testing
    Library, and React DevTools.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习使用Jest、React Testing Library和React DevTools进行测试和调试。
