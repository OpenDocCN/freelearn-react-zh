- en: Building and Deploying React Applications with Docker Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker容器构建和部署React应用程序
- en: 'Up until this point in the book, you''ve been running your React applications
    in development mode, using the various tools that you''ve been learning. In this
    chapter, we''ll switch our focus to production environment tooling. The overall
    aim is to be able to deploy your React application to a production environment.
    Thankfully, there''s much tooling to help with this work, which you''ll familiarize
    yourself with in this chapter. Your goals in this chapter are:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，你一直在使用各种工具以开发模式运行你的React应用程序。在本章中，我们将把重点转向生产环境工具。总体目标是能够将你的React应用程序部署到生产环境中。幸运的是，有很多工具可以帮助你完成这项工作，在本章中你将熟悉这些工具。本章的目标是：
- en: Building a basic messaging React app that utilizes an API
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个基本的消息React应用，利用API
- en: Using a Node container to run your React application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node容器来运行你的React应用
- en: Splitting your app into deployable services that run in containers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的应用程序拆分为可部署的容器中运行的服务
- en: Using static React builds for production environments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产环境中使用静态React构建
- en: Building a messaging app
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个消息应用
- en: It's difficult to talk about tooling used to deploy React applications without
    any context. For this, you'll throw together a basic messaging app. In this section,
    you'll see how the app works and how it is built. Then, you'll be ready for the
    remaining chapter sections where you'll learn how to deploy your application as
    a set of containers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有任何上下文的情况下讨论用于部署React应用程序的工具是困难的。为此，你将组合一个基本的消息应用。在本节中，你将看到应用程序的工作原理和构建方式。然后，你将准备好进行剩余章节的学习，学习如何将你的应用程序部署为一组容器。
- en: The basic idea of this app is to be able to login and send messages to your
    contacts, as well as receiving messages. We'll keep it super simple. In terms
    of functionality, it'll barely match SMS capabilities. In fact, that can be the
    app title—*Barely SMS*. The idea is to have a React application with enough moving
    parts to test out in a production setting, as well as a server that you'll be
    able to deploy in a container later on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用的基本思想是能够登录并向你的联系人发送消息，同时也能接收消息。我们会保持它非常简单。在功能上，它几乎可以匹配短信的功能。事实上，这可以是应用的标题——*Barely
    SMS*。这个想法是有一个React应用程序，有足够多的活动部分可以在生产环境中测试，以及一个稍后可以部署在容器中的服务器。
- en: For visual appearance, we'll use the Material-UI ([https://material-ui-next.com/](https://material-ui-next.com/))
    component library. However, the choice of UI components should not affect the
    lessons of this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了视觉效果，我们将使用Material-UI（[https://material-ui-next.com/](https://material-ui-next.com/)）组件库。然而，UI组件的选择不应影响本章的教训。
- en: Starting Barely SMS
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动Barely SMS
- en: 'To get familiar with *Barely SMS*, let''s start it up in your terminal the
    same way you''ve been doing all along in this book so far. Once you change into
    the `building-a-messaging-app` directory in the source code bundle that comes
    with this book, you can start the development server just like any other `create-react-app`
    project:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了熟悉*Barely SMS*，让我们在终端中以与本书中一直以来一样的方式启动它。一旦你切换到本书附带的源代码包中的`building-a-messaging-app`目录中，你可以像任何其他`create-react-app`项目一样启动开发服务器：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In another Terminal window or tab, you can start the API server for *Barely
    SMS* by running the following command from within the same directory:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个终端窗口或选项卡中，你可以通过在同一目录中运行以下命令来启动*Barely SMS*的API服务器：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will start a basic Express ([http://expressjs.com/](http://expressjs.com/))
    app. Once the server is up and listening for requests, you should see the following
    output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个基本的Express（[http://expressjs.com/](http://expressjs.com/)）应用。一旦服务器启动并监听请求，你应该看到以下输出：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now you're ready to login.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好登录了。
- en: Logging in
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录
- en: 'When you first load the UI, you should see the login screen that looks like
    this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次加载UI时，您应该看到这样的登录屏幕：
- en: '![](Images/ec33f5d6-91f8-4260-a34d-844e97afd21a.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ec33f5d6-91f8-4260-a34d-844e97afd21a.png)'
- en: 'The following mock users exist as part of the API:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模拟用户作为API的一部分存在：
- en: '`user1`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user1`'
- en: '`user2`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user2`'
- en: '`user3`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user3`'
- en: '`user4`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user4`'
- en: '`user5`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user5`'
- en: 'The password isn''t actually validated against anything, so leaving it blank
    or entering gibberish should authenticate any of the preceding users. Let''s take
    a look at the `Login` component that renders this page:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，密码并没有被验证，所以留空或输入胡言乱语都应该验证之前的任何用户。让我们来看一下呈现此页面的“登录”组件：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There's a lot of Material-UI going on here, but feel free to ignore the majority
    of it. The important bit is the `login()` function that's imported from the `api`
    module. This is used to make a call to the `/api/login` endpoint. The reason this
    is relevant from the perspective of production React deployment is because this
    is an interaction with a service that might be deployed as its own container.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多Material-UI，但可以忽略大部分。重要的是从`api`模块导入的`login()`函数。这用于调用`/api/login`端点。从生产React部署的角度来看，这是相关的，因为这是与可能部署为自己的容器的服务进行交互。
- en: The home page
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主页
- en: 'If you were able to login successfully, you''ll be taken to the home page of
    the app. You should see a page that looks like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能成功登录，您将被带到应用程序的主页。您应该看到一个看起来像这样的页面：
- en: '![](Images/78c26332-ca7d-4f7f-881f-217225d77bd4.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/78c26332-ca7d-4f7f-881f-217225d77bd4.png)'
- en: 'The home page of *Barely SMS* shows the user''s contacts who are currently
    online. In this case, there are clearly no other users online yet. Let''s take
    a look at the `Home` component source now:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*Barely SMS*的主页显示了当前在线的用户联系人。在这种情况下，显然还没有其他用户在线。现在让我们来看一下“主页”组件的源代码：'
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the `componentWillMount()` life cycle method, the contacts API endpoint is
    fetched using the `getContacts()` function. This is then repeated using an interval
    so that as your contacts login, they'll show up here. When the component is unmounted,
    the interval is cleared.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在`componentWillMount()`生命周期方法中，使用`getContacts()`函数获取联系人API端点。然后使用间隔重复此操作，以便当您的联系人登录时，它们会显示在这里。当组件被卸载时，间隔被清除。
- en: 'To test this, I''m going to open up Firefox (it doesn''t actually matter which
    browser you use, as long as it''s something different from where you''re signed
    in as `user1`). From here, I can sign in as `user2`, which is a contact of `user1`
    and vice versa:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这一点，我将打开Firefox（实际上使用哪个浏览器并不重要，只要它与您登录为`user1`的地方不同）。从这里，我可以登录为`user2`，这是`user1`的联系人，反之亦然：
- en: '![](Images/d501457c-2f04-4794-a963-3096931a1049.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d501457c-2f04-4794-a963-3096931a1049.png)'
- en: 'As soon as I login here, I see that User 1 is online in another browser:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在这里第一次登录时，我看到用户1在另一个浏览器上线了：
- en: '![](Images/ba043e19-7741-4420-bafb-285a5ef83fe1.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ba043e19-7741-4420-bafb-285a5ef83fe1.png)'
- en: 'Now if I return to Chrome where I logged in as User 1, I should see that my
    User 2 contact has signed in:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我回到在Chrome中登录为用户1的地方，我应该看到我的用户2联系人已经登录：
- en: '![](Images/0601e247-9a9b-4618-b9e5-65bdb8116db9.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0601e247-9a9b-4618-b9e5-65bdb8116db9.png)'
- en: This app will follow a similar refresh pattern on other pages—an interval is
    used to fetch data from the API service endpoint.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序将在其他页面上遵循类似的刷新模式——使用间隔从API服务端点获取数据。
- en: The contacts page
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系人页面
- en: 'If you want to view all of your contacts and not just those which are currently
    online, you have to go to the contacts page. To get there, you have to expand
    the navigation menu by clicking on the hamburger button to the left of the title:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看所有联系人，而不仅仅是当前在线的联系人，您必须转到联系人页面。要到达那里，您必须通过单击标题左侧的汉堡按钮展开导航菜单：
- en: '![](Images/486fc220-77b9-4373-8e04-54f73ad9299a.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/486fc220-77b9-4373-8e04-54f73ad9299a.png)'
- en: 'When you click on the Contacts link, you''re taken to the contacts page which
    looks like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击联系人链接时，您将进入看起来像这样的联系人页面：
- en: '![](Images/3a72390a-a867-4bdd-8c65-e60d836db914.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3a72390a-a867-4bdd-8c65-e60d836db914.png)'
- en: 'This page is very similar to the home page except that it shows all contacts.
    You can send a message to any user, not just those that are currently online.
    Let''s take a look at the `Contacts` component:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面与主页非常相似，只是显示了所有联系人。您可以向任何用户发送消息，而不仅仅是当前在线的用户。让我们来看看`Contacts`组件：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Like the `Home` component, `Contacts` uses the interval pattern to refresh contacts.
    For example, in the future if you wanted to add an enhancement to this page that
    visually indicated which users were online, you would need to have fresh data
    from your services.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 像“主页”组件一样，“联系人”使用间隔模式来刷新联系人。例如，将来如果您想要在此页面上添加一个增强功能，以直观地指示哪些用户在线，您将需要从服务中获取最新数据。
- en: The messages page
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息页面
- en: 'If you expand the navigation menu and visit the messages page, you''ll see
    something like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您展开导航菜单并访问消息页面，您会看到类似于这样的内容：
- en: '![](Images/f0d2b42c-32ae-449d-8ea0-7519231f9f04.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f0d2b42c-32ae-449d-8ea0-7519231f9f04.png)'
- en: 'There are no messages yet. Let''s take a look at the `Messages` component before
    sending a message:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 还没有消息。在发送消息之前，让我们看看`Messages`组件：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once again, the same pattern of refreshing data using an interval is in place
    here. When the user clicks on one of the messages, they're taken to the message
    details page where they can read the message content.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这里也使用了刷新数据的间隔模式。当用户点击其中一条消息时，他们将被带到消息详情页面，可以阅读消息内容。
- en: Sending a message
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送消息
- en: 'Let''s go back to the other browser (Firefox in my case) where you logged in
    as User 2. Click on the little message icon beside User 1:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到另一个浏览器（在我这里是Firefox），您以User 2身份登录。点击User 1旁边的小消息图标：
- en: '![](Images/29613984-ecaa-4e82-832f-c4d3753bdbf9.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/29613984-ecaa-4e82-832f-c4d3753bdbf9.png)'
- en: 'This will bring you to the new message page:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带您到新消息页面：
- en: '![](Images/cad052ae-c842-4543-ab99-7428c3113bc9.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cad052ae-c842-4543-ab99-7428c3113bc9.png)'
- en: 'Go ahead and type a message, and hit SEND. Then, go back to Chrome where you''re
    logged in as User 1. You should see a new message appear on the messages page
    from User 2:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 继续输入消息，然后点击发送。然后，回到Chrome，您以User 1身份登录。您应该会在消息页面上看到来自User 2的新消息：
- en: '![](Images/269d214d-bbe1-4559-a06d-5b29486a596c.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/269d214d-bbe1-4559-a06d-5b29486a596c.png)'
- en: 'And if you click on the message, you should be able to read the message content:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击消息，您应该能够阅读消息内容：
- en: '![](Images/15d3bd2d-4a92-4ab9-b7a5-90aff7597e65.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/15d3bd2d-4a92-4ab9-b7a5-90aff7597e65.png)'
- en: 'From here, you can click on the REPLY button to take you to the new message
    page, which will be addressed to User 2 or you can delete the message. Before
    we look at the API code, let''s take a look at the `NewMessage` component:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以点击“回复”按钮，带您到新消息页面，该页面将发送给User 2，或者您可以删除消息。在我们查看API代码之前，让我们看看`NewMessage`组件：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, the `postMessage()` API function is used to send the message using the
    API service. Now let''s look at the `MessageDetails` component:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，使用`postMessage()` API函数来使用API服务发送消息。现在让我们看看`MessageDetails`组件：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, the `getMessage()` API function is used to load the message content. Note
    that neither of these components use the same refresh pattern that other components
    have been using because the information never changes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，使用`getMessage()` API函数来加载消息内容。请注意，这两个组件都没有使用其他组件一直在使用的刷新模式，因为信息从不改变。
- en: The API
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API
- en: The API is the service that your React app interacts with in order to retrieve
    and manipulate data. When thinking about deploying production React applications,
    it's important to use the API as abstraction that not only represents one service,
    but potentially several microservices that your application interacts with.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: API是您的React应用与之交互以检索和操作数据的服务。在考虑部署生产React应用程序时，重要的是使用API作为抽象，它不仅代表一个服务，还可能代表应用程序与之交互的多个微服务。
- en: 'With that said, let''s look at the API functions that are used by your React
    components that make up *Barely SMS*:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这里，让我们来看看您的React组件使用的API函数，这些组件组成了*Barely SMS*：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'These simple abstractions use `fetch()` to make HTTP requests to the API services.
    Right now, there''s only one API service running as a single process that has
    mock user data and all changes happen in memory only—nothing is persisted:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些简单的抽象使用`fetch()`来向API服务发出HTTP请求。目前，只有一个API服务作为单个进程运行，其中包含模拟用户数据，并且所有更改仅在内存中发生，不会持久保存：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is an Express app that keeps app data in simple JavaScript objects and
    arrays. While everything happens within this one service now, that might not always
    be the case. Some of these API calls might live in different services. This is
    what makes deploying to containers so powerful—you can abstract complex deployments
    at a high level.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个Express应用程序，它将应用程序数据保存在简单的JavaScript对象和数组中。虽然现在所有事情都发生在这一个服务中，但情况可能并非总是如此。其中一些API调用可能存在于不同的服务中。这就是将部署到容器如此强大的原因——您可以在高级别上抽象复杂的部署。
- en: Getting started with Node containers
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Node容器
- en: Let's start things off by running the *Barely SMS* React dev server within a
    Node.js Docker image. Note that this is not part of the production deployment.
    This is just a starting point for you to get familiar with deploying Docker containers.
    As we progress through the remaining sections in this chapter, you'll move steadily
    toward a production-level deployment.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先通过在Node.js Docker镜像中运行*Barely SMS* React开发服务器来开始。请注意，这不是生产部署的一部分。这只是一个起点，让您熟悉部署Docker容器。随着本章剩余部分的进行，您将逐渐向生产级部署迈进。
- en: 'The first step to getting your React application into a container is creating
    a `Dockerfile`. If you don''t have Docker installed on your system already, find
    it here along with installation instructions: [https://www.docker.com/community-edition](https://www.docker.com/community-edition).
    If you open up a terminal and change into the `getting-started-with-containers`
    directory, you''ll see a file called `Dockerfile`. Here''s what it looks like:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将React应用程序放入容器的第一步是创建一个`Dockerfile`。如果您的系统尚未安装Docker，请在此处找到安装说明：[https://www.docker.com/community-edition](https://www.docker.com/community-edition)。如果您打开终端并切换到`getting-started-with-containers`目录，您将看到一个名为`Dockerfile`的文件。它看起来是这样的：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is the file that''s used to build an image. An image is like a template
    for the container process that runs your React application. Essentially, these
    lines do the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于构建镜像的文件。镜像就像是运行React应用程序的容器进程的模板。基本上，这些行执行以下操作：
- en: '`FROM node:alpine`: What''s the base image that this image uses. This is a
    small version of Linux with Node.js on it.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FROM node:alpine`：这个镜像使用的基础镜像是什么。这是一个带有Node.js的小型Linux版本。'
- en: '`WORKDIR /usr/src/app`: Changes the working directory on the container.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WORKDIR /usr/src/app`：更改容器上的工作目录。'
- en: '`COPY package*.json ./`: Copies `package.json` and `package-lock.json` to the
    container.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COPY package*.json ./`：将`package.json`和`package-lock.json`复制到容器中。'
- en: '`RUN npm install`: Installs npm package dependencies on the container.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RUN npm install`：在容器上安装npm包依赖项。'
- en: '`COPY . .`: Copies the source code of your app to the container.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COPY . .`：将您的应用程序的源代码复制到容器中。'
- en: '`EXPOSE 3000`: Exposes port `3000` when the container is running.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXPOSE 3000`：在容器运行时暴露端口`3000`。'
- en: '`CMD [ "npm", "start" ]`: Runs `npm start` when the container starts.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMD [ "npm", "start" ]`：容器启动时运行`npm start`。'
- en: 'The next file that you''ll want to add is a `.dockerignore` file. This file
    lists everything that you don''t want included on the image by the `COPY` command.
    Here''s what it looks like:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要添加的文件是`.dockerignore`文件。此文件列出了您不希望通过`COPY`命令包含在镜像中的所有内容。它看起来像这样：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It's important that you don't copy over `npm_modules` that you might have installed
    on your system because the `npm install` command will install them again and you'll
    have two copies of your libs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，您不要复制您在系统上安装的`npm_modules`，因为`npm install`命令将再次安装它们，您将拥有两份库的副本。
- en: 'Before you build the Docker image that you can deploy, there are a couple of
    minor changes to make. First, you need to figure out what your IP address is so
    that you can use it to communicate with the API server. You can find it by running
    `ifconfig` in your terminal. Once you have it, you can update the `proxy` value
    in `package.json`. It used to be:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建可以部署的Docker镜像之前，有一些小的更改需要进行。首先，您需要弄清楚您的IP地址，以便您可以用它与API服务器进行通信。您可以通过在终端中运行`ifconfig`来找到它。一旦您找到了它，您可以更新`package.json`中的`proxy`值。以前是这样的：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now it should have an IP address so that your Docker container can reach it
    once it''s running. Here''s what mine looks like:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它应该有一个IP地址，以便您的Docker容器在运行时可以访问它。这是我的现在的样子：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, you''ll want to pass your IP as an argument to the `listen()` method
    in `server.js`. It used to be:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要将您的IP作为参数传递给`server.js`中的`listen()`方法。以前是这样的：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here''s what mine looks like now:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的现在的样子：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now you''re ready to build the Docker image by running the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以通过运行以下命令来构建Docker镜像：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will build an image with the ID `barely-sms-ui` using the `Dockerfile`
    found in the current directory. Once built, you can see the image by running `docker
    images`. The output should look something like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用当前目录中找到的`Dockerfile`构建一个ID为`barely-sms-ui`的镜像。构建完成后，您可以通过运行`docker images`来查看镜像。输出应该类似于这样：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now you''re ready to deploy the container with the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以使用以下命令部署容器：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To cleanup old unused containers, you can run the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要清理旧的未使用的容器，您可以运行以下命令：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `-p 3000:3000` argument ensures that the exposed port, `3000`, on the container
    is mapped to port `3000` on your system. You can test this by opening `http://localhost:3000/`.
    However, you might see an error that looks like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p 3000:3000`参数确保容器上的暴露端口`3000`映射到您系统上的端口`3000`。您可以通过打开`http://localhost:3000/`来测试这一点。但是，您可能会看到类似于这样的错误：'
- en: '![](Images/f345d99f-4de5-4ba7-b55b-b200a24620b7.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f345d99f-4de5-4ba7-b55b-b200a24620b7.png)'
- en: 'And if you look at the container console output, you''ll see something that
    looks like the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看容器控制台输出，您将看到类似以下的内容：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This is because you haven't started the API server yet. You'll actually see
    a similar error if you put an invalid IP address as a proxy address. If you have
    or you need to change the proxy value for whatever reason, you'll have to rebuild
    the image and then restart the container. If you start the API by running `npm
    run api` in another terminal and then reload the UI, everything should work as
    expected.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为您还没有启动API服务器。如果您将无效的IP地址作为代理地址，您实际上会看到类似的错误。如果您需要更改代理值，您将需要重新构建镜像，然后重新启动容器。如果您在另一个终端中运行`npm
    run api`来启动API，然后重新加载UI，一切应该按预期工作。
- en: Composing React apps with services
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用服务构建React应用
- en: The main challenge with the previous section was that you had a user interface
    service self-contained as a running container. The API service, on the other hand,
    was off doing its own thing. The next tool that you'll learn how to use is `docker-compose`.
    As the name suggests, `docker-compose` is how you compose larger applications
    out of smaller services. The next natural step for *Barely SMS* is to use this
    Docker tool to make the API service and to control both services as one application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 前一部分的主要挑战是，你有一个作为运行容器的用户界面服务。另一方面，API服务正在做自己的事情。你将学习如何使用的下一个工具是`docker-compose`。顾名思义，`docker-compose`是用来将较小的服务组合成较大应用程序的工具。*Barely
    SMS*的下一个自然步骤是使用这个Docker工具来制作API服务，并将两个服务作为一个应用程序进行控制。
- en: 'This time, we''ll need two `Dockerfile` files. You can reuse the `Dockerfile`
    from the preceding section—just rename it to `Dockerfile.ui`. Then, create another
    `Dockerfile` that''s nearly identical—call it `Dockerfile.api` and give it the
    following contents:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们需要两个`Dockerfile`文件。你可以重用前面部分的`Dockerfile`，只需将其重命名为`Dockerfile.ui`。然后，创建另一个几乎相同的`Dockerfile`，将其命名为`Dockerfile.api`并给它以下内容：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The two differences are the `EXPOSE` port value and the `CMD` that is run. This
    command starts the API server instead of the React development server.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 两个不同之处是`EXPOSE`端口值和运行的`CMD`。这个命令启动API服务器而不是React开发服务器。
- en: 'Before you build the images, the `server.js` and `package.js` files need minor
    adjustments. In `package.json`, the proxy can simply point to `http://api:3001`.
    In `server.js`, make sure that you''re no longer passing a specific IP address
    to `listen()`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建镜像之前，`server.js`和`package.js`文件需要进行轻微调整。在`package.json`中，代理可以简单地指向`http://api:3001`。在`server.js`中，确保你不再向`listen()`传递特定的IP地址。
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Building the two images requires a slight modification as well because you''re
    no longer using the standard name for the `Dockerfile`. Here''s how to build the
    UI image:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 构建这两个镜像也需要进行轻微修改，因为你不再使用标准的`Dockerfile`名称。以下是构建UI镜像的方法：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, build the API image:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，构建API镜像：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'At this point, you''re ready to create a `docker-compose.yml`. This is how
    you declare what the `docker-compose` tool should do when invoked. Here''s what
    it looks like:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你已经准备好创建一个`docker-compose.yml`。这是你在调用时声明`docker-compose`工具应该做什么的方式。它看起来像这样：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As you can see, this YAML markup is clearly separated into two services. First
    there's the `api` service, which points to the `barely-sms-api` image and maps
    ports accordingly. Then, there's the `ui` service, which does the same thing except
    that it points to the `barely-sms-ui` image and maps to different ports. It also
    links to the API service because you want to make sure that the API service is
    available before the UI is loaded in any browser.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个YAML标记分为两个服务。首先是`api`服务，它指向`barely-sms-api`镜像并相应地映射端口。然后是`ui`服务，它做同样的事情，只是它指向`barely-sms-ui`镜像并映射到不同的端口。它还链接到API服务，因为你希望在任何浏览器中加载UI之前确保API服务可用。
- en: 'To bring the services up, you can run the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动服务，你可以运行以下命令：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You should then see logs from bother services in your console. Then, if you
    visit `http://localhost:3000/`, you should be able to use *Barely SMS* as you
    normally would, except this time, everything is self-contained. From this point
    forward, you're in a better position to grow your application as the requirements
    evolve. As necessary, you can add new services and have your React components
    talk to them like they're all talking to the same application while keeping the
    services modular and self-contained.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您应该在控制台中看到来自两个服务的日志。然后，如果您访问`http://localhost:3000/`，您应该能够像往常一样使用*Barely
    SMS*，只是这一次，一切都是自包含的。从这一点开始，您将更有可能根据需求发展您的应用程序。必要时，您可以添加新的服务，并让您的React组件与它们通信，就像它们都在与同一个应用程序交谈一样，同时保持服务的模块化和自包含性。
- en: Static React builds for production
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产环境的静态React构建
- en: The final step to making *Barely SMS* ready for production deployment is removing
    the React development server from the UI service. The development server was never
    intended for production use because it has many parts that aid developers, but
    ultimately slow down the overall user experience and have no place in a production
    environment.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使*Barely SMS*准备好进行生产部署的最后一步是从UI服务中删除React开发服务器。开发服务器从未被用于生产环境，因为它有许多部分可以帮助开发人员，但最终会减慢整体用户体验，并且在生产环境中没有位置。
- en: 'Instead of using a Node.js based image, you can use a simple NGINX HTTP server
    that serves static content. Since this is a production environment and you don''t
    need a development server that builds UI assets on the fly, you can just use the
    `create-react-app` build script to build your static artifacts for NGINX to serve:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用一个简单的NGINX HTTP服务器来代替基于Node.js的镜像，该服务器提供静态内容。由于这是一个生产环境，您不需要一个能够即时构建UI资产的开发服务器，您可以只使用`create-react-app`构建脚本来构建NGINX要提供的静态构件：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, you can change the `Dockerfile.ui` file so that it looks like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以更改`Dockerfile.ui`文件，使其看起来像这样：
- en: '[PRE29]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This time, the image is basic on an NGINX server that serves static content,
    and we''re passing it a `nginx.conf` file. Here''s what this looks like:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，镜像是基于一个提供静态内容的NGINX服务器，并且我们传递了一个`nginx.conf`文件。这是它的样子：
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here you have a fine-grained level of control over where HTTP requests are sent.
    For example, if the `/api/login` and `/api/logout` endpoints were moved to their
    own service, you could control this change here rather than having to rebuild
    the UI image.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以对HTTP请求发送的位置进行精细级别的控制。例如，如果`/api/login`和`/api/logout`端点被移动到它们自己的服务中，您可以在这里控制这个变化，而不必重新构建UI图像。
- en: 'The last change that''s required to be done is to `docker-compose.yml`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 需要做的最后一个变化是`docker-compose.yml`：
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Did you notice that port `3000` now maps to port `80` in the `ui` service? This
    is because NGINX serves on port `80`. If you run `docker-compose up`, you should
    be able to visit `http://localhost:3000/` and interact with your static build.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否注意到端口`3000`现在映射到`ui`服务中的端口`80`？这是因为NGINX在端口`80`上提供服务。如果您运行`docker-compose
    up`，您应该能够访问`http://localhost:3000/`并与您的静态构建进行交互。
- en: Congratulations! With no more React development server, you're just about as
    ready for production as you can be from a build tool perspective.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！没有了React开发服务器，您几乎可以从构建工具的角度准备好进行生产。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you built a simple messaging app called *Barely SMS*. Then,
    you learned how to deploy this app as a Docker container. Then, you learned how
    to package services together, including the UI service, so that you have a higher
    level of abstraction to work with when deploying applications with many moving
    parts. Lastly, you learned how to build production-ready static assets and serve
    them with an industrial strength HTTP server—NGINX.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您构建了一个名为“Barely SMS”的简单消息应用程序。然后，您学习了如何将此应用程序部署为Docker容器。接着，您学习了如何将服务打包在一起，包括UI服务，这样在部署具有许多移动部分的应用程序时，您就有了更高级的抽象层来处理。最后，您学习了如何构建生产就绪的静态资产，并使用工业级的HTTP服务器NGINX来提供它们。
- en: I hope this has been an enlightening read. It was both a challenge and a joy
    to write. Tooling in web development shouldn't be as difficult as it has been
    over the past decade. Projects like React and browser vendors like Chrome are
    starting to change this trend. I believe that any technology is only as good as
    its tooling. Now that you have a firm handle on tooling available in the React
    ecosystem, put it to good use and let it do the hard work for you.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这是一次启发性的阅读。写作既是挑战，也是快乐。在过去的十年里，Web开发中的工具应该不应该像它一样困难。像React这样的项目和Chrome等浏览器供应商开始改变这一趋势。我相信任何技术都取决于其工具。现在您对React生态系统中可用的工具有了牢固的掌握，将其充分利用，并让它为您做艰苦的工作。
