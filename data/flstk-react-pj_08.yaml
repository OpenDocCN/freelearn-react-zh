- en: Building a Media Streaming Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建媒体流应用程序
- en: Uploading and streaming media content, specifically video content, has been
    a growing part of internet culture for some time now. From individuals sharing
    personal video content to the entertainment industry disseminating commercial
    content on online streaming services, we all rely on web applications that enable
    smooth uploading and streaming. Capabilities within the MERN stack technologies
    can be used to build and integrate these core streaming features into any MERN-based
    web application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 上传和流媒体内容，特别是视频内容，已经成为互联网文化的一个日益增长的部分。从个人分享个人视频内容到娱乐行业在在线流媒体服务上发布商业内容，我们都依赖于能够实现平稳上传和流媒体的网络应用程序。MERN堆栈技术中的功能可以用于构建和集成这些核心流媒体功能到任何基于MERN的Web应用程序中。
- en: 'In this chapter, we will cover the following topics to implement basic media
    uploading and streaming by extending the MERN skeleton application:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将通过扩展MERN骨架应用程序来覆盖以下主题，实现基本的媒体上传和流媒体：
- en: Uploading videos to MongoDB GridFS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将视频上传到MongoDB GridFS
- en: Storing and retrieving media details
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储和检索媒体详情
- en: Streaming from GridFS to a basic media player
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从GridFS流式传输到基本媒体播放器
- en: MERN Mediastream
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MERN Mediastream
- en: 'We will build the MERN Mediastream application by extending the base application.
    It will be a simple video streaming application that allows registered users to
    upload videos that can be streamed by anyone browsing through the application:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过扩展基本应用程序来构建MERN Mediastream应用程序。这将是一个简单的视频流应用程序，允许注册用户上传视频，任何浏览应用程序的人都可以观看：
- en: '![](assets/71c4f48b-a483-4c54-aa63-b515ec8ff080.png)The code for the complete
    MERN Mediastream application is available on GitHub [github.com/shamahoque/mern-mediastream](https://github.com/shamahoque/mern-mediastream). The
    implementations discussed in this chapter can be accessed in the `simple-mediastream-gridfs`
    branch of the same repository. You can clone this code and run the application
    as you go through the code explanations in the rest of this chapter.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/71c4f48b-a483-4c54-aa63-b515ec8ff080.png)完整的MERN Mediastream应用程序的代码可在GitHub上找到[github.com/shamahoque/mern-mediastream](https://github.com/shamahoque/mern-mediastream)。本章讨论的实现可以在同一存储库的`simple-mediastream-gridfs`分支中访问。您可以克隆此代码，并在本章的其余部分中阅读代码解释时运行应用程序。'
- en: 'The views needed for the features related to media upload, editing, and streaming
    in a simple media player will be developed by extending and modifying the existing React
    components in the MERN skeleton application. The component-tree pictured next
    shows all the custom React components that make up the MERN Mediastream frontend
    developed in this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现与媒体上传、编辑和流媒体相关的功能所需的视图，我们将通过扩展和修改MERN骨架应用程序中的现有React组件来开发。下图显示了构成本章中开发的MERN
    Mediastream前端的所有自定义React组件的组件树：
- en: '![](assets/4ff4252c-f5de-4c9d-a967-550090c679eb.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4ff4252c-f5de-4c9d-a967-550090c679eb.jpg)'
- en: Uploading and storing media
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传和存储媒体
- en: Registered users on MERN Mediastream will be able to upload videos from their
    local files to store the video and related details directly on MongoDB using GridFS.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Mediastream上注册的用户将能够从其本地文件上传视频，直接在MongoDB上使用GridFS存储视频和相关详情。
- en: Media model
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体模型
- en: In order to store media details, we will add a Mongoose Schema for the media
    model in `server/models/media.model.js` with fields to record the media title,
    description, genre, number of views, created time, updated time, and reference
    to the user who posted the media.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储媒体详情，我们将在`server/models/media.model.js`中为媒体模型添加一个Mongoose模式，其中包含用于记录媒体标题、描述、流派、观看次数、创建时间、更新时间以及发布媒体的用户的引用字段。
- en: '`mern-mediastream/server/models/media.model.js`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/models/media.model.js`：'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: MongoDB GridFS to store large files
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB GridFS用于存储大文件
- en: In previous chapters, we discussed how files uploaded by users could be stored
    directly in MongoDB as binary data. But this only worked for files smaller than
    16 MB. In order to store larger files in MongoDB, we will need to use GridFS.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们讨论了用户上传的文件可以直接存储在MongoDB中作为二进制数据。但这仅适用于小于16 MB的文件。为了在MongoDB中存储更大的文件，我们需要使用GridFS。
- en: GridFS stores large files in MongoDB by dividing the file into several chunks
    of a maximum of 255 KB each, and then storing each chunk as a separate document.
    When the file has to be retrieved in response to a query to GridFS, the chunks
    are reassembled as needed. This opens up the option to fetch and load only parts
    of the file as required, rather than retrieving the whole file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: GridFS通过将文件分成最大为255 KB的几个块，然后将每个块存储为单独的文档来在MongoDB中存储大文件。当需要响应GridFS查询检索文件时，根据需要重新组装块。这打开了根据需要获取和加载文件的部分而不是检索整个文件的选项。
- en: In the case of storing and retrieving video files for MERN Mediastream, we will
    utilize GridFS to store video files, and also to stream parts of the video depending
    on which part the user skips to and starts playing from.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Mediastream中存储和检索视频文件时，我们将利用GridFS存储视频文件，并根据用户跳转到和开始播放的部分来流式传输视频的部分。
- en: 'We will use the `gridfs-stream` npm module to add GridFS features to our server-side
    code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`gridfs-stream` npm模块将GridFS功能添加到我们的服务器端代码中：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To configure `gridfs-stream` with our database connection, we will use Mongoose
    to link it up as follows.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将`gridfs-stream`与我们的数据库连接配置，我们将使用Mongoose将其链接如下。
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`：'
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `gridfs` object will give access to the GridFS functionalities required
    to store the file when new media is created and to fetch the file when the media
    is to be streamed back to the user.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`gridfs`对象将提供访问GridFS所需的功能，以便在创建新媒体时存储文件，并在需要向用户流回媒体时获取文件。'
- en: Creating a media API
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建媒体API
- en: We will set up a create media API on the Express server that will receive a
    POST request at `'/api/media/new/:userId'` with the multipart body content containing
    the media fields and the uploaded video file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Express服务器上设置一个创建媒体API，该API将在`'/api/media/new/:userId'`接收包含媒体字段和上传的视频文件的多部分内容的POST请求。
- en: Route to create media
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建媒体的路由
- en: In `server/routes/media.routes.js`, we will add the create route, and utilize
    the `userByID` method from the user controller. The `userByID` method processes
    the `:userId` parameter passed in the URL and retrieves the associated user from
    the database.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在`server/routes/media.routes.js`中，我们将添加创建路由，并利用用户控制器中的`userByID`方法。`userByID`方法处理URL中传递的`:userId`参数，并从数据库中检索关联的用户。
- en: '`mern-mediastream/server/routes/media.routes.js`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/routes/media.routes.js`：'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A POST request to the create route will first make sure the user is signed in
    and then initiate the `create` method in the media controller.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对创建路由的POST请求将首先确保用户已登录，然后在媒体控制器中启动`create`方法。
- en: Similar to the user and auth routes, we will have to mount the media routes
    on the Express app in `express.js` as follows.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于用户和认证路由，我们将不得不在`express.js`中将媒体路由挂载到Express应用程序上。
- en: '`mern-mediastream/server/express.js`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/express.js`：'
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Controller method to handle create request
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理创建请求的控制器方法
- en: 'The `create` controller method in the media controller will use the `formidable`
    npm module to parse the multipart request body that will contain the media details
    and video file uploaded by the user:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体控制器中的`create`方法将使用`formidable` npm模块解析包含媒体详细信息和用户上传的视频文件的多部分请求体：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The media fields received in the form data, and parsed with `formidable`, will
    be used to generate a new Media object and saved to the database.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以`formidable`解析的表单数据接收的媒体字段将用于生成新的媒体对象并保存到数据库中。
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`：'
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If there is a file in the request, `formidable` will store it temporarily in
    the filesystem, and we will use the media object's ID to create a `gridfs.writeStream`
    to read the temporary file and write it into MongoDB. This will generate the associated
    chunks and file information documents in MongoDB. When it is time to retrieve
    this file, we will identify it with the media ID.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求中有文件，`formidable`将在文件系统中临时存储它，我们将使用媒体对象的ID创建一个`gridfs.writeStream`来读取临时文件并将其写入MongoDB。这将在MongoDB中生成关联的块和文件信息文档。当需要检索此文件时，我们将使用媒体ID来识别它。
- en: Fetch create API in the view
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中创建API获取
- en: In `api-media.js`, we will add a corresponding method to make a `POST` request
    to the create API by passing the multipart form data from the view.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在`api-media.js`中，我们将添加一个相应的方法，通过传递视图中的多部分表单数据来向创建API发出`POST`请求。
- en: '`mern-mediastream/client/user/api-user.js`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/user/api-user.js`：'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This `create` fetch method will be used when the user submits the new media
    form to upload a new video.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交新的媒体表单以上传新视频时，将使用此`create`获取方法。
- en: New media form view
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新媒体表单视图
- en: A registered user will see a link on the menu to add new media. This link will
    take them to the new media form view and allow them to upload a video file along
    with details of the video.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注册用户将在菜单中看到一个链接，用于添加新媒体。这个链接将带他们到新的媒体表单视图，并允许他们上传视频文件以及视频的详细信息。
- en: Adding media menu button
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加媒体菜单按钮
- en: 'In `client/core/Menu.js`, we will update the existing code that renders the
    My Profile and Signout links to add the Add Media button link:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`client/core/Menu.js`中，我们将更新现有的代码，以添加添加媒体按钮链接的My Profile和Signout链接：
- en: '![](assets/70473631-4b0c-4671-a6d6-5f5ea13228f7.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/70473631-4b0c-4671-a6d6-5f5ea13228f7.png)'
- en: This will only render on the menu if the user is currently signed in.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在用户当前已登录时才会在菜单上呈现。
- en: '`mern-mediastream/client/core/Menu.js/`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/core/Menu.js/`：'
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: React route for NewMedia view
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NewMedia视图的React路由
- en: To take the user to the new media form view when they click the Add Media link,
    we will update the `MainRouter` file to add the `/media/new` React route, which
    will render the `NewMedia` component.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击添加媒体链接时，我们将更新`MainRouter`文件以添加`/media/new` React路由，这将渲染`NewMedia`组件，将用户带到新的媒体表单视图。
- en: '`mern-mediastream/client/MainRouter.js`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/MainRouter.js`：'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As this new media form should only be accessed by a signed-in user, we will
    add it as a `PrivateRoute`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个新的媒体表单只能由已登录用户访问，我们将把它添加为`PrivateRoute`。
- en: NewMedia component
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NewMedia组件
- en: 'In the `NewMedia` component, we will render a form that allows a user to create
    media by entering the title, description, and genre, and uploading a video file
    from their local file system:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在`NewMedia`组件中，我们将渲染一个表单，允许用户输入标题、描述和流派，并从本地文件系统上传视频文件：
- en: '![](assets/88d4481d-4f65-41db-9f97-d32ab8547e5e.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/88d4481d-4f65-41db-9f97-d32ab8547e5e.png)'
- en: We will add the file upload elements using a Material-UI `Button` and an HTML5
    `file input` element.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Material-UI的`Button`和HTML5的`file input`元素添加文件上传元素。
- en: '`mern-mediastream/client/media/NewMedia.js`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/NewMedia.js`：'
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `Title`, `Description`, and `Genre` form fields will be added with `TextField`
    components.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`Title`，`Description`和`Genre`表单字段将添加`TextField`组件。'
- en: '`mern-mediastream/client/media/NewMedia.js`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/NewMedia.js`：'
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These form field changes will be tracked with the `handleChange` method.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表单字段的更改将通过`handleChange`方法进行跟踪。
- en: '`mern-mediastream/client/media/NewMedia.js`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/NewMedia.js`：'
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `handleChange` method updates the state with the new values and populates
    `mediaData`, which is a `FormData` object. The `FormData` API ensures that the
    data to be sent to the server is stored in the correct format needed for the encoding-type
    `multipart/form-data`. This `mediaData` object is initialized in `componentDidMount`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleChange`方法使用新值更新状态并填充`mediaData`，这是一个`FormData`对象。`FormData` API确保要发送到服务器的数据以`multipart/form-data`编码类型所需的正确格式存储。这个`mediaData`对象在`componentDidMount`中初始化。'
- en: '`mern-mediastream/client/media/NewMedia.js`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/NewMedia.js`:'
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Upon form submit, the `create` fetch method is called with the necessary credentials
    and the form data passed as parameters:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单提交时，将使用必要的凭据调用`create` fetch方法，并将表单数据作为参数传递：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: On successful media creation, the user may be redirected to a different view
    as desired, for example, to a Media view with the new media details.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功创建媒体后，用户可以根据需要重定向到不同的视图，例如，到一个带有新媒体详情的媒体视图。
- en: '`mern-mediastream/client/media/NewMedia.js`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/NewMedia.js`:'
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In order to allow users to stream and view this video file stored in MongoDB,
    next we will implement how to retrieve and render the video in the view.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许用户流媒体和查看存储在MongoDB中的视频文件，接下来我们将实现如何在视图中检索和渲染视频。
- en: Retrieve and stream media
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索和流媒体
- en: On the server, we will set up a route to retrieve a single video file, which
    we will then use as a source in a React media player to render the streaming video.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上，我们将设置一个路由来检索单个视频文件，然后将其用作React媒体播放器中的源，以渲染流媒体视频。
- en: Get video API
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取视频API
- en: We will add a route in the media routes to fetch a video when a GET request
    is received at `'/api/medias/video/:mediaId'`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在媒体路由中添加一个路由，以在`'/api/medias/video/:mediaId'`接收到GET请求时获取视频。
- en: '`mern-mediastream/server/routes/media.routes.js`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/routes/media.routes.js`:'
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `:mediaId` parameter in the route URL will be processed in the `mediaByID`
    controller to fetch the associated document from the Media collection and attached
    to the request object, so it may be used in the `video` controller method as required.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 路由URL中的`:mediaId`参数将在`mediaByID`控制器中处理，以从媒体集合中获取关联文档并附加到请求对象中，因此可以根据需要在`video`控制器方法中使用。
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`:'
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `video` controller method in `media.controller.js` will use `gridfs` to
    find the video associated with the `mediaId` in MongoDB. Then, if the matching
    video is found and depending on whether the request contains range headers, the
    response will send back the correct chunks of video with the related content information
    set as response headers.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`media.controller.js`中的`video`控制器方法将使用`gridfs`在MongoDB中查找与`mediaId`关联的视频。然后，如果找到匹配的视频并且取决于请求是否包含范围标头，响应将发送回正确的视频块，并将相关内容信息设置为响应标头。'
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`:'
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 4If the request contains range headers, for example when the user drags to the
    middle of the video and starts playing from that point, we need to convert the
    range headers to start and end positions that will correspond with the correct
    chunks stored using GridFS. Then we will pass these start and end values as a
    range to the gridfs-stream's `createReadStream` method, and also set the response
    headers with additional file details including content length, range, and type.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求包含范围标头，例如当用户拖动到视频中间并从那一点开始播放时，我们需要将范围标头转换为与使用GridFS存储的正确块对应的起始和结束位置。然后，我们将这些起始和结束值作为范围传递给gridfs-stream的`createReadStream`方法，并且还使用附加文件详情设置响应标头，包括内容长度、范围和类型。
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`:'
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The final `readStream` piped to the response can be rendered directly in a basic
    HTML5 media player or a React-flavored media player in the frontend view.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的`readStream`管道传输到响应中可以直接在前端视图中使用基本的HTML5媒体播放器或React风格的媒体播放器进行渲染。
- en: React media player to render the video
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React媒体播放器来呈现视频
- en: 'A good option for a React-flavored media player is the `ReactPlayer` component
    available as an npm, which can be customized as required:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 作为npm可用的React风格媒体播放器的一个很好的选择是`ReactPlayer`组件，可以根据需要进行自定义：
- en: '![](assets/815895de-c19d-439e-b16b-56eb8b0c12d2.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/815895de-c19d-439e-b16b-56eb8b0c12d2.png)'
- en: 'It can be used in the application by installing the corresponding `npm` module:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过安装相应的`npm`模块在应用程序中使用它：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For basic usage with default controls provided by the browser, we can add it
    to any React view in the application that has access to the ID of the media to
    be rendered:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用浏览器提供的默认控件的基本用法，我们可以将其添加到应用程序中任何具有要呈现的媒体ID访问权限的React视图中：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the next chapter, we will look into advanced options for customizing this
    `ReactPlayer` with our own controls.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨使用我们自己的控件自定义这个`ReactPlayer`的高级选项。
- en: To learn more about what is possible with `ReactPlayer`, visit [cookpete.com/react-player](https://cookpete.com/react-player).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关`ReactPlayer`可能性的更多信息，请访问[cookpete.com/react-player](https://cookpete.com/react-player)。
- en: Media list
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体列表
- en: 'In MERN Mediastream, we will add list views of relevant media with a snapshot
    of each video to give visitors easier access and an overview of the videos on
    the application. We will set up list APIs in the backend to retrieve different
    lists, such as videos uploaded by a single user and the most popular videos with
    the highest views in the application. Then, these retrieved lists can be rendered
    in the `MediaList` component, which will receive a list as a prop from a parent
    component that fetches the specific API:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Mediastream中，我们将添加相关媒体的列表视图，并为每个视频提供快照，以便访问者更容易地访问应用程序中的视频概述。我们将在后端设置列表API来检索不同的列表，例如单个用户上传的视频以及应用程序中观看次数最多的最受欢迎视频。然后，这些检索到的列表可以在`MediaList`组件中呈现，该组件将从父组件接收一个列表作为prop，该父组件从特定API中获取列表：
- en: '![](assets/6c2da7fb-dec3-407d-b2e4-3114b4b61e71.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6c2da7fb-dec3-407d-b2e4-3114b4b61e71.png)'
- en: In the preceding screenshot, the `Profile` component uses the list by user API
    to fetch the list of media posted by the user seen in the preceding profile, and
    passes the received list to the `MediaList` component to render each video and
    media details.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，`Profile`组件使用用户API列表来获取前面配置文件中看到的用户发布的媒体列表，并将接收到的列表传递给`MediaList`组件以呈现每个视频和媒体详细信息。
- en: MediaList component
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体列表组件
- en: The `MediaList` component is a reusable component that will take a list of media
    and iterate through it to render each item in the view. In MERN Mediastream, we
    use it to render a list of the most popular media in the home view and a list
    of media uploaded by a specific user in their profile.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`MediaList`组件是一个可重用的组件，它将获取一个媒体列表并在视图中迭代每个项目进行呈现。在MERN Mediastream中，我们使用它来在主页视图中呈现最受欢迎的媒体列表，以及在用户配置文件中上传的媒体列表。'
- en: '`mern-mediastream/client/media/MediaList.js`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaList.js`：'
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `MediaList` component uses the Material-UI `GridList` components as it iterates
    through the list sent in the props, and renders media details for each item in
    the list, along with a `ReactPlayer` component that renders the video URL without
    showing any controls. In the view, this gives the visitor a brief overview of
    the media and also a glimpse of the video content.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`MediaList`组件使用Material-UI的`GridList`组件，它在props中迭代列表，并为列表中的每个项目呈现媒体详细信息，以及一个`ReactPlayer`组件，用于呈现视频URL而不显示任何控件。在视图中，这为访问者提供了媒体的简要概述，也可以一瞥视频内容。'
- en: List popular media
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出热门媒体
- en: In order to retrieve specific lists of media from the database, we need to set
    up relevant APIs on the server. For popular media, we will set up a route that
    receives a GET request at `/api/media/popular`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从数据库中检索特定的媒体列表，我们需要在服务器上设置相关的API。对于热门媒体，我们将设置一个路由，接收`/api/media/popular`的GET请求。
- en: '`mern-mediastream/server/routes/media.routes.js`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/routes/media.routes.js`：'
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `listPopular` controller method will query the Media collection to retrieve
    ten media documents that have the highest `views` in the whole collection.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`listPopular`控制器方法将查询媒体集合，以检索具有整个集合中最高`views`的十个媒体文档。'
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`：'
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: To use this API in the view, we will set up a corresponding fetch method in
    `api-media.js`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在视图中使用此API，我们将在`api-media.js`中设置相应的fetch方法。
- en: '`mern-mediastream/client/media/api-media.js`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/api-media.js`：'
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This `fetch` method will be called when the `Home` component mounts so the list
    can be set to state and passed to the `MediaList` component in the view.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当`Home`组件挂载时，将调用此`fetch`方法，以便将列表设置为状态，并传递给视图中的`MediaList`组件。
- en: '`mern-mediastream/client/core/Home.js`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/core/Home.js`：'
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the Home view, we will add the `MediaList` as follows, with the list provided
    as a prop:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在主页视图中，我们将添加`MediaList`如下，列表作为prop提供：
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: List media by users
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按用户列出媒体
- en: To retrieve a list of media uploaded by a specific user, we will set up an API
    with a route that accepts a GET request at `'/api/media/by/:userId'`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索特定用户上传的媒体列表，我们将设置一个API，该API在路由上接受`'/api/media/by/:userId'`的GET请求。
- en: '`mern-mediastream/server/routes/media.routes.js`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/routes/media.routes.js`：'
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `listByUser` controller method will query the Media collection to find media
    documents that have `postedBy` values matching the `userId`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`listByUser`控制器方法将查询媒体集合，以查找`postedBy`值与`userId`匹配的媒体文档。'
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`：'
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: To use this list by user API in the frontend view, we will set up a corresponding
    `fetch` method in `api-media.js`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端视图中使用此用户列表API，我们将在`api-media.js`中设置相应的`fetch`方法。
- en: '`mern-mediastream/client/user/api-user.js`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/user/api-user.js`：'
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This fetch method can be used in the `Profile` component, similar to the `listPopular`
    fetch method used in the home view, to retrieve the list data, set to state, and
    then pass to the `MediaList` component.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个fetch方法可以在`Profile`组件中使用，类似于在主页视图中使用的`listPopular`fetch方法，以检索列表数据，设置状态，然后传递给`MediaList`组件。
- en: Display, update, and delete media
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示、更新和删除媒体
- en: Any visitor to MERN Mediastream will be able to view media details and stream
    the video, while only registered users will be able to edit the details and delete
    the media any time after they post it on the application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Mediastream的任何访问者都可以查看媒体详细信息并流式传输视频，而只有注册用户才能在在应用程序上发布后随时编辑详细信息和删除媒体。
- en: Display media
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示媒体
- en: Any visitor to the MERN Mediastream will be able to browse to a single media
    view to play the video and read the details associated with the media. Every time
    a specific video is loaded on the application, we will also increment the number
    of views associated with the media.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Mediastream的任何访问者都可以浏览到单个媒体视图，播放视频并阅读与媒体相关的详细信息。每次在应用程序上加载特定视频时，我们还将增加与媒体相关的观看次数。
- en: Read media API
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读媒体API
- en: To fetch media information for a specific media record, we will set up a route
    that accepts a GET request at `'/api/media/:mediaId'`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取特定媒体记录的媒体信息，我们将设置一个路由，接受`'/api/media/:mediaId'`的GET请求。
- en: '`mern-mediastream/server/routes/media.routes.js`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/routes/media.routes.js`：'
- en: '[PRE31]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `mediaId` in the request URL will cause the `mediaByID` controller method
    to execute and attach the retrieved media document to the request object. Then
    this media data will be returned in the response by the `read` controller method.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 请求URL中的“mediaId”将导致执行“mediaByID”控制器方法，并将检索到的媒体文档附加到请求对象。然后，此媒体数据将由“read”控制器方法返回在响应中。
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`:'
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: A GET request to this API will also execute the `incrementViews` controller
    method, which will find the matching media record and increment the `views` value
    by `1` before saving the updated record to the database.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对此API的GET请求还将执行“incrementViews”控制器方法，该方法将找到匹配的媒体记录，并将“views”值增加1，然后将更新后的记录保存到数据库中。
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`:'
- en: '[PRE33]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In order to use this read API in the frontend, we will set up a corresponding
    fetch method in `api-media.js`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端使用此读取API，我们将在“api-media.js”中设置相应的fetch方法。
- en: '`mern-mediastream/client/user/api-user.js`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/user/api-user.js`:'
- en: '[PRE34]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The read API can be used to render individual media details in a view or to
    pre-populate a media edit form.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 读取API可用于在视图中呈现单个媒体详细信息，或者预填充媒体编辑表单。
- en: Media component
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体组件
- en: 'The `Media` component will render details of an individual media record and
    stream the video in a basic `ReactPlayer` with default browser controls:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: “Media”组件将呈现单个媒体记录的详细信息，并在具有默认浏览器控件的基本“ReactPlayer”中流式传输视频。
- en: '![](assets/0573b444-addd-489c-99eb-7fb12e3c0a68.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0573b444-addd-489c-99eb-7fb12e3c0a68.png)'
- en: The `Media` component can call the read API to fetch the media data itself or
    receive the data as props from a parent component that makes the call to the read
    API. In the latter case, the parent component will add the `Media` component,
    as follows.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: “Media”组件可以调用读取API来获取媒体数据，也可以从调用读取API的父组件作为prop接收数据。在后一种情况下，父组件将添加“Media”组件，如下所示。
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/PlayMedia.js`:'
- en: '[PRE35]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In MERN Mediastream, we add the `Media` component in a `PlayMedia` component
    that fetches the media content from the server using the read API, and passes
    it to Media as a prop. The `Media` component will take this data and render it
    in the view to display the details and load the video in a `ReactPlayer` component.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Mediastream中，我们在“PlayMedia”组件中添加了“Media”组件，该组件使用读取API从服务器获取媒体内容，并将其作为prop传递给Media。
    “Media”组件将获取这些数据并在视图中呈现它们，以显示详细信息并在“ReactPlayer”组件中加载视频。
- en: The title, genre, and view count can be rendered in a Material-UI `CardHeader`
    component.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 标题，流派和观看次数可以在Material-UI“CardHeader”组件中呈现。
- en: '`mern-mediastream/client/media/Media.js`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/Media.js`:'
- en: '[PRE36]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The video URL, which is basically the GET API route we set up in the backend,
    is loaded in a `ReactPlayer` with default browser controls.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 视频URL，基本上是我们在后端设置的GET API路由，将在“ReactPlayer”中加载，并具有默认的浏览器控件。
- en: '`mern-mediastream/client/media/Media.js`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/Media.js`:'
- en: '[PRE37]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `Media` component renders additional details about the user who posted the
    video, and the media description, along with the date the media was created.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: “Media”组件会渲染发布视频的用户的其他详细信息，媒体描述以及媒体创建日期。
- en: '`mern-mediastream/client/media/Media.js`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/Media.js`:'
- en: '[PRE38]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `Media` component also conditionally shows an edit and a delete option if
    the currently-signed-in user is also the one who posted the media being displayed.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前登录的用户也是发布显示的媒体的用户，则“Media”组件还会有条件地显示编辑和删除选项。
- en: '`mern-mediastream/client/media/Media.js`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/Media.js`:'
- en: '[PRE39]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The edit option links to the media edit form, and the delete option opens a
    dialog box that can initiate the deletion of this particular media document from
    the database.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑选项链接到媒体编辑表单，删除选项打开一个对话框，可以启动从数据库中删除特定媒体文档。
- en: Update media details
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新媒体详细信息
- en: Registered users will have access to an edit form for each of their media uploads,
    updating and submitting this form will save the changes to the document in the
    Media collection.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 注册用户将可以访问其每个媒体上传的编辑表单，更新并提交此表单将保存更改到媒体集合中的文档中。
- en: Media update API
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体更新API
- en: To allow users to update media details, we will set up a media update API that
    accepts a PUT request at `'/api/media/:mediaId'` with the updated details in the
    request body.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许用户更新媒体详细信息，我们将设置一个媒体更新API，该API将在`'/api/media/:mediaId'`处接受PUT请求，并在请求正文中包含更新的详细信息。
- en: '`mern-mediastream/server/routes/media.routes.js`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/routes/media.routes.js`：'
- en: '[PRE40]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: When this request is received, the server will first ensure the signed-in user
    is the original poster of the media content by calling the `isPoster` controller
    method.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当收到此请求时，服务器将首先通过调用`isPoster`控制器方法来确保登录用户是媒体内容的原始发布者。
- en: '`mern-mediastream/server/controllers/media.controller.js:`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`：'
- en: '[PRE41]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If the user is authorized, the `update` controller method will be called `next`,
    to update the existing media document with the changes and then save it to the
    database.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户被授权，将调用`update`控制器方法`next`，以更新现有的媒体文档并将其保存到数据库中。
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`：'
- en: '[PRE42]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: To access the update API in the frontend, we will add a corresponding fetch
    method in `api-media.js` that takes the necessary credentials and media details
    as parameters.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端访问更新API，我们将在`api-media.js`中添加相应的获取方法，该方法将以必要的凭据和媒体详细信息作为参数。
- en: '`mern-mediastream/client/user/api-user.js`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/user/api-user.js`：'
- en: '[PRE43]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This fetch method will be used in the media edit form when the user makes updates
    and submits the form.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户更新并提交表单时，此获取方法将用于媒体编辑表单。
- en: Media edit form
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体编辑表单
- en: 'The media edit form will be similar to the new media form, but without the
    upload option, and the fields will be pre-populated with the existing details:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体编辑表单将类似于新媒体表单，但不包括上传选项，并且字段将预填充现有细节：
- en: '![](assets/dd5cc45f-20f1-422b-b493-2d38f7343bca.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dd5cc45f-20f1-422b-b493-2d38f7343bca.png)'
- en: The `EditMedia` component containing this form, which can only be accessed by
    signed-in users, will be rendered at `'/media/edit/:mediaId'`. This private route
    will be declared in `MainRouter` with the other frontend routes.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 包含此表单的`EditMedia`组件只能由登录用户访问，并将呈现在`'/media/edit/:mediaId'`。此私有路由将在`MainRouter`中与其他前端路由一起声明。
- en: '`mern-mediastream/client/MainRouter.js`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/MainRouter.js`：'
- en: '[PRE44]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Once the `EditMedia` component mounts on the view, a fetch call will be made
    to the read media API to retrieve the media details and set to state so the values
    are rendered in the text fields.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`EditMedia`组件挂载到视图上，将调用获取调用以从读取媒体API检索媒体详细信息并设置为状态，以便在文本字段中呈现值。
- en: '`mern-mediastream/client/media/EditMedia.js`:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/EditMedia.js`：'
- en: '[PRE45]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The form field elements will be the same as in the `NewMedia` component. When
    a user updates any of the values in the form, the changes will be registered in
    the `media` object in state with a call to the `handleChange` method.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 表单字段元素将与`NewMedia`组件中的相同。当用户更新表单中的任何值时，将通过调用`handleChange`方法在状态中注册`media`对象中的更改。
- en: '`mediastream/client/media/EditMedia.js`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`mediastream/client/media/EditMedia.js`：'
- en: '[PRE46]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: When the user is done editing and clicks submit, a call will be made to the
    update API with the required credentials and the changed media values.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户完成编辑并点击提交时，将调用更新API，并提供所需的凭据和更改后的媒体值。
- en: '`mediastream/client/media/EditMedia.js`:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`mediastream/client/media/EditMedia.js`:'
- en: '[PRE47]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This will update the media details, and the video file associated with the media
    will remain as it is in the database.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更新媒体详情，并且与媒体相关的视频文件将保持在数据库中不变。
- en: Deleting media
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除媒体
- en: An authenticated user can delete the media they uploaded to the application
    completely, including the media document in the Media collection, and the file
    chunks stored in MongoDB using GridFS.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 经过身份验证的用户可以完全删除他们上传到应用程序的媒体，包括媒体集合中的媒体文档，以及使用GridFS存储在MongoDB中的文件块。
- en: The Delete media API
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除媒体API
- en: In the backend, we will add a DELETE route that allows an authorized user to
    delete their uploaded media records.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将添加一个DELETE路由，允许授权用户删除他们上传的媒体记录。
- en: '`mern-mediastream/server/routes/media.routes.js`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/routes/media.routes.js`:'
- en: '[PRE48]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: When the server receives a DELETE request at `'/api/media/:mediaId'`, it will
    first make sure the signed-in user is the original poster of the media that needs
    to be deleted. Then the `remove` controller method will delete the specified media
    details from the database.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器在`'/api/media/:mediaId'`接收到DELETE请求时，它将首先确保登录用户是需要删除的媒体的原始发布者。然后`remove`控制器方法将从数据库中删除指定的媒体详情。
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`:'
- en: '[PRE49]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Besides deleting the media record from the Media collection, we also use `gridfs`
    to remove the associated file details and chunks stored in the database.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从媒体集合中删除媒体记录外，我们还使用`gridfs`来删除数据库中存储的相关文件详情和块。
- en: We will also add a corresponding method in `api-media.js` to fetch the `delete`
    API from the view.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在`api-media.js`中添加一个相应的方法来从视图中获取`delete` API。
- en: '`mern-mediastream/client/user/api-user.js`:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/user/api-user.js`:'
- en: '[PRE50]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The DeleteMedia component
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除媒体组件
- en: 'The `DeleteMedia` component is added to the `Media` component and is only visible
    to the signed-in user who added this specific media. This component takes the
    media ID and title as props:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeleteMedia`组件被添加到`Media`组件中，只对添加了特定媒体的已登录用户可见。该组件以媒体ID和标题作为props：'
- en: '![](assets/b0470db1-6793-4723-8c9e-b918a4929e74.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b0470db1-6793-4723-8c9e-b918a4929e74.png)'
- en: This `DeleteMedia` component is basically an icon button that on click opens
    a confirm dialog to ask the user whether they are sure they want to delete their
    video.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`DeleteMedia`组件基本上是一个图标按钮，点击后会打开一个确认对话框，询问用户是否确定要删除他们的视频。
- en: '`mern-mediastream/client/media/DeleteMedia.js`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/DeleteMedia.js`:'
- en: '[PRE51]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: When the user confirms the delete intent, the `delete` fetch method is called.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户确认删除意图时，将调用`delete`获取方法。
- en: '`mern-mediastream/client/media/DeleteMedia.js`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/DeleteMedia.js`:'
- en: '[PRE52]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Then on successful deletion, the user is redirected to the home page.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在成功删除后，用户将被重定向到主页。
- en: '`mern-mediastream/client/media/DeleteMedia.js`:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/DeleteMedia.js`:'
- en: '[PRE53]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The MERN Mediastream application developed in this chapter is a complete media
    streaming application with capabilities of uploading video files to the database,
    streaming stored videos back to the viewers, support for CRUD operations such
    as media create, update, read, and delete, along with options to list media by
    uploader or popularity.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开发的MERN Mediastream应用程序是一个完整的媒体流应用程序，具有将视频文件上传到数据库的功能，将存储的视频流回给观众的功能，支持CRUD操作，如媒体创建、更新、读取和删除，以及按上传者或受欢迎程度列出媒体的选项。
- en: Summary
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we developed a media streaming application by extending the
    MERN Skeleton application and leveraging MongoDB GridFS.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过扩展MERN骨架应用程序并利用MongoDB GridFS开发了一个媒体流应用程序。
- en: Besides adding basic add, update, delete, and listing features for media, we
    looked into how MERN-based applications can allow users to upload video files,
    store these files into MongoDB GridFS as chunks, and stream the video back to
    the viewer partially or fully as required. We also covered a basic use of `ReactPlayer`
    with default browser controls to stream the video file.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 除了为媒体添加基本的添加、更新、删除和列表功能外，我们还研究了基于MERN的应用如何允许用户上传视频文件，将这些文件存储到MongoDB GridFS中，并根据需要部分或完全地向观看者流式传输视频。我们还介绍了使用默认浏览器控件来流式传输视频文件的`ReactPlayer`的基本用法。
- en: In the next chapter, we will see how we can customize `ReactPlayer` with our
    own controls and functionality so users have more options, such as playing the
    next video in a list. In addition, we will discuss how to improve the SEO of the
    media details by implementing server-side rendering with data for the media view.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用自定义控件和功能定制`ReactPlayer`，以便用户拥有更多选项，比如播放列表中的下一个视频。此外，我们将讨论如何通过实现带有媒体视图数据的服务器端渲染来改善媒体详情的搜索引擎优化。
