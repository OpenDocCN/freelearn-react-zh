- en: Introduction to React Router 4 and Creating Your First Route
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React Router 4简介和创建您的第一个路由
- en: '**Single page applications** (**SPAs**) have become the de facto standard for
    developing applications for the web. Many JavaScript libraries and frameworks
    have emerged that help frontend engineers in developing SPAs. These include React,
    Angular, Ember, and Backbone, to name a few. These libraries or frameworks abstract
    native APIs and provide services and components that can be used to build applications
    quicker. SPAs are an excellent choice for providing a fluid user experience; as
    the user traverses through the site, HTTP requests are triggered, and only certain
    sections of the page are updated, instead of requesting the server for the entire
    page.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 单页应用程序（SPA）已成为开发Web应用程序的事实标准。许多JavaScript库和框架已经出现，帮助前端工程师开发SPA。其中包括React、Angular、Ember和Backbone等。这些库或框架抽象了原生API，并提供了可以用于更快地构建应用程序的服务和组件。SPA是提供流畅用户体验的绝佳选择；当用户在网站中浏览时，会触发HTTP请求，只会更新页面的某些部分，而不是请求整个页面的服务器。
- en: React is an open source JavaScript library that helps you in building user interfaces
    and the view layer in web and mobile applications. It encourages developers to
    visualize the view layer as a collection of components that can be reused throughout
    the application. Most frontend frameworks include a routing package that enables
    you to update sections of the page when the user clicks through various links
    provided on the site. A router in a frontend framework listens to the changes
    in the URL and keeps the application in sync by rendering the corresponding view
    components. For example, when the user visits `'/dashboard'`, the page would render
    various dashboard components, such as charts and tables, and when the user visits,
    say, `'/user'`, the page would list various user attributes. In a React-based
    application, a Router library is required, since React does not ship with one.
    React-Router is one such popular routing library built completely with React.
    The library includes various components that can be used to render views as the
    user navigates through the application. Apart from matching the URL and rendering
    the view components, React-Router has several features that help you to configure
    the routes easily.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: React是一个开源的JavaScript库，帮助您构建Web和移动应用程序中的用户界面和视图层。它鼓励开发人员将视图层视为可以在整个应用程序中重用的组件集合。大多数前端框架都包含一个路由包，它使您能够在用户点击网站上提供的各种链接时更新页面的各个部分。前端框架中的路由器会监听URL的变化，并通过渲染相应的视图组件来保持应用程序同步。例如，当用户访问`'/dashboard'`时，页面将呈现各种仪表板组件，如图表和表格；当用户访问`'/user'`时，页面将列出各种用户属性。在基于React的应用程序中，需要一个路由器库，因为React本身不带有路由器。React-Router是一个完全基于React构建的流行路由库。该库包括各种组件，可用于在用户浏览应用程序时呈现视图。除了匹配URL和呈现视图组件外，React-Router还具有一些功能，可帮助您轻松配置路由。
- en: 'In this chapter, the following topics are discussed:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论以下主题：
- en: 'A brief look at React: This section introduces you to some of the core concepts
    in React, such as component-based architecture, creating components in React,
    and how data can be provided to child components in the application tree'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React简介：本节介绍了React中的一些核心概念，如基于组件的架构、在React中创建组件以及如何向应用程序树中的子组件提供数据
- en: 'Introduction to React-Router: Here, we first create a React application using
    the `create-react-app` CLI and then add the React-Router library (the `''react-router-dom''`
    package) as a dependency'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React-Router简介：在这里，我们首先使用`create-react-app` CLI创建一个React应用程序，然后将React-Router库（`'react-router-dom'`包）添加为依赖项
- en: 'Creating your first route: After adding React-Router as a dependency, the application''s
    first route is created using the `<BrowserRouter>` and `<Route>` components'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个路由：在添加 React-Router 作为依赖项后，使用 `<BrowserRouter>` 和 `<Route>` 组件创建应用程序的第一个路由。
- en: A brief look at React
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简要了解 React
- en: React is a JavaScript library that provides a set of components and services
    and enables you to build user interfaces.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: React 是一个提供一组组件和服务的 JavaScript 库，使您能够构建用户界面。
- en: 'Here is a quote from `reactjs.org`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是来自 `reactjs.org` 的引用：
- en: '"React is a declarative, efficient, and flexible JavaScript library for building
    user interfaces."'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '"React 是一个声明式、高效、灵活的 JavaScript 库，用于构建用户界面。"'
- en: The library is developed and maintained by Facebook and is licensed under MIT.
    It's extensively used in building various applications at Facebook, including
    Facebook web and Instagram web.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该库由 Facebook 开发和维护，根据 MIT 许可。它被广泛用于构建 Facebook 的各种应用程序，包括 Facebook 网站和 Instagram
    网站。
- en: React enables you to build view components that get updated when the application's
    state changes. The state here could refer to the underlying domain data, or it
    may reflect where the user is in the application journey. React ensures that the
    view components reflect the application state.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: React 使您能够构建视图组件，在应用程序状态更改时进行更新。这里的状态可能指的是底层领域数据，也可能反映用户在应用程序旅程中的位置。React 确保视图组件反映应用程序状态。
- en: 'Here are some of the important features of React:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: React 的一些重要特性：
- en: '**JSX**: Components in React applications use an XML/HTML-like syntax, known
    as JSX, to render the view elements. JSX allows you to include HTML in your JavaScript/React
    code; the familiar syntax of HTML with attributes in your React component''s render
    function does not require you to learn a new templating language. This JSX is
    then used by preprocessors such as Babel to transpile HTML text to JavaScript
    objects that the JavaScript engine can understand.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSX：React 应用程序中的组件使用类似 XML/HTML 的语法，称为 JSX，来渲染视图元素。JSX 允许您在 JavaScript/React
    代码中包含 HTML；在 React 组件的渲染函数中使用熟悉的带有属性的 HTML 语法，无需学习新的模板语言。预处理器（如 Babel）将使用 JSX
    将 HTML 文本转译为 JavaScript 对象，以便 JavaScript 引擎能够理解。
- en: '**One-way data binding**: React applications are organized as a series of nested
    components; a set of immutable values are passed to the component''s renderer
    as properties in HTML tags. The component does not modify the properties (or props)
    it receives from its parent; instead, the child communicates the user actions
    to its parent component and the parent component modifies these properties by
    updating the component''s state.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单向数据绑定：React 应用程序组织为一系列嵌套组件；一组不可变值作为属性传递给组件的渲染器，以 HTML 标签的形式。组件不会修改其从父组件接收的属性（或
    props）；相反，子组件将用户操作传达给其父组件，父组件通过更新组件的状态来修改这些属性。
- en: '**Virtual DOM**: In React, for every DOM object, a corresponding virtual DOM
    object is created that has the same set of properties as the real DOM object.
    However, the virtual DOM object lacks the power to update the view when the user
    interacts with the page. Components in React re-render the view elements whenever
    a change in state is detected, and this re-render updates the virtual DOM tree.
    React then compares this virtual DOM tree with the snapshot that was created before
    the update to determine the DOM objects that changed. Finally, React modifies
    the real DOM by updating only those DOM objects that changed.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟 DOM：在 React 中，为每个 DOM 对象创建一个相应的虚拟 DOM 对象，其具有与真实 DOM 对象相同的一组属性。但是，虚拟 DOM 对象缺乏在用户与页面交互时更新视图的能力。React
    中的组件在检测到状态变化时重新渲染视图元素，这种重新渲染会更新虚拟 DOM 树。然后，React 将此虚拟 DOM 树与更新前创建的快照进行比较，以确定更改的
    DOM 对象。最后，React 通过仅更新更改的 DOM 对象来修改真实 DOM。
- en: Component-based architecture in React
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React中的基于组件的架构
- en: Since its release in 2013, React has redefined the way that frontend applications
    should be built. It introduces the concept of component-based architecture, which,
    in essence, allows you to visualize your application as if it were made up of
    tiny, self-sustained view components. These view components are reusable; that
    is, a component such as `CommentBox` or `Footer` encapsulates the necessary functionality
    and can be used across the pages in the site.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 自2013年发布以来，React已经重新定义了前端应用程序的构建方式。它引入了基于组件的架构的概念，本质上允许您将应用程序视为由小型、自包含的视图组件组成。这些视图组件是可重用的；也就是说，诸如`CommentBox`或`Footer`之类的组件封装了必要的功能，并可以在站点的各个页面中使用。
- en: 'A page in this context is itself a view component that is composed of other
    tiny view components, as shown here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，页面本身是一个视图组件，由其他小的视图组件组成，如下所示：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `<Dashboard>` is a view component that encompasses several other view
    components (`Header`, `SideNav`, `ContentArea`, and `Footer`), which in turn are
    made up tiny components (`Brand`, `NavLink`, `Chart`, and `Grid`). The component-based
    architecture encourages you to build components that provide certain functionality
    and are not tightly coupled with any of their parent or sibling components. These
    components implement certain functionality and provide an interface through which
    they can be included in the page.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<Dashboard>`是一个视图组件，包含了几个其他视图组件（`Header`、`SideNav`、`ContentArea`和`Footer`），这些又由小组件（`Brand`、`NavLink`、`Chart`和`Grid`）组成。基于组件的架构鼓励您构建提供特定功能并且不与任何父级或同级组件紧密耦合的组件。这些组件实现了某些功能，并提供了一个接口，通过这个接口它们可以被包含在页面中。
- en: 'In the preceding example, a `<Grid>` component would include features such
    as rendering data in rows and columns, providing search functionality, and also
    an option to sort the columns either in ascending or descending order. The `<Grid>`
    component would implement all of the aforementioned features and provide an interface
    through which it can be included in the page. The interface here would include
    the tag name (`Grid`) and set of properties (`props`) that accept the values from
    its parent component. Here, the `<Grid>` component could interface with the backend
    system and retrieve the data; however, this would make the component tied tightly
    to the given backend interface, thus not making it reusable. Ideally, a view component
    would receive data from its parent component and act accordingly:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`<Grid>`组件将包括渲染数据的行和列、提供搜索功能，以及按升序或降序对列进行排序的功能。`<Grid>`组件将实现所有上述功能，并提供一个接口，通过这个接口它可以被包含在页面中。这里的接口将包括标签名（`Grid`）和一组属性（`props`），接受来自其父组件的值。在这里，`<Grid>`组件可以与后端系统进行接口，并检索数据；然而，这将使组件与给定的后端接口紧密耦合，因此无法重用。理想情况下，视图组件将从其父组件接收数据并相应地进行操作。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the `<Grid>` component receives a list containing stock price information
    through its `data` prop and would render this information in a tabular format.
    A component that includes this `<Grid>` component can be termed a `Container`
    component and `Grid` as a child component.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<Grid>`组件通过其`data`属性接收包含股票价格信息的列表，并以表格格式呈现这些信息。包含这个`<Grid>`组件的组件可以被称为`Container`组件，`Grid`作为子组件。
- en: A `Container` component is also a `View` component; however, its responsibility
    includes providing its child components with the necessary data to render. A `Container`
    component could initiate HTTP calls to a backend service and receive the data
    required to render its child components. In addition to that, the `Container`
    component is also responsible for the positioning of the individual view components
    in its view area.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`Container`组件也是`View`组件；然而，它的责任包括为其子组件提供必要的数据来渲染。`Container`组件可以发起HTTP调用到后端服务并接收渲染其子组件所需的数据。此外，`Container`组件还负责将单个视图组件定位在其视图区域内。'
- en: Creating a React component
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个React组件
- en: 'A React component is created by extending the `Component` class provided by
    React as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扩展React提供的`Component`类来创建React组件如下：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, the `Button` class extends React''s `Component` class and overrides the
    `render` method. The `render` method returns the JSX, which will be rendered on
    the DOM when the page loads. The `type` and `children` properties are available
    in `this.props`. React allows you to pass data to its components through props
    and does so by using the following syntax:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`Button`类扩展了React的`Component`类并重写了`render`方法。`render`方法返回将在页面加载时呈现在DOM上的JSX。`type`和`children`属性在`this.props`中可用。React允许您通过props将数据传递给其组件，并通过以下语法来实现：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we have wrapped the `Button` component inside a parent component, `App`,
    to render two button elements. The `type` attribute is consumed by the `Button`
    component to set the class name (`className`) of the `CANCEL` and `OK` buttons
    and text mentioned inside the `Button` tag. This can be referenced using the `children`
    property. The `children` property can be plain text or other view components.
    The child component gets a reference to the data provided by its parent component
    using `this.props`. The `children` property in `'this.props'` provides a reference
    to all the child elements included between the tags by the parent component. If
    you've used Angular in the past, consider the preceding snippet as similar to
    how you would include elements using `ng-transclude` in AngularJS, or `ng-content`
    in Angular.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`Button`组件包裹在父组件`App`中，以渲染两个按钮元素。`type`属性被`Button`组件使用来设置`CANCEL`和`OK`按钮的类名(`className`)和`Button`标签内提到的文本。这可以通过`children`属性来引用。`children`属性可以是纯文本或其他视图组件。子组件使用`this.props`来引用其父组件提供的数据。`'this.props'`中的`children`属性提供了父组件在标签之间包含的所有子元素的引用。如果您以前使用过Angular，请将前面的片段视为类似于在AngularJS中使用`ng-transclude`或在Angular中使用`ng-content`来包含元素。
- en: Here, the `<App>` component contains the `<Button>` component and can be referred
    to as a container component, which is responsible for rendering the buttons on
    the page.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<App>`组件包含`<Button>`组件，可以被称为容器组件，负责在页面上渲染按钮。
- en: 'The next step is to render the `<App>` component on the DOM. The `<App>` component
    serves as a root component, that is, a root node in a tree. Every component in
    the application has the `<App>` component as its top-most parent component:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在DOM上呈现`<App>`组件。`<App>`组件充当根组件，即树中的根节点。应用程序中的每个组件都将`<App>`组件作为其最顶层的父组件：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code is included in `index.js`, which imports the `React` and `ReactDOM`
    libraries. The `ReactDOM` library has a `render` method, which accepts the component
    to be rendered as its first parameter, and a reference to the DOM node where the
    root component has to be rendered.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码包含在`index.js`中，它导入了`React`和`ReactDOM`库。`ReactDOM`库有一个`render`方法，它接受要渲染的组件作为其第一个参数，并且根组件要渲染到的DOM节点的引用作为第二个参数。
- en: 'When the app is run, the content inside the `<App>` component is rendered:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，将呈现在`<App>`组件内的内容：
- en: '![](Images/f609ed22-23a6-483c-ae65-56181fbc1ef5.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f609ed22-23a6-483c-ae65-56181fbc1ef5.png)'
- en: Introduction to React-Router
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React-Router简介
- en: React-Router is a routing library for SPAs built with React. React-Router version
    4 is a complete rewrite and embraces the React philosophy of component-based architecture.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: React-Router是用React构建的SPA的路由库。React-Router版本4是一个完全的重写，并采用了基于组件的架构的React哲学。
- en: This is from the React-Router documentation  ([https://reacttraining.com/react-router/](https://reacttraining.com/react-router/))
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自React-Router文档（[https://reacttraining.com/react-router/](https://reacttraining.com/react-router/)）
- en: '"React Router is a collection of **navigational components** that compose declaratively
    with your application. Whether you want to have **bookmarkable URLs** for your
    web app or a composable way to navigate in **React Native**, *React Router* works
    wherever React is rendering--so *take your* pick!"'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: “React Router是一组与您的应用程序声明性地组合的**导航组件**。无论您是想为您的Web应用程序拥有**可书签的URL**还是想以**React
    Native**中的可组合方式导航，*React Router*都可以在React渲染的任何地方使用--所以*随你*选择！”
- en: React-Router can be used wherever React can be applied; that is, React-Router
    works both in the browser and in the native environment with React Native.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: React-Router可以在React可以应用的任何地方使用；也就是说，React-Router在浏览器和使用React Native的本地环境中都可以工作。
- en: 'The library is divided into three packages:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该库分为三个包：
- en: '`react-router`: Common core components for DOM and Native versions'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react-router`：DOM和本地版本的常见核心组件'
- en: '`react-router-dom`: Components for use in browser and web applications'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react-router-dom`：用于浏览器和Web应用程序的组件'
- en: '`react-router-native`: Components for use in native applications built with
    React Native'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react-router-native`：用于使用React Native构建的本地应用程序的组件'
- en: The library provides various components that can be used to add routes dynamically
    to your application. The dynamic routing in React-Router v4 allows you to specify
    application routes as the user progresses through the application journey. Frameworks
    such as AngularJS and Express require you to specify the routes upfront, and this
    routing information is required when the application bootstraps. In fact, the
    earlier versions of React-Router followed the same paradigm and required the routing
    configuration to be available upfront.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该库提供了各种组件，可用于动态添加路由到您的应用程序。React-Router v4中的动态路由允许您在用户通过应用程序旅程时指定应用程序路由。诸如AngularJS和Express之类的框架要求您预先指定路由，并且在应用程序引导时需要此路由信息。实际上，React-Router的早期版本遵循了相同的范例，并且需要提前提供路由配置。
- en: 'Apart from dynamic routing and providing fluid navigation in a React application,
    the library includes various features that are available in traditional websites.
    These include the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在React应用程序中进行动态路由和提供流畅导航之外，该库还包括传统网站中可用的各种功能。这些包括以下内容：
- en: Navigating backward and forward through the application, maintaining the history,
    and restoring the state of the application
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过应用程序向后和向前导航，维护历史记录，并恢复应用程序的状态
- en: Rendering appropriate page components when presented with a URL (deep-linking)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提供URL（深度链接）时呈现适当的页面组件
- en: Redirecting the user from one route to the other
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户从一个路由重定向到另一个路由
- en: Support for rendering a 404 page when none of the routes match the URL
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在没有任何路由匹配URL时支持呈现404页面
- en: Support for hash-based routes and pretty URLs with HTML5 mode
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持基于哈希的路由和使用HTML5模式的漂亮URLs
- en: It's a common misconception that React-Router is the official routing solution
    provided by Facebook. In reality, it's a third-party library and is licensed under
    MIT.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: React-Router是Facebook提供的官方路由解决方案是一个常见的误解。实际上，它是一个第三方库，根据MIT许可证授权。
- en: Getting started with React-Router
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React-Router入门
- en: Let's create a React application and then add React-Router as a dependency.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个React应用程序，然后将React-Router作为依赖项添加进去。
- en: To create a React application, we will use the `create-react-app` CLI. The `create-react-app`
    CLI makes it easier to create an application that already works. The CLI creates
    a project scaffold so that you can start using the latest JavaScript features,
    and also provides scripts to build applications for a production environment.
    There are various React and React-Router starter kits available; however, using
    `create-react-app` helps in demonstrating how React-Router can be added to an
    existing bare-bones React application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个React应用程序，我们将使用`create-react-app`CLI。`create-react-app`CLI使创建一个已经工作的应用程序变得更容易。CLI创建了一个项目脚手架，以便您可以开始使用最新的JavaScript功能，并提供了用于为生产环境构建应用程序的脚本。有各种React和React-Router入门套件可用；然而，使用`create-react-app`有助于演示如何将React-Router添加到现有的基本React应用程序中。
- en: 'The first step is to install `create-react-app` globally using NPM, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是使用NPM全局安装`create-react-app`，如下所示：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The CLI requires the `node` version to be greater than or equal to 6, and the `npm`
    version to be greater than 5.2.0.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: CLI要求`node`版本大于或等于6，并且`npm`版本大于5.2.0。
- en: 'Once the CLI has been installed, we will create a new application using the
    `create-react-app` command, as seen here:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完CLI后，我们将使用`create-react-app`命令创建一个新的应用程序，如下所示：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following output is displayed when `create-react-app` completes the installation
    of packages:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当`create-react-app`完成安装包时，将显示以下输出：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you used the `yarn` package manager ([https://yarnpkg.com/en/](https://yarnpkg.com/en/)),
    the `npm` commands in the preceding snippet would be replaced with `yarn`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`yarn`包管理器（[https://yarnpkg.com/en/](https://yarnpkg.com/en/)），则前面片段中的`npm`命令将被替换为`yarn`。
- en: 'The `react-router-demo-app` directory is created during installation (if it
    doesn''t already exist). Inside the directory, the following project structure
    is created:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中创建了`react-router-demo-app`目录（如果尚不存在）。在该目录内，创建了以下项目结构：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The CLI installs all the necessary dependencies, such as Babel, to transpile
    ES6 code to ES5, thus enabling you to leverage the latest JavaScript features.
    It also creates a build pipeline configuration with the help of webpack. Post-installation,
    no additional configuration is required to start or build the app. As noted in
    the preceding output, you can start the app using the `npm start` command and
    build a production-ready app using `npm build`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: CLI安装了所有必要的依赖项，如Babel，用于将ES6代码转译为ES5，从而使您能够利用最新的JavaScript功能。它还使用webpack创建了一个构建管道配置。安装后，无需额外配置即可启动或构建应用程序。如前面的输出所示，您可以使用`npm
    start`命令启动应用程序，并使用`npm build`构建一个生产就绪的应用程序。
- en: 'On running `npm start`, the application is compiled and will open a browser
    window with a Welcome to React message displayed, as shown here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`npm start`后，应用程序将被编译，并将打开一个浏览器窗口，显示“欢迎来到React”的消息，如下所示：
- en: '![](Images/2bdc0379-2deb-4bc9-9f52-a9a65537e570.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2bdc0379-2deb-4bc9-9f52-a9a65537e570.png)'
- en: 'In the `index.js` file, the `ReactDOM` reference is used to render the application''s
    root component as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`文件中，使用`ReactDOM`引用来呈现应用程序的根组件，如下所示：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `<App>` component marks the beginning of the tree that will get rendered
    when the application starts.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`<App>`组件标记了应用程序启动时将呈现的树的开始。'
- en: Adding the React-Router library
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加React-Router库
- en: 'Now that we have our sample application up and running, let''s add React-Router
    library as a dependency using `npm`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的示例应用程序已经运行起来了，让我们使用`npm`添加React-Router库作为一个依赖项：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command will download and add `react-router-dom` to the `/node_modules`
    directory. The `package.json` file now includes this as a dependency:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将下载并将`react-router-dom`添加到`/node_modules`目录中。`package.json`文件现在将其包含为一个依赖项：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: At the time of writing this book, version 4.3.0 of `react-router-dom` was available.
    You can try the alpha and beta builds by mentioning `react-router-dom@next` when
    including the library using `npm`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '在撰写本书时，`react-router-dom`的版本为4.3.0。您可以通过在使用`npm`包含库时提到`react-router-dom@next`来尝试alpha和beta版本。 '
- en: Defining application routes
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义应用程序路由
- en: The `react-router-dom` package includes a `<BrowserRouter>` component, which
    is used as a wrapper before adding routes in the application. To use React-Router
    in the React Native application, the `react-router-native` package is used. This
    will be discussed in detail in later chapters. The `<BrowserRouter>` component
    is an implementation of the router interface that makes use of HTML5's history
    API to keep the UI in sync with the URL path.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-router-dom`包括一个`<BrowserRouter>`组件，它用作在应用程序中添加路由之前的包装器。要在React Native应用程序中使用React-Router，需要使用`react-router-native`包。这将在后面的章节中详细讨论。`<BrowserRouter>`组件是路由器接口的一种实现，它利用HTML5的历史API来使UI与URL路径保持同步。'
- en: 'The first step is to wrap the application''s root component with `<BrowserRouter>`,
    as shown here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是使用`<BrowserRouter>`将应用程序的根组件包装起来，如下所示：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Wrapping your application inside `<BrowserRouter>` will create an instance of
    history for our `<App>` component, giving all of its child components access to
    props from the native browser history API. This allows components to match against
    URL paths and render the appropriate page component.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的应用程序包装在`<BrowserRouter>`中将为我们的`<App>`组件创建一个history实例，使其所有子组件都可以访问来自原生浏览器历史API的props。这允许组件匹配URL路径并呈现适当的页面组件。
- en: History is a JavaScript library that lets you manage history stack navigation
    and helps in persisting state between sessions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: History是一个JavaScript库，它允许您管理历史堆栈导航，并有助于在会话之间保持状态。
- en: 'Routing in React-Router isn''t actually routing—it''s conditional rendering
    of components based on the pattern that matches with the current URL path. To
    define a route, we need two pieces of information: the URL path to match with
    and the component to render. Let''s create two components, `HomeComponent` and
    `DashboardComponent`, that render at `/home` and `/dashboard` respectively.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在React-Router中的路由实际上并不是路由-它是基于与当前URL路径匹配的模式的组件的条件渲染。要定义路由，我们需要两个信息：要匹配的URL路径和要呈现的组件。让我们创建两个组件，`HomeComponent`和`DashboardComponent`，分别在`/home`和`/dashboard`上呈现。
- en: 'In `src/components/home/home.component.js`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/components/home/home.component.js`中：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And in `src/components/dashboard/dashboard.component.js`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/components/dashboard/dashboard.component.js`中：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `import` statement is required since we are returning JSX from the preceding
    components.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们从前面的组件返回JSX，所以需要`import`语句。
- en: The next step is to define a route using the `Route` component (from `'react-router-dom'`).
    The `Route` component accepts several props, but for the purpose of this example,
    we will use `path` and `component`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用`Route`组件（来自`'react-router-dom'`）定义路由。`Route`组件接受几个props，但在本例中，我们将使用`path`和`component`。
- en: 'In `App.js`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.js`中：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we're defining routes within the `'render'` method of the `<App>` component.
    Each `<Route>` component has a `path` prop, which mentions the URL path to match,
    and a `component` prop, mentioning the component to render once the path matches
    the URL.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在`<App>`组件的`'render'`方法中定义路由。每个`<Route>`组件都有一个`path`属性，它提到要匹配的URL路径，以及一个`component`属性，提到一旦路径匹配URL就要呈现的组件。
- en: In the preceding example, the component was created without extending React's
    component class. If a component, created by extending React's component class,
    is provided as a value to the `component` prop, then the component's lifecycle
    methods, `componentWillMount` and `componentWillUnmount`, are called every time
    that `<Route>` renders the component.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，该组件是在不扩展React组件类的情况下创建的。如果通过将扩展React组件类创建的组件作为`component`属性的值提供，则每次`<Route>`呈现组件时都会调用组件的生命周期方法`componentWillMount`和`componentWillUnmount`。
- en: When you run the app (`npm start`) and visit `localhost:3000/home`, `HomeComponent`
    is rendered and the message Inside Home Component is displayed. Similarly, `DashboardComponent`
    is rendered when you visit `localhost:3000/dashboard`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行应用程序（`npm start`）并访问`localhost:3000/home`时，将呈现`HomeComponent`并显示消息“Inside
    Home Component”。类似地，当您访问`localhost:3000/dashboard`时，将呈现`DashboardComponent`。
- en: '`<BrowserRouter>` creates a `History` object, which it uses to keep track of
    the current location and re-render the site whenever it changes. `<BrowserRouter>`
    makes the `History` object available to its descendent child components through
    React''s context. A `Route` component that does not have `<BrowserRouter>` as
    its parent will fail to work.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`<BrowserRouter>`创建一个`History`对象，它用于跟踪当前位置并在位置更改时重新渲染站点。`<BrowserRouter>`通过React的上下文将`History`对象提供给其后代子组件。如果一个`Route`组件没有`<BrowserRouter>`作为其父级，它将无法工作。'
- en: 'Also, it''s a requirement that `<BrowserRouter>` has only one child element.
    In the following snippet, `<BrowserRouter>` is given two child elements:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，`<BrowserRouter>`必须只有一个子元素的要求。在下面的片段中，`<BrowserRouter>`给出了两个子元素：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding code will result in an error, such as A <Router> may have only
    one child element. To resolve this, you could either move these routes into a
    component and provide the component reference, or wrap the `<Route>` components
    in the preceding snippet inside another element, such as `div` or `React Fragment`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将导致错误，例如“<Router>只能有一个子元素”。要解决此问题，您可以将这些路由移入一个组件并提供组件引用，或者将前面片段中的`<Route>`组件包装在另一个元素中，例如`div`或`React
    Fragment`。
- en: A `React fragment` is used to group a list of children without adding extra
    nodes to the DOM. A fragment is used when the component returns multiple elements.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`React fragment`用于将一组子元素分组，而不向DOM添加额外的节点。当组件返回多个元素时，使用片段。'
- en: 'Apart from `BrowserRouter`, there are other types of routers in the React-Router
    library: `HashRouter`, `MemoryRouter`, and `StaticRouter`. These are discussed
    in later chapters.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`BrowserRouter`之外，React-Router库中还有其他类型的路由器：`HashRouter`，`MemoryRouter`和`StaticRouter`。这些将在后面的章节中讨论。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: React is a JavaScript library used to build user interfaces. Unlike libraries
    such as Angular and Ember, which include a routing package, the React library
    does not include any components or services that help in routing. React-Router
    is a routing library that can be used in any React application, web or native.
    React-Router version 4 is a complete rewrite of the earlier versions and all of
    its components are written in React. The library includes the packages `react-router-dom` for
    use in web applications; `react-router-native`, for use in native applications
    built with React-Native; and `react-router`, a core package that both `react-router-dom`
    and `react-router-native` have a dependency on.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: React是一个用于构建用户界面的JavaScript库。与Angular和Ember等库不同，它们包括路由包，React库不包括任何帮助进行路由的组件或服务。React-Router是一个路由库，可以在任何React应用程序中使用，包括Web或原生应用。React-Router版本4是对早期版本的完全重写，所有组件都是用React编写的。该库包括用于Web应用程序的`react-router-dom`包；用于使用React-Native构建的原生应用程序的`react-router-native`；以及`react-router`，这是`react-router-dom`和`react-router-native`都依赖的核心包。
- en: The `create-react-app` CLI is used to quickly scaffold a React application.
    It includes build configuration scripts that can be used to generate builds for
    development and production environments. The `react-router-dom` package is then
    added as a dependency to the application. The package includes the `<BrowserRouter>`
    component, which implements a `History` interface. The application's root component, `<App
    />`, is wrapped inside React-Router's `<BrowserRouter>` component to make the
    `History` object available to all the components in the application tree.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`create-react-app` CLI用于快速搭建React应用程序。它包括可以用于生成开发和生产环境构建的构建配置脚本。然后将`react-router-dom`包添加为应用程序的依赖项。该包包括`<BrowserRouter>`组件，它实现了`History`接口。应用程序的根组件`<App
    />`被包裹在React-Router的`<BrowserRouter>`组件中，以使`History`对象对应用程序树中的所有组件都可用。'
- en: To create our first route, the `<Route>` component is included. It accepts `path` and `component` as
    props, and renders the component when the browser's URL matches the `<Route>` path.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们的第一个路由，包括`<Route>`组件。它接受`path`和`component`作为props，并在浏览器的URL匹配`<Route>`路径时渲染组件。
- en: In [Chapter 2](1eaddef9-2a31-4f30-bf5f-a98a7ebb831d.xhtml), *Configuring Routes
    - Using Various Options in the Route Component*, the `<Route>` component props
    are discussed in detail. Also, we will take a look at the various props that the
    rendered component receives, and consider how these props can be used to create
    nested routes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](1eaddef9-2a31-4f30-bf5f-a98a7ebb831d.xhtml)中，*配置路由-在Route组件中使用各种选项*，详细讨论了`<Route>`组件的props。此外，我们将看看渲染组件接收的各种props，并考虑如何使用这些props来创建嵌套路由。
