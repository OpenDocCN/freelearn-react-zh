- en: Chapter 4. DOM Interaction with ReactJS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 使用ReactJS与DOM交互
- en: In the previous chapter, we learned what JSX is and how we can create a component
    in JSX. As with many other frameworks, React also has other prototypes to help
    us build our web app. Every framework has different ways to interact with DOM
    elements. React uses a fast, internal synthetic DOM to perform diffs and compute
    the most efficient DOM mutation for you where your component actually lives.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了什么是JSX，以及如何在JSX中创建组件。与许多其他框架一样，React还有其他原型可以帮助我们构建我们的Web应用程序。每个框架都有不同的方式与DOM元素交互。React使用快速的内部合成DOM来执行差异并为您计算最有效的DOM突变，其中您的组件实际上存在。
- en: React components are similar to functions that take props and state (this will
    be explained in a later section). React components only render the single root
    node. If we want to render multiple nodes, then they must be wrapped into the
    single root node.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: React组件类似于接受props和state的函数（这将在后面的部分中解释）。React组件只呈现单个根节点。如果我们想呈现多个节点，那么它们必须被包装到单个根节点中。
- en: Before we start working with form components, we should first take a look at
    props and state.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用表单组件之前，我们应该先看一下props和state。
- en: Props and state
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Props和state
- en: React components translate your raw data into Rich HTML, the props and state
    together build with that raw data to keep your UI consistent.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: React组件将您的原始数据转换为丰富的HTML，props和state一起构建该原始数据以保持您的UI一致。
- en: 'OK, let''s identify what exactly it is:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们确定它到底是什么：
- en: Props and state are both plain JS objects.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Props和state都是普通的JS对象。
- en: They are triggered with a `render` update.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们通过`render`更新触发。
- en: React manages the component state by calling `setState(data,callback)`. This
    method will merge data into this state, and re-renders the component to keep our
    UI up to date. For example, the state of the drop-down menu (visible or hidden).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React通过调用`setState(data,callback)`来管理组件状态。这种方法将数据合并到此状态中，并重新呈现组件以保持我们的UI最新。例如，下拉菜单的状态（可见或隐藏）。
- en: React component props (properties) that don't change over time. For example,
    drop-down menu items. Sometimes components only take some data with this `props`
    method and render it, which makes your component stateless.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React组件props（属性）随时间不会改变。例如，下拉菜单项。有时组件只使用这种`props`方法获取一些数据并呈现它，这使得您的组件无状态。
- en: Using `props` and `state` together helps you make an interactive app.![Props
    and state](graphics/image_04_001.jpg)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时使用`props`和`state`有助于您创建一个交互式应用程序。![Props和state](graphics/image_04_001.jpg)
- en: Refer to this live example from [Chapter 3](ch03.html "Chapter 3. ReactJS-JSX"),
    *ReactJS-JSX*. You will have a better working understanding of state and properties.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 参考[第3章](ch03.html "第3章. ReactJS-JSX")中的实时示例，*ReactJS-JSX*。您将更好地理解状态和属性的工作原理。
- en: In this example, we are managing the state of toggle (show or hide) and the
    text of toggle buttons as properties.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在管理切换的状态（显示或隐藏）和切换按钮的文本作为属性。
- en: Form components
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单组件
- en: In React, form components differ from other native components because they can
    be modified via user interaction such as `<input>`, `<textarea>`, and `<option>`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，表单组件与其他本机组件不同，因为它们可以通过用户交互进行修改，例如`<input>`、`<textarea>`和`<option>`。
- en: 'Here is the list of supported events:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是支持的事件列表：
- en: '`onChange`, `onInput`, and `onSubmit`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onChange`、`onInput`和`onSubmit`'
- en: '`onClick`, `onContextMenu`,  `onDoubleClick`, `onDrag`, `onDragEnd`, `onDragEnter`,
    and `onDragExit`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onClick`、`onContextMenu`、`onDoubleClick`、`onDrag`、`onDragEnd`、`onDragEnter`和`onDragExit`'
- en: '`onDragLeave`, `onDragOver`, `onDragStart`, `onDrop`, `onMouseDown`, `onMouseEnter`,
    and `onMouseLeave`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDragLeave`、`onDragOver`、`onDragStart`、`onDrop`、`onMouseDown`、`onMouseEnter`和`onMouseLeave`'
- en: '`onMouseMove`, `onMouseOut`, `onMouseOver`, and `onMouseUp`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onMouseMove`、`onMouseOut`、`onMouseOver`和`onMouseUp`'
- en: A full list of supported events can be found in the official documentation at
    [https://facebook.github.io/react/docs/events.html#supported-events](https://facebook.github.io/react/docs/events.html#supported-events).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在官方文档中找到支持的事件的完整列表：[https://facebook.github.io/react/docs/events.html#supported-events](https://facebook.github.io/react/docs/events.html#supported-events)。
- en: Props in form components
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单组件中的Props
- en: 'As we know, ReactJS components have their own props and state-like forms that
    support a few props that are affected via user interaction:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，ReactJS组件有自己的props和类似状态的形式，支持通过用户交互受影响的一些props：
- en: '`<input>` and `<textarea>`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`<input>`和`<textarea>`'
- en: '| **Components** | **Supported Props** |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **支持的Props** |'
- en: '| `<input>` and `<textarea>` | Value, defaultValue |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `<input>`和`<textarea>` | Value, defaultValue |'
- en: '| `<input>` type of checkbox or radio | Checked, defaultChecked |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `<input>`类型的复选框或单选按钮 | Checked, defaultChecked |'
- en: '| `<select>` | Selected, defaultValue |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `<select>` | Selected, defaultValue |'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In an HTML `<textarea>` component, the value is set via children, but in React
    it can be set by `value`. The `onChange` prop is supported by all native components
    such as other DOM events, and can listen to all bubble change events.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML `<textarea>`组件中，值是通过子元素设置的，但在React中可以通过`value`设置。`onChange`属性由所有原生组件支持，例如其他DOM事件，并且可以监听所有冒泡变化事件。
- en: 'The `onChange` prop works across the browser when the user interacts and changes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`onChange`属性在用户交互和更改时在浏览器中起作用：'
- en: The `value` of `<input>` and `<textarea>`
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<input>`和`<textarea>`的`value`'
- en: The `checked` state of the `<input>` type of `radio` and `checkbox`
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<input>`类型的`radio`和`checkbox`的`checked`状态'
- en: The `selected` state of the `<option>` component
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<option>`组件的`selected`状态'
- en: Throughout the chapter, we'll demonstrate how we can control a component with
    the properties (prop) and state we've just looked at. We'll then take a look at
    how we can apply them from the component to control the behavior.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将演示如何使用我们刚刚查看的属性（prop）和状态来控制组件。然后，我们将看看如何从组件中应用它们来控制行为。
- en: Controlled component
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 受控组件
- en: 'The first component we''re going to look at is the one that controls the user
    input into `textarea`, which prevents user input when the characters have reached
    the max length; it will also update the remaining characters when the user inputs:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要看的第一个组件是控制用户输入到`textarea`中的组件，当字符达到最大长度时阻止用户输入；它还会在用户输入时更新剩余字符：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding code, we have declared the value of `textarea`, so when the
    user inputs, it will have no effect on changing the value of `textarea`. To control
    this, we need to use the `onChange` event:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们声明了`textarea`的值，因此当用户输入时，它不会对`textarea`的值进行更改。要控制这一点，我们需要使用`onChange`事件：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Observe the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下截图：
- en: '![Controlled component](graphics/image_04_002.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![受控组件](graphics/image_04_002.jpg)'
- en: In the preceding screenshot, we are accepting and controlling the value provided
    by the user and updating the `prop` value of the `<textarea>` component.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我们接受并控制用户提供的值，并更新`<textarea>`组件的`prop`值。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `this.state()` should only contain the minimal amount of data needed to
    represent your UI's state.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.state()`应该只包含表示UI状态所需的最小数据量。'
- en: 'But now we also want to update the remaining characters of `textarea` in `<span>`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我们还想在`<span>`中更新`textarea`的剩余字符：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, `this` would control the remaining value of `textarea`
    and update the remaining characters when the user inputs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`this`将控制`textarea`的剩余值，并在用户输入时更新剩余字符。
- en: Uncontrolled component
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不受控组件
- en: 'As we''ve seen in ReactJS, when using the `value` property we can control the
    user input, so `<textarea>` without the `value` property is an uncontrolled component:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在ReactJS中所见，使用`value`属性时，我们可以控制用户输入，所以没有`value`属性的`<textarea>`是一个非受控组件：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will render the `textarea` with an empty value and the user is allowed
    to input the value that would be reflected immediately by the rendered element
    because the uncontrolled component has its own internal state. If you want to
    initialize the default value, we need to use the `defaultValue` prop:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将渲染一个带有空值的`textarea`，用户可以输入值，这些值会立即反映在渲染的元素上，因为非受控组件有自己的内部状态。如果要初始化默认值，我们需要使用`defaultValue`属性：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It look's like the controlled component, which we have seen before.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来像是受控组件，我们之前见过的。
- en: Getting the form values on submit
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在提交时获取表单值
- en: As we've seen, the `state` and `prop` will give you the control to alter the
    value of the component and handle the state for that component.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，`state`和`prop`将让您控制组件的值并处理该组件的状态。
- en: OK, now let's add some advanced features in our Add Ticket form, which can validate
    the user input and display the tickets on the UI.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们在我们的添加票务表单中添加一些高级功能，它可以验证用户输入并在UI上显示票务。
- en: Ref attribute
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ref属性
- en: React provides `ref` non-DOM attributes to access the component. The `ref` attribute
    can be a callback function and it will execute immediately after the component
    is mounted.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: React提供了`ref`非DOM属性来访问组件。`ref`属性可以是一个回调函数，在组件挂载后立即执行。
- en: 'So we will attach the `ref` attribute in our form element to fetch the values:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将在我们的表单元素中附加`ref`属性来获取值：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we''ll add the JSX of form elements inside the `return` method:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在`return`方法中添加表单元素的JSX：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, I have added the `ref` attribute on our form elements
    and `onSubmit`, calling the function name, `handleSubmitEvent`. Inside this function,
    we are fetching the values with `this.refs`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我在我们的表单元素上添加了`ref`属性和`onSubmit`，调用了函数名`handleSubmitEvent`。在这个函数内部，我们使用`this.refs`来获取值。
- en: 'Now, open your browser and let''s see the output of our code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开你的浏览器，让我们看看我们代码的输出：
- en: '![Ref attribute](graphics/image_04_003.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Ref属性](graphics/image_04_003.jpg)'
- en: We are successfully getting the values for our component. It's very clear how
    data is flowing in our component. In the console we can see the values of the
    form when the user clicks the **Submit** button.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地获取了组件的值。很清楚数据是如何在我们的组件中流动的。在控制台中，我们可以看到用户单击**提交**按钮时表单的值。
- en: Now, let display this ticket info in our UI.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在UI中显示这张票的信息。
- en: 'First, we need to get the value of the form and manage the state of the form:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要获取表单的值并管理表单的状态：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we will create the AddTicketsForm component, which will be responsible
    for managing and holding the state of addTicketList(values):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建AddTicketsForm组件，它将负责管理和保存addTicketList（值）的状态：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s take a look at the preceding code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下前面的代码：
- en: '`getInitialState`: This initializes the default state for the `<List />` component'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getInitialState`：这个属性初始化了`<List />`组件的默认状态'
- en: '`addTicketList`: This holds the value and passes into the `updateList` with
    the state'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addTicketList`：这个属性保存数值并传递到`updateList`中的状态'
- en: '`updateList`: This is for updating the list of the tickets to make our UI in
    sync'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updateList`：这是用于更新票务列表以使我们的UI同步'
- en: 'Now we need to create the `<List items={items} />` component, which iterates
    the list when we submit the form:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建`<List items={items} />`组件，当我们提交表单时，它会迭代列表：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s get an understanding of the preceding code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一下前面的代码：
- en: '`getListOfIds`: This will iterate through all the keys in the item, and it
    will return the list that we have mapped with the `<ListPanel item={item}/>` component'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getListOfIds`：这将遍历项目中的所有键，并返回我们与`<ListPanel item={item}/>`组件映射的列表'
- en: '`.bind(this)`: The `this` keyword will be passed as a second argument, which
    gives the appropriate value when the function is called'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.bind(this)`：`this`关键字将作为第二个参数传递，当调用函数时会给出适当的值'
- en: 'In the `render` method, we are just rendering the list of elements. In addition,
    we can also add a condition based on the length inside the `render` method:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`render`方法中，我们只是渲染元素的列表。此外，我们还可以根据`render`方法内部的长度添加条件：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It will validate the length, and based on the return value TRUE or FALSE, it
    will display the message or apply the Bootstrap class, `.bg-info`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它将验证长度，并根据返回值TRUE或FALSE显示消息或应用Bootstrap类`.bg-info`。
- en: 'Now we need to create a `<ListPanel />` component that displays the list of
    tickets in the UI:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个`<ListPanel />`组件，以在UI中显示票务列表：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let''s combine our code and see the result in the browser:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们结合我们的代码，看看在浏览器中的结果：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the preceding code, we are iterating the items and passing as a props in
    <Listpanel/> component:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们正在迭代项目并将其作为props传递给`<Listpanel/>`组件：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is the markup of our HTML page:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们HTML页面的标记。
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open your browser and let''s see the output of our form before submitting:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的浏览器，让我们在提交之前看看我们表单的输出：
- en: '![Ref attribute](graphics/image_04_004.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![Ref属性](graphics/image_04_004.jpg)'
- en: 'The following screenshot shows how it looks after submitting the form:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了提交表单后的外观：
- en: '![Ref attribute](graphics/image_04_005.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Ref属性](graphics/image_04_005.jpg)'
- en: This looks good. Our first fully functional React component is ready.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错。我们的第一个完全功能的React组件已经准备好了。
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Never access `refs` inside any component, and never attach them to a stateless
    function.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要在任何组件内部访问`refs`，也不要将它们附加到无状态函数。
- en: 'Observe the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下截图：
- en: '![Ref attribute](graphics/image_04_006.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Ref属性](graphics/image_04_006.jpg)'
- en: 'We are getting this warning message because of the `key` (an optional) attribute
    of React, which accepts a unique ID. Every time when we submit the form, it will
    iterate the `List` component to update the UI. For example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到此警告消息是因为React的`key`（可选）属性，它接受一个唯一的ID。每当我们提交表单时，它将迭代`List`组件以更新UI。例如：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'React provides the add-ons module to solve this type of warning and generate
    the unique ID, but it is only available in npm. In further chapters, we will show
    how we can work with React npm modules. Here is a list of some popular add-ons:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: React提供了add-ons模块来解决这种类型的警告并生成唯一的ID，但它只在npm中可用。在后续章节中，我们将展示如何使用React npm模块。以下是一些流行的add-ons列表：
- en: '`TransitionGroup` and `CSSTransitionGroup`: For dealing with animations and
    transitions'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TransitionGroup`和`CSSTransitionGroup`：用于处理动画和过渡'
- en: '`LinkedStateMixin`: To make easy interaction with the user''s form input data
    and the component''s state'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LinkedStateMixin`：使用户的表单输入数据和组件状态之间的交互变得容易'
- en: '`cloneWithProps`: Changes the props of the component and makes shallow copies'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloneWithProps`：更改组件的props并进行浅拷贝'
- en: '`createFragment`: Used to create a set of externally keyed children'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createFragment`：用于创建一组外部键控的子元素'
- en: '`Update`: A helper function that makes it easy to deal with data in JavaScript'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Update`：一个帮助函数，使在JavaScript中处理数据变得容易'
- en: '`PureRenderMixin:` A performance booster'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PureRenderMixin:`性能增强器'
- en: '`shallowCompare:` A helper function to do shallow comparison for props and
    state'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shallowCompare:` 一个帮助函数，用于对props和state进行浅比较'
- en: Bootstrap helper classes
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bootstrap辅助类
- en: Bootstrap provides some helper classes to give you a better user experience.
    In the `AddTicketsForm` form component, we have used the Bootstrap helper classes
    `*-info` , which helps you to convey the meaning of your message with color for
    screen readers. Some of these are `*-muted`, `*-primary`, `*-success`, `*-info`,
    `*-warning`, and `*-danger`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap提供了一些辅助类，以提供更好的用户体验。在`AddTicketsForm`表单组件中，我们使用了Bootstrap辅助类`*-info`，它可以帮助屏幕阅读器以颜色传达消息的含义。其中一些是`*-muted`，`*-primary`，`*-success`，`*-info`，`*-warning`和`*-danger`。
- en: 'To change the color of the text we can use `.text*`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文本的颜色，我们可以使用`.text*`：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To change the background color we can use `.bg*`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改背景颜色，我们可以使用`.bg*`：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Caret
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入符
- en: 'To display the caret that will indicate the direction of the dropdown, we can
    use:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示指示下拉方向的插入符，我们可以使用：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Clearfix
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清除浮动
- en: 'By using `clearfix` on the parent element, we can clear the float of child
    elements:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在父元素上使用`clearfix`，我们可以清除子元素的浮动：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how props and state play an important role in
    making components interactive, as well as in DOM interaction. Refs is a great
    way to interact with your DOM elements. This would be inconvenient to do via streaming
    reactive props and state. With the help of refs we can call any public method
    and send a message to our particular child instance.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到props和state在使组件交互以及在DOM交互中发挥重要作用。Refs是与DOM元素交互的好方法。通过流式响应props和state来做这件事将会很不方便。借助refs，我们可以调用任何公共方法并向特定的子实例发送消息。
- en: The key examples shown in this chapter will help you understand and clear your
    concepts about props, state, and DOM interaction.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中展示的关键示例将帮助您理解和澄清有关props、state和DOM交互的概念。
- en: The last example covers the advanced Add Ticket form with multiple JSX components
    along with Bootstrap, which will give you more ideas about creating React components
    and how we can interact with them using refs. You can use it and instrument it
    as easy as you play with HTML.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个示例涵盖了使用多个JSX组件和Bootstrap创建高级添加票据表单，这将为您提供更多关于创建React组件以及如何使用refs与它们交互的想法。您可以像操作HTML一样轻松地使用它和调整它。
- en: If you are still not sure how state and props work and how React interacts with
    DOM, I recommend that you go through this chapter again, which will also help
    you when looking at future chapters.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然不确定state和props的工作原理以及React如何与DOM交互，我建议您再次阅读本章，这也将在您查看未来章节时帮助您。
- en: If you are done, then let's move on to [Chapter 5](ch05.html "Chapter 5. jQuery
    Bootstrap Component with React"), *jQuery Bootstrap Component with React,* which
    is all about Redux architecture in React.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经完成了，那么让我们继续阅读[第5章](ch05.html "第5章。React中的jQuery Bootstrap组件")，“React中的jQuery
    Bootstrap组件”，这一章主要讲述了React中的Redux架构。
