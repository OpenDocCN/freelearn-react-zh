- en: Creating Forms with Redux Form
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Redux Form创建表单
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下配方：
- en: Creating a controlled form with the local state
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本地状态创建受控表单
- en: Building a form using Redux Form
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Redux Form构建表单
- en: Implementing validation in a form
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单中实现验证
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Forms are a fundamental part of any web application, and in the following recipes,
    we are going to learn how to use forms with and without Redux Form.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 表单是任何Web应用程序的基本部分，在接下来的配方中，我们将学习如何使用带有或不带有Redux Form的表单。
- en: Creating a controlled form with the local state
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用本地状态创建受控表单
- en: For this recipe, we are going to create a simple Todo List to use a form using
    our local state.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将创建一个简单的待办事项列表，使用我们的本地状态来使用表单。
- en: Getting ready
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we need to install the `uuid` package to generate random IDs,
    as shown in the following code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要安装`uuid`包来生成随机ID，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s create our controlled form by following these steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤创建我们的受控表单：
- en: 'First, for the Todo List, we will create a new component called `Todo` into
    `src/components/Todo/index.jsx`. The skeleton we will use is shown in the following
    code:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，对于待办事项列表，我们将在`src/components/Todo/index.jsx`中创建一个名为`Todo`的新组件。我们将使用的框架如下所示：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'File: src/components/Todo/index.jsx'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Todo/index.jsx
- en: 'Remember that we need to add the component to our `src/routes.jsx`, as shown
    in the following code:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住，我们需要将组件添加到我们的`src/routes.jsx`中，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: File: src/routes.jsx
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/routes.jsx
- en: 'If you go to `/todo` you will see the input, but you will probably notice that
    it is not possible to write anything on it, and this is because we are connecting
    our local state (`this.state.task`) to our input value, but we need an `onChange`
    function to update our state, as demonstrated in the following code:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你去`/todo`，你会看到输入框，但你可能会注意到无法在上面写任何东西，这是因为我们将我们的本地状态(`this.state.task`)连接到我们的输入值，但我们需要一个`onChange`函数来更新我们的状态，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'File: src/components/Todo/index.jsx'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Todo/index.jsx
- en: 'Now we can write anything in our input, as shown in the following screenshot:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以在输入框中写任何东西，如下截图所示：
- en: '![](assets/5f6a8fe8-212c-425e-9885-da4300381960.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5f6a8fe8-212c-425e-9885-da4300381960.png)'
- en: 'To save the item written in our input, we need to add an `onSubmit` function
    in our `form` tag, where we need to update our local state to push the item to
    the `items` array. Also, we need to include our `List` component, where we are
    going to display all the items. The complete code is as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了保存输入的项目，我们需要在`form`标签中添加一个`onSubmit`函数，在这里我们需要更新我们的本地状态以将项目推送到`items`数组中。此外，我们需要包括我们的`List`组件，我们将在其中显示所有的项目。完整的代码如下：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'File: src/components/Todo/index.jsx'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Todo/index.jsx
- en: 'Our `List` component will be a functional component where we will render a
    list of items, as shown in the following code:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`List`组件将是一个功能性组件，我们将在其中渲染一个项目列表，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'File: src/components/Todo/List.jsx'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Todo/List.jsx
- en: 'Finally, we need to add our CSS file, as shown in the following code:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要添加我们的CSS文件，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'File: src/components/Todo/Todo.css'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Todo/Todo.css
- en: 'Our Todo List will look as shown in the following screenshot:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的待办事项列表将如下截图所示：
- en: '![](assets/c5026115-303f-4909-a8bc-410f3a67552b.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c5026115-303f-4909-a8bc-410f3a67552b.png)'
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: As you can see, the only way to retrieve the values from input forms is by using
    the local state with an `onChange` function to update the value of the input.
    If you connect a state to the input value, but you don't add an `onChange` callback
    to update it, you won't be able to write anything, since the Virtual DOM is not
    being updated, and the only way to do so is by updating our local state.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，从输入表单中检索值的唯一方法是使用本地状态和`onChange`函数来更新输入的值。如果您将状态连接到输入值，但没有添加`onChange`回调来更新它，您将无法写入任何内容，因为虚拟DOM没有被更新，唯一的方法是通过更新我们的本地状态。
- en: Building a form using Redux Form
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Redux Form构建表单
- en: '**Redux Form** is typically used for large forms or steps forms because it
    has a Redux state to keep the values through the entire form. Also, Redux Form
    is handy to validate the data and efficiently handle the submission.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Redux Form**通常用于大型表单或步骤表单，因为它具有Redux状态来保持整个表单的值。此外，Redux Form很方便地验证数据并有效地处理提交。'
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we need to install Redux Form as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要安装Redux Form如下：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'For this recipe, we are going to make the same Todo List, but this time using
    Redux Form:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用Redux Form来创建相同的Todo列表：
- en: 'Once we''ve installed Redux Form, we need to do some modifications to the code
    of the last recipe to implement Redux Form. The first thing we need to do is to
    add a reducer for our forms. For this, we need to import a reducer from `redux-form`,
    and we can change the name of the variable to `formReducer` to be more explicit,
    and then add the reducer as a form into our `combineReducers`, as shown in the
    following code:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装了Redux Form之后，我们需要对上一个示例的代码进行一些修改以实现Redux Form。我们需要做的第一件事是为我们的表单添加一个reducer。为此，我们需要从`redux-form`中导入一个reducer，并且我们可以将变量的名称更改为`formReducer`以更明确，然后将reducer作为一个表单添加到我们的`combineReducers`中，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'File: src/shared/reducers/index.js'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/reducers/index.js
- en: 'Normally, all the forms we create with Redux Form need their component, and
    so that means we need to create a component to handle our Todo Form. As we need
    to create a file called `TodoForm.jsx` into our `Todo` folder, the code of our
    component is as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，我们使用Redux Form创建的所有表单都需要它们的组件，这意味着我们需要创建一个组件来处理我们的Todo表单。由于我们需要在`Todo`文件夹中创建一个名为`TodoForm.jsx`的文件，我们组件的代码如下：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'File: src/components/Todo/TodoForm.jsx'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Todo/TodoForm.jsx
- en: 'Redux Form contains many useful props to handle our data in the forms. I market
    the props we are going to use for this recipe (`addTask` is a prop passed from
    another component, so that one is not properly part of Redux Form), you can see
    the all the props by adding a console in your render method `console.log(this.props);`,
    as shown in the following screenshot:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Redux Form包含许多有用的props来处理我们表单中的数据。我标记了我们将在此示例中使用的props（`addTask`是从另一个组件传递的prop，因此它不是Redux
    Form的一部分），您可以通过在渲染方法中添加控制台来查看所有的props `console.log(this.props);`，如下面的截图所示：
- en: '![](assets/bb4aaf76-a242-46fc-8fab-9ada82003a37.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bb4aaf76-a242-46fc-8fab-9ada82003a37.png)'
- en: 'Now let''s modify our `Todo` component to include the `TodoForm` component,
    and receive the data through our `addTask` method, as shown in the following code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们修改我们的`Todo`组件，包括`TodoForm`组件，并通过我们的`addTask`方法接收数据，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As you can see, Redux Form is easy to implement:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Redux Form很容易实现：
- en: On the first step, we connected our Redux Form reducer to our store
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一步中，我们将Redux Form reducer连接到了我们的store
- en: In the second step, we create our `TodoForm` component, where we render our
    form fields, connect our form reducer to the store, and where we send back the
    values to the `addTask` callback
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二步中，我们创建了`TodoForm`组件，在这里我们渲染了表单字段，将表单reducer连接到store，并将值发送回`addTask`回调函数
- en: In the last step, we render our `TodoForm` and send the `addTask` callback,
    which handles the task value to insert it into the local state
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一步中，我们呈现了我们的`TodoForm`并发送了`addTask`回调，该回调处理任务值并将其插入到本地状态中
- en: 'In the end, we are going to see the same result as the last recipe, but now
    using Redux Form, as shown in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将看到与上一个示例相同的结果，但现在我们使用Redux Form，如下面的屏幕截图所示：
- en: '![](assets/907eed37-f3bc-4e2f-af75-1d527358a1f1.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/907eed37-f3bc-4e2f-af75-1d527358a1f1.png)'
- en: Implementing validation in a form
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表单中实现验证
- en: The last part of our Redux Form implementation is the validation. Using the
    previous recipe, let's add validation of the input task.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们Redux Form实现的最后部分是验证。使用上一个示例，让我们添加对输入任务的验证。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The validations are needed in any form, so let''s add some validations to our
    fields:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何表单中都需要验证，因此让我们为我们的字段添加一些验证：
- en: 'First, we need to modify our `TodoForm.jsx` and we need to create a `validate`
    function, where we need to validate if our task is not empty. We then need to
    create a `renderError` method to render our error message if we try to add an
    empty task, as shown in the following code:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要修改我们的`TodoForm.jsx`，并且我们需要创建一个`validate`函数，在这个函数中，我们需要验证我们的任务是否不为空。然后，我们需要创建一个`renderError`方法，以便在尝试添加空任务时呈现我们的错误消息，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'File: src/components/Todo/TodoForm.jsx'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Todo/TodoForm.jsx
- en: 'Next, we need to create a `TodoForm.css` to add some styles to our error message,
    as shown in the following code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个`TodoForm.css`来为我们的错误消息添加一些样式，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'File: src/components/Todo/TodoForm.css'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Todo/TodoForm.css
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If we try to add a new task without any value and press *Enter* to submit the
    form, we are going to see the view shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试添加一个没有任何值的新任务，并按*Enter*提交表单，我们将看到以下屏幕截图中显示的视图：
- en: '![](assets/09f9546b-3bcc-4ad2-9268-61b2dd935c15.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/09f9546b-3bcc-4ad2-9268-61b2dd935c15.png)'
