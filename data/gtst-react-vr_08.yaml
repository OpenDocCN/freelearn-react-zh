- en: Breath Life in Your World
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给你的世界注入生命
- en: 'In the last chapter, with materials, we made objects look more real. We know
    that is not totally necessary for VR to work as we discussed in [Chapter 1](8459021f-a32d-42ac-9372-21576359d65e.xhtml),
    *What is Virtual Reality, Really*, but it certainly helps. Now, we will learn
    how to really make things seem real by making them move. This does two things:
    things that move look more alive, and it also helps parallax depth perception.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过材料使物体看起来更真实。我们知道这对于VR来说并不是完全必要的，正如我们在[第1章](8459021f-a32d-42ac-9372-21576359d65e.xhtml)中讨论的那样，*虚拟现实到底是什么*，但这确实有所帮助。现在，我们将学习如何通过使它们移动来使事物看起来真实。这样做有两个好处：移动的东西看起来更有生命力，而且还有助于视差深度感知。
- en: React VR has a number of APIs that will make it very easy to include animations
    that are fluid and natural. In most traditional CGI, making animation fluid is
    not so easy; you've got to start a motion out slow, ramp up to speed, and slow
    it down gently as well, otherwise the movement looks fake.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: React VR具有许多API，这将使包含流畅和自然的动画变得非常容易。在大多数传统CGI中，使动画流畅并不容易；您必须慢慢开始运动，加速到速度，然后轻轻地减速，否则运动看起来是假的。
- en: 'We will cover these topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖以下主题：
- en: The `Animated` API that is used to animate objects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于动画化对象的`Animated` API
- en: A one-shot animation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次性动画
- en: Continuous animation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连续动画
- en: Life cycle events such as `componentDidMount()`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生命周期事件，如`componentDidMount()`
- en: How to inject sound into the world
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将声音注入到世界中
- en: Movement and sound go a long way in making a world look alive. Let's do that!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 运动和声音在使世界看起来活跃方面起到了很大作用。让我们来做吧！
- en: The Animated API
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画API
- en: React and React VR make this easy as the animation API has a number of animation
    types that make this straightforward, without having to do math or have key frames,
    as you would with traditional animation. Instead of keyframing, you can ramp up things
    slowly, bounce, and pause declaratively. These props are spring, decay, and timing;
    more detail on these is in the online documentation at [http://bit.ly/ReactAnims](http://bit.ly/ReactAnims).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: React和React VR使这变得容易，因为动画API具有许多动画类型，使这变得简单易懂，无需进行数学计算或使用关键帧，就像传统动画一样。您可以逐渐增加事物，弹跳和停顿。这些属性是spring，decay和timing；有关这些的更多详细信息，请参阅在线文档[http://bit.ly/ReactAnims](http://bit.ly/ReactAnims)。
- en: 'It''s fine to animate, but we need to know where we are going. To do this,
    the Animation API has two value types: value for scalar (single values), and ValueXY
    for vectors. You might wonder why in this case a vector is only *X* and *Y—*ValueXY
    is intended for UI elements, that by their nature, are flat. If you need to animate
    an X, Y, and Z location, you would use three scalars.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 动画是可以的，但我们需要知道我们要去哪里。为此，动画API具有两种值类型：标量（单个值）和矢量的ValueXY。您可能会想知道为什么在这种情况下，矢量只是*X*和*Y*
    - ValueXY是用于UI元素的，它们的性质是平的。如果您需要动画化X，Y和Z位置，您将使用三个标量。
- en: First, we'll create an animated teapot that spins. This will be especially helpful
    to see how our texture mapping works. If you've been following along the code,
    your `SpaceGallery` app should already have most of what we need to start writing
    this chapter. If not, you can download the source files to start with at: [http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7).
    If you really don't want to type all of this, I put the final files at: [http://bit.ly/VR_Chap8](http://bit.ly/VR_Chap8).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个旋转的动画茶壶。这将特别有助于了解我们的纹理映射是如何工作的。如果您一直在跟着代码，您的`SpaceGallery`应用程序应该已经具备我们开始编写本章所需的大部分内容。如果没有，您可以下载源文件开始：[http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7)。如果您真的不想输入所有这些，我把最终文件放在了：[http://bit.ly/VR_Chap8](http://bit.ly/VR_Chap8)。
- en: Assuming you either downloaded or finished the last chapter, take the `index.vr.js`,
    from [Chapter 7](55c8c8f8-c349-43ad-b690-2d6de861b8b9.xhtml), *Sitting Down with
    a (Virtual) Teapot,*  start and enter the following new class, `TurningPot()` at
    the top of the file but under the `import` statements (note that we are still
    in the `SpaceGallery` app).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经下载或完成了上一章，从[第7章](55c8c8f8-c349-43ad-b690-2d6de861b8b9.xhtml)中拿出`index.vr.js`，*与（虚拟）茶壶一起坐下*，在文件的顶部但在`import`语句下面输入以下新类`TurningPot()`（请注意，我们仍然在`SpaceGallery`应用程序中）。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This sets up our animated value/variable—`yRotation`. We've created it as a
    scalar, which is OK, as we'll be mapping that to `rotateY`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了我们的动画值/变量—`yRotation`。我们已经将它创建为一个标量，这是可以的，因为我们将把它映射到`rotateY`。
- en: Don't forget to `import` the animated keyword.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记`import`动画关键字。
- en: Next, we'll use a life cycle override called `componentDidMount`. Life cycle
    overrides are events that are called at specific times during the loading and
    creation (rendering) of the VR world; in this case, the `componentDidMount` function
    is called after mounting (as per the "Did" fragment in the name of the event).
    Mounting means that the object is loaded, available, and created inside three.js;
    in other words, it's in the world. The function `componentWillMount` is called when
     that component is about to be mounted but doesn't exist yet; we don't use this
    one as we want the object to move when it's actually a visible object, although
    it's really useful for loading objects, initializing state, and the like.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用一个叫做`componentDidMount`的生命周期重写。生命周期重写是在加载和创建（渲染）VR世界期间特定时间调用的事件；在这种情况下，`componentDidMount`函数在挂载后被调用（根据事件名称中“Did”片段的含义）。挂载意味着对象已加载、可用，并在three.js内创建；换句话说，它在世界中。`componentWillMount`函数在该组件即将被挂载但尚不存在时被调用；我们不使用这个函数，因为我们希望对象在实际可见对象时移动，尽管它对加载对象、初始化状态等非常有用。
- en: 'Note that we haven''t finished the declaration yet, so the final closing `{`
    brace isn''t there:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还没有完成声明，所以最终的闭合`{`括号还没有出现：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `componentDidMount()` is an important object life cycle API call that is
    used to do things like what we're doing; starting the animation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentDidMount()`是一个重要的对象生命周期API调用，用于做像我们正在做的事情；开始动画。'
- en: This event will most likely happen before the browser finishes loading everything,
    so you may miss the actual start. If this is a concern, you can overload some
    other methods to ensure that it fires at the right time, or introduces a small
    delay.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件很可能会在浏览器加载完所有内容之前发生，所以你可能会错过实际的开始。如果这是一个问题，你可以重载一些其他方法来确保它在正确的时间触发，或者引入一个小的延迟。
- en: Flying teapots
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 飞行的茶壶
- en: 'Now for the important thing, the rendering itself. Write the following method
    using the `Animated.View` keyword:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是重要的事情，渲染本身。使用`Animated.View`关键字编写以下方法：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, save this file. If you used `?hotreload` in the URL [http://localhost:8081/vr/?hotreload](http://localhost:8081/vr/?hotreload) 
    when bringing up your world, and typed everything correctly, you'll see the teapot
    spinning in front of you automatically. Otherwise, hit the 'refresh' button in
    your browser.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保存这个文件。如果你在URL [http://localhost:8081/vr/?hotreload](http://localhost:8081/vr/?hotreload)
    中使用了`?hotreload`，并且输入了一切正确，你会看到茶壶在你面前自动旋转。否则，点击浏览器中的“刷新”按钮。
- en: Wait, what? What just happened? Why is the pot flying!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，什么？刚刚发生了什么？为什么壶在飞！
- en: '![](Images/3d7472ee-4acd-416d-a9f8-be46ea8c09c7.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3d7472ee-4acd-416d-a9f8-be46ea8c09c7.png)'
- en: 'The teapot revolved around *us*, the center of the `<view>`, not about its
    own axis. Why was that? Remember that translation order is important. In this
    case, we had a separate translation and rotation:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 茶壶围绕*我们*，即`<view>`的中心旋转，而不是围绕它自己的轴旋转。为什么会这样？记住翻译顺序很重要。在这种情况下，我们有一个单独的平移和旋转：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'What is happening here is that the view is rotating, and then the model is
    transforming. We want to do it in the opposite order. One solution is to leave
    the model where it is and change the `render()` loop to this (note the bold part):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的是视图在旋转，然后模型在变换。我们希望以相反的顺序进行。一个解决方案是将模型保持在原地，并将`render()`循环更改为以下内容（注意粗体部分）：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Spinning once and forever
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一旦旋转，永远
- en: 'When we save this file and view it again in our VR browser, we will see the
    pot turn once. Note that we may not see the startup, and also note that when the
    pot finishes turning, it does so gracefully instead of being a computer animated
    ''smash stop'':'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们保存这个文件并在VR浏览器中再次查看它时，我们会看到壶转动一次。请注意，我们可能看不到启动，并且当壶完成转动时，它会优雅地完成，而不是计算机动画的“猛然停止”：
- en: '![](Images/73217953-051c-4706-a152-02c25c5e7148.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/73217953-051c-4706-a152-02c25c5e7148.png)'
- en: This is fantastic, but the pot turns and then stops. We might want it to continue
    to turn. So let's do that!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这太棒了，但是壶转动然后停止了。我们可能希望它继续转动。所以让我们这样做！
- en: 'Modify the component creation to do the following (yes, we sort of get rid
    of all the cool Animate keywords):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 修改组件创建以执行以下操作（是的，我们有点摆脱了所有酷炫的Animate关键字）：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Okay, in this part, make note of a few things. The variable we are using is
    called `yRotation`; we also use the word `rotate`, which is actually a new function:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，在这部分，注意几件事。我们使用的变量称为`yRotation`；我们还使用了单词`rotate`，这实际上是一个新函数：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We also need to change the object loading/unloading routines, to both start
    up the rotation as well as to end the timer callback:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要改变对象的加载/卸载例程，既开始旋转，也结束定时器回调：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `<View>` itself doesn't change; it's merely rotating the object as the driving
    function does; this time, we're driving it with a custom function called on every
    `render()` loop.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`<View>`本身不会改变；它只是像驱动函数一样旋转对象；这一次，我们使用一个名为`render()`的自定义函数来驱动它。'
- en: It's very important to check the time lapsed, as different platforms will have
    different frame rates, depending on hardware, GPU, and many other factors. To
    ensure that all types of computers and mobile devices see the pot spin at the
    same speed, we take the `now` variable and calculating the difference between
    `now` and `this.lastUpdate` giving us a delta time. We use the delta for the actual
    spin speed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 检查经过的时间非常重要，因为不同的平台会有不同的帧率，取决于硬件、GPU和许多其他因素。为了确保所有类型的计算机和移动设备看到壶以相同的速度旋转，我们使用`now`变量并计算`now`和`this.lastUpdate`之间的差值，得到一个增量时间。我们使用增量来确定实际的旋转速度。
- en: The final code
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终代码
- en: 'Now that we have all that fixed, we have a well rendered spinning teapot. While
    doing the coding, we also fixed a bad piece of programming; the pot speed was
    hard coded to be 20 or so. This is better if it''s a `const` from a programming
    maxim, "never embed constants in the body of your program":'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经解决了所有这些问题，我们有一个良好渲染的旋转茶壶。在编码过程中，我们还修复了一个糟糕的编程错误；壶的速度被硬编码为20左右。从编程的最大化来看，最好是将其作为`const`，“永远不要将常量嵌入程序主体中”：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Sound
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声音
- en: Sound in VR is actually pretty complicated. Our ears hear things differently
    to someone else's ear. Many VR systems do a simple "if it's on the right, it's
    louder to my right ear" stereo pan (stereo panning), but this isn't really the
    way that actual sound works. For VR, and the high frame rates that they require,
    just like our lighting effects skip doing full raytracing, this sound panning
    is okay.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: VR中的声音实际上非常复杂。我们的耳朵听到的声音与别人的耳朵听到的声音不同。许多VR系统都采用简单的“如果在右边，对我的右耳来说更响”的立体声定位，但这并不是实际声音工作的方式。对于VR和它们所需的高帧率，就像我们的光照效果跳过完整的光线追踪一样，这种声音定位是可以的。
- en: More sophisticated VR systems would use something called a **Head Related Transfer
    Function **(**HRTF**). An HRTF is how sound changes when you tilt your head. In
    other words, how does sound "transfer" based on *your* head? Each person has their
    own HRTF; it takes into account the shape of their ears, the bone density in their
    heads, and the size and shape of their nose and mouth cavities. Our ears, coupled
    with the way we are raised, during which we train our brain, allows us to do amazing
    things with an HRTF. For example, humans can locate something in three dimensions
    by only hearing it from two points. That would be like being able to see in stereo
    with only one eye! HRTF gives us what vision doesn't; it gives us spatial awareness
    of what is happening all around us, even if we don't see it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的VR系统将使用一种叫做**头部相关传递函数**（HRTF）的东西。HRTF是指当你转动头部时声音如何变化。换句话说，声音如何根据*你的*头部“传递”？每个人都有自己的HRTF；它考虑了他们的耳朵形状、头部的骨密度以及鼻子和口腔的大小和形状。我们的耳朵，再加上我们的成长方式，在这个过程中我们训练我们的大脑，让我们能够用HRTF做出惊人的事情。例如，人类可以通过只从两个点听到声音来在三维空间中定位某物。这就像只用一只眼睛就能看立体影像一样！HRTF给了我们视觉所不能给的；它给了我们对周围发生的事情的空间意识，即使我们看不见。
- en: To use HRTFs for Virtual Reality will require every person hearing a sound in
    a virtual world to have their HRTF loaded into the VR world's sound system. Further,
    that HRTF has to be measured in an anechoic chamber (a chamber with foam lining
    on the walls to eliminate echo). This is obviously not very common.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HRTF进行虚拟现实需要每个在虚拟世界中听到声音的人都将他们的HRTF加载到VR世界的声音系统中。此外，这个HRTF必须在无反射室（墙壁上覆盖有泡沫衬里以消除回声的房间）中进行测量。这显然并不常见。
- en: Most VR sound, thus, just does a left/right panning.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，大多数VR声音只是左右平移。
- en: This is an area where VR can have significant breakthroughs. Sound is very important,
    and allows us to perceive things in 3D space; it is an important aspect of immersion.
    Many people think Stereo Panning is 3D; this is where a sound is simply louder
    in one ear than the other. In an audio system, this is the *balance* knob. In
    headphones, it'll sound weird, but it's not actually localizing the sound. In
    the real world, your right ear will hear a sound just a split second before (or
    after) the left ear, and as you tilt your head, the curves in your ear change
    that delay and your brain says "Ah, the sound is right *there*."
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是VR可以取得重大突破的领域。声音非常重要，让我们能够在三维空间中感知事物；这是沉浸的重要方面。许多人认为立体声平移就是3D；这只是声音在一个耳朵比另一个耳朵更响。在音频系统中，这是*平衡*旋钮。在耳机中，听起来会很奇怪，但实际上并没有定位声音。在现实世界中，你的右耳会在左耳之前（或之后）听到声音，当你转动头部时，你的耳朵的曲线会改变这种延迟，你的大脑会说“啊，声音就在*那里*”。
- en: Stereo panning is about all that can be done without the HRTF measuring, but
    an HRTF is significantly better. The good news is that audio hardware and computing
    power is so great now that with an HRTF or reasonable software to simulate an
    average HRTF, much more complicated sound processing is possible. Look to this
    area for future enhancements.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 没有HRTF测量，立体声平移是唯一能做的事情，但HRTF要好得多。好消息是，现在音频硬件和计算能力非常强大，有了HRTF或合理的软件来模拟平均HRTF，更复杂的声音处理是可能的。期待未来在这个领域的进展。
- en: The power of React VR again comes to our rescue. We don't have to worry about
    all that; we just have to put the sound in our world.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: React VR的强大再次拯救了我们。我们不必担心这一切；我们只需要把声音放在我们的世界里。
- en: Seriously, don't get too discouraged with all that talk, just be aware that
    sound is difficult (as important as graphics rendering), but at this point, all
    you really need to do is to get a good mono (not stereo) sound and describe it
    in the scene file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 说真的，不要因为所有这些谈话而感到沮丧，只要意识到声音很难（和图形渲染一样重要），但在这一点上，你真正需要做的就是获得一个好的单声道（不是立体声）声音，并在场景文件中描述它。
- en: That's the whole point of React VR. Describe what you want; you don't need to
    tell people how to do it. Still, you need to know what is going on behind the
    scenes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是React VR的全部意义。描述你想要的东西；你不需要告诉人们如何做。不过，你需要知道幕后发生了什么。
- en: Putting sound in our world
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的世界中放置声音
- en: 'Now, let''s actually make some noise. [Freesound.com](http://Freesound.com)
    is a good place to go for free game sounds. Most of the sounds there require attribution.
    Giving credit to the people who help build your world is the right thing to do.
    Go to the site and download several sound files you like. A few of the ones I
    found at `freesound.com` are these:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们真的发出一些声音。[Freesound.com](http://Freesound.com)是一个获取免费游戏声音的好地方。那里的大部分声音都需要归属。给那些帮助建立你的世界的人以信用是正确的做法。去这个网站下载几个你喜欢的声音文件。我在`freesound.com`找到的一些是这些：
- en: Boiling pot water by Geodylabs ([http://bit.ly/BoilingPot1](http://bit.ly/BoilingPot1))
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Geodylabs煮沸的锅水（[http://bit.ly/BoilingPot1](http://bit.ly/BoilingPot1)）
- en: Boiling water by dobroide ([http://bit.ly/Boiling2](http://bit.ly/Boiling2))
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过dobroide（[http://bit.ly/Boiling2](http://bit.ly/Boiling2)）煮沸的水
- en: Boiling water by abrez ([http://bit.ly/Boiling3](http://bit.ly/Boiling3))
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过abrez（[http://bit.ly/Boiling3](http://bit.ly/Boiling3)）煮沸的水
- en: I downloaded these in the `.mp3` file format; this should be fairly cross platform.
    Copy these into a new folder called `sounds` in the directory of `static_assets`
    too. I only used one of them in the actual world, but you can experiment with
    the others. Sometimes you don't know if it works until you hear it in the world.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我以`.mp3`文件格式下载了这些；这应该是相当跨平台的。把它们复制到`static_assets`目录中一个名为`sounds`的新文件夹中。我只在实际世界中使用了其中一个，但你可以尝试其他的。有时你不知道它是否有效，直到你在世界中听到它。
- en: 'Sound is a node that has to be attached to a View, Image, or Text—React VR''s
    only components. You probably want to attach it to a box, model, or whatever;
    just wrap the object with a `<View>`, and put the `sound` component inside it,
    as shown:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 声音是一个必须附加到视图、图像或文本的节点——React VR的唯一组件。你可能想把它附加到一个盒子、模型或其他东西上；只需用`<View>`包裹对象，并把`sound`组件放在其中，如下所示：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: One thing that is a bit funny is that the sounds don't come from where our teapot
    is (the upper left as you first view the world). Why is that? Look at the preceding
    code; we've simply wrapped the `View` tag around the `Model`; so it is transformed
    differently than the sound.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件有趣的事情是，声音并不是来自我们的茶壶所在的地方（当你第一次看到这个世界时，它在左上角）。为什么呢？看看前面的代码；我们只是简单地在`Model`周围包裹了`View`标签；所以它的变换与声音不同。
- en: 'Some sounds work better than others; you''ll have to experiment or record your
    own. Fixing the transformation is left as an exercise for the reader. (Actually,
    it''s easy, but ensure that you don''t paste the transform as a child XML element.)
    The correct code is this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有些声音比其他的效果更好；你需要进行实验或录制自己的声音。修复变换留给读者作为练习。（实际上，这很容易，但确保你不要把变换粘贴为子XML元素。）正确的代码是这样的：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We learned how to build animations both by procedurally changing an object's
    position and by using the more advanced methods of using timers and the Animated
    API. We dramatically saw what happens if we use the wrong `<View>` to animate,
    and developed a way to make objects animate forever. The Energizer bunny will
    be proud. We also added sound, which is a very important thing for virtual worlds.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学会了如何通过程序性地改变对象的位置和使用更高级的方法来构建动画，比如使用定时器和动画API。我们明显看到了如果使用错误的`<View>`来进行动画会发生什么，并开发了一种让对象永远动画的方法。Energizer兔会感到自豪。我们还添加了声音，这对虚拟世界来说是非常重要的事情。
- en: There is a lot you can do with timers; I highly recommend that you study the
    online documentation and experiment!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 定时器可以做很多事情；我强烈建议你研究在线文档并进行实验！
- en: So far, we have stayed within React VR. Sometimes, there are things we need
    to do that React doesn't allow us to do. In the next chapter, we'll go Native
    (native React, that is)!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在React VR范围内。有时，有些事情是React不允许我们做的。在下一章中，我们将转向原生（即原生React）！
- en: Can someone turn off that boiling pot?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有人能把那个沸腾的锅炉关掉吗？
