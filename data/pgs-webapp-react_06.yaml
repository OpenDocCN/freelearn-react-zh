- en: Completing Our App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成我们的应用
- en: It's time to finish up the prototype of our application, and boy, do we have
    our work cut out for us.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候完成我们应用的原型了，哦，我们有很多工作要做。
- en: The skeleton is in place, with all our routes set up and our login screen fully
    complete. However, our chat and user views are blank as of yet, and that's where
    the core functionality of Chatastrophe will live. So, before we show our prototype
    to the board, let's make it actually, uh, work.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 框架已经搭好，所有的路由都设置好了，我们的登录界面也完全完成了。然而，我们的聊天和用户视图目前还是空白的，这就是Chatastrophe的核心功能所在。因此，在向董事会展示我们的原型之前，让我们确保它实际上能够工作。
- en: 'What we''ll be covering this chapter is as listed:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的内容如下：
- en: Loading and displaying chat messages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载和显示聊天消息
- en: Sending and receiving new messages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送和接收新消息
- en: Displaying only certain chat messages on the user profile page
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅在用户个人资料页面上显示特定的聊天消息
- en: React state management
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React状态管理
- en: User stories progress
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户故事进展
- en: Let's briefly check in with the user stories we defined in Chapter 1, *Creating
    Our App Structure,* and see which ones we have already accomplished.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要地检查一下我们在第1章“创建我们的应用结构”中定义的用户故事，看看我们已经完成了哪些。
- en: 'We''ve completed the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了以下内容：
- en: Users should be able to log in and out of the application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 用户应该能够登录和退出应用。
- en: 'The following are unfinished, but are part of the PWA functionality we''ll
    build later:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容尚未完成，但是它们是我们稍后将构建的PWA功能的一部分：
- en: Users should be able to view their messages even when offline
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应该能够在离线时查看他们的消息
- en: Users should receive push notifications when a message is sent by another user
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应该在其他用户发送消息时收到推送通知
- en: Users should be able to install the app to their mobile device
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应该能够将应用安装到他们的移动设备上
- en: Users should be able to load the app in under five seconds, even under shaky
    network conditions
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应该能够在不稳定的网络条件下在五秒内加载应用
- en: 'That leaves us with a list of stories we need to complete before our prototype
    is complete:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们留下了一系列故事，我们需要在我们的原型完成之前完成：
- en: Users should be able to send and receive messages in real time
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应该能够实时发送和接收消息
- en: Users should be able to view all messages by a given author
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应该能够查看特定作者的所有消息
- en: Each of these stories fit with a certain view (Chat view and User view). Let's
    start with the `ChatContainer`, and begin building out our chat box.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些故事中的每一个都与特定的视图（聊天视图和用户视图）相匹配。让我们从`ChatContainer`开始，开始构建我们的聊天框。
- en: ChatContainer skeleton
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ChatContainer框架
- en: 'Our chat view will have two main sections:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的聊天视图将有两个主要部分：
- en: A message display where all chats are listed
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个消息显示，列出所有的聊天
- en: A chat box for the user to type in a new message
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个聊天框，用户可以在其中输入新消息
- en: 'We can start by adding the appropriate `div` tags:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以先添加适当的`div`标签：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Reminder to ensure that your IDs and classNames are the same as mine, lest your
    CSS be different (or even worse).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒确保你的ID和classNames与我的相同，以免你的CSS不同（甚至更糟）。
- en: 'We''ll fill in the input box first. Inside `div#chat-input`, let''s place a
    `textarea`, with a placeholder of `"Add your message…”`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先填写输入框。在`div#chat-input`内，让我们放置一个`textarea`，并设置占位符为“添加你的消息…”：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will configure it to allow the user to press *Enter* to send a message,
    but it''s better to also have a Send button. Below the `textarea`, add a `button`,
    and inside that, we''ll add an `SVG` icon:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置它，以允许用户按“Enter”键发送消息，但最好也有一个发送按钮。在`textarea`下面，添加一个`button`，在其中，我们将添加一个`SVG`图标：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Ensure that your `path fill` and `svg viewBox` properties are the same as mentioned.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的`path fill`和`svg viewBox`属性与提到的相同。
- en: SVGs are a type of image that can be scaled (made larger) without any loss of
    quality. In this case, we're essentially creating a box (the `svg` tag) and then
    drawing a line within the `path` tag. The browser does the actual drawing, so
    there's never any pixelation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: SVG是一种可以缩放（放大）而不会失真的图像类型。在这种情况下，我们基本上创建了一个框（`svg`标签），然后在`path`标签内绘制一条线。浏览器进行实际绘制，所以永远不会有像素化。
- en: 'Let''s also give our `div#ChatContainer` the class of `inner-container` for
    CSS purposes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了CSS的目的，让我们也给我们的`div#ChatContainer`添加`inner-container`类：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If all went well, your app should now look like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你的应用现在应该是这个样子的：
- en: '![](../images/00039.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00039.jpeg)'
- en: This does it for the basic structure of our chat view. Now, we can start discussing
    how we will manage our data--the list of messages coming in from Firebase.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们聊天视图的基本结构。现在，我们可以开始讨论如何管理我们的数据--来自Firebase的消息列表。
- en: Managing data flow
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理数据流
- en: One of the important principles of React is something called **uni-directional
    data flow**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: React的一个重要原则是所谓的**单向数据流**。
- en: In the prototypical React app, data is stored in the state of the highest-level
    component, and passed **down** to lower-level components via `props`. When the
    user interacts with the application, the interaction event is passed **up** through
    the component tree via props, until it arrives at the highest-level component,
    which then modifies the state based on the action.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在原型React应用中，数据存储在最高级组件的状态中，并通过`props`传递给较低级的组件。当用户与应用程序交互时，交互事件通过props通过组件树传递，直到到达最高级组件，然后根据操作修改状态。
- en: The application then forms a big circle--data goes down, events come up, and
    new data goes down. You can also think of it as an elevator, departing from the
    top floor full of data, and then coming back up full of events.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序形成一个大循环--数据下传，事件上传，新数据下传。你也可以把它想象成一部电梯，从充满数据的顶层出发，然后再满载事件返回。
- en: The advantage of this approach is that it's easy to follow the flow of data.
    You can see where it's going (to which child components), and why it's changing
    (in reaction to which events).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优势在于很容易跟踪数据的流动。你可以看到数据流向哪里（传递给哪些子组件），以及为什么会改变（作为对哪些事件的反应）。
- en: Now, this model runs into problems with a complex application with hundreds
    of components. It becomes unwieldy to store all your state in the top-level component,
    and pass all your data and events through props.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这种模式在具有数百个组件的复杂应用程序中会遇到问题。在顶层组件中存储所有状态，并通过props传递所有数据和事件变得难以控制。
- en: Think of a big chain from your top-level component (`App.js`) and a low-level
    component (say, a `button`). If there are dozens of `nested` components, and the
    `button` needs a prop that is derived from the state of `App`, you will have to
    pass that prop down through every single component in the chain. No thanks.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一条从顶层组件（`App.js`）到低层组件（比如一个`button`）的大链条。如果有数十个`嵌套`组件，并且`button`需要一个从`App`状态派生的prop，你将不得不通过每个链条中的每个组件传递这个prop。谢谢，我不要。
- en: There are numerous solutions to this problem of state management, but most work
    on the idea of creating container components throughout the component tree; these
    components have state, and pass it down to a limited number of child components.
    Now we have multiple elevators, some serving the first to third floor, others
    the fifth to twelfth, and so on.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个状态管理问题有很多方法，但大多数都是基于在组件树中创建容器组件的想法；这些组件有状态，并将其传递给有限数量的子组件。现在我们有多部电梯，一些服务于一楼到三楼，另一些服务于五楼到十二楼，依此类推。
- en: We won’t be dealing with any state management in our application since we only
    have four components, but it’s good to keep this in mind as your React app scales.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在我们的应用程序中处理任何状态管理，因为我们只有四个组件，但是在你的React应用程序扩展时，记住这一点是很好的。
- en: The top two React state management libraries are Redux ([https://github.com/reactjs/redux](https://github.com/reactjs/redux))
    and MobX ([https://github.com/mobxjs/mobx](https://github.com/mobxjs/mobx)). I've
    worked extensively with both, and both have their advantages and tradeoffs. In
    short, MobX is better for developer productivity, while Redux is better for keeping
    large applications organized.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个React状态管理库是Redux（[https://github.com/reactjs/redux](https://github.com/reactjs/redux)）和MobX（[https://github.com/mobxjs/mobx](https://github.com/mobxjs/mobx)）。我对两者都有深入的了解，它们都有各自的优势和权衡。简而言之，MobX对开发者的生产力更好，而Redux对于保持大型应用程序有组织性更好。
- en: For our purposes, we can store all our state in our `App` component, and pass
    it down to our child components. Rather than storing our messages in `ChatContainer`,
    we store them in `App` and pass them down to `ChatContainer`. This immediately
    gives us the advantage of also passing them down to `UserContainer`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了我们的目的，我们可以将所有状态存储在我们的`App`组件中，并将其传递给子组件。与其将我们的消息存储在`ChatContainer`中，不如将它们存储在`App`中并传递给`ChatContainer`。这立即给了我们一个优势，也可以将它们传递给`UserContainer`。
- en: In other words, our messages live in the state of `App`, and are shared with
    `UserContainer` and `ChatContainer` via `props`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们的消息存储在`App`的状态中，并通过`props`与`UserContainer`和`ChatContainer`共享。
- en: 'State is the single source of truth in your application, and should never be
    duplicated. It won''t make sense to store two message arrays: one in `ChatContainer`
    and one in `UserContainer`. Instead, store state as high as necessary, and pass
    it down.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 状态是你的应用程序中的唯一真相，并且不应该重复。在`ChatContainer`和`UserContainer`中存储两个消息数组是没有意义的。相反，将状态保持在必要的高度，并将其传递下去。
- en: Long story short, we need to load our messages in `App`, and then pass them
    down to `ChatContainer`. It also makes sense to put `App` in charge of sending
    the messages so that all our message functionality is in one place.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 长话短说，我们需要在`App`中加载我们的消息，然后将它们传递给`ChatContainer`。将`App`负责发送消息也是有道理的，这样我们所有的消息功能都在一个地方。
- en: Let's start with sending our first message!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从发送我们的第一条消息开始！
- en: Creating a message
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一条消息
- en: As in our `LoginContainer`, we need to store the value of our `textarea` in
    state as it changes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的`LoginContainer`一样，我们需要在状态中存储`textarea`的值随着其变化。
- en: We used the state of the `LoginContainer` to store that value. Let's do the
    same with `ChatContainer`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`LoginContainer`的状态来存储该值。让我们在`ChatContainer`中也这样做。
- en: 'You may be wondering, after the preceding discussion: why don''t we just keep
    all our state in `App`? Some will argue for that approach, to keep everything
    in one place; however, this will bloat our `App` component and require us to pass
    multiple `props` between components. It''s better to keep state as high as necessary,
    and no higher; the new message in the chat input will only be relevant to `App`
    when it''s done and submitted, not before that.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的讨论之后，你可能会想：为什么我们不把所有状态都保存在`App`中呢？有人会主张这种方法，把所有东西都放在一个地方；然而，这将使我们的`App`组件变得臃肿，并要求我们在组件之间传递多个`props`。最好将状态保持在必要的高度，而不是更高；在聊天输入中的新消息只有在完成并提交后才与`App`相关，而在此之前并不相关。
- en: Let's get that set up.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设置它。
- en: 'Add this to the `ChatContainer.js`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将此添加到`ChatContainer.js`：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Also, add a method to handle it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 还要添加一个处理它的方法：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, modify our `textarea`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，修改我们的`textarea`：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Best practices say that you should always make your JSX element multiline when
    it has more than two `props` (or the `props` are particularly long).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践说，当JSX元素具有两个以上的`props`（或`props`特别长）时，应该将其多行化。
- en: 'When our user clicks on Send, we want to send the message to `App`, which will
    then send it to Firebase. After that, we reset the field:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击发送时，我们希望将消息发送给`App`，然后`App`会将其发送到Firebase。之后，我们重置字段：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We haven''t added this `onSubmit` prop function yet in `App`, but we can do
    that soon:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有在`App`中添加这个`onSubmit`属性函数，但我们很快就可以做到：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: However, we also want to let users submit by pressing *Enter*. How can we do
    so?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们也希望让用户通过按下*Enter*来提交。我们该怎么做呢？
- en: At the moment, we listen for the change event on the `textarea`, and then call
    the `handleInputChange` method. The prop on `textarea` that listens for changes
    in its value is `onChange`, but there's another event, key-down, which occurs
    whenever the user presses a key.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们监听`textarea`上的更改事件，然后调用`handleInputChange`方法。在`textarea`上监听其值的更改的属性是`onChange`，但还有另一个事件，即按键按下事件，每当用户按下键时都会发生。
- en: We can watch for that event and then check what key was pressed; if it's *Enter*,
    we send our message!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以监听该事件，然后检查按下了什么键；如果是*Enter*，我们就发送我们的消息！
- en: 'Let''s see it in action:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它的效果：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following is the handler for this event:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个事件的处理程序：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The event handler (`handleKeyDown`) is called with an event passed in as the
    first argument automatically. This event has a property named `key`, which is
    a string indicating the value of the key. We also need to prevent the default
    behavior (creating a newline in the `textarea`) before submitting the message.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序（`handleKeyDown`）会自动传入一个事件作为第一个参数。这个事件有一个名为`key`的属性，它是一个指示按键值的字符串。在提交消息之前，我们还需要阻止默认行为（在`textarea`中创建新行）。
- en: You can use this kind of event listener for all sorts of user inputs, from hovering
    over an element to shift-clicking something.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这种类型的事件监听器来监听各种用户输入，从悬停在元素上到按住Shift键点击某物。
- en: 'Before we move to `App.js`, here''s the current state of `ChatContainer`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们转到`App.js`之前，这是`ChatContainer`的当前状态：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Okay, let''s add the last link in the chain to create a message. In `App.js`,
    we need to add a handler for the `onSubmit` event, which we''ll pass in as a prop
    to `ChatContainer`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们添加最后一个链接来创建一条消息。在`App.js`中，我们需要为`onSubmit`事件添加一个处理程序，然后将其作为属性传递给`ChatContainer`：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We want to pass an `onSubmit` prop to `ChatContainer` that equals this method,
    but wait a second, our `ChatContainer` is currently rendered as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要将一个等于这个方法的`onSubmit`属性传递给`ChatContainer`，但等一下，我们当前渲染的`ChatContainer`如下：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`ChatContainer` itself is a prop on our `Route`. How can we give `ChatContainer`
    any `props` at all?'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`ChatContainer`本身是我们`Route`上的一个属性。我们怎么能给`ChatContainer`任何`props`呢？'
- en: It turns out that the React Router provides three distinct methods of rendering
    components inside `Route`. The simplest way is the route (ha ha) we chose earlier,
    passing it in as a prop called `component`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，React Router提供了三种在`Route`内部渲染组件的不同方法。最简单的方法是我们之前选择的路由（哈哈），将其作为名为`component`的属性传递进去。
- en: There's another, better way for our purposes--a prop called `render`, into which
    we pass a function that returns our component.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的来说，还有另一种更好的方法——一个名为`render`的属性，我们通过它传递一个返回我们组件的函数。
- en: The third way to render a component inside `Route` is via a prop called `children`,
    which takes a function with a `match` argument, which is either defined or null,
    depending on whether the `path` prop matches the browser's URL. The JSX returned
    by the function is always rendered, but you can modify it based on the `match`
    argument.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Route`内部渲染组件的第三种方法是通过一个名为`children`的属性，它接受一个带有`match`参数的函数，该参数根据`path`属性是否与浏览器的URL匹配而定义或为null。函数返回的JSX始终被渲染，但您可以根据`match`参数进行修改。
- en: 'Let’s switch our `Route` over to this method:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们的`Route`切换到这种方法：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding example uses an ES6 arrow function with implicit return. This
    is the same as writing `() => { return <ChatContainer onSubmit={this.handleSubmitMessage}
    /> }` or, in ES5, `function() { return <ChatContainer onSubmit={this.handleSubmitMessage}
    /> }`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子使用了一个带有隐式返回的ES6箭头函数。这与写`() => { return <ChatContainer onSubmit={this.handleSubmitMessage}
    /> }`或者在ES5中写`function() { return <ChatContainer onSubmit={this.handleSubmitMessage}
    /> }`是一样的。
- en: Now, we can pass all the props we like to `ChatContainer`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将所有我们喜欢的props传递给`ChatContainer`。
- en: Let's ensure that it works. Try sending a message, and ensure that you see the
    `console.log` we added in `handleSubmit` in `App.js`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确保它有效。尝试发送一条消息，并确保你在`App.js`的`handleSubmit`中添加的`console.log`。
- en: If so, great! Time to move on to the good part--actually sending the message.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，太好了！是时候进入好部分了--实际发送消息。
- en: Sending a message to Firebase
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Firebase发送消息
- en: To write to the Firebase database, first we grab an instance of it, with `firebase.database()`.
    Similar to `firebase.auth()`, this instance comes with some built-in methods we
    can use.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要写入Firebase数据库，首先我们要获取一个实例，使用`firebase.database()`。类似于`firebase.auth()`，这个实例带有一些内置方法可以使用。
- en: The one we will be dealing with in this book is `firebase.database().ref(refName)`.
    `Ref` stands for **reference**, but might be better thought of as a category of
    our data (in SQL databases, what might make up a table).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将处理的是`firebase.database().ref(refName)`。`Ref`代表**引用**，但更好地理解它可能是我们数据的一个类别（在SQL数据库中，可能构成一个表）。
- en: If we want to grab the reference to our users, we use `firebase.database().ref(‘/users’)`.
    For messages, it’s `firebase.database().ref(‘/messages’)`... and so on. We can
    now act on this reference in a variety of ways, such as listening to changes (coming
    later in the chapter), or pushing new data in (which we'll handle right now).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要获取对我们用户的引用，我们使用`firebase.database().ref(‘/users’)`。对于消息，就是`firebase.database().ref(‘/messages’)`...等等。现在，我们可以以各种方式对这个引用进行操作，比如监听变化（稍后在本章中介绍），或者推送新数据（我们现在要处理）。
- en: To add new data to a reference, you use `firebase.database().ref(‘/messages’).push(data)`.
    In this context, it is useful to think of the `ref` as a simple JavaScript array,
    which we're pushing new data into.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要向引用添加新数据，可以使用`firebase.database().ref(‘/messages’).push(data)`。在这个上下文中，可以将`ref`看作一个简单的JavaScript数组，我们向其中推送新数据。
- en: Firebase will take it from there, saving the data to the NoSQL database and
    pushing out a 'value' event to all instances of the application, which we’ll tap
    into later.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase会接管，将数据保存到NoSQL数据库，并向应用程序的所有实例推送一个“value”事件，稍后我们将利用这一点。
- en: Our message data
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的消息数据
- en: We want to save the message text to the database, of course, but we also want
    to save a bit more information.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们希望将消息文本保存到数据库，但我们也希望保存更多的信息。
- en: 'Our users need to be able to see who sent the message (preferably, an email
    address), and be able to navigate to their `users/:id` page. So, we need to save
    the email address of the author with the message as well as a unique user ID.
    Let''s throw in a `timestamp` for good measure:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的用户需要能够看到谁发送了消息（最好是电子邮件地址），并能够导航到他们的`users/:id`页面。因此，我们需要保存消息作者的电子邮件地址以及唯一的用户ID。让我们再加上一个`timestamp`以确保万无一失：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding example uses ES6’s property shorthand for the message field.
    Instead of writing `{ msg: msg }`, we can simply write `{ msg }`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '前面的例子使用了ES6的属性简写来表示消息字段。我们可以简单地写`{ msg }`，而不是`{ msg: msg }`。'
- en: Here, we're taking advantage of the fact that we saved the current user into
    the state of our `App` component, and grabbing the email and the uid (a unique
    ID) from it. Then, we create a `timestamp` with `Date.now()`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们利用了将当前用户保存到`App`组件状态中的事实，并从中获取电子邮件和uid（唯一ID）。然后，我们使用`Date.now()`创建一个`timestamp`。
- en: 'Okay, let''s send it off!:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们发送出去！：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Before we test it, let's open our Firebase console at [console.firebase.google.com](http://console.firebase.google.com)
    and go to the database tab. Here, we can see a real-time representation of our
    database data, so we can check to ensure that our message is being created correctly.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们测试之前，让我们打开Firebase控制台[console.firebase.google.com](http://console.firebase.google.com)并转到数据库选项卡。在这里，我们可以实时查看我们的数据库数据的表示，以便检查我们的消息是否被正确创建。
- en: 'As of now, it should look like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，它应该是这样的：
- en: '![](../images/00040.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00040.jpeg)'
- en: Let's type a message into our chat input, and press **Enter**.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在聊天输入框中输入一条消息，然后按**Enter**。
- en: 'You should see the following instantly appear on the Firebase console:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该立即在Firebase控制台上看到以下内容：
- en: '![](../images/00041.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00041.jpeg)'
- en: Great! We sent our first chat messages, but nothing appears in our app. Let's
    fix that.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们发送了我们的第一条聊天消息，但是在我们的应用中没有显示任何内容。让我们来解决这个问题。
- en: Loading data from Firebase
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Firebase加载数据
- en: As we described earlier, we can listen for changes to a particular reference
    in our database. In other words, we can define a function to run every time `firebase.database().ref(‘/messages’)`
    changes, as a new message comes in.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所描述的，我们可以监听数据库中特定引用的更改。换句话说，我们可以定义一个函数，以便在`firebase.database().ref(‘/messages’)`发生更改时运行，就像新消息进来一样。
- en: 'Before we move on, I''d encourage you to consider two things: where we should
    define this listener, and what the function should do.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我鼓励你考虑两件事情：我们应该在哪里定义这个监听器，以及这个函数应该做什么。
- en: See if you can come up with a possible implementation! After you've brainstormed
    an idea, let's build it.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你能否想出一个可能的实现！在你构思了一个想法之后，让我们来实现它。
- en: 'Here''s the thing: we already have a very similar case in our application.
    Our `firebase.auth().onAuthStateChanged` in our `App#componentDidMount` listens
    for changes in our current user, and updates the `state.user` of our `App`.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上：我们的应用程序中已经有一个非常相似的情况。我们的`App#componentDidMount`中的`firebase.auth().onAuthStateChanged`监听当前用户的更改，并更新我们`App`的`state.user`。
- en: 'We will do the exact same thing with our messages reference, though the syntax
    is a bit different:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用我们的消息引用做同样的事情，尽管语法有点不同：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We use the `.on` function to listen for a `''value''` event from the database.
    Our callback is then called with an argument called `snapshot`. Let''s plug this
    in and send another message, and take a look at what our snapshot looks like:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`.on`函数来监听数据库中的`'value'`事件。然后我们的回调被称为一个叫做`snapshot`的参数。让我们把这个插入进去，然后发送另一条消息，看看我们的快照是什么样子的：
- en: '![](../images/00042.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00042.jpeg)'
- en: Ah, it's not very developer friendly.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 啊，这不太友好开发者。
- en: 'The snapshot is, somewhere in that object, an image of the database structure
    of `/messages`. We can access a more readable form by calling `val()` on it:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 快照是数据库结构`/messages`的一个图像。我们可以通过调用`val()`来访问一个更可读的形式：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../images/00043.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00043.jpeg)'
- en: Now, we can get an object that contains each of our messages, with the message
    ID as the keys.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以得到一个包含每条消息的对象，其中消息ID是键。
- en: Here, we need to do some trickery. We want to update our `state.messages` with
    an array of our messages, but we want to add the message ID to the message object
    (since the message ID is currently the key in the `snapshot.val()`).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要做一些技巧。我们想用消息数组更新我们的`state.messages`，但我们想要将消息ID添加到消息对象中（因为消息ID目前是`snapshot.val()`中的键）。
- en: If this sounds confusing, hopefully it'll be clearer when we see it in action.
    We will create a new array called `messages`, and iterate over our object (using
    a method called `Object.keys`) and then push the message (with the ID) into the
    new array.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这听起来让人困惑，希望当我们看到它实际运行时会更清楚。我们将创建一个名为`messages`的新数组，并遍历我们的对象（使用一个叫做`Object.keys`的方法），然后将带有ID的消息推入新数组中。
- en: 'Let''s extract this to a new function:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个提取到一个新的函数中：
- en: '[PRE19]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Also, the new method:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 还有新的方法：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'What we end up with, in our `console.log`, is a nice array of messages with
    IDs:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `console.log` 中，我们最终得到了一个带有 ID 的消息数组：
- en: '![](../images/00044.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00044.jpeg)'
- en: 'The last step is to save this to state:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将其保存到状态中：
- en: '[PRE21]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we can pass our messages down to `ChatContainer`, and get to work displaying
    them:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将消息传递给 `ChatContainer`，并开始显示它们：
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We''ve made a lot of changes to `App.js`. Here''s the current code:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 `App.js` 进行了许多更改。以下是当前的代码：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Displaying our messages
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示我们的消息
- en: We will use the `Array.map()` function to iterate over our array of messages,
    and create an array of divs to display the data.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `Array.map()` 函数来遍历我们的消息数组，并创建一个 `div` 数组来显示数据。
- en: '`Array.map()` automatically returns an array, which means we can embed that
    functionality right into our JSX. This is a common pattern in React (usually for
    displaying collections of data like this), so it''s worth watching closely.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array.map()` 自动返回一个数组，这意味着我们可以将该功能嵌入到我们的 JSX 中。这是 React 中的一个常见模式（通常用于显示这样的数据集合），因此值得密切关注。'
- en: 'Inside our `message-container`, we create opening and closing squiggly brackets:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `message-container` 中，我们创建了开头和结尾的花括号：
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, we call `map` on our message array, and pass in a function to create
    the new message `div`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在消息数组上调用 `map`，并传入一个函数来创建新的消息 `div`：
- en: '[PRE25]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If all goes well, you should see the following, with all the messages you''ve
    sent:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该看到以下内容，包括你发送的所有消息：
- en: '![](../images/00045.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00045.jpeg)'
- en: You can even try writing a new message, and watch it instantly appear in the
    message container. Magic!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以尝试写一条新消息，然后立即看到它出现在消息容器中。神奇！
- en: 'A few notes about the preceding code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 关于前面的代码，有几点需要注意：
- en: The `map` function goes over each element in the messages array, and creates
    a `div` based on its data. When it's done iterating, it returns that array of
    divs, which is then displayed as part of our JSX.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map` 函数遍历消息数组中的每个元素，并根据其数据创建一个 `div`。当迭代完成时，它会返回一个 `div` 数组，然后作为 JSX 的一部分显示出来。'
- en: One of the quirks of React is that each element on the screen needs a unique
    identifier so that React can update it properly. That's hard for React to do when
    dealing with a collection of the same elements, as we are creating here. Thus,
    we have to give each message div a key prop that is guaranteed to be unique.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React 的一个怪癖是，屏幕上的每个元素都需要一个唯一的标识符，以便 React 可以正确地更新它。当处理一组相同的元素时，这对 React 来说很困难，就像我们在这里创建的一样。因此，我们必须给每个消息
    `div` 一个保证是唯一的 key 属性。
- en: For more on lists and keys, visit [https://facebook.github.io/react/docs/lists-and-keys.html](https://facebook.github.io/react/docs/lists-and-keys.html).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 有关列表和键的更多信息，请访问 [https://facebook.github.io/react/docs/lists-and-keys.html](https://facebook.github.io/react/docs/lists-and-keys.html)。
- en: 'Let''s add a bit more functionality, and display the author name below the
    message, with a link to their user page. We can use the React Router `Link` component
    to do so; it’s similar to an anchor tag (`<a>`), but is optimized for React Router:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们增加一些功能，并在消息下方显示作者姓名，并附带到他们的用户页面的链接。我们可以使用 React Router 的 `Link` 组件来实现；它类似于锚标签（`<a>`），但针对
    React Router 进行了优化：
- en: '[PRE26]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, add it in the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在下面添加它：
- en: '[PRE27]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](../images/00046.jpeg)The `to` prop on the `Link` uses ES6 string interpolation.
    If you wrap your string in backticks ([PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../images/00046.jpeg) `Link` 上的 `to` 属性使用了 ES6 字符串插值。如果你用反引号包裹你的字符串（[PRE28]'
- en: <Route
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <Route
- en: exact
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: exact
- en: path="/"
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: path="/"
- en: render={() => (
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: render={() => (
- en: <ChatContainer
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <ChatContainer
- en: onSubmit={this.handleSubmitMessage}
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: onSubmit={this.handleSubmitMessage}
- en: user={this.state.user}
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: user={this.state.user}
- en: messages={this.state.messages}
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: messages={this.state.messages}
- en: />
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: )}
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: )}
- en: />
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: '[PRE29]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: <div id="message-container">
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="message-container">
- en: '{this.props.messages.map(msg => ('
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messages.map(msg => (();?>'
- en: <div
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <div
- en: key={msg.id}
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: key={msg.id}
- en: className={`message ${this.props.user.email === msg.author &&
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: className={`message ${this.props.user.email === msg.author &&
- en: '''mine''}`}>'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '''mine''}`}>'
- en: <p>{msg.msg}</p>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{msg.msg}</p>
- en: <p className="author">
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <p className="author">
- en: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
- en: </p>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: </p>
- en: </div>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: ))}
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: ))}
- en: </div>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: '[PRE30]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: <div id="message-container">
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="message-container">
- en: '{this.props.messages.map(msg => ('
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messages.map(msg => ('
- en: <div
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <div
- en: key={msg.id}
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: key={msg.id}
- en: className={`message ${this.props.user.email === msg.author &&
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: className={`message ${this.props.user.email === msg.author &&
- en: '''mine''}`}>'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '''mine''}`}>'
- en: <p>{msg.msg}</p>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{msg.msg}</p>
- en: '// Only if the next message''s author is NOT the same as this message''s    author,
    return the following:      <p className="author">'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: // 只有下一条消息的作者与此消息的作者不同，才返回以下内容：<p className="author">
- en: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
- en: </p>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: </p>
- en: </div>
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: ))}
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: ))}
- en: </div>
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: '[PRE31]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: <div id="message-container">
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="message-container">
- en: '{this.props.messages.map((msg, i) => ('
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messages.map((msg, i) => ('
- en: <div
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: <div
- en: key={msg.id}
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: key={msg.id}
- en: className={`message ${this.props.user.email === msg.author &&
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: className={`message ${this.props.user.email === msg.author &&
- en: '''mine''}`}>'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '''mine''}`}>'
- en: <p>{msg.msg}</p>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{msg.msg}</p>
- en: '{(!this.props.messages[i + 1] ||'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '{(!this.props.messages[i + 1] ||'
- en: this.props.messages[i + 1].author !== msg.author) && (
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: this.props.messages[i + 1].author !== msg.author) && (
- en: <p className="author">
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: <p className="author">
- en: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
- en: </p>
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: </p>
- en: )}
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: )}
- en: </div>
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: ))}
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: ))}
- en: </div>
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: '[PRE32]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: <div id="message-container">
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="message-container">
- en: '{this.props.messages.map((msg, i) => ('
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messages.map((msg, i) => ('
- en: <div
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: <div
- en: key={msg.id}
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: key={msg.id}
- en: className={`message ${this.props.user.email === msg.author &&
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: className={`message ${this.props.user.email === msg.author &&
- en: '''mine''}`}>'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '''mine''}`}>'
- en: <p>{msg.msg}</p>
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{msg.msg}</p>
- en: '{this.getAuthor(msg, this.props.messages[i + 1])}'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.getAuthor(msg, this.props.messages[i + 1])}'
- en: </div>
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: ))}
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: ))}
- en: </div>
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: '[PRE33]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: getAuthor = (msg, nextMsg) => {
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: getAuthor = (msg, nextMsg) => {
- en: if (!nextMsg || nextMsg.author !== msg.author) {
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: if (!nextMsg || nextMsg.author !== msg.author) {
- en: return (
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: return (
- en: <p className="author">
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: <p className="author">
- en: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
- en: </p>
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: </p>
- en: );
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '[PRE34]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: export default class ChatContainer extends Component {
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: export default class ChatContainer extends Component {
- en: 'state = { newMessage: '''' };'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 'state = { newMessage: '''' };'
- en: componentDidMount() {
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: componentDidMount() {
- en: this.scrollToBottom();
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: this.scrollToBottom();
- en: '}'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: scrollToBottom = () => {
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: scrollToBottom = () => {
- en: '};'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '[PRE35]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: componentDidUpdate(previousProps) {
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: componentDidUpdate(previousProps) {
- en: if (previousProps.messages.length !== this.props.messages.length) {
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: if (previousProps.messages.length !== this.props.messages.length) {
- en: this.scrollToBottom();
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: this.scrollToBottom();
- en: '}'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE36]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: <div
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: <div
- en: id="message-container"
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: id="message-container"
- en: ref={element => {
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: ref={element => {
- en: this.messageContainer = element;
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: this.messageContainer = element;
- en: '}}>'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '}}>'
- en: '[PRE37]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: import ReactDOM from 'react-dom';
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: import ReactDOM from 'react-dom';
- en: '[PRE38]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: scrollToBottom = () => {
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: scrollToBottom = () => {
- en: const messageContainer = ReactDOM.findDOMNode(this.messageContainer);
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: const messageContainer = ReactDOM.findDOMNode(this.messageContainer);
- en: '}'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE39]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: scrollToBottom = () => {
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: scrollToBottom = () => {
- en: const messageContainer = ReactDOM.findDOMNode(this.messageContainer);
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: const messageContainer = ReactDOM.findDOMNode(this.messageContainer);
- en: if (messageContainer) {
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: if (messageContainer) {
- en: messageContainer.scrollTop = messageContainer.scrollHeight;
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: messageContainer.scrollTop = messageContainer.scrollHeight;
- en: '}'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE40]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: // Beginning of ChatContainer
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: // 聊天容器的开始
- en: <Header>
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: <Header>
- en: <button className="red" onClick={this.handleLogout}>
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: <button className="red" onClick={this.handleLogout}>
- en: Logout
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 注销
- en: </button>
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: </button>
- en: </Header>
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: </Header>
- en: '{this.props.messagesLoaded ? ('
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messagesLoaded ? ('
- en: <div
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: <div
- en: id="message-container"
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: id="message-container"
- en: ref={element => {
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: ref={element => {
- en: this.messageContainer = element;
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: this.messageContainer = element;
- en: '}}>'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '}}>'
- en: '{this.props.messages.map((msg, i) => ('
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messages.map((msg, i) => ('
- en: <div
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <div
- en: key={msg.id}
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: key={msg.id}
- en: className={`message ${this.props.user.email === msg.author &&
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: className={`message ${this.props.user.email === msg.author &&
- en: '''mine''}`}>'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '''mine''}`}>'
- en: <p>{msg.msg}</p>
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{msg.msg}</p>
- en: '{this.getAuthor(msg, this.props.messages[i + 1])}'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.getAuthor(msg, this.props.messages[i + 1])}'
- en: </div>
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: ))}
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: ))}
- en: </div>
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: ') : ('
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: ') : ('
- en: <div id="loading-container">
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="loading-container">
- en: <img src="/assets/icon.png" alt="logo" id="loader" />
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: <img src="/assets/icon.png" alt="logo" id="loader" />
- en: </div>
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: )}
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: )}
- en: <div id="chat-input">
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="chat-input">
- en: // Rest of ChatContainer
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: // Rest of ChatContainer
- en: '[PRE41]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: class App extends Component {
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: class App extends Component {
- en: 'state = { user: null, messages: [], messagesLoaded: false };'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 'state = { user: null, messages: [], messagesLoaded: false };'
- en: '[PRE42]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: componentDidMount() {
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: componentDidMount() {
- en: firebase.auth().onAuthStateChanged(user => {
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: firebase.auth().onAuthStateChanged(user => {
- en: if (user) {
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: if (user) {
- en: this.setState({ user });
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: this.setState({ user });
- en: '} else {'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: this.props.history.push('/login');
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: this.props.history.push('/login');
- en: '}'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: firebase
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: firebase
- en: .database()
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: .database()
- en: .ref('/messages')
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: .ref('/messages')
- en: .on('value', snapshot => {
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: .on('value', snapshot => {
- en: this.onMessage(snapshot);
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: this.onMessage(snapshot);
- en: if (!this.state.messagesLoaded) {
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: if (!this.state.messagesLoaded) {
- en: 'this.setState({ messagesLoaded: true });'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.setState({ messagesLoaded: true });'
- en: '}'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE43]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: <Route exact path="/" render={() => (
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: <Route exact path="/" render={() => (
- en: <ChatContainer
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: <ChatContainer
- en: messagesLoaded={this.state.messagesLoaded}
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: messagesLoaded={this.state.messagesLoaded}
- en: onSubmit={this.handleSubmitMessage}
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: onSubmit={this.handleSubmitMessage}
- en: messages={this.state.messages}
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: messages={this.state.messages}
- en: user={this.state.user} />
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 用户={this.state.user} />
- en: )} />
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: )} />
- en: '[PRE44]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: import React, { Component } from 'react';
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: import React, { Component } from 'react';
- en: import { Link } from 'react-router-dom';
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: import { Link } from 'react-router-dom';
- en: import ReactDOM from 'react-dom';
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: import ReactDOM from 'react-dom';
- en: import Header from './Header';
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: import Header from './Header';
- en: export default class ChatContainer extends Component {
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: export default class ChatContainer extends Component {
- en: 'state = { newMessage: '''' };'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 'state = { newMessage: '''' };'
- en: componentDidMount() {
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: componentDidMount() {
- en: this.scrollToBottom();
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: this.scrollToBottom();
- en: '}'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: componentDidUpdate(previousProps) {
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: componentDidUpdate(previousProps) {
- en: if (previousProps.messages.length !== this.props.messages.length) {
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: if (previousProps.messages.length !== this.props.messages.length) {
- en: this.scrollToBottom();
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: this.scrollToBottom();
- en: '}'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: scrollToBottom = () => {
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: scrollToBottom = () => {
- en: const messageContainer = ReactDOM.findDOMNode(this.messageContainer);
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: const messageContainer = ReactDOM.findDOMNode(this.messageContainer);
- en: if (messageContainer) {
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: if (messageContainer) {
- en: messageContainer.scrollTop = messageContainer.scrollHeight;
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: messageContainer.scrollTop = messageContainer.scrollHeight;
- en: '}'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: handleLogout = () => {
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: handleLogout = () => {
- en: firebase.auth().signOut();
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: firebase.auth().signOut();
- en: '};'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: handleInputChange = e => {
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: handleInputChange = e => {
- en: 'this.setState({ newMessage: e.target.value });'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.setState({ newMessage: e.target.value });'
- en: '};'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: handleSubmit = () => {
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: handleSubmit = () => {
- en: this.props.onSubmit(this.state.newMessage);
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: this.props.onSubmit(this.state.newMessage);
- en: 'this.setState({ newMessage: '''' });'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.setState({ newMessage: '''' });'
- en: '};'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: handleKeyDown = e => {
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: handleKeyDown = e => {
- en: if (e.key === 'Enter') {
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: if (e.key === 'Enter') {
- en: e.preventDefault();
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: e.preventDefault();
- en: this.handleSubmit();
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: this.handleSubmit();
- en: '}'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: getAuthor = (msg, nextMsg) => {
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: getAuthor = (msg, nextMsg) => {
- en: if (!nextMsg || nextMsg.author !== msg.author) {
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: if (!nextMsg || nextMsg.author !== msg.author) {
- en: return (
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: return (
- en: <p className="author">
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: <p className="author">
- en: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>
- en: </p>
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: </p>
- en: );
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: render() {
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: render() {
- en: return (
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: return (
- en: <div id="ChatContainer" className="inner-container">
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="ChatContainer" className="inner-container">
- en: <Header>
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: <Header>
- en: <button className="red" onClick={this.handleLogout}>
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: <button className="red" onClick={this.handleLogout}>
- en: Logout
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: Logout
- en: </button>
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: </button>
- en: </Header>
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: </Header>
- en: '{this.props.messagesLoaded ? ('
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messagesLoaded ? ('
- en: <div
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: <div
- en: id="message-container"
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: id="message-container"
- en: ref={element => {
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: ref={element => {
- en: this.messageContainer = element;
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: this.messageContainer = element;
- en: '}}>'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '}}>'
- en: '{this.props.messages.map((msg, i) => ('
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messages.map((msg, i) => ('
- en: <div
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: <div
- en: key={msg.id}
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: key={msg.id}
- en: className={`message ${this.props.user.email ===
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: className={`message ${this.props.user.email ===
- en: msg.author &&
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: msg.author &&
- en: '''mine''}`}>'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '''mine''}`}>'
- en: <p>{msg.msg}</p>
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{msg.msg}</p>
- en: '{this.getAuthor(msg, this.props.messages[i + 1])}'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.getAuthor(msg, this.props.messages[i + 1])}'
- en: </div>
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: ))}
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: ))}
- en: </div>
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: ') : ('
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: ') : ('
- en: <div id="loading-container">
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="loading-container">
- en: <img src="/assets/icon.png" alt="logo" id="loader" />
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: <img src="/assets/icon.png" alt="logo" id="loader" />
- en: </div>
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: )}
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: )}
- en: <div id="chat-input">
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="chat-input">
- en: <textarea
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: <textarea
- en: placeholder="Add your message..."
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 占位符="添加您的消息..."
- en: onChange={this.handleInputChange}
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: onChange={this.handleInputChange}
- en: onKeyDown={this.handleKeyDown}
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: onKeyDown={this.handleKeyDown}
- en: value={this.state.newMessage}
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: value={this.state.newMessage}
- en: />
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <button onClick={this.handleSubmit}>
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: <button onClick={this.handleSubmit}>
- en: <svg viewBox="0 0 24 24">
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: <svg viewBox="0 0 24 24">
- en: <path fill="#424242"
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: <path fill="#424242"
- en: d="M2,21L23,12L2,3V10L17,12L2,14V21Z" />
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: d="M2,21L23,12L2,3V10L17,12L2,14V21Z" />
- en: </svg>
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: </svg>
- en: </button>
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: </button>
- en: </div>
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </div>
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: );
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE45]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: <Route
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: <Route
- en: path="/users/:id"
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: path="/users/:id"
- en: render={({ history, match }) => (
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: render={({ history, match }) => (
- en: <UserContainer
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: <UserContainer
- en: messages={this.state.messages}
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: messages={this.state.messages}
- en: messagesLoaded={this.state.messagesLoaded}
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: messagesLoaded={this.state.messagesLoaded}
- en: userID={match.params.id}
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: userID={match.params.id}
- en: />
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: )}
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: )}
- en: />
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: '[PRE46]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: <div id="UserContainer" className="inner-container">
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="UserContainer" className="inner-container">
- en: <Header>
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: <Header>
- en: <Link to="/">
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: <Link to="/">
- en: <button className="red">Back To Chat</button>
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: <button className="red">返回聊天</button>
- en: </Link>
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: </Link>
- en: </Header>
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: </Header>
- en: '{this.props.messagesLoaded ? ('
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messagesLoaded ? ('
- en: <h1>Messages go here</h1>
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>消息在这里</h1>
- en: ') : ('
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: ') : ('
- en: <div id="loading-container">
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="loading-container">
- en: <img src="/assets/icon.png" alt="logo" id="loader" />
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: <img src="/assets/icon.png" alt="logo" id="loader" />
- en: '&lt;/div>'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '&lt;/div>'
- en: )}
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: )}
- en: </div>
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: '[PRE47]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '{this.props.messagesLoaded ? ('
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messagesLoaded ? ('
- en: <div id="message-container">
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="message-container">
- en: '{this.props.messages.map(msg => {'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messages.map(msg => {'
- en: if (msg.user_id === this.props.userID) {
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: if (msg.user_id === this.props.userID) {
- en: return (
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: return (
- en: <div key={msg.id} className="message">
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: <div key={msg.id} className="message">
- en: <p>{msg.msg}</p>
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{msg.msg}</p>
- en: </div>
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: );
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '})}'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '})}'
- en: </div>
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: ') : ('
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: ') : ('
- en: <div id="loading-container">
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="loading-container">
- en: <img src="/assets/icon.png" alt="logo" id="loader" />
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: <img src="/assets/icon.png" alt="logo" id="loader" />
- en: </div>
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: )}
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: )}
- en: '[PRE48]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: export default class UserContainer extends Component {
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: export default class UserContainer extends Component {
- en: renderedUserEmail = false;
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: renderedUserEmail = false;
- en: render() {
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: render() {
- en: return (
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: return (
- en: '[PRE49]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: <div id="message-container">
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="message-container">
- en: '{this.props.messages.map(msg => {'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messages.map(msg => {'
- en: if (msg.user_id === this.props.userID) {
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: if (msg.user_id === this.props.userID) {
- en: return (
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: return (
- en: <div key={msg.id} className="message">
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: <div key={msg.id} className="message">
- en: '{this.getAuthor(msg.author)}'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.getAuthor(msg.author)}'
- en: <p>{msg.msg}</p>
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{msg.msg}</p>
- en: </div>
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: );
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '})}'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '})}'
- en: </div>
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: '[PRE50]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: getAuthor = author => {
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: getAuthor = author => {
- en: if (!this.renderedUserEmail) {
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: if (!this.renderedUserEmail) {
- en: this.renderedUserEmail = true;
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: this.renderedUserEmail = true;
- en: return <p className="author">{author}</p>;
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: return <p className="author">{author}</p>;
- en: '}'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '[PRE51]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: import React, { Component } from 'react';
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: import React, { Component } from 'react';
- en: import { Link } from 'react-router-dom';
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: import { Link } from 'react-router-dom';
- en: import Header from './Header';
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: import Header from './Header';
- en: export default class UserContainer extends Component {
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: export default class UserContainer extends Component {
- en: renderedUserEmail = false;
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: renderedUserEmail = false;
- en: getAuthor = author => {
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: getAuthor = author => {
- en: if (!this.renderedUserEmail) {
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: if (!this.renderedUserEmail) {
- en: this.renderedUserEmail = true;
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: this.renderedUserEmail = true;
- en: return <p className="author">{author}</p>;
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: return <p className="author">{author}</p>;
- en: '}'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: render() {
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: render() {
- en: return (
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: return (
- en: <div id="UserContainer" className="inner-container">
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="UserContainer" className="inner-container">
- en: <Header>
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: <Header>
- en: <Link to="/">
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: <Link to="/">
- en: <button className="red">Back To Chat</button>
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: <button className="red">返回聊天</button>
- en: </Link>
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: </Link>
- en: </Header>
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: </Header>
- en: '{this.props.messagesLoaded ? ('
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messagesLoaded ? ('
- en: <div id="message-container">
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="message-container">
- en: '{this.props.messages.map(msg => {'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.props.messages.map(msg => {'
- en: if (msg.user_id === this.props.userID) {
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: if (msg.user_id === this.props.userID) {
- en: return (
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: return (
- en: <div key={msg.id} className="message">
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: <div key={msg.id} className="message">
- en: '{this.getAuthor(msg.author)}'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '{this.getAuthor(msg.author)}'
- en: <p>{msg.msg}</p>
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{msg.msg}</p>
- en: </div>
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: );
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '})}'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '})}'
- en: </div>
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: ') : ('
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: ') : ('
- en: <div id="loading-container">
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: <div id="loading-container">
- en: <img src="/assets/icon.png" alt="logo" id="loader" />
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: <img src="/assets/icon.png" alt="logo" id="loader" />
- en: </div>
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: )}
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: )}
- en: </div>
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: );
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Summary
  id: totrans-540
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Summary
- en: That's it! We've built our complete React application. Your friend is thrilled
    with the final product, but we're far from done.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们已经建立了完整的React应用程序。你的朋友对最终产品感到非常高兴，但我们还远未完成。
- en: We've built a web application. It looks pretty good, but it is not yet a progressive
    web app. There’s a lot more work to be done, but this is where the fun starts.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经建立了一个网络应用程序。它看起来很不错，但它还不是一个渐进式网络应用程序。还有很多工作要做，但这就是乐趣开始的地方。
- en: Our next step is to start converting this app into a PWA. We'll start with looking
    at how we can make our web app more like a native app, and dive into one of the
    most exciting pieces of web technology of recent years--service workers.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是开始将这个应用程序转换成PWA。我们将从研究如何使我们的网络应用程序更像本地应用程序开始，并深入研究近年来最激动人心的网络技术之一--service
    workers。
