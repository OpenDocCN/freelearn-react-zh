- en: React Router
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: React路由器
- en: React, unlike Angular, is a library instead of a framework, meaning specific
    functionalities (for example, routing or PropTypes) are not part of the React
    Core. Instead, routing is handled by a third-party library called **React Router**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与Angular不同，React是一个库而不是一个框架，这意味着特定功能（例如路由或PropTypes）不是React核心的一部分。相反，路由由一个名为**React
    Router**的第三方库处理。
- en: In this chapter, you will see how to implement React Router in your application,
    and by the end of the relevant sections, you will be able to add dynamic routes
    and understand how React Router works.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将看到如何在应用程序中实现React路由器，并在相关部分结束时，您将能够添加动态路由并了解React路由器的工作原理。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the differences between the `react-router`, `react-router-dom`,
    and `react-router-native` packages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解`react-router`，`react-router-dom`和`react-router-native`包之间的区别
- en: How to install and configure React Router
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装和配置React路由器
- en: Adding the `<Switch>` component
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`<Switch>`组件
- en: Adding the `exact` property
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`exact`属性
- en: Adding parameters to the routes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向路由添加参数
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete this chapter, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，您将需要以下内容：
- en: Node.js 12+
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: Visual Studio Code
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: You can find the code for this chapter in the book's GitHub Repository at [https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter12).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在书的GitHub存储库中找到本章的代码[https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter12)。
- en: Installing and configuring React Router
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置React路由器
- en: 'After you create a new React application using `create-react-app`, the first
    thing you need to do is to install React Router v5.x, using the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`create-react-app`创建新的React应用程序后，您需要做的第一件事是安装React Router v5.x，使用以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You probably are confused about why we are installing `react-router-dom` instead
    of `react-router`. React Router contains all the common components of `react-router-dom`
    and `react-router-native`. That means that if you are using React for the web,
    you should use `react-router-dom`, and if you are using React Native, you need
    to use `react-router-native`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会困惑为什么我们要安装`react-router-dom`而不是`react-router`。React Router包含`react-router-dom`和`react-router-native`的所有常见组件。这意味着如果您在Web上使用React，您应该使用`react-router-dom`，如果您在使用React
    Native，则需要使用`react-router-native`。
- en: 'The `react-router-dom` package was created originally to contain version 4,
    and `react-router` uses version 3\. The `react-router-dom` package has some improvements
    over `react-router`. They are listed here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-router-dom`包最初是为了包含版本4而创建的，而`react-router`使用版本3。`react-router-dom`包在`react-router`上有一些改进。它们在这里列出：'
- en: The improved `<Link>` component (which renders `<a>`).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的`<Link>`组件（渲染`<a>`）。
- en: Includes `<BrowserRouter>`, which interacts with the browser `window.history`.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`<BrowserRouter>`，它与浏览器`window.history`交互。
- en: Includes `<NavLink>`, which is a `<Link>` wrapper that knows whether it's active
    or not.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`<NavLink>`，它是一个知道自己是否活动的`<Link>`包装器。
- en: Includes `<HashRouter>`, which uses the hash in the URL to render the components.
    If you have one static page, you should use this component instead of `<BrowserRouter>`.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`<HashRouter>`，它使用URL中的哈希来渲染组件。如果您有一个静态页面，您应该使用这个组件而不是`<BrowserRouter>`。
- en: Creating our sections
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的章节
- en: Let's create some sections to test some basic routes. We need to create four
    stateless components (`About`, `Contact`, `Home`, and `Error404`) and name them
    as `index.tsx` in their directories.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一些部分来测试一些基本路由。我们需要创建四个无状态组件（`About`、`Contact`、`Home`和`Error404`），并将它们命名为它们各自目录中的`index.tsx`。
- en: 'You can add the following to the `src/components/Home.tsx` component:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将以下内容添加到`src/components/Home.tsx`组件中：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `src/components/About.tsx` component can be created with the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/About.tsx`组件可以使用以下内容创建：'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following creates the `src/components/Contact.tsx` component:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建`src/components/Contact.tsx`组件的步骤：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, the `src/components/Error404.tsx` component is created as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`src/components/Error404.tsx`组件创建如下：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After we have created all the functional components, we need to modify our
    `index.tsx` file to import our route file, which we will create in the next step:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 创建所有功能组件后，我们需要修改`index.tsx`文件，以导入我们将在下一步中创建的路由文件：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we need to create the `routes.tsx` file, where we will render our `Home`
    component when the user accesses the root path (`/`):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建`routes.tsx`文件，在用户访问根路径(`/`)时渲染我们的`Home`组件：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After that, we need to modify our `App.tsx` file to render the route components
    as children:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要修改`App.tsx`文件，将路由组件渲染为子组件：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you run the application, you will see the `Home` component in the root (`/`):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行应用程序，您将在根目录(`/`)中看到`Home`组件：
- en: '![](assets/1fe43ab2-7d5b-4a17-8154-8f62e752c41a.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1fe43ab2-7d5b-4a17-8154-8f62e752c41a.png)'
- en: 'Now, let''s add `Error404` when the user tries to access any other route:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当用户尝试访问任何其他路由时，让我们添加`Error404`：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s run the application again. You will see that both the `Home` and `Error404`
    components are rendered:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次运行应用程序。您将看到`Home`和`Error404`组件都被渲染：
- en: '![](assets/7b470c24-6b43-43d0-8664-440f15b4f3fa.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7b470c24-6b43-43d0-8664-440f15b4f3fa.png)'
- en: 'You are probably wondering why this is happening. It''s because we need to
    use the `<Switch>` component to execute just one component if it matches the path.
    For this, we need to import the `Switch` component and add it as a wrapper for
    our routes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道为什么会发生这种情况。这是因为我们需要使用`<Switch>`组件，只有当它匹配路径时才执行一个组件。为此，我们需要导入`Switch`组件，并将其添加为我们路由的包装器：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, if you go to the root (`/`), you will see that the `Home` component and
    `Error404` won''t be executed at the same time, but if we go to `/somefakeurl`,
    we will see that the `Home` component is executed as well, and this is a problem:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您转到根目录(`/`)，您将看到`Home`组件和`Error404`不会同时执行，但是如果我们转到`/somefakeurl`，我们将看到`Home`组件也被执行，这是一个问题：
- en: '![](assets/4350be0f-ff8f-411b-a9fe-9ddfc02bbd7e.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4350be0f-ff8f-411b-a9fe-9ddfc02bbd7e.png)'
- en: 'To fix the problem, we need to add the `exact` prop in the route that we want
    to match. The problem is that `/somefakeurl` will match our root path (`/`), but
    if we want to be very specific about the paths, we need to add the `exact` prop
    to our `Home` route:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决问题，我们需要在要匹配的路由中添加`exact`属性。问题在于`/somefakeurl`将匹配我们的根路径(`/`)，但是如果我们想非常具体地匹配路径，我们需要在`Home`路由中添加`exact`属性：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, if you go to `/somefakeurl` one more time, you will be able to see the
    Error404 component:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您再次访问`/somefakeurl`，您将能够看到Error404组件：
- en: '![](assets/ef641b8e-0018-4766-8356-93b8619c1870.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ef641b8e-0018-4766-8356-93b8619c1870.png)'
- en: 'Now, we can add our other components (`About` and `Contact`):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以添加其他组件（`About`和`Contact`）：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, you can visit `/about`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以访问`/about`：
- en: '![](assets/b7201c1f-4873-4de7-b241-350a37f94c68.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b7201c1f-4873-4de7-b241-350a37f94c68.png)'
- en: 'Alternatively, you can now visit `/contact`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您现在可以访问`/contact`：
- en: '![](assets/e6eeb5a0-b3f7-4189-9fa7-1a31ae08bf40.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e6eeb5a0-b3f7-4189-9fa7-1a31ae08bf40.png)'
- en: Now that you have implemented your first routes, now let's add some parameters
    to the routes in the next section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经实现了你的第一个路由，现在让我们在下一节中向路由添加一些参数。
- en: Adding parameters to the routes
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向路由添加参数
- en: So far, you have learned how to use React Router for basic routes (one-level
    routes). Now, I will show you how to add some parameters to the routes and get
    them into our components.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学会了如何使用React Router来进行基本路由（单层路由）。现在，我将向你展示如何向路由添加一些参数并将它们传递到我们的组件中。
- en: For this example, we will create a `Contacts` component to display a list of
    contacts when we visit the `/contacts` route, but we will show the contact information
    (`name`, `phone`, and `email`) when the user visits `/contacts/:contactId`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个`Contacts`组件，当我们访问`/contacts`路由时，它将显示联系人列表，但当用户访问`/contacts/:contactId`时，它将显示联系人信息（`name`，`phone`和`email`）。
- en: The first thing we need to do is to create our `Contacts` component. Let's use
    the following skeleton.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是创建我们的`Contacts`组件。让我们使用以下骨架。
- en: 'Let''s use these CSS styles:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这些CSS样式：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once you have created the `Contacts` component, you need to import it into
    our route file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了`Contacts`组件，你需要将它导入到我们的路由文件中：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, you will be able to see the `Contacts` component if you go to the `/contacts`
    URL:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你去到`/contacts`的URL，你就能看到`Contacts`组件了：
- en: '![](assets/2f0684f4-fd5b-4559-98d4-9e7f3c73109e.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2f0684f4-fd5b-4559-98d4-9e7f3c73109e.png)'
- en: 'Now that the `Contacts` component is connected to React Router, let''s render
    our contacts as a list:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`Contacts`组件已经连接到React Router，让我们将我们的联系人渲染为列表：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you can see, we are using the `<Link>` component, which will generate an
    `<a>` tag that points to `/contacts/contact.id`, and this is because we will add
    a new nested route into our route file to match the ID of the contact:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们正在使用`<Link>`组件，它将生成一个指向`/contacts/contact.id`的`<a>`标签，这是因为我们将在我们的路由文件中添加一个新的嵌套路由来匹配联系人的ID：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'React Router has a special prop called `match`, which is an object that contains
    all the data related to the route, and if we have parameters, we will be able
    to see them in the `match` object:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: React Router有一个特殊的属性叫做`match`，它是一个包含与路由相关的所有数据的对象，如果我们有参数，我们将能够在`match`对象中看到它们：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `match` prop looks like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`match`属性看起来像这样：'
- en: '![](assets/5e07ca5e-dcbf-4071-91bb-455b6cbd3392.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5e07ca5e-dcbf-4071-91bb-455b6cbd3392.png)'
- en: As you can see, the `match` props contain a lot of useful information. React
    Router also includes the object's history and location. Also, we can get all the
    parameters we pass within the routes; in this case, we are receiving the `contactId`
    parameter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`match`属性包含了很多有用的信息。React Router还包括了对象的历史和位置。此外，我们可以获取我们在路由中传递的所有参数；在这种情况下，我们接收到了`contactId`参数。
- en: 'If you run the application again, you should see your contacts like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你再次运行应用程序，你应该能够看到你的联系人就像这样：
- en: '![](assets/6242d69a-e3df-4538-8e22-73bbc86df9ff.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6242d69a-e3df-4538-8e22-73bbc86df9ff.png)'
- en: 'If you click on John Smith (whose `contactId` is `2`), you will see the contact
    information:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击约翰·史密斯（他的`contactId`是`2`），你会看到联系人的信息：
- en: '![](assets/fdc306b8-aec1-471d-ba18-9e726cb4b6ef.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fdc306b8-aec1-471d-ba18-9e726cb4b6ef.png)'
- en: 'After this, you can add a navbar in the `App` component to access all the routes:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，你可以在`App`组件中添加一个导航栏来访问所有的路由：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, let''s modify our `App` styles:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改我们的`App`样式：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, you will see something like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你会看到类似这样的东西：
- en: '![](assets/ff9aa68e-33e2-4ece-915b-e04e5b403e48.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ff9aa68e-33e2-4ece-915b-e04e5b403e48.png)'
- en: Now you know how to add routes with parameters to your application – this is
    amazing, right?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何向你的应用程序添加带有参数的路由了 - 这太棒了，对吧？
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Our journey through React Router has come to an end, and now you know how to
    install and configure React Router, how to create basic routes, and how to add
    parameters to the nested routes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的React Router之旅已经结束，现在你知道如何安装和配置React Router，如何创建基本路由，以及如何向嵌套路由添加参数。
- en: In the next chapter, we will see how to avoid some of the most common anti-patterns
    in React.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何避免React中一些最常见的反模式。
