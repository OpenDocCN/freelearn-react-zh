- en: Anti-Patterns to Be Avoided
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 要避免的反模式
- en: In this book, you've learned how to apply best practices when writing a React
    application. In the first few chapters, we revisited the basic concepts to build
    a solid understanding, and then we took a leap into more advanced techniques in
    the following chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您已经学会了在编写React应用程序时应用最佳实践。在最初的几章中，我们重新审视了基本概念以建立扎实的理解，然后在接下来的章节中，我们深入了解了更高级的技术。
- en: You should now be able to build reusable components, make components communicate
    with each other, and optimize an application tree to get the best performance.
    However, developers make mistakes, and this chapter is all about the common anti-patterns
    we should avoid when using React.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够构建可重用的组件，使组件彼此通信，并优化应用程序树以获得最佳性能。然而，开发人员会犯错误，本章就是关于在使用React时应避免的常见反模式。
- en: Looking at common errors will help you to avoid them and will aid your understanding
    of how React works and how to build applications in the React way. For each problem,
    we will see an example that shows how to reproduce and solve it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 查看常见错误将帮助您避免它们，并有助于您了解React的工作原理以及如何以React方式构建应用程序。对于每个问题，我们将看到一个示例，展示如何重现和解决它。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Initializing the state using properties
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用属性初始化状态
- en: Using indexes as a key
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用索引作为键
- en: Spreading properties on DOM elements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DOM元素上扩展属性
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章，您将需要以下内容：
- en: Node.js 12+
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: Visual Studio Code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: 'You can find the code for this chapter in the book''s GitHub repository: [https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter13](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter13).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在书的GitHub存储库中找到本章的代码：[https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter13](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter13)。
- en: Initializing the state using properties
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用属性初始化状态
- en: In this section, we will see how initializing the state using properties received
    from the parent is usually an anti-pattern. I have used the word *usually*because,
    as we will see, once we have it clear in our mind what the problems with this
    approach are, we might still decide to use it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用从父级接收的属性初始化状态通常是一种反模式。我使用“通常”这个词，因为正如我们将看到的，一旦我们清楚了这种方法的问题是什么，我们可能仍然决定使用它。
- en: One of the best ways to learn something is by looking at the code, so we will
    start by creating a simple component with a  `+`  button to increment a counter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 学习某事的最佳方法之一是查看代码，因此我们将从创建一个简单的组件开始，其中包含一个`+`按钮来增加计数器。
- en: 'The component is implemented using a  class, as shown in the following snippet
    of code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件是使用类实现的，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s set our `count` state:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们设置我们的`count`状态：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The implementation of the click handler is pretty straightforward – we just
    add `1` to the current `count` value and store the resulting value back in `state`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 单击处理程序的实现非常简单直接-我们只需将`1`添加到当前的`count`值中，并将结果值存储回`state`中：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we render and describe the output, which is composed of the current
    value of the `count` state, and the button to increment it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们渲染并描述输出，其中包括`count`状态的当前值和增加它的按钮：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, let''s render this component, passing `1` as the `count` property:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们渲染此组件，将`1`作为`count`属性传递：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It works as expected – each click on the  *+*  button increments the current
    value. So, what's the problem?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作正常-每次单击`+`按钮时，当前值都会增加。那么问题是什么呢？
- en: 'There are two main errors, which are outlined as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个主要错误，如下所述：
- en: We have a duplicated source of truth.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个重复的真相来源。
- en: If the `count` property passed to the component changes, the state does not
    get updated.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果传递给组件的`count`属性发生更改，则状态不会得到更新。
- en: 'If we inspect the `Counter` element using the React DevTools, we notice that
    `Props` and `State` hold a similar value:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用React DevTools检查`Counter`元素，我们会注意到`Props`和`State`具有相似的值：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This makes it unclear which is the current and trustworthy  value to use inside
    the component and to display to the user.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得在组件内部和向用户显示时不清楚当前和可信的值是哪个。
- en: 'Even worse, clicking  *+*  once makes the values diverge. An example of this
    divergence is shown in the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，点击*+*一次会使值发散。此发散的示例如下代码所示：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At this point, we can assume that the second value represents the current count,
    but this is not explicit and can lead to unexpected behaviors, or wrong values
    down in the tree.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以假设第二个值代表当前计数，但这并不明确，可能会导致意外行为，或者在树下面出现错误的值。
- en: The second problem centers on how the class is created and instantiated by React.
    The `useState` function of the component gets called only once when the component
    is created.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题集中在React如何创建和实例化类上。组件的`useState`函数只在创建组件时调用一次。
- en: In our  `Counter`  component, we read the value of the  `count`  property and
    we store it in the state. If the value of that property changes during the life
    cycle of the application (let's say it becomes  `10`), the  `Counter`  component
    will never use the new value, because it has already been initialized. This puts
    the component in an inconsistent state, which is not optimal and hard to debug.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`Counter`组件中，我们读取`count`属性的值并将其存储在状态中。如果该属性的值在应用程序的生命周期中发生更改（假设它变为`10`），则`Counter`组件永远不会使用新值，因为它已经被初始化。这会使组件处于不一致的状态，这不是最佳的，并且很难调试。
- en: What if we really want to use the prop's value to initialize the component,
    and we know for sure that the value does not change in the future?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们真的想要使用prop的值来初始化组件，并且我们确信该值将来不会改变呢？
- en: 'In that case, it''s best practice to make it explicit and give the property
    a name that makes your intentions clear, such as `initialCount`. For example,
    let''s say we change the prop declaration of the `Counter` component in the following
    way:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，最佳做法是明确表示并给属性命名，以明确您的意图，例如`initialCount`。例如，让我们以以下方式更改`Counter`组件的prop声明：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we use it like so, it is clear that the parent only has a way to initialize
    the counter, but any future values of the `initialCount` property will be ignored:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们这样使用，很明显父级只有一种方法来初始化计数器，但是`initialCount`属性的任何将来的值都将被忽略：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In our next section, we are going to learn about keys.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习有关键的知识。
- en: Using indexes as a key
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用索引作为键
- en: In *Chapter 10*,  *Improving the Performance of Your Applications*, which talks
    about performance and the reconciler, we saw how we can help React figure out
    the shortest path to update the DOM by using the  `key`  prop.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第10章*，*改进应用程序的性能*中，我们看到了如何通过使用`key`属性来帮助React找出更新DOM的最短路径。
- en: The key property uniquely identifies an element in the DOM, and React uses it
    to check whether the element is new or whether it has to be updated when the component
    properties or state change.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: key属性在DOM中唯一标识元素，并且React使用它来检查元素是新的还是在组件属性或状态更改时必须更新。
- en: Using keys is always a good idea and if you don't do it, React gives a warning
    in the console (in development mode). However, it is not simply a matter of using
    a key; sometimes, the value that we decide to use as a key can make a difference.
    In fact, using the wrong key can give us unexpected behaviors in some instances.
    In this section, we will see one of those instances.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 始终使用键是一个好主意，如果不这样做，React会在控制台（开发模式下）中发出警告。但是，这不仅仅是使用键的问题；有时，我们决定用作键的值可能会有所不同。实际上，使用错误的键可能会在某些情况下导致意外行为。在本节中，我们将看到其中一个实例。
- en: 'Let''s again create a  `List`  component, as shown here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次创建一个`List`组件，如下所示：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then we define our state:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义我们的状态：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The implementation of the click handler is slightly different from the previous
    one because in this case, we need to insert a new item at the top of the list:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 单击处理程序的实现与上一个实现略有不同，因为在这种情况下，我们需要在列表顶部插入一个新项目：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, in `render`, we show the list and the `+` button to add the `baz`
    item at the top of the list:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`render`中，我们显示列表和`+`按钮，以在列表顶部添加`baz`项目：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you run the component inside the browser, you will not see any problems;
    clicking the  `+`  button inserts a new item at the top of the list. But let's
    do an experiment.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中运行组件，将不会看到任何问题；单击`+`按钮会在列表顶部插入一个新项目。但让我们做一个实验。
- en: 'Let''s change `render` in the following way, adding an input field near each
    item. We then use an input field because we can edit its content, making it easier
    to figure out the problem:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以以下方式更改`render`，在每个项目旁边添加一个输入字段。然后我们使用输入字段，因为我们可以编辑它的内容，这样更容易找出问题：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If we run this component again in the browser, copy the values of the items
    in the input fields, and then click  *+*, we will get  unexpected  behavior.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中再次运行此组件，复制输入字段中项目的值，然后单击*+*，我们将得到意外的行为。
- en: 'As shown in the following screenshot, the items shift down while the input
    elements remain in the same position, in such a way that their value does not
    match the value of the items anymore:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，项目向下移动，而输入元素保持在原位，这样它们的值不再与项目的值匹配：
- en: '![](assets/1d059f66-fb4c-4ab6-a9bf-feae211546f9.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1d059f66-fb4c-4ab6-a9bf-feae211546f9.png)'
- en: Running the component, clicking +, and checking the console should give us all
    the answers we need.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 运行组件，单击+，并检查控制台应该给我们所有需要的答案。
- en: What we can see is that React, instead of inserting the new element on top,
    swaps the text of the two existing elements, and inserts the last item at the
    bottom as if it was new. The reason it does that is that we  are using the index
    of the `map` function as the key.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到的是，React不是在顶部插入新元素，而是交换了两个现有元素的文本，并将最后一个项目插入到底部，就好像它是新的一样。它这样做的原因是我们将`map`函数的索引用作键。
- en: In fact, the index always starts from  `0`, even if we push a new item to the
    top of the list, so React thinks that we changed the values of the existing two,
    and added a new element at index  `2`. The behavior is the same as it would have
    been without using the key property at all.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，即使我们将一个新项目推送到列表顶部，索引始终从`0`开始，因此React认为我们更改了现有两个的值，并在索引`2`处添加了一个新元素。行为与根本不使用键属性时相同。
- en: This is a very common pattern because we may think that providing any key is
    always the best solution, but it is not like that at all. The key has to be unique
    and stable, identifying one, and only one, item.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常常见的模式，因为我们可能认为提供任何键都是最佳解决方案，但实际情况并非如此。键必须是唯一且稳定的，只能标识一个项目。
- en: To solve this problem, we can, for example, use the value of the item if we
    expect it not to be repeated within the list, or create a unique identifier.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以，例如，使用项目的值，如果我们期望它在列表中不重复，或者创建一个唯一标识符。
- en: Spreading properties on DOM elements
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在DOM元素上扩展属性
- en: There is a common practice that has recently been described as an anti-pattern
    by Dan Abramov;it also triggers a warning in the console when you do it in your
    React application.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，有一种常见的做法被丹·阿布拉莫夫描述为反模式；当您在React应用程序中这样做时，它还会触发控制台中的警告。
- en: 'It is a technique that is widely used in the community and I have personally
    seen it multiple times in real-world projects. We usually spread the properties
    to the elements to avoid writing every single one manually, which is shown as
    follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是社区中广泛使用的一种技术，我个人在现实项目中多次看到过。我们通常将属性扩展到元素上，以避免手动编写每个属性，如下所示：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This works very well and it gets transpiled into the following code by Babel:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有效，并且通过Babel转译为以下代码：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: However, when we spread properties into a DOM element, we run the risk of adding
    unknown HTML attributes, which is bad practice.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们将属性扩展到DOM元素时，我们有可能添加未知的HTML属性，这是不好的实践。
- en: The problem is not related only to the spread operator; passing non-standard
    properties one by one leads to the same issues and warnings. Since the spread
    operator  hides  the single properties we are spreading, it is even harder to
    figure out what we are passing to the element.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 问题不仅与扩展运算符有关；逐个传递非标准属性也会导致相同的问题和警告。由于扩展运算符隐藏了我们正在传递的单个属性，因此更难以弄清楚我们正在传递给元素的内容。
- en: 'To see the warning in the console, a basic operation we can do is render the
    following component:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要在控制台中看到警告，我们可以执行以下基本操作：渲染以下组件：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The message we get looks like the following because the `foo` property is not
    valid for a `div` element:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到的消息看起来像下面这样，因为“foo”属性对于“div”元素是无效的：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this case, as we said, it is easy to figure out which attribute we are passing
    and remove it, but if we use the spread operator, as in the following example,
    we cannot control which properties are passed from the parent:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，正如我们所说的，很容易弄清楚我们正在传递哪个属性并将其删除，但是如果我们使用扩展运算符，就像以下示例中一样，我们无法控制从父级传递的属性：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we use the component in the following way, there are no issues:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们以以下方式使用组件，就不会出现问题：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This, however, is not the case if we do something such as the following. React
    complains because we are applying a non-standard attribute to the DOM element:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们做类似以下的事情，情况就不同了。React会抱怨，因为我们正在向DOM元素应用非标准属性：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: One solution we can use to solve this problem is to create a property called  `domProps`  that
    we can spread safely to the component because we are explicitly saying that it
    contains valid DOM properties.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用的一个解决方案来解决这个问题是创建一个名为“domProps”的属性，我们可以安全地将其扩展到组件上，因为我们明确表示它包含有效的DOM属性。
- en: 'For example, we can  change the  `Spread`  component in the following  way:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以按照以下方式更改“Spread”组件：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can then use it as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以这样使用它：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As we have seen many times with React, it's always good practice to be explicit.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在React中多次看到的那样，明确是一个好的实践。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Knowing all the best practices is always a good thing, but sometimes being aware
    of anti-patterns helps us avoid taking the wrong path. Most importantly, learning
    the reasons why some techniques are considered bad practice helps us understand
    how React works, and how we can use it effectively.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 了解所有最佳实践总是一件好事，但有时了解反模式可以帮助我们避免走错路。最重要的是，了解为什么某些技术被认为是不良实践的原因，可以帮助我们理解React的工作原理，以及如何有效地使用它。
- en: In this chapter, we covered four different ways of using components that can
    harm the performance and behavior of our web applications.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了四种不同的使用组件的方式，这些方式可能会影响我们的Web应用程序的性能和行为。
- en: For each one of those, we used an example to reproduce the problem and supplied
    the changes to apply in order to fix the issue.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 针对每一个问题，我们都使用了一个示例来重现问题，并提供了需要应用的更改来解决问题。
- en: We learned why using properties to initialize the state can result in inconsistencies
    between the state and the properties. We also saw how using the wrong key attribute
    can produce bad effects on the reconciliation algorithm. Finally, we learned why
    spreading non-standard properties to DOM elements is considered an anti-pattern.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到为什么使用属性来初始化状态可能会导致状态和属性之间的不一致。我们还看到了如何使用错误的键属性可能会对协调算法产生不良影响。最后，我们了解到为什么将非标准属性扩展到DOM元素被视为一种反模式。
- en: In the next chapter, we will look into deploying our React application to production.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何将我们的React应用部署到生产环境中。
