- en: Mastering Redux
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精通Redux
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将介绍以下配方：
- en: Creating a Redux store
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Redux存储
- en: Making action creators and dispatching actions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建操作创建者和分派操作
- en: Implementing Firebase with Redux
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Redux实现Firebase
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Redux is a predictable state container for JavaScript apps. That means Redux
    can be used with vanilla JavaScript or frameworks/libraries such as Angular and
    jQuery. Redux is mainly a library responsible for issuing state updates and responses
    to actions. Redux is widely used with React. Instead of directly modifying the
    state of the application, the modification is handled by emitting events called
    actions. These events are functions (also known as action creators) that always
    return two key properties, a `type` (which indicates the type of action being
    performed, and the types should typically be defined as string constants) and
    a `payload` (the data you want to pass within the action). These functions emit
    events that are subscribed to by the reducers. The reducers are pure functions
    written to decide how each action will transform the state of the application.
    All state changes are handled in a single place: the Redux Store.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Redux是JavaScript应用程序的可预测状态容器。这意味着Redux可以与原生JavaScript或诸如Angular和jQuery之类的框架/库一起使用。Redux主要是一个负责发出状态更新和响应操作的库。Redux广泛与React一起使用。修改应用程序状态的方式是通过发出称为操作的事件来处理，而不是直接修改应用程序的状态。这些事件是函数（也称为操作创建者），始终返回两个关键属性，即`type`（表示正在执行的操作类型，类型通常应定义为字符串常量）和`payload`（要在操作中传递的数据）。这些函数发出的事件由减速器订阅。减速器是纯函数，用于决定每个操作将如何转换应用程序的状态。所有状态更改都在一个地方处理：Redux存储。
- en: 'Without Redux, complex patterns are needed to communicate changes between our
    application components. Redux simplifies this by broadcasting state changes to
    components by using an application store. Within a React Redux application, components
    will subscribe to the store while the store broadcasts changes to the components.
    This diagram describes perfectly how Redux works:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 没有Redux，需要复杂的模式来在应用程序组件之间通信。Redux通过使用应用程序存储将状态更改广播到组件来简化此过程。在React Redux应用程序中，组件将订阅存储，而存储将更改广播到组件。此图表完美地描述了Redux的工作原理：
- en: '![](assets/1864eaa9-7cac-44ea-b7ab-c054633d32e6.png)Redux proposes to handle
    our Redux state as immutable. However, the objects and arrays in JavaScript are
    not, which can cause us to mutate the state by mistake directly*.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/1864eaa9-7cac-44ea-b7ab-c054633d32e6.png)Redux建议将Redux状态处理为不可变的。然而，JavaScript中的对象和数组并非如此，这可能会导致我们错误地直接改变状态*。*'
- en: 'These are the three principles of Redux:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是Redux的三个原则：
- en: '**Single source of truth:** The state of your whole application is stored in
    an object tree within a single store.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一数据源：**整个应用程序的状态存储在单个存储中的对象树中。'
- en: '**The state is read-only:** The only way to change the state is to emit an
    action, an object describing what happened.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态是只读的：**更改状态的唯一方法是发出操作，描述发生了什么的对象。'
- en: '**Changes are made with pure functions:** To specify how the state tree is
    transformed by actions, you write pure reducers.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用纯函数进行更改：**为了指定状态树如何被操作转换，您编写纯减速器。'
- en: This information was extracted from the Official site of Redux. To read more,
    visit [https://redux.js.org/introduction/three-principles](https://redux.js.org/introduction/three-principles).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此信息摘自Redux的官方网站。要了解更多，请访问[https://redux.js.org/introduction/three-principles](https://redux.js.org/introduction/three-principles)。
- en: '**What is an action?**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是操作？**'
- en: Actions are payloads of information that send data from your application to
    your store. They are the only source of information for the store. You send them
    to the store using `store.dispatch()`. The actions are simple JavaScript objects
    and must have a property called `type` that indicates the type of the action being
    performed and a `payload` that is the information contained in action.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 动作是从应用程序发送数据到存储的信息有效载荷。它们是存储的唯一信息来源。您可以使用`store.dispatch()`将它们发送到存储。动作是简单的JavaScript对象，必须具有一个名为`type`的属性，指示正在执行的动作类型，以及一个`payload`，其中包含动作中包含的信息。
- en: '**What is immutability?**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是不可变性？**'
- en: Immutability is a fundamental concept in Redux. To change the state, a new object
    must be returned.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变性是Redux中的一个基本概念。要更改状态，必须返回一个新对象。
- en: 'These are the immutable types in JavaScript:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是JavaScript中的不可变类型：
- en: Number
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字
- en: String
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Boolean
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值
- en: Undefined
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未定义
- en: 'Null'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空
- en: 'These are the mutable types in JavaScript:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是JavaScript中的可变类型：
- en: Arrays
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Functions
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: Objects
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象
- en: '**Why immutability?**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么要不可变性？**'
- en: '**More clarity**: We know who changed the state (the reducer)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更清晰**：我们知道谁改变了状态（reducer）'
- en: '**Better performance**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的性能**'
- en: '**Easy debugging: **We can use Redux DevTools (we are going to cover that topic
    in [Chapter 12](1daa68c4-442d-479f-b1b6-3efa80592901.xhtml), *Testing and Debugging*)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于调试：**我们可以使用Redux DevTools（我们将在[第12章](1daa68c4-442d-479f-b1b6-3efa80592901.xhtml)中介绍该主题，*测试和调试*）'
- en: 'We can work with immutability in the following ways:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式使用不可变性：
- en: ES6**:**
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ES6：**
- en: '`Object.assign`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object.assign`'
- en: '`Spread` operator (...)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Spread`操作符（...）'
- en: Libraries**:**
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库：**
- en: '`Immutable.js`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Immutable.js`'
- en: '`Lodash` (merge and extend)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Lodash`（合并和扩展）'
- en: '**What is a reducer?**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是reducer？**'
- en: 'A reducer resembles a meat grinder. In the meat grinder, we add the ingredients
    on top (state and action), and at the other end we get the result (a new state):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: reducer类似于一个绞肉机。在绞肉机中，我们在顶部添加原料（状态和动作），在另一端得到结果（新状态）：
- en: '![](assets/e9b74645-270f-453e-bbc2-42d4f76337d1.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e9b74645-270f-453e-bbc2-42d4f76337d1.png)'
- en: In technical terms, the reducer is a pure function that receives two parameters
    (the current state and the action), and you return a new immutable state depending
    on the action.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术术语中，reducer是一个纯函数，它接收两个参数（当前状态和动作），并根据动作返回一个新的不可变状态。
- en: '**Types of components**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件类型**'
- en: 'Container:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 容器：
- en: Focuses on how things work
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专注于工作原理
- en: Is connected to Redux
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到Redux
- en: Dispatches Redux actions
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分派Redux动作
- en: Is generated by `react-redux`
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由`react-redux`生成
- en: 'Presentational:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 展示性：
- en: Focuses on how things look
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专注于外观
- en: Is not connected to Redux
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未连接到Redux
- en: Receives data or functions via props
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过props接收数据或函数
- en: Most of the time are Stateless
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数时间是无状态的
- en: '**Redux Flow**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**Redux流程**'
- en: 'The Redux Flow starts when we call an action from the UI (`React` component).
    This action will send the information (`type` and `payload`) to the store, which
    interacts with the reducers to update the state based on the action type. Once
    the state is updated by the reducer, it returns the value to the store, and then
    the store sends the new value to our React application:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Redux流程在从UI（`React`组件）调用动作时开始。此动作将向存储发送信息（`type`和`payload`），存储将与reducer交互以根据动作类型更新状态。一旦reducer更新了状态，它将将值返回给存储，然后存储将新值发送到我们的React应用程序：
- en: '![](assets/5814d1cd-42ca-41a5-b92e-365f01b5fd47.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5814d1cd-42ca-41a5-b92e-365f01b5fd47.png)'
- en: Creating a Redux Store
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Redux存储
- en: A store holds the whole state of your application, and the only way to change
    the state inside is by dispatching an action. A store is not a class; it is just
    an object with a few methods on it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 存储保存应用程序的整个状态，更改内部状态的唯一方法是分派动作。存储不是一个类；它只是一个带有一些方法的对象。
- en: 'The store methods are as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 存储方法如下：
- en: '`getState()`**: **Returns the current state of your application'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getState()`**: **返回应用程序的当前状态'
- en: '`dispatch(action)`: Dispatches an action and is the only way to trigger a state
    change'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dispatch(action)`: 分派一个动作，是触发状态改变的唯一方式'
- en: '`subscribe(listener)`: Adds a change listener that is called any time an action
    is dispatched'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subscribe(listener)`: 添加一个变更监听器，每次分派一个动作时都会调用它'
- en: '`replaceReducer(nextReducer)`:Replaces the reducer that is currently used by
    the store to calculate the state'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`replaceReducer(nextReducer)`: 替换当前由存储使用的reducer来计算状态'
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To work with Redux, we need to install the following packages:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Redux，我们需要安装以下软件包：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First, we need to create a file for our store at `src/shared/redux/configureStore.js`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为我们的存储创建一个文件，位于`src/shared/redux/configureStore.js`：
- en: 'Let''s go ahead and write the following code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续编写以下代码：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'File: src/shared/redux/configureStore.js'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/redux/configureStore.js
- en: 'The second thing we need to do is to create our `initialState` variable in
    our `public/index.html` file. For now, we will create a device state to detect
    whether the user is using a mobile or a desktop:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的第二件事是在我们的`public/index.html`文件中创建我们的`initialState`变量。现在，我们将创建一个设备状态，以检测用户是使用手机还是台式机：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'File: public/index.html'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：public/index.html
- en: 'We need to create a `reducers` directory in our shared folder. The first reducer
    we need to create is `deviceReducer`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在我们的共享文件夹中创建一个`reducers`目录。我们需要创建的第一个reducer是`deviceReducer`：
- en: '[PRE3]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'File: src/shared/reducers/deviceReducer.js'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/reducers/deviceReducer.js
- en: 'Once we have created `deviceReducer`, we need to create an `index.js` file,
    where we are going to import all our reducers and combine them into a `rootReducer`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们创建了`deviceReducer`，我们需要创建一个`index.js`文件，在这里我们将导入所有我们的reducer并将它们组合成一个`rootReducer`：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'File: src/shared/reducers/index.js'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/reducers/index.js
- en: 'Now let''s modify our `src/index.js` file. We need to create our Redux Store
    and pass it to our provider:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们修改我们的`src/index.js`文件。我们需要创建我们的Redux存储并将其传递给我们的提供者：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we can edit our `Home` component. We need to connect our component to Redux
    using `connect` from `react-redux`, and then, using `mapStateToProps`, we are
    going to retrieve the device''s state:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以编辑我们的`Home`组件。我们需要使用`react-redux`中的`connect`将我们的组件连接到Redux，然后使用`mapStateToProps`，我们将检索设备的状态：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you followed all the steps correctly, you should be able to see this view
    using Chrome in your desktop:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正确地按照所有步骤进行了操作，您应该能够在桌面上使用Chrome看到这个视图：
- en: '![](assets/44c89862-1ff2-4b18-b5b8-a1ed4df7506e.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/44c89862-1ff2-4b18-b5b8-a1ed4df7506e.png)'
- en: 'And if you activate the Chrome Device Emulator, or if you use a real device
    or the iPhone simulator, you will see this view:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您激活Chrome设备模拟器，或者使用真实设备或iPhone模拟器，您将看到这个视图：
- en: '![](assets/5e0f3f18-83f4-4ac5-a99b-5e974353eff2.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5e0f3f18-83f4-4ac5-a99b-5e974353eff2.png)'
- en: '**What is mapStateToProps?**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是mapStateToProps?**'
- en: 'The `mapStateToProps` function typically confuses many people, but it is easy
    to understand. It takes a piece of the state (from the store), and it passes it
    into your component as a `prop`. In other words, the parameter that receives `mapStateToProps`
    is the Redux state, and inside you will have all the reducers you have defined
    in `rootReducer`, and then you return an object with the data you need to send
    to your component. Here''s an example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapStateToProps`函数通常会让很多人感到困惑，但它很容易理解。它获取状态的一部分（来自存储），并将其作为`prop`传递给您的组件。换句话说，接收`mapStateToProps`的参数是Redux状态，在里面您将拥有您在`rootReducer`中定义的所有reducer，然后您返回一个包含您需要发送到组件的数据的对象。这里有一个例子：'
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you can see, the state has a `device` node, which is our `deviceReducer`;
    there are other ways to do this that, most of the time, confuse many people. One
    way is by using ES6 destructuring and arrow functions something like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，状态有一个`device`节点，这是我们的`deviceReducer`；还有其他方法可以做到这一点，大多数情况下会让很多人感到困惑。一种方法是使用ES6解构和箭头函数，类似于这样：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Also, there is another way to do it directly in the `connect` middleware. Usually,
    this can be confusing, to begin with, but once you get used to it, it''s the way
    to go. I typically do this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种方法可以直接在`connect`中间件中进行。通常，这一开始可能会让人困惑，但一旦习惯了，这就是方法。我通常这样做：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After we map our Redux state to the props, we can retrieve the data like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在将Redux状态映射到props之后，我们可以像这样检索数据：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, for the second parameter, `mapDispatchToProps`, I directly sent
    a null value since we are not dispatching an action in this component yet. In
    the next recipe, I am going to talk about `mapDispatchToProps`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，对于第二个参数`mapDispatchToProps`，我直接发送了一个空值，因为我们还没有在这个组件中分发动作。在下一个示例中，我将讨论`mapDispatchToProps`。
- en: Making action creators and dispatching actions
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建动作创建者和分发动作
- en: Actions are the most crucial pieces of Redux; they are responsible for triggering
    state updates in our Redux Store. In this recipe, we are going to display the
    top 100 cryptocurrencies listed on [http://www.coinmarketcap.com](http://www.coinmarketcap.com) using
    their public API.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 动作是Redux中最关键的部分；它们负责触发Redux Store中的状态更新。在这个示例中，我们将使用它们的公共API显示[http://www.coinmarketcap.com](http://www.coinmarketcap.com)上列出的前100种加密货币。
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we need to install Axios (a promise-based HTTP client for
    the browser and Node.js) and Redux Thunk (a thunk is a function that wraps an
    expression to delay its evaluation):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要安装Axios（一个基于承诺的浏览器和Node.js的HTTP客户端）和Redux Thunk（thunk是一个包装表达式以延迟其评估的函数）：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We are going to use the same code we created in the last recipe (`Repository:
    /Chapter05/Recipe1/store`) and add some modifications:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将使用我们在上一个示例中创建的相同代码（`Repository: /Chapter05/Recipe1/store`）并进行一些修改：'
- en: 'First, we need to create new folders: `src/actions`, `src/reducers`, `src/components/Coins`,
    and `src/shared/utils`.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建新的文件夹：`src/actions`，`src/reducers`，`src/components/Coins`和`src/shared/utils`。
- en: 'The first file we need to create is`src/actions/actionTypes.js`, where we need
    to add our constants for our actions:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建的第一个文件是`src/actions/actionTypes.js`，在这里我们需要为我们的动作添加常量：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'File: src/actions/actionTypes.js'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/actions/actionTypes.js
- en: Maybe you are wondering why we need to create a constant with the same name
    as the string. It is because, when using constants, we can't have duplicate constant
    names (we will get an error if we repeat one by mistake). Another reason is that
    the actions are used in two files, in the actual actions file and then in our
    reducer. To avoid repeating the strings, I decided to create the `actionTypes.js`
    file and write our constants once.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 也许您想知道为什么我们需要创建一个与字符串相同名称的常量。这是因为在使用常量时，我们不能有重复的常量名称（如果我们错误地重复一个常量名称，我们将会收到错误）。另一个原因是动作在两个文件中使用，在实际的动作文件中以及在我们的减速器中。为了避免重复字符串，我决定创建`actionTypes.js`文件并写入我们的常量。
- en: 'I like to divide my actions into three parts: `request`, `received`, and `error`.
    I called those main actions base actions, and we need to create a file for these
    actions in `src/shared/redux/baseActions.js`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我喜欢将我的动作分为三部分：`request`，`received`和`error`。我称这些主要动作为基本动作，我们需要在`src/shared/redux/baseActions.js`中为这些动作创建一个文件：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'File: src/shared/redux/baseActions.js'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/redux/baseActions.js
- en: 'After we have built our `baseActions.js` file, we need to create another file
    for our actions, and this should be inside `src/actions/coinsActions.js`. For
    this recipe, we will use the public API from `CoinMarketCap` ([https://api.coinmarketcap.com/v1/ticker/](https://api.coinmarketcap.com/v1/ticker/)):'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们构建了`baseActions.js`文件之后，我们需要为我们的actions创建另一个文件，这应该在`src/actions/coinsActions.js`内。对于这个示例，我们将使用`CoinMarketCap`的公共API（[https://api.coinmarketcap.com/v1/ticker/](https://api.coinmarketcap.com/v1/ticker/)）：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'File: src/actions/coinsActions.js'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/actions/coinsActions.js
- en: 'Once we have our actions file ready, we need to create our reducer file to
    update our Redux state based on our actions. Let''s create a file in `src/reducers/coinsReducer.js`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们的actions文件准备好了，我们需要创建我们的reducer文件来根据我们的actions更新我们的Redux状态。让我们在`src/reducers/coinsReducer.js`中创建一个文件：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'File: src/reducers/coinsReducer.js'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/reducers/coinsReducer.js
- en: 'Then we need to add our reducer to our `combineReducers` in `src/shared/reducers/index.js`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们需要将我们的reducer添加到`src/shared/reducers/index.js`中的`combineReducers`中：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: File: src/shared/reducers/index.js
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/reducers/index.js
- en: 'As you can see, I included the `getNewState` util; this is a basic function
    that performs an `Object.assign`, but is more explicit and easy to understand,
    so let''s create our `utils` file at `src/shared/utils/frontend.js`. The `isFirstRender`
    function is required for our component to validate whether our data is empty or
    not the first time we try to render:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，我包含了`getNewState`工具；这是一个执行`Object.assign`的基本函数，但更明确和易于理解，所以让我们在`src/shared/utils/frontend.js`中创建我们的`utils`文件。`isFirstRender`函数是我们的组件需要验证我们的数据是否为空的第一次尝试渲染：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'File: src/shared/utils/frontend.js'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/utils/frontend.js
- en: 'Now we need to create a `Container` component at `src/components/Coins/index.js`.
    In the introduction, I mentioned there are two types of components: `container`
    and `presentational`. The container must be connected to Redux and should not
    have any JSX code, just our `mapStateToProps` and `mapDispatchToProps`, and then
    on the export, we can pass the `presentational` component that we are going to
    render, passing as props the values of the actions and our Redux state. To create
    our `mapDispatchToProps` function, we need to use the `bindActionCreators` method from
    our Redux library. This will bind our `dispatch` method to all the actions we
    pass. There are different ways to do this without `bindActionCreators`, but using
    this method is considered good practice:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要在`src/components/Coins/index.js`创建一个`Container`组件。在介绍中，我提到了有两种类型的组件：`container`和`presentational`。容器必须连接到Redux，并且不应该有任何JSX代码，只有我们的`mapStateToProps`和`mapDispatchToProps`，然后在导出时，我们可以传递我们要渲染的`presentational`组件，将actions的值和我们的Redux状态作为props传递。要创建我们的`mapDispatchToProps`函数，我们需要使用Redux库中的`bindActionCreators`方法。这将把我们的`dispatch`方法绑定到我们传递的所有actions上。有不使用`bindActionCreators`的不同方法，但使用这种方法被认为是一个好的做法：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'File: src/components/Coins/index.js'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Coins/index.js
- en: 'The `Coins` component that we are importing in our container is as follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在容器中导入的`Coins`组件如下：
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'File: src/components/Coins/Coins.jsx'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Coins/Coins.jsx
- en: 'And the CSS for this component is as follows:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个组件的CSS如下：
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'File: src/components/Coins/Coins.css'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Coins/Coins.css
- en: 'In our `src/shared/redux/configureStore.js` file, we need to import `redux-thunk`
    and use the `applyMiddleware` method to use this library in our Redux Store:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`src/shared/redux/configureStore.js`文件中，我们需要导入`redux-thunk`并使用`applyMiddleware`方法在Redux
    Store中使用这个库：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'File: src/shared/redux/configureStore.js'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/redux/configureStore.js
- en: 'Let''s add the link to `/coins` in our `Header` component:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`Header`组件中添加到`/coins`的链接：
- en: '[PRE23]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'File: src/shared/components/layout/Header.jsx'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/components/layout/Header.jsx
- en: 'Finally, the last piece of the puzzle is to add our component (container) to
    our `src/routes.jsx` file:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，谜题的最后一部分是将我们的组件（容器）添加到我们的`src/routes.jsx`文件中：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'File: src/routes.jsx'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/routes.jsx
- en: How it works...
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you open the API ([https://api.coinmarketcap.com/v1/ticker/](https://api.coinmarketcap.com/v1/ticker/))
    you will see the JSON object like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开API（[https://api.coinmarketcap.com/v1/ticker/](https://api.coinmarketcap.com/v1/ticker/)），您将看到JSON对象如下：
- en: '![](assets/6194b6fa-fa14-43d5-9f57-8d1c34574af3.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6194b6fa-fa14-43d5-9f57-8d1c34574af3.png)'
- en: 'We will get an array of objects with the top 100 coins in [https://coinmarketcap.com](https://coinmarketcap.com).
    If you followed all the steps correctly, you would be able to see this view:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获得一个包含前100个硬币的对象数组[https://coinmarketcap.com](https://coinmarketcap.com)。如果您正确地按照所有步骤操作，您将能够看到这个视图：
- en: '![](assets/eb37334a-f135-4f72-a4c7-d2e4515c541f.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eb37334a-f135-4f72-a4c7-d2e4515c541f.png)'
- en: Implementing Firebase with Redux
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Redux实现Firebase
- en: Firebase is a Backend-as-a-Service (BaaS) that is part of the Google Cloud Platform.
    One of the most popular services of Firebase is the Realtime Database, which uses
    a WebSocket to sync your data. Firebase also offers services for file storage,
    authentication (social media and email/password authentication), hosting, and
    more.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase是Google云平台的一部分的后端即服务（BaaS）。Firebase最受欢迎的服务之一是实时数据库，它使用WebSocket来同步您的数据。Firebase还提供文件存储、身份验证（社交媒体和电子邮件/密码身份验证）、托管等服务。
- en: You can use Firebase mainly for real-time applications, but you can also use
    it as your regular database for non-real-time applications if you want to. Firebase
    is supported by many languages (such as JavaScript, Java, Python, and Go) and
    platforms such as Android, iOS, and the web.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以主要用Firebase来进行实时应用程序，但如果您愿意，您也可以将其用作非实时应用程序的常规数据库。Firebase支持许多语言（如JavaScript、Java、Python和Go）和平台，如Android、iOS和Web。
- en: Firebase is free but, of course, if you need more capacity, they have different
    plans depending on your project's requirements. You can check out the prices at
    [https://firebase.google.com/pricing](https://firebase.google.com/pricing).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase是免费的，但是如果您需要更多的容量，根据您的项目需求，他们有不同的计划。您可以在[https://firebase.google.com/pricing](https://firebase.google.com/pricing)上查看价格。
- en: For this recipe, we are going to use Firebase's free service to show some popular
    phrases. That means you will need to create an account using your Google email
    at [https://firebase.google.com](https://firebase.google.com).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们将使用Firebase的免费服务来展示一些流行的短语。这意味着您需要使用您的Google电子邮件在[https://firebase.google.com](https://firebase.google.com)上创建一个帐户。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Once you are registered on Firebase, you need to create a new project by clicking
    on Add project in your Firebase console:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在Firebase上注册，您需要通过在Firebase控制台中点击“添加项目”来创建一个新项目：
- en: '![](assets/715e8a41-7b17-4d52-a06d-a6c48842b8c6.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/715e8a41-7b17-4d52-a06d-a6c48842b8c6.png)'
- en: 'I''ll name my project `codejobs`; of course, you can name it as you want:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我将我的项目命名为`codejobs`；当然，您可以根据自己的喜好命名它：
- en: '![](assets/395ac84e-ed2c-4ea6-9683-7023a52e1cad.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/395ac84e-ed2c-4ea6-9683-7023a52e1cad.png)'
- en: 'As you can see, Firebase automatically added a random code to our Project ID,
    but you can edit it if you want to make sure the Project ID does not exist, and
    after you must accept the terms and conditions and click on Create Project button:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Firebase自动向我们的项目ID添加了一个随机代码，但如果您希望确保项目ID不存在，您可以编辑它，之后您必须接受条款和条件并点击“创建项目”按钮：
- en: '![](assets/1626d2ba-4dd5-48e9-9003-355a68174fad.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1626d2ba-4dd5-48e9-9003-355a68174fad.png)'
- en: 'Now you must select the Add Firebase to your web app option, and you will get
    information about your application:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您必须选择“将Firebase添加到您的Web应用程序”选项，并且您将获得有关您的应用程序的信息：
- en: '![](assets/5d8f5531-196f-4fea-8a7c-ef13f09f47c5.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5d8f5531-196f-4fea-8a7c-ef13f09f47c5.png)'
- en: Do not share this information with anyone. I'm sharing this with you because
    I want to show you the way to connect your application to Firebase.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将这些信息分享给任何人。我与您分享这些信息是因为我想向您展示如何将您的应用程序连接到Firebase。
- en: 'Now go to Develop *|* Database in your dashboard and click on the Create database
    button:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转到仪表板中的Develop *|* Database，然后单击“创建数据库”按钮：
- en: '![](assets/41d1cd5c-ca68-4f27-ba66-6f96aea56046.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/41d1cd5c-ca68-4f27-ba66-6f96aea56046.png)'
- en: 'After that, choose the Start option in locked mode and click on the Enable
    button:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，选择“启动”选项以锁定模式，并单击“启用”按钮：
- en: '![](assets/30daac69-150e-4c72-b255-57ee04f83bbe.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/30daac69-150e-4c72-b255-57ee04f83bbe.png)'
- en: 'Then, at the top of the page, select the dropdown and choose the Realtime Database option:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在页面顶部，选择下拉菜单并选择“实时数据库”选项：
- en: '![](assets/60e337e6-df1d-4d35-a0fa-17a331d2c13d.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/60e337e6-df1d-4d35-a0fa-17a331d2c13d.png)'
- en: 'Once we have our Realtime Database created, let''s import some data. To do
    this, you can select the Import JSON option in the dropdown:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了实时数据库，让我们导入一些数据。要做到这一点，您可以在下拉菜单中选择“导入JSON”选项：
- en: '![](assets/42dbdd11-3a28-4b18-a838-f0ac5113aa8e.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/42dbdd11-3a28-4b18-a838-f0ac5113aa8e.png)'
- en: 'Let''s create a basic JSON file to import our phrases data:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个基本的JSON文件来导入我们的短语数据：
- en: '[PRE25]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'File: src/data/phrases.json'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/data/phrases.json
- en: 'Save this file in a data directory and then import it into your Firebase database:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存在数据目录中，然后导入到Firebase数据库中：
- en: '![](assets/e8ac2bee-85ee-4748-88f4-c94389f76e35.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e8ac2bee-85ee-4748-88f4-c94389f76e35.png)'
- en: As you can see in the red warning, All data at this location will be overwritten.
    This means that if you have any old data in the database, it will be replaced,
    so be careful with importing new data into your database.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在红色警告中所看到的，此位置的所有数据将被覆盖。这意味着如果您在数据库中有任何旧数据，它将被替换，因此在将新数据导入数据库时要小心。
- en: 'If you did everything correctly, you should see the imported data like this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您一切都做对了，您应该看到导入的数据如下：
- en: '![](assets/7a614200-3f94-4d98-8552-969484e31c97.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7a614200-3f94-4d98-8552-969484e31c97.png)'
- en: 'Now we need to alter our permissions to be able to read and write in our database.
    If you go to the Rules tab, you will see something like this:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要修改我们的权限以便能够在我们的数据库中读取和写入。如果您转到规则选项卡，您将看到类似于这样的内容：
- en: '![](assets/8771fb35-9746-476e-9866-a2677d68d9ac.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8771fb35-9746-476e-9866-a2677d68d9ac.png)'
- en: 'For now, let''s change them to true and then click on the Publish button:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将它们更改为true，然后单击“发布”按钮：
- en: '![](assets/0beaabd8-51fe-4e63-b360-a9a41da1e97a.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0beaabd8-51fe-4e63-b360-a9a41da1e97a.png)'
- en: 'Finally, we have finished all the needed steps on Firebase. Now let''s create
    the Firebase application in React. We will re-use the last recipe of the `CoinMarketCap`
    (`Repository: Chapter05/Recipe2/coinmarketcap`). The first thing we need to do
    is to install the firebase dependency:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经完成了Firebase上所有需要的步骤。现在让我们在React中创建Firebase应用程序。我们将重用`CoinMarketCap`的最后一个配方（`存储库：Chapter05/Recipe2/coinmarketcap`）。我们需要做的第一件事是安装firebase依赖项：
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'I removed some components from the last recipe, and I just focused on the Phrases
    application. Let''s create it by following these steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我从上一个配方中删除了一些组件，我只关注了Phrases应用程序。让我们按照以下步骤创建它：
- en: 'Copy your project configuration and replace it in the file:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制您的项目配置并将其替换到文件中：
- en: '[PRE27]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'File: src/config/firebase.js'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/config/firebase.js
- en: 'After this, we need to create a file to manage our Firebase database, and we
    will export our `ref` (our phrases table):'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要创建一个文件来管理我们的Firebase数据库，并且我们将导出我们的`ref`（我们的短语表）：
- en: '[PRE28]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'File: src/shared/firebase/database.js'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/firebase/database.js
- en: 'Let''s prepare everything for our component. First, go to the `routes` file
    and add the `Phrases` container to the root path of your router:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为我们的组件准备好一切。首先，转到`routes`文件，并将`Phrases`容器添加到路由器的根路径：
- en: '[PRE29]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'File: src/routes.jsx'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/routes.jsx
- en: 'Now let''s create our `actionTypes` file:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建我们的`actionTypes`文件：
- en: '[PRE30]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'File: src/actions/actionTypes.js'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/actions/actionTypes.js
- en: 'Now, in our actions, we are going to perform four tasks (fetch, add, delete,
    and update) just like a CRUD (Create, Read, Update and Delete):'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在我们的操作中，我们将执行四个任务（获取、添加、删除和更新），就像CRUD（创建、读取、更新和删除）一样：
- en: '[PRE31]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'File: src/actions/phrasesActions.jsIn Firebase, we don''t use a regular ID.
    Instead, Firebase uses a key value as an ID. The imported data is like a basic
    array, with keys 0, 1, 2, 3, 4, and so on, so for that data, each key is used
    as an ID. But when we create data through Firebase, the keys are going to be unique
    string values with random code, such as `-lg4fgFQkfm`.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/actions/phrasesActions.js在Firebase中，我们不使用常规ID。相反，Firebase使用键值作为ID。导入的数据就像一个基本数组，带有键0、1、2、3、4等，因此对于该数据，每个键都被用作ID。但是当我们通过Firebase创建数据时，键将成为具有随机代码的唯一字符串值，例如`-lg4fgFQkfm`。
- en: 'After we have added our actions, we can create our reducer file:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们添加了操作之后，我们可以创建我们的reducer文件：
- en: '[PRE32]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'File: src/reducers/phrasesReducer.js'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/reducers/phrasesReducer.js
- en: 'Let''s now create our Redux container. We will include all the actions we will
    dispatch in our component and connect Redux to get the phrases state:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建我们的Redux容器。我们将包括我们将在组件中分派的所有操作，并连接Redux以获取短语状态：
- en: '[PRE33]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'File: src/components/Phrases/index.js'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Phrases/index.js
- en: 'Then our `Phrases` component will be as follows:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们的`Phrases`组件将如下所示：
- en: '[PRE34]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'File: src/components/Phrases/Phrases.jsx'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Phrases/Phrases.jsx
- en: 'Finally, our styles file is as follows:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们的样式文件如下：
- en: '[PRE35]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'File: src/components/Phrases/Phrases.css'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Phrases/Phrases.css
- en: How it works...
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The key to understanding how Firebase works with Redux is that you need to know
    that Firebase uses a WebSocket to sync the data, and that means the data is streaming
    in real time. The way to detect data changes is by using the `database.on()` method.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Firebase如何与Redux配合的关键是，您需要知道Firebase使用WebSocket来同步数据，这意味着数据是实时流式传输的。检测数据更改的方法是使用`database.on()`方法。
- en: 'In the `fetchPhrases()` action, we have three Firebase listeners:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在`fetchPhrases()`操作中，我们有三个Firebase监听器：
- en: '`database.on(''child_added'')`: It has two functionalities. The first one brings
    the data from Firebase (the first time) row by row. The second functionality is
    to detect when a new row is added to the database and updates the data in real
    time.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`database.on(''child_added'')`: 它有两个功能。第一个功能是逐行从Firebase中获取数据（第一次）。第二个功能是检测当新行被添加到数据库并实时更新数据。'
- en: '`database.on(''child_changed'')`: It detects changes in existing rows. This
    works when we perform an update of a row.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`database.on(''child_changed'')`: 它检测现有行的更改。当我们更新一行时，它起作用。'
- en: '`database.on(''child_removed'')`: Detects when a row is removed.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`database.on(''child_removed'')`: 检测到行被移除时。'
- en: There is another method called `database.once('value')`, which does the same
    thing as `child_added` but returns the data in an array, and just once. That means
    it does not detect dynamic changes like `child_added`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种方法叫做`database.once('value')`，它与`child_added`做相同的事情，但是返回一个数组中的数据，只有一次。这意味着它不会像`child_added`那样检测动态更改。
- en: 'If you run the application, you will see this view:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行应用程序，您将看到这个视图：
- en: '![](assets/2a493371-7335-4d8e-9952-25f69825b101.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2a493371-7335-4d8e-9952-25f69825b101.png)'
- en: 'The blockquotes are too big to put all of them in, but our last one is this:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 引用块太大，无法全部放入，但我们的最后一个是这样的：
- en: '![](assets/f344e1b9-b181-40de-8728-3c64c4d7e994.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f344e1b9-b181-40de-8728-3c64c4d7e994.png)'
- en: 'Let''s modify our `phrases.json` and add a new row:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改我们的`phrases.json`并添加一个新行：
- en: '[PRE36]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If we go to Firebase and import the JSON again, we will see that, in real time,
    the data will be updated without refreshing the page:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们去Firebase并再次导入JSON，我们将看到实时更新数据而无需刷新页面：
- en: '![](assets/950edc1d-c677-4a80-b8be-1fc01b41626e.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/950edc1d-c677-4a80-b8be-1fc01b41626e.png)'
- en: 'Now, if you see an `X` link to remove phrases, let''s remove the first one
    (Marcus Tullius Cicero). If you open the Firebase page in another tab, you will
    see that the data is being deleted in real time:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您看到一个“X”链接来删除短语，让我们删除第一个（Marcus Tullius Cicero）。如果您在另一个标签页中打开Firebase页面，您将看到数据正在实时删除：
- en: '![](assets/cb3e194a-1ab6-432e-8b3b-66836499fd93.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cb3e194a-1ab6-432e-8b3b-66836499fd93.png)'
- en: 'Also, if you add a new row (using textarea and input), you will see that reflected
    in real time:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您添加新行（使用文本区域和输入），您将实时看到反映出来：
- en: '![](assets/fc05bfe5-2848-448d-b9b8-d7b6c0b8448e.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fc05bfe5-2848-448d-b9b8-d7b6c0b8448e.png)'
- en: As I mentioned before, when we add new data from our React application, instead
    of importing a JSON Firebase will generate unique keys for the new data. In this
    case for the new phrase I added, the `-LJSYCHLHEe9QWiAiak4` key was created.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，当我们从React应用程序中添加新数据时，Firebase将为新数据生成唯一键，而不是导入JSON。在这种情况下，为新添加的短语生成了“-LJSYCHLHEe9QWiAiak4”键。
- en: 'Even if we update a row, we can see that the change was reflected in real time:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们更新一行，我们也可以看到更改实时反映出来：
- en: '![](assets/e5e8e088-2c9f-4881-bfa7-193f5fba29f5.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e5e8e088-2c9f-4881-bfa7-193f5fba29f5.png)'
- en: As you can see, all the operations are easy to implement, and with Firebase
    we saved a lot of time that would otherwise have been spent working on a backend
    service. Firebase is awesome!
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，所有操作都很容易实现，而且使用Firebase我们节省了大量时间，否则将花费在后端服务上。Firebase太棒了！
