- en: Working with React Native
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React Native
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下内容：
- en: Creating our first React Native application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个React Native应用程序
- en: Creating a Todo List with React Native
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用React Native创建一个待办事项列表
- en: Implementing React Navigation V2
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现React Navigation V2
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: React Native is a framework for building mobile apps using JavaScript and React.
    Many people think that with React Native you make some "mobile web app" or a "hybrid
    app" (such as Ionic, PhoneGap or Sencha), but you build a native app because React
    Native converts your React code to Java for Android or Objective-C for iOS apps.
    React Native uses most of the React concepts, such as components, props, state
    and lifecycle methods.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: React Native是使用JavaScript和React构建移动应用程序的框架。许多人认为使用React Native可以制作一些"移动Web应用程序"或"混合应用程序"（如Ionic、PhoneGap或Sencha），但实际上你构建的是原生应用程序，因为React
    Native将你的React代码转换为Android的Java代码或iOS应用程序的Objective-C代码。React Native使用了大部分React的概念，如组件、属性、状态和生命周期方法。
- en: '**Advantages of React Native**:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**React Native的优势**：'
- en: You code once, and you get two native apps (Android and iOS)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你只需编写一次代码，就可以得到两个原生应用程序（Android和iOS）
- en: You don't need to have experience with Java, Objective-C, or Swift
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不需要有Java、Objective-C或Swift的经验
- en: Faster development
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的开发
- en: MIT license (open source)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIT许可证（开源）
- en: '**Requirements for Windows**:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows的要求**：'
- en: Android Studio
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio
- en: Android SDK (>= 7.0 Nougat)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android SDK（>= 7.0 Nougat）
- en: Android AVD
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android AVD
- en: '**Requirements for Mac**:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mac的要求**：'
- en: XCode (>= 9)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XCode（>= 9）
- en: Simulator
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟器
- en: Creating our first React Native Application
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个React Native应用程序
- en: In this recipe, we are going to build a React Native application and understand
    the main differences between React and React Native.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将构建一个React Native应用程序，并了解React和React Native之间的主要区别。
- en: Getting Ready
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To create our new React Native application, we need to install the `react-native-cli` package:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的新的React Native应用程序，我们需要安装`react-native-cli`包：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Now, to create our first app:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要创建我们的第一个应用程序：
- en: 'Let''s do it with this command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用这个命令来做：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After we built our React Native app, we need to install Watchman, which is a
    file-watching service required by React Native. To install it, go to [https://facebook.github.io/watchman/docs/install.html](https://facebook.github.io/watchman/docs/install.html) and
    download the latest version for your OS (Windows, Mac, or Linux).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们构建了React Native应用程序之后，我们需要安装Watchman，这是React Native所需的文件监视服务。要安装它，去[https://facebook.github.io/watchman/docs/install.html](https://facebook.github.io/watchman/docs/install.html)下载最新版本适合你的操作系统（Windows、Mac或Linux）。
- en: 'In this case, we are going to use Homebrew to install it for Mac. If you don''t
    have Homebrew, you can install it with this command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将使用Homebrew在Mac上安装它。如果你没有Homebrew，你可以用这个命令安装它：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To install Watchman, you need to run:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装Watchman，你需要运行：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To start the React Native project, we need to use:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动React Native项目，我们需要使用：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If everything works fine, you should see this:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常，你应该看到这个：
- en: '![](assets/e35eac32-1884-4536-a5f9-54f4da4d66f4.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e35eac32-1884-4536-a5f9-54f4da4d66f4.png)'
- en: Sometimes you can get errors from Watchman, for example,
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能会从Watchman得到错误，例如，
- en: 'Watchman error: too many pending cache jobs. Make sure watchman is running
    for this project.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Watchman错误：太多待处理的缓存作业。确保watchman正在为此项目运行。
- en: 'If you get that error or another, you have to uninstall Watchman by doing:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到了这个错误或其他错误，你需要通过以下方式卸载Watchman：
- en: '`brew unlink watchman`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`brew unlink watchman`'
- en: 'And then reinstall it using:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后重新安装：
- en: '`brew update && brew upgrade`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`brew update && brew upgrade`'
- en: '`brew install watchman`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`brew install watchman`'
- en: 'Open a new terminal (*Cmd* + *T*) and run this command (depending on the device
    you want to use):'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端（*Cmd* + *T*）并运行这个命令（取决于你想要使用的设备）：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If there are no errors, you should see the simulator running the default application:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有错误，您应该看到模拟器运行默认应用程序：
- en: '![](assets/c3401446-ceb5-4e10-b3cf-05035956e486.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3401446-ceb5-4e10-b3cf-05035956e486.png)'
- en: 'Now that we have our application running, let''s open our code and modify it
    a bit:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用程序正在运行，让我们打开我们的代码并稍微修改一下：
- en: 'Change the `App.js` file:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`App.js`文件：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'File: App.js'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：App.js
- en: 'If you go to the simulator again, you will need to press *Cmd* + *R* to reload
    the app to see the new changes reflected:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您再次进入模拟器，您需要按下*Cmd* + *R*重新加载应用程序以查看新更改的反映：
- en: '![](assets/7eee4328-9e21-4817-aa7b-509f29d091eb.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7eee4328-9e21-4817-aa7b-509f29d091eb.png)'
- en: 'You''re probably wondering if there is a way to do automatic reload instead
    of doing this process manually, and of course, there is a way to enable the Live
    Reload option; you need to press *Cmd* + *D* to open the development menu and
    then select the Enable Live Reload option:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能想知道是否有一种自动重新加载的方法，而不是手动进行这个过程，当然，有一种方法可以启用实时重新加载选项；您需要按下*Cmd* + *D*打开开发菜单，然后选择启用实时重新加载选项：
- en: '![](assets/bb6d8d70-44a2-46a2-ab0f-056639812a61.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bb6d8d70-44a2-46a2-ab0f-056639812a61.png)'
- en: 'Another exciting option is Debug JS Remotely. If you click on that one, it
    will automatically open a Chrome tab where we can see the logs we added to our
    application using `console.log`. For example, if I add `console.log(''==== Debugging
    my First React Native App! ===='');` in my render method, I should see it like
    this:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个令人兴奋的选项是远程调试JS。如果您点击它，它将自动打开一个Chrome标签，我们可以在那里看到我们使用`console.log`添加到我们的应用程序的日志。例如，如果我在我的渲染方法中添加`console.log('====调试我的第一个React
    Native应用！====');`，我应该看到它像这样：
- en: '![](assets/a3c376a1-cb8c-43fe-8892-5b62157c4b6c.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a3c376a1-cb8c-43fe-8892-5b62157c4b6c.png)'
- en: Let's go back to the code. Maybe you are a little bit confused about the code
    you saw in `App.js` because you didn't see a `<div>` tag or even worse the way
    the styles are being created like an object instead of using a CSS file as we
    do in React. I've got some good news and some bad news; the bad news is that React
    Native does not support CSS and JSX/HTML code as React does. The good news is
    that once you understand that the `<View>` component is the equivalent of using
    a `<div>`, `<Text>` is the equivalent of using `<p>`, and the styles are like
    CSS modules (object), everything else works the same as React (props, state, lifecycle
    methods).
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到代码。也许您对在`App.js`中看到的代码有点困惑，因为您没有看到`<div>`标签，甚至更糟糕的是样式的创建方式像是一个对象，而不是像我们在React中使用CSS文件。我有一些好消息和一些坏消息；坏消息是React
    Native不支持CSS和JSX/HTML代码，就像React一样。好消息是，一旦您理解了`<View>`组件相当于使用`<div>`，`<Text>`相当于使用`<p>`，样式就像CSS模块（对象），其他一切都与React相同（props，state，生命周期方法）。
- en: 'Create a new component (`Home`). For this purpose, we have to create a directory
    called components, and then we save this file as `Home.js`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的组件（`Home`）。为此，我们必须创建一个名为components的目录，然后将此文件保存为`Home.js`：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'File: components/Home.js'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：components/Home.js
- en: 'In `App.js`, we import the `Home` component, and we render it:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.js`中，我们导入`Home`组件，并将其渲染出来：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'File: App.js'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：App.js
- en: How it works...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As you can see, creating a new React Native application is very easy but there
    are some key differences between React (using JSX) and React Native using a special
    markup with object styles even there are some limitations on the styles as well,
    for example, let''s create a flex layout:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，创建一个新的React Native应用程序非常容易，但是React（使用JSX）和React Native之间存在一些关键差异，使用特殊的标记和对象样式，甚至样式也有一些限制，例如，让我们创建一个flex布局：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'File: components/Home.js'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：components/Home.js
- en: 'You probably don''t like looking at a huge file (me neither), so let''s separate
    our component and our styles:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能不喜欢看一个庞大的文件（我也不喜欢），所以让我们将我们的组件和样式分开：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'File: components/HomeStyles.js'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：components/HomeStyles.js
- en: 'Then in our `Home` component, we can import the styles and use them in the
    same way as before:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在我们的`Home`组件中，我们可以导入样式并以与以前相同的方式使用它们：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'File: components/Home.js'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：components/Home.js
- en: 'Here is the result of the code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码的结果：
- en: '![](assets/143ec48a-2ad7-448b-976e-385f6f5c2ec1.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/143ec48a-2ad7-448b-976e-385f6f5c2ec1.png)
- en: But there is something unusual.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 但有一些不寻常的地方。
- en: 'As you can see, I created styles for the `<Text>` components (headerText, column1Text,
    and so on), and this is because some styles are not allowed in the View component.
    For example, if you try to add the `color: ''white''` property to the `<View>` component,
    you will see that the property won''t work and Header will have the black text:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '正如您所看到的，我为`<Text>`组件（headerText，column1Text等）创建了样式，这是因为某些样式不允许在View组件中使用。例如，如果您尝试将`color:
    ''white''`属性添加到`<View>`组件中，您会发现该属性不起作用，标题将具有黑色文本：'
- en: '![](assets/1ddeecf5-b761-499f-87d7-3232e4eff05f.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/1ddeecf5-b761-499f-87d7-3232e4eff05f.png)
- en: Creating a Todo List with React Native
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React Native创建待办事项列表
- en: In this recipe, we are going to learn how to handle events in React Native and
    how to handle the state by creating a simple Todo list.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何在React Native中处理事件以及如何通过创建一个简单的待办事项列表来处理状态。
- en: How to do it...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For this recipe, I created a new React Application called "MySecondReactNativeApp":'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我创建了一个名为“MySecondReactNativeApp”的新React应用程序：
- en: 'Create an `src` folder and move the `App.js` file inside. Also, modify this
    file to include our Todo list:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`src`文件夹并将`App.js`文件移动到其中。还要修改此文件以包含我们的待办事项列表：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'File: src/App.js'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/App.js
- en: 'Our `Todo` component will be:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`Todo`组件将是：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'File: src/components/Todo.js'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Todo.js
- en: 'Here are the styles:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是样式：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'File: src/components/TodoStyles.js'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/TodoStyles.js
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The first thing we did in our component was set our state. The `task` state
    is for the input to create new items, and the `list` state is to save all the
    tasks items:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的组件中做的第一件事是设置我们的状态。`task`状态是为了创建新项目的输入，`list`状态是为了保存所有任务项目：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `TextInput` component creates an input element, the main difference from
    the input in React is that instead of using the `onChange` method, it is using
    `onChangeText` and by default gets the value, and we can update our state directly:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextInput`组件创建一个输入元素，与React中的输入的主要区别在于，它使用`onChangeText`而不是`onChange`方法，并且默认获取值，我们可以直接更新我们的状态：'
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `TouchableOpacity` component is to handle click events (`onPress` in React
    Native) and can be used as a button. Maybe you''re wondering why I didn''t use
    the component `Button` directly; this is because on iOS it''s not possible to
    add a background color to the button, it only works with backgrounds on Android.
    Using `TouchableOpacity` (or `TouchableHighlight`), you can personalize the styles,
    and it works perfectly as a button:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`TouchableOpacity`组件用于处理点击事件（在React Native中为`onPress`），可以用作按钮。也许您想知道为什么我没有直接使用`Button`组件；这是因为在iOS上无法向按钮添加背景颜色，它只能在Android上使用背景。使用`TouchableOpacity`（或`TouchableHighlight`），您可以个性化样式，并且它完全可以作为按钮使用：'
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the render of the tasks, I implemented a Zebra style (mixed colors) for
    the tasks. Also, we are handling `onPressDeleteTask` to remove each item by clicking
    the X button:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务的渲染中，我为任务实现了斑马样式（混合颜色）。此外，我们正在处理`onPressDeleteTask`以通过单击X按钮删除每个项目：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we run the application, the first thing we are going to see is this view:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行应用程序，我们将首先看到这个视图：
- en: '![](assets/2d2f0dae-68e1-4133-8a46-c2c045dc9934.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/2d2f0dae-68e1-4133-8a46-c2c045dc9934.png)
- en: If we don't have any tasks, we will see the "There are no tasks yet, create
    a new one!" message.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有任何任务，我们将看到“目前没有任务，创建一个新任务！”的消息。
- en: 'As you can see, there is an input on the top that has the "Add a new task" placeholder.
    Let''s add some tasks:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，顶部有一个输入框，其中有“添加新任务”的占位符。让我们添加一些任务：
- en: '![](assets/95c20111-0c20-4279-8f72-5234768adff0.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/95c20111-0c20-4279-8f72-5234768adff0.png)'
- en: 'Finally, we can delete the tasks by clicking on the X; I''ll remove the Pay
    the rent task:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过点击X来删除任务；我将删除支付房租任务：
- en: '![](assets/f9de4d83-f22e-4816-9327-a31a04995b7e.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f9de4d83-f22e-4816-9327-a31a04995b7e.png)'
- en: As you can see with this basic Todo list, we learned how to use the local state
    and how to handle click and change events in React Native.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，通过这个基本的待办事项列表，我们学会了如何在React Native中使用本地状态以及如何处理点击和更改事件。
- en: There's more...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you want to prevent the user from deleting a task by accident, you can add
    an Alert that will ask the user whether they are sure they want to remove the
    selected task. For this, we need to import the Alert component from react-native
    and modify our onPressDeleteTask method:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要防止用户意外删除任务，可以添加一个警报，询问用户是否确定要删除所选任务。为此，我们需要从react-native导入Alert组件并修改我们的onPressDeleteTask方法：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you run the application and you try to delete a task now, you will see this
    native alert:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行应用程序并尝试删除任务，您现在将看到这个本机警报：
- en: '![](assets/16f565c9-3af5-4830-8e61-ee002c1821da.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/16f565c9-3af5-4830-8e61-ee002c1821da.png)'
- en: Implementing React Navigation V2
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现React Navigation V2
- en: In this recipe, we are going to learn how to implement React Navigation V2 in
    our React Native application. We will create a simple navigation between sections.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何在React Native应用程序中实现React Navigation V2。我们将在部分之间创建一个简单的导航。
- en: Getting Ready
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to install the `react-navigation` dependency:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装`react-navigation`依赖项：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How to do it...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s implement React Navigation v2:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现React Navigation v2：
- en: 'Include `createDrawerNavigation` and `DrawerItems` from react-navigation and
    the components we want to render as sections (Home and Configuration):'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从react-navigation中包括`createDrawerNavigation`和`DrawerItems`以及我们想要作为部分渲染的组件（主页和配置）：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'File: App.js'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：App.js
- en: 'In CustomDrawerComponent, we will render the Codejobs logo and the menu (you
    can modify this as you need it):'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CustomDrawerComponent中，我们将渲染Codejobs标志和菜单（您可以根据需要进行修改）：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'File: App.js'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：App.js
- en: 'Create `AppDrawerNavigator`, specifying the components we want to display in
    the menu as sections (Home and Configuration). Also, we need to pass `contentComponent`
    with the `CustomDrawerComponent` we created before:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`AppDrawerNavigator`，指定我们要在菜单中显示的组件作为部分（主页和配置）。此外，我们需要传递`contentComponent`与之前创建的`CustomDrawerComponent`：
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'File: App.js'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：App.js
- en: 'Create the App class and render the `AppDrawerNavigator` component:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建App类并渲染`AppDrawerNavigator`组件：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'File: App.js'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：App.js
- en: 'Create the section components; the first one is the Home component:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建部分组件；第一个是主页组件：
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'File: sections/Home.js'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：sections/Home.js
- en: 'Here is the Configuration section component:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是配置部分组件：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'File: sections/Configuration.js'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：sections/Configuration.js
- en: 'You may have noticed we are using the same styles on both components, that''s
    why I created a separate file for the styles:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能已经注意到我们在两个组件上使用了相同的样式，这就是为什么我为样式创建了一个单独的文件：
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'File: sections/sectionStyles.js'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：sections/sectionStyles.js
- en: You can find the assets we are using in the repository (`Chapter14/Recipe3/ReactNavigation/assets`).
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在存储库（`Chapter14/Recipe3/ReactNavigation/assets`）中找到我们正在使用的资产。
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you did everything correctly, you should see this:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您一切都做对了，您应该会看到这个：
- en: '![](assets/a052dd30-f924-435f-a83b-638c45f25c04.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a052dd30-f924-435f-a83b-638c45f25c04.png)'
- en: 'The first component that is being rendered is the `Home` component. If you
    click on the Hamburger menu, you will see the drawer with the two sections (`Home`
    and `Configuration`) with their respective icons and the Codejobs logo at the
    top:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正在呈现的第一个组件是`Home`组件。如果您点击汉堡菜单，您会看到抽屉中有两个部分（`Home`和`Configuration`），它们各自的图标以及顶部的Codejobs标志：
- en: '![](assets/dcc0a03c-da76-4ff7-8c97-6fe3a7c5ae85.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dcc0a03c-da76-4ff7-8c97-6fe3a7c5ae85.png)'
- en: 'Finally, if you click on Configuration, you will see that component as well:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您点击配置，您也会看到该组件：
- en: '![](assets/9f441f0e-0391-41b6-bc7a-e86a6c40dc2f.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9f441f0e-0391-41b6-bc7a-e86a6c40dc2f.png)'
- en: If you see the drawer again, you will notice that the current section that is
    open is also active in the menu (in this case, Configuration).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您再次看到抽屉，您会注意到当前打开的部分也在菜单中处于活动状态（在这种情况下是配置）。
- en: '![](assets/71b34a74-dd57-455a-a21e-1f1688d78f3b.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/71b34a74-dd57-455a-a21e-1f1688d78f3b.png)'
