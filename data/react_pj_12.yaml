- en: Creating a Virtual Reality Application with React 360
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React 360创建虚拟现实应用程序
- en: You're almost there—only one more chapter to go and then you can call yourself
    a React expert that has experienced React on every platform. Throughout this book,
    you've built 11 applications with React and React Native, and for the grande dessert, you
    get to use React 360\. The final part of the *learn once, write everywhere* strategy
    of React and React Native will be best demonstrated in this chapter. With React
    360, you can create dynamic 3D and **Virtual Reality** (**VR**) experiences using
    principles from React and, more specifically, React Native-like life cycles and
    UI components. Although VR is still an emerging technology, the best use cases
    for VR are, for example, retail stores that want their customers to experience
    their stores or games online.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经接近成功了——只剩下最后一个章节，然后您就可以称自己为一个在每个平台上都有React经验的React专家了。在本书中，您已经使用React和React
    Native构建了11个应用程序，而对于最后的大结局，您将使用React 360。React和React Native的“一次学习，随处编写”策略的最终部分将在本章中得到最好的展示。使用React
    360，您可以使用React和React Native的原则创建动态的3D和虚拟现实（VR）体验，更具体地说，使用React Native类似的生命周期和UI组件。虽然虚拟现实仍然是新兴技术，但虚拟现实的最佳用例是，例如，希望顾客体验他们的商店或在线游戏的零售商店。
- en: In this chapter, you'll explore the very basics of what's possible with React
    360 and how it relates to React and React Native. The application you will build
    will be able to render 360 degree panorama images and use state management to
    render between screens. Animated 3D objects will also be displayed inside the
    scenes you build with React 360.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将探索React 360的基础知识以及它与React和React Native的关系。您将构建的应用程序将能够渲染360度全景图像，并使用状态管理在屏幕之间进行渲染。使用React
    360构建的场景中还将显示动画3D对象。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Getting started with React 360
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React 360入门
- en: Creating a panorama viewer with React 360
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React 360创建全景查看器
- en: Building clickable elements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建可点击元素
- en: Project overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this chapter, you will build a VR application with React 360 that uses principles
    from both React and React Native. Both 2D panorama images and 3D objects will
    be added to this application and the project can be run in the browser using the **Metro
    bundler**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用React 360构建一个应用程序，该应用程序使用了来自React和React Native的原则。这个应用程序将添加2D全景图像和3D对象，并且可以使用Metro捆绑器在浏览器中运行项目。
- en: The build time is 1.5 hours.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间为1.5小时。
- en: Getting started
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: The application for this chapter will be built from scratch and uses assets
    that can be found on GitHub at [https://github.com/PacktPublishing/React-Projects/tree/ch12-assets](https://github.com/PacktPublishing/React-Projects/tree/ch12-assets)[.](https://github.com/PacktPublishing/React-Projects/tree/ch1-assets) These
    assets should be downloaded to your computer so that you can use them later on
    in this chapter. The complete code for this chapter can be found on GitHub at [https://github.com/PacktPublishing/React-Projects/tree/ch12](https://github.com/PacktPublishing/React-Projects/tree/ch12).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的应用程序将从头开始构建，并使用可以在GitHub上找到的资产。这些资产应该下载到您的计算机上，以便您稍后在本章中使用。本章的完整代码可以在GitHub上找到。
- en: React 360 requires the same versions of Node.js and `npm` as the React and React
    Native projects. If you haven't installed Node.js on your machine, please go to `https://nodejs.org/en/download/`,
    where you can find the download instructions for macOS, Windows, and Linux.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: React 360需要与React和React Native项目相同版本的Node.js和`npm`。如果您尚未在计算机上安装Node.js，请转到`https://nodejs.org/en/download/`，在那里您可以找到macOS、Windows和Linux的下载说明。
- en: 'After installing Node.js, you can run the following commands in your command
    line to check the installed versions:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Node.js后，您可以在命令行中运行以下命令来检查已安装的版本：
- en: 'For Node.js (should be v10.16.3 or higher), use the following command:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Node.js（应为v10.16.3或更高版本），请使用以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For `npm` (should be v6.9.0 or higher), use the following command:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`npm`（应为v6.9.0或更高版本），请使用以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating a VR application with React 360
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React 360创建VR应用程序
- en: React 360 uses principles from React and is heavily based on React Native. React
    360 allows you to create applications using UI components without having to deal
    with complex setups for mobile or VR devices, which is similar to how React Native
    works.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: React 360使用了来自React的原则，并且在很大程度上基于React Native。React 360允许您创建应用程序，使用UI组件而无需处理移动设备或VR设备的复杂设置，这与React
    Native的工作方式类似。
- en: Getting started with React 360
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用React 360
- en: It doesn't matter whether you're creating a project with React, React Native,
    or React 360—there are tools to easily get you started with any of these technologies. You've
    used Create React App as the starting point for the React web applications in
    this book and the Expo CLI for the React Native projects. This React 360 project
    will be started using the React 360 CLI, which will help you create and manage
    your React 360 application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是使用React、React Native还是React 360创建项目，都有工具可以轻松帮助您开始使用这些技术。在本书中，您已经使用Create
    React App作为React web应用程序的起点，并使用Expo CLI创建React Native项目。此React 360项目将使用React 360
    CLI启动，该CLI将帮助您创建和管理React 360应用程序。
- en: Setting up React 360
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置React 360
- en: 'The React 360 CLI can be installed from `npm` by running the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令从`npm`安装React 360 CLI：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will globally install the React 360 CLI from the `npm` package registry.
    After the installation process has completed, you can use it to create your first
    React 360 project by executing the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从`npm`软件包注册表全局安装React 360 CLI。安装过程完成后，您可以使用它通过执行以下命令来创建您的第一个React 360项目：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By executing this command, a new React 360 project will be created called `virtual-reality`.
    All the packages that are required to run a React 360 application will be installed,
    such as `react`, `react-native`, `react-360`, `react-360-web`, and `three`. The
    `three` package installs `three.js`, a lightweight and easy to use JavaScript
    3D library that comes with a default WebGL renderer. This renderer is used by
    React 360 to render 3D graphics, which it does by adding a layer that allows you
    to create declarative UI components.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行此命令，将创建一个名为`virtual-reality`的新React 360项目。将安装运行React 360应用程序所需的所有软件包，例如`react`、`react-native`、`react-360`、`react-360-web`和`three`。`three`软件包安装了`three.js`，这是一个轻量级且易于使用的JavaScript
    3D库，带有默认的WebGL渲染器。React 360使用此渲染器来渲染3D图形，它通过添加一个允许您创建声明式UI组件的层来实现。
- en: 'Also, all the files that you will need to build the project are created in
    a directory with the same name. This directory has the following structure, where
    the following files are of importance:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将在具有相同名称的目录中创建构建项目所需的所有文件。该目录具有以下结构，其中以下文件很重要：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `__tests__` directory is where you can create test files using the `react-test-renderer` package.
    The `node_modules` directory is where your packages are installed, while the `static_assets` directory
    holds the files that are used statically in development mode that may be transferred
    to a CND later on. To use React 360 in the browser (or mobile devices), you need
    to use Babel, which transpiles your code. The configuration for this can be found
    in the `.babelrc` file. The most important files that were created by `react-360-cli`
    are `client.js`, `index.html`, and `index.js` since these files are where you
    develop and serve your application. The `client.js` file contains the code that
    you use to execute the application, while `index.js` holds the actual code that
    is rendered by the application that is mounted to the DOM in `index.html`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`__tests__`目录是您可以使用`react-test-renderer`包创建测试文件的地方。`node_modules`目录是您安装包的位置，而`static_assets`目录包含在开发模式中静态使用的文件，以后可能会转移到CND。要在浏览器（或移动设备）中使用React
    360，您需要使用Babel来转译您的代码。其配置可以在`.babelrc`文件中找到。由`react-360-cli`创建的最重要的文件是`client.js`，`index.html`和`index.js`，因为这些文件是您开发和提供应用程序的地方。`client.js`文件包含您用于执行应用程序的代码，而`index.js`包含实际的代码，该代码被挂载到`index.html`中的DOM中。'
- en: 'Instead of webpack, another JavaScript bundler is used for React 360 called
    **Metro**. This was created by Facebook, just like React was. Metro is a bundler
    for React Native projects and since React 360 takes a lot of principles from React
    Native to run on VR devices as well, Metro is the preferred bundler for React
    360 applications. Just like webpack, all your source code is bundled into one
    big file in a readable format for web browsers. When you''re developing your application,
    the Metro bundler will run a local development server that allows you to view
    the application in the browser. Files are compiled or processed at request time
    and when your application is complete, it can be used to create a production-ready
    build. You can start the bundler to initiate the development server with the following
    command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与webpack不同，React 360使用了另一个JavaScript捆绑器**Metro**。这是由Facebook创建的，就像React一样。Metro是React
    Native项目的捆绑器，由于React 360也从React Native中借鉴了很多原则来在VR设备上运行，因此Metro是React 360应用程序的首选捆绑器。与webpack一样，所有源代码都被捆绑成一个可供Web浏览器阅读的大文件。在开发应用程序时，Metro捆绑器将运行一个本地开发服务器，允许您在浏览器中查看应用程序。文件在请求时被编译或处理，当应用程序完成时，它可以用于创建一个生产就绪的构建。您可以使用以下命令启动捆绑器来启动开发服务器：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This starts the Metro bundler and compiles your source code, which will be mounted
    to the DOM in the `index.html` file and makes it available at `http://localhost:8081/index.html`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动Metro捆绑器并编译您的源代码，该代码将被挂载到`index.html`文件中，并在`http://localhost:8081/index.html`上提供。
- en: 'When you first visit the project in your browser, the bundler may take a longer
    time to load as it will need to read your filesystem to get more information on
    how to render. If you make changes to the source code of the project, these changes
    will become visible faster to increase your development speed. The initial application
    that was created by the React 360 CLI is now visible at `http://localhost:8081/index.html`,
    which shows a 360 degree viewer that explores the dark landscape that can be found
    in the `static_assets/360_world.jpg` file. It looks as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次在浏览器中访问项目时，捆绑器可能需要更长的时间来加载，因为它需要读取您的文件系统以获取有关如何呈现的更多信息。如果您对项目的源代码进行更改，这些更改将更快地变得可见，以增加您的开发速度。由React
    360 CLI创建的初始应用程序现在在`http://localhost:8081/index.html`上可见，显示了一个360度查看器，可以探索`static_assets/360_world.jpg`文件中的黑暗景观。它看起来如下：
- en: '![](assets/1185828d-8a05-4195-bdee-76cfa687a545.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1185828d-8a05-4195-bdee-76cfa687a545.png)'
- en: 'React 360 applications can display a 360 degree (or 3D) image or video as a
    background and render both 2D and 3D UI components on top of this background.
    In the `client.js` file, the image from the `static_assets` directory is used
    as a 360 degree 2D background image with the following line of code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: React 360应用程序可以显示360度（或3D）图像或视频作为背景，并在此背景上渲染2D和3D UI组件。在`client.js`文件中，来自`static_assets`目录的图像被用作360度2D背景图像，代码如下：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `getAssetUrl` function points to the `static_assets` directory and can later
    be used to point to a CDN or other URL where your background image is hosted when
    your application is in production.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`getAssetUrl`函数指向`static_assets`目录，并且在应用程序处于生产状态时，可以稍后用于指向CDN或其他URL，其中托管了背景图像。'
- en: In case you have 3D glasses in your possession, you can replace the initial
    360 degree 2D image with a 3D 360 image to create a 3D effect. NASA's website
    is a good source for finding 360 degree 3D images from any of the Mars missions,
    for example. Images from this mission can be found at `https://mars.nasa.gov/3d/images`
    and the downloaded files can be placed in `static_assets`. This should be used
    in the `client.js` file instead of the `360_world.jpg` file.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有3D眼镜，可以用3D 360图像替换初始的360度2D图像，以创建3D效果。例如，NASA的网站是寻找来自任何火星任务的360度3D图像的好来源。可以在该任务的图像网址中找到这些图像，并将下载的文件放在`static_assets`中。这应该在`client.js`文件中使用，而不是`360_world.jpg`文件。
- en: Your application that was created by `react-360 init` also displays some UI
    components;  in the next section we'll explore how to use UI components in React
    360 in more detail.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`react-360 init`创建的应用程序也显示一些UI组件；在下一节中，我们将更详细地探讨如何在React 360中使用UI组件。
- en: React 360 UI components
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 360 UI组件
- en: Previously, we mentioned that React 360 uses a lot of concepts from React Native.
    One of them is the use of UI components that can be rendered. Out of the box,
    four UI components are offered by React 360, that is, `View`, `Text`, `Entity`,
    and `VrButton`. First, the `View` and `Text` components are 2D and used in the
    `index.js` file to create the panel and greeting message that you can see in the
    application. The other two components are more complex and can be used to render
    3D objects in the case of the `Entity` component, or respond to user actions such
    as pressing `a` key down, in the case of the `VrButton` component.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们提到React 360使用了许多React Native的概念之一是可以渲染的UI组件。React 360默认提供了四个UI组件，即`View`、`Text`、`Entity`和`VrButton`。首先，`View`和`Text`组件是2D的，并且在`index.js`文件中用于创建面板和问候消息，您可以在应用程序中看到。另外两个组件更复杂，可以用于渲染3D对象（`Entity`组件）或响应用户操作，例如按下`a`键（`VrButton`组件）。
- en: 'From the `client.js` file, these components can be placed on cylinder surfaces
    from the `index.js` file since these are rendered by the `renderToSurface` from
    `client.js`. Here, the default surface that is declared refers to a 2D cylinder
    surface showing the UI components from `index.js`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从`client.js`文件中，这些组件可以放置在`index.js`文件中的圆柱面上，因为这些组件是由`client.js`中的`renderToSurface`渲染的。在这里，声明的默认表面指的是显示来自`index.js`的UI组件的2D圆柱面：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the `index.js` file, we have the `View` and `Text` components, which are
    used to render the default surface with the welcome message you see when you start
    the application. The default export from `index.js` is called `virtual_reality`,
    which refers to the project name and is the same name that's used by the `createRoot`
    function in `client.js`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`文件中，我们有`View`和`Text`组件，用于渲染默认表面，显示应用程序启动时看到的欢迎消息。`index.js`的默认导出称为`virtual_reality`，它指的是项目名称，并且与`client.js`中的`createRoot`函数使用的名称相同。
- en: 'The initial structure and naming of the application may get a bit confusing
    as the application grows. To combat this, you can split the components and make
    a distinction between the entry point of the application in `index.js` and the
    actual UI components. The following changes need to made for this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序的增长，初始结构和命名可能会变得有点混乱。为了解决这个问题，您可以拆分组件，并在`index.js`中区分应用程序的入口和实际的UI组件。需要进行以下更改：
- en: 'Move the `index.js` file to a new directory called `Components` and call this
    file `Panel.js`. Here, you need to change the name of this class component from
    `virtual_reality` to `Panel`:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`index.js`文件移动到一个名为`Components`的新目录中，并将该文件命名为`Panel.js`。在这里，您需要将此类组件的名称从`virtual_reality`更改为`Panel`：
- en: Unfortunately, the current version of React 360 doesn't work well with React
    16.8+, so you need to use a class component to use life cycles.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，当前版本的React 360与React 16.8+不兼容，因此您需要使用类组件来使用生命周期。
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This newly created `Panel` component can be imported into the `index.js` file,
    where you need to delete all the code that''s already in there and replace it
    with the following code block:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个新创建的`Panel`组件可以被导入到`index.js`文件中，您需要删除其中已经存在的所有代码，并用以下代码块替换它：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To see the changes you''ve made, you need to refresh the browser at `http://localhost:8081/index.html`,
    after which the Metro bundler will compile the code again. Since you made no visible
    changes, you''ll need to look at the output in the Terminal to see if it was successful.
    To see these changes directly in the browser, you can make some changes to the
    text displayed in the `Panel` component by changing the value within the `Text`
    component:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看您所做的更改，您需要在`http://localhost:8081/index.html`处刷新浏览器，之后Metro bundler将重新编译代码。由于您没有进行可见的更改，您需要查看终端中的输出来查看是否成功。要直接在浏览器中查看这些更改，您可以通过更改`Panel`组件中`Text`组件内的值来更改显示的文本：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When you refresh the browser after this change, the text *"Welcome to this world!"*
    will be displayed instead of the initial message.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行此更改后刷新浏览器，将显示文本“欢迎来到这个世界！”而不是初始消息。
- en: 'These `View` and `Text` components are simple 2D elements that can be styled
    using `StyleSheet`, which you''ve also used in React Native. By using this method
    to style your React 360 components, the learning curve for React 360 becomes less
    steep and the *learn once, write anywhere* principle is applied. The styles for
    the `View` and `Text` components are placed at the bottom of the `scr/Panel.js`
    file. The styling rules that can be used for the `View` and `Text` components
    are limited since not every style rule applies to each of these components. You
    can make some small changes to this styling, such as the ones we''ve made in the
    following code block:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`View`和`Text`组件是简单的2D元素，可以使用`StyleSheet`进行样式设置，您在React Native中也使用过。通过使用这种方法来为您的React
    360组件设置样式，React 360的学习曲线变得不那么陡峭，并且应用了“一次学习，随处编写”的原则。`View`和`Text`组件的样式放在`scr/Panel.js`文件的底部。可以用于`View`和`Text`组件的样式规则是有限的，因为并非每个样式规则都适用于这些组件中的每一个。您可以对这些样式进行一些小的更改，就像我们在以下代码块中所做的那样：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows what your application will look like after these
    changes, where the box inside the panel that''s showing the welcome message has
    changed a little:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在进行这些更改后您的应用程序将会是什么样子，面板内显示欢迎消息的框已经有了一些变化：
- en: '![](assets/2c7d5c9e-0f21-4ddd-99a3-411e30a59e6c.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2c7d5c9e-0f21-4ddd-99a3-411e30a59e6c.png)'
- en: Also, the first view that's using the `panel` styling is created in `client.js`
    and is the default surface with a cylinder shape and a default width of `1000px`
    and a height of `600px`. It's also possible to change the shape and size of this
    surface, which we'll do in the upcoming sections.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用`panel`样式的第一个视图是在`client.js`中创建的，默认表面是圆柱形，宽度为`1000px`，高度为`600px`。还可以更改此表面的形状和大小，我们将在接下来的部分中进行。
- en: In this section, you learned about the basics of how to get started with React
    360\. Now, we will learn how to interact with React 360.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，您学习了如何开始使用React 360的基础知识。现在，我们将学习如何与React 360进行交互。
- en: Interactions in React 360
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在React 360中的交互
- en: In the previous section, you set up the basics of React 360 and made some changes
    to the initial surface that was displaying the welcome message. With React 360,
    it's possible to create other surfaces that even have some interaction with the
    user. These surfaces can have different shapes and sizes, such as a flat or a
    circular shape, which makes it possible to add actionable buttons on these surfaces.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您设置了React 360的基础知识，并对显示欢迎消息的初始表面进行了一些更改。使用React 360，可以创建其他甚至与用户进行一些交互的表面。这些表面可以具有不同的形状和大小，例如平面或圆形，这使得可以在这些表面上添加可操作的按钮。
- en: Using local state and VrButton
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用本地状态和VrButton
- en: 'In this section, you''ll add some buttons to the surface so that your users
    can close the welcome message or switch the background image scenery. First, let''s
    start by creating a button that lets us close the welcome message surface:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，您将在表面上添加一些按钮，以便用户可以关闭欢迎消息或切换背景图像场景。首先，让我们从创建一个按钮开始，让我们关闭欢迎消息表面：
- en: 'The `Panel` component is a class component that gives you access to life cycles
    and local state management. Since you want to be able to close the welcome message,
    a local state can be used. At the top of the declaration of the `Panel` component,
    you must add a `constructor` that will have the initial state:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Panel`组件是一个类组件，它让您可以访问生命周期和本地状态管理。由于您希望能够关闭欢迎消息，因此可以使用本地状态。在`Panel`组件的声明顶部，您必须添加一个`constructor`，其中将有初始状态：'
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you're not very familiar with using class components for life cycles, you
    can look back at the few first chapters of this book. In these chapters, class
    components are used for life cycles instead of Hooks, which you've primarily used
    in the last few chapters.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对使用类组件进行生命周期不太熟悉，可以回顾一下本书的前几章。在这些章节中，类组件用于生命周期，而不是Hooks，您在最近的几章中主要使用了Hooks。
- en: 'The initial state has now been set, and you can use it to modify the styles
    of the panel by using an array of `styles` instead of just a single object. Apart
    from passing a `style` object in this array, you can also directly insert a styling
    rule by using a conditional spread. If the open state isn''t true, a `display:
    ''none''` styling rule will be added to the styling for the panel. Otherwise,
    an empty array will be spread into the `style` array:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '现在已经设置了初始状态，您可以使用它来修改面板的样式，方法是使用一个`styles`数组而不是单个对象。除了在这个数组中传递一个`style`对象之外，您还可以通过使用条件展开直接插入样式规则。如果打开状态不为true，则会将`display:
    ''none''`样式规则添加到面板的样式中。否则，一个空数组将被展开到`style`数组中：'
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After adding this `state` variable to the style prop of the panel, you can
    create the button that will change the value of the open state. You may recall
    that React 360 has four default UI components and that one of them is called `VrButton`.
    This component is similar to `TouchableOpacity` in React Native and has no styling
    whatsoever by default. `VrButton` can be imported from `react-360` and can be
    placed inside a `Text` (or `View`) component. Clicking on this `VrButton` will
    change the open state since it uses the `setState` method:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将此“state”变量添加到面板的样式属性之后，您可以创建将更改打开状态的按钮。您可能还记得，React 360具有四个默认UI组件之一称为“VrButton”。该组件类似于React
    Native中的“TouchableOpacity”，默认情况下没有任何样式。可以从“react-360”中导入“VrButton”，并将其放置在“Text”（或“View”）组件内。单击此“VrButton”将更改打开状态，因为它使用“setState”方法：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can also add some styling to `VrButton` and `Text`. The styling for these
    components can be placed in the same `StyleSheet` that the styling for the other
    components in this file were placed:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以为“VrButton”和“Text”添加一些样式。这些组件的样式可以放在与此文件中其他组件的样式相同的“StyleSheet”中：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, when you refresh the application in your browser, the panel will have a
    button that says `Close X` at the top right. When you click this button, the panel
    will close and you can freely explore the entire background surface. Besides closing
    the panel, you can also change the scenery of the entire application, which will
    be added in the final part of this section.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您在浏览器中刷新应用程序时，面板的右上角将有一个按钮，上面写着“Close X”。单击此按钮，面板将关闭，您可以自由探索整个背景表面。除了关闭面板，您还可以更改整个应用程序的风景，这将在本节的最后部分中添加。
- en: Dynamically changing scenes
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态更改场景
- en: The application is using a default background that is displayed for the surface,
    but it's also possible to dynamically change this background image. The initial
    application comes with a default 360 degree background image. To change this,
    you'd need to either make your own 360 degree panorama images or download some
    from the internet. Creating your own 360 degree images is possible with special
    cameras or by downloading an application on your mobile device. Online images
    can be found on numerous stock photo websites. In this book's GitHub repository,
    in the `ch12-assets` branch, you can find a selection of 360 degree panorama images.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序使用默认背景显示在表面上，但也可以动态更改此背景图像。初始应用程序带有默认的360度背景图像。要更改此设置，您需要制作自己的360度全景图像，或者从互联网上下载一些图像。可以使用特殊相机或在移动设备上下载应用程序来创建自己的360度图像。在线图像可以在许多库存照片网站上找到。在本书的GitHub存储库中，在“ch12-assets”分支中，您可以找到一些360度全景图像的选择。
- en: 'At the moment, your application only has the one default surface, which is
    a circular one that is displaying the welcome panel from the `Panel` component.
    It''s also possible to add flat components so that the user can change the scenery
    using buttons. This requires you to make the following changes:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您的应用程序只有一个默认表面，这是一个圆形表面，显示了“Panel”组件的欢迎面板。还可以添加平面组件，以便用户可以使用按钮更改风景。这需要您进行以下更改：
- en: Create a component that's displaying the specified buttons
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个显示指定按钮的组件
- en: Import and register the component from `index.js`
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从“index.js”导入并注册组件
- en: Set the new surface in `client.js`
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“client.js”中设置新的表面
- en: 'Before making these changes, you must download the images from the GitHub repository
    and place them in the `static_assets` directory so that they can be used from
    within your application. Now, make the following changes to change the scenery:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行这些更改之前，您必须从GitHub存储库下载图像，并将它们放在“static_assets”目录中，以便可以从应用程序内部使用它们。现在，进行以下更改以改变风景：
- en: 'Create a new component called `Navigation` in the `Components` directory and
    place the following code block inside it. This will return a component with basic
    styling for the surface, which is where the buttons will be placed later on:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components`目录中创建一个名为`Navigation`的新组件，并将以下代码块放入其中。这将返回一个具有表面基本样式的组件，稍后将在其中放置按钮：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the `index.js` file, you must import the `Navigation` component and register
    it with the `AppRegistry` method. This will ensure that the component can be rendered
    to a surface:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.js`文件中，您必须导入`Navigation`组件，并使用`AppRegistry`方法注册它。这将确保该组件可以呈现到一个表面上：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `client.js` file, this `Navigation` component must be added to a surface;
    in this case, this is a flat surface. A new surface can be created using the `Surface`
    method from `react-360` and you must specify the shape and the size of the component.
    You can also set an angle to position the component:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`client.js`文件中，必须将此`Navigation`组件添加到一个表面上；在这种情况下，这是一个平面表面。可以使用`react-360`的`Surface`方法创建一个新表面，并且必须指定组件的形状和大小。您还可以设置一个角度来定位组件：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'By refreshing the project in your browser, you will see a blue block being
    rendered at the bottom of the screen. To add buttons to this block, you can use
    the `VrButton` component and place the currently selected background in the local
    state. Let''s do this now:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过刷新浏览器中的项目，您将看到一个蓝色块被渲染在屏幕底部。要向此块添加按钮，您可以使用`VrButton`组件，并将当前选择的背景放在本地状态中。现在让我们来做这个：
- en: 'In the `Components/Navigation.js` file, you can add the necessary buttons to
    the `Navigation` component. To do this, you need to import the `VrButton` and
    `Text` components from `react-360` and place them in the `View` component that''s
    being rendered. They''ll get styling props since you want the buttons to have
    a margin on either the left- or right-hand side:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components/Navigation.js`文件中，您可以向`Navigation`组件添加必要的按钮。为此，您需要从`react-360`中导入`VrButton`和`Text`组件，并将它们放在正在呈现的`View`组件中。它们将获得样式属性，因为您希望按钮在左侧或右侧都有边距：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'These styling objects can be added to the `StyleSheet` method at the bottom
    of this file, right below the styling for `navigation`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些样式对象可以添加到此文件底部的`StyleSheet`方法中，就在`navigation`的样式下面：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The different 360 degree panorama background images that you''ve downloaded
    from the GitHub repository and placed in `static_assets` can be imported into
    this file later on using the `assets` method from `react-360`. To do this, you
    need to create a constant that''s an array of all the filenames of these images,
    including the initial image that was added by `react-360-cli`. Also, the `assets`
    and `Environment` methods must be imported here as you''ll need these to change
    the background image:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 稍后可以使用`react-360`的`assets`方法将从GitHub存储库下载并放置在`static_assets`中的不同360度全景背景图像导入到此文件中。为此，您需要创建一个常量，其中包含这些图像的所有文件名的数组，包括由`react-360-cli`添加的初始图像。此外，必须在此处导入`assets`和`Environment`方法，因为您需要这些来更改背景图像：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Just like we did for the `Panel` component, we need to create an initial state
    that defines which background is being displayed. This will be the first background
    of the backgrounds array, meaning `0`. Also, a function must be created that can
    change `currentBackground` using the `setState` method. When the state for `currentBackground`
    has been changed, the background image will be updated using the `Environment`
    method, which selects one of the backgrounds from the `static_assets` directory
    using the `assets` method:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像我们为`Panel`组件所做的那样，我们需要创建一个初始状态，定义显示哪个背景。这将是背景数组的第一个背景，即`0`。此外，必须创建一个函数，可以使用`setState`方法来改变`currentBackground`。当`currentBackground`的状态已经改变时，将使用`Environment`方法更新背景图像，该方法使用`assets`方法从`static_assets`目录中选择一个背景：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The newly created `changeBackground` function can be called when the `Navigation`
    component mounts and uses the first background image, but when the user clicks
    the button, the `changeBackground` function must be called as well. This can be
    done by adding a `componentDidMount` life cycle and calling the function with
    the `onClick` event on the buttons:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新创建的`changeBackground`函数可以在`Navigation`组件挂载时调用，并使用第一个背景图像，但是当用户点击按钮时，也必须调用`changeBackground`函数。这可以通过在按钮上添加`componentDidMount`生命周期并使用`onClick`事件调用函数来实现：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When you refresh the project in your browser, you may notice that you get an
    error when you press the left button once or the right button multiple times.
    To prevent this error from happening, you need to scope the maximum and minimum
    values of the `currentBackground` state. The value can''t go below zero or above
    the length of the `backgrounds` array. You can do this by making the following
    change to the `changeBackground` function:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在浏览器中刷新项目时，您可能会注意到当您按一次左按钮或多次按右按钮时会出现错误。为了防止发生此错误，您需要限定`currentBackground`状态的最大和最小值。该值不能低于零或高于`backgrounds`数组的长度。您可以通过对`changeBackground`函数进行以下更改来实现这一点：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The value of the `currentBackground` state will always be a value that can
    be found within the length of the `backgrounds` array, which makes it possible
    for you to navigate back and forth between the different background images. After
    clicking on the Prev or Next button a couple of times, your application will look
    as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`currentBackground`状态的值将始终是可以在`backgrounds`数组长度内找到的值，这使您可以在不同的背景图像之间来回导航。点击Prev或Next按钮几次后，您的应用程序将如下所示：'
- en: '![](assets/f541f271-ea7c-4c62-a814-113eee0f2dc1.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f541f271-ea7c-4c62-a814-113eee0f2dc1.png)'
- en: Another thing you can do with React 360 is add animated components, just like
    we did when we looked at React Native. You will learn how to add these animations
    in the next section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React 360，您可以做的另一件事是添加动画组件，就像我们在学习React Native时所做的那样。您将在下一节学习如何添加这些动画。
- en: Animations and 3D
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画和3D
- en: So far, all the components you've added in this chapter were 2D and didn't have
    animations; however, you can also animate components with React 360 and even add
    3D objects. These 3D objects must be pre-built in special 3D modeling software
    or downloaded from the internet and can be added to a surface in your application.
    For animations, the Animated API must be imported, which is similar to the Animated
    API we used for React Native.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中添加的所有组件都是2D的，并且没有动画；但是，您也可以使用React 360对组件进行动画处理，甚至添加3D对象。这些3D对象必须在特殊的3D建模软件中预先构建，或者从互联网上下载，并可以添加到应用程序的表面上。对于动画，必须导入Animated
    API，这类似于我们用于React Native的Animated API。
- en: Animations
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画
- en: Before getting into using 3D objects in React 360, let's learn how to use the
    Animated API from React 360 to create animations. The Animated API uses the Animated
    API from React Native and can be used to create both simple and advanced animations
    for UI components. With the Animated API, you can easily create animations that
    fade in and out or rotate, just by using values that are affected by the local
    state.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入React 360中使用3D对象之前，让我们学习如何使用React 360中的Animated API创建动画。Animated API使用React
    Native中的Animated API，可用于为UI组件创建简单和高级动画。使用Animated API，您可以轻松创建淡入淡出或旋转的动画，只需使用受本地状态影响的值即可。
- en: 'One of the components that can be animated is the `Panel` component, which
    displays a welcome message, since this component has an element that the user
    can click on to close the surface. When the user clicks the Close X button, the
    display styling rule of the component will be set to `none`, making the component
    disappear suddenly. Instead of this, you can change this into a smooth animation
    by doing the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`Panel`组件是可以进行动画处理的一个组件，它显示一个欢迎消息，因为这个组件有一个元素，用户可以点击关闭表面。当用户点击关闭按钮时，组件的显示样式规则将被设置为`none`，使组件突然消失。与此相反，您可以通过以下方式将其改变为平滑的动画：'
- en: 'The `panel` component is created in the `Components/Panel.js` file and is where
    the `Animated` API must be imported, which you can do from `react-360`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`panel`组件是在`Components/Panel.js`文件中创建的，这是必须从`react-360`导入`Animated`API的地方：'
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In `constructor()`, an initial value for the `Animated` value should be set.
    Call it `opacity` in this case since you want the `opacity` of the `Panel` component
    to change to zero to make it disappear. Initially, the `opacity` should be 1 since
    the welcome message must be displayed when the user opens the application:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`constructor()`中，应该设置`Animated`值的初始值。在这种情况下称为`opacity`，因为您希望`Panel`组件的`opacity`值变为零以使其消失。最初，`opacity`应为1，因为用户打开应用程序时必须显示欢迎消息：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When the user clicks `VrButton` in the `Panel` component, the state for `open`
    will be changed, after which the animation should start. Therefore, a `componentDidUpdate()`
    life cycle method must be created, where you can check for changes in the `state`
    for `open` and start the animation afterward. When the value for `open` changes
    from `true` to `false`, the animation should start to change the value for `opacity`
    from `1` to `0`, which makes it disappear:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户在`Panel`组件中点击`VrButton`时，`open`状态将被更改，之后动画应该开始。因此，必须创建一个`componentDidUpdate()`生命周期方法，在其中可以检查`open`状态的变化并在之后开始动画。当`open`的值从`true`变为`false`时，动画应该开始将`opacity`的值从`1`变为`0`，使其消失。
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, this value should be passed to the `style` prop of an `Animated` component,
    meaning you need to change the `View` component into an `Animated.View` component
    that can handle the animation. The `display` styling rule can be deleted from
    the `style` props and replaced with `opacity` since this controls whether the
    component is visible to the user or not:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，这个值应该传递给`Animated`组件的`style`属性，这意味着您需要将`View`组件更改为可以处理动画的`Animated.View`组件。`style`属性中的`display`样式规则可以被删除，并替换为`opacity`，因为这控制着组件对用户是否可见：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, when you click on the `VrButton` that closes the `Panel` component with
    the welcome message, the component will slowly dissolve into the background and
    disappear. The same sort of animation can be added to the `Navigation` component
    since you want to ensure that our users know that they can navigate through the
    different backgrounds. You can highlight the option to click on, for example,
    the Next button by having it repeatedly fade in and out. A lot of the logic for
    this is the same as it is for the `Panel` component:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您点击关闭带有欢迎消息的`Panel`组件的`VrButton`时，该组件将慢慢溶解到背景中并消失。同样的动画效果也可以添加到`Navigation`组件中，因为您希望确保我们的用户知道他们可以浏览不同的背景。您可以通过使其重复淡入淡出来突出显示点击选项，例如`Next`按钮。其中很多逻辑与`Panel`组件相同：
- en: 'The Animated API should be imported at the top of the `Components/Navigation.js` file
    and an initial value for the `opacity` state must be created:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components/Navigation.js`文件的顶部导入`Animated`API，并创建`opacity`状态的初始值：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The animation should start as soon as the component mounts, so the `Animated.timing`
    method, which is used to change the value of `opacity`, must be placed in a `componentDidMount()`
    life cycle method. This will start the animation of `opacity` from `0` to `1`,
    making the text inside the button blink:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画应该在组件挂载后立即开始，因此`Animated.timing`方法，用于改变`opacity`的值，必须放在`componentDidMount()`生命周期方法中。这将启动`opacity`从`0`到`1`的动画，使按钮内的文本闪烁：
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `Text` component inside `VrButton` for the button so that the user can
    navigate to the next background image can now be changed into an `Animated.Text`
    component and the `opacity` styling rule must be added to the `style` prop. This
    will add the animation to this component, making the text blink once when the
    application is mounted:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`VrButton`中的`Text`组件用于按钮，以便用户可以导航到下一个背景图像，现在可以更改为`Animated.Text`组件，并且必须将`opacity`样式规则添加到`style`属性中。这将向该组件添加动画，使文本在应用程序挂载时闪烁一次。'
- en: '[PRE31]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You don''t want the button text to blink just once. To make it blink repeatedly,
    you can use the `loop` and `sequence` methods from `Animated` to get multiple
    iterations of this animation. To make it smoother, we can add a small delay to
    the animation. This will iterate 10 times, after which the button will stop blinking:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不希望按钮文本只闪烁一次。为了使其重复闪烁，您可以使用`Animated`的`loop`和`sequence`方法来获得此动画的多次迭代。为了使其更加平滑，我们可以给动画添加一个小延迟。这将迭代10次，之后按钮将停止闪烁：
- en: '[PRE32]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now, the Next button will blink 10 times when the application mounts, thereby
    emphasizing to the user that it's possible to navigate between background scenes.
    However, these animations aren't the only animated features you can add. In the
    next section, you'll learn how to add animated 3D objects.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当应用程序挂载时，下一个按钮将闪烁10次，从而强调用户可以在背景场景之间进行导航。然而，这些动画并不是您可以添加的唯一动画特性。在下一节中，您将学习如何添加动画的3D对象。
- en: Rendering 3D objects
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染3D对象
- en: To use 3D objects in React 360, you need you to have prebuilt 3D objects, which
    you can create with special 3D modeling software or download from the internet.
    In this section, we'll use a 3D object from the GitHub repository for this chapter,
    where you can find a `.obj` file that's supported by React 360\. Apart from OBJ,
    GLTF models are also supported as 3D objects by React 360.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要在React 360中使用3D对象，您需要预先构建的3D对象，可以使用特殊的3D建模软件创建，也可以从互联网上下载。在本节中，我们将使用GitHub存储库中的3D对象，您可以在该章节中找到一个`.obj`文件，它受到React
    360的支持。除了OBJ，GLTF模型也受到React 360支持作为3D对象。
- en: OBJ files is a standard format for 3D model files that can be exported and imported
    by numerous 3D tools. Please keep in mind that React 360 doesn't support lighting
    and that you will need to include more advanced packages to render complex textures
    in a 3D model. Due to this, the 3D model that will be used in this example is
    just in one color, which is white.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: OBJ文件是3D模型文件的标准格式，可以被许多3D工具导出和导入。请记住，React 360不支持照明，您需要包含更高级的软件包来渲染3D模型中的复杂纹理。因此，这个例子中使用的3D模型只是一个颜色，即白色。
- en: Adding 3D objects to React 360 can be easily done with the `Entity` object while
    using a 3D model that is stored in the `static_assets` directory. By using `Entity`,
    the 3D model can be transformed into a component that you need to register in
    `index.js`, so that it can be used in `client.js` and added to the application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在React 360中添加3D对象可以很容易地使用`Entity`对象，同时使用存储在`static_assets`目录中的3D模型。通过使用`Entity`，3D模型可以转换为一个组件，您需要在`index.js`中注册它，以便在`client.js`中使用并添加到应用程序中。
- en: 'To add 3D objects, make the following changes:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 添加3D对象，进行以下更改：
- en: 'First, make sure you''ve copied the `helicopter.obj` file from this chapter''s
    GitHub repository into the `static_assets` directory and create a new file called
    `Helicoper.js` in the `Components` directory. In this file, the 3D model can be
    imported using the `asset` method and added as the source for an `Entity` object.
    To do this, use the following code:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，确保你已经将本章的GitHub存储库中的`helicopter.obj`文件复制到`static_assets`目录中，并在`Components`目录中创建一个名为`Helicoper.js`的新文件。在这个文件中，可以使用`asset`方法导入3D模型，并将其添加为`Entity`对象的源。为此，请使用以下代码：
- en: '[PRE33]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The scaling for the `Entity` object in the `style` prop will decrease the size
    of the 3D model; otherwise, it would be way too big to display properly. Also,
    the value for `rotateY` will rotate the helicopter 90 degrees on the *y* axis.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`Entity`对象在`style`属性中的缩放将减小3D模型的大小；否则，它将会太大而无法正确显示。此外，`rotateY`的值将在*y*轴上将直升机旋转90度。'
- en: 'This `Helicopter` component should be displayed in your application, but this
    can only be done if you register it to `AppRegistry` in the `index.js` file:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个`Helicopter`组件应该在你的应用程序中显示，但只有在`index.js`文件中将其注册到`AppRegistry`中才能实现：
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This component can be mounted to the application in the `client.js` file using
    the `renderToLocation` method. Previously, you used the `renderToSurface` method
    to mount the `Panel` and `Navigation` components, but, for 3D objects, this won''t
    work. Apart to the component itself, the `renderToLocation` method also takes
    the location of where the object will be placed:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个组件可以在`client.js`文件中使用`renderToLocation`方法挂载到应用程序中。之前，你使用`renderToSurface`方法来挂载`Panel`和`Navigation`组件，但是对于3D对象，这种方法行不通。除了组件本身，`renderToLocation`方法还需要指定对象放置的位置。
- en: '[PRE35]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, when you open the application, a white helicopter will be visible when
    you turn 90 degrees to the left. In the preceding code, `Location` is used to
    create a location in the application where the 3D model is mounted. This is done
    with `new Location([-100, 10, -2])`. This will place the object 100 meters to
    the left, 10 meters up, and 2 meters in front of the initial location of the user
    when the application is started. This can be seen in the following screenshot,
    which was taken in one of the different scenes for this application:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你打开应用程序时，当你向左转90度时，将会看到一个白色的直升机。在上述代码中，`Location`用于在应用程序中创建一个位置，3D模型将被挂载在这个位置上。这是通过`new
    Location([-100, 10, -2])`来实现的。这将把对象放置在用户启动应用程序时的初始位置的左侧100米，上方10米，前方2米处。这可以在以下截图中看到，这是在应用程序的不同场景之一中拍摄的：
- en: '![](assets/7d6f812d-5c1b-4102-a789-4448ea7f24c2.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7d6f812d-5c1b-4102-a789-4448ea7f24c2.png)'
- en: 'However, React 360 doesn''t stop at importing and rendering 3D objects: you
    can also animate them, just like any other component. For this, the Animated API
    can be used again. You can use this with the local state to add any animation
    to the 3D helicopter. The `style` prop for `Entity` already has some styling that
    determines the scale, which is something you can make dynamically by using an
    `Animated` value. By decreasing the scale of the helicopter a bit more, it will
    look as if it''s flying and will disappear into the distance. More effects can
    be added by changing the `rotateY` value to make it look like the helicopter is
    turning.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，React 360不仅仅局限于导入和渲染3D对象：你也可以像任何其他组件一样对它们进行动画处理。为此，可以再次使用Animated API。你可以使用这个API与本地状态一起为3D直升机添加任何动画。`Entity`的`style`属性已经具有一些样式，用于确定比例，这是可以通过使用`Animated`值动态地实现的。通过进一步减小直升机的比例，它看起来就像在飞行，并且会消失在远处。通过改变`rotateY`的值，可以添加更多效果，使直升机看起来正在转向。
- en: 'To create an animated 3D object, make the following changes to `Components/Helicopter.js`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个动画的3D对象，请对`Components/Helicopter.js`进行以下更改：
- en: 'Import `Animated` from `react-360` and create an `Animated` version of `Entity`.
    Since this isn''t a predefined `Animated` component, we can''t do this by typing
    `Animated.Entity`. Instead, we need to create a customer `Animated` component
    using the `createAnimatedComponent` method:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`react-360`中导入`Animated`并创建`Entity`的`Animated`版本。由于这不是预定义的`Animated`组件，我们不能通过输入`Animated.Entity`来实现。相反，我们需要使用`createAnimatedComponent`方法创建一个自定义的`Animated`组件：
- en: '[PRE36]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'A `constructor` must be added to the `Helicopter` component, where the initial
    `Animated` values for both the `scale` and `rotateY` are set as local state values.
    The initial value for `scale` is `0.02`, which is the same as the current scale
    of the helicopter, while `rotateY` will get the same value that it currently has:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必须在`Helicopter`组件中添加一个`constructor`，在其中将`scale`和`rotateY`的初始`Animated`值设置为本地状态值。`scale`的初始值为`0.02`，与直升机的当前比例相同，而`rotateY`将获得与当前值相同的值：
- en: '[PRE37]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can create the animation in the `componentDidMount()` life cycle method
    as a sequence since we want the helicopter to turn and fly away. The first part
    of the animation is a small delay, so the animation won''t start as soon as the
    application mounts. After 1 second (1,000 ms), the helicopter will start turning
    for about 8 seconds and fly away after another small delay:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在`componentDidMount()`生命周期方法中创建动画序列，因为我们希望直升机转向并飞走。动画的第一部分是一个小延迟，所以动画不会在应用程序挂载后立即开始。1秒后（1,000毫秒），直升机将开始转向约8秒，并在另一个小延迟后飞走：
- en: '[PRE38]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `Entity` component must be replaced with the `AnimatedEntity` component,
    which handles values from the `Animated` API. These values can be taken from the
    local state so that they can be added to the `style` prop of the `AnimatedEntity`
    component:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Entity`组件必须被`AnimatedEntity`组件替换，后者处理来自`Animated` API的值。这些值可以从本地状态中获取，以便将它们添加到`AnimatedEntity`组件的`style`属性中：'
- en: '[PRE39]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Now, the helicopter will start turning from `90` to `0` degrees and, over a
    period of time, it will fly away into the distance and disappear.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，直升机将从90度转向0度，经过一段时间，它将飞向远处并消失。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this final chapter, you've combined all of the knowledge you have gathered
    from this book to get started with React 360\. Although React 360 uses practices
    from both React and React Native, it serves a different and more niche use case
    than the other React technologies. At the time of writing, well-known principles
    such as lifecycle methods for the local state and the Animated API have been used
    to create a VR application that allows users to explore 2D panorama images. It
    has basic animations, as well as a 3D helicopter object that flies away into the
    distance.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，您已经结合了本书中收集到的所有知识，开始使用React 360。虽然React 360使用了来自React和React Native的实践，但它的用途与其他React技术不同且更为特定。在撰写本文时，已经使用了诸如生命周期方法和Animated
    API之类的众所周知的原则，以创建一个允许用户探索2D全景图像的VR应用程序。它具有基本的动画，以及一个飞向远处的3D直升机对象。
- en: With this final chapter, you've completed all 12 chapters of this book and have
    created 12 projects with React, React Native, and React 360\. Now, you have a
    solid understanding of everything that you can do with React and how to use it
    across different platforms. While React and React Native are already mature libraries,
    new features are added continuously. Even as you finish reading this book, there
    will probably be new features you can check out, starting with **Concurrent Mode**.
    My only advice would be to never stop learning and keep a close view on the documentation
    whenever a new feature is announced.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这最后一章，您已完成本书的所有12章，并使用React、React Native和React 360创建了12个项目。现在，您对React的所有可能性以及如何在不同平台上使用它有了扎实的理解。虽然React和React
    Native已经是成熟的库，但不断添加新功能。即使您完成了本书的阅读，可能还会有新功能可以查看，首先是**并发模式**。我的建议是永远不要停止学习，并在宣布新功能时密切关注文档。
- en: Further reading
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: React 360 Native Modules examples:[ https://facebook.github.io/react-360/docs/example-native-modules.html](https://facebook.github.io/react-360/docs/example-native-modules.html)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React 360原生模块示例：[https://facebook.github.io/react-360/docs/example-native-modules.html](https://facebook.github.io/react-360/docs/example-native-modules.html)
- en: NASA 3D images:[ https://mars.nasa.gov/3d/images](https://mars.nasa.gov/3d/images)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NASA 3D图像：[https://mars.nasa.gov/3d/images](https://mars.nasa.gov/3d/images)
