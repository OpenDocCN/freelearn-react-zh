- en: Using Hooks for Routing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Hooks进行路由
- en: In the previous chapter, we learned how to request resources with Hooks. We
    first implemented requesting resources using State/Reducer and Effect Hooks. Then,
    we learned about the `axios` and `react-request-hook` libraries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用Hooks请求资源。我们首先使用State/Reducer和Effect Hooks实现了请求资源，然后学习了`axios`和`react-request-hook`库。
- en: In this chapter, we are going to create multiple pages and implement routing in
    our app. Routing is important in almost every application. To implement routing, we
    are going to learn how to use use the Navi library, a Hook-based navigation system. Finally,
    we are also going to learn about dynamic links, and how to access routing information
    using Hooks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建多个页面，并在我们的应用程序中实现路由。路由在几乎每个应用程序中都很重要。为了实现路由，我们将学习如何使用Navi库，这是一个基于Hook的导航系统。最后，我们还将学习动态链接以及如何使用Hooks访问路由信息。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating multiple pages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多个页面
- en: Implementing routing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现路由
- en: Using routing Hooks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用路由Hooks
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 应该已经安装了相当新的Node.js版本（v11.12.0或更高）。还需要安装Node.js的`npm`包管理器。
- en: The code for this chapter can be found on the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter07](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter07)[.](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter07)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在GitHub存储库上找到：[https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter07](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter07)[.](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter07)
- en: 'Check out the following video to see the code in action:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的运行情况：
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that have been provided. It is important that
    you write the code yourself in order to be able to learn and understand properly.
    However, if you run into any issues, you can always refer to the code example.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，强烈建议您自己编写代码。不要简单地运行提供的代码示例。重要的是您自己编写代码，以便能够正确学习和理解。但是，如果遇到任何问题，您可以随时参考代码示例。
- en: Now, let's get started with the chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始这一章。
- en: Creating multiple pages
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多个页面
- en: At the moment, our blog application is a so-called single-page application.
    However, most larger apps consist of multiple pages. In a blog app, we at least
    want to have a separate page for each blog post.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的博客应用是所谓的单页面应用程序。然而，大多数较大的应用程序由多个页面组成。在博客应用中，我们至少希望为每篇博客文章创建一个单独的页面。
- en: 'Before we can set up routing, we need to create the various pages that we want
    to render. In our blog app, we are going to define the following pages:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置路由之前，我们需要创建我们想要渲染的各种页面。在我们的博客应用中，我们将定义以下页面：
- en: A home page, which will display a list of all posts
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主页将显示所有帖子的列表
- en: A post page, which will display a single post
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帖子页面，将显示单个帖子
- en: All pages will show a `HeaderBar`, which renders the `Header`, `UserBar`, `ChangeTheme`,
    and `CreatePost` components. We are now going to start by creating a component
    for the `HeaderBar`. Afterward, we are going to implement the page components.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有页面都将显示`HeaderBar`，其中包括`Header`、`UserBar`、`ChangeTheme`和`CreatePost`组件。我们现在将开始创建`HeaderBar`组件。之后，我们将实现页面组件。
- en: Creating the HeaderBar component
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建HeaderBar组件
- en: 'First of all, we are going to refactor some contents of our `App` component
    into a `HeaderBar` component. The `HeaderBar` component will contain everything
    that we want to display on every page: the `Header`, `UserBar`, `ChangeTheme`,
    and `CreatePost` components.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将重构`App`组件的一些内容到`HeaderBar`组件中。`HeaderBar`组件将包含我们想要在每个页面上显示的所有内容：`Header`、`UserBar`、`ChangeTheme`和`CreatePost`组件。
- en: 'Let''s start creating the `HeaderBar` component:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建`HeaderBar`组件：
- en: 'Create a new folder: `src/pages/`.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件夹：`src/pages/`。
- en: 'Create a new file, `src/pages/HeaderBar.js`, import `React` (with the `useContext` Hook),
    and define the component there. It will accept the `setTheme` function as prop:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件`src/pages/HeaderBar.js`，导入`React`（使用`useContext`钩子），并在那里定义组件。它将接受`setTheme`函数作为prop：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, cut the following code from the `src/App.js` component, and insert it
    between the `<div>` tags of the `HeaderBar` component:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从`src/App.js`组件中剪切以下代码，并将其插入到`HeaderBar`组件的`<div>`标签之间：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Also, cut the following import statements (and adjust the paths) from `src/App.js`
    and insert them at the beginning of the `src/pages/HeaderBar.js` file, after the
    `import React from ''react''` statement:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，从`src/App.js`中剪切以下导入语句（并调整路径），并将它们插入到`src/pages/HeaderBar.js`文件的开头，放在`import
    React from 'react'`语句之后：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Additionally, import the `ThemeContext` and the `StateContext`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，导入`ThemeContext`和`StateContext`：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, define two Context Hooks for the `theme` and `state`, and pull the `user`
    variable out of the `state` object in `src/pages/HeaderBar.js`, as we need it
    for a conditional check to determine whether we should render the `CreatePost`
    component:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`src/pages/HeaderBar.js`中为`theme`和`state`定义两个Context Hooks，并从`state`对象中提取`user`变量，因为我们需要它进行条件检查，以确定是否应该渲染`CreatePost`组件：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we import the `HeaderBar` component in `src/App.js`:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`src/App.js`中导入`HeaderBar`组件：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we render the `HeaderBar` component in `src/App.js`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`src/App.js`中渲染`HeaderBar`组件：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, we have a separate component for the `HeaderBar`, which will be shown on
    all pages. Next, we move on to creating the `HomePage` component.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个独立的`HeaderBar`组件，它将显示在所有页面上。接下来，我们继续创建`HomePage`组件。
- en: Creating the HomePage component
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建HomePage组件
- en: Now, we are going to create the `HomePage` component from the `PostList` component and
    the Resource Hook that is concerned with the posts. Again, we are going to refactor
    `src/App.js`, in order to create a new component.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将从`PostList`组件和与帖子相关的Resource Hook中创建`HomePage`组件。同样，我们将重构`src/App.js`，以创建一个新的组件。
- en: 'Let''s start creating the `HomePage` component:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建`HomePage`组件：
- en: 'Create a new file, `src/pages/HomePage.js`, import `React` with the `useEffect`
    and `useContext` Hooks, and define the component there. We also define a Context
    Hook and pull out the `state` object and `dispatch` function:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件`src/pages/HomePage.js`，导入`React`和`useEffect`和`useContext`钩子，并在那里定义组件。我们还定义了一个Context
    Hook，并提取了`state`对象和`dispatch`函数：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, cut the following import statements (and adjust the paths) from `src/App.js`,
    and add them after the `import React from ''react''` statement in `src/pages/HomePage.js`:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从`src/App.js`中剪切以下导入语句（并调整路径），并在`src/pages/HomePage.js`的`import React from
    'react'`语句之后添加它们：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, cut the following Hook definitions from `src/App.js`, and insert them
    before the `return` statement of the `HomePage` function:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从`src/App.js`中剪切以下Hook定义，并在`HomePage`函数的`return`语句之前插入它们：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, cut the following rendered code from `src/App.js`, and insert it in between
    the `<div>` tags of `src/pages/HomePage.js`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从`src/App.js`中剪切以下渲染的代码，并将其插入到`src/pages/HomePage.js`的`<div>`标签之间：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, import the `HomePage` component in `src/App.js`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`src/App.js`中导入`HomePage`组件：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, render the `HomePage` component below the `<hr />` tag:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`<hr />`标签下方渲染`HomePage`组件：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we have successfully refactored our current code into a `HomePage` component.
    Next, we move on to creating the `PostPage` component.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经成功地将当前的代码重构为`HomePage`组件。接下来，我们将继续创建`PostPage`组件。
- en: Creating the PostPage component
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建PostPage组件
- en: We are now going to define a new page component, where we will only fetch a
    single post from our API and display it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将定义一个新的页面组件，我们将从我们的API中仅获取单个帖子并显示它。
- en: 'Let''s start creating the `PostPage` component now:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始创建`PostPage`组件：
- en: Create a new `src/pages/PostPage.js` file.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/pages/PostPage.js`文件。
- en: 'Import `React`, the `useEffect` and  `useResource` Hooks and the `Post` component:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`React`、`useEffect`和`useResource` Hooks以及`Post`组件：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, define the `PostPage` component, which is going to accept the post `id`
    as prop:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，定义`PostPage`组件，它将接受帖子`id`作为prop：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we define a Resource Hook that will fetch the corresponding `post` object.
    We pass the `id` as dependency to the Effect Hook so that our resource re-fetches
    when the `id` changes:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个Resource Hook，它将获取相应的`post`对象。我们将`id`作为依赖项传递给Effect Hook，以便在`id`更改时重新获取我们的资源：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we render the `Post` component:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们渲染`Post`组件：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We now also have a separate page for single posts.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们也有了一个单独的页面用于单个帖子。
- en: Testing out the PostPage
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试PostPage
- en: 'To test out the new page, we are going to replace the `HomePage` component
    in `src/App.js` with the `PostPage` component, as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试新页面，我们将在`src/App.js`中用`PostPage`组件替换`HomePage`组件，如下所示：
- en: 'Import the `PostPage` component in `src/App.js`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/App.js`中导入`PostPage`组件：
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, replace the `HomePage` component with the `PostPage` component:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，用`PostPage`组件替换`HomePage`组件：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As we can see, now only one post, the React Hooks post, gets rendered.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，现在只有一个帖子，即React Hooks帖子，被渲染。
- en: Example code
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码
- en: The example code can be found in the `Chapter07/chapter7_1` folder.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码可以在`Chapter07/chapter7_1`文件夹中找到。
- en: Just run `npm install` in order to install all dependencies and `npm start` to
    start the application, and then visit `http://localhost:3000` in your browser
    (if it did not open automatically).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行`npm install`以安装所有依赖项，然后运行`npm start`启动应用程序，然后在浏览器中访问`http://localhost:3000`（如果没有自动打开）。
- en: Implementing routing
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现路由
- en: We are going to use the Navi library for routing. Navi supports React Suspense,
    Hooks, and error boundary APIs of React natively, which makes it the perfect fit
    to implement routing through the use of Hooks. To implement routing, we are first
    going to define routes from the pages that we defined in the previous section.
    Finally, we are going to define links from the main page to the corresponding
    post pages, and from these pages back to the main page.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Navi库进行路由。Navi原生支持React Suspense、Hooks和React的错误边界API，这使得它非常适合通过Hooks实现路由。为了实现路由，我们首先要从上一节中定义的页面中定义路由。最后，我们将从主页面定义链接到相应的帖子页面，以及从这些页面返回到主页面。
- en: Toward the end of this chapter, we are going to extend our routing functionality
    by implementing routing Hooks.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章末尾，我们将通过实现路由Hooks来扩展我们的路由功能。
- en: Defining routes
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义路由
- en: 'The first step when implementing routing is to install the `navi` and `react-navi`
    libraries. Then, we define the routes. Follow the given steps to do so:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现路由时的第一步是安装`navi`和`react-navi`库。然后，我们定义路由。按照给定的步骤来做：
- en: 'First, we have to install the libraries using `npm`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须使用`npm`安装这些库：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, in `src/App.js`, we import the `Router` and `View` components and the
    `mount` and `route` functions from the Navi library:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`src/App.js`中，我们从Navi库导入`Router`和`View`组件以及`mount`和`route`函数：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Make sure that the `HomePage` component is imported:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保导入了`HomePage`组件：
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we can define the `routes` object using the `mount` function:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`mount`函数来定义`routes`对象：
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In this function, we define our routes, starting with the main route:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个函数中，我们定义了我们的路由，从主路由开始：
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we define the route for a single post, here we use URL parameters (`:id`),
    and a function to dynamically create the `view`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义单个帖子的路由，这里我们使用URL参数（`:id`），并且一个函数来动态创建`view`：
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, we wrap our rendered code with the `<Router>` component, and replace
    the `<PostPage>` component with the `<View>` component in order to dynamically
    render the current page:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们用`<Router>`组件包装我们渲染的代码，并用`<View>`组件替换`<PostPage>`组件，以便动态渲染当前页面：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, if we go to `http://localhost:3000`, we can see a list of all posts, and
    when we go to `http://localhost:3000/view/react-hooks`, we can see a single post:
    the React Hooks post.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们去`http://localhost:3000`，我们可以看到所有帖子的列表，当我们去`http://localhost:3000/view/react-hooks`，我们可以看到一个单独的帖子：React
    Hooks帖子。
- en: Defining links
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义链接
- en: Now, we are going to define links from each post to the page of the corresponding
    single post, and then back to the main page from the post page. The links will
    be used to access the various routes that have been defined in our app. First,
    we are going to define links from the home page to the single post pages. Next,
    we are going to define links from the single post pages back to the main page.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将从每篇帖子定义链接到相应单独帖子的页面，然后从帖子页面返回到主页。这些链接将用于访问我们应用程序中定义的各种路由。首先，我们将从主页定义链接到单独的帖子页面。接下来，我们将从单独的帖子页面定义链接返回到主页。
- en: Defining links to the posts
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义到帖子的链接
- en: We start by shortening the post `content` in the list, and defining links from
    the `PostList` to the corresponding post pages. To do so, we have to define static
    links from the `PostList` on the home page to the specific post pages.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在列表中缩短帖子的`content`，并且定义从`PostList`到相应帖子页面的链接。为此，我们必须在主页上从`PostList`定义静态链接到特定的帖子页面。
- en: 'Let''s define those links now:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义这些链接：
- en: 'Edit `src/post/Post.js`, and import the `Link` component from `react-navi`:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/post/Post.js`，并从`react-navi`导入`Link`组件：
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, we are going to add two new props to the `Post` component: `id` and `short`,
    which will be set to `true` when we want to display the shortened version of the
    post. Later, we are going to set `short` to `true` in the `PostList` component:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将向`Post`组件添加两个新的props：`id`和`short`，当我们想要显示帖子的缩短版本时，将其设置为`true`。稍后，我们将在`PostList`组件中将`short`设置为`true`：
- en: '[PRE27]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, we are going to add some logic to trim the post `content` to `30` characters
    when listing it:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，当列出帖子时，我们将添加一些逻辑来将帖子的`content`修剪为`30`个字符：
- en: '[PRE28]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, we can display the `processedContent` value instead of the `content` value,
    and a `Link` to view the full post:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以显示`processedContent`值而不是`content`值，并且添加一个`Link`来查看完整的帖子：
- en: '[PRE29]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, we set the `short` prop to `true` within the `PostList` component.
    Edit `src/post/PostList.js`, and adjust the following code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`PostList`组件中将`short`属性设置为`true`。编辑`src/post/PostList.js`，并调整以下代码：
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now we can see that each post on the main page is trimmed to `30` characters,
    and has a link to the corresponding single post page:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到主页上的每篇帖子都被修剪为`30`个字符，并且有一个链接到相应的单独帖子页面：
- en: '![](assets/d6e741b2-1bd6-4741-b5f0-31c0c881f2e4.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d6e741b2-1bd6-4741-b5f0-31c0c881f2e4.png)'
- en: Displaying a link in the PostList
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在PostList中显示链接
- en: As we can see, routing is quite simple. Now, each post has a link to its corresponding
    full post page.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，路由非常简单。现在，每篇帖子都有一个链接到其对应的完整帖子页面。
- en: Defining the links to the main page
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义到主页的链接
- en: 'Now, we just need a way to get back to the main page from a single post page.
    We are going to repeat a similar process to what we have done previously. Let''s
    define the links back to the main page now:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要一种方法从单个帖子页面返回到主页面。我们将重复类似的过程，就像我们之前所做的那样。现在让我们定义返回主页面的链接：
- en: 'Edit `src/pages/PostPage.js`, and import the `Link` component there:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/pages/PostPage.js`，并在那里导入`Link`组件：
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, insert a new link back to the main page, before displaying the post:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在显示帖子之前，插入一个返回主页面的新链接：
- en: '[PRE32]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After going to a page, we can now use the Go back link in order to return to
    the main page:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入页面后，我们现在可以使用返回链接返回到主页面：
- en: '![](assets/c38ba098-2f3c-40ed-a7dd-4416ba9e824c.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c38ba098-2f3c-40ed-a7dd-4416ba9e824c.png)'
- en: Displaying a link on the single post page
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个帖子页面上显示链接
- en: Now, our app also provides a way back to the home page.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的应用程序还提供了返回主页的方法。
- en: Adjusting the CREATE_POST action
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整CREATE_POST动作
- en: Previously, we dispatched a `CREATE_POST` action when a new post gets created.
    However, this action does not contain the post `id`, which means that links to
    newly created posts will not work.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，当创建新帖子时，我们会调度`CREATE_POST`动作。但是，此操作不包含帖子`id`，这意味着对新创建的帖子的链接将无法工作。
- en: 'We are now going to adjust the code to pass the post `id` to the `CREATE_POST`
    action:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在要调整代码，将帖子`id`传递给`CREATE_POST`动作：
- en: 'Edit `src/post/CreatePost.js`, and import the `useEffect` Hook:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/post/CreatePost.js`，并导入`useEffect` Hook：
- en: '[PRE33]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, adjust the existing Resource Hook to pull out the `post` object after
    the creation of the post finishes:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，调整现有的Resource Hook，在创建帖子完成后提取`post`对象：
- en: '[PRE34]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, we can create a new Effect Hook after the Resource Hook, and dispatch
    the `CREATE_POST` action once the result of the create post request becomes available:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在Resource Hook之后创建一个新的Effect Hook，并在创建帖子请求的结果可用时调度`CREATE_POST`动作：
- en: '[PRE35]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, we remove the call to the `dispatch` function in the `handleCreate` handler
    function:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在`handleCreate`处理程序函数中删除对`dispatch`函数的调用：
- en: '[PRE36]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, we edit `src/reducers.js`, and adjust the `postsReducer` as follows:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们编辑`src/reducers.js`，并调整`postsReducer`如下：
- en: '[PRE37]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now, links to the newly created posts work fine, because the `id` value is added
    to the inserted `post` object.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对新创建的帖子的链接正常工作，因为`id`值已添加到插入的`post`对象中。
- en: Example code
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码
- en: The example code can be found in the `Chapter07/chapter7_2` folder.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码可以在`Chapter07/chapter7_2`文件夹中找到。
- en: Just run `npm install` in order to install all dependencies and `npm start` to
    start the application, and then visit `http://localhost:3000` in your browser
    (if it did not open automatically).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行`npm install`以安装所有依赖项，然后运行`npm start`启动应用程序，然后在浏览器中访问`http://localhost:3000`（如果没有自动打开）。
- en: Using routing Hooks
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路由钩子
- en: After implementing basic routing using `navi` and `react-navi`, we are now going
    to implement more advanced use cases using routing Hooks, which are provided by
    `react-navi`. Routing Hooks can be used to make routing more dynamic. For example,
    by allowing navigation to different routes from other Hooks. Furthermore, we can
    use Hooks to access all route-related information within a component.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`navi`和`react-navi`实现基本路由之后，我们现在将使用路由钩子来实现更高级的用例，这些路由钩子由`react-navi`提供。路由钩子可用于使路由更加动态。例如，通过允许从其他Hooks导航到不同的路由。此外，我们可以使用Hooks在组件内访问所有与路由相关的信息。
- en: Overview of Navi's Hooks
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Navi的Hooks概述
- en: 'First, we will have a look at three of the Hooks that are provided by the Navi
    library:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将看一下Navi库提供的三个Hooks：
- en: The `useNavigation` Hook
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useNavigation`钩子'
- en: The `useCurrentRoute` Hook
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useCurrentRoute`钩子'
- en: The `useLoadingRoute` Hook
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useLoadingRoute`钩子'
- en: The useNavigation Hook
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: useNavigation Hook
- en: 'The `useNavigation` Hook has the following signature:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`useNavigation`钩子具有以下签名：'
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It returns the `navigation` object of Navi, which contains the following functions
    to manage the navigation state of the app:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回Navi的`navigation`对象，其中包含以下函数来管理应用程序的导航状态：
- en: '`extractState()`: Returns the current value of `window.history.state`; this
    is useful when dealing with server-side rendering.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extractState()`：返回`window.history.state`的当前值；在处理服务器端渲染时很有用。'
- en: '`getCurrentValue()` : Returns the `Route` object that corresponds to the current
    URL.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCurrentValue()`: 返回与当前URL对应的`Route`对象。'
- en: '`getRoute()`: Returns a promise to the fully loaded `Route` object that corresponds
    to the current URL. The promise will only resolve once the `Route` object is fully
    loaded.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getRoute()`：返回一个promise，该promise对应于当前URL的完全加载的`Route`对象。只有在`Route`对象完全加载后才会解析该promise。'
- en: '`goBack()`: Goes back one page; this is similar to how pressing the back button
    of the browser works.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`goBack()`: 返回上一页；这类似于按下浏览器返回按钮的操作。'
- en: '`navigate(url, options)`: Navigates to the provided URL using the provided
    options (`body`, `headers`, `method`, `replace`, and `state`). More information
    about the options can be found on the official Navi documentation: [https://frontarm.com/navi/en/reference/navigation/#navigationnavigate.](https://frontarm.com/navi/en/reference/navigation/#navigationnavigate)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`navigate(url, options)`: 使用提供的选项(`body`, `headers`, `method`, `replace`, 和 `state`)导航到提供的URL。有关选项的更多信息可以在官方Navi文档中找到：[https://frontarm.com/navi/en/reference/navigation/#navigationnavigate.](https://frontarm.com/navi/en/reference/navigation/#navigationnavigate)'
- en: The useCurrentRoute Hook
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: useCurrentRoute Hook
- en: 'The `useCurrentRoute` Hook has the following signature:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`useCurrentRoute` Hook具有以下签名：'
- en: '[PRE39]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'It returns the latest non-busy route, which contains all information that Navi
    knows about the current page:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回最新的非忙碌路由，其中包含Navi对当前页面的所有了解：
- en: '`data`: Contains merged values from all `data` chunks.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据：包含所有`data`块的合并值。
- en: '`title`: Contains the `title` value that should be set on `document.title`.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题：包含应设置在`document.title`上的`title`值。
- en: '`url`: Contains information about the current route, such as the `href`, `query`,
    and `hash`.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`: 包含有关当前路由的信息，例如`href`、`query`和`hash`。'
- en: '`views`: Contains an array of components or elements that will be rendered
    in the route''s view.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图：包含将在路由视图中呈现的组件或元素的数组。
- en: The useLoadingRoute Hook
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: useLoadingRoute Hook
- en: 'The `useLoadingRoute` Hook has the following signature:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`useLoadingRoute` Hook具有以下签名：'
- en: '[PRE40]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: It returns the `Route` object for the page that is currently being fetched.
    If no page is currently being fetched, it outputs `undefined`. The object looks
    the same as the `Route` object of the `useCurrentRoute` Hook.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回当前正在获取的页面的`Route`对象。如果当前没有获取页面，则输出`undefined`。该对象与`useCurrentRoute` Hook的`Route`对象看起来相同。
- en: Programmatic navigation
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序化导航
- en: First, we are going to use the `useNavigation` Hook to implement programmatic
    navigation. We want to automatically redirect to the corresponding post page after
    creating a new post.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用`useNavigation` Hook来实现程序化导航。我们希望在创建新帖子后自动重定向到相应的帖子页面。
- en: 'Let''s implement programmatic navigation in the `CreatePost` component using
    Hooks:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Hooks在`CreatePost`组件中实现程序化导航：
- en: 'Edit `src/post/CreatePost.js`, and import the `useNavigation` Hook there:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/post/CreatePost.js`，并在那里导入`useNavigation` Hook：
- en: '[PRE41]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, define a Navigation Hook after the existing Resource Hook:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在现有的Resource Hook之后定义一个Navigation Hook：
- en: '[PRE42]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Finally, we adjust the Effect Hook to call `navigation.navigate()`, once the
    result of the create post request becomes available:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们调整Effect Hook以调用`navigation.navigate()`，一旦创建帖子请求的结果可用：
- en: '[PRE43]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: If we create a new `post` object now, we can see that after pressing the Create button,
    we automatically get redirected to the page of the corresponding post. We can
    now move on to accessing route information using Hooks.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在创建一个新的`post`对象，我们会发现在按下创建按钮后，我们会自动被重定向到相应帖子的页面。现在我们可以继续使用Hooks来访问路由信息。
- en: Accessing route information
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问路由信息
- en: Next, we are going to use the `useCurrentRoute` Hook to access information about
    the current route/URL. We are going to use this Hook to implement a footer, which
    will display the `href` value of the current route.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`useCurrentRoute` Hook来访问有关当前路由/URL的信息。我们将使用此Hook来实现一个页脚，它将显示当前路由的`href`值。
- en: 'Let''s get started implementing the footer now:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始实现页脚：
- en: 'First, we create a new component for the footer. Create a new `src/pages/FooterBar.js`
    file, and import `React`, as well as the `useCurrentRoute` Hook from `react-navi`:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们为页脚创建一个新组件。创建一个新的`src/pages/FooterBar.js`文件，并从`react-navi`中导入`React`以及`useCurrentRoute`
    Hook：
- en: '[PRE44]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Then, we define a new `FooterBar` component:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义一个新的`FooterBar`组件：
- en: '[PRE45]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We use the `useCurrentRoute` Hook, and pull out the `url` object to be able
    to show the current `href` value in the footer:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`useCurrentRoute` Hook，并提取`url`对象以便在页脚中显示当前的`href`值：
- en: '[PRE46]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Finally, we render a link to the current `href` value in the footer:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在页脚中呈现当前`href`值的链接：
- en: '[PRE47]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, when we, for example, open a post page, we can see the `href` value of
    the current post in the footer:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们打开一个帖子页面时，我们可以在页脚中看到当前帖子的`href`值：
- en: '![](assets/8b2bb30b-e3e0-4e31-9874-f6bac3ad65fd.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8b2bb30b-e3e0-4e31-9874-f6bac3ad65fd.png)'
- en: Displaying a footer with the current href value
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 显示当前href值的页脚
- en: As we can see, our footer works properly—it always shows the `href` value of
    the current page.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们的页脚正常工作——它始终显示当前页面的`href`值。
- en: Example code
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码
- en: The example code can be found in the `Chapter07/chapter7_3` folder.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码可以在`Chapter07/chapter7_3`文件夹中找到。
- en: Just run `npm install` in order to install all dependencies and `npm start` to
    start the application, and then visit `http://localhost:3000` in your browser
    (if it did not open automatically).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行`npm install`以安装所有依赖项，然后运行`npm start`启动应用程序，然后在浏览器中访问`http://localhost:3000`（如果没有自动打开）。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we first defined two pages for our blog: the home page and
    a page for single posts. We also created a component for the `HeaderBar`. Afterward,
    we implemented routing by defining routes, links to the single posts, and links
    back to the main page. Finally, we used routing Hooks to implement dynamic navigation
    when creating a new post, and implemented a footer that shows the current URL.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先为我们的博客定义了两个页面：主页和单个帖子页面。我们还为`HeaderBar`创建了一个组件。之后，我们通过定义路由、链接到单个帖子以及返回主页的链接来实现了路由。最后，我们在创建新帖子时使用路由Hooks来实现动态导航，并实现了一个显示当前URL的页脚。
- en: Routing is very important, and is used in almost every application. We now know
    how to define separate pages and how to link between them. Furthermore, we learned
    how to dynamically navigate between pages using Hooks. We also learned how to
    access routing information with Hooks for more advanced use cases.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 路由非常重要，在几乎每个应用程序中都会使用。我们现在知道如何定义单独的页面以及如何在它们之间进行链接。此外，我们学会了如何使用Hooks在页面之间进行动态导航。我们还学会了如何使用Hooks访问路由信息以进行更高级的用例。
- en: There are many more things that the Navi library can do. However, this book
    focuses on Hooks, so most features of Navi are out of scope. For example, we can
    fetch data using Navi, implement error pages (for example, a 404 page), lazy loading
    and compose routes. Feel free to read up on those features in the official documentation
    of Navi.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Navi库可以做很多其他事情。但是，本书侧重于Hooks，因此大多数Navi的功能都不在讨论范围之内。例如，我们可以使用Navi获取数据，实现错误页面（例如404页面），延迟加载和组合路由。请随意阅读官方Navi文档中关于这些功能的内容。
- en: 'In the next chapter, we are going to learn about the various Hooks that are
    provided by the React community: for input handling, for responsive design, to
    implement undo/redo, and to implement various data structures and React life cycle
    methods using Hooks. We are also going to learn where to find more Hooks provided
    by the community.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习由React社区提供的各种Hooks：用于输入处理、响应式设计、实现撤销/重做，以及使用Hooks实现各种数据结构和React生命周期方法。我们还将学习在哪里可以找到社区提供的更多Hooks。
- en: Questions
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'In order to recap what we have learned in this chapter, try answering the following
    questions:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回顾本章学到的内容，请尝试回答以下问题：
- en: Why do we need to define separate pages?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们需要定义单独的页面？
- en: How do we define routes using the Navi library?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何使用Navi库定义路由？
- en: How do we define routes with URL parameters?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何使用URL参数定义路由？
- en: How are static links defined with Navi?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用Navi定义静态链接？
- en: How can we implement dynamic navigation?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何实现动态导航？
- en: Which Hook is used to access the route information of the current route?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个Hook用于访问当前路由的路由信息？
- en: Which Hook is used to access the route information of the currently loading
    route?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个Hook用于访问当前加载路由的路由信息？
- en: Further reading
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the official documentation of the Navi library: [https://frontarm.com/navi/en/](https://frontarm.com/navi/en/).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对本章学到的概念感兴趣，可以查看Navi库的官方文档：[https://frontarm.com/navi/en/](https://frontarm.com/navi/en/)。
