- en: Making Our App Installable with a Manifest
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用清单使我们的应用程序可安装
- en: We’re now starting down the road to Progressive Web App land. From now on, our
    only focus will be on taking our existing application and making it faster, sleeker,
    and more user-friendly.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在开始走向渐进式Web应用程序领域。从现在开始，我们的唯一重点将是将我们现有的应用程序变得更快、更时尚和更用户友好。
- en: One of the big advantages of the Progressive Web App is bridging the gap between
    a web application (viewed in a browser) and a native app (launched as a separate
    application). The next few chapters, in particular, will focus on making our web
    app more native-like, without losing all the advantages of a web application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进式Web应用程序的一个重要优势是弥合了Web应用程序（在浏览器中查看）和本地应用程序（作为独立应用程序启动）之间的差距。接下来的几章，特别是将专注于使我们的Web应用程序更像本地应用程序，而不失去Web应用程序的所有优势。
- en: The first major benefit of a web application over a native app is the lack of
    an install barrier. If you create a native app, you need to convince users to
    devote precious storage and bandwidth, before they even use your application.
    They must be willing to sit through the download and install process. Then they
    have to keep it around, even if they don't use it that often.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序相对于本地应用程序的第一个主要优势是没有安装障碍。如果你创建一个本地应用程序，你需要说服用户在甚至使用你的应用程序之前，投入宝贵的存储空间和带宽。他们必须愿意忍受下载和安装过程。然后他们必须保留它，即使他们并不经常使用它。
- en: Web applications have no such barrier. You can use them almost instantly, and
    the most sophisticated web apps have functionality that rivals native apps. What's
    their disadvantage? Well, the user has to navigate to their browser, then to the
    web page, in order to use it. They don't have the nice tidy reminder of the app's
    existence staring at them from their phone's home screen.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序没有这样的障碍。你几乎可以立即使用它们，而且最复杂的Web应用程序具有可以与本地应用程序媲美的功能。它们的缺点是什么？嗯，用户必须先导航到他们的浏览器，然后再导航到网页才能使用它。他们没有漂亮整洁的应用程序存在的提醒，从他们手机的主屏幕上盯着他们。
- en: What would the best of both worlds be? It would be an application that allows
    user to try it out before they commit to installing it to their device, but once
    it's installed, it acts exactly like a native application, with an icon on the
    device's home screen.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是双赢的最佳选择？它将是一个允许用户在安装到他们的设备之前先试用的应用程序，但一旦安装后，它会像本地应用程序一样运行，并在设备的主屏幕上显示图标。
- en: How can we achieve this? We can do so with a web app manifest.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何实现这一点？我们可以通过一个Web应用程序清单来实现。
- en: 'In this chapter, we''ll cover the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: What is a web app manifest?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Web应用程序清单？
- en: How to make our app installable on Android
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使我们的应用程序可以在Android上安装
- en: How to make our app installable on iOS
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使我们的应用程序可以在iOS上安装
- en: Using web app install banners
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Web应用程序安装横幅
- en: What is an app manifest?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是应用程序清单？
- en: In [Chapter 2](part0048.html#1DOR00-7dd7c66301294003b85168009fe95fa4), *Getting
    Started with Webpack*, when we set up our Webpack build configuration, we ensured
    that our build process generated an asset manifest, with the filename `asset-manifest.json`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](part0048.html#1DOR00-7dd7c66301294003b85168009fe95fa4)，*使用Webpack入门*，当我们设置我们的Webpack构建配置时，我们确保我们的构建过程生成了一个资产清单，文件名为`asset-manifest.json`。
- en: This file contains a list of the JavaScript files our application uses. If we
    want to, we can configure it to also list the CSS and image files we use.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件包含了我们的应用程序使用的JavaScript文件列表。如果我们愿意，我们可以配置它来列出我们使用的CSS和图像文件。
- en: This asset manifest gives us an idea of what manifests are used for--describing
    some part of application. Our web app manifest is similar, but simply describes
    what our application is all about from a higher level, in a way that resembles
    an App Store description of a native app.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个资产清单让我们了解了清单的用途--描述应用程序的某个部分。我们的Web应用清单类似，但简单地描述了我们的应用程序从更高层面上的全部内容，以一种类似于应用商店对本地应用的描述的方式。
- en: That's what it looks like, and we'll dive more into that soon as we build out
    our file, but the real magic of the web app manifest is what it does.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的外观，随着我们构建文件，我们将更深入地了解，但Web应用清单的真正魔力在于它的功能。
- en: On some browsers (more on that later in the chapter), if your web application
    includes a proper web app manifest, the user can choose to save the web page to
    their home screen, where it will appear like a regular app, with its own launch
    icon. When they click on the icon, it will launch with a splash screen and (though
    it’s running from the browser) run in full screen mode, so it looks and feels
    like a regular app.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些浏览器上（本章后面会详细介绍），如果您的Web应用包括一个合适的Web应用清单，用户可以选择将网页保存到主屏幕上，它会像一个常规应用程序一样出现，并带有自己的启动图标。当他们点击图标时，它将以闪屏启动，并且（尽管是从浏览器运行）以全屏模式运行，因此看起来和感觉像一个常规应用程序。
- en: Browser support
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器支持
- en: Here's the downside of the web app manifest--it’s a new technology. As such,
    few browsers actually support it. As of now, only newer versions of Android Webview
    and Chrome for Android have full support.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Web应用清单的缺点--它是一种新技术。因此，很少有浏览器实际支持它。截至目前，只有较新版本的安卓Webview和Chrome for Android具有完全支持。
- en: I'm predicting that support will come soon to all newer browsers, but where
    does that leave us for the moment?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我预测支持很快会到来，适用于所有新版浏览器，但目前我们该怎么办呢？
- en: In short, there are ways to activate similar functionality on older browsers.
    In this chapter, we'll cover using a web app manifest (for those of you on newer
    browsers, and to prepare you for the future) and a **polyfill** for iOS devices.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，有办法在旧版浏览器上激活类似的功能。在本章中，我们将介绍如何使用Web应用清单（适用于新版浏览器的用户，并为未来做准备）以及iOS设备的**polyfill**。
- en: If you’re interested in covering other devices, there are polyfills available,
    such as **ManUp** ([https://github.com/boyofgreen/manUp.js/](https://github.com/boyofgreen/manUp.js/)).
    What these polyfills do is that they take the gamut of workarounds for different
    devices and compile them into one manifest file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣覆盖其他设备，可以使用polyfills，比如**ManUp**（[https://github.com/boyofgreen/manUp.js/](https://github.com/boyofgreen/manUp.js/)）。这些polyfills的作用是将不同设备的各种解决方法编译成一个清单文件。
- en: However, this book is about the future of web applications, so we'll show you
    everything you need to prepare for the world of web app manifests.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，本书是关于Web应用的未来，所以我们将向您展示一切您需要为Web应用清单的世界做准备。
- en: Making our app installable - Android
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使我们的应用可安装-安卓
- en: Google is one of the biggest proponents of PWA's, so it makes sense that their
    Chrome browser and Android operating system are the most friendly to web app manifests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌是PWA的最大支持者之一，因此他们的Chrome浏览器和安卓操作系统对Web应用清单最为友好。
- en: Let's go through the process of creating a manifest in a way that makes it work
    with the latest version of Chrome. Later in this chapter, we'll go through the
    same process in a more manual way in order to support iOS.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建一个清单的过程，以使其与最新版本的Chrome兼容。在本章后面，我们将以更手动的方式进行相同的过程，以支持iOS。
- en: Manifest properties
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清单属性
- en: 'Let’s get to it! In your `public/` folder, create a file called `manifest.json`,
    and then add an empty object. Each of the following will be a key-value pair of
    that object. We''ll take a quick tour through each of the available properties:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！在您的`public/`文件夹中，创建一个名为`manifest.json`的文件，然后添加一个空对象。以下每个都将是该对象的键值对。我们将快速浏览一下每个可用属性：
- en: '`name`: Your application''s name. Simple!:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：您的应用程序名称。简单！：'
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`short_name`: A human readable version of your application''s name. This is
    for times when the full name won''t fit, like on your user''s home screen. If
    your app''s name is "Why PWAs Are Great For Everyone", you can shorten it to "PWAs
    R Great" or something here:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`short_name`：您的应用程序名称的可读版本。这是在全名无法完全显示时使用，比如在用户的主屏幕上。如果您的应用程序名称是“为什么PWA对每个人都很棒”，您可以将其缩短为“PWAs
    R Great”或其他内容：'
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`icons`: A list of icons for the user''s device to use. We will just use our
    current logo, which is conveniently the maximum size needed for an icon.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`icons`：用户设备使用的图标列表。我们将只使用我们当前的徽标，这恰好是图标所需的最大尺寸。'
- en: 'Google recommends the following set of icons:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Google推荐以下一组图标：
- en: 128x128 as a base icon size
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 128x128作为基本图标大小
- en: 152x152 for Apple devices
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 152x152适用于Apple设备
- en: 144x144 for Microsoft devices
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 144x144适用于Microsoft设备
- en: 192x192 for Chrome
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 192x192适用于Chrome
- en: 256x256, 384x384, and 512x512 for different device sizes
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 256x256、384x384和512x512适用于不同的设备尺寸
- en: 'The last two are included in the asset bundle. We''ll need our designers to
    create the rest for our production build, but they''re not needed just yet:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两个包含在资产包中。我们需要我们的设计师为我们的生产版本创建其余部分，但目前还不需要：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`start_url`: The Start URL is used for analytics purposes so that you can see
    how many users are visiting your web application via an installed PWA. It''s optional,
    but doesn''t hurt:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start_url`：启动URL用于分析目的，以便您可以看到有多少用户通过安装的PWA访问您的Web应用程序。这是可选的，但不会有害。'
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`background_color`: The background color is used for the color of the splash
    screen that displays when our application starts up. Here, we set it to a nice
    orange-red:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`background_color`：背景颜色用于启动我们的应用程序时显示的闪屏的颜色。在这里，我们将其设置为一个漂亮的橙红色：'
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`theme_color`: This is similar to `background_color`, but it styles the toolbar
    on Android when your app is active. A nice touch:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme_color`：这类似于`background_color`，但在您的应用程序处于活动状态时，它会为Android上的工具栏设置样式。一个不错的点缀：'
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`display`: As we said earlier, PWAs can be launched as if they were a native
    app, AKA the browser bar is hidden; that’s what this property activates. You can
    set it to "browser" if you think it’d be better for your users to be able to see
    the address bar:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display`：正如我们之前所说，PWA可以像本机应用程序一样启动，即浏览器栏被隐藏；这就是这个属性的作用。如果您认为让用户能够看到地址栏更好，可以将其设置为“browser”：'
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Other properties
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他属性
- en: 'There are a few more properties you need to be aware of for our app:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些属性需要您了解我们的应用程序：
- en: '`related_applications`: You can provide a list of native applications related
    to your web application, with a URL to download; pair it with `prefer_related_applications`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`related_applications`：您可以提供与您的Web应用程序相关的本机应用程序的列表，并附带下载的URL；将其与`prefer_related_applications`配对使用。'
- en: '`prefer_related_applications`: A boolean that defaults to false. If true, the
    user will be notified about the related applications.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prefer_related_applications`：一个默认值为false的布尔值。如果为true，则用户将收到有关相关应用程序的通知。'
- en: '`scope`: A string, such as `/app`. If the user navigates to a page outside
    the scope, the app will return to the appearance of a regular web page in the
    browser.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope`：一个字符串，比如`/app`。如果用户导航到范围之外的页面，应用程序将返回到浏览器中常规网页的外观。'
- en: '`description`: A description of what your app does; not mandatory.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：您的应用程序的描述；不是强制性的。'
- en: '`dir`: The direction of the type.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dir`：类型的方向。'
- en: '`lang`: The language of the `short_name`. When paired with `dir`, can be used
    to ensure that right to left languages display correctly.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lang`：`short_name`的语言。与`dir`配对使用，可用于确保从右到左的语言正确显示。'
- en: Linking our manifest
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接我们的清单
- en: 'That''s it! At the end, your `manifest.json` should look like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！最后，您的`manifest.json`应该是这样的：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can then link it from your `index.html`, as shown:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以像这样从您的`index.html`中链接它：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Ensure that you also copy it into your `build` folder.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您也将其复制到您的`build`文件夹中。
- en: 'If all went well, and you have the latest version of Chrome, you can check
    whether it worked properly by going to the `Application` tab in Chrome Dev Tools.
    Ensure that you restart your server first. You should see the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，并且您使用的是最新版本的Chrome，您可以通过转到Chrome Dev Tools中的“应用程序”选项卡来检查是否正常工作。确保首先重新启动服务器。您应该会看到以下内容：
- en: '![](../images/00058.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00058.jpeg)'
- en: 'Now to test it! Let''s run our deploy process again with **`yarn deploy`**.
    When that''s done, navigate to the application on your Android device. In order
    to trigger the web app install banner, you need to visit the site twice, with
    five minutes between visits:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来测试一下吧！让我们再次运行我们的部署过程，使用**`yarn deploy`**。完成后，转到您的Android设备上的应用程序。为了触发Web应用程序安装横幅，您需要访问该站点两次，每次访问之间间隔五分钟：
- en: '![](../images/00059.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00059.jpeg)'
- en: If you don't see the install banner, you can also install it by going to the
    options dropdown and selecting Add to Home Screen.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有看到安装横幅，您也可以通过转到选项下拉菜单并选择“添加到主屏幕”来安装它。
- en: 'Once you click on Add to Home Screen, you should see it appear:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击“添加到主屏幕”，您应该会看到它出现：
- en: '![](../images/00060.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00060.jpeg)'
- en: 'Then, when we launch, we get a beautiful splash screen:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当我们启动时，我们会得到一个漂亮的启动画面：
- en: '![](../images/00061.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00061.jpeg)'
- en: It's lovely.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这很可爱。
- en: That’s the gist of making an installable PWA for Android. It's a nice and streamlined
    process, thanks to Google’s advocacy of PWAs, but many of our users will undoubtedly
    be using iPhones, so we have to ensure that we support them as well.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为Android制作可安装的PWA的要点。这是一个非常简洁流畅的过程，这要感谢Google对PWA的倡导，但我们的许多用户无疑会使用iPhone，因此我们也必须确保我们也支持他们。
- en: Making our app installable - iOS
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使我们的应用可安装- iOS
- en: Apple hasn't come out in support of Progressive Web Apps, as of the time of
    writing. There's numerous theories as to why (their revenue-generating App Store
    ecosystem, competition with Google, lack of control), but it does mean that the
    process of making our app installable is much more manual.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写本文时，苹果尚未支持渐进式Web应用程序。关于这一点有许多理论（他们的盈利能力强大的App Store生态系统，与谷歌的竞争，缺乏控制），但这意味着使我们的应用可安装的过程要更加手动化。
- en: Let's be clear--the optimal PWA experience, as of now, will be for a user on
    the latest version of Chrome, on an Android device.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们明确一点-截至目前，PWA的最佳体验将是针对使用最新版本Chrome的Android设备用户。
- en: However, PWAs are also all about progressive enhancement, a concept we'll cover
    in more depth in the later chapters. Progressive enhancement means we deliver
    the best possible experience for each user on their device; if they can support
    all the shiny new stuff, great, otherwise, we do our best with the tools they
    are using.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，PWA也是关于渐进式增强的，这是我们将在后面的章节中更深入地介绍的概念。渐进式增强意味着我们为每个用户在其设备上提供最佳的体验；如果他们可以支持所有新的功能，那很好，否则，我们会尽力利用他们正在使用的工具。
- en: So, let's go through the process of making our UX delightful for an iPhone user
    who wants to save our app to their home screen.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们来看看如何使我们的UX对于想要将我们的应用保存到主屏幕的iPhone用户来说是愉快的。
- en: 'We''ll use lots of `<meta>` tags to tell the browser that our app is installable.
    Let''s start with the icon:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用大量的`<meta>`标签来告诉浏览器我们的应用是可安装的。让我们从图标开始：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Add the following to `public/index.html` (for the rest of this section, group
    all your `meta` tags above your `link` tags). This defines what the icon will
    be on the user’s home screen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到`public/index.html`（在本节的其余部分中，将所有的`meta`标签分组放在`link`标签之上）。这定义了用户主屏幕上的图标。
- en: 'Next, we add a title to our page, which will be used as the name of the app
    on the home screen. Add this after your `link` tags:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们为页面添加一个标题，这将作为主屏幕上应用程序的名称。在您的`link`标签之后添加这个：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, we need to let iOS know that this is a web app. You can do so with the
    following `meta` tag:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要让iOS知道这是一个Web应用程序。您可以使用以下`meta`标签来实现：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As we did with `theme_color` in the Android section, we want to style the way
    the status bar appears. The default value is black, which looks like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在Android部分中使用`theme_color`一样，我们希望样式化状态栏的外观。默认值是黑色，看起来像这样：
- en: '![](../images/00062.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00062.jpeg)'
- en: 'The other option is black-translucent, which is not very black, and mainly
    translucent:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是black-translucent，它并不是非常黑，主要是半透明的：
- en: '![](../images/00063.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00063.jpeg)'
- en: 'Add this with the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容添加：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The last thing we want to do is style the splash screen; what appears as the
    app boots up.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的最后一件事是设计启动画面；在应用程序启动时出现的内容。
- en: The way to do this on iOS is a little manual--you provide a static image.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上进行此操作有点手动--您需要提供一个静态图像。
- en: 'For full support, you need to provide a separate startup image for each iOS
    screen size, from iPads to the smallest iPhone. If you want to see a great example
    of multiple startup images and icons, check the gist at [https://gist.github.com/tfausak/2222823](https://gist.github.com/tfausak/2222823).
    Included here are the startup image links from that gist:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完全支持，您需要为每个iOS屏幕尺寸提供单独的启动图像，从iPad到最小的iPhone。如果您想看到多个启动图像和图标的绝佳示例，请查看[gist链接](https://gist.github.com/tfausak/2222823)。这里包括了该gist中的启动图像链接：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You may note that these links do not include any iPhone later than the iPhone
    6 Plus. As of the time of writing, startup images have questionable support on
    iOS 9, and no support on iOS 10\. While this doesn't detract from the user experience
    of your app (splash screens should only be seen for a second, anyway) it's an
    indicator of Apple’s lack of full support for PWAs. Hopefully, this will change
    in the near future.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能注意到这些链接不包括任何iPhone 6 Plus之后的iPhone。在撰写本文时，iOS 9对启动图像的支持有问题，iOS 10则不支持。虽然这不会影响您的应用程序的用户体验（启动画面本来也只能看一秒钟），但这表明了苹果对PWA的支持不完全。希望这在不久的将来会发生改变。
- en: 'Overall, making your app an installable web app for iOS is not as fancy or
    intuitive as a `manifest.json`, but fairly straightforward. Redeploy your app
    with **`yarn deploy`**, and then open the web page with Safari on your iPhone.
    Then, hit share and Add to Home Screen:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，将您的应用程序制作成iOS可安装的Web应用程序并不像`manifest.json`那样花哨或直观，但相当简单。使用**`yarn deploy`**重新部署您的应用程序，然后在iPhone上的Safari中打开网页。然后，点击分享并添加到主屏幕：
- en: '![](../images/00064.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00064.jpeg)'
- en: 'It should appear on your home screen just like a regular app and, when launched,
    appear like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该会出现在您的主屏幕上，就像普通的应用程序一样，并且在启动时会出现如下：
- en: '![](../images/00063.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00063.jpeg)'
- en: This is very slick.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常漂亮。
- en: 'Here''s what the final `index.html` should look like:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的`index.html`应该是这样的：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: App install banners and you
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用安装横幅和您
- en: Being able to add to home screen is great functionality, but how will our user
    know that our application is installable, especially if they’ve never heard of
    PWAs?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 能够添加到主屏幕是一个很棒的功能，但是我们的用户如何知道我们的应用程序是可安装的，特别是如果他们从未听说过PWA呢？
- en: 'Enter the **Web App Install Banner**. Previously, App Install Banners were
    a handy way to advertise your native app--see the following example from Flipboard:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 进入**Web App Install Banner**。 以前，应用安装横幅是一种方便的方式来宣传您的原生应用程序-请参阅Flipboard的以下示例：
- en: '![](../images/00065.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00065.jpeg)'
- en: 'Now, however, Google is leading the charge on PWA install banners, prompting
    the user to add to home screen. See the following example from the Chrome Dev
    Summit site:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在，谷歌正在带头推动PWA安装横幅，提示用户添加到主屏幕。 请参阅Chrome Dev Summit网站的以下示例：
- en: '![](../images/00066.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00066.jpeg)'
- en: This banner has the advantages of making your users aware that your site is
    a PWA, and for those unfamiliar with installable web apps, providing an entry
    point into the world of PWAs.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 该横幅具有使用户意识到您的网站是PWA的优势，并且对于那些不熟悉可安装的Web应用程序的用户，提供了进入PWA世界的入口点。
- en: 'Here''s what it looks like on your home screen when you click on Add in the
    preceding screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击上一个屏幕截图中的“添加”时，您的主屏幕上会显示如下内容：
- en: '![](../images/00067.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00067.jpeg)'
- en: 'However, like everything in this section, this is new technology. As of now,
    firm support only exists on Chrome on Android and Opera for Android. Furthermore,
    there are firm criteria for when the install banner will appear on both browsers:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，就像本节中的所有内容一样，这是一项新技术。 目前，仅在安卓上的Chrome和Opera for Android上存在牢固的支持。 此外，两个浏览器上安装横幅将出现的具体标准也是牢固的：
- en: The app must have a web app manifest
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该应用程序必须具有Web应用程序清单
- en: The app must be served over HTTPS
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该应用程序必须通过HTTPS提供
- en: The app must use a service worker
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该应用程序必须使用服务工作者
- en: The app must be visited twice, with at least five minutes between the visits
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该应用程序必须被访问两次，访问之间至少间隔五分钟
- en: We have covered the first three (Firebase apps are automatically deployed over
    HTTPS). The last criterion is to minimize annoyance on the part of the user.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了前三个条件（Firebase应用程序会自动通过HTTPS部署）。 最后一个标准是尽量减少用户的烦恼。
- en: Delaying the app install banner
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟应用程序安装横幅
- en: The following section is only applicable if you have an Android device to test
    on, with the latest version of Chrome or Opera for Android. You'll also need to
    set up Remote Debugging for your Android device, following the guide at [https://developers.google.com/web/tools/chrome-devtools/remote-debugging/](https://developers.google.com/web/tools/chrome-devtools/remote-debugging/).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分仅适用于您拥有安卓设备进行测试，并且安装了最新版本的Chrome或Opera for Android。 您还需要为您的安卓设备设置远程调试，按照以下指南进行操作：[https://developers.google.com/web/tools/chrome-devtools/remote-debugging/](https://developers.google.com/web/tools/chrome-devtools/remote-debugging/)。
- en: One of the advantages of PWAs that we cited earlier is the fact that the user
    gets a chance to interact with your application before deciding whether to install.
    Web app install banners can possibly disrupt that process if they display too
    early (before the user has had a positive interaction with your application).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到的PWA的优势之一是用户在决定是否安装之前有机会与您的应用程序进行交互。 如果Web应用程序安装横幅显示得太早（在用户与您的应用程序进行积极交互之前），可能会干扰该过程。
- en: In this section, we'll find a way around that by delaying the web app install
    banner event until the user has a positive interaction with our application.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过延迟Web应用程序安装横幅事件来解决这个问题，直到用户与我们的应用程序进行积极交互。
- en: We will add an event listener to our `App.js`, to listen for when the banner
    display event is ready to fire. Then, we'll intercept that event, and save it
    for when the user sends a message.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向我们的`App.js`添加一个事件侦听器，以便在横幅显示事件准备好触发时进行监听。 然后，我们将拦截该事件，并在用户发送消息时保存它。
- en: Listening for the event
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听事件
- en: Chrome emits the `beforeinstallprompt` event directly before it displays the
    web app install banner. That's the event we will listen to. Like our other Firebase
    event listeners, let's add this to our `App.js` `componentDidMount`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome在显示Web应用程序安装横幅之前直接发出`beforeinstallprompt`事件。这就是我们要监听的事件。像我们的其他Firebase事件监听器一样，让我们将其添加到我们的`App.js`的`componentDidMount`中。
- en: 'We''ll create a method called `listenForInstallBanner`, and then call that
    method from within `componentDidMount`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`listenForInstallBanner`的方法，然后从`componentDidMount`中调用该方法：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Within `listenForInstallBanner`, we will do two things:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在`listenForInstallBanner`中，我们将做两件事：
- en: Register a listener for the event.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为事件注册一个监听器。
- en: When that event fires, cancel it and store it for later.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当该事件触发时，取消它并将其存储以便以后使用。
- en: Storing it for later means we trigger it whenever we please, AKA when the user
    sends their first message.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 将其存储以便以后我们可以在任何时候触发它，也就是当用户发送他们的第一条消息时。
- en: 'Here''s what the code looks like:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We''re storing our `deferredPrompt` on the `App` instance, so we can grab it
    later. Which we''ll do, instead our `handleSubmitMessage` method:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`App`实例上存储我们的`deferredPrompt`，以便以后可以获取它。我们将在`handleSubmitMessage`方法中执行这个操作：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: After we submit our message, we trigger our saved event. Then, we log out the
    user choice (whether or not they actually install the app, which we can also send
    to whatever analytics we choose to use in the future). Lastly, we delete the event.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们提交消息后，我们触发我们保存的事件。然后，我们记录用户的选择（无论他们是否实际安装了应用程序，我们也可以将其发送到将来选择使用的任何分析工具）。最后，我们删除事件。
- en: Okay, let's test this!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们测试一下！
- en: Plug your Android device into your computer, and open up remote debugging on
    the DevTools. We'll have to deploy our app first, so hit `yarn deploy` and wait
    for it to finish. Then, open up the application on your device and type a message;
    you should see the app install banner pop up.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的Android设备连接到计算机上，并在DevTools上打开远程调试。我们首先必须部署我们的应用程序，所以点击`yarn deploy`并等待它完成。然后，在您的设备上打开应用程序并输入一条消息；您应该会看到应用程序安装横幅弹出。
- en: If it doesn’t appear, check your code, or go to the Application tab of DevTools
    and click on the Add to Home Screen button. This should trigger the `beforeinstallprompt`
    event.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有出现，请检查您的代码，或转到DevTools的应用程序选项卡，然后单击“添加到主屏幕”按钮。这应该会触发`beforeinstallprompt`事件。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Web app install banners are still a new technology, and the standards are in
    a state of flux. For the latest information, consult Google's page on web app
    install banners--[https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/](https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/).
    That said, I hope this chapter was helpful in illuminating the possibilities of
    the banners, and the current state of the technology.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序安装横幅仍然是一项新技术，标准仍在不断变化中。有关最新信息，请参阅Google关于Web应用程序安装横幅的页面-[https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/](https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/)。也就是说，我希望本章对横幅的可能性和当前技术状态有所帮助。
- en: Now that we've made our app bigger and better, it's time to slim down, and focus
    purely on performance. See you in the next chapter!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使我们的应用程序更大更好，是时候精简并专注于性能了。下一章见！
