- en: Handling Events, Binding and Useful React Packages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理事件，绑定和有用的React包
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下示例：
- en: Binding methods using the constructor versus using arrow functions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用构造函数绑定方法与使用箭头函数
- en: Creating form elements with events
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建带有事件的表单元素
- en: Displaying information in a modal with react-popup
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用react-popup在模态框中显示信息
- en: Implementing Airbnb React/JSX Style Guide
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施Airbnb React/JSX样式指南
- en: Updating our title and meta tags with React Helmet
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React Helmet更新我们的标题和meta标签
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter contains recipes related to handling events, binding methods in
    React and we will implement some of the most useful React packages.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含与处理事件、在React中绑定方法相关的示例，并且我们将实现一些最有用的React包。
- en: Binding methods using the constructor versus using arrow functions
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用构造函数绑定方法与使用箭头函数
- en: 'In this recipe, we are going to learn the two ways of binding methods in React:
    using the constructor and using arrow functions.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习在React中绑定方法的两种方式：使用构造函数和使用箭头函数。
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This recipe is straightforward, and the goal is to bind a method using the
    class constructor and using arrow functions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例很简单，目标是使用类构造函数和箭头函数绑定方法：
- en: 'Let''s create a new component called `Calculator`. We will create a basic calculator
    with two inputs and one button. The skeleton of our component is as follows:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`Calculator`的新组件。我们将创建一个带有两个输入和一个按钮的基本计算器。我们组件的框架如下：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'File: src/components/Calculator/Calculator.js'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Calculator/Calculator.js
- en: 'Now we are going to add two new methods, one to handle the inputs (`onChange`
    event) and one to manage the result button (`onClick`). We can use the same `handleOnChange`
    method for both inputs. Since we have the names of the fields (which are the same
    as the state) we can dynamically update each state, and in the `handleResult`
    method, we just sum both numbers:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将添加两种新方法，一种用于处理输入（`onChange`事件），一种用于管理结果按钮（`onClick`）。我们可以使用相同的`handleOnChange`方法来处理两个输入。由于我们有字段的名称（与状态相同），我们可以动态更新每个状态，在`handleResult`方法中，我们只需对两个数字求和。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now in our `render` method, we need to add the events to the inputs and the
    button:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在我们的`render`方法中，我们需要为输入和按钮添加事件：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Our CSS code for this is as follows:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的CSS代码如下：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'File: src/components/Calculator/Calculator.css'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Calculator/Calculator.css
- en: 'If you run the application right now, you will see that if you try to write
    something in the inputs or you click on the button, you will get an error such
    as this:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您现在运行应用程序，您会发现如果尝试在输入框中输入内容或单击按钮，您将收到如下错误：
- en: '![](assets/9ed7bb44-c080-4114-9cd3-19c9f1f2dac3.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9ed7bb44-c080-4114-9cd3-19c9f1f2dac3.png)'
- en: 'The reason is that we need to bind those methods to the class to have access
    to it. Let''s bind our methods first using our constructor:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原因是我们需要将这些方法绑定到类上才能访问它。让我们首先使用构造函数绑定我们的方法：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Using the constructor to bind the methods is good if you want to list all of
    them on the top of the component. If you look at the `Calculator` component, it
    should look like this:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想要在组件顶部列出所有方法，使用构造函数绑定方法是一个不错的选择。如果您查看`Calculator`组件，它应该是这样的：
- en: '![](assets/f4a63dfb-2cfd-42c1-b791-ce5adf207567.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f4a63dfb-2cfd-42c1-b791-ce5adf207567.png)'
- en: 'Now let''s use arrow functions to automatically bind our methods instead of
    doing it on the constructor. For this you need to remove your bindings methods
    in the constructor and change the `handleOnChange` and `handleResult` methods to
    arrow functions:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们使用箭头函数来自动绑定我们的方法，而不是在构造函数中进行绑定。为此，您需要在构造函数中删除绑定方法，并将`handleOnChange`和`handleResult`方法更改为箭头函数：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You will get the same result. I prefer arrow functions to bind methods because
    you use less code and you don't need to add the methods to the constructor manually.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会得到相同的结果。我更喜欢使用箭头函数来绑定方法，因为你使用的代码更少，而且你不需要手动将方法添加到构造函数中。
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you can see, you have two options to bind methods in your React components.
    The constructor option is most commonly used at the moment, but the arrow functions
    are getting more popular. You decide which binding option you like the most.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你有两种选项来绑定你的React组件中的方法。目前最常用的是构造函数选项，但箭头函数变得越来越受欢迎。你可以决定哪种绑定选项你最喜欢。
- en: Creating form elements with events
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用事件创建表单元素
- en: You may have noticed in the previous chapter that we used some simple forms
    with events, but in this recipe, we will see this topic in more depth. In [Chapter
    6](69fdac67-4387-49ad-89bb-b3407133caaf.xhtml), *Creating Forms with Redux Form*,
    we are going to learn how to handle forms with Redux Form.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到在上一章中，我们使用了一些简单的带有事件的表单，但在这个示例中，我们将更深入地了解这个主题。在[第6章](69fdac67-4387-49ad-89bb-b3407133caaf.xhtml)中，*使用Redux
    Form创建表单*，我们将学习如何处理带有Redux Form的表单。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s create a new component called `Person`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`Person`的新组件：
- en: 'The skeleton we are going to use for this component is as follows:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在此组件中使用的骨架如下：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'File: src/components/Person/Person.js'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Person/Person.js
- en: 'Let''s add the `firstName`, `lastName`, `email`, and `phone` fields to our
    form. The `render` method should look like this:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们向我们的表单添加`firstName`，`lastName`，`email`和`phone`字段。`render`方法应该如下所示：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s use these CSS styles for our form:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为我们的表单使用这些CSS样式：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'File: src/components/Person/Person.css'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Person/Person.css
- en: 'If you run your application, you should see this view:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你运行你的应用程序，你应该看到这个视图：
- en: '![](assets/0b242cf6-c919-460c-8441-b290a1516c01.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0b242cf6-c919-460c-8441-b290a1516c01.png)'
- en: 'Let''s use our local state in the inputs. The only way we can retrieve the
    values from the inputs in React is by connecting the value of each field to a
    specific local state like this:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在输入中使用我们的本地状态。在React中，我们从输入中检索值的唯一方法是将每个字段的值连接到特定的本地状态，就像这样：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you try to type something, you will notice that you are not allowed to write
    anything, and this is because all the inputs are connected to the local state,
    and the only way we can re-render the typed text is by updating the local state.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试输入一些内容，你会注意到你无法写任何东西，这是因为所有的输入都连接到本地状态，我们更新本地状态的唯一方法是重新渲染已输入的文本。
- en: 'As you can imagine, the only way we can update our local state is by detecting
    a change in our inputs, and that will happen when the user inputs something. Let''s
    add a method for the `onChange` event:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你所想象的，我们更新本地状态的唯一方法是检测输入的变化，这将在用户输入时发生。让我们为`onChange`事件添加一个方法：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Like I mentioned in the last recipe when we use an arrow function in our methods
    we are automatically binding the class to the method. Otherwise, you will need
    to bind the method in the constructor. In our `firstName` input, we need to call
    this method on the `onChange` method:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我在上一个示例中提到的，当我们在方法中使用箭头函数时，我们会自动将类绑定到方法。否则，你需要在构造函数中绑定方法。在我们的`firstName`输入中，我们需要在`onChange`方法中调用这个方法：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'But here we have a problem. If we have four fields, then you will probably
    think you need to create four different methods (one for each state), but there
    is a better way to solve this: to get the value of the input name within the `e
    (e.target.name)` object. In this way, we can update all the states with the same
    method. Our `handleOnChange` method should now look like this:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是这里有一个问题。如果我们有四个字段，那么您可能会认为您需要创建四种不同的方法（每个状态一个），但是有一种更好的解决方法：在`e (e.target.name)`对象中获取输入名称的值。这样，我们可以使用相同的方法更新所有状态。我们的`handleOnChange`方法现在应该是这样的：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With this `([name])` syntax in the object, we can update all the states we
    have in our forms dynamically. Now we need to add this method to the `onChange`
    of all the inputs. After this, you will be able to write into the inputs:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过对象中的`([name])`语法，我们可以动态更新表单中的所有状态。现在我们需要将这个方法添加到所有输入的`onChange`中。完成后，您将能够在输入框中输入内容：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'All forms need to submit the information they have collected from the user.
    We need to use the `onSubmit` event of our form and call a `handleOnSubmit` method to
    retrieve all the input values through the local state:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有表单都需要提交它们从用户那里收集到的信息。我们需要使用表单的`onSubmit`事件，并调用`handleOnSubmit`方法通过本地状态检索所有输入值：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After we created this method we need to call it on the `onSubmit` event of
    the `form` tag:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建完这个方法后，我们需要在`form`标签的`onSubmit`事件上调用它：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now you can test this. Open your browser console, and when you write some values
    in the inputs you will be able to see the data:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以测试这个。打开您的浏览器控制台，当您在输入框中输入一些值时，您将能够看到数据：
- en: '![](assets/dac2236e-5543-45a4-b6b3-6148da23c718.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dac2236e-5543-45a4-b6b3-6148da23c718.png)'
- en: 'We need to validate the required fields. Let''s suppose that the `firstName`
    and `lastName` fields are mandatory. If a user doesn''t write a value in the fields,
    we want to add an error class to display a red border around the input. The first
    thing you need to do is to add a new local state for errors:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要验证必填字段。假设`firstName`和`lastName`字段是必填的。如果用户没有在字段中填写值，我们希望添加一个错误类来显示输入框周围的红色边框。您需要做的第一件事是为错误添加一个新的本地状态：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can add any fields you want to validate here, and the value is Boolean
    (`true` means there is an error, `false` means it is okay). Then, in the `handleOnSubmit`
    method, we need to update the state if we have an error:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在这里添加任何您想要验证的字段，并且值是布尔值（`true`表示有错误，`false`表示没有错误）。然后，在`handleOnSubmit`方法中，如果有错误，我们需要更新状态：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, in your `render` method you need to add a ternary validation in the `className`
    prop of the `firstName` and `lastName` fields, and if you want to be fancy you
    can also add an error message below the inputs:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在您的`render`方法中，您需要在`firstName`和`lastName`字段的`className`属性中添加一个三元验证，如果您想要更花哨，您还可以在输入框下方添加一个错误消息：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The last step is to add the error classes, `.error` and `.errorMessage`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是添加错误类，`.error`和`.errorMessage`：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you submit your form without `firstName` or `lastName` now, you will get
    this view:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您现在提交表单而没有填写`firstName`或`lastName`，您将会得到这个视图：
- en: '![](assets/03ba5fa4-6da1-4b49-9ac0-61dabc07d396.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/03ba5fa4-6da1-4b49-9ac0-61dabc07d396.png)'
- en: 'The full `Person` component should be like this:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完整的`Person`组件应该是这样的：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'File: src/components/Person/Person.js'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Person/Person.js
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Forms are essential for any web application, and handling them with React is
    easy using local state, but it is not the only way to manage them. If your forms
    are complex, with multiple steps (are typically used on user registration), you
    probably need to keep the values throughout the entire process. In this scenario,
    it is painless to handle forms using Redux Form, which we are going to learn about
    in [Chapter 6](69fdac67-4387-49ad-89bb-b3407133caaf.xhtml)*, Creating Forms with
    Redux Form*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 表单对于任何 web 应用程序都是必不可少的，使用 React 处理它们很容易，可以使用本地状态，但这不是管理它们的唯一方式。如果您的表单很复杂，有多个步骤（通常用于用户注册），您可能需要在整个过程中保留值。在这种情况下，使用
    Redux Form 轻松处理表单，我们将在[第 6 章](69fdac67-4387-49ad-89bb-b3407133caaf.xhtml)中学习，创建
    Redux Form 表单。
- en: There's more...
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There are more events you can use in React:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 中还有更多事件可以使用：
- en: '**Keyboard events**:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**键盘事件**：'
- en: '`onKeyDown` is executed when a key is depressed'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onKeyDown` 当按键被按下时执行'
- en: '`onKeyPress` is executed after the key is released, but before `onKeyUp` is
    triggered'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onKeyPress` 在释放按键后执行，但在触发 `onKeyUp` 之前'
- en: '`onKeyUp` is executed last after the key is pressed'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onKeyUp` 在按键按下后执行'
- en: '**Focus events**:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**焦点事件**：'
- en: '**`onFocus`** is executed when a control receives focus'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`onFocus`** 当控件获得焦点时执行'
- en: '`onBlur` is executed when a control loses focus'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onBlur` 当控件失去焦点时执行'
- en: '**Forms events**:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**表单事件**：'
- en: '`onChange` is executed when the user changes the value in a form control'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onChange` 当用户更改表单控件中的值时执行'
- en: '`onSubmit` is a particular prop for `<form>` that is called when a button is
    pressed, or when the user hits the `return` key within a field'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onSubmit` 是 `<form>` 的一个特定属性，当按下按钮或用户在字段内按下 `return` 键时调用'
- en: '**Mouse events**:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**鼠标事件**：'
- en: '`onClick` is when the mouse button is pressed and released'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onClick` 当鼠标按钮被按下并释放时'
- en: '`onContextMenu` is when the right button is pressed'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onContextMenu` 当按下右键时'
- en: '`onDoubleClick` is when the user performs a double-click'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDoubleClick` 当用户执行双击时'
- en: '`onMouseDown` is when the mouse button is depressed'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onMouseDown` 当鼠标按钮被按下时'
- en: '`onMouseEnter` is when the mouse moves over an element or its children'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onMouseEnter` 当鼠标移动到元素或其子元素上时'
- en: '`onMouseLeave` is when the mouse leaves an element'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onMouseLeave` 当鼠标离开元素时'
- en: '`onMouseMove` is when the mouse moves'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onMouseMove` 当鼠标移动时'
- en: '`onMouseOut` is when the mouse moves off an element or over one of its children'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onMouseOut` 当鼠标移出元素或移动到其子元素上时'
- en: '`onMouseOver` is when the mouse moves over an element'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onMouseOver` 当鼠标移动到元素上时'
- en: '`onMouseUp` is when a mouse button is released'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onMouseUp` 当鼠标按钮释放时'
- en: '**Drag and drop events**:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**拖放事件**：'
- en: '`onDrag`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDrag`'
- en: '`onDragEnd`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDragEnd`'
- en: '`onDragEnter`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDragEnter`'
- en: '`onDragExit`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDragExit`'
- en: '`onDragLeave`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDragLeave`'
- en: '`onDragOver`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDragOver`'
- en: '`onDragStart`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDragStart`'
- en: '`onDrop`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDrop`'
- en: For drag and drop, events I recommend using the `react-dnd` ([https://github.com/react-dnd/react-dnd](https://github.com/react-dnd/react-dnd))
    library.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于拖放事件，我建议使用 `react-dnd` ([https://github.com/react-dnd/react-dnd](https://github.com/react-dnd/react-dnd))
    库。
- en: Displaying information in a modal with react-popup
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 react-popup 在模态框中显示信息
- en: A modal is a dialog box/popup that is displayed over the current window, is
    suitable for almost all projects. In this recipe, we will learn how to implement
    a basic modal using the `react-popup` package.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 模态框是显示在当前窗口上的对话框/弹出窗口，几乎适用于所有项目。在这个示例中，我们将学习如何使用 `react-popup` 包实现一个基本的模态框。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'For this recipe, you need to install `react-popup`. Let''s do it with this
    command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要安装 `react-popup`。让我们用这个命令来做：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Using the last recipe''s code, we are going to add a basic popup to display
    information about the person that we registered in the form:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上一个示例的代码，我们将添加一个基本的弹出窗口，以显示我们在表单中注册的人的信息：
- en: 'Open your `App.jsx` file and import the `Popup` object from `react-popup`.
    For now, we are going to import `Popup.css` (the code is too large to put it in
    here, but you can copy and paste the CSS demo code from the code repository for
    this project: `Chapter03/Recipe3/popup/src/components/Popup.css`). Then, after
    `<Footer />` add the `<Popup />` component:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的`App.jsx`文件，并从`react-popup`中导入`Popup`对象。现在，我们将导入`Popup.css`（代码太大，无法放在这里，但你可以从该项目的代码库中复制和粘贴CSS演示代码：`Chapter03/Recipe3/popup/src/components/Popup.css`）。然后，在`<Footer
    />`之后添加`<Popup />`组件：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'File: src/components/App.js'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/App.js
- en: 'Now, in our `Person.js` file, we need to include the popup as well:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在我们的`Person.js`文件中，我们也需要包含弹出窗口：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s modify our `handleOnSubmit` method to implement the popup. First, we
    need to validate that we are receiving at least the `firstName`, `lastName`, and
    `email` (phone will be optional). If we get all the necessary information, then
    we will create a popup and display the user''s information. One of the things
    I like about `react-popup` is that it allows us to use JSX code in its content:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们修改我们的`handleOnSubmit`方法来实现弹出窗口。首先，我们需要验证我们至少收到了`firstName`、`lastName`和`email`（电话是可选的）。如果我们得到了所有必要的信息，那么我们将创建一个弹出窗口并显示用户的信息。我喜欢`react-popup`的一点是它允许我们在其内容中使用JSX代码：
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you did everything correctly, you should be able to see the popup like this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做的一切正确，你应该能够看到这样的弹出窗口：
- en: '![](assets/db91155c-0691-4581-ace0-3b22048479cf.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/db91155c-0691-4581-ace0-3b22048479cf.png)'
- en: 'As you can see in the code, the phone is optional, so if we don''t include
    it we won''t render it:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在代码中所见，电话是可选的，所以如果我们不包括它，我们就不会渲染它：
- en: '![](assets/689c3af4-5c25-4e59-ad11-f94b3fbe6b6b.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/689c3af4-5c25-4e59-ad11-f94b3fbe6b6b.png)'
- en: There's more...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`react-popup` provides configuration to execute an action. In our example,
    we used that action to close the popup when the user presses the `Close` button,
    but we can pass Redux actions to do other things, such as send some information
    or even add forms inside our popup.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-popup`提供配置来执行一个动作。在我们的例子中，我们使用该动作来在用户按下`Close`按钮时关闭弹出窗口，但我们可以传递Redux动作来做其他事情，比如发送一些信息，甚至在我们的弹出窗口内添加表单。'
- en: Implementing Airbnb React/JSX Style Guide
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施Airbnb React/JSX风格指南
- en: Airbnb React/JSX Style Guide is the most popular style guide for coding in React.
    In this recipe, we are going to implement the ESLint with the Airbnb React/JSX
    Style Guide rules.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Airbnb React/JSX风格指南是React编码中最受欢迎的风格指南。在这个教程中，我们将实现带有Airbnb React/JSX风格指南规则的ESLint。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To implement the Airbnb React/JSX Style Guide, we need to install some packages,
    such as `eslint`, `eslint-config-airbnb`, `eslint-plugin-babel`, and `eslint-plugin-react`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要实施Airbnb React/JSX风格指南，我们需要安装一些包，比如`eslint`、`eslint-config-airbnb`、`eslint-plugin-babel`和`eslint-plugin-react`。
- en: I don't like to force anyone to use a specific IDE, but I would like to recommend
    some of the best editors to work with React.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我不喜欢强迫任何人使用特定的IDE，但我想推荐一些最好的编辑器来与React一起工作。
- en: '**Atom** - [https://atom.io](https://atom.io)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Atom** - [https://atom.io](https://atom.io)'
- en: In my personal opinion, Atom is the best IDE for working with React. For this
    recipe, we are going to use Atom.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我个人看来，Atom是与React一起工作的最佳IDE。在这个教程中，我们将使用Atom。
- en: '**Pros**:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优点**：'
- en: MIT License (open source)
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIT许可证（开源）
- en: Easy to install and configure
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于安装和配置
- en: Has a lot of plugins and themes
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有很多插件和主题
- en: Works perfectly with React
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与React完美配合
- en: Support for Mac, Linux, and Windows
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Mac、Linux和Windows
- en: You can use Nuclide to React Native (https://nuclide.io)
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用Nuclide来进行React Native开发（https://nuclide.io）
- en: '**Cons**:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺点**：'
- en: It's slow compared with other IDEs (if you have 8 GB of RAM you should be fine)
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他IDE相比速度较慢（如果你有8GB的RAM，应该没问题）
- en: '**Visual Studio Code **(VSC) - [https://code.visualstudio.com](https://code.visualstudio.com)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**（VSC）- [https://code.visualstudio.com](https://code.visualstudio.com)'
- en: VSC is another good IDE for working with React.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VSC是另一个用于React的好的IDE。
- en: '**Pros**:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优点**：'
- en: MIT License (open source)
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIT许可证（开源）
- en: Easy to install
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于安装
- en: It has a lot of plugins and themes.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有很多插件和主题。
- en: Works perfectly with React
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与React完美配合
- en: Support for Mac, Linux, and Windows
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Mac、Linux和Windows
- en: '**Cons**:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺点**：'
- en: Microsoft (I'm not a big fan of Microsoft)
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软（我不是微软的大粉丝）
- en: Configuration can be confusing at the beginning
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开始时配置可能会令人困惑
- en: '**Sublime Text - **[https://www.sublimetext.com](https://www.sublimetext.com)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sublime Text -**[https://www.sublimetext.com](https://www.sublimetext.com)'
- en: Sublime Text was my first love, but I have to accept that Atom has taken its
    place.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text是我的初恋，但我不得不承认Atom已经取代了它。
- en: '**Pros**:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优点**：'
- en: Easy to install
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于安装
- en: Has a lot of plugins and themes
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有很多插件和主题
- en: Support for Mac, Linux, and Windows
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Mac、Linux和Windows
- en: '**Cons**:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺点**：'
- en: Is not free ($80 USD per license).
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不是免费的（每个许可证80美元）。
- en: Is still not mature enough to work with React.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仍然不够成熟来用于React。
- en: Some plugins are hard to configure.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有些插件很难配置。
- en: 'Installing all the necessary packages:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 安装所有必要的包：
- en: '[PRE25]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There are some rules of Airbnb React/JSX Style Guide that I prefer not to use
    or change the default values a little bit, but it depends whether you keep them
    or remove them.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些Airbnb React/JSX Style Guide的规则我宁愿不使用或者稍微改变默认值，但这取决于你是否保留它们或者移除它们。
- en: You can check all the ESLint rules on the official website ([https://eslint.org/docs/rules](https://eslint.org/docs/rules))
    and all the special React ESLint rules at [https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules](https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在官方网站([https://eslint.org/docs/rules](https://eslint.org/docs/rules))上检查所有的ESLint规则，以及在[https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules](https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules)上检查所有特殊的React
    ESLint规则。
- en: 'The rules that I prefer not to use or I prefer to change the default values
    of are as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我宁愿不使用的规则或者我宁愿改变默认值的规则如下：
- en: '`comma-dangle`: off'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comma-dangle`: 关闭'
- en: '`arrow-parens`: off'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arrow-parens`: 关闭'
- en: '`max-len`: 120'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max-len`: 120'
- en: '`no-param-reassign`: off'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no-param-reassign`: 关闭'
- en: '`function-paren-newline`: off'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function-paren-newline`: 关闭'
- en: '`react/require-default-props`: off'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react/require-default-props`: 关闭'
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To enable our ESLint, we need to create a `.eslintrc` file and add the rules
    we want to turn off:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用我们的ESLint，我们需要创建一个`.eslintrc`文件，并添加我们想要关闭的规则：
- en: 'Creating `.eslintrc` file. You need to create a new file called `.eslintrc` at
    the root level:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`.eslintrc`文件。你需要在根目录下创建一个名为`.eslintrc`的新文件：
- en: '[PRE26]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add a script to run the linter. In your `package.json` file, you need to add
    a new script to run the linter:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个脚本来运行代码检查工具。在你的`package.json`文件中，你需要添加一个新的脚本来运行代码检查工具：
- en: '[PRE27]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once you have added the `lint` script, you can run the linter validation with
    this command:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你添加了`lint`脚本，你可以用这个命令运行代码检查工具验证：
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now you can see the linter errors you have in your project:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以看到你项目中的代码检查工具错误：
- en: '![](assets/7c38007a-39f0-40e4-9028-9fef772c0ab6.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7c38007a-39f0-40e4-9028-9fef772c0ab6.png)'
- en: 'Now we need to fix the linter errors. The first error is Component should be
    written as a pure function `react/prefer-stateless-function`*.* That means our
    `App` component can be written in a functional component because we don''t use
    any local state:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要修复代码检查工具的错误。第一个错误是Component应该被写成一个纯函数`react/prefer-stateless-function`。这意味着我们的`App`组件可以被写成一个函数组件，因为我们不使用任何本地状态：
- en: '[PRE29]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'File: src/components/App.js'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/App.js
- en: 'Next, we have this error: JSX not allowed in files with extension ''`.js`''
    `/react/jsx-filename-extension`. This error means that in the files where we use
    JSX code, we need to use the `.jsx` extension instead of `.js`. We have six files
    with this problem (`App.js`, `Person.js`, `index.js`, `Content.js`, `Footer.js`,
    and `Header.js`). We just need to rename the files and change the extension to
    `.jsx` (`App.jsx`, `Person.jsx`, `Content.jsx`, `Footer.jsx`, and `Header.jsx`).
    Due to `react-scripts`, we won''t change our `index.js` to `index.jsx` for now.
    Otherwise, we will get an error like this:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们有这个错误：不允许在扩展名为'`.js`'的文件中使用JSX `/react/jsx-filename-extension`。这个错误意味着在我们使用JSX代码的文件中，我们需要使用`.jsx`扩展名，而不是`.js`。我们有六个文件出现了这个问题（`App.js`，`Person.js`，`index.js`，`Content.js`，`Footer.js`和`Header.js`）。我们只需要重命名这些文件并将扩展名改为`.jsx`（`App.jsx`，`Person.jsx`，`Content.jsx`，`Footer.jsx`和`Header.jsx`）。由于`react-scripts`，我们暂时不会将我们的`index.js`改为`index.jsx`。否则，我们会得到这样的错误：
- en: '![](assets/1d6d78b2-c4cd-4d1d-b3af-bfdf8433b323.png)In [Chapter 10](e95b58ed-e32c-4488-ab8e-b332e235bda8.xhtml)*,
    Mastering Webpack 4.x*, we will be able to rename all our JSX files with the `.jsx`
    extension.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/1d6d78b2-c4cd-4d1d-b3af-bfdf8433b323.png)在[第10章](e95b58ed-e32c-4488-ab8e-b332e235bda8.xhtml)*，精通Webpack
    4.x*中，我们将能够将所有的JSX文件重命名为`.jsx`扩展名。'
- en: 'We need to suppress the lint error. We have to write this comment at the top
    of our `index.js` file:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要抑制linter错误。我们必须在我们的`index.js`文件顶部写下这个注释：
- en: '[PRE30]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s look at this error: *Expected a line break after this opening brace*/`object-curly-newline`,
    and this error: *Expected a line break before this closing brace*/`object-curly-newline`.
    In our `Person.jsx` file, we have this object in our `handleOnChange` method:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来看看这个错误：*在这个开括号后面期望有一个换行符*/`object-curly-newline`，以及这个错误：*在这个闭括号前面期望有一个换行符*/`object-curly-newline`。在我们的`Person.jsx`文件中，在`handleOnChange`方法中有这个对象：
- en: '[PRE31]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The rule says we need to add a break-line before and after the object:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 规则说我们需要在对象之前和之后添加一个换行符：
- en: '[PRE32]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now let''s look at Warning: Unexpected console statement /no-console. The console.log
    generated a warning in our linter that won''t affect us, but if you need to have
    a console and you want to avoid the warning, you can add an exception with an
    ESLint comment like so:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们看看警告：*意外的控制台语句*/no-console。console.log在我们的linter中生成了一个警告，这不会影响我们，但如果你需要有一个控制台并且想要避免警告，你可以通过ESLint注释添加一个异常，就像这样：
- en: '[PRE33]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'More ESLint comments do the same thing:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更多的ESLint注释可以做同样的事情：
- en: '[PRE34]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you want to disable the consoles in the entire file, then at the beginning
    of the file you can do this:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想在整个文件中禁用控制台，那么在文件开头你可以这样做：
- en: '[PRE35]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '*Err**or: ''document'' is not defined**/no-undef.* There are two ways to fix
    this error in our `index.jsx` where we are using the global object document. The
    first one is to add a special comment to specify that the document object is a
    global variable:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*错误：''document''未定义*/no-undef。在我们的`index.jsx`中使用全局对象document时，有两种方法可以修复这个错误。第一种方法是添加一个特殊的注释来指定document对象是一个全局变量：'
- en: '[PRE36]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'I don''t like this way. I prefer to add a `globals` node into our `.eslintrc`
    file:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我不喜欢这种方式。我更喜欢在我们的`.eslintrc`文件中添加一个`globals`节点：
- en: '[PRE37]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The linter validation is essential for any project. Sometimes, this is a topic
    of discussion because most developers do not like to follow standards, but once
    everyone gets familiar with this style guide everything is more comfortable, and
    you will deliver better quality code.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: linter验证对于任何项目都是必不可少的。有时，这是一个讨论的话题，因为大多数开发人员不喜欢遵循标准，但一旦每个人都熟悉了这个样式指南，一切都会更加舒适，你将会交付更高质量的代码。
- en: So far, we know how to run the linter validation in our Terminal, but you can
    also add the ESLint validator to your IDE (Atom and VSC). For this example, we
    are going to use Atom.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们知道如何在终端中运行linter验证，但你也可以将ESLint验证器添加到你的IDE（Atom和VSC）。在这个例子中，我们将使用Atom。
- en: '**Installing Atom plugins**'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装Atom插件**'
- en: 'In Atom (on a Mac) you can go to Preferences | +Install, and then you can find
    the Atom plugins. I''ll give you a list of the plugins I use to improve my IDE
    and increase my productivity:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在Atom（Mac上）中，你可以转到首选项|+安装，然后你可以找到Atom插件。我会给你一个我用来改进我的IDE并提高我的生产力的插件列表：
- en: '`linter-eslint`: Lint JS on the fly, using ESLint'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linter-eslint`：使用ESLint实时lint JS'
- en: '`editorconfig`: Helps developers maintain consistent coding styles between
    different editors'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`editorconfig`：帮助开发人员在不同的编辑器之间保持一致的编码风格'
- en: '`language-babel`: Supports React syntax'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`language-babel`：支持React语法'
- en: '`minimap`: A preview of the full source code'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minimap`：全源代码的预览'
- en: '`pigments`: A package for displaying colors in projects and files'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pigments`：在项目和文件中显示颜色的包'
- en: '`sort-lines`: Sorts your lines'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort-lines`：对你的行进行排序'
- en: '`teletype`: Shares your workspace with team members and allows them to collaborate
    on code in real time'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`teletype`：与团队成员共享你的工作区，并允许他们实时协作编码'
- en: 'Once you have installed these, packages if you go to a file with lint errors,
    you will be able to see them:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了这些包之后，如果你打开一个有lint错误的文件，你将能够看到它们：
- en: '![](assets/bc4e7ab5-771d-4df9-b1b2-120cdfdcd448.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bc4e7ab5-771d-4df9-b1b2-120cdfdcd448.png)'
- en: '**Configuring EditorConfig**'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置EditorConfig**'
- en: EditorConfig is also very useful for maintaining consistent coding styles when
    people in our team uses different editors. EditorConfig is supported by a lot
    of editors. You can check whether your editor is supported on the official website,
    [http://editorconfig.org](http://editorconfig.org).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们团队中的人使用不同的编辑器时，EditorConfig也非常有用，可以帮助维护一致的编码风格。EditorConfig得到了许多编辑器的支持。你可以在官方网站[http://editorconfig.org](http://editorconfig.org)上检查你的编辑器是否得到支持。
- en: 'The configuration I use is this one; you need to create a file called `.editorconfig` in
    your `root` directory:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的配置是这样的；你需要在你的`根`目录下创建一个名为`.editorconfig`的文件：
- en: '[PRE38]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You can affect all the files with [*], and specific files with [*.extension]**.**
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以影响所有的文件[*]，也可以使用[*.extension]来影响特定的文件**.**
- en: There's more...
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Running the linter validation in our IDE or with the Terminal is not enough
    to be sure that we are going to validate 100% of our code, and we are not going
    to inject any linter errors into our Git repositories. The most effective way
    to be 100% sure we are sending validated code to our Git repositories is to use
    Git hooks. That means you run the linter validator before performing a commit
    (pre-commit) or before a push (pre-push). I prefer to run the linter on the pre-commit
    and the unit tests on the pre-push (we are going to cover unit tests in [Chapter
    12](1daa68c4-442d-479f-b1b6-3efa80592901.xhtml), *Testing and Debugging*)*.*
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的IDE中运行linter验证或者通过终端运行是不够的，不能确保我们将100%验证我们的代码，并且不会向我们的Git存储库中注入任何linter错误。确保我们将经过验证的代码发送到我们的Git存储库的最有效方法是使用Git
    hooks。这意味着你在执行提交之前（pre-commit）或推送之前（pre-push）运行linter验证器。我更喜欢在pre-commit上运行linter，而在pre-push上运行单元测试（我们将在[第12章](1daa68c4-442d-479f-b1b6-3efa80592901.xhtml)中介绍单元测试）*.*
- en: 'Husky is the package we are going to use to modify our Git hooks; you can install
    it with this command:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Husky是我们将用来修改Git hooks的包；你可以使用以下命令安装它：
- en: '[PRE39]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Once we have added this package, we need to alter our `package.json` and add
    new scripts:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们添加了这个包，我们需要修改我们的`package.json`并添加新的脚本：
- en: '[PRE40]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We are using four scripts:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用四个脚本：
- en: '`precommit`: Runs before a commit is performed.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precommit`：在执行提交之前运行。'
- en: '`postmerge`: Runs after performing a merge.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postmerge`：在执行合并后运行。'
- en: '`postrewrite`: This hook is called by commands that rewrite commits (git commit
    `--amend`, `git-rebase`; currently, `git-filter-branch` does not call it!).'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postrewrite`：这个hook是由重写提交的命令调用的（git commit `--amend`，`git-rebase`；目前，`git-filter-branch`不会调用它！）。'
- en: '`*prepush`: I didn''t add this Git hook at this moment, but this is useful
    for running our unit tests (`"prepush": "npm test"`), we are going to add this
    Git hook in [Chapter 12](1daa68c4-442d-479f-b1b6-3efa80592901.xhtml), *Testing
    and Debugging*, when we cover the unit tests topic.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*prepush`：我目前没有添加这个Git钩子，但这对于运行我们的单元测试（`"prepush": "npm test"`）非常有用，我们将在[第12章](1daa68c4-442d-479f-b1b6-3efa80592901.xhtml)中添加这个Git钩子，*测试和调试*，当我们涵盖单元测试主题时。'
- en: In this case, in our `precommit`, we will run our linter validator, and if the
    validator fails, the commit will not be executed until you fix all the linter
    errors. The postmerge and postrewrite hooks help us to sync our npm packages,
    so for example, if User A adds new npm packages, then User B pulls the new code
    and will automatically run the `npm install` command to install the new packages
    in the User B local machine.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，在我们的`precommit`中，我们将运行我们的linter验证器，如果验证器失败，提交将不会执行，直到您修复所有linter错误。postmerge和postrewrite钩子帮助我们同步我们的npm包，因此，例如，如果用户A添加了新的npm包，然后用户B拉取新代码，将自动运行`npm
    install`命令在用户B的本地机器上安装新包。
- en: Updating our title and meta tags with React Helmet
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React Helmet更新我们的标题和元标记
- en: In all projects, it is vital to be able to change our site title and our meta
    tags with information on each specific page to be SEO friendly.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有项目中，能够更改我们的站点标题和每个特定页面上的元标记以使其对SEO友好非常重要。
- en: Getting ready
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we need to install a package called `react-helmet`:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要安装一个名为`react-helmet`的包：
- en: '[PRE41]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How to do it...
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'React Helmet is the best way to handle the title and meta tags to improve the
    SEO on our websites:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: React Helmet是处理标题和元标记以改善我们网站SEO的最佳方式：
- en: 'Once we have installed the `react-helmet` package using the same component
    of `App.jsx`, we need to import React Helmet:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们使用`App.jsx`的相同组件安装了`react-helmet`包，我们需要导入React Helmet：
- en: '[PRE42]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We can change the title of our page by adding the title prop to the `Helmet`
    component like this:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过将标题属性添加到`Helmet`组件来更改页面的标题，就像这样：
- en: '[PRE43]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If you start your application, you will see the title in your browser:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您启动您的应用程序，您将在浏览器中看到标题：
- en: '![](assets/9f0739d6-85dd-42b3-baa8-1b039de69d09.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9f0739d6-85dd-42b3-baa8-1b039de69d09.png)'
- en: 'If you want to change your meta tags, you can do it like this:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想更改您的元标记，您可以这样做：
- en: '[PRE44]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works...
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'With that code, we are going to get this output:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 有了那段代码，我们将得到这个输出：
- en: '![](assets/a5fa102a-2877-4269-adda-176dd3a83664.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a5fa102a-2877-4269-adda-176dd3a83664.png)'
- en: 'You can also do this if you want to add the HTML code directly into the `Helmet`
    component:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想直接将HTML代码添加到`Helmet`组件中，也可以这样做：
- en: '[PRE45]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You may have noticed that there is a flashing change on the title in the first
    load of the page, and this is because in our `index.html` file we have the title *React
    App *by default. You can change that by editing this file:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到在页面第一次加载时标题会闪烁变化，这是因为在我们的`index.html`文件中，默认情况下有标题*React App*。您可以通过编辑此文件来更改它：
- en: '[PRE46]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'File: public/index.html'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：public/index.html
- en: There's more...
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: So far, we have only changed our title in the main component (`<App />`), but
    in [Chapter 4](78759181-e63f-4734-beea-35a6e4372e6b.xhtml)*, Adding Routes to
    Our Application with React Router V4, *we are going to be able to change our titles
    and meta tags in different components based on a route.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只在主组件（`<App />`）中更改了我们的标题，但在[第4章](78759181-e63f-4734-beea-35a6e4372e6b.xhtml)*，使用React
    Router V4为我们的应用程序添加路由*，我们将能够根据路由在不同组件中更改我们的标题和元标记。
- en: Also, in [Chapter 11](884074f8-0a8a-4e3f-b9dc-b817e0f3f7c3.xhtml), *Implementing
    Server-Side* *Rendering*, we are going to learn how to implement server-side rendering
    in our application. You can also use React Helmet with server-side rendering,
    but you need to make some changes.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在[第11章](884074f8-0a8a-4e3f-b9dc-b817e0f3f7c3.xhtml)中，*实现服务器端渲染*，我们将学习如何在应用程序中实现服务器端渲染。您也可以在服务器端渲染中使用React
    Helmet，但需要进行一些更改。
- en: 'First, in your `index.html` (Note: this file will change to a JavaScript file
    in [Chapter 11](884074f8-0a8a-4e3f-b9dc-b817e0f3f7c3.xhtml)*, Implementing Server-Side
    Rendering; *Do not try to add this to your current `index.html` file) you will
    need to add something like this:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在您的`index.html`文件中（注意：此文件将在[第11章](884074f8-0a8a-4e3f-b9dc-b817e0f3f7c3.xhtml)*，实现服务器端渲染*中更改为JavaScript文件；请不要尝试将此内容添加到您当前的`index.html`文件中），您需要添加类似以下内容：
- en: '[PRE47]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: And with this, we are going to be able to update our titles and meta tags using
    server-side rendering.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就能够使用服务器端渲染来更新我们的标题和元标签。
