- en: Introducing React and React Hooks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍React和React Hooks
- en: React is a JavaScript library that can be used to build efficient and extensible
    web applications. React was developed by Facebook, and is used in many large-scale
    web applications, such as Facebook, Instagram, Netflix, and WhatsApp Web.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React是一个可以用于构建高效和可扩展Web应用程序的JavaScript库。React由Facebook开发，并在许多大型Web应用程序中使用，如Facebook、Instagram、Netflix和WhatsApp
    Web。
- en: In this book, we are going to learn how to build complex and efficient user
    interfaces with React, while keeping the code simple and extensible. Using the
    new paradigm of React Hooks, we can greatly simplify dealing with state management
    and side effects in web applications, ensuring the potential for growing and extending
    the application later on. We are also going to learn about **React context** and
    **React Suspense**, as well as how they can be used with Hooks. Afterward, we
    are going to learn how to integrate **Redux** and **MobX** with React Hooks. Finally,
    we are going to learn how to migrate from existing React class components, Redux,
    and MobX web applications, to React Hooks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将学习如何使用React构建复杂和高效的用户界面，同时保持代码简单和可扩展。使用React Hooks的新范式，我们可以极大地简化在Web应用程序中处理状态管理和副作用，确保以后应用程序的增长和扩展潜力。我们还将学习有关**React上下文**和**React悬挂**，以及它们如何与Hooks一起使用。之后，我们将学习如何将**Redux**和**MobX**与React
    Hooks集成。最后，我们将学习如何从现有的React类组件、Redux和MobX Web应用程序迁移到React Hooks。
- en: In the first chapter of this book, we are going to learn about the fundamental
    principles of React and React Hooks. We start by learning what React and React
    Hooks are, and why we should use them. Then, we move on to learn about the functionality
    of Hooks. Finally, we give an introduction to the kinds of Hooks that are provided
    by React, and a couple of Hooks that we are going to learn about throughout the
    book. By learning the fundamentals of React and React Hooks, we will be better
    able to understand the concepts that will be introduced in this book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一章中，我们将学习React和React Hooks的基本原则。我们首先学习React和React Hooks是什么，以及为什么我们应该使用它们。然后，我们继续学习Hooks的功能。最后，我们介绍了React提供的各种Hooks的类型，以及本书中将要学习的一些Hooks。通过学习React和React
    Hooks的基础知识，我们将更好地理解本书中将介绍的概念。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Learning about the fundamental principles of React
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解React的基本原则
- en: Motivating the need for React Hooks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激发对React Hooks的需求
- en: Getting started with React Hooks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用React Hooks
- en: Giving an overview of various Hooks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概述各种Hooks
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: A fairly recent version of Node.js should already be installed (v11.12.0, or
    higher). The `npm` package manager for Node.js also needs to be installed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应该已经安装了相当新的Node.js版本（v11.12.0或更高）。还需要安装Node.js的`npm`包管理器。
- en: The code for this chapter can be found on the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter01](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter01).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在GitHub存储库中找到：[https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter01](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter01)。
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that were previously provided. It is important
    to write the code yourself in order to learn and understand it properly. However,
    if you run into any issues, you can always refer to the code example.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，强烈建议您自己编写代码。不要简单地运行之前提供的代码示例。重要的是要自己编写代码，以便正确学习和理解它。但是，如果遇到任何问题，您可以随时参考代码示例。
- en: Now, let's get started with the chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始这一章。
- en: Principles of React
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React的原则
- en: Before we start learning about React Hooks, we are going to learn about the
    three fundamental principles of React. These principles allow us to easily write
    scalable web applications. The fundamental principles are important to know, as
    they will help us to understand how and why Hooks fit into the React ecosystem.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始学习React Hooks之前，我们将学习React的三个基本原则。这些原则使我们能够轻松编写可扩展的Web应用程序。了解这些基本原则很重要，因为它们将帮助我们理解Hooks如何以及为什么适用于React生态系统。
- en: 'React is based on three fundamental principles:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: React基于三个基本原则：
- en: '**Declarative**: Instead of telling React how to do things, we tell it what
    we want it to do. As a result, we can easily design our applications and React
    will efficiently update and render just the right components when the data changes.
    For example, the following code, which duplicates strings in an array is imperative,
    which is the opposite of declarative:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明式**：我们告诉React我们想要它做什么，而不是告诉它如何做事情。因此，我们可以轻松设计我们的应用程序，当数据发生变化时，React将高效地更新和渲染正确的组件。例如，下面的代码是命令式的，它是声明式的相反：'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we can see, in imperative code, we need to tell the computer exactly what
    to do, step by step. However, with declarative code, we can simply tell the computer
    what we want, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，命令式代码中，我们需要一步一步地告诉计算机要做什么。然而，使用声明式代码，我们只需告诉计算机我们想要什么，如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the previous declarative code, we tell the computer that we want to map each
    element of the `input` array from `str` to `str + str`. As we can see, declarative
    code is much more concise.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的声明式代码中，我们告诉计算机我们想要将`input`数组的每个元素从`str`映射到`str + str`。如我们所见，声明式代码要简洁得多。
- en: '**Component-based**: React encapsulates components that manage their own state
    and views, and then allows us to compose them in order to create complex user
    interfaces.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于组件**：React封装了管理自己状态和视图的组件，然后允许我们组合它们以创建复杂的用户界面。'
- en: '**Learn once, write anywhere**: React does not make assumptions about your
    technology stack, and tries to ensure that you can develop apps without rewriting
    existing code as much as possible.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学一次，随处编写**：React不对您的技术栈做出假设，并尽量确保您可以开发应用程序而尽量不重写现有代码。'
- en: 'We just mentioned that React is component-based. In React, there are two types
    of components:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚提到React是基于组件的。在React中，有两种类型的组件：
- en: '**Function components**: JavaScript functions that take the props as an argument,
    and return the user interface (usually via JSX)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数组件**：以props作为参数的JavaScript函数，并返回用户界面（通常通过JSX）'
- en: '**Class components**: JavaScript classes that provide a `render` method, which
    returns the user interface (usually via JSX)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类组件**：提供`render`方法的JavaScript类，该方法返回用户界面（通常通过JSX）'
- en: While function components are easier to define and understand, class components
    were needed to deal with state, contexts, and many more of React's advanced features.
    However, with React Hooks, we can deal with React's advanced features without
    needing a class component!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然函数组件更容易定义和理解，但是类组件需要处理状态、上下文和React的许多高级功能。然而，使用React Hooks，我们可以处理React的高级功能而不需要类组件！
- en: Motivation for using React Hooks
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React Hooks的动机
- en: React's three fundamental principles make it easy to write code, encapsulate
    components, and share code across multiple platforms. Instead of reinventing the
    wheel, React always tries to make use of existing JavaScript features as much
    as possible. As a result, we are going to learn software design patterns that
    will be applicable in many more cases than just designing user interfaces.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: React的三个基本原则使得编写代码、封装组件和在多个平台上共享代码变得容易。React总是尽量利用现有的JavaScript特性，而不是重复造轮子。因此，我们将学习软件设计模式，这些模式将适用于许多情况，而不仅仅是设计用户界面。
- en: React always strives to make the developer experience as smooth as possible,
    while ensuring that it is kept performant enough, without the developer having
    to worry too much about how to optimize performance. However, throughout the years
    of using React, a couple of problems have been identified.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: React始终努力使开发者体验尽可能顺畅，同时确保保持足够的性能，而开发者不必过多担心如何优化性能。然而，在使用React的多年中，已经确定了一些问题。
- en: Let's take a look at these problems in detail in the following sections.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的章节中详细看看这些问题。
- en: Confusing classes
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混乱的类
- en: In the past, we had to use class components with special functions called life
    cycle methods, such as `componentDidUpdate`, and special state-handling methods,
    such as `this.setState`, in order to deal with state changes. React classes, and
    especially the `this` context, which is a JavaScript object, are hard to read
    and understand for both humans and machines.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，我们必须使用带有特殊函数的类组件，称为生命周期方法，例如`componentDidUpdate`，以及特殊的状态处理方法，例如`this.setState`，以处理状态变化。React类，尤其是JavaScript对象的`this`上下文，对人类和机器来说都很难阅读和理解。
- en: '`this` is a special keyword in JavaScript that always refers to the object
    that it belongs to:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`this`是JavaScript中的一个特殊关键字，它总是指向它所属的对象：'
- en: In a method, `this` refers to the class object (instance of the class).
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在方法中，`this`指的是类对象（类的实例）。
- en: In an event handler, `this` refers to the element that received the event.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在事件处理程序中，`this`指的是接收到事件的元素。
- en: In a function or when standing alone, `this` refers to the global object. For
    example, in a browser, the global object is the `Window` object.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数或独立状态下，`this`指的是全局对象。例如，在浏览器中，全局对象是`Window`对象。
- en: In strict mode, `this` is `undefined` in a function.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在严格模式下，`this`在函数中是`undefined`。
- en: Additionally, methods such as `call()` and `apply()` can change the object that
    `this` refers to, so it can refer to any object.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，`call()`和`apply()`等方法可以改变`this`所指的对象，因此它可以指向任何对象。
- en: For humans, classes are hard because `this` always refers to different things,
    so sometimes (for example, in event handlers) we need to manually rebind it to
    the class object. For machines, classes are hard, because the machines do not
    know which methods in a class will be called, and how `this` will be modified,
    making it hard to optimize performance and remove unused code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于人类来说，类很难，因为`this`总是指向不同的东西，所以有时（例如在事件处理程序中）我们需要手动重新绑定它到类对象。对于机器来说，类很难，因为机器不知道类中的哪些方法将被调用，以及`this`将如何被修改，这使得优化性能和删除未使用的代码变得困难。
- en: 'Furthermore, classes sometimes require us to write code in multiple places
    at once. For example, if we want to fetch data when the component renders, or
    the data updates, we need to do this using two methods: once in `componentDidMount`,
    and once in `componentDidUpdate`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，类有时要求我们同时在多个地方编写代码。例如，如果我们想在组件渲染时获取数据，或者数据更新时获取数据，我们需要使用两种方法来做到这一点：一次在`componentDidMount`中，一次在`componentDidUpdate`中。
- en: 'To give an example, let''s define a class component that fetches data from
    an **Application Programming Interface** (**API**):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，让我们定义一个从**应用程序编程接口**（**API**）获取数据的类组件：
- en: 'First, we define our class component by extending the `React.Component` class:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们通过扩展`React.Component`类来定义我们的类组件：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we define the `componentDidMount` life cycle method, where we pull data
    from an API:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义`componentDidMount`生命周期方法，在这里我们从API中获取数据：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, we also need to define the `componentDidUpdate` life cycle method
    in case the `name` prop changes. Additionally, we need to add a manual check here,
    in order to ensure that we only re-fetch data if the `name` prop changed, and
    not when other props change:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，我们还需要定义`componentDidUpdate`生命周期方法，以防`name`属性发生变化。此外，我们需要在这里添加一个手动检查，以确保只有在`name`属性发生变化时才重新获取数据，而不是在其他属性发生变化时：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To make our code less repetitive, we could define a separate method called `fetchData`,
    in order to fetch our data, as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使我们的代码更少重复，我们可以定义一个名为`fetchData`的单独方法，以便获取我们的数据，如下所示：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, we could call the method in `componentDidMount` and `componentDidUpdate`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以在`componentDidMount`和`componentDidUpdate`中调用该方法：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: However, even then we still need to call `fetchData` in two places. Whenever
    we update arguments that are passed to the method, we need to update them in two
    places, which makes this pattern very prone to errors and future bugs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使这样，我们仍然需要在两个地方调用`fetchData`。每当我们更新传递给方法的参数时，我们需要在两个地方更新它们，这使得这种模式非常容易出现错误和未来的bug。
- en: Wrapper hell
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包装地狱
- en: 'Before Hooks, if we wanted to encapsulate state management logic, we had to
    use higher-order components and render props. For example, we create a React component
    that uses contexts to deal with user authentication as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hooks之前，如果我们想要封装状态管理逻辑，我们必须使用高阶组件和渲染属性。例如，我们创建一个使用上下文来处理用户认证的React组件如下：
- en: 'We start by importing the `authenticateUser` function in order to wrap our
    component with the context, and the `AuthenticationContext` component in order
    to access the context:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先通过导入`authenticateUser`函数来包装我们的组件与上下文，以及`AuthenticationContext`组件来访问上下文：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we define our `App` component, where we make use of the `AuthenticationContext.Consumer`
    component and the `user` render prop:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义了我们的`App`组件，在这里我们使用了`AuthenticationContext.Consumer`组件和`user`渲染属性：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we display different texts depending on whether the user is logged in
    or not:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们根据用户是否已登录来显示不同的文本：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here, we used two JavaScript concepts:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了两个JavaScript概念：
- en: 'A ternary operator, which is an inline version of the `if` conditional. It
    looks as follows: `ifThisIsTrue ? returnThis : otherwiseReturnThis`.'
  id: totrans-66
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一个三元运算符，它是`if`条件的内联版本。它看起来如下：`ifThisIsTrue ? returnThis : otherwiseReturnThis`。'
- en: A template string, which can be used to insert variables into a string. It is
    defined with backticks ([PRE11]
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个模板字符串，它可以用来将变量插入到字符串中。它用反引号（[PRE11]
- en: '}'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </AuthenticationContext.Consumer>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: </AuthenticationContext.Consumer>
- en: )
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: export default authenticateUser(App)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: export default authenticateUser(App)
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <AuthenticationContext.Consumer>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <AuthenticationContext.Consumer>
- en: '{user => ('
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '{user => ('
- en: <LanguageContext.Consumer>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <LanguageContext.Consumer>
- en: '{language => ('
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '{language => ('
- en: <StatusContext.Consumer>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <StatusContext.Consumer>
- en: '{status => ('
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '{status => ('
- en: '...'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: )}
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: )}
- en: </StatusContext.Consumer>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: </StatusContext.Consumer>
- en: )}
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: )}
- en: </LanguageContext.Consumer>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: </LanguageContext.Consumer>
- en: )}
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: )}
- en: </AuthenticationContext.Consumer>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: </AuthenticationContext.Consumer>
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: function Example ({ name }) {
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: function Example ({ name }) {
- en: useEffect(() => {
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: useEffect(() => {
- en: fetch(`http://my.api/${this.props.name}`)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: fetch(`http://my.api/${this.props.name}`)
- en: .then(...)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后...
- en: '}, [ name ])'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '}, [ name ])'
- en: // ...
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: // ...
- en: '}'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: const user = useContext(AuthenticationContext)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: const user = useContext(AuthenticationContext)
- en: const language = useContext(LanguageContext)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: const language = useContext(LanguageContext)
- en: const status = useContext(StatusContext)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: const status = useContext(StatusContext)
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: npx create-react-app <app-name>
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: npx create-react-app <app-name>
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: npx create-react-app chapter1_1
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: npx create-react-app chapter1_1
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: npm start
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: npm start
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: npm run-script build
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: npm run-script build
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: npm install -g serve
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: npm install -g serve
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: serve -s build
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: serve -s build
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: npx create-react-app chapter1_1
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: npx create-react-app chapter1_1
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: import React from 'react'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: import React from 'react'
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: class MyName extends React.Component {
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: class MyName extends React.Component {
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: constructor (props) {
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: constructor (props) {
- en: super(props)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: super(props)
- en: 'this.state = { name: '''' }'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.state = { name: '''' }'
- en: '}'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: handleChange (evt) {
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: handleChange (evt) {
- en: 'this.setState({ name: evt.target.value })'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.setState({ name: evt.target.value })'
- en: '}'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: render () {
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: render () {
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: const { name } = this.state
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: const { name } = this.state
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: const name = this.state.name
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: const name = this.state.name
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: return (
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: return (
- en: <div>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: '<h1>My name is: {name}</h1>'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>我的名字是：{name}</h1>
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: <input type="text" value={name} onChange={this.handleChange} />
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" value={name} onChange={this.handleChange} />
- en: </div>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: )
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '}'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: export default MyName
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: export default MyName
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: constructor (props) {
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: constructor (props) {
- en: super(props)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: super(props)
- en: 'this.state = { name: '''' }'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.state = { name: '''' }'
- en: this.handleChange = this.handleChange.bind(this)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: this.handleChange = this.handleChange.bind(this)
- en: '}'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: npx create-react-app chapter1_2
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: npx create-react-app chapter1_2
- en: '[PRE34]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: import React, { useState } from 'react'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: import React, { useState } from 'react'
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: function MyName () {
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: function MyName () {
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: const [ name, setName ] = useState('')
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: const [ name, setName ] = useState('')
- en: '[PRE37]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: const nameHook = useState('')
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: const nameHook = useState('')
- en: const name = nameHook[0]
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: const name = nameHook[0]
- en: const setName = nameHook[1]
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: const setName = nameHook[1]
- en: '[PRE38]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: function handleChange (evt) {
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: function handleChange (evt) {
- en: setName(evt.target.value)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: setName(evt.target.value)
- en: '}'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE39]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: return (
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: return (
- en: <div>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: '<h1>My name is: {name}</h1>'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>我的名字是：{name}</h1>
- en: <input type="text" value={name} onChange={handleChange} />
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" value={name} onChange={handleChange} />
- en: </div>
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: )
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '}'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: export default MyName
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: export default MyName
- en: '[PRE40]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: import React from 'react'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: import React from 'react'
- en: class MyName extends React.Component {
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: class MyName extends React.Component {
- en: constructor (props) {
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: constructor (props) {
- en: super(props)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: super(props)
- en: 'this.state = { name: '''' }'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.state = { name: '''' }'
- en: this.handleChange = this.handleChange.bind(this)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: this.handleChange = this.handleChange.bind(this)
- en: '}'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: handleChange (evt) {
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: handleChange (evt) {
- en: 'this.setState({ name: evt.target.value })'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.setState({ name: evt.target.value })'
- en: '}'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: render () {
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: render () {
- en: const { name } = this.state
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: const { name } = this.state
- en: return (
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: return (
- en: <div>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: '<h1>My name is: {name}</h1>'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>我的名字是：{name}</h1>
- en: <input type="text" value={name} onChange={this.handleChange} />
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" value={name} onChange={this.handleChange} />
- en: </div>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: )
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '}'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: export default MyName
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: export default MyName
- en: '[PRE41]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: import React, { useState } from 'react'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: import React, { useState } from 'react'
- en: function MyName () {
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: function MyName () {
- en: const [ name, setName ] = useState('')
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: const [ name, setName ] = useState('')
- en: function handleChange (evt) {
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: function handleChange (evt) {
- en: setName(evt.target.value)
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: setName(evt.target.value)
- en: '}'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return (
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: return (
- en: <div>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: '<h1>My name is: {name}</h1>'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>我的名字是：{name}</h1>
- en: <input type="text" value={name} onChange={handleChange} />
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" value={name} onChange={handleChange} />
- en: </div>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: )
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '}'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: export default MyName
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: export default MyName
- en: '[PRE42]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: import { useState } from 'react'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: import { useState } from 'react'
- en: const [ state, setState ] = useState(initialState)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: const [ state, setState ] = useState(initialState)
- en: '[PRE43]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: import { useEffect } from 'react'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: import { useEffect } from 'react'
- en: useEffect(didUpdate)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: useEffect(didUpdate)
- en: '[PRE44]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: import { useContext } from 'react'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: import { useContext } from 'react'
- en: const value = useContext(MyContext)
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: const value = useContext(MyContext)
- en: '[PRE45]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: import { useRef } from 'react'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: import { useRef } from 'react'
- en: const refContainer = useRef(initialValue)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: const refContainer = useRef(initialValue)
- en: '[PRE46]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: import { useReducer } from 'react'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: import { useReducer } from 'react'
- en: const [ state, dispatch ] = useReducer(reducer, initialArg, init)
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: const [ state, dispatch ] = useReducer(reducer, initialArg, init)
- en: '[PRE47]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: import { useMemo } from 'react'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: import { useMemo } from 'react'
- en: const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b])
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b])
- en: '[PRE48]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: import { useCallback } from 'react'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: import { useCallback } from 'react'
- en: const memoizedCallback = useCallback(
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: const memoizedCallback = useCallback(
- en: () => {
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: () => {
- en: doSomething(a, b)
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: doSomething(a, b)
- en: '},'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '[a, b]'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[a, b]'
- en: )
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '[PRE49]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: import { useLayoutEffect } from 'react'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: import { useLayoutEffect } from 'react'
- en: useLayoutEffect(didUpdate)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: useLayoutEffect(didUpdate)
- en: '[PRE50]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: import { useDebugValue } from 'react'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: import { useDebugValue } from 'react'
- en: useDebugValue(value)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: useDebugValue(value)
- en: '[PRE51]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: import { useInput } from 'react-hookedup'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: import { useInput } from 'react-hookedup'
- en: function App () {
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: function App () {
- en: const { value, onChange } = useInput('')
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: const { value, onChange } = useInput('')
- en: return <input value={value} onChange={onChange} />
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: return <input value={value} onChange={onChange} />
- en: '}'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE52]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: import { useRequest } from 'react-request-hook'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: import { useRequest } from 'react-request-hook'
- en: const [profile, getProfile] = useResource(id => ({
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: const [profile, getProfile] = useResource(id => ({
- en: 'url: `/user/${id}`,'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 'url: `/user/${id}`,'
- en: 'method: ''GET'''
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：'GET'
- en: '})'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE53]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: import { useCurrentRoute, useNavigation } from 'react-navi'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: import { useCurrentRoute, useNavigation } from 'react-navi'
- en: const { views, url, data, status } = useCurrentRoute()
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: const { views, url, data, status } = useCurrentRoute()
- en: const { navigate } = useNavigation()
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: const { navigate } = useNavigation()
- en: '[PRE54]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: import { useOnMount, useOnUnmount } from 'react-hookedup'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: import { useOnMount, useOnUnmount } from 'react-hookedup'
- en: useOnMount(() => { ... })
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: useOnMount(() => { ... })
- en: useOnUnmount(() => { ... })
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在卸载时使用useOnUnmount(() => { ... })
- en: '[PRE55]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: import { useInterval, useTimeout } from 'react-hookedup'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: import { useInterval, useTimeout } from 'react-hookedup'
- en: useInterval(() => { ... }, 1000)
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: useInterval(() => { ... }, 1000)
- en: useTimeout(() => { ... }, 1000)
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: useTimeout(() => { ... }, 1000)
- en: '```'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: As we can see, Hooks greatly simplify how we deal with intervals and timeouts
    in React.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，Hooks极大地简化了我们在React中处理间隔和超时的方式。
- en: Other community Hooks
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他社区Hooks
- en: 'As you can imagine, there are many more Hooks that are provided by the community.
    We will learn about the previously mentioned community Hooks in depth, and various
    other community Hooks in [Chapter 8](67dd0114-4264-4be6-989a-0b1e1f78dcb7.xhtml):
    *Using Community Hooks*.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可以想象的那样，社区提供了许多其他的Hooks。我们将深入学习之前提到的社区Hooks，以及[第8章](67dd0114-4264-4be6-989a-0b1e1f78dcb7.xhtml)中的其他社区Hooks：*使用社区Hooks*。
- en: Summary
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this first chapter of the book, we started out by learning the fundamental
    principles of React and which types of components it provides. We then moved on
    to learning about common problems with class components, and using existing features
    of React, and how they break the fundamental principles. Next, we implemented
    a simple application using class components and function components with Hooks,
    in order to be able to compare the differences between the two solutions. As we
    found out, function components with Hooks are a much better fit for React's fundamental
    principles, as they do not suffer from the same problems as class components,
    and they make our code much more
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一章中，我们首先学习了React的基本原则以及它提供的组件类型。然后，我们继续学习了类组件的常见问题，以及如何使用React的现有功能，以及它们如何违反基本原则。接下来，我们使用类组件和带有Hooks的函数组件实现了一个简单的应用程序，以便能够比较这两种解决方案之间的差异。正如我们所发现的，带有Hooks的函数组件更适合React的基本原则，因为它们不会遇到类组件的相同问题，并且使我们的代码更加
- en: concise and easy to understand! Finally, we got our first glimpse of the various
    Hooks that we are going to learn about throughout this book. After this chapter,
    the basics of React and React Hooks are clear. We can now move on to more advanced
    concepts of Hooks.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 简洁易懂！最后，我们初次见识了本书中将要学习的各种Hooks。在本章之后，React和React Hooks的基础知识已经清晰。现在我们可以继续学习更高级的Hooks概念。
- en: In the next chapter, we are going to gain an in-depth knowledge of how the State
    Hook works, by reimplementing it from scratch. By doing so, we are going to get
    a grasp on how Hooks work internally, and what their limitations are. Afterward,
    we are going to create a small blog application using the State Hook!
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入了解State Hook的工作原理，通过从头开始重新实现它。通过这样做，我们将了解Hooks的内部工作原理以及它们的局限性。之后，我们将使用State
    Hook创建一个小型的博客应用程序！
- en: Questions
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'To recap what we have learned in this chapter, try answering the following
    questions:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下我们在本章学到的内容，尝试回答以下问题：
- en: What are React's three fundamental principles?
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React的三个基本原则是什么？
- en: What are the two types of components in React?
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React中有哪两种类型的组件？
- en: What are the problems with class components in React?
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React中类组件存在哪些问题？
- en: What is the problem of using higher-order components in React?
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在React中使用高阶组件的问题是什么？
- en: Which tool can we use to set up a React project, and what is the command that
    we need to run to use it?
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪个工具来设置一个React项目，我们需要运行什么命令来使用它？
- en: 'What do we need to do if we get the following error with class components: *TypeError:
    undefined is not an object (evaluating ''this.setState'')*?'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果我们在类组件中遇到以下错误，我们需要做什么：*TypeError: undefined is not an object (evaluating
    ''this.setState'')*？'
- en: How do we access and set React state using Hooks?
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何使用Hooks访问和设置React状态？
- en: What are the advantages of using function components with Hooks, in comparison
    to class components?
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Hooks的函数组件与类组件相比有什么优势？
- en: Do we need to replace all class components with function components using Hooks
    when updating React?
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更新React时，我们是否需要使用Hooks替换所有类组件为函数组件？
- en: What are the three basic Hooks that are provided by React?
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React提供的三个基本Hooks是什么？
- en: Further reading
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following reading material:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对本章学习的概念感兴趣，可以查看以下阅读材料：
- en: Create React App on GitHub: [https://github.com/facebook/create-react-app#create-react-app--](https://github.com/facebook/create-react-app#create-react-app--)
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitHub上创建React应用程序：[https://github.com/facebook/create-react-app#create-react-app--](https://github.com/facebook/create-react-app#create-react-app--)
- en: RFC for React Hooks: [https://github.com/reactjs/rfcs/blob/master/text/0068-react-hooks.md](https://github.com/reactjs/rfcs/blob/master/text/0068-react-hooks.md)
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Hooks的RFC：[https://github.com/reactjs/rfcs/blob/master/text/0068-react-hooks.md](https://github.com/reactjs/rfcs/blob/master/text/0068-react-hooks.md)
- en: Handling input with React: [https://reactjs.org/docs/forms.html](https://reactjs.org/docs/forms.html)
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React处理输入：[https://reactjs.org/docs/forms.html](https://reactjs.org/docs/forms.html)
- en: State and life cycle in React with class components: [https://reactjs.org/docs/state-and-lifecycle.html](https://reactjs.org/docs/state-and-lifecycle.html)
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React中类组件的状态和生命周期：[https://reactjs.org/docs/state-and-lifecycle.html](https://reactjs.org/docs/state-and-lifecycle.html)
- en: Destructuring: [http://exploringjs.com/es6/ch_destructuring.html](http://exploringjs.com/es6/ch_destructuring.html)
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解构：[http://exploringjs.com/es6/ch_destructuring.html](http://exploringjs.com/es6/ch_destructuring.html)
- en: Template strings: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板字符串：[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)
- en: Ternary operator: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator)
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三元运算符：[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator)
