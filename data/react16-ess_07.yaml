- en: Chapter 7. Updating Your React Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。更新您的React组件
- en: 'In the previous chapter, you learned that a React component can go through
    three phases:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您已经了解到React组件可以经历三个阶段：
- en: Mounting
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挂载
- en: Updating
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新
- en: Unmounting
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卸载
- en: We've already discussed the mounting and unmounting phases. In this chapter,
    we'll focus on the updating phase. During this phase, a React component is already
    inserted into the DOM. This DOM represents a component's current state, and when
    that state changes, React needs to evaluate how a new state is going to mutate
    the previously rendered DOM.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了挂载和卸载阶段。在本章中，我们将专注于更新阶段。在此阶段，React组件已经插入到DOM中。这个DOM代表了组件的当前状态，当状态发生变化时，React需要评估新状态将如何改变先前呈现的DOM。
- en: React provides us with methods to influence what is going to be rendered during
    an update as well as to be aware of when an update happens. These methods allow
    us to control the transition from the current component's state to the next component's
    state. Let's learn more about the powerful nature of the React component's updating
    methods.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: React为我们提供了影响更新期间将要呈现的内容以及了解更新发生时的方法。这些方法允许我们控制从当前组件状态到下一个组件状态的过渡。让我们更多地了解React组件更新方法的强大性质。
- en: Understanding component lifecycle updating methods
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解组件生命周期更新方法
- en: 'A React component has five lifecycle methods that belong to a component''s
    *updating* phase:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: React组件有五个生命周期方法属于组件的*更新*阶段：
- en: '`componentWillReceiveProps()`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillReceiveProps()`'
- en: '`shouldComponentUpdate()`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shouldComponentUpdate()`'
- en: '`componentWillUpdate()`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillUpdate()`'
- en: '`render()`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render()`'
- en: '`componentDidUpdate()`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidUpdate()`'
- en: 'See the following figure for a better view:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见以下图以获得更好的视图：
- en: '![Understanding component lifecycle updating methods](graphics/B05915_07_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![理解组件生命周期更新方法](graphics/B05915_07_01.jpg)'
- en: You're already familiar with the `render()` method. Now let's discuss the other
    four methods.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经熟悉了`render()`方法。现在让我们讨论其他四种方法。
- en: The componentWillReceiveProps method
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: componentWillReceiveProps方法
- en: 'We''ll start with the `componentWillReceiveProps()` method in the `StreamTweet`
    component. Add the following code after the `componentDidMount()` method in the
    `StreamTweet.js` file:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`StreamTweet`组件中的`componentWillReceiveProps()`方法开始。在`StreamTweet.js`文件的`componentDidMount()`方法之后添加以下代码：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This method is invoked first in the component lifecycle's updating phase. It
    is called when a component receives new properties from its parent component.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法首先在组件生命周期的更新阶段被调用。当组件从其父组件接收新属性时，它被调用。
- en: This method is an opportunity for us to compare the current component's properties,
    using the `this.props` object, with the next component's properties, using the
    `nextProps` object. Based on this comparison, we can choose to update the component's
    state using the `this.setState()` function, which will not trigger an additional
    render in this scenario.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法是一个机会，让我们使用`this.props`对象比较当前组件的属性和使用`nextProps`对象比较下一个组件的属性。基于这个比较，我们可以选择使用`this.setState()`函数来更新组件的状态，在这种情况下不会触发额外的渲染。
- en: 'Let''s see that in action:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它的实际应用：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We first get the lengths of the current tweet and the next tweet. The current
    one is available via `this.props.tweet` and the next one via `nextProps.tweet`.
    We then compare their lengths by checking whether the next tweet is longer than
    the current one. The result of the comparison is stored in the `isNumberOfCharactersIncreasing`
    variable. Finally, we update the component's state by setting the `numberOfCharactersIsIncreasing`
    property to the value of our `isNumberOfCharactersIncreasing` variable.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先获取当前推文和下一条推文的长度。当前推文可以通过`this.props.tweet`获得，下一条推文可以通过`nextProps.tweet`获得。然后，我们通过检查下一条推文是否比当前推文更长来比较它们的长度。比较的结果存储在`isNumberOfCharactersIncreasing`变量中。最后，我们通过将`numberOfCharactersIsIncreasing`属性设置为`isNumberOfCharactersIncreasing`变量的值来更新组件的状态。
- en: 'We then set our header text as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将我们的标题文本设置如下：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If the next tweet is longer, we set the header text to `'Number of characters
    is increasing'`, or else, we set it to `'Latest public photo from Twitter'`. We
    then update our component's state once more by setting the `headerText` property
    to the value of our `headerText` variable.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果下一条推文更长，我们将把标题文本设置为`'字符数正在增加'`，否则，我们将把它设置为`'来自Twitter的最新公共照片'`。然后，我们通过将`headerText`属性设置为`headerText`变量的值来再次更新组件的状态。
- en: Notice that we call the `this.setState()` function twice in our `componentWillReceiveProps()`
    method. This is to illustrate the point that no matter how many times you call
    `this.setState()` in the `componentWillReceiveProps()` method, it won't trigger
    any additional renders of that component. React does an internal optimization,
    where it batches the state updates together.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在我们的`componentWillReceiveProps()`方法中调用了`this.setState()`函数两次。这是为了说明一个观点，即无论在`componentWillReceiveProps()`方法中调用`this.setState()`多少次，都不会触发该组件的额外渲染。React进行了内部优化，将状态更新批处理在一起。
- en: 'Since the `componentWillReceiveProps()` method will be called once for each
    new tweet that our `StreamTweet` component will receive, it makes it a good place
    to count the total number of received tweets:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`componentWillReceiveProps()`方法将为`StreamTweet`组件接收到的每条新推文调用一次，因此它是一个很好的地方来计算接收到的推文总数：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now we know how to check whether the next tweet is longer than the tweet we're
    currently displaying, but how can we choose not to render the next tweet at all?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何检查下一条推文是否比我们当前显示的推文更长，但是我们如何选择根本不渲染下一条推文呢？
- en: The shouldComponentUpdate method
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: shouldComponentUpdate方法
- en: 'The `shouldComponentUpdate()` method allows us to decide whether the next component''s
    state should trigger the component''s re-rendering or not. This method returns
    a Boolean value, which by default is `true`, but you can return `false`, and the
    following component methods won''t be called:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`shouldComponentUpdate()`方法允许我们决定下一个组件状态是否应该触发组件的重新渲染。该方法返回一个布尔值，默认为`true`，但您可以返回`false`，那么以下组件方法将不会被调用：'
- en: '`componentWillUpdate()`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillUpdate()`'
- en: '`render()`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render()`'
- en: '`componentDidUpdate()`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidUpdate()`'
- en: Skipping a call to the component's `render()` method will prevent that component
    from re-rendering, which in turn will improve your application's performance,
    since no additional DOM mutations will be made.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过对组件的`render()`方法的调用将阻止该组件重新渲染，从而提高应用程序的性能，因为不会进行额外的DOM变化。
- en: This method is invoked second in the component lifecycle's updating phase.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法在组件生命周期的更新阶段中第二次被调用。
- en: 'This method is a great place for us to prevent the next tweet with one or less
    characters from being displayed. Add this code to the `StreamTweet` component
    after the `componentWillReceiveProps()` method:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法非常适合我们防止显示下一条推文长度为一或更少字符。在`componentWillReceiveProps()`方法之后，将此代码添加到`StreamTweet`组件中：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If the next tweet's length is greater than 1, then `shouldComponentUpdate()`
    returns `true`, and the `StreamTweet` component renders the next tweet. Or else,
    it returns `false`, and the `StreamTweet` component doesn't render the next state.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果下一个 tweet 的长度大于 1，则 `shouldComponentUpdate()` 返回 `true`，并且 `StreamTweet` 组件渲染下一个
    tweet。否则，它返回 `false`，并且 `StreamTweet` 组件不渲染下一个状态。
- en: The componentWillUpdate method
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`componentWillUpdate` 方法'
- en: 'The `componentWillUpdate()` method is called *immediately before* React updates
    the DOM. It gets the following two arguments:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentWillUpdate()` 方法在 React 更新 DOM *之前立即* 被调用。它接收以下两个参数：'
- en: '`nextProps`: The next properties object'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nextProps`: 下一个属性对象'
- en: '`nextState`: The next state object'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nextState`: 下一个状态对象'
- en: You can use these arguments to prepare for the DOM update. However, you cannot
    use `this.setState()` in the `componentWillUpdate()` method. If you want to update
    the component's state in response to its properties changing, then do that in
    the `componentWillReceiveProps()` method, which will be called by React when the
    properties change.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用这些参数来准备 DOM 更新。但是，您不能在 `componentWillUpdate()` 方法中使用 `this.setState()`。如果您想要在响应属性更改时更新组件的状态，则在
    `componentWillReceiveProps()` 方法中执行此操作，React 在属性更改时会调用该方法。
- en: 'To demonstrate when the `componentWillUpdate()` method is called, we need to
    log it in the `StreamTweet` component. Add this code after the `shouldComponentUpdate()`
    method:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示 `componentWillUpdate()` 方法何时被调用，我们需要在 `StreamTweet` 组件中记录它。在 `shouldComponentUpdate()`
    方法之后添加以下代码：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After calling the `componentWillUpdate()` method, React invokes the `render()`
    method that performs the DOM update. Then, the `componentDidUpdate()` method is
    called.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `componentWillUpdate()` 方法后，React 调用执行 DOM 更新的 `render()` 方法。然后，调用 `componentDidUpdate()`
    方法。
- en: The componentDidUpdate method
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`componentDidUpdate` 方法'
- en: 'The `componentDidUpdate()` method is called *immediately after* React updates
    the DOM. It gets these two arguments:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentDidUpdate()` 方法在 React 更新 DOM *之后立即* 被调用。它接收这两个参数：'
- en: '`prevProps`: The previous properties object'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prevProps`: 先前的属性对象'
- en: '`prevState`: The previous state object'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prevState`: 先前的状态对象'
- en: 'We will use this method to interact with the updated DOM or perform any post-render
    operations. In our `StreamTweet` component, we''ll use `componentDidUpdate()`
    to increment the number of displayed tweets in our global object. Add this code
    after the `componentWillUpdate()` method:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个方法与更新后的 DOM 进行交互或执行任何后渲染操作。在我们的 `StreamTweet` 组件中，我们将使用 `componentDidUpdate()`
    来增加全局对象中显示的推文数量。在 `componentWillUpdate()` 方法之后添加以下代码：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After `componentDidUpdate()` is called, the updating cycle ends. A new cycle
    is started when a component's state is updated or a parent component passes new
    properties. Or when you call the `forceUpdate()` method, it triggers a new updating
    cycle, but skips the `shouldComponentUpdate()` method on a component that triggered
    the update. However, `shouldComponentUpdate()` is called on all child components
    as per the usual updating phase. Try to avoid using the `forceUpdate()` method
    as much as possible; this will promote your application's maintainability.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `componentDidUpdate()` 后，更新周期结束。当组件的状态更新或父组件传递新属性时，会启动新的周期。或者当您调用 `forceUpdate()`
    方法时，它会触发新的更新周期，但会跳过触发更新的组件上的 `shouldComponentUpdate()` 方法。然而，`shouldComponentUpdate()`
    会按照通常的更新阶段在所有子组件上调用。尽量避免使用 `forceUpdate()` 方法；这将提高应用程序的可维护性。
- en: This concludes our discussion of React component lifecycle methods.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了我们对 React 组件生命周期方法的讨论。
- en: Setting default React component properties
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置默认的 React 组件属性
- en: 'As you know from the previous chapter, our `StreamTweet` component renders
    two child components: `Header` and `Tweet`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从上一章所知，我们的 `StreamTweet` 组件渲染了两个子组件：`Header` 和 `Tweet`。
- en: 'Let''s create these components. To do this, navigate to `~/snapterest/source/components/`
    and create the `Header.js` file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建这些组件。要做到这一点，导航到`~/snapterest/source/components/`并创建`Header.js`文件：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, our `Header` component is a stateless component that renders
    the `h2` element. The header text is passed from a parent component as a `this.props.text`
    property, which makes this component flexible, that allows us to reuse it anywhere
    where we need a header. We'll reuse this component again later in this book.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们的`Header`组件是一个无状态组件，渲染`h2`元素。标题文本作为`this.props.text`属性从父组件传递，这使得该组件灵活，可以在需要标题的任何地方重用。我们稍后将在本书中再次重用此组件。
- en: Notice that the `h2` element has a `style` property.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`h2`元素有一个`style`属性。
- en: 'In React, we can define the CSS rules in a JavaScript object, and then pass
    that object as a value to the React element''s `style` property. For example,
    in this component, we define the `headerStyle` variable that references an object
    where:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，我们可以在JavaScript对象中定义CSS规则，然后将该对象作为值传递给React元素的`style`属性。例如，在这个组件中，我们定义了`headerStyle`变量，引用了一个对象，其中：
- en: Each object key is a CSS property
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个对象键都是一个CSS属性。
- en: Each object value is a CSS value
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个对象值都是一个CSS值。
- en: The CSS properties that contain a hyphen in their names should be converted
    to the **camelCase** style; for example, `font-size` becomes `fontSize` and `font-weight`
    becomes `fontWeight`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 包含连字符的CSS属性应转换为**驼峰式**风格；例如，`font-size`变成`fontSize`，`font-weight`变成`fontWeight`。
- en: 'The advantages of defining your CSS rules inside a React component are as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将CSS规则定义在React组件内部的优势如下：
- en: '**Portability**: You can easily share a component together with its styling,
    all in one JavaScript file'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植性**：您可以轻松地共享一个组件以及其样式，全部在一个JavaScript文件中。'
- en: '**Encapsulation**: Making styles inline allows you to limit the scope of what
    they affect'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**封装性**：内联样式可以限制其影响范围。'
- en: '**Flexibility**: The CSS rules can be calculated using the power of JavaScript'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：CSS规则可以使用JavaScript的强大功能进行计算。'
- en: The significant disadvantage of using this technique is the fact that **Content
    Security Policies** (**CSP**) can block inline styling from having any effect.
    You can learn more about CSP at [https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种技术的一个显著缺点是**内容安全策略**（**CSP**）可能会阻止内联样式产生任何效果。您可以在[https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP)了解更多关于CSP的信息。
- en: 'Our `Header` component has one property that we haven''t discussed yet, that
    is, `defaultProps`. What if you forget to pass a property that a React component
    depends on? In that case, a component can set the default properties using the
    `defaultProps` property; consider the following example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Header`组件有一个我们尚未讨论的属性，即`defaultProps`。如果忘记传递一个React组件依赖的属性会怎么样？在这种情况下，组件可以使用`defaultProps`属性设置默认属性；请考虑以下示例：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, we're setting a default value of `'Default header'` to our
    `text` property. If a parent component passes the `this.props.text` property,
    then it will overwrite the default one.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将`text`属性的默认值设置为`'Default header'`。如果父组件传递了`this.props.text`属性，那么它将覆盖默认值。
- en: 'Next, let''s create our `Tweet` component. To do this, navigate to `~/snapterest/source/components/`
    and create the `Tweet.js` file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建我们的`Tweet`组件。要做到这一点，导航到`~/snapterest/source/components/`并创建`Tweet.js`文件：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This component renders a `<div>` element with a child `<img>` element. Both
    the elements have inline styles, and the `<img>` element has a click event handler,
    that is, `this.handleImageClick`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件渲染一个带有子`<img>`元素的`<div>`元素。这两个元素都有内联样式，而`<img>`元素有一个点击事件处理程序，即`this.handleImageClick`。
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When a user clicks on a tweet's image, the `Tweet` component checks whether
    a parent component has passed a `this.props.onImageClick` callback function as
    a property and calls that function. The `this.props.onImageClick` property is
    an optional `Tweet` component's property, so we need to check whether it was passed
    before we can use it. On the other hand, `tweet` is a required property.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击推文的图片时，`Tweet`组件会检查父组件是否将`this.props.onImageClick`回调函数作为属性传递，并调用该函数。`this.props.onImageClick`属性是一个可选的`Tweet`组件属性，因此我们需要检查它是否被传递才能使用它。另一方面，`tweet`是一个必需的属性。
- en: How can we ensure that a component receives all the required properties?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何确保组件接收到所有必需的属性？
- en: Validating React component properties
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证React组件属性
- en: 'In React, there is a way to validate the component properties using the component''s
    `propTypes` object:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，有一种方法可以使用组件的`propTypes`对象来验证组件属性：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this object, you need to specify a property name and a validator function
    that will determine whether a property is valid or not. React provides some predefined
    validators for you to reuse. They are all available in the `PropTypes` object
    from the `prop-types` package:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在此对象中，您需要指定属性名称和验证函数，该函数将确定属性是否有效。React为您提供了一些预定义的验证器供您重用。它们都在`prop-types`包的`PropTypes`对象中可用：
- en: '`PropTypes.number`: This will validate whether a property is a number or not'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PropTypes.number`：这将验证属性是否是数字'
- en: '`PropTypes.string`: This will validate whether a property is a string or not'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PropTypes.string`：这将验证属性是否是字符串'
- en: '`PropTypes.bool`: This will validate whether a property is a Boolean or not'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PropTypes.bool`：这将验证属性是否是布尔值'
- en: '`PropTypes.object`: This will validate whether a property is an object or not'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PropTypes.object`：这将验证属性是否是对象'
- en: '`PropTypes.element`: This will validate whether a property is a React element
    or not'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PropTypes.element`：这将验证属性是否是React元素'
- en: For a complete list of the `PropTypes` validators, you can check the docs at
    [https://facebook.github.io/react/docs/typechecking-with-proptypes.html](https://facebook.github.io/react/docs/typechecking-with-proptypes.html).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取`PropTypes`验证器的完整列表，您可以在[https://facebook.github.io/react/docs/typechecking-with-proptypes.html](https://facebook.github.io/react/docs/typechecking-with-proptypes.html)上查看文档。
- en: 'By default, all the properties that you validate with the `PropTypes` validators
    are optional. You can chain any of them with `isRequired` to make sure that a
    warning message is displayed on a JavaScript console when a property is missing:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您使用`PropTypes`验证器验证的所有属性都是可选的。您可以将它们中的任何一个与`isRequired`链接在一起，以确保在属性丢失时在JavaScript控制台上显示警告消息：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can also specify your own custom validator function that should return
    an `Error` object if the validation fails:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以指定自己的自定义验证器函数，如果验证失败，应该返回一个`Error`对象：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s take a look at the `propTypes` object in our `Tweet` component:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们`Tweet`组件中的`propTypes`对象：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you can see, we''re validating two `Tweet` component properties: `tweet`
    and `onImageClick`.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在验证两个`Tweet`组件属性：`tweet`和`onImageClick`。
- en: 'We use the custom validator function to validate the `tweet` property. React
    passes three parameters to this function:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用自定义验证器函数来验证`tweet`属性。React向此函数传递三个参数：
- en: '`properties`: This is the component properties object'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`properties`：这是组件属性对象'
- en: '`propertyName`: This is the name of the property that we''re validating'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propertyName`：这是我们正在验证的属性的名称'
- en: '`componentName`: This is the name of the component'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentName`：这是组件的名称'
- en: 'We first check whether our `Tweet` component received the `tweet` property:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查我们的`Tweet`组件是否收到了`tweet`属性：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, we assume that the `tweet` property is an object, and check whether that
    object has no `media` property:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们假设`tweet`属性是一个对象，并检查该对象是否没有`media`属性：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Both of these checks return an `Error` object that will be logged in a JavaScript
    console.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个检查都返回一个`Error`对象，将在JavaScript控制台中记录。
- en: 'Another `Tweet` component''s property that we will validate is `onImageClick`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将验证另一个`Tweet`组件的属性`onImageClick`：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We validate that the value of the `onImageClick` property is a function. In
    this case, we reuse a validator function provided by the `PropTypes` object. As
    you can see, `onImageClick` is an optional property because we didn't add `isRequired`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证`onImageClick`属性的值是否为函数。在这种情况下，我们重用了`PropTypes`对象提供的验证函数。正如您所看到的，`onImageClick`是一个可选属性，因为我们没有添加`isRequired`。
- en: Finally, for performance reasons, `propTypes` is only checked in the development
    version of React.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，出于性能原因，`propTypes`仅在React的开发版本中进行检查。
- en: Creating a Collection component
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Collection组件
- en: 'You might recall that our topmost hierarchy `Application` component has two
    child components: `Stream` and `Collection`.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得我们的最顶层层次结构`Application`组件有两个子组件：`Stream`和`Collection`。
- en: So far, we've discussed and implemented our `Stream` component and its child
    components. Next, we're going to focus on our `Collection` component.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论并实现了我们的`Stream`组件及其子组件。接下来，我们将专注于我们的`Collection`组件。
- en: 'Create the `~/snapterest/source/components/Collection.js` file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`~/snapterest/source/components/Collection.js`文件：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Our `Collection` component is responsible for rendering two things:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Collection`组件负责渲染两件事：
- en: Tweets that the user has collected
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户收集的推文
- en: User interface control elements for manipulating that collection
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于操作该收藏的用户界面控制元素
- en: 'Let''s take a look at the component''s `render()` method:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看组件的`render()`方法：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We first get a number of tweets in the collection using the `this.getNumberOfTweetsInCollection()`
    method:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用`this.getNumberOfTweetsInCollection()`方法获取收藏中的推文数量：
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This method, in turn, uses another method to get a list of tweet IDs:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法又使用另一种方法来获取推文ID列表：
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `this.getListOfTweetIds()` function call returns an array of tweet IDs,
    and then `this.getNumberOfTweetsInCollection()` returns a length of that array.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.getListOfTweetIds()`函数调用返回一个推文ID数组，然后`this.getNumberOfTweetsInCollection()`返回该数组的长度。'
- en: 'In our `render()` method, once we know the number of tweets in our collection,
    we have to make a choice:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`render()`方法中，一旦我们知道收藏中的推文数量，我们必须做出选择：
- en: If the collection is *not* empty, then render the `CollectionControls` and `TweetList`
    components
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果收藏*不*为空，则渲染`CollectionControls`和`TweetList`组件
- en: Otherwise, render the `Header` component
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，渲染`Header`组件
- en: What do all these components render?
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些组件都渲染什么？
- en: The `CollectionControls` component renders a header with a collection name and
    a set of buttons that allow users to rename, empty, and export a collection
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CollectionControls`组件渲染一个带有收藏名称和一组按钮的标题，允许用户重命名、清空和导出收藏'
- en: The `TweetList` component renders a list of tweets
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TweetList`组件渲染推文列表'
- en: The `Header` component simply renders a header with a message that the collection
    is empty
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Header`组件只是渲染一个消息头，说明收藏是空的'
- en: 'The idea is to only show a collection when it''s not empty. In that case, we''re
    creating four variables:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 想法是只有在收藏不为空时才显示收藏。在这种情况下，我们创建了四个变量：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `tweets` variable references our `tweets` property that is passed from a
    parent component
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tweets`变量引用了我们从父组件传递的`tweets`属性'
- en: The `htmlMarkup` variable references a string that is returned by the component's
    `this.createHtmlMarkupStringOfTweetList()` function call
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`htmlMarkup`变量引用了组件的`this.createHtmlMarkupStringOfTweetList()`函数调用返回的字符串'
- en: The `onRemoveAllTweetsFromCollection` and `onRemoveTweetFromCollection` variables
    reference functions that are passed from a parent component
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRemoveAllTweetsFromCollection`和`onRemoveTweetFromCollection`变量引用了从父组件传递的函数'
- en: 'As the name suggests, the `this.createHtmlMarkupStringOfTweetList()` method
    creates a string that represents the HTML markup created by rendering the `TweetList`
    component:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`this.createHtmlMarkupStringOfTweetList()`方法创建一个代表通过渲染`TweetList`组件创建的HTML标记的字符串：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `createHtmlMarkupStringOfTweetList()` method uses the `ReactDOMServer.renderToStaticMarkup()`
    function that we discussed in [Chapter 3](ch03.html "Chapter 3. Creating Your
    First React Element"), *Creating Your First React Element*. We pass the `TweetList`
    component as its argument:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`createHtmlMarkupStringOfTweetList()`方法使用了我们在[第3章](ch03.html "第3章。创建你的第一个React元素")中讨论过的`ReactDOMServer.renderToStaticMarkup()`函数，*创建你的第一个React元素*。我们将`TweetList`组件作为其参数传递：'
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This `TweetList` component has a `tweets` property that references the `tweets`
    property passed by a parent component.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`TweetList`组件有一个`tweets`属性，引用了父组件传递的`tweets`属性。
- en: The resulting HTML string produced by the `ReactDOMServer.renderToStaticMarkup()`
    function is stored in the `htmlString` variable. Then, we create a new `htmlMarkup`
    object with the `html` property that references our `htmlString` variable. Finally,
    we use the `JSON.stringify()` function to convert our `htmlMarkup` JavaScript
    object to a JSON string. The result of the `JSON.stringify(htmlMarkup)` function
    call is what our `createHtmlMarkupStringOfTweetList()` method returns.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReactDOMServer.renderToStaticMarkup()`函数产生的结果HTML字符串存储在`htmlString`变量中。然后，我们创建一个新的`htmlMarkup`对象，其`html`属性引用了我们的`htmlString`变量。最后，我们使用`JSON.stringify()`函数将我们的`htmlMarkup`
    JavaScript对象转换为JSON字符串。`JSON.stringify(htmlMarkup)`函数调用的结果就是我们的`createHtmlMarkupStringOfTweetList()`方法返回的内容。'
- en: This method demonstrates how flexible React components are; you can use the
    same React components to render the DOM elements as well as produce a string of
    HTML markup that can be passed to a third-party API.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法展示了React组件有多么灵活；你可以使用相同的React组件来渲染DOM元素，也可以生成一个HTML标记字符串，可以传递给第三方API。
- en: Another interesting observation that one can make is the use of JSX syntax outside
    a `render()` method. In fact, you can use JSX anywhere in your source file, even
    outside of component class declarations.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的观察是在`render()`方法之外使用JSX语法。事实上，你可以在源文件的任何地方使用JSX，甚至在组件类声明之外。
- en: 'Let''s take a closer look at what the `Collection` component returns when our
    collection is *not* empty:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下当我们的集合*不*为空时，`Collection`组件返回了什么：
- en: '[PRE25]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We wrap the `CollectionControls` and `TweetList` components in the `<div>` element
    because React allows only one root element. Let's take a look at each component
    and discuss its properties.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`CollectionControls`和`TweetList`组件包裹在`<div>`元素中，因为React只允许一个根元素。让我们看看每个组件并讨论它的属性。
- en: 'We pass the following three properties to the `CollectionControls` component:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以下三个属性传递给`CollectionControls`组件：
- en: The `numberOfTweetsInCollection` property references the current number of tweets
    in our collection.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numberOfTweetsInCollection`属性引用了我们集合中当前的推文数量。'
- en: The `htmlMarkup` property references a string of HTML markup that we produce
    in this component using the `createHtmlMarkupStringOfTweetList()` method.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`htmlMarkup`属性引用了我们在这个组件中使用`createHtmlMarkupStringOfTweetList()`方法产生的HTML标记字符串。'
- en: The `onRemoveAllTweetsFromCollection` property references a function that removes
    all the tweets from our collection. This function is implemented in the `Application`
    component and discussed in [Chapter 5](ch05.html "Chapter 5. Making Your React
    Components Reactive"), *Making Your React Components Reactive*.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRemoveAllTweetsFromCollection`属性引用了一个从我们的集合中移除所有推文的函数。这个函数是在`Application`组件中实现的，并在[第5章](ch05.html
    "第5章。使你的React组件响应式")中讨论，*使你的React组件响应式*。'
- en: 'We pass these two properties to the `TweetList` component:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这两个属性传递给`TweetList`组件：
- en: The `tweets` property references tweets passed from a parent `Application` component.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tweets`属性引用了从父`Application`组件传递的tweets。'
- en: The `onRemoveTweetFromCollection` property references a function that removes
    a tweet from a collection of tweets that we store in the `Application` component's
    state. We have already discussed this function in [Chapter 5](ch05.html "Chapter 5. Making
    Your React Components Reactive"), *Making Your React Components Reactive*.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRemoveTweetFromCollection`属性引用了一个函数，该函数从我们在`Application`组件的状态中存储的一组tweets中移除一个tweet。我们已经在[第5章](ch05.html
    "第5章。使您的React组件响应式")中讨论过这个函数，*使您的React组件响应式*。'
- en: And that's our `Collection` component.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的`Collection`组件。
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the updating methods of the lifecycle of
    a component. We also discussed how to validate the component properties and set
    default property values. We also made good progress with our Snapterest application;
    we created and discussed the `Header`, `Tweet`, and `Collection` components.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了组件生命周期的更新方法。我们还讨论了如何验证组件属性并设置默认属性值。我们还在我们的Snapterest应用程序中取得了良好的进展；我们创建并讨论了`Header`，`Tweet`和`Collection`组件。
- en: In the next chapter, we'll focus on building more complex React components and
    finish building our Snapterest application!
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于构建更复杂的React组件，并完成构建我们的Snapterest应用程序！
