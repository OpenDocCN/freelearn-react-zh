- en: Authentication with Firebase
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Firebase进行认证
- en: In the previous chapter, we learned about how we can integrate Firebase with
    ReactJS and how we can create a component in JSX. We also saw how we can interact
    with DOM elements to get the `onSubmit` form values and send them to the Firebase
    database to store and sync the form data in the cloud. React uses a fast, internal,
    synthetic DOM to perform to diffs and compute the most efficient DOM mutation
    for you where your component actively lives.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何将Firebase与ReactJS集成，以及如何在JSX中创建组件。我们还看到了如何与DOM元素交互以获取`onSubmit`表单值，并将其发送到Firebase数据库中以在云中存储和同步表单数据。React使用快速、内部的合成DOM来执行差异，并为您计算最有效的DOM变化，其中您的组件活动地存在。
- en: In this chapter, we'll create a `login` component with React and JSX to secure
    our helpdesk application with the Firebase authentication feature that allows
    only authorized users to view and add a new ticket.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用React和JSX创建一个`login`组件，以使用Firebase认证功能来保护我们的帮助台应用程序，该功能只允许授权用户查看和添加新的工单。
- en: 'Here''s a list of the points that we''ll focus on this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章我们将重点关注的内容列表：
- en: React and Firebase setup with Node.js
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js进行React和Firebase设置
- en: Composite component with React and JSX
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React和JSX创建复合组件
- en: Firebase Authentication Configuration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase认证配置
- en: Custom Authentication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义认证
- en: Third-Party Authentication with Facebook and Google
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Facebook和Google进行第三方认证
- en: React and Firebase setup with Node.Js
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js进行React和Firebase设置
- en: 'Earlier, we created a React application with plain JavaScript; now we need
    to do the same with React and Firebase setup with using node. For this, we must
    have Node.js and `npm` installed in our system; if not, first download the Node.js
    from [https://nodejs.org/en/download/](https://nodejs.org/en/download/). Once
    you are done with the installation, run the following command to ensure that node
    and `npm` are installed properly:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们使用纯JavaScript创建了一个React应用程序；现在我们需要使用React和Firebase设置来使用node做同样的事情。为此，我们必须在系统中安装Node.js和`npm`；如果没有，请先从[https://nodejs.org/en/download/](https://nodejs.org/en/download/)下载Node.js。安装完成后，运行以下命令以确保node和`npm`已正确安装：
- en: 'For node, use this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于node，使用以下命令：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For `npm`, use the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`npm`，使用以下命令：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the command should be as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出应该如下所示：
- en: '![](Images/c9177530-5920-4bb6-a7c5-c0db7e000ac3.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c9177530-5920-4bb6-a7c5-c0db7e000ac3.png)'
- en: 'Now we need to install the `create-react-app` module, which provides the initial
    and default setup, and gives us a quick start to the React app. Run the following
    command in your CMD, and it will install the `create-react-app` module globally (that
    is, with `-g` or `--global` appended to the command):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要安装`create-react-app`模块，它提供了初始和默认设置，并让我们快速启动React应用程序。在CMD中运行以下命令，它将全局安装`create-react-app`模块（即在命令后加上`-g`或`--global`）：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the installation is done, run the next command in your local directory
    where we need to create a project; that will generate the quick start project
    for React with no build configuration:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，在需要创建项目的本地目录中运行下一个命令；这将为React生成无需构建配置的快速启动项目：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is how our folder structure looks after the installation is done:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们的文件夹结构如下所示：
- en: '![](Images/14f5b27a-0d25-48c3-bced-3c36f661653d.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/14f5b27a-0d25-48c3-bced-3c36f661653d.png)'
- en: Here, we are done with the setup of React; now, we install the `firebase npm`
    package and integrate our existing application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经完成了React的设置；现在，我们安装`firebase npm`包并集成我们现有的应用程序。
- en: 'Run the following command to install the `firebase npm` package:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令安装`firebase npm`包：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After installing firebase, create a folder called firebase inside the `src`
    folder.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 安装firebase后，在`src`文件夹内创建一个名为firebase的文件夹。
- en: 'In the `src` folder, create a file called `firebase-config.js`, which will
    host the configuration details of our project:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src`文件夹中，创建一个名为`firebase-config.js`的文件，其中将托管我们项目的配置详细信息：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Similarly, we need to integrate our existing component view ticket and `addTicket`
    in the node using the import and export keywords, and using the `npm` command,
    we need to install React and firebase modules and their dependencies.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们需要在节点中集成我们现有的组件视图票和`addTicket`，使用导入和导出关键字，并使用`npm`命令，我们需要安装React和firebase模块及其依赖项。
- en: 'This how your `package.json` should look like:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的`package.json`应该看起来的样子：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Also, this is how the application folder structure looks after integrating
    the existing application:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在集成现有应用程序后，应用程序文件夹结构如下所示：
- en: '![](Images/fca7a632-68f0-47ec-b404-0be0a1903c43.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fca7a632-68f0-47ec-b404-0be0a1903c43.png)'
- en: Firebase configuration for authentication
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于身份验证的Firebase配置
- en: Firebase Authentication is a very impressive feature for granting read/write
    access to your users via security rules. We haven't covered or added security
    rules in our helpdesk application. Firebase gives us the ability to authenticate
    with its own email/password and OAuth 2 integrations for Google, Facebook, Twitter,
    and GitHub. We'll also integrate our own auth system with Firebase to give access
    to the helpdesk application and allow the user to create an account on our systems.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase身份验证是一个非常令人印象深刻的功能，可以通过安全规则授予用户读/写访问权限。我们还没有在我们的帮助台应用程序中涵盖或添加安全规则。Firebase让我们能够使用其自己的电子邮件/密码和OAuth
    2集成来进行Google、Facebook、Twitter和GitHub的认证。我们还将把我们自己的身份验证系统与Firebase集成，以便让用户访问帮助台应用程序，并允许用户在我们的系统上创建帐户。
- en: 'Let''s take a look at the list of firebase providers for authentication and
    perform the following steps to enable Firebase authentication for our application:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看用于身份验证的Firebase提供程序列表，并执行以下步骤来为我们的应用程序启用Firebase身份验证：
- en: Open [http://firebase.google.com](http://firebase.google.com) and log in with
    your credentials
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开[http://firebase.google.com](http://firebase.google.com)并使用您的凭据登录
- en: 'Click on the Authentication option inside the DEVELOP tab on the left section:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧的DEVELOP选项卡内的身份验证选项：
- en: '![](Images/36b9e9a4-e023-43e0-97f8-e40802f235a0.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/36b9e9a4-e023-43e0-97f8-e40802f235a0.png)'
- en: 'In the preceding screenshot, if you can see, we have four tabs that are available
    in the authentication section, and we have enabled the provider''s authentication
    with the custom Email/Password option, which we can add to the user''s tab and
    Google authentication:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，如果您能看到，我们在身份验证部分有四个可用的选项卡，并且我们已经启用了提供商的身份验证，其中包括自定义的电子邮件/密码选项，我们可以添加到用户选项卡和Google身份验证。
- en: 'Users: Here, we can manage and add multiple users'' email IDs and passwords
    to authenticate with a variety of providers without writing any server-side code.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户：在这里，我们可以管理并添加多个用户的电子邮件ID和密码，以便使用各种提供程序进行身份验证，而无需编写任何服务器端代码。
- en: 'Sign-in Method: In this section, we can see the list of providers that are
    available in firebase. We can also manage the authorized domain, preventing the
    user from using the same email address and sign-in quota.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录方式：在此部分，我们可以看到Firebase中可用的提供程序列表。我们还可以管理授权域，防止用户使用相同的电子邮件地址和登录配额。
- en: 'Templates: This feature allows us to customize the email templates sent by
    firebase when users sign up with email and password. We can also customize the
    template for Password reset, Email address change, and SMS verification.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板：此功能允许我们自定义Firebase发送的电子邮件模板，当用户使用电子邮件和密码注册时。我们还可以自定义密码重置、电子邮件地址更改和短信验证的模板。
- en: 'In this chapter, we''ll cover these three authentications:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下三种身份验证方式：
- en: Facebook
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脸书
- en: Google
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌
- en: Email/password
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件/密码
- en: Authentication with Facebook
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Facebook进行身份验证
- en: 'To add a Facebook authentication to our helpdesk application, you need to create
    an account with Facebook if you don''t already have it. Otherwise, we need to
    log in to the Facebook developer forum at [https://developers.facebook.com/apps](https://developers.facebook.com/apps).
    Once we have logged in, it shows the list of apps and an Add a New App button
    to create a new app ID for authentication. Take a look at this for reference:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要向我们的帮助台应用程序添加Facebook身份验证，如果您还没有Facebook帐户，您需要在Facebook上创建一个帐户。否则，我们需要登录到Facebook开发者论坛[https://developers.facebook.com/apps](https://developers.facebook.com/apps)。一旦我们登录，它会显示应用程序列表和一个“添加新应用程序”按钮，用于创建身份验证的新应用程序ID。参考以下内容：
- en: '![](Images/cd96aa89-2743-46cb-b29b-68d3b7c1474f.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cd96aa89-2743-46cb-b29b-68d3b7c1474f.png)'
- en: 'Click on the Add a New App button; it shows the popup to add the name of the
    application. Then, click on Create App Id that will redirect you to the dashboard
    of our application:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“添加新应用程序”按钮；它会显示弹出窗口以添加应用程序的名称。然后，点击“创建应用程序ID”，它会将您重定向到我们应用程序的仪表板：
- en: '![](Images/6176e422-b29a-428d-be05-13d79bf80418.png)This is a screenshot of
    Facebook developer application dashboard. The Purpose of the image is just to
    show the list of APIs or Products provided by Facebook to integrate with any web
    application.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/6176e422-b29a-428d-be05-13d79bf80418.png)这是Facebook开发者应用程序仪表板的屏幕截图。图像的目的只是显示Facebook提供的API或产品列表，以与任何Web应用程序集成。'
- en: 'For now, we need to select Facebook Login to set up:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要选择Facebook登录进行设置：
- en: '![](Images/621e6610-baf7-496c-8307-ec7377a94f9a.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/621e6610-baf7-496c-8307-ec7377a94f9a.png)'
- en: If you can see the preceding screenshot, we need to set up for client OAuth.
    For this, we first need to enable the Embedded Browser OAuth Login feature to
    control the redirect for the OAuth login, and then copy the valid OAuth redirect
    URLs, which we can get when we enable the Facebook provider in Firebase.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能看到上述的屏幕截图，我们需要为客户端OAuth设置。为此，我们首先需要启用嵌入式浏览器OAuth登录功能以控制OAuth登录的重定向，然后复制有效的OAuth重定向URL，当我们在Firebase中启用Facebook提供程序时，我们可以获得它。
- en: 'To enable Facebook authentication in to the Firebase, we need to copy the **App
    ID** and **App Secret** from the Facebook app dashboard:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Firebase中启用Facebook身份验证，我们需要从Facebook应用程序仪表板复制**应用程序ID**和**应用程序密钥**：
- en: '![](Images/46baa329-f0cf-4c14-a87a-e0e7a78d8b24.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/46baa329-f0cf-4c14-a87a-e0e7a78d8b24.png)'
- en: 'Then, put those copied values in firebase input fields, copy the redirect URI,
    and paste it to Client OAuth Settings. Also, enable the facebook authentication
    and then click on the SAVE button, as illustrated here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将这些复制的值放入firebase输入字段中，复制重定向URI，并将其粘贴到客户端OAuth设置中。还要启用Facebook身份验证，然后点击“保存”按钮，如下所示：
- en: '![](Images/9d6bcc9f-bde3-4c45-9f71-cc4840a94f9b.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9d6bcc9f-bde3-4c45-9f71-cc4840a94f9b.png)'
- en: This is the last thing we need to do in the Facebook developer forum and firebase
    for Facebook authentication.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在Facebook开发者论坛和Firebase中进行Facebook身份验证的最后一件事情。
- en: 'Click on SAVE, and note that the status of provider is enabled now:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存，并注意提供程序的状态现在已启用：
- en: '![](Images/a92cc442-34ba-4446-9ea7-6ffe92b50130.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a92cc442-34ba-4446-9ea7-6ffe92b50130.png)'
- en: 'Now, click on the Database on the left-hand side of the section, and go to
    the RULES panel; it should look something like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击部分左侧的数据库，转到规则面板；它应该看起来像这样：
- en: '![](Images/cf946010-0267-4b9d-9295-59470d4f2885.png)The purpose of the image
    is to show the list of tabs under the Realtime Database section and under the
    Rules tab. Here, we can add the security rules for our database to secure our
    data and with the help of SIMULATOR we can verify whether it''s working as expected
    or not.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/cf946010-0267-4b9d-9295-59470d4f2885.png)图像的目的是显示实时数据库部分和规则选项卡下的选项卡列表。在这里，我们可以添加数据库的安全规则来保护我们的数据，并借助模拟器来验证它是否按预期工作。'
- en: 'Earlier in our application, everyone had the rights to our application and
    the database to read and write data. Now, we will change the preceding rule configuration
    so that only authorized users can access the application and write data to our
    database. Take a look at the given code and publish the changes:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，以前每个人都有权访问我们的应用程序和数据库以读取和写入数据。现在，我们将更改前面的规则配置，以便只有经过授权的用户才能访问应用程序并向我们的数据库写入数据。查看给定的代码并发布更改：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Creating a login form with React for authentication
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React创建登录表单进行身份验证
- en: As we have done with the authentication configuration for Firebase and Facebook
    and enabled the features for other providers, now we'll create a login form in
    react to secure the application that always validates whether the user logged
    in or not; it will redirect the user to the login page. So let's create a login
    page and also configure the React routing to redirect he user based on the path
    URL.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们为Firebase和Facebook的身份验证配置以及启用其他提供程序的功能一样，现在我们将在react中创建一个登录表单，以确保应用程序始终验证用户是否已登录；它将重定向用户到登录页面。因此，让我们创建一个登录页面，并配置React路由以根据路径URL重定向用户。
- en: 'Open `firebase-config.js` from the firebase folder and export the following
    objects with different providers so that we can access those objects across the
    application:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 打开firebase文件夹中的`firebase-config.js`并导出以下不同提供程序的对象，以便我们可以在整个应用程序中访问这些对象：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, `new firebase.auth.GoogleAuthProvider()` will provide
    us with the way to authenticate the user to Google API.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`new firebase.auth.GoogleAuthProvider()`将为我们提供通过Google API对用户进行身份验证的方法。
- en: Similarly, new `firebase.auth.FacebookAuthProvider()` will provide us with the
    way to authenticate the user with Facebook API.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`new firebase.auth.FacebookAuthProvider()`将为我们提供通过Facebook API对用户进行身份验证的方法。
- en: 'Open `app.js` and add the following code into constructor to initialize the
    state of the application:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`app.js`并将以下代码添加到构造函数中以初始化应用程序的状态：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we set the default value of authenticated to be false, because it's the
    initial state of the application and the user has not yet authenticated with Firebase;
    the default value of data is empty on the initial state of the component. We will
    change those states as the user logs in.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将authenticated的默认值设置为false，因为这是应用程序的初始状态，用户尚未通过Firebase进行身份验证；数据的默认值在组件的初始状态下为空。当用户登录时，我们将更改这些状态。
- en: 'First, let''s create the `Login` component in `login.js` and set the initial
    state of that component in `constructor()`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在`login.js`中创建`Login`组件，并在`constructor()`中设置该组件的初始状态：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We have set the default value of redirect `false` on the initial state, but
    that will change whenever a user logs in and out:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在初始状态下将重定向的默认值设置为`false`，但每当用户登录和退出时，它都会更改：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the `render` method, we will check the state and redirect the user to a different
    route `<Redirect>`. It will override the current route in the history stack, like
    server-side redirects (HTTP 3xx) do.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`render`方法中，我们将检查状态并将用户重定向到不同的路由`<Redirect>`。它将覆盖历史堆栈中的当前路由，就像服务器端重定向（HTTP
    3xx）一样。
- en: 'Here''s a list of attributes that we can use with the `Redirect` component:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们可以与`Redirect`组件一起使用的属性列表：
- en: '`to:String`: A redirect URL that we have also used.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to:String`：我们还使用的重定向URL。'
- en: '`to:Object`: A location URL with parameters and other configs, such as state.
    Consider this example:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to:Object`：带有参数和其他配置（例如状态）的位置URL。考虑以下示例：'
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`: bool`: When it''s true, redirecting will push a new entry onto the history
    instead of replacing the current one.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`: bool`：当为true时，重定向将在历史记录中推送一个新条目，而不是替换当前条目。'
- en: '`from: string`: A URL to redirect from the old URL. This can only be used to
    match a location inside of a `<Switch>`. Consider this example:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from: string`：要重定向的旧URL。这只能用于匹配`<Switch>`内的位置。考虑这个例子：'
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: All the preceding `<Redirect>` features are only available in React Router V4.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述的`<Redirect>`功能只在React Router V4中可用。
- en: 'We have added the JSX for our login form and bound the methods and ref attribute
    to access the form values. We have also added the buttons for Facebook and Google
    authentication. Just look at the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为我们的登录表单添加了JSX，并绑定了方法和ref属性以访问表单值。我们还添加了Facebook和Google身份验证的按钮。只需看看以下代码：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In `app.js`, we have configured a router like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.js`中，我们已经配置了一个路由器，就像这样：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding code, we are using React Router version 4, which is a fully
    rewritten router for react package. In the previous version of React router, they
    have used a very difficult configuration, which will be difficult to understand,
    and also, we need to create a separate component to manage the layout. In Router
    V4, everything works as a component.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用的是React Router版本4，这是一个完全重写的用于react包的路由器。在以前的React路由器版本中，他们使用了非常困难的配置，这将很难理解，而且我们还需要创建一个单独的组件来管理布局。在路由器V4中，一切都作为一个组件工作。
- en: In React router V4, we need to import from react-router-dom, not from react-router,
    as we do in V3\. The `<Router>` component and all other subcomponents get rendered
    if the route path matches.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在React路由器V4中，我们需要从react-router-dom中导入，而不是从V3中的react-router。如果路由路径匹配，`<Router>`组件和所有其他子组件都会被渲染。
- en: Using the `<React.Fragment>` tag, we can wrap any JSX component without adding
    another node into the DOM.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`<React.Fragment>`标签，我们可以包装任何JSX组件，而不会在DOM中添加另一个节点。
- en: In V4 react router, there is no more `<IndexRoute>`; using `<Route exact>` will
    do the same thing.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在V4 react路由器中，不再有`<IndexRoute>`；使用`<Route exact>`将会做同样的事情。
- en: 'Now we''ll change the header component where we have navigation and add the
    link to login and logout:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更改包含导航的标题组件，并添加登录和注销链接：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'It''s necessary to use this if we are working with the React router. Let''s
    add `<link>` in our navigation instead of the `<a>` tag and replace the `href`
    attribute with `to`. In V4, we can also use `<NavLink>`; it works the same as
    `<Link>`, but gives us the way to add extra styling. Look at this code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用React路由器，这是必要的。让我们在导航中添加`<link>`而不是`<a>`标签，并用`to`替换`href`属性。在V4中，我们还可以使用`<NavLink>`；它的工作方式与`<Link>`相同，但可以添加额外的样式。看看这段代码：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Based on the authentication, we'll update the navigation with login and a logout
    link.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 根据身份验证，我们将更新导航以显示登录和注销链接。
- en: 'Start the server again by running the following command in Command Prompt:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在命令提示符中运行以下命令再次启动服务器：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once your server is started, open the browser and take a quick look:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器启动，打开浏览器快速查看：
- en: '![](Images/f45b9ea6-6056-4209-9ebf-d5e7fed704ba.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f45b9ea6-6056-4209-9ebf-d5e7fed704ba.png)'
- en: 'If you just take a look at the preceding screen excerpt and note the address
    bar, I have tried to open another URL to view the tickets, but it''s not showing
    anything except header login link; so now, if we click on Login, it will render
    the login form. Refer to the following screenshot; it should look like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只看一下上面的屏幕摘录并注意地址栏，我尝试打开另一个URL来查看票据，但除了标题登录链接外，什么都没有显示；所以现在，如果我们点击登录，它将呈现登录表单。请参考以下截图；它应该是这样的：
- en: '![](Images/b8432ea6-e507-4764-bbca-61c82fcc3060.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b8432ea6-e507-4764-bbca-61c82fcc3060.png)'
- en: It's amazing that our login form looks great, as expected.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，我们的登录表单看起来很棒，正如预期的那样。
- en: For more information about react router, you can go through [https://reacttraining.com/react-router/web/api](https://reacttraining.com/react-router/web/api).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有关react路由器的更多信息，您可以查看[https://reacttraining.com/react-router/web/api](https://reacttraining.com/react-router/web/api)。
- en: Authentication with Facebook
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Facebook进行身份验证
- en: 'The `onClick` of each of these buttons will point to three functions that will
    authenticate the user. The Facebook authentication method, which will handle our
    authentication with Firebase, will look like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 每个按钮的`onClick`将指向三个函数，这些函数将对用户进行身份验证。Facebook身份验证方法将处理我们与Firebase的身份验证，如下所示：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, we call the `signInWithPopup()` method from the firebase `auth` module
    and pass the facebook provider.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从firebase `auth`模块调用`signInWithPopup()`方法，并传递facebook提供程序。
- en: To display the error messages on UI, we are using React Toaster module and passing
    those messages into it (don't forget to install and import the React Toaster module
    before using it). We also need to bind `authWithFacebook()` methods into the constructor.`npm
    install --save react-toastr-basic`
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在UI上显示错误消息，我们使用React Toaster模块，并将这些消息传递给它（在使用之前不要忘记安装和导入React Toaster模块）。我们还需要将`authWithFacebook()`方法绑定到构造函数中。`npm
    install --save react-toastr-basic`
- en: '`// In app.js import the container`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`//在app.js中导入容器`'
- en: '`import ToastrContainer from ''react-toastr-basic'';`'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从' react-toastr-basic '导入ToastrContainer;
- en: '`//Inside the render method`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`//在render方法内部`'
- en: '`<ToastrContainer />`'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`<ToastrContainer />`'
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, when we click on the Login with Facebook button, it will open a popup
    that gives us the option to sign in with a Facebook account, as shown:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们点击“使用Facebook登录”按钮时，它将打开一个弹出窗口，让我们选择使用Facebook帐户登录，如下所示：
- en: '![](Images/f88be669-622c-4468-838c-7dd194946679.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: ！[](Images/f88be669-622c-4468-838c-7dd194946679.png)
- en: '`signInWithPopup()` has a promise API that allows us to call `.then()` on it
    and pass in a callback. This callback will be provided with a result object that
    contains, among other things, an object called `user` that has all the information
    about the user who has just successfully signed in—including their name, email,
    and user photo URL. We will store this object inside of the state using `setState()`
    and display the name, email, and photo of the user on UI:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`signInWithPopup()`具有一个promise API，允许我们在其上调用`.then()`并传递回调。此回调将提供一个包含用户的所有信息的名为`user`的对象，其中包括他们刚刚成功登录的姓名、电子邮件和用户照片URL。我们将使用`setState()`将此对象存储在状态中，并在UI上显示用户的姓名、电子邮件和照片：'
- en: '![](Images/c4e5d1f7-b041-4aa4-886e-6efcd4205989.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: ！[](Images/c4e5d1f7-b041-4aa4-886e-6efcd4205989.png)
- en: Authentication with Google
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Google进行身份验证
- en: 'In the same way, we can configure Google authentication in our application;
    just add the following code into the `authWithGoogle()` method, and it will open
    the popup for login with Google:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以在我们的应用程序中配置Google身份验证；只需将以下代码添加到`authWithGoogle()`方法中，它将打开用于使用Google登录的弹出窗口：
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As you can see, I have added the additional OAuth 2.0 scopes that we want to
    request from the auth provider. To add a scope, call add the scope. We can also
    define the language code with `firebase.auth().languageCode = ''pt''`;. If we
    want to send a specific custom parameter with the request, we can call the `setCustomParamter()`
    method. Consider this example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我已添加了我们想要从身份验证提供程序请求的额外OAuth 2.0范围。要添加范围，请调用添加范围。我们还可以使用`firebase.auth().languageCode
    = 'pt'`来定义语言代码。如果我们想要在请求中发送特定的自定义参数，可以调用`setCustomParamter()`方法。考虑这个例子：
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'So, once you click on the Login with Google button, it will trigger the popup
    to authenticate with Google:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一旦您点击“使用Google登录”按钮，它将触发弹出窗口以与Google进行身份验证：
- en: '![](Images/6f3179e5-4f9f-4951-b3af-5182f374eeee.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: ！[](Images/6f3179e5-4f9f-4951-b3af-5182f374eeee.png)
- en: 'So if you are already logged in and try to log in with the same email ID with
    different providers, it throws errors, as illustrated:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您已经登录并尝试使用不同提供者的相同电子邮件ID登录，它会抛出错误，如下所示：
- en: '![](Images/a2cae460-9223-4599-86d8-64cb7b80c31e.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a2cae460-9223-4599-86d8-64cb7b80c31e.png)'
- en: Okay, so now let's see how we can handle these types of errors.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们看看如何处理这些类型的错误。
- en: Handling account exists errors
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理帐户存在的错误
- en: 'Consider that we have enabled the One account per email address option in firebase
    settings. As you can see in the preceding screenshot when we tried to log in with
    the provider (Google) with an email that already exists in firebase with a different
    provider (such as Facebook), it throws the mentioned error—`auth/account-exists-with-different-credential`—which
    we can see in the preceding screenshot. To handle this error and complete the
    sign into the selected provider, the user has to sign in first to the existing
    provider (Facebook) and then link to the former AuthCredential (with Google ID
    token). After rewriting the `authWithFacebook()` method, this is how our code
    looks:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们已经在firebase设置中启用了“每个电子邮件地址一个帐户”的选项。如前面的截图所示，当我们尝试使用提供者（Google）登录已经存在于firebase中的具有不同提供者（如Facebook）的电子邮件时，它会抛出上述错误——`auth/account-exists-with-different-credential`——我们可以在前面的截图中看到。为了处理这个错误并完成对所选提供者的登录，用户必须首先登录到现有的提供者（Facebook），然后链接到前面的AuthCredential（带有Google
    ID令牌）。重写`authWithFacebook()`方法后，我们的代码如下：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: To know more about the list of error codes, visit [https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signInWithPopup](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signInWithPopup).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多错误代码列表，请访问[https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signInWithPopup](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signInWithPopup)。
- en: Managing the Login across Refresh
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理刷新时的登录
- en: As of right now, every time we refresh the page, our application forgets that
    the user was already logged in. However, Firebase has an event listener—`onAuthStateChange()`—that
    can actually check every single time the application loads to see whether the
    authentication state is changed or not, whether the user was already signed in
    the last time they visited the app. If it's true, then you can automatically sign
    them back in.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，每次刷新页面时，我们的应用都会忘记用户已经登录。但是，Firebase有一个事件监听器——`onAuthStateChange()`——可以在应用加载时检查身份验证状态是否已更改，以及用户上次访问应用时是否已经登录。如果是，那么您可以自动将其重新登录。
- en: 'We''ll write this method inside our `componentDidMount()` in `app.js`. Just
    look at the following code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个方法写在`app.js`的`componentDidMount()`中。只需查看以下代码：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Also, in `componentWillUnmount()`, we will remove that listener to avoid memory
    leaks:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`componentWillUnmount()`中，我们将删除该监听器以避免内存泄漏：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now if you refresh the browser, it will not affect the state of the application;
    it remains the same if you already logged in.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您刷新浏览器，它不会影响应用程序的状态；如果您已经登录，它将保持不变。
- en: 'After logging in with Facebook API or any other, we need to display user information
    in the UI. For this, if you look at that the router component again, we are sending
    this user information into the `Home` component with `userInfo` props:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Facebook API或其他方式登录后，我们需要在UI中显示用户信息。为此，如果再次查看路由器组件，我们将使用`userInfo`属性将此用户信息发送到`Home`组件中：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `Home` component''s render method, we''ll iterate the `userInfo` props
    that hold the user data who successfully logged in to the system:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Home`组件的渲染方法中，我们将迭代包含成功登录到系统的用户数据的`userInfo`属性：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `Logout()` method, we will simply call the `signOut()` method from firebase
    auth; by using the Promise API, we remove the user data from our application''s
    state. With `this.state.data` now equal to null, the user will see the login link
    instead of the Logout button. It should look like this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Logout()`方法中，我们将简单地调用firebase auth中的`signOut()`方法；通过使用Promise API，我们从应用程序状态中删除用户数据。现在`this.state.data`等于null，用户将看到登录链接而不是注销按钮。它应该是这样的：
- en: '[PRE29]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Authentication with email and password
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用电子邮件和密码进行身份验证
- en: In Firebase, we can also integrate your own auth systems with Firebase Authentication
    to give users access to data without forcing them to create an account using third-party
    APIs of your existing systems. Firebase also allows for anonymous auth sessions,
    which are typically used to save small amounts of data while waiting for a client
    to authenticate with a permanent `auth` method. We can configure this anonymous
    session with last days, weeks, months, or even years until the user logs in with
    a permanent `login` method or clears their browser cache. For example, a shopping
    cart application can create an anonymous auth session for every user who adds
    something to their cart while doing a shopping. The shopping cart app will prompt
    the user to create an account for checkout; at that point, the cart will be persisted
    to the new user's account, and the anonymous session will be destroyed.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在Firebase中，我们还可以将您自己的身份验证系统与Firebase身份验证集成，以便用户可以访问数据，而无需强制他们使用现有系统的第三方API来创建帐户。Firebase还允许匿名身份验证会话，通常用于在等待客户端使用永久的`auth`方法进行身份验证时保存少量数据。我们可以配置这个匿名会话，直到用户使用永久的`login`方法登录或清除他们的浏览器缓存的最后几天、几周、几个月，甚至几年。例如，一个购物车应用程序可以为每个将商品添加到购物车的用户创建一个匿名身份验证会话。购物车应用程序将提示用户创建一个帐户以进行结账；在那时，购物车将被持久化到新用户的帐户，并且匿名会话将被销毁。
- en: Supported types of Auth state persistence
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持的身份验证状态持久性类型
- en: 'We can use one of the three types of the persistence that are available in
    firebase on specified Firebase Authentication `instance(.auth())` based on your
    application or user''s requirements:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据应用程序或用户的要求，在指定的Firebase身份验证`instance(.auth())`上使用三种持久性中的一种：
- en: '| **Auth instance** | **Value** | **Description** |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| **Auth实例** | **值** | **描述** |'
- en: '| `firebase.auth.Auth.Persistence.LOCAL` | ''local'' | It Indicates that the
    state will be persisted even if we closed the browser window or the activity is
    destroyed in React Native. For this, explicit sign out is needed to clear that
    state. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `firebase.auth.Auth.Persistence.LOCAL` | ''local'' | 它表示即使关闭浏览器窗口或在React
    Native中销毁活动，状态也将被持久化。为此，需要显式注销以清除该状态。'
- en: '| `firebase.auth.Auth.Persistence.SESSION` | ''session'' | In this scenario,
    the state will persist only to the current session or tab and will be cleared
    when the tab or window is closed in which the user has authenticated. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `firebase.auth.Auth.Persistence.SESSION` | ''session'' | 在这种情况下，状态将仅持续到当前会话或选项卡，并且在用户进行身份验证的选项卡或窗口关闭时将被清除。'
- en: '| `firebase.auth.Auth.Persistence.NONE` | ''none'' | When we specify this,
    it means that the state will be only stored in the memory and will be cleared
    when window or application is refreshed. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `firebase.auth.Auth.Persistence.NONE` | ''none'' | 当我们指定这个时，意味着状态只会存储在内存中，并且在窗口或应用程序刷新时将被清除。'
- en: 'Consider this example:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个例子：
- en: '[PRE30]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s create a function with the name of `authWithEmailPassword()` and add
    the following code to it:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`authWithEmailPassword()`的函数，并将以下代码添加到其中：
- en: '[PRE31]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding code, first, we are getting the values from the form. When
    the user clicks on the submit button, then with the help of `fetchProvidersForEmail(email)`,
    we are validating whether the email exists in our current firebase system; if
    not, it will create a new user using the `createUserWithEmailAndPassword()` method.
    If it returns true, then we will validate the password; if the user entered the
    wrong password, it will prompt the user with Wrong password, otherwise sign them
    in using the same method—`signInWithEmailAndPassword()`—and we'll update the state
    of the component by redirecting true.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，首先，我们从表单中获取值。当用户点击提交按钮时，借助`fetchProvidersForEmail(email)`，我们验证电子邮件是否存在于我们当前的firebase系统中；如果不存在，它将使用`createUserWithEmailAndPassword()`方法创建一个新用户。如果返回true，我们将验证密码；如果用户输入了错误的密码，它将提示用户输入错误的密码，否则使用相同的方法—`signInWithEmailAndPassword()`—登录他们，并通过重定向true来更新组件的状态。
- en: 'When we''ll create a new user in the `createUserWithEmailAndPassword()` method,
    it returns the following error code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在`createUserWithEmailAndPassword()`方法中创建新用户时，它会返回以下错误代码：
- en: auth/email-already-in-use
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: auth/email-already-in-use
- en: auth/invalid-email
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: auth/invalid-email
- en: auth/operation-not-allowed (if email/password accounts are not enabled in Firebase
    Console.)
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: auth/operation-not-allowed（如果在Firebase控制台中未启用电子邮件/密码帐户。）
- en: auth/weak-password (if the password is not strong enough.)
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: auth/weak-password（如果密码不够强大。）
- en: 'When we''ll fetch the provider based on the email with `fetchProvidersForEmail(email)`,
    then it returns the following error code:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`fetchProvidersForEmail(email)`基于电子邮件获取提供程序时，它会返回以下错误代码：
- en: auth/invalid-email (If a user entered the invalid email)
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: auth/invalid-email（如果用户输入了无效的电子邮件）
- en: To read the list of more auth methods and error codes, refer to [https://firebase.google.com/docs/reference/js/firebase.auth.Auth](https://firebase.google.com/docs/reference/js/firebase.auth.Auth).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多身份验证方法和错误代码的列表，请参考[https://firebase.google.com/docs/reference/js/firebase.auth.Auth](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)。
- en: 'We can also use the following firebase methods in our application to manipulate
    the user:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在我们的应用程序中使用以下firebase方法来操作用户：
- en: '[PRE32]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After successful login, we''ll be redirected to an application dashboard page,
    and we''ll be able to see the full navigation where we can add and view the tickets:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，我们将被重定向到应用程序仪表板页面，并且我们将能够看到完整的导航，可以添加和查看票务：
- en: '![](Images/5b2ac244-7041-48ac-9302-9098beb44cf0.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5b2ac244-7041-48ac-9302-9098beb44cf0.png)'
- en: 'Now if you click on the logout button, nothing will happen, because we have
    not yet created any `logout` component. So in the logout button, what we need
    to do is simply call the `signOut()` method of the firebase:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您点击注销按钮，将不会发生任何事情，因为我们还没有创建任何`logout`组件。因此，在注销按钮中，我们需要做的就是简单地调用firebase的`signOut()`方法：
- en: '[PRE33]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding code, we created a component and set the state based on the
    passing value in the component props (authenticated); then, inside component lifecycle
    hook method `componentWillMount()`, we called the `firebaseApp.auth().signout()`
    method that signs out the user redirects them to the login page, and removes the
    data from the state.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们创建了一个组件，并根据组件props中传递的值（authenticated）设置了状态；然后，在组件生命周期挂钩方法`componentWillMount()`中，我们调用了`firebaseApp.auth().signout()`方法，该方法登出用户并将其重定向到登录页面，并从状态中删除数据。
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how we can make our application secure from unknown
    users with the help of firebase authentication system. We also saw how we can
    configure the React -Firebase application in node environment as well as how to
    create a login form in React and integrate the Firebase Authentication Sign-in
    method in React, such as Google, Facebook, and Email/Password. Similarly, we can
    integrate the other Authentication sign-in methods in your application.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何借助Firebase的身份验证系统使我们的应用程序免受未知用户的侵害。我们还了解了如何在node环境中配置React-Firebase应用程序，以及如何在React中创建登录表单并集成Firebase身份验证的登录方法，如Google、Facebook和电子邮件/密码。同样，我们也可以在应用程序中集成其他身份验证登录方法。
- en: We also covered handling the authentication errors based on the firebase auth
    error codes that help us perform an action in the application. To `Persist` the
    auth state, we can use `firebaseApp.auth().setPersistence('session')`, the method
    that allows us to maintain the firebase auth state.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了根据Firebase身份验证错误代码处理身份验证错误的方法，这有助于我们在应用程序中执行操作。为了“持久化”身份验证状态，我们可以使用`firebaseApp.auth().setPersistence('session')`这个方法，它允许我们维护Firebase身份验证状态。
- en: In the next chapter, we will explore the power of Redux and create a realtime
    ticket booking application with React, Redux and Firebase.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索Redux的强大功能，并使用React、Redux和Firebase创建一个实时的订票应用程序。
