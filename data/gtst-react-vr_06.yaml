- en: Working with Poly and the Gon Family
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Poly和Gon家族合作
- en: 'When people that are just getting used to computer graphics see some of the
    first VR graphics, their first reaction is "*Oh no, not polygons!"* A friend of
    mine said this in exasperation, when looking at her first massively multiplayer
    online role play game. It wasn''t as low poly as *Money for Nothing,* but it was
    pretty close. *Money for Nothing* was one of the first music videos that used
    computer graphics and looked something like this:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当刚开始接触计算机图形的人看到一些最初的VR图形时，他们的第一反应是“哦，不是多边形！”我的一个朋友在看到她的第一个大型多人在线角色扮演游戏时，感到恼火时说了这句话。它并不像《Money
    for Nothing》那样低多边形，但它非常接近。《Money for Nothing》是第一个使用计算机图形并且看起来像这样的音乐视频之一：
- en: '![](Images/4b7e52a0-ee86-4846-9565-3bb646d51bac.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/4b7e52a0-ee86-4846-9565-3bb646d51bac.jpg)'
- en: Polygons are the best way to present real-time graphics. In this section, we
    will have to make a few of them! You may already be familiar with **Computer Aided**
    (**Design**/**Drafting**/**Drawing**) (**CAD**) software or Computer Modeling software;
    or you might be a complete newcomer. There are so many different CAD systems,
    we are going to use Blender, a freely available/open source CAD system to illustrate
    some of the important ways to bring interesting objects  into Virtual Reality.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 多边形是呈现实时图形的最佳方式。在本节中，我们将不得不制作其中的一些！您可能已经熟悉**计算机辅助**（设计/草图/绘图）（CAD）软件或计算机建模软件；或者您可能是一个完全的新手。有很多不同的CAD系统，我们将使用Blender，一个免费的可用/开源CAD系统，来说明带入虚拟现实中一些重要的方式。
- en: 'In this chapter, you will learn:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学到：
- en: How to perform basic polygon modeling
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何执行基本多边形建模
- en: How to export a model in OBJ form from Blender
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从Blender中以OBJ形式导出模型
- en: How to apply basic UV texture mapping
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何应用基本UV纹理映射
- en: How to export texture maps
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何导出纹理贴图
- en: How to create an MTL file to properly show real-time OBJ texturing and materials
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建MTL文件以正确显示实时OBJ纹理和材质
- en: Polygons and why we like them
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多边形及我们为什么喜欢它们
- en: 'I think the confusion with *"Oh no, not polygons"* is that polygons, unless
    they are elevated to an art form, as in the preceding music video, can be a really
    crude way of creating something. For example, this does not look much like an
    apple:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为对“哦，不是多边形”感到困惑的原因是，多边形，除非它们被提升到艺术形式，如前面的音乐视频中那样，否则可能是一种创建东西的非常粗糙的方式。例如，这看起来并不像一个苹果：
- en: '![](Images/d544809d-1289-4dab-bfd9-cf2f02312be5.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d544809d-1289-4dab-bfd9-cf2f02312be5.jpg)'
- en: Many CAD systems do have other representations such as **Non**-**Uniform Rational
    B**-**Spline** (**NURBS**), which is a type of curve, or primitives that essentially
    have no polygons but are what they represent. A sphere, for example, may be arbitrarily
    smooth with no facets or flat areas.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 许多CAD系统确实有其他表示形式，如**非**均匀有理B样条（NURBS），这是一种曲线，或者基本上没有多边形但是它们所代表的原始图形。例如，一个球可能是任意光滑的，没有面或平坦区域。
- en: The world would be boring if everything was just cubes and spheres. Unless it
    was Minecraft, then it would be pretty cool. Aside from Minecraft, many CAD systems
    build up more interesting objects via **Constructive Solid Geometry** (**CSG**)
    to drill out and add the basic primitives to other primitives to make more complex
    objects.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切都是立方体和球体，世界将会很无聊。除非是Minecraft，那将会很酷。除了Minecraft，许多CAD系统通过**构造实体几何**（CSG）来构建更有趣的对象，通过在其他原始图形上钻孔和添加基本原始图形来制作更复杂的对象。
- en: Why doesn't VR use some of these techniques?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么VR不使用一些这些技术？
- en: Generally speaking, they are slow. Something has to convert the precise, accurate
    mathematical models into something that video hardware can display. Some video
    cards and advanced APIs can build objects out of things other than polygons, calculate
    smooth curves, and the like, but by far the most common workflow in the VR and
    game industry revolves around polygons and textures.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，它们很慢。需要有东西将精确、准确的数学模型转换成视频硬件可以显示的东西。一些视频卡和高级API可以用其他东西构建对象，计算平滑曲线等等，但迄今为止，在VR和游戏行业中最常见的工作流程仍围绕着多边形和纹理。
- en: We can, therefore, take polygons as a given. Modern video cards, and high-end
    cell phones have quite a lot of capability when it comes to rendering objects,
    although to maintain frame rates for VR, we do have to pay attention to the number
    of polygons.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以将多边形视为一种给定的形式。现代视频卡和高端手机在渲染对象时具有相当多的能力，尽管为了保持VR的帧率，我们确实需要注意多边形的数量。
- en: 'The good news is that, you can make very good looking VR objects for a reasonable
    low number of polygons. For example, take a look at our apple. The low resolution
    version just shown has just 44 faces (polygons) and 24 vertices (points). If we
    increase the number of polygons to just 492, it looks significantly better:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，你可以用相当低的多边形数量制作出非常好看的VR对象。例如，看看我们的苹果。刚刚显示的低分辨率版本只有44个面（多边形）和24个顶点（点）。如果我们将多边形数量增加到492个，它看起来会好得多：
- en: '![](Images/7f6942ba-3cca-400f-b13a-d64b9e730552.png)In these examples, I''m
    using Blender version, v2.79\. You can use any CAD program that will read and
    write to OBJ files, which is nearly all of them. I use Blender because it is free,
    so anyone reading this book can follow along without worrying about purchasing
    an expensive CAD program.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/7f6942ba-3cca-400f-b13a-d64b9e730552.png)在这些例子中，我使用的是Blender版本v2.79。你可以使用任何能读写OBJ文件的CAD程序，几乎所有的CAD程序都可以。我使用Blender是因为它是免费的，所以任何读者都可以跟着学习，而不用担心购买昂贵的CAD程序。'
- en: Blender is very full featured and can certainly be used for production work,
    although describing every possible CAD system and recommending one is out of the
    scope of this book (and I never like to discuss religion publicly!). From the
    preceding model though, you can see the limits of Blender; this model had rather
    strange **texture mapping** and reducing the resolution too much created some
    weird stripping on the texture map.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Blender非常功能齐全，当然可以用于生产工作，尽管描述每种可能的CAD系统并推荐其中一种超出了本书的范围（而且我从不喜欢公开讨论宗教！）。不过从前面的模型中，你可以看到Blender的局限性；这个模型有相当奇怪的**纹理映射**，而且分辨率降低太多会在纹理贴图上产生一些奇怪的条纹。
- en: 'Of course, we could just throw polygons at the system like we are running on
    a PC from 2030, nearly 512 times faster than what we have now, if Moore''s law
    holds out. Our apple would look like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以像在2030年的PC上运行一样向系统投放多边形，几乎比我们现在拥有的快512倍，如果摩尔定律成立的话。我们的苹果会看起来像这样：
- en: '![](Images/64396fd3-0e9c-42a9-a7a6-36959e3393a1.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/64396fd3-0e9c-42a9-a7a6-36959e3393a1.png)'
- en: It is really not that much different to the medium resolution apple, although
    those weird texture lines have disappeared. It looks pretty good (and this is
    not a full detail render). To make the lower resolution polygons, I did a quick
    decimation in Blender. Decimate is Blender's way of taking a model with a lot
    of polygons and reducing it to fewer, and is a very handy way to take very complicated
    models and make them Virtual Reality ready. Performing a decimate by hand, and
    applying new textures to the model, would probably get rid of the seams.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这与中等分辨率的苹果并没有太大的不同，尽管那些奇怪的纹理线已经消失了。看起来相当不错（这不是一个完整的细节渲染）。为了使分辨率更低的多边形，我在Blender中进行了快速的减面。减面是Blender的一种方式，可以将具有大量多边形的模型减少到更少的多边形，这是一种非常方便的方式，可以将非常复杂的模型制作成虚拟现实准备。手动进行减面，并对模型应用新的纹理，可能会消除接缝。
- en: For advanced modelers, you can use a low polygon version of your model, in conjunction
    with a high polygon version, to make a normal map, which unlike a bump map, allows
    the model to look like it has more polygons than it really does.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于高级建模者，你可以使用你的模型的低多边形版本，结合高多边形版本，制作一个法线贴图，这与凹凸贴图不同，可以让模型看起来比实际多边形更多。
- en: You may need to experiment some with normal mapping; it really depends on the
    browser and model.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要尝试一些法线贴图；这真的取决于浏览器和模型。
- en: Now, you might be thinking you'd prefer to use the apple with 25,206 faces.
    It might work, but this is a fairly large model. Many people ask *"How many polygons
    can I use?"* although this is a difficult question to answer. It would be like
    asking your mother how many groceries can she fit in the car? A lot of it depends
    on what groceries. If she is bringing back a 24 pack of that nice comfy toilet
    tissue, I can tell you from personal experience that only one or two will fit
    in a 2-seater sports car. (Relax, I'm not bragging, my sports car is 12 years
    old.)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会想你更愿意使用拥有25,206个面的苹果。这可能有效，但这是一个相当大的模型。很多人会问“我可以使用多少多边形？”虽然这是一个很难回答的问题。这就好像问你妈妈她能把多少杂货装进车里一样？很大程度上取决于装的是什么杂货。如果她要带回一包24卷的舒适卫生纸，我可以告诉你，根据我的个人经验，一两卷才能装进一辆两座位的跑车里。（放心，我不是在炫耀，我的跑车已经12年了。）
- en: A better way to think of your polygon budget is in comparison to the other objects
    you could have. That high resolution apple? For the same speed (very roughly),
    you could have over 48 of the medium resolution apples.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的多边形预算想象成与你可能拥有的其他物体相比更好。那个高分辨率的苹果？以同样的速度（非常粗略地说），你可以拥有超过48个中等分辨率的苹果。
- en: If you are going to offer refreshments to your Space Gallery patrons, would
    you rather give out 1 or 48?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要为你的太空画廊顾客提供茶点，你更愿意提供1个还是48个？
- en: '![](Images/4314ed05-7fa3-4a7a-9d39-39b069b891da.jpg)Keep your objects as low
    resolution as possible, and still maintain the visual look you need. You may need
    access to low poly objects or a good CAD system that can reduce polygons.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 保持你的物体尽可能低分辨率，并且仍然保持你需要的视觉外观。你可能需要访问低多边形物体或一个可以减少多边形的好CAD系统。
- en: After having said that, I was getting somewhat reasonable frame rates from the
    previous one. My goal isn't to give you an absolute number, but to show how important
    a vertex budget is.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这些之后，我从之前的模型中得到了一些相当合理的帧速率。我的目标不是给你一个绝对的数字，而是要展示顶点预算有多么重要。
- en: What is a polygon? discussion of vertices, polygons, and edges
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是多边形？讨论顶点、多边形和边
- en: If you use a modeling program, you will not have to deal with the intricacies
    of the definitions of these objects much. However, from time to time you may need
    to get into the details, so some background is in order. If you are an old hand
    at computer graphics, you may already know a lot of this. I do include some practical
    advice on how best to get them into React VR, so it would be good to review.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用建模程序，你将不必处理这些对象的定义的复杂性。然而，偶尔你可能需要深入了解细节，因此有必要了解一些背景知识。如果你是计算机图形方面的老手，你可能已经了解很多。我确实提供了一些建议，关于如何最好地将它们引入React
    VR，所以最好进行复习。
- en: A polygon is an *n*-sided object composed of vertices (points), edges, and faces.
    A face can face in or out or be double sided. For most real-time VR, we use single–sided
    polygons; we noticed this when we first placed a plane in the world and, depending
    on the orientation, you may not see it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 多边形是由顶点（点）、边和面组成的*n*边对象。面可以朝内或朝外，也可以是双面的。对于大多数实时VR，我们使用单面多边形；当我们首次将平面放置在世界中时，我们注意到这一点，根据方向的不同，你可能看不到它。
- en: To really show how this all works, I'm going to show the internal format of
    an OBJ file. Normally, you won't hand edit these — we are beyond the days of VR
    constructed with a few thousand polygons (my first VR world had a train that represented
    downloads, and it had six polygons, each point lovingly crafted by hand), so hand
    editing things isn't necessary, but you may need to edit the OBJ files to include
    the proper paths or make changes your modeler may not do natively–so let's dive
    in!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了真正展示这一切是如何运作的，我将展示OBJ文件的内部格式。通常情况下，你不会手动编辑这些文件——我们已经超越了由几千个多边形构建的VR时代（我的第一个VR世界有一个代表下载的火车，它有六个多边形，每个点都是精心手工制作的），因此手动编辑并不是必要的，但你可能需要编辑OBJ文件以包含正确的路径或进行模型师无法原生完成的更改——所以让我们深入了解吧！
- en: Polygons are constructed by creating points in 3D space, and connecting them
    with faces. You can consider that the vertices are connected by lines (most modelers
    work this way), but in the native WebGL that React VR is based on, it's really
    just faces. The points don't really exist by themselves, but more or less "anchor"
    the corners of the polygon.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 多边形是通过在3D空间中创建点并用面连接它们来构建的。你可以认为顶点是通过线连接的（大多数建模工具都是这样工作的），但在React VR所基于的原生WebGL中，它实际上只是面。这些点并不是真正存在的，而是更多地“锚定”了多边形的角落。
- en: 'For example, here is a simple triangle, modeled in Blender:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是在Blender中建模的一个简单三角形：
- en: '![](Images/869b944a-86fe-4fd3-8ba9-3a327af75f96.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/869b944a-86fe-4fd3-8ba9-3a327af75f96.png)'
- en: In this case, I have constructed a triangle with three vertices and one face
    (with just a flat color, in this case green; if you are reading a physical book or
    an eInk electronic reader (Kindle), it'll be a shade of gray of course). The edges,
    shown in yellow or lighter shade, are there for the convenience of the modeler
    and won't be explicitly rendered.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我用三个顶点和一个面（在这种情况下只是一个纯色，绿色；如果你正在阅读一本实体书或电子墨水阅读器（Kindle），当然会是灰色的一种）构建了一个三角形。边缘以黄色或浅色显示，是为了模型师的方便，不会被显式渲染。
- en: 'Here is what the triangle looks like inside our gallery:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们画廊内三角形的样子：
- en: '![](Images/45d4186a-0ae8-4d29-9194-cdad9424788a.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/45d4186a-0ae8-4d29-9194-cdad9424788a.jpg)'
- en: If you look closely in the Blender photograph, you'll notice that the object
    is not centered in the world. When it exports, it will export with the translations
    that you have applied in Blender. This is why the triangle is slightly off center
    on the pedestal. The good news is that we are in outer space, floating in orbit,
    and therefore do not have to worry about gravity. (React VR does not have a physics
    engine, although it is straightforward to add one.)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细看Blender的照片，你会注意到物体并不在世界中心。当导出时，它将以你在Blender中应用的平移导出。这就是为什么三角形在基座上略微偏离中心。好消息是我们在外太空中，漂浮在轨道上，因此不必担心重力。（React
    VR没有物理引擎，尽管添加一个是很简单的。）
- en: The second thing you may notice is that the yellow lines (lighter gray lines
    in print) around the triangle in Blender do not persist in the VR world. This
    is because the file is exported as one face, which connects three vertices.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到的第二件事是，在Blender中三角形周围的黄色线条（在打印中是浅灰色线条）在VR世界中并不持续存在。这是因为文件被导出为一个面，连接了三个顶点。
- en: The plural of vertex is vertices, not vertexes. If someone asks you about vertexes,
    you can laugh at them almost as much as when someone pronouncing Bézier curve
    as "bez ee er."
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 顶点的复数是顶点，不是vertexes。如果有人问你关于vertexes，你可以笑话他们，几乎和有人把Bézier曲线发音为“bez ee er”一样多。
- en: Ok, to be fair, I did that once, now I always say Beh zee a.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，公平地说，我曾经那样做过，现在我总是说Beh zee a。
- en: Okay, all levity aside, now let's make it look more interesting than a flat
    green triangle. This is done through something usually called texture mapping.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，开玩笑的时间到此为止，现在让我们让它看起来比一个平面绿色三角形更有趣。这是通过通常称为纹理映射的东西来完成的。
- en: Honestly, the phrase "textures" and "materials" often get swapped around interchangeably,
    although lately they have sort of settled down to materials meaning anything about
    an object's physical appearance except its shape; a material could be how shiny
    it is, how transparent it is, and so on. A **texture** is usually just the colors
    of the object — tile is red, skin may have freckles — and is therefore usually
    called a texture map which is represented with a JPG, TGA, or other image format.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，“纹理”和“材质”这个词经常被互换使用，尽管最近它们已经在一定程度上稳定下来，材质指的是物体外观的任何东西，除了它的形状；材质可以是它有多光滑，有多透明等等。**纹理**通常只是物体的颜色
    - 瓷砖是红色的，皮肤可能有雀斑 - 因此通常被称为纹理贴图，用JPG、TGA或其他图像格式表示。
- en: There is no real cross software file format for materials or **shaders** (which
    are usually computer code that represents the material). When it comes time to
    render, there are some shader languages that are standard, although these are
    not always used in CAD programs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 没有真正的跨软件文件格式用于材料或**着色器**（通常是代表材料的计算机代码）。当渲染时，有一些标准的着色器语言，尽管这些语言并不总是在CAD程序中使用。
- en: You will need to learn what your CAD program uses, and become proficient in
    how it handles materials (and texture maps). This is far beyond the scope of this
    book.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要了解你的CAD程序使用的是什么，并熟练掌握它如何处理材料（和纹理贴图）。这远远超出了本书的范围。
- en: 'The OBJ file format (which is what React VR usually uses) allows the use of
    several different texture maps to properly construct the material. It also can
    indicate the material itself via parameters coded in the file. First, let''s take
    a look at what the triangle consists of. We imported OBJ files via the `Model`
    keyword:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: OBJ文件格式（通常是React VR使用的）允许使用多种不同的纹理贴图来正确构建材料。它还可以通过文件中编码的参数指示材料本身。首先，让我们看看三角形由什么组成。我们通过`Model`关键字导入OBJ文件：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'First, let''s open the `MTL` (material) file (as the .obj file uses the .mtl
    file). The OBJ file format was developed by Wavefront:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们打开`MTL`（材质）文件（因为.obj文件使用.mtl文件）。OBJ文件格式是由Wavefront开发的：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A lot of this is housekeeping, but the important things are the following parameters:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 其中很多是例行公事，但重要的是以下参数：
- en: '`Ka` : Ambient color, in RGB format'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ka`：环境颜色，以RGB格式'
- en: '`Kd` : Diffuse color, in RGB format'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Kd`：漫反射颜色，以RGB格式'
- en: '`Ks` : Specular color, in RGB format'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ks`：镜面反射颜色，以RGB格式'
- en: '`Ns` : Specular exponent, from 0 to 1,000'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ns`：镜面反射指数，从0到1,000'
- en: '`d` : Transparency (d meant *dissolved*). Note that WebGL cannot normally show
    refractive materials, or display real volumetric materials and raytracing, so
    `d` is simply the percentage of how much light is blocked. `1` (the default) is
    fully opaque. Note that `d` in the .obj specification works for illum mode 2.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d`：透明度（d代表*dissolved*）。请注意，WebGL通常无法显示折射材料，或显示真实的体积材料和光线追踪，所以`d`只是光线被阻挡的百分比。`1`（默认值）是完全不透明的。请注意，.obj规范中的`d`适用于illum模式2。'
- en: Transparent materials, at the time of writing this book, are not supported by
    React VR. This is currently under development, however, so perhaps soon they will
    be.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 透明材料，在撰写本书时，不受React VR支持。然而，目前正在开发中，所以也许很快它们会被支持。
- en: 'Tr : Alternate representation of transparency; 0 is fully opaque.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tr：透明度的替代表示；0是完全不透明。
- en: '`illum` <#> (a number from 0 to 10). Not all illumination models are supported
    by WebGL. The current list is:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`illum` <#>（从0到10的数字）。并非所有照明模型都受WebGL支持。当前的列表是：'
- en: Color on and Ambient off.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 颜色开启，环境关闭。
- en: Color on and Ambient on.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 颜色开启，环境开启。
- en: Highlight on (and colors) <= this is the normal setting.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高亮（和颜色）<=这是正常设置。
- en: There are other illumination modes, but are currently not used by WebGL. This
    of course, could change.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有其他照明模式，但目前没有被WebGL使用。当然，这可能会改变。
- en: '`Ni` is optical density. This is important for CAD systems, but the chances
    of it being supported in VR without a lot of tricks are pretty low.  Computers
    and video cards get faster and faster all the time though, so maybe optical density
    and real time raytracing will be supported in VR eventually, thanks to Moore''s
    law (statistically, computing power roughly doubles every two years or so).'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ni`是光学密度。这对CAD系统很重要，但在VR中支持它的机会相当低，除非有很多技巧。计算机和显卡的速度一直在不断提高，所以也许光学密度和实时光线追踪最终会得到支持，这要感谢摩尔定律（统计上，计算能力大约每两年翻一番）。'
- en: 'Very important: Make sure you include the "lit" keyword with all of your model
    declarations, otherwise the loader will assume you have only an emissive (glowing)
    object and will ignore most of the parameters in the material file!'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要：确保在所有模型声明中包含“lit”关键字，否则加载程序将假定你只有一个发光的对象，并将忽略材料文件中的大部分参数！
- en: YOU HAVE BEEN WARNED. It'll look very weird and you'll be completely confused.
    Don't ask me why I know!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经被警告了。它看起来会很奇怪，你会完全困惑。别问我为什么我知道！
- en: 'The OBJ file itself has a description of the geometry. These are not usually
    something you can hand edit, but it''s useful to see the overall structure. For
    the simple object, shown before, it''s quite manageable:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: OBJ文件本身包含了几何图形的描述。这些通常不是你可以手动编辑的东西，但是看到整体结构是很有用的。对于之前显示的简单对象，它是相当容易管理的：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: First, you see a comment (marked with `#`) that tells you what software made
    it, and the name of the original file. This can vary. The `mtllib` is a call out
    to a particular material file, that we already looked at. The `o` lines (and `g` line
    is if there a group) define the name of the object and group; although React VR
    doesn't  really  use these (currently), in most modeling packages this will be
    listed in the hierarchy of objects. The `v` and `vn` keywords are where it gets
    interesting, although these are still not something visible. The `v` keyword creates
    a vertex in x, y, z space. The vertices built will later be connected into polygons. The `vn`
    establishes the normal for those objects, and `vt` will create the texture coordinates
    of the same points. More on texture coordinates in a bit.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您会看到一个注释（用`#`标记），告诉您是什么软件制作的，以及原始文件的名称。这可能会有所不同。`mtllib` 是对特定材质文件的调用，我们已经看过了。`o`
    行（如果有组，还有`g` 行）定义了对象和组的名称；尽管 React VR 目前并不真正使用这些，但在大多数建模软件中，这将列在对象的层次结构中。`v` 和
    `vn` 关键字是有趣的地方，尽管这些仍然不是可见的东西。`v` 关键字在 x、y、z 空间中创建一个顶点。稍后将连接构建的顶点成多边形。`vn` 建立了这些对象的法线，`vt`
    将创建相同点的纹理坐标。稍后再详细讨论纹理坐标。
- en: The `usemtl BaseMat` establishes what material, specified in your .mtl file,
    that will be used for the following faces.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`usemtl BaseMat` 建立了在接下来的面中将使用的材质，该材质在您的.mtl文件中指定。'
- en: The `s off` means smoothing is turned off. Smoothing and vertex normals can
    make objects look smooth, even if they are made with very few polygons. For example,
    take a look at these two teapots; the first is without smoothing.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`s off` 意味着关闭了平滑。平滑和顶点法线可以使物体看起来光滑，即使它们由很少的多边形制成。例如，看看这两个茶壶；第一个没有平滑。'
- en: '![](Images/98c63628-9ac2-47a4-b90d-156e10875858.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/98c63628-9ac2-47a4-b90d-156e10875858.png)'
- en: Looks pretty computer graphics like, right? Now, have a look at the same teapot
    with the "s 1" parameter specified throughout, and normals included in the file. 
    This is pretty normal (pun intended), what I mean is most CAD software will compute
    normals for you. You can make normals; smooth, sharp, and add edges where needed.
    This adds detail without excess polygons and is fast to render.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很像计算机图形，对吧？现在，看看在整个文件中指定了“s 1”参数，并且法线包含在文件中的相同茶壶。这是相当正常的（双关语），我的意思是大多数 CAD
    软件会为您计算法线。您可以使法线光滑、锐利，并在需要时添加边缘。这可以在不增加多边形的情况下增加细节，并且渲染速度快。
- en: '![](Images/7d3ee609-8afd-4706-9f42-0d2ddc9a11c9.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7d3ee609-8afd-4706-9f42-0d2ddc9a11c9.png)'
- en: The smooth teapot looks much more real, right? Well, we haven't seen anything
    yet! Let's discuss texture.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 光滑的茶壶看起来更真实，对吧？好吧，我们还没看到最好的！让我们讨论纹理。
- en: I didn't used to like Sushi because of the texture. We're not talking about
    that kind of texture.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我过去不喜欢寿司是因为口感。我们不是在谈论那种口感。
- en: Texture mapping is a lot like taking a piece of Christmas wrapping paper and
    putting it around an odd shaped object. Just like when you get that weird looking
    present at Christmas and don't know quite what to do, sometimes doing the wrapping
    doesn't have a clear right way to do it. Boxes are easy, but most interesting
    objects aren't always a box. I found this picture online with the caption *"I
    hope it's an X-Box*.*"*
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 纹理映射很像是用一张圣诞包装纸包裹一个奇形怪状的物体。就像在圣诞节收到那个奇怪的礼物，不太知道该怎么做一样，有时包装并没有明确的正确方式。盒子很容易，但大多数有趣的物体并不总是一个盒子。我在网上找到了这张带有标题“*我希望是X-Box*.*”*的照片。
- en: '![](Images/a90e54eb-6ec1-4097-bc3e-74cf3d60e917.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a90e54eb-6ec1-4097-bc3e-74cf3d60e917.jpg)'
- en: 'The "wrapping" is done via U, V coordinates in the CAD system. Let''s take
    a look at a triangle, with proper UV coordinates. We then go get our wrapping
    paper, that is to say, we take an image file we are going to use as the texture,
    like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: “包裹”是通过CAD系统中的U、V坐标完成的。让我们来看一个带有正确UV坐标的三角形。然后我们去拿我们的包装纸，也就是说，我们拿一张图像文件作为纹理，就像这样：
- en: '![](Images/20e61ca4-70bf-478c-a278-f17f9a5bcb81.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/20e61ca4-70bf-478c-a278-f17f9a5bcb81.jpg)'
- en: We then wrap that in our CAD program by specifying this as a texture map. We'll
    then export the triangle, and put it in our world.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在CAD程序中将其包装起来，指定它作为纹理贴图。然后我们将三角形导出，并放入我们的世界中。
- en: '![](Images/647e8ee1-d882-4fb8-b15a-40c7d0ca2f65.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/647e8ee1-d882-4fb8-b15a-40c7d0ca2f65.jpg)'
- en: You would probably have expected to see "left and bottom" on the texture map.
    Taking a closer look in our modeling package (Blender still) we see that the default
    UV mapping (using Blender's standard tools) tries to use as much of the texture
    map as possible, but from an artistic standpoint, may not be what we want.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能期望在纹理贴图上看到“左侧和底部”。在我们的建模软件（仍然是Blender）中仔细观察后，我们发现默认的UV映射（使用Blender的标准工具）尝试尽可能多地使用纹理贴图，但从艺术角度来看，可能并不是我们想要的。
- en: '![](Images/4e7c5e33-dd23-44c0-832c-77d075b43ca1.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/4e7c5e33-dd23-44c0-832c-77d075b43ca1.png)'
- en: This is not to show that Blender is "yer doin' it wrong" but to make the point
    that you've got to check the texture mapping before you export. Also, if you are
    attempting to import objects without U,V coordinates, double-check them!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是要表明Blender是“你做错了”，而是要说明在导出之前您必须检查纹理映射。此外，如果您尝试导入没有U、V坐标的对象，请再次检查它们！
- en: If you are hand editing an .mtl file, and your textures are not showing up,
    double–check your .obj file and make sure you have `vt` lines; if you don't, the
    texture will not show up. This means the U,V coordinates for the texture mapping
    were not set.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在手动编辑.mtl文件，并且您的纹理没有显示出来，请仔细检查.obj文件，并确保您有`vt`行；如果没有，纹理将不会显示出来。这意味着纹理映射的U、V坐标没有设置。
- en: Texture mapping is non-trivial; there is quite an art about it and even entire
    books written about texturing and lighting. After having said that, you can get
    pretty far with Blender and any OBJ file if you've downloaded something from the
    internet and want to make it look a little better. We'll show you how to fix it.
    The end goal is to get a UV map that is more usable and efficient. Not all OBJ
    file exporters export proper texture maps, and frequently .obj files you may find
    online may or may not have UVs set.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 纹理映射并不是一件简单的事情；关于它有很多艺术性的东西，甚至有整本书专门讲述纹理和光照。话虽如此，如果您从互联网上下载了一些东西并希望让它看起来更好一些，您可以通过Blender和任何OBJ文件来取得相当大的进展。我们将向您展示如何修复它。最终目标是获得一个更可用和高效的UV贴图。并非所有的OBJ文件导出器都会导出正确的纹理贴图，而且您在网上找到的.obj文件可能有UV设置，也可能没有。
- en: You can use Blender to fix the unwrapping of your model. While this is not a
    Blender tutorial, I'll show you enough here that with a book on Blender (Packt
    has several good Blender books) you can get a head start. You can also use your
    favorite CAD modeling program, such as Max, Maya, Lightwave, Houdini, and so on.
    (and forgive me if I missed your favorite package!).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Blender来修复模型的展开。虽然这不是一个Blender教程，但我会在这里向您展示足够的内容，让您可以通过一本关于Blender的书（Packt有几本很好的Blender书）来快速入门。您也可以使用您喜欢的CAD建模程序，比如Max、Maya、Lightwave、Houdini等等。（如果我错过了您喜欢的软件，请原谅我！）。
- en: This is important, so I'll mention it again in an info box. If you already use
    a different polygon modeler or CAD page, you don't have to learn Blender; your
    program will undoubtedly work fine.  You can skim this section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，所以我会在信息框中再次提到它。如果您已经使用了不同的多边形建模器或CAD页面，您不必学习Blender；您的程序肯定会正常工作。您可以略过这一部分。
- en: If you don't want to learn Blender anyway, you can download all of the files
    that we construct from the Github link. You'll need some of the image files if
    you do work through the examples. Files for this chapter are at: [http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想学习Blender，你可以从Github链接下载我们构建的所有文件。如果你要通过示例进行工作，你将需要一些图像文件。本章的文件位于：[http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7)。
- en: Where to get 3D models
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取3D模型的途径
- en: Which brings us to a brief diversion. Where do you get these models in the first
    place?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这就引出了一个简短的分歧。首先，你从哪里得到这些模型？
- en: The best way to get 3D models is to make them yourself. If you do, you are probably
    not reading this, as you already know what polygons are and how to texture them.
    However, more likely you will go to a paid or free model site and download something
    you find appealing for the world you are trying to create. It just saves time.
    Here's a brief mention of a few sites that I've found useful over the years. Some
    of these sites can have very expensive models, as they often cater to high–end
    graphics companies (television, architecture, movies, designers), as well as high
    quality, but expensive, game art. Game art is about what you're looking for, to
    do good VR; some sites now have "low poly" or VR/AR categories. Some of them,
    especially ShareCG and Renderosity, tend to be very amateur in places. The site
    itself is great, but the uploaded files frequently have no editorial control;
    as a result, you may be able to find things that violate copyrights (Star Wars
    and Star Trek models) that you won't find on other sites for obvious reasons (lawyers!).
    Then again, you may find your own content on these sites that people are making
    money off of, and thus want to find your own lawyers.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 获取3D模型的最佳方式是自己制作。如果你这样做，你可能不会读到这里，因为你已经知道多边形是什么，以及如何给它们贴图。然而，更有可能的是你会去付费或免费的模型网站下载你觉得吸引人的东西，用于你想要创建的世界。这只是为了节省时间。以下是我多年来发现有用的一些网站的简要介绍。其中一些网站可能有非常昂贵的模型，因为它们经常迎合高端图形公司（电视、建筑、电影、设计师），以及高质量但昂贵的游戏艺术。游戏艺术是你要寻找的，以做好VR；一些网站现在有“低多边形”或VR/AR类别。其中一些，特别是ShareCG和Renderosity，在某些地方往往非常业余。网站本身很棒，但上传的文件经常没有编辑控制；因此，你可能会找到侵犯版权的东西（星球大战和星际迷航模型），这是因为律师的明显原因，你在其他网站上找不到这些东西。另一方面，你可能会在这些网站上找到别人正在赚钱的你自己的内容，因此想找到你自己的律师。
- en: Speaking of lawyers, you need to check the license for any files you do download.
    You may have the right to use these models for rendering, for example, but not
    distribution. This may or may not allow you to ship a game with these models in
    it, or that may require an additional (more expensive) license.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 说到律师，你需要检查任何你下载的文件的许可证。例如，你可能有权使用这些模型进行渲染，但不能进行分发。这可能允许你在游戏中使用这些模型，或者可能需要额外（更昂贵）的许可证。
- en: 'A few websites (by no means exclusive) where you can download models are at:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网站（绝非独家）可以下载模型，包括：
- en: '[Turbosquid.com ](http://Turbosquid.com)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Turbosquid.com](http://Turbosquid.com)'
- en: '[CGStudio.com ](http://CGStudio.com)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CGStudio.com](http://CGStudio.com)'
- en: '[creativemarket.com/3d](http://creativemarket.com/3d)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[creativemarket.com/3d](http://creativemarket.com/3d)'
- en: '[CGTrader.com](http://CGTrader.com)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CGTrader.com](http://CGTrader.com)'
- en: '[Grabcad.com](http://Grabcad.com)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Grabcad.com](http://Grabcad.com)'
- en: '[ShareCG.com](http://ShareCG.com)  (several of the models for this book came
    from here)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ShareCG.com](http://ShareCG.com)（本书中的一些模型来自这里）'
- en: '[3dwarehouse.sketchup.com](http://3dwarehouse.sketchup.com)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3dwarehouse.sketchup.com](http://3dwarehouse.sketchup.com)'
- en: Why do you find such good models on these sites? Why do some of the models look
    so — odd, artistically? Many artists have contracts that do not require exclusivity,
    or people are working on a game that disbands and never ships. They can upload
    these unused or lesser used models and let other people use them, and even profit
    off of their sales.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么你会在这些网站上找到这么好的模型？为什么一些模型看起来如此奇怪，艺术性如此之高？许多艺术家有一些不需要排他性的合同，或者人们正在制作一个游戏，但最终没有发布。他们可以上传这些未使用或较少使用的模型，让其他人使用，并甚至从销售中获利。
- en: You can spend days searching all of these sites for that perfect content for
    your site.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以花上几天的时间在所有这些网站上搜索适合你网站的完美内容。
- en: You've been warned!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经被警告了！
- en: There are also a large number of 3D model sites intended for 3D printing. These
    models may be very dense (high polygon), but might have some content you could
    use.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多旨在用于3D打印的3D模型网站。这些模型可能非常密集（高多边形），但可能有一些你可以使用的内容。
- en: I like to use a program called "Poser" to do human modeling, although many CGI
    artists would prefer to roll their own. DAZ3D sells human models as well, and
    many of them work with Poser. Both of these are good resource sites for inexpensive,
    reasonable quality rendering (depending on your skill setting up a scene). The
    Poser program has many sites dedicated to objects, scenes, models, and textures
    usable for it. Poser human models won't display terribly well in VR due to high
    polygon counts and very dense textures, but these sites may still have objects
    and add-on tools, usually at a very reasonable price.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢使用一个叫做“Poser”的程序来进行人体建模，尽管许多CGI艺术家更喜欢自己制作。DAZ3D也出售人体模型，其中许多可以与Poser一起使用。这两个网站都是廉价、合理质量渲染的良好资源网站（取决于你设置场景的技能）。Poser程序有许多专门用于对象、场景、模型和纹理的网站可供使用。由于高多边形数量和非常密集的纹理，Poser人体模型在VR中显示效果不佳，但这些网站可能仍然有物体和附加工具，通常价格非常合理。
- en: 'A few web sites that have good Poser models, as well as a lot of other free
    objects are:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一些拥有良好Poser模型的网站，以及许多其他免费物体的网站是：
- en: '[my.smithmicro.com/poser-3d-animation-software.html](http://my.smithmicro.com/poser-3d-animation-software.html)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[my.smithmicro.com/poser-3d-animation-software.html](http://my.smithmicro.com/poser-3d-animation-software.html)'
- en: '[DAZ3D.com](http://DAZ3D.com)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DAZ3D.com](http://DAZ3D.com)'
- en: '[Contentparadise.com](http://Contentparadise.com)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Contentparadise.com](http://Contentparadise.com)'
- en: '[Renderosity.com](http://Renderosity.com)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Renderosity.com](http://Renderosity.com)'
- en: Several images in this book were done with Poser and DAZ Studio.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的几幅图像是用Poser和DAZ Studio完成的。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned the basics of polygon modeling with Blender. You've
    learned the importance of polygon budgets, how to export those models, and details
    about the OBJ/MTL file formats. You've also learned where we can get 3D models
    for our worlds.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了使用Blender进行多边形建模的基础知识。你已经了解了多边形预算的重要性，如何导出这些模型，以及关于OBJ/MTL文件格式的细节。你还学会了我们可以在哪里获取我们世界的3D模型。
- en: These objects can look plain; however, in the next section, you will learn how
    to wrap a paper around a teapot. This is not just a skill for giving gifts to
    people, it'll be vital for making our virtual worlds look real.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这些物体看起来可能很普通；然而，在下一节中，你将学会如何在茶壶周围包裹一张纸。这不仅是一种给人们礼物的技能，它对于使我们的虚拟世界看起来真实将是至关重要的。
