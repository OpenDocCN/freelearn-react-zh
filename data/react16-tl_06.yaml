- en: Enforcing Code Quality to Improve Maintainability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强制执行代码质量以提高可维护性
- en: Wouldn't it be nice if a project's code were consistent and easy to read? The
    reason that this isn't often the case is because enforcing such a level of code
    quality is burdensome. When something is a burden when done manually, you introduce
    a tool.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个项目的代码是一致的且易于阅读，那不是很好吗？之所以通常情况下不是这样，是因为强制执行这种程度的代码质量是繁重的。当手动完成某事是一种负担时，您就引入了一个工具。
- en: 'The focus of this chapter is on using tools that assist with making sure that
    your React code quality is up to standards. Here''s what you''ll learn in this
    chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是使用工具来确保您的React代码质量达到标准。以下是本章的学习内容：
- en: Installing and configuring ESLint
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置ESLint
- en: Running ESLint on React source code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在React源代码上运行ESLint
- en: Getting configuration help from Airbnb
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Airbnb获取配置帮助
- en: Linting JSX and React components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对JSX和React组件进行Linting
- en: Integrating ESLint with your code editor
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将ESLint与您的代码编辑器集成
- en: Customizing ESLint errors and warnings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义ESLint错误和警告
- en: Formatting code automatically with Prettier
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Prettier自动格式化代码
- en: Installing and configuring ESLint
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置ESLint
- en: The first step to automating the quality of your React source code is installing
    and configuring the tool used to automate it—ESLint. When ESLint is installed,
    it installs an `eslint` command on your system. Like other packages that install
    commands, it's better to have them installed locally as part of the project, so
    that you don't have to rely on the command being available globally on the system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化React源代码质量的第一步是安装和配置用于自动化的工具—ESLint。当安装了ESLint时，它会在您的系统上安装一个`eslint`命令。与安装全局命令的其他软件包一样，最好将它们作为项目的一部分安装在本地，这样您就不必依赖系统上全局可用的命令。
- en: 'To install ESLint in your project, run the following `npm` command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要在项目中安装ESLint，请运行以下`npm`命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that you have ESLint installed, you can create a new npm script that will
    run ESLint for you. Add the following to the `scripts` section of your `package.json`
    file:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了ESLint，您可以创建一个新的npm脚本来运行ESLint。将以下内容添加到您的`package.json`文件的`scripts`部分：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You now have an `eslint` command that you can run within your project. Try
    it out:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有了一个可以在项目中运行的`eslint`命令。试一试吧：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Instead of linting any of your source files, you should see a usage message
    in your console:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是对任何源文件进行Linting，您应该在控制台中看到一个使用消息：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see, you have to tell the `eslint` command which files or directories
    you want to lint. To keep things simple, let''s assume that all of our code is
    in the same directory as `package.json`. You can modify your `package.json` file as
    follows so that ESLint knows where to look for files:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您必须告诉`eslint`命令您想要进行Lint的文件或目录。为了保持简单，让我们假设我们所有的代码都在与`package.json`相同的目录中。您可以修改您的`package.json`文件如下，以便ESLint知道在哪里查找文件：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Did you notice the dot (`.`) added after `eslint`? This means the current directory
    on most systems. Go ahead and run `npm run lint` again. This time, you''ll see
    a different output as ESLint is actually attempting to find source files to lint:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您注意到在`eslint`后面添加了点(`.`)吗？这意味着在大多数系统上是当前目录。继续运行`npm run lint`。这一次，您将看到不同的输出，因为ESLint实际上正在尝试查找要进行Lint的源文件：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Okay, so let''s do what it''s telling us to do. We''ll run `npm run lint --
    --init` to create a configuration file. When you do this, you''re presented with
    a number of options to choose from:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们按照它告诉我们的去做。我们将运行`npm run lint -- --init`来创建一个配置文件。当您这样做时，您将看到一系列选项供您选择：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s go with the first option for now and answer some basic questions about
    the code you plan on writing. With the option selected, pressing *Enter* brings
    you to the first question:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们选择第一个选项，并回答一些关于您计划编写的代码的基本问题。选择选项后，按下*Enter*键将带您到第一个问题：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Yes, you are.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你是。
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Yes, you are.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你是。
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Select `Browser`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 `Browser`。
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Nope.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不。
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Nope. We'll get into JSX later in this chapter.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不。我们稍后会介绍 JSX。
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Use whatever you like here, because I'll inevitably be wrong.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用任何你喜欢的，因为我最终肯定会错。
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Single. What are you, an animal?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 单个。你是什么，一个动物吗？
- en: '[PRE14]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Unix is a safe bet here.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Unix 在这里是一个安全的选择。
- en: '[PRE15]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is a tricky one. Semicolons aren''t a requirement in JavaScript source.
    There are times where they can help, while other times they''re just added syntax
    for something that the JavaScript interpreter already understands. If you''re
    unsure, require semicolons; you can always change your ESLint configuration later
    on:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个棘手的问题。在 JavaScript 源代码中分号不是必需的。有时它们可以帮助，而其他时候它们只是为了一些 JavaScript 解释器已经理解的东西而添加的语法。如果你不确定，要求使用分号；你总是可以稍后更改你的
    ESLint 配置：
- en: '[PRE16]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Use whatever you''re most comfortable with reading and editing. I''m going
    to stick with the default option of JavaScript:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你最舒适阅读和编辑的任何东西。我将坚持使用 JavaScript 的默认选项：
- en: '[PRE17]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Hooray! Let''s try running this again:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁！让我们再试一次运行这个：
- en: '[PRE18]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'No output this time. This just means that ESLint didn''t find any errors. Part
    of that has to do with the fact that there''s no code in the project yet, but
    you now have a known working starting point. Let''s take a quick look at the `.eslintrc.js`
    file that was created for you:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这次没有输出。这意味着 ESLint 没有发现任何错误。部分原因是项目中还没有代码，但是现在你有了一个已知的工作起点。让我们快速看一下为你创建的 `.eslintrc.js`
    文件：
- en: '[PRE19]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Since you've answered the questions required to create this file, you don't
    need to change anything yet. When you do, this is the file to edit. When you're
    just learning ESLint, typing out a configuration file like this can be off putting.
    In time, when you decide that your code quality standards need tweaking, the ESLint
    rules reference ([https://eslint.org/docs/rules/](https://eslint.org/docs/rules/))
    is a great resource.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经回答了创建这个文件所需的问题，你现在不需要改变任何东西。当你需要时，这就是要编辑的文件。当你只是学习 ESLint 时，像这样打出一个配置文件可能会让人望而却步。但是，当你决定你的代码质量标准需要调整时，ESLint
    规则参考（[https://eslint.org/docs/rules/](https://eslint.org/docs/rules/)）是一个很好的资源。
- en: 'As the  final step to setting up and configuring ESLint for your project, let''s
    introduce some source code to lint. Create an `index.js` file if it doesn''t already
    exist, and add the following function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 作为为项目设置和配置 ESLint 的最后一步，让我们引入一些源代码进行 lint。如果还没有，创建一个 `index.js` 文件，并添加以下函数：
- en: '[PRE21]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Don't worry about running this function, linting does not serve the same purpose
    as testing or types. Instead, linting provides the developer with easy-to-miss
    hints about something they've done wrong from a code-quality perspective. Correctness
    is different from code quality. This means that you have a wide variable of tweakable
    options with ESLint that tell it how to evaluate your code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心运行这个函数，linting 不像测试或类型检查那样。相反，linting 为开发人员提供了关于他们从代码质量角度做错了什么的易于忽视的提示。正确性与代码质量是不同的。这意味着你有许多可调整的选项与
    ESLint，告诉它如何评估你的代码。
- en: 'Now, back to the function you''ve just added. You can verify that this function
    is okay by running `npm run lint` again. Sure enough, the function is good according
    to the rules that you''ve configured in `.eslintrc.js`. Now, try removing the
    semicolon from the function so that it looks like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到你刚刚添加的函数。你可以通过再次运行 `npm run lint` 来验证这个函数是否正确。果然，根据你在 `.eslintrc.js` 中配置的规则，这个函数是好的。现在，尝试从函数中删除分号，使其看起来像这样：
- en: '[PRE22]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This time, you get an error from ESLint:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，你会从 ESLint 得到一个错误：
- en: '[PRE23]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This is the exact kind of output you need. It gives you the name of the source
    file, the location of the error/warning in the file, and describes the actual
    problem that was found.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您需要的确切输出类型。它为您提供了源文件的名称，文件中错误/警告的位置，并描述了找到的实际问题。
- en: 'Let''s try one more. Go ahead and restore the semicolon that you deleted. Now,
    delete the `export` statement so that your function definition looks as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再试一次。请恢复您删除的分号。现在，删除 `export` 语句，使您的函数定义如下：
- en: '[PRE24]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now you get a different error when this code is linted:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当对此代码进行检查时，您会得到不同的错误：
- en: '[PRE25]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Because you've removed the `export` keyword, the module is just a function assigned
    to `myFunc`. It's never used, and ESLint was able to tell you about it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因为您删除了 `export` 关键字，所以模块只是一个分配给 `myFunc` 的函数。它从未被使用，ESLint 能够告诉您这一点。
- en: Building on Airbnb standards
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立在Airbnb标准的基础上
- en: Organizations that have large JavaScript code bases have invested heavily in
    code quality tools. This includes investments in configuring tools like ESLint.
    The great part about using a standard set of configuration values for enforcing
    code quality is that you don't have any discrepancies between developers due to
    a slight configuration difference.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有大型 JavaScript 代码库的组织已经在代码质量工具上进行了大量投资。这包括在配置诸如 ESLint 之类的工具方面的投资。使用一组标准的配置值来强制执行代码质量的伟大之处在于，由于轻微的配置差异，开发人员之间不会有任何差异。
- en: 'ESLint allows you to install and use npm packages as configuration settings
    to use and extend. A popular choice is the Airbnb standard. Let''s use the ESLint
    `init` tool again to get started with Airbnb JavaScript code quality standards.
    First, run the `init` tool again:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint 允许您安装和使用 npm 包作为配置设置来使用和扩展。一个受欢迎的选择是 Airbnb 标准。让我们再次使用 ESLint `init`
    工具来开始使用 Airbnb JavaScript 代码质量标准。首先，再次运行 `init` 工具：
- en: '[PRE26]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The first question asks you how you want to configure ESLint. Instead of answering
    questions, you can choose a guide:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个问题问您如何配置 ESLint。您可以选择一个指南而不是回答问题：
- en: '[PRE27]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The next question lets you choose which guide to follow. You want Airbnb''s
    guide:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个问题让您选择要遵循的指南。您想要遵循 Airbnb 的指南：
- en: '[PRE28]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, ESLint will install the necessary npm packages for using Airbnb''s ESLint
    configuration settings:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，ESLint 将安装必要的 npm 包以使用 Airbnb 的 ESLint 配置设置：
- en: '[PRE29]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let''s see what the `.eslintrc.js` file that ESLint created looks like:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 ESLint 创建的 `.eslintrc.js` 文件是什么样子的：
- en: '[PRE30]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'As you can see, there''s very little to this file now because everything is
    handled by the `airbnb-base` npm package. Your `.eslintrc.js` is simply extending
    it. So let''s see some of these Airbnb rules in action. Add the following code
    to `index.js`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，现在这个文件非常简单，因为一切都由 `airbnb-base` npm 包处理。您的 `.eslintrc.js` 只是在扩展它。让我们看看这些
    Airbnb 规则是如何起作用的。将以下代码添加到 `index.js` 中：
- en: '[PRE31]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `maybe()` function returns the argument if it's truthy; otherwise, it returns
    the string `default`. Then, `maybe()` is called with a string value, and no value
    at all. The comments indicate the output of these two function calls. Feel free
    to run this code to make sure that it works as advertised.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`maybe()` 函数如果参数为真，则返回该参数；否则返回字符串 `default`。然后，使用字符串值和没有值来调用 `maybe()`。注释指示了这两个函数调用的输出。随时运行此代码以确保它按照广告中的方式工作。'
- en: 'After you do that, let''s see what Airbnb thinks about your code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在您这样做之后，让我们看看 Airbnb 对您的代码有何看法：
- en: '[PRE32]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'And here''s the output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '[PRE33]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Four problems! Ouch. Let's walk through each of them and see what can be done.
    The first error is `no-confusing-arrow`, which says that an arrow function was
    used ambiguously with a comparison operator. You can go look at the specifics
    of each error ([https://eslint.org/docs/rules/](https://eslint.org/docs/rules/))
    where you'll find detailed explanations and examples.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 四个问题！哎呀。让我们逐个解决每个问题，看看能做些什么。第一个错误是`no-confusing-arrow`，它表示箭头函数与比较运算符模糊地使用了。您可以查看每个错误的具体内容（[https://eslint.org/docs/rules/](https://eslint.org/docs/rules/)），在那里您将找到详细的解释和示例。
- en: 'The next error, `no-unneeded-ternary`, is closely related to the first error.
    It states that we can use a simpler expression than a ternary, which should help
    with the readability of your code. So let''s try it out. The `maybe()` function
    is supposed to return either the argument or some default value if the argument
    is falsy. Instead of a ternary operator, let''s try using a logical OR (||):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的错误`no-unneeded-ternary`与第一个错误密切相关。它指出我们可以使用比三元表达式更简单的表达式，这应该有助于提高代码的可读性。所以让我们试一试。`maybe()`函数应该返回参数或者如果参数为假的话返回一些默认值。除了三元运算符，让我们尝试使用逻辑或(||)：
- en: '[PRE35]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'There''s a slight improvement in readability here, definitely less syntax.
    What''s more important about the minor improvement itself is the fact that every
    developer working on this code base will make the same minor improvement. Let''s
    see what `npm run lint` says now:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的可读性稍有改善，明显减少了语法。关于这个微小改进本身更重要的是，每个在这个代码库上工作的开发人员都会做出相同的微小改进。让我们看看现在`npm run
    lint`会说些什么：
- en: '[PRE36]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Awesome! You''re down to two warnings. But these are just complaining about
    your `console.log()` calls. Clearly, the Airbnb ESLint rules don''t like that,
    but you do. Since you''re just using the Airbnb rule settings as a starting point
    by extending them, you can also turn them off. In your case, the `no-console`
    rule is serving no purpose since you clearly rely on it. To do so, edit your `.eslintrc.js`
    file to look like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！您只剩下两个警告。但这些警告只是在抱怨您的`console.log()`调用。显然，Airbnb的ESLint规则不喜欢这样做，但您喜欢。由于您只是通过扩展它们来使用Airbnb规则设置作为起点，您也可以关闭它们。在您的情况下，`no-console`规则没有任何作用，因为您显然依赖它。为此，编辑您的`.eslintrc.js`文件，使其如下所示：
- en: '[PRE37]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: After the `extends` section of the ESLint configuration, you can add a `rules`
    section where you can turn off specific rules that are defined by `airbnb-base`.
    In this example, setting `no-console` to `0` tells ESLint that it shouldn't report
    these warnings. Let's run `npm run lint` one more time to see if this has fixed
    everything.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在ESLint配置的`extends`部分之后，您可以添加一个`rules`部分，您可以在其中关闭由`airbnb-base`定义的特定规则。在这个例子中，将`no-console`设置为`0`告诉ESLint不应报告这些警告。让我们再次运行`npm
    run lint`，看看是否已经修复了所有问题。
- en: Sure enough, there are no more errors to report!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 果然，没有更多的错误要报告了！
- en: Adding React plugins to ESLint
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向ESLint添加React插件
- en: 'Let''s assume that you want to use the Airbnb set of ESLint rules after having
    tried it out and liking it. Let''s also assume that you want to lint your React
    component code as well. During the ESLint `init` process, you''ve answered `No`
    to the question that asks whether or not your project uses React. This time, let''s
    say `Yes`. So, once again, run the ESLint `init` process:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想在尝试并喜欢了之后使用Airbnb的ESLint规则集。假设您还想对React组件代码进行lint。在ESLint `init`过程中，您已经回答了一个问题，该问题询问您的项目是否使用React。这次，让我们回答“是”。所以，再次运行ESLint
    `init`过程：
- en: '[PRE38]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'And once again, you want to use the Airbnb lint rules:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您想使用Airbnb的lint规则：
- en: '[PRE39]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'When it asks if you use React, say `Yes`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当它询问您是否使用React时，回答“是”：
- en: '[PRE40]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You''ll notice that a couple of extra packages are installed:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到安装了一些额外的包：
- en: '[PRE41]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now let''s write some React code so that we can lint it. Add the following
    component to `MyComponent.js`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写一些React代码，以便我们可以对其进行lint。将以下组件添加到`MyComponent.js`中：
- en: '[PRE42]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And here is how this component is rendered:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是组件的渲染方式：
- en: '[PRE44]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You don''t need to worry about running this React app in your browser; this
    is just so that you can make sure that ESLint is able to parse JSX and lint it.
    Let''s try running ESLint now:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要担心在浏览器中运行此React应用程序；这只是为了确保ESLint能够解析JSX并对其进行lint。现在让我们尝试运行ESLint：
- en: '[PRE45]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Here are the errors this source code generates when linted:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在对源代码进行lint时，这里是生成的错误：
- en: '[PRE46]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You have errors in both source files to deal with. Let's walk through each of
    these errors now.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要处理两个源文件中的错误。现在让我们逐个讨论这些错误。
- en: 'The first error from `index.js` is `no-undef` and it''s referring to a `document`
    identifier that doesn''t exist. The thing is, you know that `document` is an identifier
    that exists globally in a browser environment. ESLint doesn''t know that this
    global identifier is defined, so we have to tell it about the value in `.eslintrc.js`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 来自`index.js`的第一个错误是`no-undef`，它指的是一个不存在的`document`标识符。问题是，您知道`document`是在浏览器环境中全局存在的标识符。ESLint不知道这个全局标识符被定义了，所以我们必须在`.eslintrc.js`中告诉它这个值：
- en: '[PRE47]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In the `globals` section of the ESLint configuration, you can list the names
    of global identifiers that ESLint should recognize. The value should be `true`
    if the identifier is in fact globally available to source code that references
    it. This way, ESLint knows not to complain about something that is recognized
    as a global identifier in a browser environment.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在ESLint配置的`globals`部分，您可以列出ESLint应该识别的全局标识符的名称。如果标识符实际上在引用它的源代码中是全局可用的，则值应为`true`。这样，ESLint就知道不会抱怨在浏览器环境中识别为全局标识符的东西。
- en: 'The problem with adding globals for identifiers that exist in a specific environment,
    like a web browser, is that there are a lot of them. You wouldn''t want to have
    to maintain a list like this just so that ESLint passes your source code. Thankfully,
    ESLint has a solution for this. Rather than specifying `globals`, you can specify
    the environment that your code will be running in:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为特定环境中存在的标识符（如Web浏览器）添加全局标识符的问题在于它们有很多。您不希望维护这样一个列表，以便ESLint通过您的源代码。幸运的是，ESLint对此有解决方案。您可以指定代码将在的环境，而不是指定`globals`：
- en: '[PRE49]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'With the `browser` environment specified as `true`, ESLint knows about all
    of the browser globals and will not complain when it finds them in your code.
    Further, you can specify multiple environments, as it''s common to have code that
    runs both in the browser and in Node.js. Or even if you don''t share code between
    environments, you might want to lint a project that has both client and server
    code. In either case, here''s what multiple ESLint environments:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`browser`环境指定为`true`，ESLint知道所有浏览器全局变量，并且在代码中找到它们时不会抱怨。此外，您可以指定多个环境，因为通常会有在浏览器和Node.js中运行的代码。或者即使您不在不同环境之间共享代码，也可能希望对同时具有客户端和服务器代码的项目进行lint。在任何一种情况下，这是多个ESLint环境的示例：
- en: '[PRE50]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The next error to fix is `react/jsx-filename-extension`. This rule comes from
    the `eslint-plugin-react` package that was installed when you initialized your
    ESLint configuration. The rule expects you to name files that contain JSX syntax
    using a different extension. Let's assume that you don't want to bother with this
    (not that I would blame you, that's a lot of effort to maintain two file extensions
    for almost the same type of file contents). Let's disable this rule for now.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要修复的下一个错误是`react/jsx-filename-extension`。这个规则来自于你初始化ESLint配置时安装的`eslint-plugin-react`包。该规则希望你使用不同的扩展名来命名包含JSX语法的文件。假设你不想麻烦这个（我不会责怪你，为几乎相同类型的文件内容维护两个文件扩展名太费劲了）。让我们暂时禁用这个规则。
- en: 'Here''s the updated ESLint configuration:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更新后的ESLint配置：
- en: '[PRE51]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The `react/jsx-filename-extension` rule is ignored by setting its value to `0`
    in the `rules` section of the configuration. Go ahead and run `npm run lint` again.
    We're down to two errors now.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`react/jsx-filename-extension`规则被设置为`0`，在配置的`rules`部分中被忽略。继续运行`npm run lint`。现在只剩下两个错误了。'
- en: 'The `comma-dangle` rule is opinionated to be sure, but it''s an interesting
    idea. Let''s zoom in on the offending code that triggered this error:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`comma-dangle`规则确实有自己的见解，但这是一个有趣的想法。让我们聚焦于触发这个错误的有问题的代码：'
- en: '[PRE52]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'ESLint is complaining that there''s no trailing comma after the `root` argument.
    The idea is that when trailing commas are added:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint抱怨在`root`参数后没有尾随逗号。添加尾随逗号的想法是：
- en: It's easier to add items later on because the comma is already there
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后面添加项目更容易，因为逗号已经在那里
- en: It leads to cleaner diffs when you commit code because adding or removing items
    only requires changing one line instead of two
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你提交代码时，它会导致更清晰的差异，因为添加或删除项目只需要更改一行而不是两行
- en: 'Let''s assume that this makes sense and you decide to keep this rule (I like
    it), here''s what the fixed code looks like:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这是有道理的，你决定保留这个规则（我喜欢它），这是修复后的代码：
- en: '[PRE53]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Now let''s run `npm run lint` again. One error left! It''s another React-specific
    error: `react/prefer-stateless-function`. Let''s take another look at your React
    component that triggered this error:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再次运行`npm run lint`。只剩下一个错误！这是另一个React特定的错误：`react/prefer-stateless-function`。让我们再看看触发这个错误的React组件：
- en: '[PRE54]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'ESLint, with the help of `eslint-plugin-react`, is telling you that this component
    should be implemented as a function instead of a class. It says this because it
    was able to detect that `MyComponent` doesn''t have any state and it doesn''t
    have any life cycle methods. So if it were implemented as a function, it:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint通过`eslint-plugin-react`的帮助，告诉你这个组件应该被实现为一个函数而不是一个类。它这么说是因为它能够检测到`MyComponent`没有任何状态，也没有任何生命周期方法。所以如果它被实现为一个函数，它：
- en: Would no longer depend on the `Component` class
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再依赖`Component`类
- en: Would be a simple function with far less syntax than a class
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将是一个简单的函数，比类的语法要少得多
- en: Would be obvious that there are no side-effects with this component
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将明显地表明这个组件没有副作用
- en: 'With these benefits in mind, let''s go ahead and refactor `MyComponent` into
    a pure function as the ESLint error suggests:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些好处，让我们按照ESLint的建议，将`MyComponent`重构为一个纯函数：
- en: '[PRE55]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'And when you run `npm run lint`, you get:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行`npm run lint`时，你会得到：
- en: '[PRE56]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Woops, you''ve introduced a new error in the process of fixing another. No
    big deal, this is why you lint your code, to find things that are easy to miss.
    In this case, it''s the `no-unused-vars` error because we forgot to take out the
    `Component` import. Here''s the fixed version:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，在修复另一个错误的过程中，你引入了一个新的错误。没关系，这就是为什么要对代码进行检查，以找出容易忽略的问题。在这种情况下，是因为我们忘记了去掉`Component`导入，所以出现了`no-unused-vars`错误。这是修复后的版本：
- en: '[PRE57]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: And you're done, no more errors! With the help of `eslint-config-airbnb` and
    `eslint-plugin-react`, you were able to produce code that any other React developer
    will have an easy time reading because chances are they're using the exact same
    code quality standards.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你就完成了，不再有错误！借助`eslint-config-airbnb`和`eslint-plugin-react`的帮助，你能够生成任何其他React开发人员都能轻松阅读的代码，因为很可能他们正在使用完全相同的代码质量标准。
- en: Using ESLint with create-react-app
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ESLint与create-react-app
- en: Everything you've seen so far in this chapter, you've had to set up and configure
    yourself. Not that getting ESLint up and running is particularly difficult or
    anything, but `create-react-app` abstracts this away completely. Remember, the
    idea with `create-react-app` is start writing component code as soon as possible,
    without having to think about configuring things like linters.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中你所看到的一切，你都必须自己设置和配置。并不是说让ESLint运行起来特别困难，但`create-react-app`完全抽象了这一点。记住，`create-react-app`的理念是尽快开始编写组件代码，而不必考虑配置诸如linters之类的东西。
- en: 'To see this in action, let''s create a new app using `create-react-app`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这一点的实际效果，让我们使用`create-react-app`创建一个新的应用程序：
- en: '[PRE58]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Then, start the app as soon as it''s created:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，一旦创建，立即启动应用程序：
- en: '[PRE59]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now let''s get ESLint to complain about something. Open up `App.js` in your
    editor—it should look something like this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们让ESLint抱怨一些事情。在你的编辑器中打开`App.js`，它应该看起来像这样：
- en: '[PRE60]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'ESLint thinks this is fine, so let''s delete the `Component` import so that
    `App.js` looks like this now:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint认为这是可以的，所以让我们删除`Component`导入，这样`App.js`现在看起来像这样：
- en: '[PRE61]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Your `App` class is now trying to extend `Component`, which doesn''t exist.
    Once you save the file, ESLint will be invoked as it''s integrated with the development
    server as a Webpack plugin. In the dev server console, you should see the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`App`类现在试图扩展`Component`，但`Component`并不存在。一旦你保存文件，ESLint将被调用，因为它作为Webpack插件集成到开发服务器中。在开发服务器控制台中，你应该看到以下内容：
- en: '[PRE62]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: As expected, ESLint detects the issue for you. What's nice about having ESLint
    integrated with the development server is that you don't have to remember to invoke
    the `npm run lint` command. If ESLint doesn't pass, the entire build fails.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，ESLint会为你检测到问题。将ESLint集成到开发服务器中的好处是你不必记得调用`npm run lint`命令。如果ESLint不通过，整个构建将失败。
- en: 'Not only are you notified about the failed build in the dev server console,
    but you''re also notified directly in the browser:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅会在开发服务器控制台中收到构建失败的通知，而且还会直接在浏览器中收到通知：
- en: '![](Images/3f406b4c-3879-49c6-a61c-e8ad026edb07.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3f406b4c-3879-49c6-a61c-e8ad026edb07.png)'
- en: This means that even if you forget to look at the server console, it's hard
    to miss the one that replaces your entire UI. If you undo that change that intentionally
    broke ESLint (add the `Component` import back), your UI shows up once again as
    soon as you save `App.js`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着即使你忘记查看服务器控制台，也很难错过替换整个UI的通知。如果你撤消了故意破坏ESLint的更改（重新添加`Component`导入），一旦你保存`App.js`，你的UI会再次显示出来。
- en: Using ESLint in a code editor
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在代码编辑器中使用ESLint
- en: If you want to take linting your `create-react-app` code a step further, you
    can. If you're in the middle of writing component code, the last thing you want
    to have to do is switch to either the console or the browser window, just to see
    if what you're writing is good enough. For some people, a better development experience
    is to see the lint errors as they happen, in their editors.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要进一步对`create-react-app`的代码进行linting，你可以这样做。如果你正在编写组件代码，你最不想做的事情就是不得不切换到控制台或浏览器窗口，只是为了查看你写的东西是否足够好。对于一些人来说，更好的开发体验是在他们的编辑器中看到lint错误发生。
- en: 'Let''s take a look at how to do this with Atom. First, you need to install
    the `linter-eslint` plugin:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在Atom中实现这一点。首先，你需要安装`linter-eslint`插件：
- en: '![](Images/d459320f-f325-4d75-9d75-08006e6a1ce7.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d459320f-f325-4d75-9d75-08006e6a1ce7.png)'
- en: Now when you open JavaScript source files in Atom, this plugin will lint them
    for you and display errors and warnings inline. The only challenge is that `create-react-app`
    doesn't actually create an `.eslintrc.js` file for you. This is because the nature
    of `create-react-app` is to hide all configuration from you by default.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当你在Atom中打开JavaScript源文件时，这个插件会为你进行lint，并在行内显示错误和警告。唯一的挑战是`create-react-app`实际上并没有为你创建一个`.eslintrc.js`文件。这是因为`create-react-app`的性质是默认情况下隐藏所有配置。
- en: However, ESLint is still configured by `create-react-app`. This is how your
    source is linted when you start the development server. The problem is that you
    might want to use this configuration in your editor linter. There is a package
    installed by `create-react-app` called `eslint-config-react-app` that contains
    the ESLint configuration used by the development server. You can use this in your
    own project so that your editor linter is configured the same as anything that
    is output in the browser or the console. This is really important, the last thing
    you want is to have your editor telling you one thing about your code while you
    don't see any issues in the browser.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，ESLint仍然由`create-react-app`配置。这就是在启动开发服务器时对你的源代码进行lint的方式。问题在于你可能希望在编辑器linter中使用这个配置。`create-react-app`安装了一个名为`eslint-config-react-app`的包，其中包含开发服务器使用的ESLint配置。你可以在自己的项目中使用这个配置，这样你的编辑器linter就配置与浏览器或控制台中输出的内容相同。这非常重要，你最不希望的就是编辑器告诉你代码的一些问题，而你在浏览器中却看不到任何问题。
- en: 'If you open up `App.js` in Atom, you shouldn''t see any lint errors because:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Atom中打开`App.js`，你不应该看到任何lint错误，因为：
- en: There aren't any
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何
- en: The `linter-eslint` Atom plugin isn't running because it didn't find any configuration
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linter-eslint` Atom插件没有运行，因为它没有找到任何配置'
- en: 'Here''s what the file looks like when there are no errors:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有错误时，文件看起来像这样：
- en: '![](Images/5bc16047-7d07-42f8-8a6b-638eb78bfc22.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5bc16047-7d07-42f8-8a6b-638eb78bfc22.png)'
- en: 'All you have to do is add ESLint configuration that extends the `eslint-config-react-app`
    configuration. In the root of your project, create the following `.eslintrc.js`
    file:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你所要做的就是添加扩展`eslint-config-react-app`配置的ESLint配置。在你的项目根目录中，创建以下`.eslintrc.js`文件：
- en: '[PRE63]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Now the Atom `linter-eslint` plugin will attempt to lint your open source files
    on-the-fly. Further, it will use the exact same configuration as your `create-react-app`
    dev server. Let''s try deleting the `Component` import again. Things look a little
    different in your editor now:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Atom的`linter-eslint`插件将尝试实时对你的开源文件进行lint。此外，它将使用与你的`create-react-app`开发服务器完全相同的配置。让我们再试着删除`Component`导入。现在你的编辑器看起来有点不同：
- en: '![](Images/86c8361e-2d5b-4dec-aebe-2da5b875a01b.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/86c8361e-2d5b-4dec-aebe-2da5b875a01b.png)'
- en: As you can see, the `Component` identifier is underlined in red so that this
    portion of your code stands out. Underneath your source, there is a pane that
    shows a list of every linter error found, along with more details about each error.
    If you were to run `npm start`, you would see the exact same error in the dev
    server console and in the browser because Atom is using the same ESLint configuration
    as `create-react-app`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`Component`标识符被用红色下划线标出，以便突出显示代码的这一部分。在你的源代码下面，有一个窗格显示了找到的每个linter错误的列表，以及有关每个错误的更多细节。如果你运行`npm
    start`，你会在开发服务器控制台和浏览器中看到完全相同的错误，因为Atom使用与`create-react-app`相同的ESLint配置。
- en: 'Now let''s get rid of this error. Go to the following code line:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们消除这个错误。转到以下代码行：
- en: '[PRE64]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Change it back to:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 将其改回：
- en: '[PRE65]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: There should be no more linter errors visible in your editor.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的编辑器中不应该再显示任何linter错误。
- en: Automating code formatting with Prettier
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Prettier自动化代码格式化
- en: ESLint can be used to improve any aspect of your code, including how it's formatted.
    The problem with using something like ESLint for this job is that it only tells
    you about the formatting issues that it finds. You still have to go fix them.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint 可以用来改进代码的任何方面，包括格式。使用 ESLint 的问题在于它只告诉你它发现的格式问题。你仍然需要去修复它们。
- en: This is why the ESLint configuration from `create-react-app` doesn't specify
    any code formatting rules. This is where a tool like Prettier comes in. It's an
    opinionated code formatter for your JavaScript code. It understands JSX out of
    the box, so it's ideally suited to format your React components.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么 `create-react-app` 的 ESLint 配置没有指定任何代码格式规则。这就是 Prettier 这样的工具发挥作用的地方。它是一个针对你的
    JavaScript 代码的有主见的代码格式化工具。它可以直接理解 JSX，因此非常适合格式化你的 React 组件。
- en: 'The `create-react-app` user guide has a whole section on setting up Git commit
    hooks that trigger Prettier to format any code before it''s committed: [https://github.com/facebookincubator/create-react-app#user-guide](https://github.com/facebookincubator/create-react-app#user-guide).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`create-react-app` 用户指南中有一个完整的部分介绍了如何设置 Git 提交钩子，以在提交之前触发 Prettier 格式化任何代码：[https://github.com/facebookincubator/create-react-app#user-guide](https://github.com/facebookincubator/create-react-app#user-guide)。'
- en: I won't repeat this guide here, but the basic idea is that having Git hooks
    in place that invoke Prettier on any JavaScript source that's committed will ensure
    that everything is formatted, well, pretty. The downside to only relying on Git
    commit hooks is that you as a developer don't necessarily see the formatted code
    as you're writing it.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在这里重复这个指南，但基本思想是，设置好 Git 钩子，以便在提交任何 JavaScript 源代码时调用 Prettier 来确保一切都格式化得很好。只依赖
    Git 提交钩子的缺点是，作为开发人员，你不一定在编写代码时看到格式化后的代码。
- en: 'In addition to setting up Prettier to format JavaScript source with every commit,
    adding a code editor plugin can vastly improve the development experience. Once
    again, you can install the appropriate Atom package (or something similar; Atom
    is popular so I''m using it as the example editor here):'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 除了设置 Prettier 在每次提交时格式化 JavaScript 源代码之外，添加代码编辑器插件可以大大改善开发体验。再次，你可以安装适当的 Atom
    包（或类似的东西；Atom 很受欢迎，所以我在这里使用它作为示例编辑器）：
- en: '![](Images/de3701a4-2d78-41d9-bf86-3955c992be2b.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/de3701a4-2d78-41d9-bf86-3955c992be2b.png)'
- en: 'Once you have the `prettier-atom` package installed, you can use Atom to format
    your React code. By default, this package uses the key binding *Ctrl* + *Alt* + *F*
    to invoke Prettier to format the current source file. Another option is to enable
    formatting on save:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了 `prettier-atom` 包后，你可以使用 Atom 来格式化你的 React 代码。默认情况下，这个包使用快捷键 *Ctrl* + *Alt* + *F*
    来调用 Prettier 格式化当前的源文件。另一个选项是在保存时启用格式化。
- en: '![](Images/74792524-4085-43ba-9221-f16b4ab2cea1.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/74792524-4085-43ba-9221-f16b4ab2cea1.png)'
- en: 'Now, every time you save your JavaScript source, Prettier will format it. Let''s
    test it out. First, open up `App.js` and completely trash the formatting so that
    it looks something like this:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次保存 JavaScript 源代码时，Prettier 都会对其进行格式化。让我们来测试一下。首先，打开 `App.js`，完全破坏格式，让它看起来像这样：
- en: '![](Images/7ad2ee5c-1e86-4853-9397-92c2c206e72f.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7ad2ee5c-1e86-4853-9397-92c2c206e72f.png)'
- en: 'Gross! Let''s save the file and see what happens:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 恶心！让我们保存文件，看看会发生什么：
- en: '![](Images/29c76647-3a04-45ef-ba5a-05c2277c363b.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/29c76647-3a04-45ef-ba5a-05c2277c363b.png)'
- en: That's way better. Imagine if you had to manually fix that mess. Prettier keeps
    your code clear with hardly any thought on your part.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这样好多了。想象一下，如果你不得不手动修复那个混乱的代码。Prettier 可以让你的代码清晰，几乎不需要你费心思。
- en: Summary
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was all about enforcing the code quality level of your React projects
    using tools. The first tool you learned about was ESLint. You learned how to install
    and configure it. Rarely should you have to manually configure ESLint. You learned
    how to use the ESLint initialization tool that walks you through the various options
    available for configuring your ESLint rules.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了使用工具来强制执行React项目的代码质量水平。您学习了第一个工具是ESLint。您学会了如何安装和配置它。您很少需要手动配置ESLint。您学会了如何使用ESLint初始化工具，该工具会引导您完成配置ESLint规则的各种选项。
- en: Next, you learned about the different standard ESLint configurations that you
    can utilize in your React applications. Airbnb is a popular standard you can use
    with ESLint, and you can customize it rule by rule to fit your team's particular
    style. You can also tell the ESLint initialization tool that you're planning on
    using React and have it install the appropriate packages for you.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您了解了不同的标准ESLint配置，可以在您的React应用程序中使用。Airbnb是一个流行的标准，您可以在ESLint中使用，并且可以逐条自定义规则以适应您团队的特定风格。您还可以告诉ESLint初始化工具，您打算使用React，并让它为您安装适当的软件包。
- en: Finally, you learned how ESLint is used by `create-react-app`. It uses a Webpack
    plugin to lint your code when the development server is run. You learned how `create-react-app`
    configures ESLint for this, and how you can use this configuration for your code
    editor. Prettier is a tool that will automatically format your code so that you
    don't have to spend time manually addressing lots of ESLint style warnings.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您了解了`create-react-app`如何使用ESLint。它使用一个Webpack插件在运行开发服务器时对您的代码进行lint。您学会了`create-react-app`如何为此配置ESLint，以及如何在代码编辑器中使用此配置。Prettier是一个工具，它将自动格式化您的代码，这样您就不必花时间手动处理大量的ESLint样式警告。
- en: In the next chapter, you'll learn about isolating React component development
    in their own environments using Storybook.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用Storybook在它们自己的环境中隔离React组件开发。
