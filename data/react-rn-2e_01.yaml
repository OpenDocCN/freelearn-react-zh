- en: Why React?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要使用React？
- en: If you're reading this book, you might already have some idea of what React
    is. You also might have heard a React success story or two. If not, don't worry.
    I'll do my best to spare you from additional marketing literature in this opening
    chapter. However, this is a large book, with a lot of content, so I feel that
    setting the tone is an appropriate first step. Yes, the goal is to learn React
    and React Native. But, it's also to put together a lasting architecture that can
    handle everything we want to build with React today, and in the future.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读这本书，你可能已经对React有一些想法。你可能也听过一两个React的成功故事。如果没有，不用担心。我会尽力在本章节中避免让你接触到额外的营销文学。然而，这是一本内容丰富的书，所以我觉得设定基调是一个合适的第一步。是的，目标是学习React和React
    Native。但同时也是为了构建一个持久的架构，可以处理我们今天和未来想要用React构建的一切。
- en: This chapter starts with a brief explanation of why React exists. Then, we'll
    talk about the simplicity that makes React an appealing technology and how React
    is able to handle many of the typical performance issues faced by web developers.
    Next, we'll go over the declarative philosophy of React and the level of abstraction
    that React programmers can expect to work with. Finally, we'll touch on some of
    the major new features of React 16.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章以React存在的简要解释开始。然后，我们将讨论使React成为一种吸引人的技术的简单性，以及React如何能够处理Web开发人员面临的许多典型性能问题。接下来，我们将介绍React的声明性哲学以及React程序员可以期望使用的抽象级别。最后，我们将介绍React
    16的一些主要新功能。
- en: Let's go!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: What is React?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是React？
- en: 'I think the one-line description of React on its home page ([https://facebook.github.io/react](https://facebook.github.io/react)))
    is brilliant:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为React在其主页上的一行描述([https://facebook.github.io/react](https://facebook.github.io/react)))非常出色：
- en: '*"A JavaScript library for building user interfaces."*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*“用于构建用户界面的JavaScript库。”*'
- en: It's a library for building user interfaces. This is perfect because as it turns
    out, this is all we want most of the time. I think the best part about this description
    is everything that it leaves out. It's not a mega framework. It's not a full-stack
    solution that's going to handle everything from the database to real-time updates
    over web socket connections. We don't actually want most of these pre-packaged
    solutions, because in the end, they usually cause more problems than they solve.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于构建用户界面的库。这很完美，因为事实证明，这正是我们大多数时候想要的。我认为这个描述最好的部分是它所省略的一切。它不是一个大型框架。它不是一个从数据库到实时更新的Web套接字连接处理一切的全栈解决方案。实际上，我们并不想要大多数这些预打包的解决方案，因为最终它们通常会带来更多问题而不是解决问题。
- en: React is just the view
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React只是视图
- en: 'React is generally thought of as the *view* layer in an application. You might
    have used a library such as Handlebars or jQuery in the past. Just like jQuery
    manipulates UI elements, or Handlebars templates are inserted onto the page, React
    components change what the user sees. The following diagram illustrates where
    React fits in our frontend code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: React通常被认为是应用程序中的*视图*层。你可能以前使用过类似Handlebars或jQuery的库。就像jQuery操作UI元素，或者Handlebars模板被插入到页面上一样，React组件改变了用户所看到的内容。下面的图表说明了React在我们前端代码中的位置：
- en: '![](Images/1df1b7e1-3681-4845-8f34-9e75d6569c10.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1df1b7e1-3681-4845-8f34-9e75d6569c10.png)'
- en: This is literally all there is to React—the core concept. Of course there will
    be subtle variations to this theme as we make our way through the book, but the
    flow is more or less the same. We have some application logic that generates some
    data. We want to render this data to the UI, so we pass it to a React component,
    which handles the job of getting the HTML into the page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是React的全部核心概念。当然，在我们阅读本书的过程中，这个主题可能会有一些微妙的变化，但流程基本上是一样的。我们有一些应用逻辑生成一些数据。我们想要将这些数据渲染到UI上，所以我们将其传递给一个React组件，它负责将HTML放入页面中。
- en: You may wonder what the big deal is, especially since at the surface, React
    appears to be yet another rendering technology. We'll touch on some of the key
    areas where React can simplify application development in the remaining sections
    of the chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你会想知道这有什么大不了的，特别是因为在表面上，React似乎只是另一种渲染技术。在本章的其余部分，我们将涉及React可以简化应用程序开发的一些关键领域。
- en: Simplicity is good
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单就是好
- en: 'React doesn''t have many moving parts to learn about and understand. Internally,
    there''s a lot going on, and we''ll touch on these things here and there throughout
    the book. The advantage to having a small API to work with is that you can spend
    more time familiarizing yourself with it, experimenting with it, and so on. The
    opposite is true of large frameworks, where all your time is devoted to figuring
    out how everything works. The following diagram gives a rough idea of the APIs
    that we have to think about when programming with React:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: React并没有太多需要学习和理解的部分。在内部，有很多事情正在发生，我们将在本书中逐渐涉及这些事情。与大型框架相比，拥有一个小的API可以让你花更多的时间熟悉它，进行实验等等。大型框架则相反，你需要花费大量时间来弄清楚所有东西是如何工作的。下图大致展示了我们在使用React编程时需要考虑的API：
- en: '![](Images/eae05f1a-d2bc-4099-a59e-06c9d921eb2d.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/eae05f1a-d2bc-4099-a59e-06c9d921eb2d.png)'
- en: 'React is divided into two major APIs. First, there''s the React DOM. This is
    the API that''s used to perform the actual rendering on a web page. Second, there''s
    the React component API. These are the parts of the page that are actually rendered
    by React DOM. Within a React component, we have the following areas to think about:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: React分为两个主要的API。首先是React DOM。这是用于在网页上执行实际渲染的API。其次是React组件API。这些是实际由React DOM渲染的页面的部分。在React组件中，我们需要考虑以下几个方面：
- en: '**Data**: This is data that comes from somewhere (the component doesn''t care
    where), and is rendered by the component.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**：这是来自某处的数据（组件不关心来自哪里），并由组件渲染。'
- en: '**Lifecycle**: These are methods that we implement that respond to changes
    in the lifecycle of the component. For example, the component is about to be rendered.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期**：这些是我们实现的方法，用于响应组件生命周期的变化。例如，组件即将被渲染。'
- en: '**Events**: This is code that we write for responding to user interactions.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：这是我们编写的用于响应用户交互的代码。'
- en: '**JSX**: This is the syntax of React components used to describe UI structures.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSX**：这是React组件的语法，用于描述UI结构。'
- en: Don't fixate on what these different areas of the React API represent just yet.
    The takeaway here is that React, by nature, is simple. Just look at how little
    there is to figure out! This means that we don't have to spend a ton of time going
    through API details here. Instead, once you pick up on the basics, we can spend
    more time on nuanced React usage patterns.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时不要过于专注于React API的这些不同领域代表什么。这里要记住的是，React本质上是简单的。看看需要弄清楚的东西是多么少！这意味着我们不必在这里花费大量时间去了解API的细节。相反，一旦掌握了基础知识，我们可以花更多时间来研究React的微妙用法模式。
- en: Declarative UI structure
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明式UI结构
- en: React newcomers have a hard time coming to grips with the idea that components
    mix markup in with their JavaScript. If you've looked at React examples and had
    the same adverse reaction, don't worry. Initially, we're all skeptical of this
    approach, and I think the reason is that we've been conditioned for decades by
    the **separation of concerns** principle. Now, whenever we see things mixed together,
    we automatically assume that this is bad and shouldn't happen.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: React新手很难接受组件将标记与JavaScript混合在一起的想法。如果您看过React示例并有相同的不良反应，不要担心。最初，我们都对这种方法持怀疑态度，我认为原因是我们几十年来一直被**关注分离**原则所影响。现在，每当我们看到事物混合在一起，我们自动假设这是不好的，不应该发生。
- en: The syntax used by React components is called **JSX** (**JavaScript XML**).
    A component renders content by returning some JSX. The JSX itself is usually HTML
    markup, mixed with custom tags for the React components. The specifics don't matter
    at this point; we'll get into details in the coming chapters. What's absolutely
    groundbreaking here is that we don't have to perform little micro-operations to
    change the content of a component.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: React组件使用的语法称为**JSX**（**JavaScript XML**）。组件通过返回一些JSX来呈现内容。JSX本身通常是HTML标记，混合了用于React组件的自定义标记。在这一点上具体细节并不重要；我们将在接下来的章节中详细讨论。这里绝对突破性的是，我们不必执行微操作来改变组件的内容。
- en: Although I won't be following the convention in this book, some React developers
    prefer the `.jsx` extension instead of `.js` for their components.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我在本书中不会遵循惯例，但一些React开发人员更喜欢使用`.jsx`扩展名而不是`.js`来命名他们的组件。
- en: For example, think about using something like jQuery to build your application.
    You have a page with some content on it, and you want to add a class to a paragraph
    when a button is clicked. Performing these steps is easy enough. This is called
    **imperative programming**, and it's problematic for UI development. While this
    example of changing the class of an element in response to an event is simple,
    real applications tend to involve more than three or four steps to make something
    happen.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想想使用类似jQuery来构建应用程序。您有一个页面上有一些内容，当单击按钮时，您想向段落添加一个类。执行这些步骤足够简单。这被称为**命令式编程**，对UI开发来说是有问题的。虽然在响应事件时更改元素的类的这个例子很简单，但实际应用程序往往涉及超过三四个步骤才能实现某些事情。
- en: React components don't require executing steps in an imperative way to render
    content. This is why JSX is so central to React components. The XML-style syntax
    makes it easy to describe what the UI should look like. That is, what are the
    HTML elements that this component is going to render? This is called **declarative
    programming**, and is very well suited for UI development.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: React组件不需要以命令式的方式执行步骤来呈现内容。这就是为什么JSX对于React组件如此重要的原因。XML风格的语法使得描述UI应该是什么样子变得容易。也就是说，这个组件将呈现哪些HTML元素？这被称为**声明式编程**，非常适合UI开发。
- en: Time and data
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间和数据
- en: 'Another area that''s difficult for React newcomers to grasp is the idea that
    JSX is like a static string, representing a chunk of rendered output. This is
    where time and data come into play. React components rely on data being passed
    into them. This data represents the dynamic aspects of the UI. For example, a
    UI element that''s rendered based on a Boolean value could change the next time
    the component is rendered. Here''s an illustration of the idea:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: React新手难以理解的另一个领域是JSX就像一个静态字符串，代表了一块渲染输出。这就是时间和数据发挥作用的地方。React组件依赖于传递给它们的数据。这些数据代表了UI的动态方面。例如，基于布尔值呈现的UI元素可能会在下次组件渲染时发生变化。这里是这个想法的一个例证：
- en: '![](Images/81ae1649-8ce0-4024-a22e-aad9c53a364b.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/81ae1649-8ce0-4024-a22e-aad9c53a364b.png)'
- en: Each time the React component is rendered, it's like taking a snapshot of the
    JSX at that exact moment in time. As your application moves forward through time,
    you have an ordered collection of rendered user interface components. In addition
    to declaratively describing what a UI should be, re-rendering the same JSX content
    makes things much easier for developers. The challenge is making sure that React
    can handle the performance demands of this approach.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每次渲染React组件时，就像在那个确切的时间点拍摄JSX的快照。随着应用程序随时间向前推进，您将拥有一个有序的渲染用户界面组件的集合。除了声明性地描述UI应该是什么之外，重新渲染相同的JSX内容对开发人员来说更加容易。挑战在于确保React能够处理这种方法的性能要求。
- en: Performance matters
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能很重要
- en: 'Using React to build user interfaces means that we can declare the structure
    of the UI with JSX. This is less error-prone than the imperative approach to assembling
    the UI piece by piece. However, the declarative approach does present us with
    one challenge: **performance**.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React构建用户界面意味着我们可以使用JSX声明UI的结构。这比逐个组装UI的命令式方法更不容易出错。然而，声明性方法确实给我们带来了一个挑战：性能。
- en: For example, having a declarative UI structure is fine for the initial rendering,
    because there's nothing on the page yet. So, the React renderer can look at the
    structure declared in JSX, and render it into the DOM browser.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，具有声明性UI结构对于初始渲染是可以的，因为页面上还没有任何内容。因此，React渲染器可以查看JSX中声明的结构，并将其呈现到DOM浏览器中。
- en: '**DOM** stands for **Document Object Model**, and represents HTML in the browser
    after it has been rendered. The DOM API is how JavaScript is able to change content
    on the page.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**DOM**代表**文档对象模型**，表示在浏览器中呈现后的HTML。DOM API是JavaScript能够更改页面上内容的方式。'
- en: 'This concept is illustrated in the following diagram:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念在下图中有所说明：
- en: '![](Images/acea7504-94d5-4687-b33b-48c3e27a766c.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/acea7504-94d5-4687-b33b-48c3e27a766c.png)'
- en: On the initial render, React components and their JSX are no different from
    other template libraries. For instance, Handlebars will render a template to HTML
    markup as a string, which is then inserted into the browser DOM. Where React is
    different from libraries such as Handlebars is when data changes and we need to
    re-render the component. Handlebars will just rebuild the entire HTML string,
    the same way it did on the initial render. Since this is problematic for performance,
    we often end up implementing imperative workarounds that manually update tiny
    bits of the DOM. We end up with a tangled mess of declarative templates and imperative
    code to handle the dynamic aspects of the UI.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始渲染时，React组件及其JSX与其他模板库没有区别。例如，Handlebars将模板呈现为HTML标记作为字符串，然后插入到浏览器DOM中。React与诸如Handlebars之类的库不同之处在于数据发生变化时，我们需要重新渲染组件。Handlebars将重新构建整个HTML字符串，就像在初始渲染时所做的那样。由于这对性能有问题，我们经常需要实现命令式的解决方法，手动更新DOM的一小部分。我们最终会得到一堆混乱的声明性模板和命令式代码来处理UI的动态方面。
- en: We don't do this in React. This is what sets React apart from other view libraries.
    Components are declarative for the initial render, and they stay this way even
    as they're re-rendered. It's what React does under the hood that makes re-rendering
    declarative UI structures possible.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中我们不这样做。这就是React与其他视图库不同的地方。组件在初始渲染时是声明性的，并且即使在重新渲染时也保持这种状态。React在幕后所做的工作使得重新渲染声明性UI结构成为可能。
- en: 'React has something called the **virtual DOM**, which is used to keep a representation
    of the real DOM elements in memory. It does this so that each time we re-render
    a component, it can compare the new content to the content that''s already displayed
    on the page. Based on the difference, the virtual DOM can execute the imperative
    steps necessary to make the changes. So not only do we get to keep our declarative
    code when we need to update the UI, React will also make sure that it''s done
    in a performant way. Here''s what this process looks like:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: React有一个叫做**虚拟DOM**的东西，用于在内存中保持对真实DOM元素的表示。它这样做是为了每次重新渲染组件时，它可以比较新内容和已经显示在页面上的内容。根据差异，虚拟DOM可以执行必要的命令步骤来进行更改。因此，当我们需要更新UI时，我们不仅可以保留我们的声明式代码，React还会确保以高效的方式完成。这个过程看起来是这样的：
- en: '![](Images/cbf9b28a-c045-438e-b0f5-0e77bb63f85d.png)When you read about React,
    you''ll often see words such as **diffing** and **patching**. Diffing means comparing
    old content with new content to figure out what''s changed. Patching means executing
    the necessary DOM operations to render the new content.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/cbf9b28a-c045-438e-b0f5-0e77bb63f85d.png)当你阅读关于React的内容时，你经常会看到诸如**diffing**和**patching**之类的词语。Diffing意味着比较旧内容和新内容，以找出发生了什么变化。Patching意味着执行必要的DOM操作来渲染新内容。'
- en: Like any other JavaScript library, React is constrained by the run-to-completion
    nature of the main thread. For example, if the React internals are busy diffing
    content and patching the DOM, the browser can't respond to user input. As you'll
    see in the last section of this chapter, changes were made to the internal rendering
    algorithms in React 16 to mitigate these performance pitfalls.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 和任何其他JavaScript库一样，React受到主线程运行完成性质的限制。例如，如果React内部正在忙于diffing内容和patching DOM，浏览器就无法响应用户输入。正如你将在本章的最后一节中看到的，React
    16对内部渲染算法进行了更改，以减轻这些性能缺陷。
- en: The right level of abstraction
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适当的抽象水平
- en: Another topic I want to cover at a high level before we dive into React code
    is **abstraction**. React doesn't have a lot of it, and yet the abstractions that
    React implements are crucial to its success.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究React代码之前，我想以高层次来讨论另一个主题，即**抽象**。React并没有太多抽象，但React实现的抽象对其成功至关重要。
- en: In the preceding section, you saw how JSX syntax translates to low-level operations
    that we have no interest in maintaining. The more important way to look at how
    React translates our declarative UI components is the fact that we don't necessarily
    care what the render target is. The render target happens to be the browser DOM
    with React, but it isn't restricted to the browser DOM.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，你看到了JSX语法如何转换为我们不感兴趣的低级操作。观察React如何转换我们的声明式UI组件的更重要的方式是，我们并不一定关心渲染目标是什么。渲染目标恰好是浏览器DOM，但它并不局限于浏览器DOM。
- en: React has the potential to be used for any user interface we want to create,
    on any conceivable device. We're only just starting to see this with React Native,
    but the possibilities are endless. I personally will not be surprised when React
    Toast becomes a thing, targeting toasters that can singe the rendered output of
    JSX on to bread. The abstraction level with React is at the right level, and it's
    in the right place.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: React有潜力用于我们想要创建的任何用户界面，可以在任何可想象的设备上使用。我们只是刚刚开始在React Native中看到这一点，但可能性是无限的。当React
    Toast成为一种事物时，我个人不会感到惊讶，它可以将JSX的渲染输出烤到面包上。React的抽象水平正好，而且位置合适。
- en: 'The following diagram gives you an idea of how React can target more than just
    the browser:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表让你了解React可以针对的不仅仅是浏览器：
- en: '![](Images/25d52f31-da33-4d24-bb90-4c61f319fcc8.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/25d52f31-da33-4d24-bb90-4c61f319fcc8.png)'
- en: 'From left to right, we have React Web (just plain React), React Native, React
    Desktop, and React Toast. As you can see, to target something new, the same pattern
    applies:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右，我们有 React Web（纯粹的 React）、React Native、React Desktop 和 React Toast。正如你所看到的，为了针对新的目标，同样的模式适用：
- en: Implement components specific to the target
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现特定于目标的组件
- en: Implement a React renderer that can perform the platform-specific operations
    under the hood
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一个可以在底层执行特定于平台的操作的 React 渲染器
- en: Profit
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利润
- en: This is obviously an oversimplification of what's actually implemented for any
    given React environment. But the details aren't so important to us. What's important
    is that we can use our React knowledge to focus on describing the structure of
    our user interface on any platform.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然是对任何给定的 React 环境实际实现的过度简化。但这些细节对我们来说并不那么重要。重要的是，我们可以利用我们的 React 知识来专注于描述任何平台上用户界面的结构。
- en: React Toast will probably never be a thing, unfortunately.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，React Toast 可能永远不会成为一种东西。
- en: What's new in React 16
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 16 的新功能
- en: In this section, I want to highlight the major changes and the new features
    of React 16\. I'll go into more detail about the given changes as we encounter
    them in the subsequent chapters throughout the book.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我想强调 React 16 的主要变化和新功能。随着我们在整本书中遇到这些变化，我将更详细地介绍这些变化。
- en: Core architecture revamped
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心架构改进
- en: Perhaps the biggest change in React 16 is to the internal reconciliation code.
    These changes don't impact the way that you interact with the React API. Instead,
    these changes were made to address some pain points that were preventing React
    from scaling up in certain situations. For example, one of the main concepts from
    this new architecture is that of a fiber. Instead of rendering every component
    on the page in a run-to-compilation way, React renders fibers—smaller chunks of
    the page that can be prioritized and rendered asynchronously.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: React 16 中最大的变化可能是内部协调代码。这些变化不会影响您与 React API 交互的方式。相反，这些变化是为了解决一些痛点，这些痛点阻碍了
    React 在某些情况下的扩展。例如，这个新架构的主要概念之一是 fiber。React 不再以运行到编译的方式渲染页面上的每个组件，而是渲染 fiber
    - 页面的较小块，可以优先级和异步渲染。
- en: 'For a more in depth look at this new architecture, these resources should be
    helpful:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要更深入地了解这种新架构，这些资源应该会有所帮助：
- en: '[https://github.com/acdlite/react-fiber-architecture](https://github.com/acdlite/react-fiber-architecture)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/acdlite/react-fiber-architecture](https://github.com/acdlite/react-fiber-architecture)'
- en: '[https://reactjs.org/blog/2017/09/26/react-v16.0.html](https://reactjs.org/blog/2017/09/26/react-v16.0.html)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/blog/2017/09/26/react-v16.0.html](https://reactjs.org/blog/2017/09/26/react-v16.0.html)'
- en: Lifecycle methods
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生命周期方法
- en: React 16 had to revamp some of the lifecycle methods that are available to class
    components. Some lifecycle methods are deprecated and will eventually be removed.
    There are new lifecycle methods to replace them. The main issue is that the deprecated
    lifecycle methods encourage coding in ways that doesn't work well with the new
    async React core.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: React 16 必须重新设计一些可用于类组件的生命周期方法。一些生命周期方法已被弃用，并最终将被移除。有新的生命周期方法来替换它们。主要问题是，弃用的生命周期方法鼓励以一种与新的异步
    React 核心不兼容的方式编码。
- en: For more on these lifecycle methods, visit this page: [https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些生命周期方法的更多信息，请访问此页面：[https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html)。
- en: Context API
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上下文 API
- en: React has always provided a context API for developers, but it was always considered
    experimental. Context is an alternative approach to passing data from one component
    to the next. For example, using properties, you can pass data through a tree of
    components that is several layers deep. The components in the middle of this tree
    don't actually use any of these properties—they're just acting as intermediaries.
    This becomes problematic as your application grows because you have lots of props
    in your source that add to the complexity.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: React一直为开发人员提供上下文API，但它一直被视为实验性的。上下文是将数据从一个组件传递到下一个组件的替代方法。例如，使用属性，您可以通过多层组件树传递数据。这个树中间的组件实际上并不使用任何这些属性，它们只是充当中间人。随着应用程序的增长，这变得有问题，因为您的源代码中有很多属性，增加了复杂性。
- en: The new context API in React 16.3 is more official and provides a way for you
    to supply your components with data at any tree level. You can read more about
    the new context API here: [https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: React 16.3中的新上下文API更加官方，并提供了一种方法，让您在任何树级别为组件提供数据。您可以在这里阅读有关新上下文API的更多信息：[https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html)。
- en: Rendering fragments
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染片段
- en: If your React component renders several sibling elements, say three `<p>` elements
    for instance, you would have to wrap them in a `<div>` because React would only
    allow components to return a single element. The only problem with this approach
    is that it leads to a lot of unnecessary DOM structure. Wrapping your elements
    with `<Fragment>` is the same idea as wrapping them with a `<div>`, except there
    won't be any superfluous DOM elements.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的React组件呈现了几个兄弟元素，例如三个`<p>`元素，您将不得不将它们包装在`<div>`中，因为React只允许组件返回单个元素。这种方法的唯一问题是它会导致大量不必要的DOM结构。使用`<Fragment>`包装您的元素与使用`<div>`包装它们的想法是一样的，只是不会有多余的DOM元素。
- en: You can read more about fragments here: [https://reactjs.org/docs/fragments.html](https://reactjs.org/docs/fragments.html).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里阅读更多关于片段的信息：[https://reactjs.org/docs/fragments.html](https://reactjs.org/docs/fragments.html)。
- en: Portals
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 门户
- en: When a React component returns content, it gets rendered into its parent component.
    Then, that parent's content gets rendered into its parent component and so on,
    all the way to the tree root. There are times when you want to render something
    that specifically targets a DOM element. For example, a component that should
    be rendered as a dialog probably doesn't need to be mounted at the parent. Using
    a portal, you can control specifically where your component's content is rendered.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当React组件返回内容时，它会被渲染到其父组件中。然后，父级的内容被渲染到其父组件中，依此类推，一直到树根。有时，您希望渲染的内容专门针对DOM元素。例如，应该将其呈现为对话框的组件可能不需要挂载到父级。使用门户，您可以控制组件内容的具体渲染位置。
- en: You can read more about portals here: [https://reactjs.org/docs/portals.html](https://reactjs.org/docs/portals.html).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里阅读更多关于门户的信息：[https://reactjs.org/docs/portals.html](https://reactjs.org/docs/portals.html)。
- en: Rendering lists and strings
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染列表和字符串
- en: Prior to React 16, components had to return either an HTML element or another
    React component as its content. This can restrict how you compose your application.
    For example, you might have a component that is responsible for generating an
    error message. You used to have to wrap these strings in HTML tags in order to
    be considered valid React component output. Now you can just return the string.
    Similarly, you can just return a list of strings or a list of elements.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在React 16之前，组件必须返回HTML元素或另一个React组件作为其内容。这可能会限制您如何组合应用程序。例如，您可能有一个负责生成错误消息的组件。以前，您必须将这些字符串包装在HTML标记中，以被视为有效的React组件输出。现在您可以直接返回字符串。同样，您可以直接返回字符串列表或元素列表。
- en: The blog post introducing React 16 has more details on this new functionality: [https://reactjs.org/blog/2017/09/26/react-v16.0.html](https://reactjs.org/blog/2017/09/26/react-v16.0.html).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍React 16的博客文章中有关于这个新功能的更多细节：[https://reactjs.org/blog/2017/09/26/react-v16.0.html](https://reactjs.org/blog/2017/09/26/react-v16.0.html)。
- en: Handling errors
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理错误
- en: Error handling in React can be difficult. Where exactly do you handle errors?
    If a component handles a JavaScript exception and sets an error state on the component
    to true, how do you reset this state? In React 16, there are error boundaries.
    Error boundaries are created by implementing the `componentDidCatch()` lifecycle
    method in a component. This component can then serve as the error boundary by
    wrapping other components. If any of the wrapped components throws an exception,
    the error boundary component can render alternative content.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中处理错误可能很困难。到底在哪里处理错误？如果一个组件处理JavaScript异常并将组件的错误状态设置为true，那么如何重置这个状态？在React
    16中，有错误边界。错误边界是通过在组件中实现`componentDidCatch()`生命周期方法来创建的。然后，这个组件可以作为错误边界来包装其他组件。如果任何被包装的组件抛出异常，错误边界组件可以渲染替代内容。
- en: Having error boundaries in place like this allows you to structure your components
    in a way that best suits your application. You can read more about error boundaries
    here: [https://reactjs.org/docs/error-boundaries.html](https://reactjs.org/docs/error-boundaries.html).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样设置错误边界可以让您以最适合您的应用程序的方式构建组件。您可以在这里阅读更多关于错误边界的信息：[https://reactjs.org/docs/error-boundaries.html](https://reactjs.org/docs/error-boundaries.html)。
- en: Server-side rendering
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端渲染
- en: '**Server-side rendering** (**SSR**) in React can be difficult to wrap your
    head around. You''re rendering on the server, then rendering on the client too?
    Since the SSR pattern has become more prevalent, the React team has made it easier
    to work with in React 16\. In addition, there are a number of internal performance
    gains as well as efficiency gains by enabling streaming rendered content to the
    client.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中的**服务器端渲染**（**SSR**）可能很难理解。你在服务器上渲染，然后在客户端上也渲染？由于SSR模式变得更加普遍，React团队在React
    16中使其更易于使用。此外，通过启用将渲染内容流式传输到客户端，还可以获得一些内部性能和效率方面的收益。
- en: 'If you want to read more about SSR in React 16, I recommend the following resources:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想阅读更多关于React 16中的SSR的内容，我推荐以下资源：
- en: '[https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67](https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67](https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67)'
- en: '[https://reactjs.org/docs/react-dom-server.html](https://reactjs.org/docs/react-dom-server.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/react-dom-server.html](https://reactjs.org/docs/react-dom-server.html)'
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you were introduced to React at a high level. React is a library,
    with a small API, used to build user interfaces. Next, you were introduced to
    some of the key concepts of React. First, we discussed the fact that React is
    simple, because it doesn't have a lot of moving parts. Next, we looked at the
    declarative nature of React components and JSX. Then, you learned that React takes
    performance seriously, and that this is how we're able to write declarative code
    that can be re-rendered over and over. Next, you learned about the idea of render
    targets and how React can easily become the UI tool of choice for all of them.
    Lastly, I gave a rough overview of what's new in React 16.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您以高层次介绍了React。React是一个库，具有一个小的API，用于构建用户界面。接下来，您将介绍React的一些关键概念。首先，我们讨论了React之所以简单，因为它没有太多的移动部分。接下来，我们看了React组件和JSX的声明性质。然后，您了解到React认真对待性能，这就是我们能够编写可以一遍又一遍重新渲染的声明性代码的原因。接下来，您了解了渲染目标的概念，以及React如何轻松成为所有这些目标的首选UI工具。最后，我大致概述了React
    16的新功能。
- en: That's enough introductory and conceptual stuff for now. As we make our way
    toward the end of the book, we'll revisit these ideas. For now, let's take a step
    back and nail down the basics, starting with JSX.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在关于介绍和概念的内容就够了。当我们逐渐接近书的结尾时，我们将重新讨论这些想法。现在，让我们退一步，从JSX开始，打好基础。
- en: Test your knowledge
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的知识
- en: What is a declarative UI structure and how does React support this idea?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是声明式UI结构，React如何支持这个想法？
- en: A declarative UI is built from components that are all declared before they're
    used. React will fail to render if all components aren't declared upfront.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明式UI是由在使用之前声明的所有组件构建的。如果所有组件没有预先声明，React将无法渲染。
- en: Declarative UI structures define what the UI component is instead of worrying
    about how it is defined. React supports this idea by allowing components to be
    declared using JSX syntax.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明式UI结构定义了UI组件是什么，而不用担心它是如何定义的。React通过允许使用JSX语法声明组件来支持这个想法。
- en: Declarative UI structures are entirely optional in React. You can just as easily
    follow an imperative approach.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在React中，声明式UI结构是完全可选的。您也可以轻松地采用命令式方法。
- en: How does React improve rendering performance?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React如何提高渲染性能？
- en: React has a virtual DOM that compares changes made to components' data in memory,
    avoiding the browser DOM when possible. React 16 has a new internal architecture
    that allows rendering to be split up into smaller chunks of work and prioritized.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React有一个虚拟DOM，它在内存中比较组件数据的更改，尽量避免使用浏览器DOM。React 16有一个新的内部架构，允许将渲染分成更小的工作块并设置优先级。
- en: React sets up web workers so that whenever possible, work is parallelized.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React设置了Web Workers，以便尽可能地并行处理工作。
- en: React doesn't focus on performance, instead relying on incremental browser performance
    improvements.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React不专注于性能，而是依赖于增量浏览器性能改进。
- en: When would you render a fragment?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时会渲染一个片段？
- en: Fragments are used when you need a placeholder in your rendered content.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您需要在渲染的内容中使用占位符时，可以使用片段。
- en: Fragments are used to improve the performance of its child elements.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 片段用于提高其子元素的性能。
- en: Fragments are used to avoid having to render unnecessary DOM elements.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 片段用于避免渲染不必要的DOM元素。
- en: Further reading
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Take a look at the following links for more information:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 点击以下链接获取更多信息：
- en: '[https://facebook.github.io/react](https://facebook.github.io/react)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react](https://facebook.github.io/react)'
- en: '[https://github.com/acdlite/react-fiber-architecture](https://github.com/acdlite/react-fiber-architecture)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/acdlite/react-fiber-architecture](https://github.com/acdlite/react-fiber-architecture)'
- en: '[https://reactjs.org/blog/2017/09/26/react-v16.0.html](https://reactjs.org/blog/2017/09/26/react-v16.0.html)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/blog/2017/09/26/react-v16.0.html](https://reactjs.org/blog/2017/09/26/react-v16.0.html)'
- en: '[https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html)'
- en: '[https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html)'
- en: '[https://reactjs.org/docs/fragments.html](https://reactjs.org/docs/fragments.html)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/fragments.html](https://reactjs.org/docs/fragments.html)'
- en: '[https://reactjs.org/docs/portals.html](https://reactjs.org/docs/portals.html)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/portals.html](https://reactjs.org/docs/portals.html)'
- en: '[https://reactjs.org/blog/2017/09/26/react-v16.0.html](https://reactjs.org/blog/2017/09/26/react-v16.0.html)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/blog/2017/09/26/react-v16.0.html](https://reactjs.org/blog/2017/09/26/react-v16.0.html)'
- en: '[https://reactjs.org/docs/error-boundaries.html](https://reactjs.org/docs/error-boundaries.html)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/error-boundaries.html](https://reactjs.org/docs/error-boundaries.html)'
- en: '[https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67](https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67](https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67)'
- en: '[https://reactjs.org/docs/react-dom-server.html](https://reactjs.org/docs/react-dom-server.html)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/react-dom-server.html](https://reactjs.org/docs/react-dom-server.html)'
- en: '[https://github.com/facebook/react/wiki/Sites-Using-React](https://github.com/facebook/react/wiki/Sites-Using-React)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/facebook/react/wiki/Sites-Using-React](https://github.com/facebook/react/wiki/Sites-Using-React)'
