- en: Creating a Movie List Application in React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在React中创建电影列表应用程序
- en: When you bought this book, you'd probably heard of React before and probably
    even tried out some of the code examples that can be found online. This book is
    constructed in such a way that the code examples in each chapter gradually increase
    in complexity, so even if you feel your experience with React is limited, each
    chapter should be understandable if you've read the previous one. When you reach
    the end of this book, you will know how to work with React and its stable features,
    up until version 16.11, and you will also have experience with **React Native**
    and **React 360**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当您购买这本书时，您可能之前已经听说过React，甚至可能尝试过一些在线找到的代码示例。这本书的构建方式是，每一章的代码示例逐渐增加复杂性，因此即使您对React的经验有限，每一章也应该是可以理解的，如果您已经阅读了前一章。当您阅读完本书时，您将了解如何使用React及其稳定功能，直到16.11版本，并且您还将有使用React
    Native和React 360的经验。
- en: This first chapter kicks off with us learning how to build a simple movie list
    application and provides you with an overview of popular movies that we'll fetch
    from an external source. The core concepts for getting started with React will
    be applied to this project, which should be understandable if you've got some
    prior experience in building applications with React. If you haven't worked with
    React before, that's no problem either; this book describes the React features
    that are used in the code examples along the way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先学习如何构建一个简单的电影列表应用程序，并为您提供我们将从外部来源获取的热门电影的概述。入门React的核心概念将应用于这个项目，如果您之前有一些使用React构建应用程序的经验，这应该是可以理解的。如果您之前没有使用过React，也没有问题；本书将沿途描述代码示例中使用的React功能。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up a new project with webpack and React
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用webpack和React设置新项目
- en: Structuring a React project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建React项目结构
- en: Let's dive in!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Project overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this chapter, we will create a movie list application in React that retrieves
    data from a local JSON file and runs in the browser with webpack and Babel. Styling
    will be done using Bootstrap. The application that you'll build will return a
    list of the highest-grossing movies as of 2019, along with some more details and
    a poster for every movie.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在React中创建一个电影列表应用程序，该应用程序从本地JSON文件中检索数据，并在浏览器中使用webpack和Babel运行。样式将使用Bootstrap完成。您将构建的应用程序将返回截至2019年的最卖座电影列表，以及一些更多的细节和每部电影的海报。
- en: The build time is 1 hour.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间为1小时。
- en: Getting started
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: The application for this chapter will be built from scratch and uses assets
    that can be found on GitHub at [https://github.com/PacktPublishing/React-Projects/tree/ch1-assets](https://github.com/PacktPublishing/React-Projects/tree/ch1-assets)[.](https://github.com/PacktPublishing/React-Projects/tree/ch1-assets)
    These assets should be downloaded to your computer so that you can use them later
    on in this chapter. The complete code for this chapter can be found on GitHub
    as well: [https://github.com/PacktPublishing/React-Projects/tree/ch1](https://github.com/PacktPublishing/React-Projects/tree/ch1).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的应用程序将从头开始构建，并使用可以在GitHub上找到的资产：[https://github.com/PacktPublishing/React-Projects/tree/ch1-assets](https://github.com/PacktPublishing/React-Projects/tree/ch1-assets)。这些资产应下载到您的计算机上，以便您稍后在本章中使用。本章的完整代码也可以在GitHub上找到：[https://github.com/PacktPublishing/React-Projects/tree/ch1](https://github.com/PacktPublishing/React-Projects/tree/ch1)。
- en: For applications that are created in this book, you'll need to have at least
    Node.js v10.16.3 installed on your machine so that you can run `npm` commands.
    If you haven't installed Node.js on your machine, please go to [https://nodejs.org/en/download/](https://nodejs.org/en/download/),
    where you can find the download instructions for macOS, Windows, and Linux.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中创建的应用程序，您需要在计算机上安装至少Node.js v10.16.3，以便可以运行`npm`命令。如果您尚未在计算机上安装Node.js，请转到[https://nodejs.org/en/download/](https://nodejs.org/en/download/)，在那里您可以找到macOS、Windows和Linux的下载说明。
- en: 'After installing Node.js, run the following commands in your command line to
    check the installed versions:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Node.js后，在命令行中运行以下命令以检查已安装的版本：
- en: 'For Node.js (should be v10.16.3 or higher):'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Node.js（应为v10.16.3或更高版本）：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For `npm` (should be v6.9.0 or higher):'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`npm`（应为v6.9.0或更高版本）：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Also, you should have installed the **React Developer Tools** plugin (for Chrome
    and Firefox) and added it to your browser. This plugin can be installed from the
    **Chrome Web Store** ([https://chrome.google.com/webstore](https://chrome.google.com/webstore))
    or Firefox Addons ([https://addons.mozilla.org](https://addons.mozilla.org)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您应该已安装了**React Developer Tools**插件（适用于Chrome和Firefox），并将其添加到浏览器中。可以从**Chrome
    Web Store**（[https://chrome.google.com/webstore](https://chrome.google.com/webstore)）或Firefox
    Addons（[https://addons.mozilla.org](https://addons.mozilla.org)）安装此插件。
- en: Creating a movie list application
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建电影列表应用程序
- en: In this section, we will create a new React application from scratch, starting
    with setting up a new project with webpack and Babel. Setting up a React project
    from scratch will help you understand the basic needs of a project, which is crucial
    for any project you create.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从头开始创建一个新的React应用程序，首先设置一个带有webpack和Babel的新项目。从头开始设置一个React项目将帮助您了解项目的基本需求，这对您创建的任何项目都是至关重要的。
- en: Setting up a project
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: Every time you create a new React project, the first step is to create a new
    directory on your local machine. Since you're going to build a movie list application
    in this chapter, name this directory `movieList`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每次创建新的React项目时，第一步是在本地计算机上创建一个新目录。由于您将在本章中构建一个电影列表应用程序，因此将此目录命名为`movieList`。
- en: 'Inside this new directory, execute the following from the command line:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个新目录中，从命令行执行以下操作：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Running this command will create a `package.json` file with the bare minimum
    of information that `npm` needs about this project. By adding the `-y` flag to
    the command, we can automatically skip the steps where we set information such
    as the `name`, `version`, and `description`. After running this command, the following
    `package.json` file will be created:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令将创建一个`package.json`文件，其中包含`npm`对该项目的基本信息的最低要求。通过在命令中添加`-y`标志，我们可以自动跳过设置`name`、`version`和`description`等信息的步骤。运行此命令后，将创建以下`package.json`文件：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, there are no dependencies for `npm` packages since we haven't
    installed any yet. The first package we'll be installing and configuring is webpack,
    which we'll do in the next part of this section.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，由于我们尚未安装任何依赖项，因此`npm`包没有依赖项。我们将在本节的下一部分中安装和配置的第一个包是webpack。
- en: Setting up webpack
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置webpack
- en: 'To run the React application, we need to install webpack 4 (while writing this
    book, the current stable version of webpack is version 4) and webpack CLI as **devDependencies**.
    Let''s get started:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行React应用程序，我们需要安装webpack 4（在撰写本书时，webpack的当前稳定版本为版本4）和webpack CLI作为**devDependencies**。让我们开始吧：
- en: 'Install these packages from `npm` using the following command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从`npm`安装这些包：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next step is to include these packages inside the `package.json` file and
    have them run in our start and build scripts. To do this, add the `start` and
    `build` scripts to our `package.json` file:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是在`package.json`文件中包含这些包，并在我们的启动和构建脚本中运行它们。为此，将`start`和`build`脚本添加到我们的`package.json`文件中：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '"+" symbol is used for the line which is added and "-" symbol is used for the
    line which is removed in the code.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '"+"符号用于添加的行，"-"符号用于删除的行在代码中。'
- en: The preceding configuration will add `start` and `build` scripts to our application
    using webpack. As you can see, `npm start` will run webpack in development mode
    and `npm build` will run webpack in production mode. The biggest difference is
    that running webpack in production mode will minimize our code to decrease the
    size of the project bundle.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置将使用webpack为我们的应用程序添加`start`和`build`脚本。正如您所看到的，`npm start`将在开发模式下运行webpack，而`npm
    build`将在生产模式下运行webpack。最大的区别在于，在生产模式下运行webpack将最小化我们的代码，以减小项目捆绑的大小。
- en: 'Create a new directory inside our project called `src` and create a new file
    inside this directory called `index.js`. Later on, we''ll configure webpack so
    that this file is the starting point for our application. Place the following
    line of code inside this newly created file:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的项目内创建一个名为`src`的新目录，并在这个目录内创建一个名为`index.js`的新文件。稍后，我们将配置webpack，使这个文件成为我们应用程序的起点。将以下代码放入这个新创建的文件中：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we now run the `npm start` or `npm build` command at our command line, webpack
    will start up and create a new directory called `dist`. Inside this directory,
    there will be a file called `main.js` that includes our project code. Depending
    on whether we''ve run webpack in development or production mode, the code will
    be minimized in this file. You can check whether your code is working by running
    the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在在命令行中运行`npm start`或`npm build`命令，webpack将启动并创建一个名为`dist`的新目录。在这个目录里，将会有一个名为`main.js`的文件，其中包含我们的项目代码。根据我们是在开发模式还是生产模式下运行webpack，这个文件中的代码将被最小化。您可以通过运行以下命令来检查您的代码是否工作：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command runs the bundled version of our application and should return the
    `movieList` string as output in the command line. Now, we're able to run JavaScript
    code from the command line. In the next part of this section, we will learn how
    to configure webpack so that it works with React.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令运行我们应用程序的捆绑版本，并应该在命令行中返回`movieList`字符串作为输出。现在，我们可以从命令行运行JavaScript代码。在本节的下一部分中，我们将学习如何配置webpack，使其与React一起工作。
- en: Configuring webpack to work with React
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置webpack以与React一起工作
- en: 'Now that we''ve set up a basic development environment with webpack for a JavaScript
    application, we can start installing the packages we need in order to run any
    React application. These are `react` and `react-dom`, where the former is the
    generic core package for React and the latter provides an entry point to the browser''s
    DOM and renders React. Let''s get started:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为JavaScript应用程序设置了一个基本的开发环境，可以开始安装我们运行任何React应用程序所需的包。这些包括`react`和`react-dom`，前者是React的通用核心包，后者提供了浏览器DOM的入口点，并渲染React。让我们开始吧：
- en: 'Install these packages by executing the following command in the command line:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在命令行中执行以下命令来安装这些包：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Merely installing the dependencies for React is not sufficient to run it since,
    by default, not every browser can read the format (such as ES2015+ or React) that
    your JavaScript code is written in. Therefore, we need to compile the JavaScript
    code into a readable format for every browser.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅安装React的依赖是不足以运行它的，因为默认情况下，并非每个浏览器都能读取您的JavaScript代码所写的格式（如ES2015+或React）。因此，我们需要将JavaScript代码编译成每个浏览器都能读取的格式。
- en: 'For this, we''ll use Babel and its related packages, which can be installed
    as `devDependencies` by running the following command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，我们将使用Babel及其相关包，可以通过运行以下命令将其安装为`devDependencies`：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Next to the Babel core, we'll also install `babel-loader`, which is a helper
    so that Babel can run with webpack and two preset packages. These preset packages
    help determine which plugins will be used to compile our JavaScript code into
    a readable format for the browser (`@babel/preset-env`) and to compile React-specific
    code (`@babel/preset-react`).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Babel核心之外，我们还将安装`babel-loader`，这是一个辅助工具，使得Babel可以与webpack一起运行，并安装两个预设包。这些预设包有助于确定将用于将我们的JavaScript代码编译为浏览器可读格式的插件（`@babel/preset-env`）以及编译React特定代码（`@babel/preset-react`）。
- en: With the packages for React and the correct compilers installed, the next step
    is to make them work with webpack so that they are used when we run our application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了React和正确的编译器包后，下一步是使它们与webpack配合工作，以便在运行应用程序时使用它们。
- en: 'To do this, create a file called `webpack.config.js` in the root directory
    of the project. Inside this file, add the following code:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，在项目的根目录中创建一个名为`webpack.config.js`的文件。在这个文件中，添加以下代码：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The configuration in this file tells webpack to use `babel-loader` for every
    file that has the `.js` extension and excludes `.js` files in the `node_modules`
    directory for the Babel compiler. The actual settings for `babel-loader` are placed
    in a separate file, called `.babelrc`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件中的配置告诉webpack对具有`.js`扩展名的每个文件使用`babel-loader`，并排除Babel编译器中`node_modules`目录中的`.js`文件。`babel-loader`的实际设置放在一个名为`.babelrc`的单独文件中。
- en: 'We can also create the `.babelrc` file in the project''s root directory and
    place the following code inside it, which configures `babel-loader` to use the
    `@babel/preset-env` and `@babel/preset-react` presets when it''s compiling our
    code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以在项目的根目录中创建`.babelrc`文件，并在其中放置以下代码，该代码配置`babel-loader`在编译我们的代码时使用`@babel/preset-env`和`@babel/preset-react`预设：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can also declare the configuration for `babel-loader` directly inside the
    `webpack.config.js` file, but for better readability, we should place it in a
    separate `.babelrc` file. Also, the configuration for Babel can now be used by
    other tools that are unrelated to webpack.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以直接在`webpack.config.js`文件中声明`babel-loader`的配置，但为了更好的可读性，我们应该将其放在一个单独的`.babelrc`文件中。此外，Babel的配置现在可以被与webpack无关的其他工具使用。
- en: The `@babel/preset-env` preset has options defined in it that make sure that
    the compiler uses the latest version of Node.js, so polyfills for features such
    as `async/await` will still be available. Now that we've set up webpack and Babel,
    we can run JavaScript and React from the command line. In the next part of this
    section, we'll create our first React code and make it run in the browser.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`@babel/preset-env`预设中定义了选项，确保编译器使用最新版本的Node.js，因此诸如`async/await`等功能的polyfill仍然可用。现在我们已经设置了webpack和Babel，我们可以从命令行运行JavaScript和React。在本节的下一部分中，我们将创建我们的第一个React代码，并使其在浏览器中运行。'
- en: Rendering a React project
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染React项目
- en: 'Now that we''ve set up React so that it works with Babel and webpack, we need
    to create an actual React component that can be compiled and run. Creating a new
    React project involves adding some new files to the project and making changes
    to the setup for webpack. Let''s get started:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了React，使其可以与Babel和webpack一起工作，我们需要创建一个实际的React组件，以便进行编译和运行。创建一个新的React项目涉及向项目添加一些新文件，并对webpack的设置进行更改。让我们开始吧：
- en: 'Let''s edit the `index.js` file that already exists in our `src` directory
    so that we can use `react` and `react-dom`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们编辑`src`目录中已经存在的`index.js`文件，以便我们可以使用`react`和`react-dom`：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, this file imports the `react` and `react-dom` packages, defines
    a simple component that returns an `h1` element containing the name of your application,
    and has this component rendered with `react-dom`. The last line of code mounts
    the `App` component to an element with the `root` ID in your document, which is
    the entry point of the application.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个文件导入了`react`和`react-dom`包，定义了一个简单的组件，返回一个包含你的应用程序名称的`h1`元素，并使用`react-dom`渲染了这个组件。代码的最后一行将`App`组件挂载到文档中`root`ID的元素上，这是应用程序的入口点。
- en: 'We can create this file by adding a new file called `index.html` to the `src`
    directory with the following code inside it:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过在`src`目录中添加一个名为`index.html`的新文件并在其中添加以下代码来创建此文件：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This adds an HTML heading and body. Within the `head` tag is the title of our
    application and inside the `body` tag is a section with the `id` property `root`.
    This matches with the element we've mounted the `App` component to in the `src/index.js` file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加一个HTML标题和主体。在`head`标签中是我们应用程序的标题，在`body`标签中是一个带有`id`属性`root`的部分。这与我们在`src/index.js`文件中将`App`组件挂载到的元素相匹配。
- en: 'The final step of rendering our React component is extending webpack so that
    it adds the minified bundle code to the `body` tags as `scripts` when running.
    Therefore, we should install the `html-webpack-plugin` package as a devDependency:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染我们的React组件的最后一步是扩展webpack，以便在运行时将压缩的捆绑代码添加到`body`标签作为`scripts`。因此，我们应该将`html-webpack-plugin`包安装为devDependency：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add this new package to the webpack configuration in the `webpack.config.js`
    file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个新包添加到`webpack.config.js`文件中的webpack配置中：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the configuration for `html-webpack-plugin`, we've set the entry point of
    the application as the `index.html`. file. That way, webpack knows where to add
    the bundle to the `body` tag.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在`html-webpack-plugin`的配置中，我们将应用程序的入口点设置为`index.html`文件。这样，webpack就知道在`body`标签中添加捆绑包的位置。
- en: We can also add the configuration of the plugin directly inside the exported
    configuration for webpack by replacing the `htmlPlugin` constant in the exported
    configuration. As our application grows in size, this may make the webpack configuration
    less readable, depending on our preferences.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过在导出的webpack配置中直接添加插件的配置来将这个新包添加到webpack配置中，以替换导出配置中的`htmlPlugin`常量。随着我们的应用程序规模的增长，这可能会使webpack配置变得不太可读，这取决于我们的偏好。
- en: Now, if we run `npm start` again, webpack will start in development mode and
    add the `index.html` file to the `dist` directory. Inside this file, we'll see
    that, inside your `body` tag, a new `scripts` tag has been inserted that directs
    us to our application bundle, that is, the `dist/main.js` file. If we open this
    file in the browser or run `open dist/index.html` from the command line, it will
    return the `movieList` result directly inside the browser. We can do the same
    when running the `npm build` command to start Webpack in production mode; the
    only difference is that our code will be minified.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次运行`npm start`，webpack将以开发模式启动，并将`index.html`文件添加到`dist`目录中。在这个文件中，我们会看到，在你的`body`标签中，一个新的`scripts`标签已经被插入，指向我们的应用程序捆绑包，也就是`dist/main.js`文件。如果我们在浏览器中打开这个文件，或者从命令行运行`open
    dist/index.html`，它将直接在浏览器中返回`movieList`的结果。当运行`npm build`命令以启动生产模式下的Webpack时，我们也可以做同样的操作；唯一的区别是我们的代码将被压缩。
- en: This process can be speeded up by setting up a development server with webpack.
    We'll do this in the final part of this section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用webpack设置开发服务器，可以加快这个过程。我们将在本节的最后部分进行这个操作。
- en: Creating a development server
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建开发服务器
- en: 'While working in development mode, every time we make changes to the files
    in our application, we need to rerun the `npm start` command. Since this is a
    bit tedious, we will install another package called `webpack-dev-server`. This
    package adds the option to force webpack to restart every time we make changes
    to our project files and manages our application files in memory instead of by
    building the `dist` directory. The `webpack-dev-server` package can also be installed
    with `npm`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发模式下工作时，每次对应用程序中的文件进行更改时，我们需要重新运行`npm start`命令。由于这有点繁琐，我们将安装另一个名为`webpack-dev-server`的包。该包添加了选项，强制webpack在我们对项目文件进行更改时重新启动，并将我们的应用程序文件管理在内存中，而不是构建`dist`目录。`webpack-dev-server`包也可以使用`npm`安装：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Also, we need to edit the `start` script in the `package.json` file so that
    it uses `webpack-dev-server` instead of webpack directly when running the `start`
    script:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要编辑`package.json`文件中的`start`脚本，以便在运行`start`脚本时直接使用`webpack-dev-server`而不是webpack：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding configuration replaces webpack in the start scripts with `webpack-dev-server`,
    which runs webpack in development mode. This will create a local server that runs
    the application with the `--open` flag, which makes sure webpack is restarted
    every time an update is made to any of your project files.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置将在启动脚本中用`webpack-dev-server`替换webpack，以开发模式运行webpack。这将创建一个本地服务器，使用`--open`标志运行应用程序，确保每次更新项目文件时webpack都会重新启动。
- en: To enable hot reloading, replace the `--open` flag with the `--hot` flag. This
    will only reload files that have been changed instead of the entire project.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用热重载，将`--open`标志替换为`--hot`标志。这将仅重新加载已更改的文件，而不是整个项目。
- en: Now, we've created the basic development environment for our React application,
    which you'll develop and structure further in the next section of this chapter.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经为React应用程序创建了基本的开发环境，在本章的下一部分中，您将进一步开发和构建它。
- en: Structuring a project
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目结构
- en: 'With the development environment set up, it''s time to start creating the movie
    list application. First let''s have a look at the current structure of the project,
    where two of the directories within our project''s root directory are important:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 设置开发环境后，是时候开始创建电影列表应用程序了。首先让我们看一下项目的当前结构，在项目根目录中有两个重要的目录：
- en: The first directory is called `dist` and is where the output from webpack's
    bundled version of your application can be found
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个目录称为`dist`，其中包含webpack打包版本的应用程序输出
- en: 'The second one is called `src` and includes the source code of our application:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个称为`src`，包括我们应用程序的源代码：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Another directory that can be found in the root directory of our project is
    called `node_modules`. This is where the source files for every package that we
    install using `npm` are placed. It is recommended you don't make any manual changes
    to files inside this directory.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们项目的根目录中还可以找到另一个目录，名为`node_modules`。这是我们使用`npm`安装的每个包的源文件所在的地方。建议您不要手动更改此目录中的文件。
- en: In the following subsections, we will learn how to structure our React projects.
    This structure will be used in the rest of the chapters in this book as well.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的小节中，我们将学习如何构建React项目。这种结构将在本书的其余章节中使用。
- en: Creating new components
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新组件
- en: 'The official documentation for React doesn''t state any preferred approach
    regarding how to structure our React project. Although two common approaches are
    popular within the community: either structuring your files by feature or route
    or structuring them by file type.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: React的官方文档并未说明如何构建React项目的首选方法。尽管社区中有两种常见的方法：按功能或路由结构化文件，或按文件类型结构化文件。
- en: 'The movie list application will use a hybrid approach, where files are structured
    by file type first and by feature second. In practice, this means that there will
    be two types of components: top-level components, which are called containers,
    and low-level components, which relate to these top-level components. Creating
    these components requires that we add the following files and code changes:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 电影列表应用程序将采用混合方法，首先按文件类型结构化，其次按功能结构化。实际上，这意味着将有两种类型的组件：顶层组件，称为容器，和与这些顶层组件相关的低级组件。创建这些组件需要添加以下文件和代码更改：
- en: 'The first step to achieve this structure is creating a new subdirectory of
    `src` called `containers`. Inside this directory, create a file called `List.js`.
    This will be the container for the list containing the movies and contains the
    following content:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现这种结构的第一步是在`src`目录下创建一个名为`containers`的新子目录。在此目录中，创建一个名为`List.js`的文件。这将是包含电影列表的容器，其中包含以下内容：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This container should be included in the entry point of our application so
    that it''s visible. Therefore, we need to include it in the `index.js` file, inside
    the `src` directory, and refer to it:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该在应用程序的入口点中包含此容器，以便它可见。因此，我们需要在`src`目录内的`index.js`文件中包含它，并引用它：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If we still have the development server running (if not, execute the `npm start` command
    again), we''ll see that our application still returns the same result. Our application
    should have the following file structure:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们仍在运行开发服务器（如果没有，请再次执行`npm start`命令），我们将看到我们的应用程序仍然返回相同的结果。我们的应用程序应该具有以下文件结构：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The next step is to add a component to the `List` container, which we''ll use
    later to display information about a movie. This component will be called `Card`
    and should be located in a new `src` subdirectory called `components`, which will
    be placed inside a directory with the same name as the component. We need to create
    a new directory called `components` inside the `src` directory, which is where
    we''ll create another new directory called `Card`. Inside this directory, create
    a file called `Card.js` and add the following code block to the empty `Card` component:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是向`List`容器添加一个组件，稍后我们将使用它来显示有关电影的信息。此组件将被称为`Card`，应位于名为`components`的新`src`子目录中，该子目录将放置在与组件相同名称的目录中。我们需要在`src`目录内创建一个名为`components`的新目录，然后在其中创建一个名为`Card`的新目录。在此目录中，创建一个名为`Card.js`的文件，并将以下代码块添加到空的`Card`组件中：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, import this `Card` component into the container for `List` and return
    this component instead of the `h1` element by replacing the `return` function
    with the following code:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`Card`组件导入`List`容器中，并用以下代码替换`return`函数，返回此组件而不是`h1`元素：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now that we''ve added these directories and the `Card.js` file, our application
    file''s structure will look like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了这些目录和`Card.js`文件，我们的应用程序文件结构将如下所示：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If we visit our application in the browser again, there will be no visible
    changes as our application still returns the same result. But if we open the React
    Developer Tools plugin in our browser, we''ll notice that the application currently
    consists of multiple stacked components:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次在浏览器中访问我们的应用程序，将不会有可见的变化，因为我们的应用程序仍然返回相同的结果。但是，如果我们在浏览器中打开React Developer
    Tools插件，我们会注意到应用程序当前由多个堆叠的组件组成：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the next part of this section, you will use your knowledge of structuring
    a React project and create new components to fetch data about the movies that
    we want to display in this application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的下一部分，您将利用对React项目进行结构化的知识，并创建新组件来获取有关我们想要在此应用程序中显示的电影的数据。
- en: Retrieving data
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索数据
- en: With both the development server and the structure for our project set up, it's
    time to finally add some data to it. If you haven't already downloaded the assets
    in the GitHub repository from the *Getting started* section, you should do so
    now. These assets are needed for this application and contain a JSON file with
    data about the five highest-grossing movies and their related image files.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 随着开发服务器和项目结构的设置完成，现在是时候最终向其中添加一些数据了。如果您还没有从*入门*部分的GitHub存储库中下载资产，现在应该这样做。这些资产是此应用程序所需的，包含有关五部票房最高的电影及其相关图像文件的JSON文件。
- en: The `data.json` file consists of an array with objects containing information
    about movies. This object has the `title`, `distributor`, `year`, `amount`, `img`,
    and `ranking` fields, where the `img` field is an object that has `src` and `alt` fields.
    The `src` field refers to the image files that are also included.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`data.json`文件由一个包含有关电影信息的对象数组组成。该对象具有`title`、`distributor`、`year`、`amount`、`img`和`ranking`字段，其中`img`字段是一个具有`src`和`alt`字段的对象。`src`字段指的是也包含在内的图像文件。'
- en: 'We need to add the downloaded files to this project''s root directory inside
    a different subdirectory, where the `data.json` file should be placed in a subdirectory
    called `assets` and the image files should be placed in a subdirectory called
    `media`. After adding these new directories and files, our application''s structure
    will look like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将下载的文件添加到此项目的根目录中的不同子目录中，`data.json`文件应放在名为`assets`的子目录中，图像文件应放在名为`media`的子目录中。添加了这些新目录和文件后，我们的应用程序结构将如下所示：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This data will be retrieved in the top-level components only, meaning that
    we should add a `fetch` function in the `List` container that updates the state
    for this container and passes it down as props to the low-level components. The
    `state` object can store variables; every time these variables change, our component
    will rerender. Let''s get started:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据将仅在顶层组件中检索，这意味着我们应该在`List`容器中添加一个`fetch`函数，该函数更新此容器的状态并将其作为props传递给低级组件。`state`对象可以存储变量；每当这些变量发生变化时，我们的组件将重新渲染。让我们开始吧：
- en: 'Before retrieving the data for the movies, the `Card` component needs to be
    prepared to receive this information. To display information about the movies,
    we need to replace the content of the `Card` component with the following code:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检索电影数据之前，`Card`组件需要准备好接收这些信息。为了显示有关电影的信息，我们需要用以下代码替换`Card`组件的内容：
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, the logic to retrieve the data can be implemented by adding a `constructor` function
    to the `List` component, which will contain an empty array as a placeholder for
    the movies and a variable that indicates whether the data is still being loaded:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，可以通过向`List`组件添加一个`constructor`函数来实现检索数据的逻辑，该函数将包含一个空数组作为电影的占位符以及一个指示数据是否仍在加载的变量：
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Immediately after setting up the `constructor` function, we should set up a
    `componentDidMount` function, where we''ll fetch the data after the `List` component
    is mounted. Here, we should use an `async/await` function since the `fetch` API
    returns a promise. After fetching the data, `state` should be updated by replacing
    the empty array for data with the movie information and the `loading` variable
    should be set to `false`:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置`constructor`函数之后，我们应该设置一个`componentDidMount`函数，在此函数中，我们将在`List`组件挂载后获取数据。在这里，我们应该使用`async/await`函数，因为`fetch`
    API返回一个promise。获取数据后，应通过用电影信息替换空数组来更新`state`，并将`loading`变量设置为`false`：
- en: '[PRE29]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The previous method that we use to retrieve information from JSON files using
    `fetch` doesn't take into account that the request to this file may fail. If the
    request fails, the `loading` state will remain `true`, meaning that the user will
    keep seeing the loading indicator. If you want to display an error message when
    the request doesn't succeed, you'll need to wrap the `fetch` method inside a `try...catch`
    block, which will be shown later on in this book.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以前使用的从JSON文件中使用`fetch`检索信息的方法并没有考虑到对该文件的请求可能会失败。如果请求失败，`loading`状态将保持为`true`，这意味着用户将继续看到加载指示器。如果您希望在请求失败时显示错误消息，您需要将`fetch`方法包装在`try...catch`块中，这将在本书的后面部分中介绍。
- en: 'Pass this state to the `Card` component, where it can ultimately be shown in
    the `Card` component that we changed in the first step. This component will also
    get a `key` prop, which is required for every component that is rendered within
    an iteration. Since this value needs to be unique, the `id` of the movie is used,
    as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此状态传递给`Card`组件，最终可以在第一步中更改的`Card`组件中显示。此组件还将获得一个`key`属性，这是在迭代中呈现的每个组件都需要的。由于这个值需要是唯一的，所以使用电影的`id`，如下所示：
- en: '[PRE30]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If we visit our application in the browser again, we''ll see that it now shows
    a list of movies, including some basic information and an image. At this point,
    our application will look similar to the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次在浏览器中访问我们的应用程序，我们会看到它现在显示了一系列电影，包括一些基本信息和一张图片。此时，我们的应用程序将看起来类似于以下的屏幕截图：
- en: '![](assets/4b123e00-9d07-40fe-ad51-012675df5fed.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4b123e00-9d07-40fe-ad51-012675df5fed.png)'
- en: As you can see, limited styling has been applied to the application and it's
    only rendering the information that's been fetched from the JSON file. Styling
    will be added in the next part of this section using a package called **Bootstrap**.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，应用程序已经应用了有限的样式，并且只呈现了从JSON文件中获取的信息。在本节的下一部分中，将使用一个名为**Bootstrap**的包来添加样式。
- en: Adding styling
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加样式
- en: 'Showing just the movie information isn''t enough. We also need to apply some
    basic styling to the project. Adding styling to the project is done with the Bootstrap
    package, which adds styling to our components based on class names. Bootstrap
    can be installed from `npm` and requires the following changes to be used:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 仅显示电影信息是不够的。我们还需要对项目应用一些基本样式。使用Bootstrap包可以为我们的组件添加样式，这些样式是基于类名的。Bootstrap可以从`npm`中安装，并需要进行以下更改才能使用：
- en: 'To use Bootstrap, we need to install it from `npm` and place it in this project:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用Bootstrap，我们需要从`npm`中安装它并将其放在这个项目中：
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Also, import this file into the entry point of our React application, called
    `index.js`, so that we can use the styling throughout the entire application:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要将此文件导入到我们的React应用程序的入口点`index.js`中，以便我们可以在整个应用程序中使用样式：
- en: '[PRE32]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If we try and run the development server again, we will receive an error saying
    `"You may need an appropriate loader to handle this file type."`. Because Webpack
    is unable to compile CSS files, we need to add the appropriate loaders to make
    this happen. We can install these by running the following command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次尝试运行开发服务器，我们将收到一个错误，显示“您可能需要一个适当的加载程序来处理此文件类型。”。因为Webpack无法编译CSS文件，我们需要添加适当的加载程序来实现这一点。我们可以通过运行以下命令来安装这些加载程序：
- en: '[PRE33]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We need to add these packages as a rule to the webpack configuration:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将这些包添加为webpack配置的规则：
- en: '[PRE34]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The order in which loaders are added is important since `css-loader` handles
    the compilation of the CSS file and `style-loader` adds the compiled CSS files
    to the React DOM. Webpack reads these settings from right to left and the CSS
    needs to be compiled before it's attached to the DOM.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 加载程序的添加顺序很重要，因为`css-loader`处理CSS文件的编译，而`style-loader`将编译后的CSS文件添加到React DOM中。Webpack从右到左读取这些设置，CSS需要在附加到DOM之前进行编译。
- en: 'The application should run in the browser correctly now and should have picked
    up some small styling changes from the default Bootstrap stylesheet. Let''s make
    some changes to the `index.js` file first and style it as the container for the
    entire application. We need to change the `App` component that is rendered to
    the DOM and wrap the `List` component with a `div` container:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序现在应该在浏览器中正确运行，并且应该已经从默认的Bootstrap样式表中接收到一些小的样式更改。让我们首先对`index.js`文件进行一些更改，并将其样式化为整个应用程序的容器。我们需要更改渲染到DOM的`App`组件，并用`div`容器包装`List`组件：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Inside the `List` component, we need to set the grid to display the `Card` components,
    which display the movie information. Wrap the `map` function and the `Card` component
    with the following code:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`List`组件内部，我们需要设置网格以显示显示电影信息的`Card`组件。使用以下代码包装`map`函数和`Card`组件：
- en: '[PRE36]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The code for the `Card` component is as follows. This will add styling for
    the `Card` component using Bootstrap:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Card`组件的代码如下。这将使用Bootstrap为`Card`组件添加样式：'
- en: '[PRE37]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To add the finishing touches, open the `index.js` file and insert the following
    code to add a header that will be placed above our list of movies in the application:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了添加最后的修饰，打开`index.js`文件并插入以下代码，以添加一个标题，将放置在应用程序中电影列表的上方：
- en: '[PRE38]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If we visit the browser again, we''ll see that the application has had styling
    applied through Bootstrap, which will make it look as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次访问浏览器，我们会看到应用程序已经通过Bootstrap应用了样式，使其看起来如下：
- en: '![](assets/11d65233-61d0-4897-8d37-ec219c48815c.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/11d65233-61d0-4897-8d37-ec219c48815c.png)'
- en: The style rules from Bootstrap have been applied to our application, making
    it look far more complete then it did before. In the final part of this section,
    we'll add the ESLint package to the project, which will make maintaining our code
    easier by synchronizing patterns across the project.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap的样式规则已应用到我们的应用程序中，使其看起来比以前更完整。在本节的最后部分，我们将向项目添加ESLint包，这将通过在整个项目中同步模式来使维护我们的代码更容易。
- en: Adding ESLint
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加ESLint
- en: 'Finally, we will add ESLint to the project to make sure our code meets certain
    standards, for instance, that our code follows the correct JavaScript patterns.
    Adding ESLint requires the following changes:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将添加ESLint到项目中，以确保我们的代码符合某些标准，例如，我们的代码遵循正确的JavaScript模式。添加ESLint需要以下更改：
- en: 'Install ESLint from `npm` by running the following command:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令从`npm`安装ESLint：
- en: '[PRE39]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The first package, called `eslint`, is the core package and helps us identify
    any potentially problematic patterns in our JavaScript code. `eslint-loader` is
    a package that is used by Webpack to run ESLint every time we update our code.
    Finally, `eslint-plugin-react` adds specific rules to ESLint for React applications.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个包叫做`eslint`，是核心包，帮助我们识别JavaScript代码中的潜在问题模式。`eslint-loader`是一个由Webpack使用的包，每次更新代码时都会运行ESLint。最后，`eslint-plugin-react`为React应用程序向ESLint添加特定规则。
- en: 'To configure ESLint, we need to create a file called `.eslintrc.js` in the
    project''s root directory and add the following code to it:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要配置ESLint，我们需要在项目的根目录中创建一个名为`.eslintrc.js`的文件，并将以下代码添加到其中：
- en: '[PRE40]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `env` field sets the actual environment our code will run in and will use
    `es6` functions in it, while the `parserOptions` field adds extra configuration
    for using `jsx` and modern JavaScript. Where things get interesting, however,
    is the `plugins` field, which is where we specify that our code uses `react` as
    a framework. The `extends` field is where the `recommended` settings for `eslint`
    are used, as well as framework-specific settings for React.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`env`字段设置了我们的代码将运行的实际环境，并将在其中使用`es6`函数，而`parserOptions`字段为使用`jsx`和现代JavaScript添加了额外的配置。然而，有趣的地方在于`plugins`字段，这是我们指定我们的代码使用`react`作为框架的地方。`extends`字段是使用`eslint`的`recommended`设置以及React的特定设置的地方。'
- en: We can run the `eslint --init` command to create custom settings, but using
    the preceding settings is recommended, so that we ensure the stability of our
    React code.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行`eslint --init`命令来创建自定义设置，但建议使用前面的设置，以确保我们的React代码的稳定性。
- en: 'If we look at our command line or browser, we will see no errors. However,
    we have to add the `eslint-loader` package to the webpack configuration. In the
    `webpack.config.js` file, add `eslint-loader` next to `babel-loader`:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们查看命令行或浏览器，我们将看不到错误。但是，我们必须将`eslint-loader`包添加到webpack配置中。在`webpack.config.js`文件中，将`eslint-loader`添加到`babel-loader`旁边：
- en: '[PRE41]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'By restarting the development server, webpack will now use ESLint to check
    whether our JavaScript code complies with the configuration of ESLint. In our
    command line (or Console tab in the browser), the following error should be visible:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重新启动开发服务器，webpack现在将使用ESLint来检查我们的JavaScript代码是否符合ESLint的配置。在我们的命令行（或浏览器中的控制台选项卡）中，应该可以看到以下错误：
- en: '[PRE42]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'When using React, it''s recommended that we validate any props we send to components
    since JavaScript''s dynamic type system may lead to situations where variables
    are undefined or have an incorrect type. Our code will work without us having
    to validate the props, but to fix this error we have to install the `prop-types` package,
    which used to be a feature of React but was later deprecated. Let''s get started:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用React时，建议我们验证发送到组件的任何props，因为JavaScript的动态类型系统可能会导致变量未定义或类型不正确的情况。我们的代码将在不验证props的情况下工作，但为了修复此错误，我们必须安装`prop-types`包，这曾经是React的一个功能，但后来被弃用了。让我们开始吧：
- en: 'The package that we use to check for prop types can be installed from `npm`:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用于检查prop类型的包可以从`npm`安装：
- en: '[PRE43]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, we can validate `propTypes` in our component by importing the package
    into the `Card` component and adding the validation to the bottom of this file:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过将该包导入`Card`组件并将验证添加到该文件的底部来验证组件中的`propTypes`。
- en: '[PRE44]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'If we look at the command line again, we''ll see that the missing `propTypes`
    validation error has disappeared. However, the validation for our props still
    isn''t very specific. We can make this more specific by also specifying the `propTypes`
    of all the fields of the `movie` prop:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们再次查看命令行，我们会发现缺少的`propTypes`验证错误已经消失了。但是，我们的props的验证仍然不是很具体。我们可以通过还指定`movie`
    prop的所有字段的`propTypes`来使其更具体：
- en: '[PRE45]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We can also indicate which props are required for React to render the component
    by adding `isRequired` to the `propTypes` validation.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过将`isRequired`添加到`propTypes`验证中来指示`React`渲染组件所需的props。
- en: Congratulations! You have created a basic React application from scratch using
    React, ReactDom, webpack, Babel, and ESLint.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经使用React、ReactDom、webpack、Babel和ESLint从头开始创建了一个基本的React应用程序。
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you've created a movie list application for React from scratch
    and learned about core React concepts. This chapter started with you creating
    a new project with webpack and Babel. These libraries help you compile and run
    your JavaScript and React code in the browser with minimal setup. Then, we described
    how to structure a React application. This structure will be used throughout this
    book. The principles that were applied provided you with the basics from which
    to create React applications from nothing and structure them in a scalable way.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您从头开始为React创建了一个电影列表应用程序，并了解了核心React概念。本章以您使用webpack和Babel创建一个新项目开始。这些库可以帮助您以最小的设置编译和在浏览器中运行JavaScript和React代码。然后，我们描述了如何构建React应用程序的结构。这种结构将贯穿本书始终。应用的原则为您提供了从零开始创建React应用程序并以可扩展的方式构建它们的基础。
- en: If you've been working with React before, then these concepts probably weren't
    that hard to grasp. If you haven't, then don't worry if some concepts felt strange
    to you. The upcoming chapters will build upon the features that you used in this
    chapter, giving you enough time to fully understand them.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前已经使用过React，那么这些概念可能不难理解。如果没有，那么如果某些概念对您来说感觉奇怪，也不用担心。接下来的章节将建立在本章中使用的功能之上，让您有足够的时间充分理解它们。
- en: The project you'll build in the next chapter will focus on creating reusable
    React components with more advanced styling. This will be available offline since
    it will be set up as a **Progressive Web Application** (**PWA**).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章中您将构建的项目将专注于使用更高级的样式创建可重用的React组件。由于它将被设置为**渐进式Web应用程序**（**PWA**），因此将可以离线使用。
- en: Further reading
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Thinking in React [https://reactjs.org/docs/thinking-in-react.html](https://reactjs.org/docs/thinking-in-react.html)
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在React中思考 [https://reactjs.org/docs/thinking-in-react.html](https://reactjs.org/docs/thinking-in-react.html)
- en: Bootstrap [https://getbootstrap.com/docs/4.3/getting-started/introduction/](https://getbootstrap.com/docs/4.3/getting-started/introduction/)
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap [https://getbootstrap.com/docs/4.3/getting-started/introduction/](https://getbootstrap.com/docs/4.3/getting-started/introduction/)
- en: ESLint [https://eslint.org/docs/user-guide/getting-started](https://eslint.org/docs/user-guide/getting-started)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESLint [https://eslint.org/docs/user-guide/getting-started](https://eslint.org/docs/user-guide/getting-started)
