- en: Creating a Personalized React Development Ecosystem
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建个性化的React开发生态系统
- en: When people hear React, they think of a focused library used for efficiently
    rendering user interfaces. When people hear framework, they think of a large system
    that might have a few useful tools within it but is otherwise a bloated mess.
    They're correct about frameworks for the most part, but saying that React isn't
    a framework is a little misleading.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们听到React时，他们会想到一个专注于高效渲染用户界面的库。当人们听到框架时，他们会想到一个庞大的系统，其中可能有一些有用的工具，但其他方面都是臃肿的混乱。在大多数情况下，他们对框架是正确的，但说React不是框架有点误导人。
- en: If you take React out of the box and try to do any meaningful development with
    it, you'll promptly hit a wall. This is because instead of being distributed as
    a monolithic framework, React is better described as a core library surrounded
    by an ecosystem of tools.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你拿出React并尝试进行任何有意义的开发，你很快就会遇到障碍。这是因为React不是作为一个单一的框架分发的，而是更好地描述为一个核心库，周围有一系列工具的生态系统。
- en: The advantage of a framework is that you can install the core library along
    with the supported tooling in one shot. The downside is that every project is
    different and you can't be sure what tools you need versus those that you won't.
    Another advantage to having an ecosystem of tools is that they can evolve independently
    from one another; you don't have to wait for a new release of the entire framework
    to get an enhancement for one of the tools that your project uses.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 框架的优势在于你可以一次性安装核心库以及支持的工具。缺点是每个项目都不同，你无法确定你需要哪些工具，哪些不需要。另一个优势是拥有一系列工具的生态系统可以独立演进；你不必等待整个框架的新版本来增强你的项目所使用的工具之一。
- en: 'The aim of this book is to show you how to best utilize the tooling ecosystem
    surrounding React. In this chapter, you''ll be introduced to the concept of React
    tooling by learning the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的目的是向你展示如何最好地利用围绕React的工具生态系统。在本章中，你将通过学习以下内容来介绍React工具的概念：
- en: React without tooling
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有工具的React
- en: Introduction to tooling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具介绍
- en: The tools covered in this book
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书涵盖的工具
- en: Deciding which tools are needed for your project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定项目所需的工具
- en: What's included with React
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React包含了什么
- en: Before we dive into tooling discussions, let's make sure that we're on the same
    page about what React is, and what actually comes with the package when you install
    it. There are two core React packages required for running React web applications.
    We'll take a look at these now to provide you with some context for thinking about
    React tooling.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论工具之前，让我们确保我们对React是什么，以及在安装时实际包含了哪些内容有相同的理解。运行React web应用程序需要两个核心React包。我们现在来看一下这些，为你提供一些关于思考React工具的背景知识。
- en: Components that compare render trees
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较渲染树的组件
- en: The first part of the React core is the package called `react`. This package
    is what we interface with directly when writing React components. It's a small
    API—the only time we really use it is when we're creating components with state
    and we need to extend the `Component` class.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: React核心的第一部分是名为`react`的包。这个包是我们在编写React组件时直接接触的。它是一个小型API——我们真正使用它的唯一时机是在创建带有状态并且需要扩展`Component`类的组件时。
- en: 'There''s a lot going on under the hood with the `react` package. This is where
    the render tree resides and is responsible for efficiently rendering UI elements.
    Another name for the render tree is the virtual DOM. The idea is that you only
    have to write JSX markup that describe the UI elements that you want to render
    while the render tree takes care of everything else:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`react`包的内部有很多工作。这就是渲染树所在的地方，负责高效地渲染UI元素。渲染树的另一个名称是虚拟DOM。其思想是你只需要编写描述要渲染的UI元素的JSX标记，而渲染树会处理其他一切：'
- en: '![](Images/3fd72d11-9b79-4d85-8bd4-cd8f68547a27.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3fd72d11-9b79-4d85-8bd4-cd8f68547a27.png)'
- en: What you see in this diagram are the components that your code directly interfaces
    with, and the render tree that takes care of handling presentational changes that
    result from components that change state. The render tree and everything that
    it does for you is the key value proposition of React.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图表中，你看到的是你的代码直接与之交互的组件，以及处理由改变状态的组件导致的呈现变化的渲染树。渲染树及其为你做的一切是React的关键价值主张。
- en: The DOM render target
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM渲染目标
- en: The second part of the React core is the **Document Object Model** (**DOM**)
    itself. In fact, the name virtual DOM is rooted in the idea that React is creating
    DOM representations in JavaScript before it actually talks to the DOM APIs. However,
    the render tree is a better name because React is creating an **AST** (short for
    **Abstract Syntax Tree**) based on the React components and their states. This
    is why the same React library is able to work with projects like React Native.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: React核心的第二部分是**文档对象模型**（**DOM**）本身。事实上，虚拟DOM的名称根植于React在实际与DOM API交互之前在JavaScript中创建DOM表示。然而，渲染树是一个更好的名称，因为React基于React组件及其状态创建了一个**AST**（抽象语法树）。这就是为什么相同的React库能够与React
    Native等项目一起工作。
- en: 'The `react-dom` package is used to actually translate the render tree into
    DOM elements in the browser by directly communicating with the browser DOM APIs.
    Here''s what the previous diagram looks like with `react-dom` included:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-dom`包用于通过直接与浏览器DOM API通信，将渲染树实际转换为DOM元素。以下是包括`react-dom`的先前图表的样子：'
- en: '![](Images/8e5ffcbe-79f4-48a4-b513-7bccb31b8ae7.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8e5ffcbe-79f4-48a4-b513-7bccb31b8ae7.png)'
- en: This is a nice architecture—it means that you can substitute `react-dom` for
    another render target with little effort. As you can see, the core layer of React
    is minimal. No wonder it's so popular—we can create user interfaces with declarative
    code that are easy to maintain and are efficient with little effort on our part.
    With this in mind, let's shift our focus over to the tooling that makes all of
    this possible.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的架构——这意味着你可以轻松地用另一个渲染目标替换`react-dom`。正如你所看到的，React的核心层是最小的。难怪它如此受欢迎——我们可以使用声明性代码创建易于维护且高效的用户界面，而我们的工作量很少。有了这个想法，让我们把注意力转向使所有这些成为可能的工具。
- en: Introducing tooling?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍工具？
- en: Tooling isn't unique to React. Every project has its own set of tools that handle
    tasks related to the core technology so that you don't have to. With frameworks,
    tooling is baked into the project for the most part. With libraries like React,
    you get to choose the tools you need versus those that don't play a role in your
    project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 工具并不是React独有的。每个项目都有自己的一套工具，处理与核心技术相关的任务，这样你就不必自己去处理。对于框架，工具大部分都已经内置到项目中。对于像React这样的库，你可以选择你需要的工具，而不需要那些在你的项目中没有作用的工具。
- en: Now that you know what the React core is, what makes up the rest of the React
    ecosystem?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道了React核心是什么，那么React生态系统的其余部分是什么呢？
- en: Ancillary tasks outside of React
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React之外的辅助任务
- en: Framework bloat is a major turn-off for a lot of people. The reason it feels
    like bloat is because they have a lot of features that you'll likely never use.
    React handles this well because it has a clear distinction between the core library
    and anything else, including things that are essential for React development.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 框架膨胀是许多人的主要抵触因素。之所以感觉膨胀，是因为它们有许多你可能永远不会使用的功能。React处理这一点很好，因为它清楚地区分了核心库和其他任何东西，包括对React开发至关重要的东西。
- en: 'There are two observations I''ve made about React and the way it''s positioned
    within its surrounding ecosystem:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 关于React及其在周围生态系统中的定位，我做出了两点观察：
- en: It's easier to deploy apps that depend on a simple library instead of a framework
    where all batteries are included
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖于简单库而不是包含所有功能的框架的应用程序更容易部署
- en: It's easier to think about application development when you have tools that
    stay out of the way for the most part
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你有工具大部分时间都不会妨碍你的时候，就更容易思考应用程序开发了。
- en: In other words, you don't have to use the majority of React tools, but some
    of them are incredibly helpful.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，你不必使用大部分React工具，但其中一些工具非常有帮助。
- en: Any given tool is external to the library you're working with; it's essential
    to remember this. Tools exist to automate something that would otherwise suck
    more development time out of our lives. Life is too short to manually do things
    that can be done for us. I repeat, life is too short for tasks that software can
    perform better than us. If you're a React developer, take comfort in the fact
    that there are tools out there for all of the important things that you need to
    do but don't have time to do.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 任何给定的工具都是外部的，与你正在使用的库是分开的；这一点很重要。工具的存在是为了自动化一些本来会占用我们更多开发时间的事情。生命太短暂，没有时间手动做可以由软件代替的事情。我重申一遍，生命太短暂，没有时间做软件可以比我们做得更好的任务。如果你是一个React开发者，可以放心，有工具可以帮你完成所有重要的事情，而你自己没有时间去做。
- en: A construction site analogy
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建筑工地的类比
- en: Perhaps, the ultimate motivator for taking tooling seriously is thinking about
    what life would be like without the tools that we depend on as professionals.
    The construction industry is more mature than software and serves as a great example.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 也许，认真对待工具的最终动机是想象一下，如果没有我们作为专业人士所依赖的工具，生活会是什么样子。建筑行业比软件更成熟，并且是一个很好的例子。
- en: Imagine that you are part of a team that's responsible for building a house—an
    immensely complex undertaking with many moving parts. Now, think about everything
    that you have to work with. Let's start with the materials themselves. Anything
    that doesn't have to be assembled on site, isn't. When you're building a house,
    many components show up partially assembled. For example, sections of roof framing
    or mixed cement shows up when it's needed.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你是一个负责建造房屋的团队的一部分，这是一个非常复杂的任务，有许多组成部分。现在，想想你要使用的所有东西。让我们从材料本身开始。任何不必在现场组装的东西都不会在现场组装。当你建造房屋时，许多部件会部分组装好。例如，屋顶框架的部分或混凝土在需要时出现。
- en: Then there are actual tools that builders use when putting the house together—simple
    screwdrivers, hammers, and measuring tapes are taken for granted. What would construction
    life be like without the ability to create components offsite or the availability
    of tools to work with everyday construction materials? Would it make the construction
    of a house impossible? No. Would the process of building it become some unbearably
    expensive and slow that it'd likely be cancelled before completed? Yes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是建筑工人在组装房屋时使用的实际工具——简单的螺丝刀、锤子和卷尺被视为理所当然。如果没有能力在现场制造部件或使用日常建筑材料的工具，建筑生活会是什么样子呢？建造房屋会变得不可能吗？不会。建造过程会变得非常昂贵和缓慢，以至于很可能在完成之前就会被取消吗？会。
- en: Unfortunately, in the software world, we're only beginning to understand how
    important tooling is. It doesn't matter that we have all the materials and knowledge
    to build the house of the future. If we don't have the right tooling, it might
    never be built.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在软件世界中，我们才刚刚开始意识到工具的重要性。如果我们没有正确的工具，就算拥有建造未来之屋所需的所有材料和知识也没有用。
- en: JSX needs to be compiled to JavaScript
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSX需要被编译成JavaScript
- en: React uses a special syntax that resembles HTML to declare components. This
    markup, called JSX, is embedded in the component JavaScript and needs to be compiled
    to JavaScript before it's usable by the browser.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: React使用一种类似HTML的特殊语法来声明组件。这种标记语言叫做JSX，它嵌入在组件的JavaScript中，在可被浏览器使用之前需要被编译成JavaScript。
- en: 'The most common approach is to use Babel—a JavaScript compiler—along with a
    JSX plugin:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的方法是使用Babel——一个JavaScript编译器——以及一个JSX插件：
- en: '![](Images/d382e4e0-f43a-40cb-95b1-6f5f50439286.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d382e4e0-f43a-40cb-95b1-6f5f50439286.png)'
- en: The trick is finding a way to make this compilation step as seamless as possible.
    As a developer, you shouldn't need to concern yourself with the JavaScript output
    produced by Babel.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是找到一种使这个编译步骤尽可能无缝的方法。作为开发人员，你不应该需要关心Babel产生的JavaScript输出。
- en: Newer JavaScript language features need to be transpiled
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的JavaScript语言特性需要被转译
- en: 'Similar to compiling JSX to JavaScript, newer JavaScript language features
    need to be compiled into versions that are widely supported by browsers everywhere.
    In fact, once you figure out how to compile JSX to JavaScript, the same process
    is used to transpile between different versions of JavaScript:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与将JSX编译成JavaScript类似，新的JavaScript语言特性需要被编译成广泛支持的浏览器版本。事实上，一旦你弄清楚了如何将JSX编译成JavaScript，同样的过程也可以用来在不同版本的JavaScript之间进行转译：
- en: '![](Images/c5c1a2d2-8696-4ee7-bb0b-5f79eca3f567.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c5c1a2d2-8696-4ee7-bb0b-5f79eca3f567.png)'
- en: You shouldn't have to worry about the transformed output of your JSX or JavaScript
    compilation. These are activities better suited for tools to handle, so that you
    can focus on application development.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你不应该担心你的JSX或JavaScript编译的转换输出。这些活动更适合由工具来处理，这样你就可以专注于应用程序开发。
- en: Hot module loading to enable application development
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热模块加载以实现应用程序开发
- en: Something that's unique to web application development is that it's mostly static
    content that's loaded into the browser. The browser loads the HTML, followed by
    any scripts which are then run to completion. There's a long-running process that
    continuously refreshes the page based on the state of the application—everything
    is over a network.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序开发的独特之处在于，它主要是静态内容，加载到浏览器中。浏览器加载HTML，然后加载任何脚本，然后运行完成。有一个长时间运行的过程，根据应用程序的状态不断刷新页面——一切都是通过网络进行的。
- en: 'As you can imagine, this is especially annoying during development when you
    want the see the results of your code changes as they''re introduced. You don''t
    want to have to manually refresh the page every time you do something. This is
    where hot module replacement comes into play. Essentially, HMR is a tool that
    listens for code changes, and when it detects one, it sends a new version of the
    module to the browser:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所想象的那样，在开发过程中这是特别令人恼火的，当你想要看到代码更改的结果时。你不想每次做一些事情都要手动刷新页面。这就是热模块替换发挥作用的地方。基本上，HMR是一个监听代码更改的工具，当它检测到更改时，它会向浏览器发送模块的新版本：
- en: '![](Images/6d12572f-842d-44d5-b59a-c5147690afcf.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6d12572f-842d-44d5-b59a-c5147690afcf.png)'
- en: Even with a tool like Webpack and its HMR component, it's time-consuming and
    error-prone to get this setup working correctly, even for simple React projects.
    Thankfully, there's tooling that hides these setup details from developers today.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用了像Webpack及其HMR组件这样的工具，为了使这个设置正确工作，即使对于简单的React项目也是耗时且容易出错的。幸运的是，今天有工具可以隐藏这些设置细节。
- en: Running unit tests automatically
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动运行单元测试
- en: 'You know that you need to write tests for your components. It''s not that you
    don''t want to write the actual tests; it''s that setting them up so that they''re
    able to run can be a pain. The Jest unit test tool simplifies this because it
    knows where tests can be found and can run them:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道你需要为你的组件编写测试。并不是你不想编写实际的测试；而是设置它们能够运行可能会很麻烦。Jest单元测试工具简化了这一点，因为它知道在哪里找到测试并且可以运行它们：
- en: '![](Images/14dadefa-9bce-4892-a641-114900a5f804.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/14dadefa-9bce-4892-a641-114900a5f804.png)'
- en: With Jest, we have a place where all of our unit tests go, and each depend on
    the component that they're testing. This tool knows where to find these tests
    and how to run them. The result is that we get nice unit test and code coverage
    output when we need it. There is no overhead beyond actually writing the tests.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Jest，我们有一个地方可以放置所有的单元测试，每个测试都依赖于它们所测试的组件。这个工具知道在哪里找到这些测试以及如何运行它们。结果是，当我们需要时，我们可以得到很好的单元测试和代码覆盖率输出。除了实际编写测试之外，没有额外的开销。
- en: Thinking about type safety
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑类型安全性
- en: JavaScript isn't a type-safe language. Type safety can vastly improve the quality
    of applications by eliminating the possibility of runtime errors. Once again,
    we can use tooling to make type-safe React applications. The Flow tool can examine
    your code, look for type annotations, and notify you when errors are found.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript不是一种类型安全的语言。类型安全性可以通过消除运行时错误的可能性大大提高应用程序的质量。我们可以再次使用工具来创建类型安全的React应用程序。Flow工具可以检查你的代码，查找类型注释，并在发现错误时通知你。
- en: Linting for code quality
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码质量检查
- en: It's one thing to have an application that works; it's another to have an application
    that works and has maintainable code that doesn't make people's eyes bleed. The
    best way to achieve measurable code quality is to adopt a standard, like Airbnb's
    ([https://github.com/airbnb/javascript](https://github.com/airbnb/javascript)).
    The best way to enforce coding standards is to use a linter. With React applications,
    the preferred linting tool is ESLint ([https://eslint.org/](https://eslint.org/)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个能够工作的应用程序是一回事；拥有一个既能工作又具有可维护代码的应用程序是另一回事。实现可衡量的代码质量的最佳方法是采用标准，比如Airbnb的（[https://github.com/airbnb/javascript](https://github.com/airbnb/javascript)）。强制执行编码标准的最佳方法是使用一个代码检查工具。对于React应用程序，首选的代码检查工具是ESLint（[https://eslint.org/](https://eslint.org/)）。
- en: Isolating component development environments
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隔离组件开发环境
- en: 'Perhaps the most overlooked tool of React developers is Storybook, which is
    used for isolated component development. You don''t realize it until you''re developing
    your component, but the application can get in the way. Sometimes, you just want
    to see how the component looks and behaves all on its own:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 也许React开发者最容易忽视的工具是Storybook，它用于隔离组件开发。在开发组件时，你可能意识不到，但应用程序可能会妨碍你。有时，你只想看看组件是什么样子，以及它是如何行为的。
- en: '![](Images/28eee3d6-3e93-4332-9ded-55c40c924acd.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/28eee3d6-3e93-4332-9ded-55c40c924acd.png)'
- en: With a tool like Storybook, it's trivial to provide an isolated context for
    your component, free of distractions from other components.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类似Storybook这样的工具，为组件提供一个与其他组件无关的隔离环境是微不足道的。
- en: Providing a browser-based debugging environment
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供基于浏览器的调试环境
- en: Sometimes, looking at unit test output and source code isn't enough to figure
    out a problem that you're experiencing. Instead, you need to see what's going
    on as you interact with the application itself. In the browser, you install React
    tooling that makes it easy to inspect React components as they are related to
    rendered HTML content.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，查看单元测试输出和源代码并不足以解决您正在经历的问题。相反，您需要查看与应用程序本身的交互情况。在浏览器中，您可以安装React工具，以便轻松检查与呈现的HTML内容相关的React组件。
- en: React also has some built-in performance monitoring capabilities that extend
    the abilities of the browser developer tools. You can use them to examine and
    profile your components at a low level.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: React还具有一些内置的性能监控功能，可以扩展浏览器开发人员工具的功能。您可以使用它们来检查和分析您的组件的低级别情况。
- en: Deploying React applications
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署React应用程序
- en: 'When you''re ready to deploy your React application, it isn''t as simple as
    producing a build and distributing it. In fact, you might not even distribute
    it at all if you''re building a hosted service. Regardless of what the end use
    case of your application is, there are likely going to be several moving parts
    in addition to the React frontend. Increasingly, containerizing the main processes
    that make up your application stack is the preferred approach:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当您准备部署React应用程序时，它并不像简单地生成构建并分发那样简单。实际上，如果您正在构建托管服务，您甚至可能根本不会分发它。无论您的应用程序的最终用例是什么，除了React前端之外，可能还会有几个移动部分。越来越多地，将构成应用程序堆栈的主要进程容器化是首选方法：
- en: '![](Images/6ab65be2-2dc4-4289-85dc-adc0e84f0910.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6ab65be2-2dc4-4289-85dc-adc0e84f0910.png)'
- en: In order to create and deploy React application stacks like this, you'll rely
    on tools like Docker, especially when it comes time to automate the various deployment
    scenarios of your project.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建和部署像这样的React应用程序堆栈，您将依赖于诸如Docker之类的工具，特别是在自动化项目的各种部署场景时。
- en: Choosing the right tools
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择正确的工具
- en: If the tooling in the preceding section seemed like a bit much for a single
    project, don't sweat it. Trying to leverage every possible React tool at the same
    time is always a mistake. Address one problem at a time, starting with the essentials.
    As your project moves forward, add in the optional tools to expand your toolset.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上一节中的工具对于单个项目来说似乎有点过多，不要担心。试图同时利用每个可能的React工具总是一个错误。从基本工具开始，逐个解决问题。随着项目的推进，逐渐添加可选工具以扩展您的工具集。
- en: Essential tools
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本工具
- en: There are some React tools that you simply can't live without. For example,
    browsers don't understand JSX syntax, so this needs to be compiled to JavaScript.
    As you write code, you'll want to lint it to make sure that basic mistakes aren't
    missed, and you'll want to run your unit tests. If you try hard enough, you might
    be able to get by without these tools. But that's the thing—you would spend more
    effort not using a given tool than to simply embrace it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些React工具是您简直无法离开的。例如，浏览器无法理解JSX语法，因此需要将其编译为JavaScript。在编写代码时，您会希望对其进行lint处理，以确保不会错过基本错误，并且您会希望运行单元测试。如果努力尝试，您可能可以在没有这些工具的情况下完成。但问题是，您将花费更多的精力来不使用给定的工具，而不是简单地接受它。
- en: As a starting point, find the minimal set of React tools that allow you to make
    progress. Once your progress noticeably slows, it's time to consider introducing
    additional tools.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 作为起点，找到一组最小的React工具，使您能够取得进展。一旦您的进展明显放缓，就是时候考虑引入其他工具了。
- en: Optional tools
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可选工具
- en: Optional tools are things that you might not get any real value from. For example,
    you probably won't reap enormous benefits from using Flow to check for type safety
    or Storybook to isolate component development at the very beginning of a project.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可选工具是你可能不会从中获得任何真正价值的东西。例如，你可能不会在项目开始阶段就使用Flow来检查类型安全性或Storybook来隔离组件开发而获得巨大的好处。
- en: The key thing to remember is that any React tool is optional, and no decisions
    are permanent. You can always bring in Flow later on, and you can always ditch
    Storybook if isolated component development isn't your thing.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要记住的关键是任何React工具都是可选的，没有永久的决定。你可以随时引入Flow，如果隔离组件开发不是你的菜，你也可以随时放弃Storybook。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced you to the concept of tooling in the React ecosystem.
    You learned that React, at its core, is a simple library and that it depends on
    the use of several tools to be of any value in the real world. Frameworks try
    to provide all of the tooling that you'll ever need for your project. While convenient,
    the needs of the framework users are difficult to predict and can be a distraction
    from core functionality.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了React生态系统中工具的概念。你了解到React本质上是一个简单的库，它依赖于使用多种工具才能在现实世界中产生任何价值。框架试图为你的项目提供所有你需要的工具。虽然方便，但框架用户的需求很难预测，可能会分散注意力，而不是专注于核心功能。
- en: Next, you learned that tooling in React can be a challenge because as a React
    developer, you're responsible for choosing the right tools and managing their
    configuration. You then got an overview of the tooling that you'll learn about
    in more detail throughout the remainder of this book. Lastly, you learned that
    some tools are critical for React development and you'll need to get them set
    up right away. Others are optional, and you might not start using them till there's
    an actual need later on in the life of the project.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你了解到React中的工具可能是一个挑战，因为作为React开发者，你需要负责选择合适的工具并管理它们的配置。然后，你对本书剩余部分将更详细学习的工具进行了概述。最后，你了解到一些工具对于React开发是至关重要的，你需要立即设置它们。其他工具是可选的，你可能直到项目后期真正需要时才开始使用它们。
- en: In the next chapter, you'll use the *Create React App* tool to bootstrap a React
    project.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将使用*Create React App*工具来启动一个React项目。
