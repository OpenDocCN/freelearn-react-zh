- en: Ready to Cache
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好进行缓存
- en: We've made enormous strides in the performance of our application. Our JavaScript
    is now split into smaller chunks based on the routes of our application, and we've
    deferred loading the less important bits until our app has some idle time. We've
    also introduced progressive enhancement to show our users content as soon as possible,
    and learned a lot about how to analyze our app's performance according to RAIL
    metrics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在应用程序的性能方面取得了巨大进展。我们的JavaScript现在根据应用程序的路由拆分成更小的块，并且在我们的应用程序有空闲时间时延迟加载不太重要的部分。我们还引入了渐进增强，尽快向用户展示内容，并学习了如何根据RAIL指标分析我们应用程序的性能。
- en: 'However, there remains one central, core inefficiency in our web application.
    If our user leaves our page to go elsewhere (I know, how dare they) and then returns,
    we repeat the same process all over again: download the `index.html`, download
    the different JavaScript bundles, download the images, and so on.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们的Web应用程序仍然存在一个核心的低效问题。如果我们的用户离开我们的页面去其他地方（我知道，他们怎么敢），然后返回，我们又要重复同样的过程：下载`index.html`，下载不同的JavaScript包，下载图片等等。
- en: We're asking our user to download the exact same files, over and over and over,
    every time they visit the page. Their device has more than enough memory to store
    those files for us. Why don't we just save them to the user's device, and then
    retrieve them as needed?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要求用户每次访问页面时都下载完全相同的文件，一遍又一遍，而他们的设备有足够的内存来为我们存储这些文件。为什么我们不把它们保存到用户的设备上，然后根据需要检索呢？
- en: 'Welcome to caching. In this chapter, we''ll cover these things:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到缓存。在本章中，我们将涵盖以下内容：
- en: What is caching?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是缓存？
- en: The Cache API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存API
- en: Using the Cache API in our service worker
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的服务工作者中使用缓存API
- en: Testing our caching
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试我们的缓存
- en: What is caching?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是缓存？
- en: '**Caching** is the act of reducing network requests or computation. Backend
    caching may consist of saving the result of a rigorous computation (say, generating
    statistics) so that when the client requests it a second time, we don''t have
    to crunch the numbers again. Client-side caching usually consists of saving the
    response of a network request so that we don’t have to make that call again.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存是减少网络请求或计算的行为。后端缓存可能包括保存严格计算的结果（比如生成统计数据），这样当客户端第二次请求时，我们就不必再次进行计算。客户端缓存通常包括保存网络请求的响应，这样我们就不必再次发起请求。
- en: As we said before, **service workers** are bits of code that sit between our
    application and the network. This means they are perfect for caching, as they
    can intercept a network request and respond with the requested file, grabbing
    it from the cache instead of the server; time is saved.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，**服务工作者**是位于我们应用程序和网络之间的代码片段。这意味着它们非常适合缓存，因为它们可以拦截网络请求并用所请求的文件进行响应，从缓存中获取文件，而不是从服务器获取；节省了时间。
- en: From a broader perspective, you can think of caching as not having to do the
    same thing more than once, using memory to store the result.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从更广泛的角度来看，你可以将缓存视为不必重复做同样的事情，使用内存来存储结果。
- en: The upside of caching with Progressive Web Apps is that since the cache is stored
    in device memory, it's available regardless of network connectivity. This means
    everything stored in the cache can be accessed whether or not the device is connected.
    All of a sudden, our website is available offline.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用渐进式Web应用程序进行缓存的好处在于，由于缓存存储在设备内存中，无论网络连接如何，它都是可用的。这意味着无论设备是否连接，都可以访问缓存中存储的所有内容。突然间，我们的网站可以离线访问了。
- en: For mobile users skipping between Wi-Fi zones, the convenience factor can be
    huge, giving them the ability to quickly check a message from a friend or a set
    of directions (anyone who has ever traveled without a roaming plan will know this
    feeling). Neither is this solely an advantage for purely offline users; for users
    with intermittent or low-quality connections, being able to continue working without
    a loss of functionality  as the network skips in and out is a big win.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在Wi-Fi区域之间切换的移动用户来说，便利因素可能是巨大的，使他们能够快速查看朋友的消息或一组方向（任何曾经没有漫游计划旅行的人都会有这种感觉）。这也不仅仅是纯离线用户的优势；对于网络时断时续或质量低劣的用户来说，能够在网络断断续续时继续工作而不丧失功能性是一个巨大的胜利。
- en: So, with one fell stroke, we can improve our app's performance for all our users
    and make it available offline. However, before we get to work implementing caching
    in Chatastrophe (hopefully, not a cachetastrophe), let's look at a story about
    the importance of caching.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一举两得，我们可以提高我们的应用程序性能，使其对所有用户都可离线使用。然而，在我们开始在Chatastrophe中实施缓存之前（希望不会出现灾难），让我们先看一个关于缓存重要性的故事。
- en: The importance of caching
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存的重要性
- en: In 2013, the US government launched [https://healthcare.gov/](https://healthcare.gov/),
    a website for citizens to sign up for the Affordable Care Act (also known as **Obamacare**).
    From the get-go, the site was plagued with serious technological problems. For
    thousands of people, it simply wouldn’t load.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年，美国政府推出了[https://healthcare.gov/](https://healthcare.gov/)，这是一个供公民注册平价医疗法案（也称为**奥巴马医改**）的网站。从一开始，该网站就饱受严重的技术问题困扰。对于成千上万的人来说，它根本无法加载。
- en: To be fair, the site was under enormous strain, visited an estimated 20 million
    times in its first month of operation (source--[http://www.bbc.com/news/world-us-canada-24613022](http://www.bbc.com/news/world-us-canada-24613022)),
    but that strain was to be expected.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 公平地说，该网站承受着巨大的压力，在运营的第一个月就有大约2,000万次访问（来源-[http://www.bbc.com/news/world-us-canada-24613022](http://www.bbc.com/news/world-us-canada-24613022)），但这种压力是可以预料的。
- en: If you were building a website for millions of people to sign up for health
    care (all starting at the same time), performance would probably be at the top
    of your mind, but in the end, [https://healthcare.gov/](https://healthcare.gov/)
    failed to deliver.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在为数百万人注册医疗保健的网站（所有人同时开始），性能可能会是你首要考虑的问题，但最终，[https://healthcare.gov/](https://healthcare.gov/)未能交付。
- en: In response to the crisis (which threatened the credibility of the ACA), the
    administration put together a team to fix the problems, kind of like the Avengers,
    but software developers (so not the Avengers at all).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对危机的回应（这威胁到了ACA的信誉），政府成立了一个团队来解决问题，有点像复仇者联盟，但是软件开发人员（所以根本不是复仇者联盟）。
- en: Given the goal of the site, the engineers were shocked to find that [https://healthcare.gov/](https://healthcare.gov/)
    implemented no basic caching. None. So every time a user visited the site, the
    server had to deal with a network request and generate the information to reply.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到该网站的目标，工程师们震惊地发现[https://healthcare.gov/](https://healthcare.gov/)没有实施基本的缓存。没有。因此，每当用户访问该网站时，服务器都必须处理网络请求并生成回复的信息。
- en: This lack of caching had a compounding effect. The first wave of users clogged
    up the pipes, so the second wave of users got a loading screen. In response, they
    refreshed their screen, making more and more network requests, and so on.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种缺乏缓存产生了复合效应。第一波用户堵塞了管道，所以第二波用户看到了加载屏幕。作为回应，他们刷新屏幕，发出了越来越多的网络请求，依此类推。
- en: Once the Devengers implemented caching, they cut the response time down by three-fourths.
    From then on, the site was able to handle even peak traffic.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Devengers实施了缓存，他们将响应时间缩短了四分之三。从那时起，该网站甚至能够处理高峰时段的流量。
- en: Chatastrophe may not be dealing with [https://healthcare.gov/](https://healthcare.gov/)
    levels of traffic (yet…), but caching is always a good idea.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Chatastrophe可能还没有处理[https://healthcare.gov/](https://healthcare.gov/)级别的流量（但是……），但缓存总是一个好主意。
- en: The Cache API
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存API
- en: The mechanism we will use for caching is the **Web Cache API**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用**Web缓存API**进行缓存。
- en: Note that the Mozilla Developer Network defines the Cache API as **experimental
    technology**, and as of August 2017, it only has the support of Chrome, Firefox,
    and the latest version of Opera.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Mozilla开发者网络将缓存API定义为**实验性技术**，截至2017年8月，它仅得到Chrome、Firefox和最新版本的Opera的支持。
- en: The API specification has a few quirks we need to talk about. First, you can
    store multiple cache objects in the cache. In this way, we're able to store multiple
    versions of our cache, named whatever string we like.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: API规范有一些我们需要讨论的怪癖。首先，你可以在缓存中存储多个缓存对象。这样，我们就能够存储我们的缓存的多个版本，以我们喜欢的任何字符串命名。
- en: That said, the browser has a limit of how much data it can store from any one
    site. If the cache gets too full, it may simply delete all data from that origin,
    so our best bet is to store the bare minimum.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，浏览器对于每个站点可以存储的数据有限制。如果缓存太满，它可能会简单地删除来自该站点的所有数据，因此我们最好存储最少量的数据。
- en: However, there's an additional difficulty. Items in the cache never expire,
    unless explicitly deleted, so if we keep trying to stuff new cache objects into
    our cache, eventually it'll get too full and delete everything. Managing, updating,
    and deleting cache objects is entirely up to us. We have to clean up our own mess,
    in other words.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有一个额外的困难。除非明确删除，否则缓存中的项目永远不会过期，因此如果我们不断尝试将新的缓存对象放入我们的缓存中，最终它会变得太满并删除所有内容。管理、更新和删除缓存对象完全取决于我们。换句话说，我们必须清理自己的混乱。
- en: Methods
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法
- en: 'We will use five methods to interact with the Cache API: `open`, `addAll`,
    `match`, `keys`, and `delete`. In the following, **Caches** will refer to the
    Cache API itself, and **Cache** to a specific cache object, to distinguish between
    methods called on an individual cache versus the API itself:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用五种方法与缓存API交互：`open`、`addAll`、`match`、`keys`和`delete`。在接下来的内容中，**Caches**将指的是缓存API本身，而**Cache**指的是特定的缓存对象，以区分在单个缓存上调用的方法与API本身：
- en: '`Caches.open()` takes a cache object name (also known as a cache key) as an
    argument (it can be any string), and either creates a new cache object or opens
    an existing one by the same name. It returns a `Promise` that resolves with the
    cache object as a parameter, which we can then use.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Caches.open()`接受一个缓存对象名称（也称为缓存键）作为参数（可以是任何字符串），并创建一个新的缓存对象，或者打开同名的现有缓存对象。它返回一个`Promise`，并将缓存对象作为参数解析，然后我们可以使用它。'
- en: '`Cache.addAll()` takes in an array of URLs. It''ll then go fetch those URLs
    from the server, and store the resulting file in the current cache object. Its
    little cousin is `Cache.add`, which does the same with a single URL.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cache.addAll()`接受一个URL数组。然后它将从服务器获取这些URL，并将结果文件存储在当前的缓存对象中。它的小伙伴是`Cache.add`，它可以用单个URL做同样的事情。'
- en: '`Caches.match()` takes a network request as an argument (we''ll see how to
    grab that as we go ahead). It looks in the cache for a file that matches the URL,
    and returns a `Promise` that resolves with that file. We can then return that
    file, superseding the need to make the request to the server. Its big brother
    is `Caches.matchAll()`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Caches.match()`接受一个网络请求作为参数（我们将在接下来看到如何获取它）。它在缓存中查找与URL匹配的文件，并返回一个解析为该文件的`Promise`。然后我们可以返回该文件，从而取代向服务器发出请求的需要。它的大哥是`Caches.matchAll()`。'
- en: '`Caches.keys()` returns the names of all the existing cache objects. We can
    then delete the outdated ones by passing their key to `Caches.delete()`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Caches.keys()`返回所有现有缓存对象的名称。然后我们可以通过将它们的键传递给`Caches.delete()`来删除过时的缓存对象。'
- en: The last method in the Cache API, which we won’t use here but which may be of
    interest, is `Caches.put`. This takes a network request and fetches it, and then
    saves the result to the cache. This is useful if you want to cache every request
    without having to define what the URLs are ahead of time.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存API中的最后一个方法，我们这里不会使用，但可能会感兴趣的是`Caches.put`。这个方法接受一个网络请求并获取它，然后将结果保存到缓存中。如果你想缓存每个请求而不必提前定义URL，这将非常有用。
- en: The asset manifest
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产清单
- en: 'Our build process automatically generates an `asset-manifest.json` file for
    us, with a list of every JavaScript file our application contains. It looks something
    like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的构建过程会自动生成一个`asset-manifest.json`文件，其中列出了我们应用程序包含的每个JavaScript文件。它看起来像这样：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In other words, we have a list of every JS file we want to cache. More importantly,
    the asset manifest is updated with the new hash of every file, so we don't have
    to worry about keeping that up to date.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们有一个我们想要缓存的每个JS文件的列表。更重要的是，资产清单会使用每个文件的新哈希更新，因此我们不必担心保持其最新。
- en: We can thus use the URLs in the asset manifest alongside the `Cache.addAll()`
    method to instantly cache all our JavaScript assets in one go. We'll also need
    to manually add our static assets (images) to the cache, but to do so, we'll have
    to tap into our service worker life cycle methods and do some basic setup.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以使用资产清单中的URL以及`Cache.addAll()`方法一次性缓存所有我们的JavaScript资产。但是，我们还需要手动将我们的静态资产（图像）添加到缓存中，但是为了这样做，我们将不得不利用我们的服务工作者生命周期方法并进行一些基本设置。
- en: Setting up our cache
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的缓存
- en: In this section, we'll move through our three main service worker life cycle
    events, and interact with our cache individually in each event. By the end, we
    will have automatic caching for all static files.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过我们的三个主要服务工作者生命周期事件，并在每个事件中单独与我们的缓存进行交互。最终，我们将自动缓存所有静态文件。
- en: A warning, though--working with caches in development is, at best, tolerable,
    and at worst, infuriating. "Why aren't you updating?" we yell at our screen, until
    we realize that our cache has been serving up old code; it happens to the best
    of us. In this section, we'll take steps to avoid caching our development files
    and dodge this bullet, but in the future, remember that weird errors are probably
    caused by caching.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，要警告一下——在开发中使用缓存，充其量是可以容忍的，最坏的情况下是令人恼火的。我们对着屏幕大喊：“为什么你不更新？”直到我们意识到我们的缓存一直在提供旧代码；这种情况发生在我们每个人身上。在本节中，我们将采取措施避免缓存我们的开发文件，并躲避这个问题，但是在未来，请记住奇怪的错误可能是由缓存引起的。
- en: 'There are only two hard things in Computer Science: cache invalidation and
    naming things.-- Phil Karlton'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中只有两件难事：缓存失效和命名事物。- Phil Karlton
- en: 'And another take:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个方法：
- en: 'There are two hard problems in computer science: cache invalidation, naming
    things, and off-by-1 errors.-- Leon Bambrick'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中有两个难题：缓存失效、命名事物和off-by-1错误。- Leon Bambrick
- en: The install event
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装事件
- en: 'When our service worker installs, we want to go ahead and set up our cache,
    and begin caching the relevant assets. So, our step-by-step guide to our install
    event goes like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的服务工作者安装时，我们希望立即设置我们的缓存，并开始缓存相关的资产。因此，我们的安装事件的逐步指南如下：
- en: Open up the relevant cache.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开相关的缓存。
- en: Get our asset manifest.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取我们的资产清单。
- en: Parse the JSON.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析JSON。
- en: Add the relevant URLs to our cache, plus our static assets.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将相关的URL添加到我们的缓存中，以及我们的静态资产。
- en: Let’s open up `firebase-messaging-sw.js` and get to work!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开`firebase-messaging-sw.js`并开始工作！
- en: 'If you still have the `console.log` event listener for install, great! Delete
    the `console.log`; otherwise, set it up as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然有`console.log`事件监听器用于安装，很好！删除`console.log`；否则，设置如下：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Right above this function, we’ll also assign our cache object name to a variable:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这个函数的上面，我们还会将我们的缓存对象名称分配给一个变量：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This name can be literally anything, but we'll want to up the version every
    time we deploy, just to ensure that old caches are invalidated and everyone gets
    the freshest possible code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名称可以是任何东西，但我们希望每次部署时都提高版本，以确保旧的缓存无效，并且每个人都能获得尽可能新鲜的代码。
- en: Now, let's run through our checklist.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照清单来运行。
- en: Opening up the cache
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开缓存
- en: Before we get to the good stuff, we need to talk about extendable events.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始正题之前，我们需要谈谈可扩展事件。
- en: Once our service worker is activated and installed, it may immediately go into
    "waiting" mode--waiting for an event to occur to which it must respond. However,
    we don’t want it to go into waiting mode while we're in the middle of opening
    the cache, which is an asynchronous operation. So, we need a way of telling our
    service worker, "Hey, don’t consider yourself fully installed until the cache
    is populated."
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的服务工作线程被激活和安装，它可能会立即进入“等待”模式--等待必须响应的事件发生。然而，我们不希望它在我们正在打开缓存的过程中进入等待模式，这是一个异步操作。因此，我们需要一种告诉我们的服务工作线程的方法，“嘿，直到缓存被填充，不要认为自己完全安装了。”
- en: The way we do so is via `event.waitUntil()`. This method extends the life of
    an event (here, the install event) until all Promises within it are resolved.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`event.waitUntil()`来实现这一点。这个方法延长了事件的生命周期（在这里是安装事件），直到其中的所有Promise都被解决。
- en: 'It looks as shown:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来如下所示：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we can open our cache. Our Cache API is available in the caches global
    variable, so we can just call `caches.open()`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以打开我们的缓存。我们的缓存API在全局变量caches中可用，所以我们可以直接调用`caches.open()`：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Since no cache object with the name `'v1'` will currently exist, we will automatically
    create one. Once we get that cache object, we can move to step 2.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于当前不存在名称为'v1'的缓存对象，我们将自动创建一个。一旦获得了该缓存对象，我们就可以进行第二步。
- en: Fetching the asset manifest
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取资产清单
- en: 'Fetching the asset manifest sounds exactly like it sounds:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 获取资产清单听起来就像它听起来的那样：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that we should have no asset-manifest in development; we need to ensure
    that the request response is okay before proceeding, lest we throw an error.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在开发中我们不应该有asset-manifest；在继续之前，我们需要确保请求响应是正常的，以免抛出错误。
- en: Parsing the JSON
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析JSON
- en: 'Our `asset-manifest.json` returns, rather surprisingly, some JSON. Let''s parse
    it:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`asset-manifest.json`返回了一些JSON，相当令人惊讶。让我们解析一下：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we have a manifest variable that is a plain JavaScript object matching the
    content of `asset-manifest.json`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个manifest变量，它是一个普通的JavaScript对象，与`asset-manifest.json`的内容相匹配。
- en: Adding the relevant URLs to the cache
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将相关的URL添加到缓存
- en: 'Since we have a JavaScript object to access the URLs, we can pick and choose
    what we want to cache, but in this case, we want everything, so let''s iterate
    over the object and get an array of URLs:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们有一个JavaScript对象来访问URL，我们可以挑选我们想要缓存的内容，但在这种情况下，我们想要一切，所以让我们遍历对象并获得一个URL数组：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We also want to cache the `index.html` and our icon, so let''s push in `/`
    and `/assets/icon.png`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想缓存`index.html`和我们的图标，所以让我们推入`/`和`/assets/icon.png`：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we can add all these URLs to the cache with `cache.addAll()`. Note that
    we’re referring to the specific cache object we opened, and not the general caches
    variable:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`cache.addAll()`将所有这些URL添加到缓存中。请注意，我们指的是我们打开的特定缓存对象，而不是一般的caches变量：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Done! We have caching, but it's not worth much yet, as we have no way of retrieving
    items from the cache. Let’s do that next.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！我们已经进行了缓存，但目前还不值得多少，因为我们还没有办法从缓存中检索项目。让我们接着做。
- en: The fetch event
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取事件
- en: When our application requests a file from the server, we want to intercept that
    request inside our service worker, and respond with the cached file (if it exists).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的应用程序从服务器请求文件时，我们希望在服务工作线程内拦截该请求，并用缓存的文件进行响应（如果存在）。
- en: 'We can do so by listening to the fetch event, as illustrated:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过监听fetch事件来实现这一点，如下所示：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The event passed in as argument has two properties of interest. The first is
    `event.request`, which is the target URL. We’ll use that to see whether we have
    the item in our cache, but the event also has a method called `respondWith`, which
    basically means "stop this network request from going through, and respond to
    it with the following."
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参数传递的事件有两个有趣的属性。第一个是`event.request`，它是目标URL。我们将使用它来查看我们的缓存中是否有该项，但事件还有一个名为`respondWith`的方法，基本上意味着“停止这个网络请求的进行，并用以下内容回应它。”
- en: Here's the unintuitive part--we're essentially canceling this fetch event as
    soon as we call `event.respondWith`. This means if we don’t have the item in our
    cache, we have to start another fetch request (which does not, thankfully, trigger
    another event listener; no recursion here). This is something to keep in mind.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是不直观的部分--我们实质上是在调用`event.respondWith`后立即取消了这个fetch事件。这意味着如果我们的缓存中没有该项，我们必须开始另一个fetch请求（幸运的是，这不会触发另一个事件监听器；这里没有递归）。这是需要记住的一点。
- en: 'So, let’s call `event.respondWith`, and then use `caches.match` to see whether
    we have a file matching the URL:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们调用`event.respondWith`，然后使用`caches.match`来查看我们是否有与URL匹配的文件：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The response, in this case, will be either the file in question or null. If
    it’s the file, we return it; otherwise, we make another fetch request and return
    its result. Here’s the one-line version:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，响应要么是问题文件，要么是空。如果是文件，我们就返回它；否则，我们发起另一个fetch请求并返回其结果。以下是一行版本：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: That’s it! Now all fetch requests for files in our asset manifest will go to
    the cache first, and only make an actual network request if the said file isn’t
    there.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在我们资产清单中的文件的所有fetch请求都将首先进入缓存，只有在该文件不在缓存中时才会进行实际的网络请求。
- en: The activate event
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激活事件
- en: The activate event is the first of our three service worker events to take place,
    so it may seem odd that we’re talking about it last, but there's a good reason.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 激活事件是我们三个service worker事件中发生的第一个，所以可能看起来奇怪我们最后才谈论它，但这是有原因的。
- en: The activate event is when we do cache clean up. We ensure that we get rid of
    any expired cache objects so that our share of the browser cache doesn’t get too
    cluttered and become terminated.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 激活事件是我们进行缓存清理时发生的。我们确保清除任何过期的缓存对象，以便我们的浏览器缓存不会变得太混乱并被终止。
- en: To do so, we basically delete any cache object whose name doesn't match the
    current value of `CACHE_NAME`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们基本上删除任何名称与`CACHE_NAME`的当前值不匹配的缓存对象。
- en: '"But Scott," you say, "what if our service worker doesn’t update properly,
    and still contains the old `CACHE_NAME`?" This is a valid point. However, as said,
    our service worker should automatically update whenever there is a byte-sized
    difference between it and the previous service worker, so that should not be a
    concern.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “但是，Scott，”你说，“如果我们的service worker没有正确更新，并且仍然包含旧的`CACHE_NAME`怎么办？”这是一个有效的观点。然而，正如所说的，我们的service
    worker应该在它与上一个service worker之间有字节大小的差异时自动更新，所以这不应该成为一个问题。
- en: 'Our process is less intensive this time, but let''s still break it down:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们的过程不那么密集，但我们仍然来分解一下：
- en: Grab the list of cache names.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取缓存名称列表。
- en: Loop over them.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环遍历它们。
- en: Delete any cache whose key doesn't match `CACHE_NAME`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除任何键不匹配`CACHE_NAME`的缓存。
- en: 'A quick reminder--you can have multiple caches if you want to keep your CSS
    in a seperate cache from your JS. There’s no real benefit of doing so, but you
    may like things organized. An approach that will work is to create a `CACHE_NAMES`
    object instead, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一个快速提醒--如果你想将你的CSS保存在一个单独的缓存中，你可以拥有多个缓存。这样做没有真正的好处，但你可能喜欢有组织的东西。一个可行的方法是创建一个`CACHE_NAMES`对象，如下所示：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then, in the subsequent steps, we'll have to iterate over that object; just
    something to keep in mind.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在随后的步骤中，我们将不得不迭代该对象；只是要记住的一些事情。
- en: Okay, let's get to work.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始工作。
- en: Grab the list of cache names
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取缓存名称列表
- en: Again, we have to do an `event.waitUntil()` while we complete this async code.
    This means we'll have to eventually return a `Promise` to the `event.waitUntil()`,
    which will affect how we write our code.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们必须在完成此异步代码时使用`event.waitUntil()`。这意味着我们最终将不得不返回一个`Promise`给`event.waitUntil()`，这将影响我们编写代码的方式。
- en: 'First, we grab the list of cache keys, by calling `cache.keys()`, which returns
    a promise:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过调用`cache.keys()`来获取缓存键的列表，这会返回一个promise：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Loop over them
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环遍历它们
- en: We need to go through each key and call `caches.delete()` if it doesn't match
    our `CACHE_NAME`. Since we may have multiple caches to delete, and multiple calls
    to `caches.delete()`, which returns a `Promise` in itself, we'll map over `keyList`
    and return a set of Promises using `Promise.all()`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要遍历每个键，并调用`caches.delete()`，如果它不匹配我们的`CACHE_NAME`。由于我们可能有多个要删除的缓存，并且多次调用`caches.delete()`，它本身返回一个`Promise`，我们将在`keyList`上映射，并使用`Promise.all()`返回一组`Promise`。
- en: 'Here''s what it looks like:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来是这样的：
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Delete any cache whose key doesn’t match `CACHE_NAME`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 删除任何键不匹配`CACHE_NAME`的缓存。
- en: 'A simple `if` statement, and a call to `caches.delete()`, and we''re done:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的`if`语句，然后调用`caches.delete()`，我们就完成了：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now our caches will be exactly the size we want them to be (only on cache object)
    and will be checked every time our service worker activates.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的缓存将恰好是我们想要的大小（仅在缓存对象上），并且每次我们的服务工作者激活时都会被检查。
- en: There is, thus, an inherent mechanism to how our cache stays up to date. Every
    time we update our JavaScript, we should update the version in our service worker.
    This causes our service worker to update, and thus reactivate, which triggers
    a check and invalidation of the previous caches; a beautiful system.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的缓存保持更新的机制是固有的。每次更新JavaScript时，我们都应该更新服务工作者中的版本。这会导致我们的服务工作者更新，从而重新激活，触发对先前缓存的检查和失效；一个美丽的系统。
- en: Testing our cache
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的缓存
- en: Run your app locally quickly with **`yarn start`** to check for any obvious
    errors (typos and such), and if all looks good, fire up **`yarn deploy`**.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**`yarn start`**快速在本地运行您的应用程序，以检查是否有任何明显的错误（拼写错误等），如果一切正常，请启动**`yarn deploy`**。
- en: 'Open your live application and the Chrome DevTools. Turn off Update on reload
    under Application | Service Workers, refresh once, and then go to the Network
    tab. You should see something like the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的实时应用程序和Chrome DevTools。在应用程序|服务工作者下关闭更新后重新加载，刷新一次，然后转到网络选项卡。您应该会看到类似以下的内容：
- en: '![](../images/00089.jpeg)If this doesn''t work, try Unregistering any service
    workers under Application | Service Workers, and then reload twice.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../images/00089.jpeg)如果这不起作用，请尝试取消注册应用程序|服务工作者下的任何服务工作者，然后重新加载两次。'
- en: 'The key point is (from service worker) beside our JavaScript files. Our static
    assets are being served up by our service worker cache, and if you scroll to the
    top of the network tab, you''ll see this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 关键点是（来自服务工作者）在我们的JavaScript文件旁边。我们的静态资产是由我们的服务工作者缓存提供的，如果您滚动到网络选项卡的顶部，您将看到这样的情况：
- en: '![](../images/00090.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00090.jpeg)'
- en: The document itself is being served from the service worker, which means we
    can run our app under any network condition, even offline; let's try it. Click
    on the Offline checkbox at the top of the Network tab, and click on reload.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 文档本身是由服务工作者提供的，这意味着我们可以在任何网络条件下运行我们的应用程序，甚至是离线的；让我们试试。点击网络选项卡顶部的离线复选框，然后点击重新加载。
- en: If all goes well, there should be no difference between our application's load
    time, even though we have no network connection! Our application still loads,
    and so do our chat messages.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们的应用程序的加载时间不应该有任何区别，即使我们没有网络连接！我们的应用程序仍然可以加载，我们的聊天消息也是如此。
- en: The message loading is a benefit of the database of Firebase, not really our
    doing, but having the document itself load from the cache, that's the real achievement!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 消息加载是Firebase数据库的一个好处，不是我们的功劳，但是从缓存中加载文档，这才是真正的成就！
- en: Of course, our UX isn't set up well for offline access. We should have some
    way of informing the user they're currently offline, perhaps with some sort of
    dialog, but we'll leave that as a stretch goal.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们的用户体验并没有很好地为离线访问做准备。我们应该有一种方式来通知用户他们当前处于离线状态，也许可以通过某种对话框，但我们将其作为一个目标。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We achieved the progressive dream--an application that works under any network
    conditions, including an absence of any network at all. Caching is a difficult
    subject, so give yourself a pat on the back for making it this far.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了渐进式梦想——一个可以在任何网络条件下工作的应用程序，包括完全没有网络的情况。缓存是一个复杂的主题，所以为自己的成就鼓掌吧。
- en: However, before we get too excited and submit our prototype to the Chatastrophe
    board, let’s ensure that we did things right. We need some way to put a rubber
    stamp on our project, which says, "Approved! This is a Progressive Web App!".
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们过于兴奋并将我们的原型提交给Chatastrophe董事会之前，让我们确保我们做对了事情。我们需要一种方式来在我们的项目上盖上一个橡皮图章，上面写着“批准！这是一个渐进式网络应用！”。
- en: Luckily, a little startup by the name of Google has given us a tool to do exactly
    like that.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，一个名为Google的小型初创公司已经给了我们一个可以做到这一点的工具。
- en: Up next is auditing our completed progressive web app, AKA the victory lap.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是对我们完成的渐进式网络应用进行审计，也就是胜利之旅。
