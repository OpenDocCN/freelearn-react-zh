- en: Exercising New MERN Skills with an Online Marketplace
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过在线市场锻炼新的MERN技能
- en: As more businesses continue to move to the web, the ability to buy and sell
    in an online marketplace setting has become a core requirement for many web platforms.
    In this and the next chapter, we will utilize the MERN stack technologies to develop
    an online marketplace application complete with features that enable users to
    buy and sell.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的企业继续转向网络，能够在在线市场环境中进行买卖已经成为许多网络平台的核心要求。在本章和下一章中，我们将利用MERN堆栈技术开发一个在线市场应用程序，其中包括使用户能够买卖的功能。
- en: 'In this chapter, we will start building the online marketplace by extending
    the MERN skeleton with the following features:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过扩展MERN骨架来构建在线市场，添加以下功能：
- en: Users with seller accounts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有卖家账户的用户
- en: Shop management
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商店管理
- en: Product management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品管理
- en: Product search by name and category
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按名称和类别搜索产品
- en: MERN Marketplace
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MERN Marketplace
- en: 'The MERN Marketplace application will allow users to become sellers, who can
    manage multiple shops, and add the products they want to sell in each shop. Users
    who visit MERN Marketplace will be able to search for and browse products they
    want to buy, and add products to their shopping cart to place an order:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Marketplace应用程序将允许用户成为卖家，他们可以管理多个商店，并在每个商店中添加他们想要出售的产品。访问MERN Marketplace的用户将能够搜索和浏览他们想要购买的产品，并将产品添加到购物车中以下订单：
- en: '![](assets/3a5e153a-60bd-4cba-8f79-523426175c96.png)The code for the complete
    MERN Marketplace application is available on GitHub: [github.com/shamahoque/mern-marketplace](https://github.com/shamahoque/mern-marketplace). The
    implementations discussed in this chapter can be accessed in the seller-shops-products
    branch of the repository. You can clone this code and run the application as you
    go through the code explanations in the rest of this chapter.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/3a5e153a-60bd-4cba-8f79-523426175c96.png)完整的MERN Marketplace应用程序的代码可在GitHub上找到：[github.com/shamahoque/mern-marketplace](https://github.com/shamahoque/mern-marketplace)。本章讨论的实现可以在存储库的seller-shops-products分支中访问。您可以在阅读本章其余部分的代码解释时，克隆此代码并运行应用程序。'
- en: 'The views needed for the features related to seller accounts, shops, and products
    will be developed by extending and modifying the existing React components in
    the MERN skeleton application. The component tree pictured next shows all the
    custom React components that make up the MERN Marketplace frontend developed in
    this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与卖家账户、商店和产品相关的功能所需的视图将通过扩展和修改MERN骨架应用程序中的现有React组件来开发。下图显示的组件树展示了本章中开发的MERN
    Marketplace前端中的所有自定义React组件：
- en: '![](assets/80051e3f-cad6-4cc1-b7ff-457b701d9998.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/80051e3f-cad6-4cc1-b7ff-457b701d9998.jpg)'
- en: Users as sellers
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户作为卖家
- en: 'Any user that signs up on the MERN Marketplace can choose to become a seller
    by updating their profile:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Marketplace注册的任何用户都可以选择通过更新其个人资料成为卖家：
- en: '![](assets/59234305-80cf-4846-9bf4-def391fdfd9b.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/59234305-80cf-4846-9bf4-def391fdfd9b.png)'
- en: 'In contrast to being a regular user, becoming sellers will allow users to create
    and manage their own shops where they can manage products:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与成为普通用户相比，成为卖家将允许用户创建和管理自己的商店，他们可以在其中管理产品：
- en: '![](assets/5c7b9488-dd1a-474d-977f-75f6a80fa956.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5c7b9488-dd1a-474d-977f-75f6a80fa956.png)'
- en: To add this seller feature, we need to update the user model, the Edit Profile
    view, and add a MY SHOPS link to the menu that will only be visible to sellers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加这个卖家功能，我们需要更新用户模型、编辑个人资料视图，并在菜单中添加一个“我的商店”链接，只有卖家才能看到。
- en: Updating the user model
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户模型
- en: The user model will need a seller value that will be set to `false` by default
    to represent regular users, and can be set to `true` to represent users who are
    also sellers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 用户模型将需要一个卖家值，默认情况下将其设置为`false`以表示普通用户，并且可以将其设置为`true`以表示也是卖家的用户。
- en: '`mern-marketplace/server/models/user.model.js`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/models/user.model.js`:'
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The seller value must be sent to the client with the user details received on
    successful sign-in, so the view can be rendered accordingly to show information
    relevant to the seller.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 卖家值必须与成功登录时收到的用户详细信息一起发送到客户端，以便视图可以相应地呈现与卖家相关的信息。
- en: Updating the Edit Profile view
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新编辑个人资料视图
- en: A signed-in user will see a toggle in the Edit Profile view, to either activate
    or deactivate the seller feature. We will update the `EditProfile` component to
    add a `Material-UI` `Switch` component in `FormControlLabel`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 已登录用户将在编辑个人资料视图中看到一个切换按钮，用于激活或停用卖家功能。我们将更新`EditProfile`组件，在`FormControlLabel`中添加`Material-UI`的`Switch`组件。
- en: '`mern-marketplace/client/user/EditProfile.js`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/user/EditProfile.js`:'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Any changes to the switch will be set to the value of the `seller` in state
    by calling the `handleCheck` method.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`handleCheck`方法，对切换进行的任何更改都将设置为状态中`seller`的值。
- en: '`mern-marketplace/client/user/EditProfile.js`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/user/EditProfile.js`:'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: On submit, the `seller` value is added to details sent in the update to the
    server.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 提交时，`seller`值将被添加到发送到服务器的详细信息中。
- en: '`mern-marketplace/client/user/EditProfile.js`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/user/EditProfile.js`:'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: On successful update, the user details stored in `sessionStorage` for auth purposes
    should also be updated. The `auth.updateUser` method is called to do this `sessionStorage`
    update. It is defined with the other `auth-helper.js` methods, and passed the
    updated user data and a callback function that updates the view, as parameters.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 成功更新后，存储在`sessionStorage`中的用户详细信息也应该更新。调用`auth.updateUser`方法来进行`sessionStorage`的更新。它与其他`auth-helper.js`方法一起定义，并传递更新后的用户数据和一个更新视图的回调函数作为参数。
- en: '`mern-marketplace/client/auth/auth-helper.js`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/auth/auth-helper.js`:'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Updating the menu
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新菜单
- en: In the navigation bar, to conditionally display a link to *My Shops*, which
    is only visible to the signed-in users who are also sellers, we will update the
    `Menu` component, as follows, within the previous code that only renders when
    a user is signed in.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航栏中，为了有条件地显示一个链接到*我的商店*，该链接只对已登录的也是卖家的用户可见，我们将更新`Menu`组件，如下所示，在先前的代码中只有在用户登录时才会呈现。
- en: '`mern-marketplace/client/core/Menu.js`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/core/Menu.js`:'
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Shops in the Marketplace
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 市场中的商店
- en: Sellers on MERN Marketplace can create shops and add products to each shop.
    To store the shop data and enable shop management, we will implement a Mongoose
    Schema for shops, backend APIs to access and modify the shop data, and frontend
    views for the shop owner and buyers browsing through the marketplace.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Marketplace上的卖家可以创建商店，并向每个商店添加产品。为了存储商店数据并启用商店管理，我们将实现一个用于商店的Mongoose模式，用于访问和修改商店数据的后端API，以及用于商店所有者和买家浏览市场的前端视图。
- en: Shop model
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商店模型
- en: The Shop schema defined in `server/models/shop.model.js` will have simple fields
    to store shop details, along with a logo image, and a reference to the user who
    owns the shop.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在`server/models/shop.model.js`中定义的商店模式将具有简单的字段来存储商店详细信息，以及一个标志图像和拥有该商店的用户的引用。
- en: '**Shop name and description**: Name and description fields will be string types,
    with `name` as a required field:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商店名称和描述**：名称和描述字段将是字符串类型，其中`name`是一个必填字段：'
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Shop logo image**: The `image` field will store the logo image file to be
    uploaded by the user, as data in the MongoDB database:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商店标志图像**：`image`字段将存储用户上传的标志图像文件，作为MongoDB数据库中的数据：'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Shop owner**: The owner field will reference the user who is creating the
    shop:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商店所有者**：所有者字段将引用创建商店的用户：'
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Created and updated at times**: The `created` and `updated` fields will be
    `Date` types, with `created` generated when a new shop is added, and `updated`
    changed when any shop details are modified:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建和更新时间**：`created`和`updated`字段将是`Date`类型，`created`在添加新商店时生成，`updated`在修改任何商店详情时更改。'
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The fields in this schema definition will enable us to implement all shop-related
    features in MERN Marketplace.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式定义中的字段将使我们能够在MERN Marketplace中实现所有与商店相关的功能。
- en: Create a new shop
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新商店
- en: In MERN Marketplace, a user who is signed in and also a seller will be able
    to create new shops.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Marketplace中，已登录并且也是卖家的用户将能够创建新的商店。
- en: Create shop API
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建商店API
- en: In the backend, we will add a POST route that verifies that the current user
    is a seller and creates a new shop with the shop data passed in the request.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将添加一个POST路由，验证当前用户是否为卖家，并使用请求中传递的商店数据创建一个新的商店。
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`：'
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `shop.routes.js` file will be very similar to the `user.routes` file, and
    to load these new routes in the Express app, we need to mount the shop routes
    in `express.js`, like we did for the auth and user routes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`shop.routes.js`文件将与`user.routes`文件非常相似，为了在Express应用程序中加载这些新路由，我们需要在`express.js`中挂载商店路由，就像我们为auth和user路由所做的那样。'
- en: '`mern-marketplace/server/express.js`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/express.js`：'
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We will update the user controller to add the `isSeller` method, this will ensure
    the current user is actually a seller before creating the new shop.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新用户控制器以添加`isSeller`方法，这将确保当前用户实际上是卖家，然后才创建新的商店。
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/user.controller.js`：'
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `create` method, in the shop controller, uses the `formidable` npm module
    to parse the multipart request that may contain an image file uploaded by the
    user for the shop logo. If there is a file, `formidable` will store it temporarily
    in the filesystem, and we will read it using the `fs` module to retrieve the file
    type and data to store it to the `image` field in the shop document.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 商店控制器中的`create`方法使用`formidable` npm模块来解析可能包含用户上传的商店标志图片文件的多部分请求。如果有文件，`formidable`将在文件系统中临时存储它，然后我们将使用`fs`模块来读取它，以检索文件类型和数据，以将其存储到商店文档中的`image`字段中。
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`：'
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The logo image file for the shop is uploaded by the user and stored in MongoDB
    as data. Then, in order to be shown in the views, it is retrieved from the database
    as an image file at a separate GET API. The GET API is set up as an Express route
    at `/api/shops/logo/:shopId`, which gets the image data from MongoDB and sends
    it as a file in the response. The implementation steps for file upload, storage,
    and retrieval are outlined in detail in the *Upload profile photo* section in
    [Chapter 5](8af4986f-1f37-45f2-ba05-85caa119a652.xhtml), *Starting with a Simple
    Social Media Application*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 商店的标志图片文件由用户上传，并以数据形式存储在MongoDB中。然后，为了在视图中显示，它将作为一个单独的GET API从数据库中检索为图像文件。GET
    API设置为Express路由在`/api/shops/logo/:shopId`，它从MongoDB获取图像数据，并将其作为文件发送到响应中。文件上传、存储和检索的实现步骤在[第5章](8af4986f-1f37-45f2-ba05-85caa119a652.xhtml)的*上传个人资料照片*部分中有详细说明，*从简单的社交媒体应用开始*。
- en: Fetch the create API in the view
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取创建API
- en: 'In the frontend, to use this create API, we will set up a `fetch` method in
    `client/shop/api-shop.js` to make a post request to the create API by passing
    the multipart form data:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，为了使用这个创建API，我们将在`client/shop/api-shop.js`中设置一个`fetch`方法，通过传递多部分表单数据向创建API发出POST请求：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: NewShop component
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NewShop组件
- en: 'In the `NewShop` component, we will render a form that allows a seller to create
    a shop by entering a name and description, and uploading a logo image file from
    their local filesystem:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在`NewShop`组件中，我们将呈现一个表单，允许卖家输入名称和描述，并从其本地文件系统上传商店的标志图像文件：
- en: '![](assets/df926141-6696-4db6-ac6e-40059ccba860.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/df926141-6696-4db6-ac6e-40059ccba860.png)'
- en: We will add the file upload elements using a Material-UI button and an HTML5
    file input element.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Material-UI按钮和HTML5文件输入元素添加文件上传元素。
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/NewShop.js`：'
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The name and description form fields will be added with the `TextField` components.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 名称和描述表单字段将使用`TextField`组件添加。
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/NewShop.js`：'
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: These form field changes will be tracked with the `handleChange` method.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表单字段的更改将通过`handleChange`方法进行跟踪。
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/NewShop.js`：'
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `handleChange` method updates the state with the new values and populates
    `shopData`, which is a `FormData` object that ensures the data is stored in the
    correct format needed for the `multipart/form-data` encoding type. The `shopData`
    object is initialized in `componentDidMount`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleChange`方法更新状态并填充`shopData`，这是一个`FormData`对象，确保数据以`multipart/form-data`编码类型存储在正确的格式中。`shopData`对象在`componentDidMount`中初始化。'
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/NewShop.js`：'
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: On form submit, the `create` fetch method is called in the `clickSubmit` function.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单提交时，`clickSubmit`函数中将调用`create` fetch方法。
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/NewShop.js`：'
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: On successful shop creation, the user is redirected back to the `MyShops` view.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功创建商店后，用户将被重定向回`MyShops`视图。
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/NewShop.js`：'
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `NewShop` component can only be viewed by a signed-in user who is also a
    seller. So we will add a `PrivateRoute` in the `MainRouter` component, that will
    render this form only for authorized users at `/seller/shop/new`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewShop`组件只能由已登录的卖家用户查看。因此，我们将在`MainRouter`组件中添加一个`PrivateRoute`，该组件将仅在`/seller/shop/new`路径上为经过授权的用户呈现此表单。'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`：'
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This link can be added to any of the view components that may be accessed by
    the seller.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此链接可以添加到卖家可能访问的任何视图组件中。
- en: List shops
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出商店
- en: In MERN Marketplace, regular users will be able to browse through a list of
    all the shops on the platform, and a shop owner will manage a list of their own
    shops.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Marketplace中，普通用户将能够浏览平台上所有商店的列表，商店所有者将管理他们自己商店的列表。
- en: List all shops
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出所有商店
- en: A list of all the shops will be fetched from the backend and displayed to the
    end user.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 所有商店的列表将从后端获取并显示给最终用户。
- en: Shops list API
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商店列表API
- en: 'In the backend, we will add a route in `server/routes/shop.routes.js` to retrieve
    all the shops stored in the database when the server receives a GET request at
    `''/api/shops''`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，当服务器在`'/api/shops'`路径接收到GET请求时，我们将在`server/routes/shop.routes.js`中添加一个路由来检索数据库中存储的所有商店：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `list` controller method in `shop.controller.js` will query the Shop collection
    in the database to return all the shops.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`shop.controller.js`中的`list`控制器方法将查询数据库中的商店集合，以返回所有商店。'
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`：'
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Fetch all shops for the view
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取视图的所有商店
- en: 'In the frontend, to fetch the shops using this list API, we will set up a `fetch`
    method in `client/shop/api-shop.js`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，为了使用此列表API获取商店，我们将在`client/shop/api-shop.js`中设置一个`fetch`方法：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Shops component
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商店组件
- en: 'In the `Shops` component, we will render the list of shops in a Material-UI
    `List`, after fetching the data when the component mounts and setting the data
    to state:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在“商店”组件中，我们将在Material-UI“List”中呈现商店列表，在组件挂载时获取数据并将数据设置为状态：
- en: '![](assets/c67be761-9fe9-4ad4-bd31-e1f4418fb682.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/c67be761-9fe9-4ad4-bd31-e1f4418fb682.png)
- en: The `loadShops` method is called in `componentDidMount` to load the shops when
    the component mounts.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在“componentDidMount”中调用“loadShops”方法以在组件挂载时加载商店。
- en: '`mern-marketplace/client/shop/Shops.js`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shops.js`：'
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It uses the `list` fetch method to retrieve the shop list and sets the data
    to state.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用“list”fetch方法来检索商店列表并将数据设置为状态。
- en: '`mern-marketplace/client/shop/Shops.js`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shops.js`：'
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the `Shops` component, the retrieved shops array is iterated over using `map`,
    with each shop's data rendered in the view in a Material-UI `ListItem`, and each
    `ListItem` is also linked to the individual shop's view.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在“商店”组件中，使用“map”迭代检索到的商店数组，每个商店的数据在视图中以Material-UI“ListItem”的形式呈现，每个“ListItem”也链接到单独的商店视图。
- en: '`mern-marketplace/client/shop/Shops.js`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shops.js`：'
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `Shops` component will be accessed by the end user at `/shops/all`, set
    up with React Router and declared in `MainRouter.js`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: “商店”组件将由最终用户在“/shops/all”访问，使用React Router设置并在“MainRouter.js”中声明。
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`：'
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: List shops by owner
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按所有者列出商店
- en: Authorized sellers will see a list of the shops they created, which they can
    manage by editing or deleting any shop on the list.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 经授权的卖家将看到他们创建的商店列表，他们可以通过编辑或删除列表上的任何商店来管理。
- en: Shops by owner API
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按所有者查询商店API
- en: We will add a GET route to retrieve the shops owned by a specific user to the
    shop routes declared in the backend.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后端声明的商店路由中添加一个GET路由，以检索特定用户拥有的商店。
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`：'
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: To process the `:userId` param and retrieve the associated user from the database,
    we will utilize the `userByID` method in user controller. We will add the following
    to the `Shop` routes in `shop.routes.js`, so the user is available in the `request`
    object as `profile`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理“:userId”参数并从数据库中检索关联的用户，我们将在用户控制器中利用“userByID”方法。我们将在“shop.routes.js”的“Shop”路由中添加以下内容，以便用户作为“profile”在“request”对象中可用。
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`：'
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `listByOwner` controller method in `shop.controller.js` will query the `Shop`
    collection in the database to get the matching shops.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: “shop.controller.js”中的“listByOwner”控制器方法将查询数据库中的“Shop”集合以获取匹配的商店。
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`：'
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the query to the Shop collection, we find all the shops where the `owner`
    field matches the user specified with the `userId` param.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在对商店集合的查询中，我们找到所有“owner”字段与使用“userId”参数指定的用户匹配的商店。
- en: Fetch all shops owned by a user for the view
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取用户拥有的所有商店以供查看
- en: 'In the frontend, to fetch the shops for a specific user using this list by
    owner API, we will add a fetch method in `client/shop/api-shop.js`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，为了使用此按所有者列表API获取特定用户的商店，我们将在“client/shop/api-shop.js”中添加一个fetch方法：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: MyShops component
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MyShops组件
- en: 'The `MyShops` component is similar to the `Shops` component, it fetches the
    list of shops owned by the current user in `componentDIdMount`, and renders each
    shop in a `ListItem`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: “MyShops”组件类似于“Shops”组件，它在“componentDIdMount”中获取当前用户拥有的商店列表，并在“ListItem”中呈现每个商店：
- en: '![](assets/616c4231-1720-4919-beac-fe405b705498.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/616c4231-1720-4919-beac-fe405b705498.png)
- en: Additionally, each shop has an `edit` and a `delete` option, unlike the list
    of items in `shops`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个商店都有“编辑”和“删除”选项，而不像“商店”中的物品列表。
- en: '`mern-marketplace/client/shop/MyShops.js`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/MyShops.js`：'
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `Edit` button links to the Edit Shop view. The `DeleteShop` component handles
    the delete action, and updates the list by calling the `removeShop` method passed
    from `MyShops`, to update the state with the modified list of shops for the current
    user.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`编辑`按钮链接到编辑商店视图。`DeleteShop`组件处理删除操作，并通过调用从`MyShops`传递的`removeShop`方法来更新列表，以更新当前用户的修改后的商店列表状态。'
- en: '`mern-marketplace/client/shop/MyShops.js`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/MyShops.js`：'
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `MyShops` component can only be viewed by a signed-in user who is also a
    seller. So we will add a `PrivateRoute` in the `MainRouter` component, which will
    render this component only for authorized users, at `/seller/shops`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyShops`组件只能被已登录且也是卖家的用户查看。因此，我们将在`MainRouter`组件中添加一个`PrivateRoute`，仅为授权用户在`/seller/shops`处呈现此组件。'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`：'
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Display a shop
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展示一个商店
- en: Any users browsing MERN Marketplace will be able to browse each individual shop.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 任何浏览MERN Marketplace的用户都可以浏览每个单独的商店。
- en: Read a shop API
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取商店API
- en: In the backend, we will add a `GET` route that queries the `Shop` collection
    with an ID and returns the shop in the response.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将添加一个`GET`路由，用ID查询`Shop`集合并在响应中返回商店。
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`：'
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `:shopId` param in the route URL will call the `shopByID` controller method,
    which is similar to the `userByID` controller method, retrieves the shop from
    the database, and attaches it to the request object to be used in the `next` method.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 路由URL中的`:shopId`参数将调用`shopByID`控制器方法，类似于`userByID`控制器方法，从数据库中检索商店，并将其附加到请求对象中，以便在`next`方法中使用。
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`：'
- en: '[PRE37]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `read` controller method then returns this `shop` object in the response
    to the client.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`read`控制器方法将这个`shop`对象返回给客户端的响应中。
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`：'
- en: '[PRE38]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Fetch the shop in the view
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取商店
- en: In `api-shop.js`, we will add a `fetch` method to use this read API in the frontend.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在`api-shop.js`中，我们将添加一个`fetch`方法来在前端使用这个读取API。
- en: '`mern-marketplace/client/shop/api-shop.js`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/api-shop.js`：'
- en: '[PRE39]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Shop component
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商店组件
- en: 'The `Shop` component will render the shop details and also a list of products
    in the specified shop using a product list component, which will be discussed
    in the *Products* section:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`Shop`组件将呈现商店的详细信息，还使用产品列表组件呈现指定商店的产品列表，这将在*产品*部分讨论：'
- en: '![](assets/ea0dcb6f-6c84-49b8-b545-6f7fb64e2d01.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ea0dcb6f-6c84-49b8-b545-6f7fb64e2d01.png)'
- en: The `Shop` component can be accessed in the browser at the `/shops/:shopId`
    route, which is defined in `MainRouter` as follows.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`Shop`组件可以在浏览器中通过`/shops/:shopId`路由访问，该路由在`MainRouter`中定义如下。'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`：'
- en: '[PRE40]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In `componentDidMount`, the shop details are fetched using the `read` method
    from `api-shop.js`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在`componentDidMount`中，使用`api-shop.js`中的`read`方法获取商店详情。
- en: '`mern-marketplace/client/shop/Shop.js`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shop.js`：'
- en: '[PRE41]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The retrieved shop data is set to state and rendered in the view to display
    the shop's name, logo, and description.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 检索到的商店数据被设置为状态，并在视图中呈现以显示商店的名称、logo和描述。
- en: '`mern-marketplace/client/shop/Shop.js`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shop.js`：'
- en: '[PRE42]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `logoUrl` points to the route that retrieves the logo image from the database
    if it exists, and it's defined as follows.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在，`logoUrl`指向从数据库中检索logo图像的路由，并定义如下。
- en: '`mern-marketplace/client/shop/Shop.js`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shop.js`：'
- en: '[PRE43]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Edit a shop
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑一个商店
- en: Authorized sellers will also be able to edit the details of the shops they own.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 授权卖家也可以编辑他们拥有的商店的详细信息。
- en: Edit shop API
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑商店API
- en: In the backend, we will add a `PUT` route that allows an authorized seller to
    edit one of their shops.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将添加一个`PUT`路由，允许授权的卖家编辑他们的商店之一。
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`：'
- en: '[PRE44]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The `isOwner` controller method ensures that the signed-in user is actually
    the owner of the shop being edited.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`isOwner`控制器方法确保已登录的用户实际上是正在编辑的商店的所有者。'
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`：'
- en: '[PRE45]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `update` controller method will use `formidable` and `fs` modules as in
    the `create` controller method discussed earlier, to parse the form data and update
    the existing shop in the database.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`update`控制器方法将使用`formidable`和`fs`模块，如前面讨论的`create`控制器方法一样，解析表单数据并更新数据库中的现有商店。'
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`：'
- en: '[PRE46]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Fetch the edit API in the view
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取编辑API
- en: The edit API is called in the view using a `fetch` method that takes the form
    data and sends the multipart request to the backend.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中使用`fetch`方法调用编辑API，该方法获取表单数据并将多部分请求发送到后端。
- en: '`mern-marketplace/client/shop/api-shop.js`:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/api-shop.js`：'
- en: '[PRE47]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: EditShop component
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EditShop组件
- en: 'The `EditShop` component will show a form similar to the create new shop form,
    pre-populated with the existing shop details. This component will also show a
    list of the products in this shop, to be discussed in the *Products* section:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditShop`组件将显示一个类似于创建新商店表单的表单，预先填充现有商店的详细信息。该组件还将显示该商店中的产品列表，将在*产品*部分中讨论：'
- en: '![](assets/7d0e26cb-2b0f-4f2f-8ba5-21e567bf8905.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7d0e26cb-2b0f-4f2f-8ba5-21e567bf8905.png)'
- en: The form part is similar to the form in the `NewShop` component, with the same
    form fields and a `formData` object that holds the multipart form data sent with
    the `update` fetch method.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 表单部分类似于`NewShop`组件中的表单，具有相同的表单字段和一个`formData`对象，该对象保存了与`update` fetch方法一起发送的多部分表单数据。
- en: The `EditShop` component is only accessible by authorized shop owners. So we
    will add a `PrivateRoute` in the `MainRouter` component, which will render this
    component only for authorized users at `/seller/shop/edit/:shopId`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditShop`组件只能被授权的商店所有者访问。因此，我们将在`MainRouter`组件中添加一个`PrivateRoute`，该组件将仅为`/seller/shop/edit/:shopId`上的授权用户呈现此组件。'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`：'
- en: '[PRE48]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This link is added with an edit icon for each shop in the `MyShops` component.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这个链接是在`MyShops`组件中为每个商店添加的编辑图标。
- en: Delete a shop
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除商店
- en: An authorized seller can delete any of their own shops from the `MyShops` list.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 授权的卖家可以从`MyShops`列表中删除他们自己的任何商店。
- en: Delete shop API
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除商店API
- en: In the backend, we will add a `DELETE` route that allows an authorized seller
    to delete one of their own shops.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将添加一个`DELETE`路由，允许授权的卖家删除他们自己的商店之一。
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`：'
- en: '[PRE49]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The `remove` controller method deletes the specified shop from the database,
    if `isOwner` confirms that the signed-in user is the owner of the shop.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`remove`控制器方法从数据库中删除指定的商店，如果`isOwner`确认已登录的用户是商店的所有者。'
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`：'
- en: '[PRE50]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Fetch the delete API in the view
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取删除API
- en: We will add a corresponding method in the frontend to make a delete request
    to the delete API.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在前端添加一个相应的方法，向删除API发出删除请求。
- en: '`mern-marketplace/client/shop/api-shop.js`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/api-shop.js`：'
- en: '[PRE52]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: DeleteShop component
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DeleteShop组件
- en: 'The `DeleteShop` component is added to the `MyShops` component for each shop
    in the list. It takes the `shop` object and a `onRemove` method as props from
    `MyShops`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeleteShop`组件添加到`MyShops`组件中，用于列表中的每个商店。它从`MyShops`中获取`shop`对象和`onRemove`方法作为props：'
- en: '![](assets/9dc19d06-d474-4b66-bbaa-070dd8d16b12.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9dc19d06-d474-4b66-bbaa-070dd8d16b12.png)'
- en: This component is basically an icon button that, on click, opens a confirm dialog
    to ask the user whether they are sure they want to delete their shop.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件基本上是一个图标按钮，点击后会打开一个确认对话框，询问用户是否确定要删除他们的商店。
- en: '`mern-marketplace/client/shop/DeleteShop.js`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/DeleteShop.js`：'
- en: '[PRE53]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: On delete confirmation from the user in the dialog, the `delete` fetch method
    is called in `deleteShop`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在对话框中用户确认删除后，将调用`deleteShop`中的`delete`获取方法。
- en: '`mern-marketplace/client/shop/DeleteShop.js`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/DeleteShop.js`：'
- en: '[PRE54]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: On successful deletion, the dialog is closed and the shop list in `MyShops`
    is updated by calling the `onRemove` prop, which gets the `removeShop` method
    passed in as a prop from `MyShops`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 成功删除后，对话框将关闭，并通过调用`onRemove`属性更新`MyShops`中的商店列表，该属性从`MyShops`中作为属性传递的`removeShop`方法获取。
- en: These shop views will allow both buyers and sellers to interact with the shops.
    The shops will also have products, discussed next, which the owners will manage
    and the buyers will browse through with an option to add to their cart.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这些商店视图将允许买家和卖家与商店互动。商店还将拥有产品，接下来将讨论，业主将管理这些产品，买家将通过浏览并选择添加到购物车的选项。
- en: Products
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品
- en: Products are the most crucial aspect in a marketplace application. In the MERN
    Marketplace, sellers can manage products in their shops, and visitors can search
    for and browse products.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 产品是市场应用程序中最关键的方面。在MERN Marketplace中，卖家可以管理他们商店中的产品，访问者可以搜索和浏览产品。
- en: Product model
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品模型
- en: Products will be stored in a product collection in the database, with a schema
    defined using Mongoose. For MERN Marketplace, we will keep the product schema
    simple with support for fields such as product name, description, image, category,
    quantity, price, created at, updated at, and a reference to the shop.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 产品将存储在数据库中的产品集合中，使用Mongoose定义的模式。对于MERN Marketplace，我们将保持产品模式简单，支持诸如产品名称、描述、图像、类别、数量、价格、创建时间、更新时间以及对商店的引用等字段。
- en: '**Product name and description**: The `name` and `description` fields will
    be `String` types, with `name` as a `required` field:'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品名称和描述**：`name`和`description`字段将是`String`类型，`name`为`required`字段：'
- en: '[PRE55]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '**Product image**: The `image` field will store an image file to be uploaded
    by the user as data in the MongoDB database:'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品图片**：`image`字段将存储用户上传的图像文件作为MongoDB数据库中的数据：'
- en: '[PRE56]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '**Product category**: The `category` value will allow grouping products of
    the same type together:'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品类别**：`category`值将允许将相同类型的产品分组在一起：'
- en: '[PRE57]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '**Product quantity**: The `quantity` field will represent the amount available
    for selling in the shop:'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品数量**：`quantity`字段将表示商店中可供销售的数量：'
- en: '[PRE58]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '**Product price**: The `price` field will hold the unit price this product
    will cost the buyer:'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品价格**：`price`字段将保存该产品的单价：'
- en: '[PRE59]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '**Product shop**: The `shop` field will reference the shop in which the product
    was added:'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品商店**：`shop`字段将引用产品所添加的商店：'
- en: '[PRE60]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '**Created and updated at times**: The `created` and `updated` fields will be
    `Date` types, with `created` generated when a new product is added, and the `updated`
    time changed when the same product''s details are modified:'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建和更新时间**：`created`和`updated`字段将是`Date`类型，`created`在添加新产品时生成，当修改同一产品的详细信息时，`updated`时间会改变。'
- en: '[PRE61]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The fields in this schema definition will enable us to implement all product-related
    features in MERN Marketplace.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模式定义中的字段将使我们能够在MERN Marketplace中实现所有与产品相关的功能。
- en: Create a new product
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新产品
- en: Sellers in MERN Marketplace will be able to add new products to the shops they
    own and create on the platform.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Marketplace中，卖家将能够向他们拥有的商店和平台上创建的商店添加新产品。
- en: Create product API
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建产品API
- en: In the backend, we will add a route at `/api/products/by/:shopId`, which accepts
    a `POST` request containing product data, to create a new product associated with
    the shop identified by the `:shopId` param. The code to handle this request will
    first check that the current user is the owner of the shop in which the new product
    will be added, before creating the new product in the database.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将在`/api/products/by/:shopId`添加一个路由，接受包含产品数据的`POST`请求，以创建一个与`:shopId`参数标识的商店相关联的新产品。处理这个请求的代码将首先检查当前用户是否是将要添加新产品的商店的所有者，然后在数据库中创建新产品。
- en: This create product API route is declared in the `product.routes.js` file, and
    it utilizes the `shopByID` and `isOwner` methods from the shop controller to process
    the `:shopId` param, and to verify the current user as the shop owner.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这个创建产品API路由在`product.routes.js`文件中声明，并利用了商店控制器中的`shopByID`和`isOwner`方法来处理`:shopId`参数，并验证当前用户是否为商店所有者。
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE62]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The `product.routes.js` file will be very similar to the `shop.routes.js` file,
    and to load these new routes in the Express app, we need to mount the product
    routes in `express.js`, like we did for the shop routes.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`product.routes.js`文件将与`shop.routes.js`文件非常相似，为了在Express应用程序中加载这些新路由，我们需要像为商店路由一样，在`express.js`中挂载产品路由。'
- en: '`mern-marketplace/server/express.js`:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，为了使用这个创建API，我们将在`client/product/api-product.js`中设置一个`fetch`方法，通过传递视图中的多部分表单数据，向创建API发起POST请求。
- en: '[PRE63]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The `create` method, in the product controller, uses the `formidable` npm module
    to parse the multipart request that may contain an image file uploaded by the
    user along with the product fields. The parsed data is then saved to the `Product`
    collection as a new product.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在产品控制器中，`create`方法使用`formidable` npm模块来解析可能包含用户上传的图像文件和产品字段的多部分请求。然后将解析的数据保存到`Product`集合中作为新产品。
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE64]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Fetching the create API in the view
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取创建API
- en: In the frontend, to use this create API, we will set up a `fetch` method in
    `client/product/api-product.js` to make a post request to the create API by passing
    the multipart form data from the view.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: NewProduct组件
- en: '`mern-marketplace/client/product/api-product.js`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Marketplace中，产品将以多种方式呈现给用户，两个主要区别在于产品在卖家列表和买家列表中的呈现方式。
- en: '[PRE65]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The NewProduct component
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![](assets/651b5ab8-bc62-48ac-8ff4-c5acdfeb28ea.png)'
- en: 'The `NewProduct` component will be similar to the `NewShop` component. It will
    contain a form that allows a seller to create a product by entering a name, description,
    category, quantity, and price, and uploading a product image file from their local
    filesystem:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewProduct`组件将类似于`NewShop`组件。它将包含一个表单，允许卖家输入名称、描述、类别、数量和价格，并从本地文件系统上传产品图像文件。'
- en: '![](assets/651b5ab8-bc62-48ac-8ff4-c5acdfeb28ea.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: 列出产品
- en: This `NewProduct` component will only load at a route that is associated with
    a specific shop, so only signed-in users who are sellers can add a product to
    a shop they own. To define this route, we add a `PrivateRoute` in the `MainRouter`
    component, which will render this form only for authorized users at `/seller/:shopId/products/new`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`NewProduct`组件只会在与特定商店相关联的路由上加载，因此只有已登录的卖家用户才能向他们拥有的商店添加产品。为了定义这个路由，我们在`MainRouter`组件中添加了一个`PrivateRoute`，它只会在`/seller/:shopId/products/new`上为经过授权的用户渲染这个表单。
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE66]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: List products
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/express.js`:'
- en: In MERN Marketplace, products will be presented to users in multiple ways, the
    two main distinctions will be in the way products are listed for sellers and the
    way they are listed for buyers.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/api-product.js`:'
- en: List by shop
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按商店列出
- en: Visitors to the marketplace will browse products in each shop, and sellers will
    manage a list of products in each of their shops.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 市场的访问者将浏览每个店铺中的产品，卖家将管理他们各自店铺中的产品列表。
- en: Products by shop API
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按店铺API
- en: To retrieve products from a specific shop in the database, we will set up a
    GET route at `/api/products/by/:shopId`, as follows.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从数据库中检索特定店铺的产品，我们将在`/api/products/by/:shopId`设置一个GET路由，如下所示。
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE67]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The `listByShop` controller method executed in response to this request will
    query the Product collection to return the products matching the given shop's
    reference.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个请求执行的`listByShop`控制器方法将查询产品集合，返回与给定店铺引用匹配的产品。
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE68]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: In the frontend, to fetch the products in a specific shop using this list by
    shop API, we will add a fetch method in `api-product.js`.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，使用此列表按店铺API获取特定店铺的产品，我们将在`api-product.js`中添加一个fetch方法。
- en: '`mern-marketplace/client/product/api-product.js`:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/api-product.js`:'
- en: '[PRE69]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Products component for buyers
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 买家的产品组件
- en: 'The `Products` component is mainly for displaying the products to visitors
    who may buy the products. We will use this component to render product lists relevant
    to the buyer. It will receive the product list as props from a parent component
    displaying a list of products:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`Products`组件主要用于向访问者展示可能购买的产品。我们将使用此组件来呈现与买家相关的产品列表。它将从显示产品列表的父组件中作为props接收产品列表。'
- en: '![](assets/ac725381-88fc-4ed2-8d4e-73c76d340bf1.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ac725381-88fc-4ed2-8d4e-73c76d340bf1.png)'
- en: The list of products in a shop will be displayed to the user in an individual
    `Shop` view. So this `Products` component is added to the `Shop` component and
    given the list of relevant products as props. The `searched` prop relays whether
    this list is a result of a product search, so appropriate messages can be rendered.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 店铺中的产品列表将显示给用户在单独的`Shop`视图中。因此，将此`Products`组件添加到`Shop`组件中，并将相关产品列表作为props传递。`searched`
    prop传递了这个列表是否是产品搜索的结果，因此可以呈现适当的消息。
- en: '`mern-marketplace/client/shop/Shop.js`:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shop.js`:'
- en: '[PRE70]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: In the `Shop` component, we need to add a call to the `listByShop` fetch method
    on `componentDidMount` to retrieve the relevant products and set it to state.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Shop`组件中，我们需要在`componentDidMount`中添加对`listByShop` fetch方法的调用，以检索相关产品并将其设置为状态。
- en: '`mern-marketplace/client/shop/Shop.js`:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shop.js`:'
- en: '[PRE71]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: In the `Products` component, if the product lists sent in the props contains
    products, the list is iterated over and the relevant details of each product are
    rendered in a Material-UI `GridListTile`, with a link to the individual product
    view and an `AddToCart` component (implementation for which is discussed in [Chapter
    7](b73b9122-dd0c-45dc-ac34-94ce990e0437.xhtml), *Extending the Marketplace for
    Orders and Payments*).
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Products`组件中，如果props中发送的产品列表包含产品，那么将对列表进行迭代，并在Material-UI的`GridListTile`中呈现每个产品的相关细节，同时提供到单个产品视图的链接和一个`AddToCart`组件（其实现在[第7章](b73b9122-dd0c-45dc-ac34-94ce990e0437.xhtml)中讨论，*扩展订单和支付的市场*）。
- en: '`mern-marketplace/client/product/Products.js`:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Products.js`:'
- en: '[PRE72]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: This `Products` component is used to render products in a shop, products by
    category, and products in search results.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Products`组件用于呈现商店中的产品，按类别的产品以及搜索结果中的产品。
- en: MyProducts component for shop owners
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 店主的MyProducts组件
- en: 'In contrast to the `Products` component, the `MyProducts` component in `client/product/MyProducts.js`
    is only for displaying products to sellers so they can manage the products in
    each shop:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Products`组件相比，`client/product/MyProducts.js`中的`MyProducts`组件仅用于向卖家展示产品，以便他们可以管理每个店铺中的产品。
- en: '![](assets/1179071d-86e9-4026-8dac-527e64f4fe67.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1179071d-86e9-4026-8dac-527e64f4fe67.png)'
- en: The `MyProducts` component is added to the `EditShop` view, so sellers can manage
    a shop and its contents in one place. It is provided the shop's ID in a prop,
    so relevant products can be fetched.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyProducts`组件被添加到`EditShop`视图中，这样卖家就可以在一个地方管理商店及其内容。它通过一个prop提供了商店的ID，以便可以获取相关产品。'
- en: '`mern-marketplace/client/shop/EditShop.js`:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/EditShop.js`:'
- en: '[PRE73]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: In `MyProducts`, the relevant products are first loaded in `componentDidMount`.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MyProducts`中，相关产品首先在`componentDidMount`中加载。
- en: '`mern-marketplace/client/product/MyProducts.js`:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/MyProducts.js`:'
- en: '[PRE74]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The `loadProducts` method uses the same `listByShop` fetch method to retrieve
    the products in the shop and sets it to state.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadProducts`方法使用相同的`listByShop`获取方法来检索商店中的产品，并将其设置为状态。'
- en: '`mern-marketplace/client/product/MyProducts.js`:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/MyProducts.js`:'
- en: '[PRE75]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: This list of products is iterated over and each product is rendered in `ListItem`
    along with an edit and delete option, similar to the `MyShops` list view. The
    edit button links to the Edit Product view. The `DeleteProduct` component handles
    the delete action, and reloads the list by calling an `onRemove` method passed
    from `MyProducts`, to update the state with the updated list of products for the
    current shop.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历产品列表，并在`ListItem`中呈现每个产品，同时提供编辑和删除选项，类似于`MyShops`列表视图。编辑按钮链接到编辑产品视图。`DeleteProduct`组件处理删除操作，并通过调用从`MyProducts`传递的`onRemove`方法重新加载列表，以更新当前商店的产品列表状态。
- en: The `removeProduct` method, defined in `MyProducts`, is provided as the `onRemove`
    prop to the `DeleteProduct` component.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeProduct`方法在`MyProducts`中定义，并作为`onRemove`prop提供给`DeleteProduct`组件。'
- en: '`mern-marketplace/client/product/MyProducts.js`:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/MyProducts.js`:'
- en: '[PRE76]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: List product suggestions
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出产品建议
- en: Visitors to MERN Marketplace will see product suggestions, such as the latest
    products added to the marketplace and products related to the product they are
    currently viewing.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 访问MERN Marketplace的访客将看到产品建议，例如最新添加到市场的产品以及与他们当前查看的产品相关的产品。
- en: Latest products
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最新产品
- en: On the homepage of the MERN Marketplace, we will display five of the latest
    products added to the marketplace. To fetch the latest products, we will set up
    an API that will receive a GET request at `/api/products/latest`.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Marketplace的主页上，我们将显示最新添加到市场的五个产品。为了获取最新产品，我们将设置一个API，该API将在`/api/products/latest`接收GET请求。
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE77]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The `listLatest` controller method will sort the list of products in the database
    with the `created` date from newest to oldest and return the first five from the
    sorted list in the response.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`listLatest`控制器方法将对数据库中的产品列表按照`created`日期从新到旧进行排序，并在响应中返回排序后的列表中的前五个产品。'
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE78]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: In the frontend, we will set up a corresponding fetch method in `api-product.js`
    for this latest `products` API, similar to the `fetch` for retrieving the list
    by shop. This retrieved list will then be rendered in the `Suggestions` component
    added to the homepage.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，我们将为这个最新的`products`API设置一个对应的fetch方法，类似于检索商店列表的`fetch`。然后将检索到的列表呈现在添加到主页的`Suggestions`组件中。
- en: Related products
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关产品
- en: In each individual product view, we will show five related products as suggestions.
    To retrieve these related products, we will set up an API that accepts a request
    at `/api/products/related`.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个单独的产品视图中，我们将显示五个相关产品作为建议。为了检索这些相关产品，我们将设置一个API，该API将在`/api/products/related`接收请求。
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE79]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: The `:productId` param in the route URL route will call the `productByID` controller
    method, which is similar to the `shopByID` controller method, and retrieves the
    product from the database and attaches it to the request object to be used in
    the `next` method.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 路由URL中的`:productId`参数将调用`productByID`控制器方法，类似于`shopByID`控制器方法，从数据库中检索产品并将其附加到请求对象中，以便在`next`方法中使用。
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`：'
- en: '[PRE80]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: The `listRelated` controller method queries the `Product` collection to find
    other products with the same category as the given product, excluding the given
    product, and returns the first five products in the resulting list.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`listRelated`控制器方法查询`Product`集合，以查找具有与给定产品相同类别的其他产品，排除给定产品，并返回结果列表中的前五个产品。'
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`：'
- en: '[PRE81]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: In order to utilize this related-products API in the frontend, we will set up
    a corresponding fetch method in `api-product.js`. The fetch method will be called
    in the `Product` component with the product ID to populate the `Suggestions` component
    rendered in the product view.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端利用这个相关产品的API，我们将在`api-product.js`中设置一个对应的fetch方法。这个fetch方法将在`Product`组件中被调用，用于填充在产品视图中渲染的`Suggestions`组件。
- en: Suggestions component
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建议组件
- en: 'The `Suggestions` component will be rendered on the homepage and on an individual
    product page to show the latest products and related products, respectively:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`Suggestions`组件将在主页和单个产品页面上呈现，分别显示最新产品和相关产品：'
- en: '![](assets/81546059-ce0f-4787-9d3c-a6c9d41cb1de.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/81546059-ce0f-4787-9d3c-a6c9d41cb1de.png)'
- en: 'It will receive the relevant list of products from the parent component as
    props, along with a title for the list:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 它将从父组件作为props接收相关的产品列表，以及列表的标题：
- en: '[PRE82]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: In the `Suggestions` component, the received list is iterated over and individual
    products rendered with relevant details, a link to the individual product page,
    and an `AddToCart` component.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Suggestions`组件中，接收到的列表被迭代，并渲染出具体的产品细节，一个指向单个产品页面的链接，以及一个`AddToCart`组件。
- en: '`mern-marketplace/client/product/Suggestions.js`:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Suggestions.js`：'
- en: '[PRE83]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Display a product
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示一个产品
- en: Visitors to the MERN Marketplace will be able to browse each product with more
    details displayed in a separate view.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Marketplace的访客将能够浏览每个产品，显示在单独的视图中的更多细节。
- en: Read a product API
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读产品API
- en: In the backend, we will add a GET route that queries the `Product` collection
    with an ID and returns the product in the response.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将添加一个GET路由，用于查询带有ID的`Product`集合，并在响应中返回产品。
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`：'
- en: '[PRE84]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The `:productId` param invokes the `productByID` controller method, which retrieves
    the product from the database and appends it to the request object. The product
    in the request object is used by the `read` controller method to respond to the
    `read` request.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`：productId`参数调用`productByID`控制器方法，从数据库中检索产品并将其附加到请求对象。请求对象中的产品由`read`控制器方法使用，以响应`read`请求。'
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`：'
- en: '[PRE85]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: In `api-product.js`, we will add a fetch method to use this read API in the
    frontend.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在`api-product.js`中，我们将添加一个fetch方法来在前端使用这个read API。
- en: '`mern-marketplace/client/product/api-product.js`:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/api-product.js`：'
- en: '[PRE86]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Product component
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品组件
- en: 'The `Product` component will render the product details, include an add to
    cart option, and also show a list of related products:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`Product`组件将呈现产品细节，包括加入购物车选项，并显示相关产品列表：'
- en: '![](assets/5ade3fb1-cdb7-40a3-8d9c-75a03b55131d.png)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5ade3fb1-cdb7-40a3-8d9c-75a03b55131d.png)'
- en: The `Product` component can be accessed in the browser at the `/product/:productID`
    route, which is defined in `MainRouter` as follows.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`Product` 组件可以在浏览器中通过 `/product/:productID` 路由访问，该路由在 `MainRouter` 中定义如下。'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE87]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The product details and the related list data will be fetched when the component
    mounts or will receive new props when the `productId` changes in the frontend
    route path after the user clicks on another product in the related list.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 当组件挂载时，将获取产品详情和相关列表数据，或者在前端路由路径中的 `productId` 更改后，将接收新的 props，用户点击相关列表中的另一个产品时。
- en: '`mern-marketplace/client/product/Product.js`:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Product.js`:'
- en: '[PRE88]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: The `loadProduct` method calls the `read` and `listRelated` fetch methods to
    get the product and related list data, then sets the data to state.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadProduct` 方法调用 `read` 和 `listRelated` 获取产品和相关列表数据，然后将数据设置到状态中。'
- en: '`mern-marketplace/client/product/Product.js`:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Product.js`:'
- en: '[PRE89]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: The product details part of the component displays relevant information about
    the product and an `AddToCart` component in a Material-UI `Card` component.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的产品详情部分显示有关产品的相关信息，以及在 Material-UI `Card` 组件中的 `AddToCart` 组件。
- en: '`mern-marketplace/client/product/Product.js`:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Product.js`:'
- en: '[PRE90]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The `Suggestions` component is added in the Product view with the related list
    data passed as a prop.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`Suggestions` 组件添加到产品视图中，相关列表数据作为 prop 传递。'
- en: Edit and delete a product
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑和删除产品
- en: Implementations to edit and delete products in the application are similar to
    editing and deleting shops, as covered in previous sections. These functionalities
    will require corresponding APIs in the backend, fetch methods in the frontend,
    and React component views with forms and actions.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中编辑和删除产品的实现与编辑和删除商店类似，如前几节所述。这些功能将需要后端中相应的 API、前端中的 fetch 方法，以及带有表单和操作的
    React 组件视图。
- en: Edit
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑
- en: The edit functionality is very similar to create product and the `EditProduct`
    form component is also only accessible by verified sellers at `/seller/:shopId/:productId/edit`.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑功能与创建产品非常相似，`EditProduct` 表单组件也只能由经过验证的卖家在 `/seller/:shopId/:productId/edit`
    访问。
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE91]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: The `EditProduct` component contains the same form as `NewProduct` with populated
    values of the product retrieved using the read product API, and it uses a fetch
    method to send multipart form data with a PUT request to the edit product API
    in the backend at `/api/products/by/:shopId`.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditProduct` 组件包含与 `NewProduct` 相同的表单，使用读取产品 API 检索到的产品的填充值，并使用 fetch 方法将多部分表单数据发送到后端的编辑产品
    API，位于 `/api/products/by/:shopId`。'
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE92]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The `update` controller is similar to the product `create` method and shop `update`
    method; it handles the multipart form data using `formidable` and extends the
    product details to save the updates.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`update` 控制器类似于产品 `create` 方法和商店 `update` 方法；它使用 `formidable` 处理多部分表单数据，并扩展产品详情以保存更新。'
- en: Delete
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除
- en: The `DeleteProduct` component is added to the `MyProducts` component for each
    product in the list, as discussed earlier. It takes the `product` object, `shopID`,
    and a `loadProducts` method as a prop from `MyProducts`. The component is similar
    to `DeleteShop`, and when the delete intent is confirmed by the user, it calls
    the fetch method for delete, which makes the DELETE request to the server at `/api/product/:shopId/:productId`.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeleteProduct` 组件添加到 `MyProducts` 组件中，用于列表中的每个产品，如前面讨论的。它从 `MyProducts` 中获取
    `product` 对象、`shopID` 和 `loadProducts` 方法作为 prop。该组件类似于 `DeleteShop`，当用户确认删除意图时，它调用删除的
    fetch 方法，向服务器发出 DELETE 请求，位于 `/api/product/:shopId/:productId`。'
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`：'
- en: '[PRE93]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Product search with category
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带类别的产品搜索
- en: In MERN Marketplace, visitors will be able to search for specific products by
    name and also in a specific category.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Marketplace中，访问者将能够按名称和特定类别搜索特定产品。
- en: Categories API
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类别API
- en: To allow users to select a specific category to search in, we will set up an
    API that retrieves all the distinct categories present in the `Product` collection
    in the database. A GET request to `/api/products/categories` will return an array
    of unique categories.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让用户选择要搜索的特定类别，我们将设置一个API，该API从数据库中的`Product`集合中检索所有不同的类别。对`/api/products/categories`的GET请求将返回一个唯一类别的数组。
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`：'
- en: '[PRE94]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The `listCategories` controller method queries the `Product` collection with
    a `distinct` call against the `category` field.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`listCategories`控制器方法通过对`category`字段进行`distinct`调用来查询`Product`集合。'
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`：'
- en: '[PRE95]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: This categories API can be used in the frontend with a corresponding fetch method
    to retrieve the array of distinct categories and display in the view.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类别API可以在前端使用相应的fetch方法来检索不同类别的数组，并在视图中显示。
- en: Search products API
  id: totrans-399
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索产品API
- en: The search products API will take a GET request at `/api/products?search=value&category=value`,
    with query parameters in the URL to query the `Product` collection with provided
    search text and category values.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索产品API将在`/api/products?search=value&category=value`处接收GET请求，URL中带有查询参数，用于查询`Product`集合中提供的搜索文本和类别值。
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`：'
- en: '[PRE96]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: The `list` controller method will first process the query parameters in the
    request, then find products in the given category, if any, with names that partially
    match with the provided search text.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`控制器方法将首先处理请求中的查询参数，然后查找给定类别中的产品（如果有的话），这些产品的名称部分匹配提供的搜索文本。'
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`：'
- en: '[PRE97]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Fetch search results for the view
  id: totrans-406
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取视图的搜索结果
- en: To utilize this search API in the frontend, we will set up a method that constructs
    the URL with query parameters and calls a fetch to the API.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端利用这个搜索API，我们将设置一个方法来构建带有查询参数的URL，并调用API进行fetch。
- en: '`mern-marketplace/client/product/api-product.js`:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/api-product.js`：'
- en: '[PRE98]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: In order to construct the query parameters in the correct format, we will use
    the `query-string` npm module, which will help stringify the params object into
    a query string that can be attached to the request route.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以正确的格式构造查询参数，我们将使用`query-string` npm模块，它将帮助将参数对象字符串化为可以附加到请求路由的查询字符串。
- en: Search component
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索组件
- en: 'The first use case for applying the categories API and search API is the `Search`
    component:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 应用类别API和搜索API的第一个用例是`Search`组件：
- en: '![](assets/c2c169cb-0551-44c2-b0ac-862e033f86ac.png)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c2c169cb-0551-44c2-b0ac-862e033f86ac.png)'
- en: The `Search` component provides the user with a simple form containing a search
    `input` text field and a dropdown of the category options received from a parent
    component that will retrieve the list using the distinct categories API.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索组件为用户提供了一个简单的表单，其中包含一个搜索输入文本字段和一个下拉菜单，该下拉菜单包含从父组件接收的类别选项，父组件将使用不同类别的API检索列表。
- en: '`mern-marketplace/client/product/Search.js`:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Search.js`：'
- en: '[PRE99]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Once the user enters a search text and hits *Enter*, a call is made to the search
    API to retrieve the results.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户输入搜索文本并点击*Enter*，就会调用搜索API来检索结果。
- en: '`mern-marketplace/client/product/Search.js`:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Search.js`：'
- en: '[PRE100]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Then the results array is passed as a prop to the `Products` component to render
    the matching products below the search form.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将结果数组作为props传递给“产品”组件，以在搜索表单下方呈现匹配的产品。
- en: Categories component
  id: totrans-421
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类别组件
- en: 'The `Categories` component is the second use case for the distinct categories
    and search APIs. For this component, we first fetch the list of categories in
    a parent component and send it as props to display the categories to the user:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: “类别”组件是不同类别和搜索API的第二个用例。对于这个组件，我们首先在父组件中获取类别列表，并将其作为props发送以显示给用户：
- en: '![](assets/6f0f8fd3-ab5c-4441-8e25-b50c38df2bf8.png)'
  id: totrans-423
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6f0f8fd3-ab5c-4441-8e25-b50c38df2bf8.png)'
- en: When the user selects a category in the displayed list, a call is made to the
    Search API with just a category value, and the backend returns all the products
    in the selected category. The returned products are then rendered in a `Products`
    component.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在显示的列表中选择一个类别时，将使用搜索API调用一个类别值，并且后端返回所选类别中的所有产品。然后在“产品”组件中呈现返回的产品。
- en: In this first version of the MERN Marketplace, users can become sellers to create
    shops and add products, and visitors can browse shops and search for products,
    while the application also suggests products to the visitor.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Marketplace的第一个版本中，用户可以成为卖家创建商店和添加产品，访问者可以浏览商店和搜索产品，同时应用程序还会向访问者推荐产品。
- en: Summary
  id: totrans-426
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started building an online marketplace application using
    the MERN stack. The MERN skeleton was extended to add a seller role to users,
    so they can create shops and add products to each shop intended for selling to
    other users. We also explored how to utilize the stack to implement features such
    as product browsing, searching, and suggestions for regular users who are interesting
    in buying. But a marketplace application is incomplete without a shopping cart
    for checkout, order management, and payments processing.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们开始使用MERN堆栈构建一个在线市场应用程序。MERN骨架被扩展以向用户添加卖家角色，这样他们就可以创建商店并向每个商店添加产品，以便向其他用户出售。我们还探讨了如何利用堆栈来实现产品浏览、搜索以及对有兴趣购买的普通用户提出建议等功能。但是，一个市场应用程序如果没有购物车用于结账、订单管理和支付处理就是不完整的。
- en: In the next chapter, we will grow our application to add these features and
    learn more about how the MERN stack can be used to implement these core aspects
    of an e-commerce application.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将扩展我们的应用程序以添加这些功能，并了解更多关于如何使用MERN堆栈来实现电子商务应用程序的核心方面。
