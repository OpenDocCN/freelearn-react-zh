- en: Adding a React Frontend to Complete MERN
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加React前端以完成MERN
- en: A web application is incomplete without a frontend. It is the part that users
    interact with and it is crucial to any web experience. In this chapter, we will
    use React to add an interactive user interface to the basic user and auth features
    implemented for the backend of the MERN skeleton application that we started building
    in the previous chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 没有前端的Web应用程序是不完整的。这是用户与之交互的部分，对于任何Web体验都至关重要。在本章中，我们将使用React为我们在上一章开始构建的MERN骨架应用程序的后端实现的基本用户和认证功能添加交互式用户界面。
- en: 'We will cover the following topics to add a working frontend and complete the
    MERN skeleton application:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题，以添加一个可工作的前端并完成MERN骨架应用程序：
- en: Frontend features of the skeleton
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 骨架的前端特性
- en: Setting up development with React, React Router, and Material-UI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React、React Router和Material-UI进行开发设置
- en: Backend user API integration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端用户API集成
- en: Auth integration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证集成
- en: Home, Users, Sign-Up, Sign-In, User Profile, Edit, and Delete views
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主页、用户、注册、登录、用户资料、编辑和删除视图
- en: Navigation menu
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航菜单
- en: Basic server-side rendering
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的服务器端渲染
- en: Skeleton frontend
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 骨架前端
- en: 'In order to fully implement the skeleton application features discussed in
    the *Feature breakdown* section of [Chapter 3](1d83847c-9ed2-4640-a717-3b280a257145.xhtml),
    *Building a Backend with MongoDB, Express, and Node*, we will add the following
    user interface components to our base application:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完全实现在[第3章](1d83847c-9ed2-4640-a717-3b280a257145.xhtml)的*功能拆分*部分中讨论的骨架应用程序功能，即使用MongoDB、Express和Node构建后端，我们将向基本应用程序添加以下用户界面组件：
- en: '**Home page**: A view that renders at the root URL to welcome users to the
    web application'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主页：在根URL上呈现的视图，欢迎用户访问Web应用程序
- en: '**User list page**: A view that fetches and shows a list of all the users in
    the database, and also links to individual user profiles'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户列表页面：获取并显示数据库中所有用户列表的视图，并链接到单个用户资料
- en: '**Sign-up page**: A view with a form for user sign-up, allowing new users to
    create a user account and redirecting them to a sign in page when successfully
    created'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册页面：一个带有用户注册表单的视图，允许新用户创建用户账户，并在成功创建后将他们重定向到登录页面
- en: '**Sign-in page**: A view with a sign-in form that allows existing users to
    sign in so they have access to protected views and actions'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录页面：带有登录表单的视图，允许现有用户登录，以便他们可以访问受保护的视图和操作
- en: '**Profile page**: A component that fetches and displays an individual user''s
    information, is only accessible by signed-in users, and also contains edit and
    delete options, which are visible only if the signed-in user is looking at their
    own profile'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人资料页面：获取并显示单个用户信息的组件，只有已登录用户才能访问，并且还包含编辑和删除选项，仅当已登录用户查看自己的个人资料时才可见
- en: '**Edit profile page**: A form that fetches the user''s information in the form,
    allows them to edit the information, and is accessible only if the logged-in user
    is trying to edit their own profile'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑个人资料页面：一个表单，获取用户的信息，允许他们编辑信息，并且仅当已登录用户尝试编辑自己的个人资料时才可访问
- en: '**Delete user component**: An option that allows the signed-in user to delete
    only their own profile after confirming their intent'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除用户组件：一个选项，允许已登录用户在确认意图后删除自己的个人资料
- en: '**Menu navigation bar**: A component that lists all the available and relevant
    views to the user, and also helps to indicate the user''s current location in
    the application'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菜单导航栏：列出所有可用和相关的视图的组件，还帮助指示用户在应用程序中的当前位置
- en: 'The following React component tree diagram shows all the React components we
    will develop to build out the views for this base application:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下React组件树图显示了我们将开发的所有React组件，以构建出这个基本应用程序的视图：
- en: '![](assets/a7c89a42-7cb4-41d2-a7b8-db331fbb9301.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a7c89a42-7cb4-41d2-a7b8-db331fbb9301.png)'
- en: '**MainRouter** will be the root React component that contains all the other
    custom React views in the application. **Home**, **Signup**, **Signin**, **Users**,
    **Profile**, and **EditProfile** will render at individual routes declared with
    React Router, whereas the **Menu** component will render across all these views,
    and **DeleteUser** will be a part of the **Profile** view.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**MainRouter**将是根React组件，其中包含应用程序中的所有其他自定义React视图。**Home**，**Signup**，**Signin**，**Users**，**Profile**和**EditProfile**将在使用React
    Router声明的各个路由上呈现，而**Menu**组件将在所有这些视图中呈现，**DeleteUser**将成为**Profile**视图的一部分。'
- en: The code discussed in this chapter, and for the complete skeleton, is available
    on GitHub in the repository at [github.com/shamahoque/mern-skeleton](https://github.com/shamahoque/mern-skeleton).
    You can clone this code and run the application as you go through the code explanations
    in the rest of this chapter.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的代码以及完整的骨架代码都可以在GitHub的存储库中找到，网址为[github.com/shamahoque/mern-skeleton](https://github.com/shamahoque/mern-skeleton)。您可以克隆此代码，并在本章的其余部分中阅读代码解释时运行应用程序。
- en: Folder and file structure
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件夹和文件结构
- en: 'The following folder structure shows the new folders and files to be added
    to the skeleton to complete it with a React frontend:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下文件夹结构显示了要添加到骨架中的新文件夹和文件，以完成具有React前端的骨架：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The client folder will contain the React components, helpers, and frontend assets,
    such as images and CSS. Besides this folder and the Webpack config for compiling
    and bundling the client code, we will also modify some of the other existing files
    to integrate the complete skeleton.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端文件夹将包含React组件，辅助程序和前端资产，例如图像和CSS。除了这个文件夹和用于编译和捆绑客户端代码的Webpack配置之外，我们还将修改一些其他现有文件，以整合完整的骨架。
- en: Setting up for React development
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为React开发设置
- en: Before we can start developing with React in our existing skeleton code base,
    we first need to add configuration to compile and bundle the frontend code, add
    the React-related dependencies necessary to build the interactive interface, and
    tie it all together in the MERN development flow.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以在现有的骨架代码库中开始使用React进行开发之前，我们首先需要添加配置来编译和捆绑前端代码，添加构建交互式界面所需的与React相关的依赖项，并在MERN开发流程中将所有这些联系在一起。
- en: Configuring Babel and Webpack
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Babel和Webpack
- en: To compile and bundle the client code to run it during development and also
    bundle it for production, we will update the configuration for Babel and Webpack.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在开发期间编译和捆绑客户端代码并在生产环境中运行它，我们将更新Babel和Webpack的配置。
- en: Babel
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Babel
- en: 'For compiling React, first install the Babel React preset module as a development
    dependency:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编译React，首先安装Babel的React预设模块作为开发依赖项：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then, update `.babelrc` to include the module and also configure the `react-hot-loader`
    Babel plugin as required for the `react-hot-loader` module.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，更新`.babelrc`以包括该模块，并根据需要配置`react-hot-loader` Babel插件。
- en: '`mern-skeleton/.babelrc`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/.babelrc`：'
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Webpack
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack
- en: 'To bundle client-side code after compiling it with Babel, and also to enable
    `react-hot-loader` for faster development, install the following modules:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Babel编译后捆绑客户端代码，并为更快的开发启用`react-hot-loader`，安装以下模块：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then, to configure Webpack for the frontend development and to build the production
    bundle, we will add a `webpack.config.client.js` file and a `webpack.config.client.production.js`
    file with the same configuration code described in [Chapter 2](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml),
    *Preparing the Development Environment*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了配置前端开发的Webpack并构建生产捆绑包，我们将添加一个`webpack.config.client.js`文件和一个`webpack.config.client.production.js`文件，其中包含与[第2章](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml)中描述的相同配置代码，*准备开发环境*。
- en: Loading Webpack middleware for development
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载Webpack中间件进行开发
- en: During development, when we run the server, the Express app should load the
    Webpack middleware relevant to the frontend with respect to the configuration
    set for the client-side code, so that the frontend and backend development workflow
    is integrated. To enable this, we will use the `devBundle.js` file discussed in
    [Chapter 2](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml), *Preparing the Development
    Environment,* to set up a `compile` method that takes the Express app and configures
    it to use the Webpack middleware. The `devBundle.js` in the `server` folder will
    be as follows.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，当我们运行服务器时，Express应用程序应加载与客户端代码设置的配置相关的Webpack中间件，以便集成前端和后端开发工作流程。为了实现这一点，我们将使用[第2章](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml)中讨论的`devBundle.js`文件，*准备开发环境*，设置一个`compile`方法，该方法接受Express应用程序并配置它使用Webpack中间件。`server`文件夹中的`devBundle.js`将如下所示。
- en: '`mern-skeleton/server/devBundle.js`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/devBundle.js`：'
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then, import and call this `compile` method in `express.js` by adding the following
    highlighted lines only while developing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '然后，通过添加以下突出显示的行，导入并调用`express.js`中的`compile`方法，仅在开发时添加。 '
- en: '`mern-skeleton/server/express.js`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/express.js`：'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These two highlighted lines are only meant for development mode and should be
    commented out when building the code for production. This code will import the
    middleware and the Webpack configuration before initiating Webpack to compile
    and bundle the client-side code when the Express app runs in development mode.
    The bundled code will be placed in the `dist` folder.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这两行突出显示的代码仅用于开发模式，在构建生产代码时应将其注释掉。此代码将在Express应用程序以开发模式运行时导入中间件和Webpack配置，然后启动Webpack编译和捆绑客户端代码。捆绑后的代码将放置在`dist`文件夹中。
- en: Serving static files with Express
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Express提供静态文件
- en: To ensure that the Express server properly handles the requests to static files
    such as CSS files, images, or the bundled client-side JS, we will configure it
    to serve static files from the `dist` folder by adding the following configuration
    in `express.js`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保Express服务器正确处理对静态文件（如CSS文件、图像或捆绑的客户端JS）的请求，我们将通过在`express.js`中添加以下配置来配置它从`dist`文件夹中提供静态文件。
- en: '`mern-skeleton/server/express.js`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/express.js`：'
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Updating the template to load a bundled script
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新模板以加载捆绑的脚本
- en: In order to add the bundled frontend code in the HTML view, we will update the
    `template.js` file to add the script file from the `dist` folder to the end of
    the `<body>` tag.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在HTML视图中添加捆绑的前端代码，我们将更新`template.js`文件，将脚本文件从`dist`文件夹添加到`<body>`标签的末尾。
- en: '`mern-skeleton/template.js`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/template.js`：'
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding React dependencies
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加React依赖项
- en: The frontend views will primarily be implemented using React. In addition, to
    enable client-side routing we will use React Router, and to enhance the user experience
    with a sleek look and feel we will use Material-UI.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 前端视图将主要使用React实现。此外，为了实现客户端路由，我们将使用React Router，并且为了增强用户体验，使其看起来更加流畅，我们将使用Material-UI。
- en: React
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React
- en: 'Throughout this book, we will use React 16 to code up the frontend. To start
    writing the `React` component code, we will need to install the following modules
    as regular dependencies:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用React 16来编写前端代码。要开始编写`React`组件代码，我们需要安装以下模块作为常规依赖项：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: React Router
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React Router
- en: 'React Router provides a collection of navigational components that enable routing
    on the frontend for React applications. To utilize declarative routing and have
    bookmarkable URL routes, we will add the following React Router modules:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: React Router提供了一组导航组件，可以在React应用程序的前端进行路由。为了利用声明式路由并拥有可书签的URL路由，我们将添加以下React
    Router模块：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Material-UI
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Material-UI
- en: 'In order to keep the UI in our MERN applications sleek without delving too
    much into UI design and implementation, we will utilize the `Material-UI` library.
    It provides ready-to-use and customizable `React` components that implement Google''s
    material design. To start using Material-UI components to make the frontend, we
    need to install the following modules:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持我们的MERN应用程序中的UI简洁，而不过多涉及UI设计和实现，我们将利用`Material-UI`库。它提供了可立即使用和可定制的`React`组件，实现了谷歌的材料设计。要开始使用Material-UI组件制作前端，我们需要安装以下模块：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: At the time of writing, the latest pre-release version of Material-UI is `1.0.0-beta.43` and
    it is recommended to install this exact version in order to ensure the code for
    the example projects do not break.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Material-UI的最新预发布版本是`1.0.0-beta.43`，建议安装此确切版本，以确保示例项目的代码不会中断。
- en: 'To add the `Roboto` fonts as recommended by Material-UI, and use the `Material-UI`
    icons, we will add the relevant style links into the `template.js` file, in the
    HTML document''s `<head>` section:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Roboto`字体按照Material-UI的建议添加，并使用`Material-UI`图标，我们将在`template.js`文件的HTML文档的`<head>`部分中添加相关的样式链接：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With development configuration all set up, and the necessary React modules added
    to the code base, we can now start implementing the custom React components.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 随着开发配置的全部设置和必要的React模块添加到代码库中，我们现在可以开始实现自定义的React组件。
- en: Implementing React views
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现React视图
- en: A functional frontend should integrate React components with the backend API
    and allow users to navigate seamlessly within the application based on authorization.
    To demonstrate how to implement a functional frontend view for this MERN skeleton,
    we will start by detailing how to render the home page component at the root route,
    then cover the backend API and user auth integration, before highlighting the
    unique aspects of implementing the remaining view components.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个功能齐全的前端应该将React组件与后端API集成，并允许用户根据授权在应用程序中无缝导航。为了演示如何为这个MERN骨架实现一个功能齐全的前端视图，我们将从详细说明如何在根路由处呈现主页组件开始，然后涵盖后端API和用户认证集成，然后突出实现剩余视图组件的独特方面。
- en: Rendering a home page
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 呈现主页
- en: The process of implementing and rendering a working `Home` component at the
    root route will also expose the basic structure of the frontend code in the skeleton.
    We will start with the top-level entry component that houses the whole React app
    and renders the main router component that links all the React components in the
    application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在根路由处实现和呈现一个工作的`Home`组件的过程也将暴露骨架中前端代码的基本结构。我们将从顶级入口组件开始，该组件包含整个React应用程序，并呈现链接应用程序中所有React组件的主路由器组件。
- en: Entry point at main.js
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在`main.js`的入口点
- en: The `client/main.js` file in the client folder will be the entry point to render
    the complete React app. In this code, we import the root or top-level React component
    that will contain the complete frontend and render it to the `div` element with
    the ID `'root'` specified in the HTML document in `template.js`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端文件夹中的`client/main.js`文件将是渲染完整React应用程序的入口点。在这段代码中，我们导入将包含完整前端并将其呈现到在`template.js`中指定的HTML文档中的`div`元素的根或顶级React组件。
- en: '`mern-skeleton/client/main.js`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/main.js`：'
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Root React component
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根React组件
- en: The top-level React component that will contain all the components for the application's
    frontend is defined in the `client/App.js` file. In this file, we configure the
    React app to render the view components with a customized Material-UI theme, enable
    frontend routing, and ensure that React Hot Loader can instantly load changes
    as we develop the components.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 定义应用程序前端所有组件的顶层React组件在`client/App.js`文件中。在这个文件中，我们配置React应用程序以使用定制的Material-UI主题渲染视图组件，启用前端路由，并确保React
    Hot Loader可以在我们开发组件时立即加载更改。
- en: Customizing the Material-UI theme
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制Material-UI主题
- en: The Material-UI theme can be easily customized using the `MuiThemeProvider`
    component, and by configuring custom values to theme variables in `createMuiTheme()`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`MuiThemeProvider`组件轻松定制Material-UI主题，并通过在`createMuiTheme()`中配置自定义值来设置主题变量。
- en: '`mern-skeleton/client/App.js`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/App.js`：'
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For the skeleton, we only apply minimal customization by setting some color
    values to be used in the UI. The theme variables generated here will be passed
    to, and available in, all the components we build.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于骨架，我们只需进行最少的定制，通过将一些颜色值设置为UI中使用的值。在这里生成的主题变量将传递给我们构建的所有组件，并在其中可用。
- en: Wrapping the root component with MUI theme and BrowserRouter
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用MUI主题和BrowserRouter包装根组件
- en: The custom React components that we create to make up the user interface will
    be accessed with frontend routes specified in the `MainRouter` component. Essentially,
    this component houses all the custom views developed for the application. When
    defining the root component in `App.js`, we wrap the `MainRouter` component with
    the `MuiThemeProvider` to give it access to the Material-UI theme, and `BrowserRouter`
    to enable frontend routing with React Router. The custom theme variables defined
    previously are passed as a prop to the `MuiThemeProvider`, making the theme available
    in all our custom React components.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的自定义React组件将通过`MainRouter`组件中指定的前端路由进行访问。基本上，这个组件包含了为应用程序开发的所有自定义视图。在`App.js`中定义根组件时，我们使用`MuiThemeProvider`将`MainRouter`组件包装起来，以便让它可以访问Material-UI主题，并使用`BrowserRouter`启用React
    Router的前端路由。之前定义的自定义主题变量作为prop传递给`MuiThemeProvider`，使主题在所有自定义React组件中可用。
- en: '`mern-skeleton/client/App.js`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/App.js`：'
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Marking the root component as hot-exported
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将根组件标记为热导出
- en: The last line of code in `App.js` to export the `App` component uses the `hot`
    module from `react-hot-loader` to mark the root component as `hot`. This will
    enable live reloading of the React components during development.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.js`中的最后一行代码导出`App`组件使用`react-hot-loader`中的`hot`模块将根组件标记为`hot`。这将在开发过程中启用React组件的实时重新加载。
- en: '`mern-skeleton/client/App.js`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/App.js`：'
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For our MERN applications, we won't have to change the `main.js` and `App.js`
    code all that much after this point, and we can continue building out the rest
    of the React app by injecting new components in the `MainRouter` component.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的MERN应用程序，在这一点之后，我们不需要太多更改`main.js`和`App.js`的代码，可以继续通过在`MainRouter`组件中注入新组件来构建React应用程序的其余部分。
- en: Adding a home route to MainRouter
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向MainRouter添加主页路由
- en: The `MainRouter.js` code will help render our custom React components with respect
    to routes or locations in the application. In this first version, we will only
    add the root route to render the `Home` component.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainRouter.js`代码将帮助根据应用程序中的路由或位置渲染我们的自定义React组件。在这个第一个版本中，我们只会添加根路由来渲染`Home`组件。'
- en: '`mern-skeleton/client/MainRouter.js`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/MainRouter.js`：'
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As we develop more view components, we will update the `MainRouter` to add routes
    for the new components inside the `Switch` component.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们开发更多的视图组件，我们将更新`MainRouter`以在`Switch`组件中为新组件添加路由。
- en: The `Switch` component in React Router renders a route exclusively. In other
    words, it only renders the first child that matches the requested route path.
    Whereas, without being nested in a `Switch`, every `Route` component renders inclusively
    when there is a path match. For example, a request at `'/'` also matches a route
    at `'/contact'`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: React Router中的`Switch`组件专门用于呈现路由。换句话说，它只呈现与请求的路由路径匹配的第一个子组件。而不在`Switch`中嵌套时，每个`Route`组件在路径匹配时都会进行包容性渲染。例如，对`'/'`的请求也会匹配`'/contact'`的路由。
- en: Home component
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Home组件
- en: 'The `Home` component will be rendered on the browser when the user visits the
    root route, and we will compose it with Material-UI components. The following
    screenshot shows the `Home` component and the `Menu` component, which will be
    implemented later in the chapter as an individual component to provide navigation
    across the application:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户访问根路由时，`Home`组件将在浏览器上呈现，并且我们将使用Material-UI组件来组合它。以下屏幕截图显示了`Home`组件和稍后在本章中作为独立组件实现的`Menu`组件，以提供应用程序中的导航：
- en: '![](assets/c3f41131-6f5c-4a1f-8de4-5451b50a243f.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3f41131-6f5c-4a1f-8de4-5451b50a243f.png)'
- en: The `Home` component and other view components that will be rendered in the
    browser for the user to interact with will follow a common code structure containing
    the following parts in the given order.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`Home`组件和其他视图组件将按照通用的代码结构在浏览器中呈现给用户进行交互，该结构包含以下部分，按照给定的顺序。'
- en: Imports
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入
- en: The component file will start with imports from React, Material-UI, React Router
    modules, images, CSS, API fetch, and auth helpers from our code as required by
    the specific component. For example, for the `Home` component code in `Home.js`,
    we use the following imports.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 组件文件将从React、Material-UI、React Router模块、图像、CSS、API fetch和我们代码中的auth helpers中导入所需的特定组件。例如，在`Home.js`中的`Home`组件代码中，我们使用以下导入。
- en: '`mern-skeleton/client/core/Home.js`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/core/Home.js`:'
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The image file is kept in the `client/assets/images/` folder and imported/added
    to the `Home` component.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图像文件保存在`client/assets/images/`文件夹中，并被导入/添加到`Home`组件中。
- en: Style declarations
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式声明
- en: After the imports, we will define CSS styles utilizing the `Material-UI` theme
    variables as required to style the elements in the component. For the `Home` component
    in `Home.js`, we have the following styles.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入之后，我们将根据需要使用`Material-UI`主题变量来定义CSS样式，以便对组件中的元素进行样式设置。对于`Home.js`中的`Home`组件，我们有以下样式。
- en: '`mern-skeleton/client/core/Home.js`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/core/Home.js`:'
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The JSS style objects defined here will be injected into the component and used
    to style the elements in the component, as shown in the following `Home` component
    definition.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里定义的JSS样式对象将被注入到组件中，并用于对组件中的元素进行样式设置，就像下面的`Home`组件定义中所示。
- en: Material-UI uses JSS, which is a CSS-in-JS styling solution to add styles to
    the components. JSS uses JavaScript as a language to describe styles. This book
    will not cover CSS and styling implementations in detail. It will most rely on
    the default look and feel of Material-UI components. To learn more about JSS,
    visit [http://cssinjs.org/?v=v9.8.1](http://cssinjs.org/?v=v9.8.1). For examples
    of how to customize the `Material-UI` component styles, check out the Material-UI
    documentation at [https://material-ui-next.com/](https://material-ui-next.com/).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'Material-UI使用JSS，这是一种CSS-in-JS的样式解决方案，用于向组件添加样式。JSS使用JavaScript作为描述样式的语言。本书不会详细介绍CSS和样式实现，而是更多地依赖于Material-UI组件的默认外观和感觉。要了解更多关于JSS的信息，请访问[http://cssinjs.org/?v=v9.8.1](http://cssinjs.org/?v=v9.8.1)。要了解如何自定义`Material-UI`组件样式的示例，请查看Material-UI文档[https://material-ui-next.com/](https://material-ui-next.com/)。 '
- en: Component definition
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件定义
- en: In the component definition, we will compose the content and behavior of the
    component. The `Home` component will contain a Material-UI `Card` with a headline,
    an image, and a caption, all styled with the classes defined earlier and passed
    in as props.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件定义中，我们将组合组件的内容和行为。`Home`组件将包含一个Material-UI的`Card`，其中包括一个标题、一个图像和一个标题，所有这些都使用之前定义的类进行样式设置，并作为props传递进来。
- en: '`mern-skeleton/client/core/Home.js`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/core/Home.js`：'
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: PropTypes validation
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PropTypes验证
- en: To validate the required injection of style declarations as props to the component,
    we add the `PropTypes` requirement validator to the defined component.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证将样式声明作为props注入到组件中的要求，我们向已定义的组件添加了`PropTypes`要求验证器。
- en: '`mern-skeleton/client/core/Home.js`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/core/Home.js`：'
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Export component
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出组件
- en: Finally, in the last line of code in the component file, we will export the
    component with the defined styles passed in using `withStyles` from `Material-UI`. Using
    `withStyles` like this creates a **Higher-order component** (**HOC**) that has
    access to the defined style objects as props.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在组件文件的最后一行代码中，我们将使用`Material-UI`中的`withStyles`导出组件并传递定义的样式。像这样使用`withStyles`创建了一个具有对定义样式对象的访问权限的**Higher-order
    component** (**HOC**)。
- en: '`mern-skeleton/client/core/Home.js`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/core/Home.js`：'
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The exported component can now be used for composition within other components,
    as we did with this `Home` component in a route in the `MainRouter` component
    discussed earlier.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 导出的组件现在可以在其他组件中进行组合使用，就像我们在之前讨论的`MainRouter`组件中的路由中使用`Home`组件一样。
- en: The other view components to be implemented in our MERN applications will adhere
    to the same structure. In the rest of the book, we will focus mainly on the component
    definition, highlighting the unique aspects of the implemented component.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的MERN应用程序中要实现的其他视图组件将遵循相同的结构。在本书的其余部分，我们将主要关注组件定义，突出已实现组件的独特方面。
- en: Bundling image assets
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捆绑图像资源
- en: The static image file that we imported into the `Home` component view must also
    be included in the bundle with the rest of the compiled JS code so that the code
    can access and load it. To enable this, we need to update the Webpack configuration
    files to add a module rule to load, bundle, and emit image files to the output
    directory, which contains the compiled frontend and backend code.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入到`Home`组件视图中的静态图像文件也必须与编译后的JS代码一起包含在捆绑包中，以便代码可以访问和加载它。为了实现这一点，我们需要更新Webpack配置文件，添加一个模块规则来加载、捆绑和发射图像文件到输出目录中，该目录包含编译后的前端和后端代码。
- en: 'Update the `webpack.config.client.js`, `webpack.config.server.js`, and `webpack.config.client.production.js` files
    to add the following module rule after the use of `babel-loader`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`webpack.config.client.js`，`webpack.config.server.js`和`webpack.config.client.production.js`文件，在使用`babel-loader`后添加以下模块规则：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This module rule uses the `file-loader` npm module for Webpack, which needs
    to be installed as a development dependency, as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块规则使用Webpack的`file-loader` npm模块，需要安装为开发依赖，如下所示：
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Running and opening in the browser
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行并在浏览器中打开
- en: 'The client code up to this point can be run to view the `Home` component in
    the browser at the root URL. To run the application, use the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，客户端代码可以运行，以在根URL的浏览器中查看`Home`组件。要运行应用程序，请使用以下命令：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Then, open the root URL (`http://localhost:3000`) in the browser to see the
    `Home` component.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在浏览器中打开根URL（`http://localhost:3000`）以查看`Home`组件。
- en: The `Home` component developed here is a basic view component without interactive
    features and does not require the use of the backend APIs for user CRUD or auth.
    However, the remaining view components for our skeleton frontend will need the
    backend APIs and auth.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这里开发的`Home`组件是一个基本的视图组件，没有交互功能，不需要使用后端API来进行用户CRUD或身份验证。然而，我们骨架前端的其余视图组件将需要后端API和身份验证。
- en: Backend API integration
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后端API集成
- en: Users should be able to use the frontend views to fetch and modify user data
    in the database based on authentication and authorization. To implement these
    functionalities, the React components will access the API endpoints exposed by
    the backend using the Fetch API.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 用户应该能够使用前端视图根据身份验证和授权从数据库中获取和修改用户数据。为了实现这些功能，React组件将使用Fetch API访问后端暴露的API端点。
- en: The Fetch API is a newer standard to make network requests similar to **XMLHttpRequest**
    (**XHR**) but using promises instead, enabling a simpler and cleaner API. To learn
    more about the Fetch API, visit [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Fetch API是一个较新的标准，用于发出类似于**XMLHttpRequest**（**XHR**）的网络请求，但使用promise，从而实现了更简单和更清晰的API。要了解有关Fetch
    API的更多信息，请访问[https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)。
- en: Fetch for User CRUD
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户CRUD的获取
- en: In the `client/user/api-user.js` file, we will add methods for accessing each
    of the user CRUD API endpoints, which the React components can use to exchange
    user data with the server and database as required.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在`client/user/api-user.js`文件中，我们将添加用于访问每个用户CRUD API端点的方法，React组件可以使用这些方法与服务器和数据库交换用户数据。
- en: Creating a user
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户
- en: The `create` method will take user data from the view component, use `fetch`
    to make a `POST` call to create a new user in the backend, and finally return
    the response from the server to the component as a promise.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`create`方法将从视图组件获取用户数据，使用`fetch`进行`POST`调用，在后端创建一个新用户，最后将来自服务器的响应作为一个promise返回给组件。'
- en: '`mern-skeleton/client/user/api-user.js`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/api-user.js`：'
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Listing users
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出用户
- en: The `list` method will use fetch to make a `GET` call to retrieve all the users
    in the database, and then return the response from the server as a promise to
    the component.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`方法将使用fetch进行`GET`调用，以检索数据库中的所有用户，然后将来自服务器的响应作为promise返回给组件。'
- en: '`mern-skeleton/client/user/api-user.js`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/api-user.js`：'
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Reading a user profile
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取用户配置文件
- en: The `read` method will use fetch to make a `GET` call to retrieve a specific
    user by ID. Since this is a protected route, besides passing the user ID as a
    parameter, the requesting component must also provide valid credentials, which
    in this case will be a valid JWT received after successful sign-in.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`read`方法将使用fetch进行`GET`调用，按ID检索特定用户。由于这是一个受保护的路由，除了将用户ID作为参数传递之外，请求组件还必须提供有效的凭据，这种情况下将是成功登录后收到的有效JWT。'
- en: '`mern-skeleton/client/user/api-user.js`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/api-user.js`：'
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The JWT is attached to the `GET` fetch call in the `Authorization` header using
    the `Bearer` scheme, and then the response from the server is returned to the
    component in a promise.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: JWT附加到`GET` fetch调用中的`Authorization`标头，使用`Bearer`方案，然后将来自服务器的响应作为promise返回给组件。
- en: Updating a user's data
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户数据
- en: The `update` method will take changed user data from the view component for
    a specific user, then use `fetch` to make a `PUT` call to update the existing
    user in the backend. This is also a protected route that will require a valid
    JWT as credential.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`update`方法将从视图组件获取特定用户的更改用户数据，然后使用`fetch`进行`PUT`调用，更新后端现有用户。这也是一个受保护的路由，需要有效的JWT作为凭据。'
- en: '`mern-skeleton/client/user/api-user.js`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/api-user.js`：'
- en: '[PRE28]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Deleting a user
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除用户
- en: The `remove` method will allow the view component to delete a specific user
    from the database, using fetch to make a `DELETE` call. This, again, is a protected
    route that will require a valid JWT as a credential, similar to the `read` and
    `update` methods. The response from the server to the delete request will be returned
    to the component as a promise.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`remove`方法将允许视图组件使用fetch来删除数据库中的特定用户，发出`DELETE`调用。同样，这是一个受保护的路由，将需要有效的JWT作为凭据，类似于`read`和`update`方法。服务器对删除请求的响应将以promise的形式返回给组件。'
- en: '`mern-skeleton/client/user/api-user.js`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/api-user.js`：'
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Finally, export the user API helper methods to be imported and used by the React
    components as required.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将用户API辅助方法导出，以便根据需要被导入和使用React组件。
- en: '`mern-skeleton/client/user/api-user.js`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/api-user.js`：'
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Fetch for auth API
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于认证API的fetch
- en: In order to integrate the auth API endpoints from the server with the frontend
    React components, we will add methods for fetching sign-in and sign-out API endpoints
    in the `client/auth/api-auth.js` file.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将服务器的认证API端点与前端React组件集成，我们将在`client/auth/api-auth.js`文件中添加用于获取登录和登出API端点的方法。
- en: Sign-in
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录
- en: The `signin` method will take user sign-in data from the view component, then
    use `fetch` to make a `POST` call to verify the user with the backend. The response
    from the server will be returned to the component in a promise, which may contain
    the JWT if sign-in was successful.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`signin`方法将从视图组件获取用户登录数据，然后使用`fetch`发出`POST`调用来验证后端的用户。服务器的响应将以promise的形式返回给组件，其中可能包含JWT如果登录成功的话。'
- en: '`mern-skeleton/client/user/api-auth.js`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/api-auth.js`：'
- en: '[PRE31]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Sign-out
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登出
- en: The `signout` method will use fetch to make a GET call to the signout API endpoint
    on the server.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`signout`方法将使用fetch来向服务器的signout API端点发出GET调用。'
- en: '`mern-skeleton/client/user/api-auth.js`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/api-auth.js`：'
- en: '[PRE32]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: At the end of the `api-auth.js` file, export the `signin` and `signout` methods.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在`api-auth.js`文件的末尾，导出`signin`和`signout`方法。
- en: '`mern-skeleton/client/user/api-auth.js`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/api-auth.js`：'
- en: '[PRE33]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: With these API fetch methods, the React frontend has complete access to the
    endpoints available in the backend.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些API fetch方法，React前端可以完全访问后端可用的端点。
- en: Auth in the frontend
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前端的认证
- en: As discussed in the previous chapter, implementing authentication with JWT relinquishes
    responsibility to the client side to manage and store user auth state. To this
    end, we need to write code that will allow the client-side to store the JWT received
    from the server on successful sign-in, make it available when accessing protected
    routes, delete or invalidate the token when the user signs out, and also restrict
    access to views and components on the frontend based on the user auth state.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所讨论的，使用JWT实现认证将责任转移到客户端来管理和存储用户认证状态。为此，我们需要编写代码，允许客户端存储从服务器成功登录时收到的JWT，在访问受保护的路由时使其可用，当用户退出时删除或使令牌无效，并且还根据用户认证状态限制前端的视图和组件访问。
- en: Using examples of auth workflow from the React Router documentation, we will
    write helper methods to manage auth state across the components, and also use
    a custom `PrivateRoute` component to add protected routes to the frontend.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React Router文档中的认证工作流示例，我们将编写辅助方法来管理组件之间的认证状态，并且还将使用自定义的`PrivateRoute`组件来向前端添加受保护的路由。
- en: Managing auth state
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理认证状态
- en: 'In `client/auth/auth-helper.js`, we will define the following helper methods
    to store and retrieve JWT credentials from client-side `sessionStorage`, and also
    clear out the `sessionStorage` on user sign-out:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在`client/auth/auth-helper.js`中，我们将定义以下辅助方法来从客户端`sessionStorage`中存储和检索JWT凭据，并在用户退出时清除`sessionStorage`：
- en: '`authenticate(jwt, cb)`: Save credentials on successful sign-in:'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`authenticate(jwt, cb)`: 在成功登录时保存凭据：'
- en: '[PRE34]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`isAuthenticated()`: Retrieve credentials if signed-in:'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isAuthenticated()`: 如果已登录，则检索凭据：'
- en: '[PRE35]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`signout(cb)`: Delete credentials and sign out:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`signout(cb)`: 删除凭据并退出登录：'
- en: '[PRE36]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Using the methods defined here, the React components we build will be able to
    check and manage user auth state to restrict access in the frontend, as demonstrated
    in the following with the custom `PrivateRoute`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这里定义的方法，我们构建的React组件将能够检查和管理用户认证状态，以限制前端的访问，就像在自定义的`PrivateRoute`中所示的那样。
- en: PrivateRoute component
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PrivateRoute组件
- en: The `client/auth/PrivateRoute.js` defines the `PrivateRoute` component as shown
    in an auth flow example from [https://reacttraining.com/react-router/web/example/auth-workflow](https://reacttraining.com/react-router/web/example/auth-workflow)
    in the React Router documentation. It will allow us to declare protected routes
    for the frontend to restrict view access based on user auth.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/auth/PrivateRoute.js`中定义了`PrivateRoute`组件，如React Router文档中的认证流程示例所示。它将允许我们声明受保护的路由，以便前端根据用户认证限制视图访问。'
- en: '`mern-skeleton/client/auth/PrivateRoute.js`:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/auth/PrivateRoute.js`:'
- en: '[PRE37]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Components to be rendered in this `PrivateRoute` will only load when the user
    is authenticated, otherwise the user will be redirected to the `Signin` component.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PrivateRoute`中呈现的组件只有在用户经过认证时才会加载，否则用户将被重定向到`Signin`组件。
- en: With the backend APIs integrated, and auth management helper methods ready for
    use in the components, we can start building the remaining view components.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 随着后端API的集成，和认证管理辅助方法在组件中准备就绪，我们可以开始构建剩余的视图组件。
- en: User and auth components
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户和认证组件
- en: The React components described in this section complete the interactive features
    defined for the skeleton by allowing users to view, create, and modify user data
    stored in the database with respect to auth restrictions. For each of the following
    components, we will go over the unique aspects of each component, and how to add
    the component to the application in the `MainRouter`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中描述的React组件完成了骨架定义的交互功能，允许用户查看、创建和修改存储在数据库中的用户数据，同时考虑认证限制。对于以下每个组件，我们将介绍每个组件的独特方面，以及如何将组件添加到应用程序中的`MainRouter`中。
- en: Users component
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Users组件
- en: 'The `Users` component in `client/user/Users.js`, shows the names of all the
    users fetched from the database, and links each name to the user profile. This
    component can be viewed by any visitor to the application and will render at the
    path `''/users''`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/user/Users.js`中的`Users`组件显示了从数据库中获取的所有用户的名称，并将每个名称链接到用户配置文件。任何访问应用程序的访问者都可以查看此组件，并且将在路径`''/users''`上呈现：'
- en: '![](assets/896050db-1fcc-47db-b597-a90f8af964a1.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/896050db-1fcc-47db-b597-a90f8af964a1.png)'
- en: In the component definition, we first initialize the state with an empty array
    of users.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件定义中，我们首先使用空数组初始化状态。
- en: '`mern-skeleton/client/user/Users.js`:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Users.js`:'
- en: '[PRE38]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Next, in `componentDidMount`, we use the `list` method from the `api-user.js`
    helper methods, to fetch the user list from the backend, and load the user data
    into the component by updating the state.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`componentDidMount`中，我们使用`api-user.js`中的`list`方法，从后端获取用户列表，并通过更新状态将用户数据加载到组件中。
- en: '`mern-skeleton/client/user/Users.js`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Users.js`:'
- en: '[PRE39]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `render` function contains the actual view content of the `Users` component,
    and is composed with Material-UI components such as `Paper`, `List`, and `ListItems`.
    The elements are styled with the CSS defined and passed in as props.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`render`函数包含`Users`组件的实际视图内容，并与Material-UI组件（如`Paper`、`List`和`ListItems`）组合在一起。这些元素使用定义的CSS进行样式化，并作为props传递。'
- en: '`mern-skeleton/client/user/Users.js`:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Users.js`：'
- en: '[PRE40]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: To generate each list item, we iterate through the array of users in the state
    using the map function.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成每个列表项，我们使用map函数遍历状态中的用户数组。
- en: To add this `Users` component to the React application, we need to update the
    `MainRouter` component with a `Route` that renders this component at the `'/users'` path.
    Add the `Route` inside the `Switch` component after the `Home` route.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此`Users`组件添加到React应用程序中，我们需要使用`Route`更新`MainRouter`组件，在`'/users'`路径处呈现此组件。在`Home`路由之后，在`Switch`组件内添加`Route`。
- en: '`mern-skeleton/client/MainRouter.js`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/MainRouter.js`：'
- en: '[PRE41]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To see this view rendered in the browser, you can temporarily add a `Link`
    component in the `Home` component to route to the `Users` component:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要在浏览器中看到此视图呈现，可以暂时在`Home`组件中添加一个`Link`组件，以路由到`Users`组件：
- en: '[PRE42]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Signup component
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册组件
- en: 'The `Signup` component in `client/user/Signup.js`, presents a form with name,
    email, and password fields to the user for sign-up at the `''/signup''` path:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/user/Signup.js`中的`Signup`组件向用户呈现一个带有名称、电子邮件和密码字段的表单，用于在`''/signup''`路径上注册。'
- en: '![](assets/b478e453-909d-4348-af22-0a44ac3ff566.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b478e453-909d-4348-af22-0a44ac3ff566.png)'
- en: In the component definition, we first initialize the state with empty input
    field values, empty error message, and set the dialog open variable to false.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件定义中，我们首先使用空输入字段值，空错误消息和将对话框打开变量设置为false来初始化状态。
- en: '`mern-skeleton/client/user/Signup.js`:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Signup.js`：'
- en: '[PRE43]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We also define two handler functions to be called when the input value changes
    or the submit button is clicked. The `handleChange` function takes the new value
    entered in the input field and sets it to `state`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了两个处理函数，当输入值更改或单击提交按钮时将被调用。`handleChange`函数获取输入字段中输入的新值，并将其设置为`state`。
- en: '`mern-skeleton/client/user/Signup.js`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Signup.js`：'
- en: '[PRE44]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The `clickSubmit` function is called when the form is submitted. It takes the
    input values from state and calls the `create` fetch method to sign up the user
    with the backend. Then, depending on the response from the server, either an error
    message is shown or a success dialog is shown.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交时，将调用`clickSubmit`函数。它从状态中获取输入值，并调用`create`获取方法来注册用户。然后，根据服务器的响应，要么显示错误消息，要么显示成功对话框。
- en: '`mern-skeleton/client/user/Signup.js`:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Signup.js`：'
- en: '[PRE45]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In the `render` function we compose and style the form components in the Sign-up
    view using components such as `TextField` from Material-UI.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在`render`函数中，我们使用诸如来自Material-UI的`TextField`等组件来组成和样式化注册视图中的表单组件。
- en: '`mern-skeleton/client/user/Signup.js`:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Signup.js`：'
- en: '[PRE46]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The render also contains an error message block along with a `Dialog` component
    that is conditionally rendered depending on the sign up response from the server. The
    `Dialog` component in `Signup.js` is composed as follows.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染还包含一个错误消息块，以及一个`Dialog`组件，根据服务器的注册响应条件渲染。`Signup.js`中的`Dialog`组件组成如下。
- en: '`mern-skeleton/client/user/Signup.js`:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Signup.js`：'
- en: '[PRE47]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'On successful account creation, the user is given confirmation, and asked to
    sign in using this `Dialog` component, which links to the `Signin` component:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 成功创建帐户后，用户将收到确认，并被要求使用此`Dialog`组件登录，该组件链接到`Signin`组件：
- en: '![](assets/fc581278-d930-463d-af2b-d9fad6cc69a0.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fc581278-d930-463d-af2b-d9fad6cc69a0.png)'
- en: To add the `Signup` component to the app, add the following `Route` to the `MainRouter`
    in the `Switch` component.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`Signup`组件添加到应用程序中，在`Switch`组件中添加以下`Route`到`MainRouter`中。
- en: '`mern-skeleton/client/MainRouter.js`:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/MainRouter.js`：'
- en: '[PRE49]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This will render the `Signup` view at `'/signup'`.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`'/signup'`处呈现`Signup`视图。
- en: Signin component
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录组件
- en: 'The `Signin` component in `client/auth/Signin.js` is also a form with only
    email and password fields for signing in. This component is quite similar to the
    `Signup` component and will render at the `''/signin''` path. The key difference
    is in the implementation of redirection after successful sign-in and storing of
    the received JWT:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/auth/Signin.js`中的`Signin`组件也是一个只有电子邮件和密码字段的登录表单。该组件与`Signup`组件非常相似，并将在`''/signin''`路径下呈现。主要区别在于成功登录后重定向和接收JWT的存储实现：'
- en: '![](assets/590ab772-2a8f-431e-94ab-7c4fe4a57620.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/590ab772-2a8f-431e-94ab-7c4fe4a57620.png)'
- en: 'For redirection, we will use the `Redirect` component from React Router. First,
    initialize a `redirectToReferrer` value to `false` in the state with the other
    fields:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 对于重定向，我们将使用React Router中的`Redirect`组件。首先，在状态中将`redirectToReferrer`值初始化为`false`，并与其他字段一起使用：
- en: '`mern-skeleton/client/auth/Signin.js`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/auth/Signin.js`：'
- en: '[PRE50]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The `redirectToReferrer` should be set to `true` when the user successfully
    signs in after submitting the form and the received JWT is stored in the `sessionStorage`.
    To store the JWT and redirect afterwords, we will call the `authenticate()` method
    defined in `auth-helper.js`. This code will go in the `clickSubmit()` function
    to be called on form submit.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户成功提交表单并且接收到JWT存储在`sessionStorage`中时，`redirectToReferrer`应设置为`true`。为了存储JWT并在之后重定向，我们将调用`auth-helper.js`中定义的`authenticate()`方法。这段代码将放在`clickSubmit()`函数中，在表单提交时调用。
- en: '`mern-skeleton/client/auth/Signin.js`:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/auth/Signin.js`：'
- en: '[PRE51]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The redirection will happen conditionally based on the `redirectToReferrer`
    value with the `Redirect` component in the `render` function. Add the redirect
    code in the render function before the return as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 基于`redirectToReferrer`值的条件，重定向将在`render`函数中的`Redirect`组件中发生。在返回之前，在render函数中添加重定向代码如下：
- en: '`mern-skeleton/client/auth/Signin.js`:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/auth/Signin.js`：'
- en: '[PRE52]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The `Redirect` component, if rendered, will take the app to the last location
    or to the `Home` component at the root.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果渲染`Redirect`组件，将会将应用程序带到上次的位置或根目录下的`Home`组件。
- en: The return will contain the form elements similar to that of `Signup`, with
    just `email` and `password` fields, a conditional error message, and the `submit`
    button.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 返回将包含类似于`Signup`的表单元素，只有`email`和`password`字段，条件错误消息和`submit`按钮。
- en: To add the `Signin` component to the app, add the following Route to the `MainRouter`
    in the `Switch` component.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`Signin`组件添加到应用程序中，在`Switch`组件的`MainRouter`中添加以下路由。
- en: '`mern-skeleton/client/MainRouter.js`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/MainRouter.js`：'
- en: '[PRE53]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This will render the `Signin` component at `"/signin"`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`"/signin"`处呈现`Signin`组件。
- en: Profile component
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Profile组件
- en: 'The `Profile` component in `client/user/Profile.js` shows a single user''s
    information in the view at the `''/user/:userId''` path, where the `userId` parameter
    represents the ID of the specific user:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/user/Profile.js`中的`Profile`组件在`''/user/:userId''`路径中显示单个用户的信息，其中`userId`参数表示特定用户的ID：'
- en: '![](assets/cb24bc18-4a74-4041-b29f-ab6635c68723.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cb24bc18-4a74-4041-b29f-ab6635c68723.png)'
- en: This profile information can be fetched from the server only if the user is
    signed in, and to verify this, the component has to provide the JWT to the `read`
    fetch call, otherwise, the user should be redirected to the Sign In view.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在用户登录后，才能从服务器获取此配置文件信息，并且为了验证这一点，组件必须向`read`获取调用提供JWT，否则用户应该被重定向到登录视图。
- en: In the `Profile` component definition, we first need to initialize the state
    with an empty user and set `redirectToSignin` to `false`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Profile`组件定义中，我们首先需要用空用户初始化状态，并将`redirectToSignin`设置为`false`。
- en: '`mern-skeleton/client/user/Profile.js`:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Profile.js`：'
- en: '[PRE54]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: We also need to get access to the match props passed by the `Route` component,
    which will contain `:userId` param value and can be accessed as `this.match.params.userId`
    when the component mounts.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要访问由`Route`组件传递的匹配props，其中将包含`:userId`参数值，并且在组件挂载时可以作为`this.match.params.userId`进行访问。
- en: The `Profile` component should fetch user information and render it when the
    `userId` parameter changes in the route. However, when the app goes from one profile
    view to the other, and it is just a param change in the route path, the React
    component does not re-mount. Rather, it passes the new props in `componentWillReceiveProps`.
    In order to make sure the component loads the relevant user's information when
    the route param updates, we will place the `read` fetch call in the `init()` function,
    which can then be called in both `componentDidMount` and `componentWillReceiveProps`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`Profile`组件应在路由中的`userId`参数更改时获取用户信息并呈现它。然而，当应用程序从一个配置文件视图切换到另一个配置文件视图时，只是路由路径中的参数更改，React组件不会重新挂载。相反，它会在`componentWillReceiveProps`中传递新的props。为了确保组件在路由参数更新时加载相关用户信息，我们将在`init()`函数中放置`read`获取调用，然后可以在`componentDidMount`和`componentWillReceiveProps`中调用它。'
- en: '`mern-skeleton/client/user/Profile.js`:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Profile.js`：'
- en: '[PRE55]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The `init(userId)` function takes the `userId` value, and calls the read user
    fetch method. Since this method also requires credentials to authorize the signed-in
    user, the JWT is retrieved from `sessionStorage` using the `isAuthenticated` method
    from `auth-helper.js`. Once the server responds, either the state is updated with
    the user information or the view is redirected to the Sign-in view.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`init(userId)`函数接受`userId`值，并调用读取用户获取方法。由于此方法还需要凭据来授权登录用户，因此JWT是使用`auth-helper.js`中的`isAuthenticated`方法从`sessionStorage`中检索的。一旦服务器响应，要么更新状态与用户信息，要么将视图重定向到登录视图。'
- en: This `init` function is called in `componentDidMount` and `componentWillReceiveProps`
    with the relevant `userId` value passed in as a parameter so that the correct
    user information is fetched and loaded in the component.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`init`函数在`componentDidMount`和`componentWillReceiveProps`中被调用，并传入相关的`userId`值作为参数，以便在组件中获取和加载正确的用户信息。'
- en: '`mern-skeleton/client/user/Profile.js`:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Profile.js`：'
- en: '[PRE56]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In the `render` function, we set up the conditional redirect to Signin view,
    and return the content of the `Profile` view:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在`render`函数中，我们设置了条件重定向到登录视图，并返回`Profile`视图的内容：
- en: '`mern-skeleton/client/user/Profile.js`'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Profile.js`：'
- en: '[PRE57]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The `render` function will return the `Profile` view with the following elements
    if the user currently signed-in is viewing another user's profile.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前登录的用户正在查看另一个用户的配置文件，则`render`函数将返回`Profile`视图，并包含以下元素。
- en: '`mern-skeleton/client/user/Profile.js`:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Profile.js`：'
- en: '[PRE58]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'However, if the user currently signed-in is viewing their own profile, they
    will be able to see an edit and delete option in the `Profile` component, as shown
    in the following screenshot:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果当前登录的用户正在查看自己的配置文件，则可以在`Profile`组件中看到编辑和删除选项，如下截图所示：
- en: '![](assets/a262128f-e3dd-41d9-b1ea-584aa9ffa927.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a262128f-e3dd-41d9-b1ea-584aa9ffa927.png)'
- en: To implement this feature, in the first `ListItem` component in the `Profile`,
    add a `ListItemSecondaryAction` component containing the `Edit` button and a `DeleteUser`
    component, which will render conditionally based on whether the current user is
    viewing their own profile.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现此功能，在`Profile`中的第一个`ListItem`组件中添加一个包含`Edit`按钮和`DeleteUser`组件的`ListItemSecondaryAction`组件，根据当前用户是否查看自己的配置文件来有条件地呈现。
- en: '`mern-skeleton/client/user/Profile.js`:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/Profile.js`：'
- en: '[PRE59]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `Edit` button will route to the `EditProfile` component, and the custom
    `DeleteUser` component used here will handle the delete operation with the `userId`
    passed to it as a prop.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`Edit`按钮将路由到`EditProfile`组件，此处使用的自定义`DeleteUser`组件将处理传递给它的`userId`的删除操作。'
- en: To add the `Profile` component to the app, add the `Route` to the `MainRouter`
    in the `Switch` component.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`Profile`组件添加到应用程序中，请将`Route`添加到`Switch`组件中的`MainRouter`中。
- en: '`mern-skeleton/client/MainRouter.js`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/MainRouter.js`：'
- en: '[PRE60]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: EditProfile component
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EditProfile组件
- en: 'The `EditProfile` component in `client/user/EditProfile.js` has similarities
    in implementation with both the `Signup` and `Profile` components. It will allow
    the authorized user to edit their own profile information in a form similar to
    the sign up form:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/user/EditProfile.js`中的`EditProfile`组件在实现上与`Signup`和`Profile`组件都有相似之处。它将允许授权用户在类似注册表单的表单中编辑自己的个人资料信息：'
- en: '![](assets/0927ca58-eb21-4f74-97e9-fcc0d81d0943.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0927ca58-eb21-4f74-97e9-fcc0d81d0943.png)'
- en: Upon load at `'/user/edit/:userId'`, the component will fetch the user's information
    with ID after verifying JWT for auth, then load the form with the received user
    information. The form will allow the user to edit and submit only the changed
    information to the `update` fetch call, and on successful update, redirect the
    user to the `Profile` view with updated information.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在`'/user/edit/:userId'`加载时，组件将通过验证JWT以获取ID的用户信息，然后使用接收到的用户信息加载表单。表单将允许用户仅编辑和提交更改的信息到`update`
    fetch调用，并在成功更新后将用户重定向到具有更新信息的`Profile`视图。
- en: '`EditProfile` will load the user information the same way as in the `Profile`
    component, by fetching with `read` in `componentDidMount` using the `userId` param
    from `this.match.params`, and credentials from `auth.isAuthenticated`. The form
    view will have the same elements as the `Signup` component with input values updated
    in the state on change.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditProfile`将以与`Profile`组件相同的方式加载用户信息，通过在`componentDidMount`中使用`read`从`this.match.params`获取`userId`参数，并使用`auth.isAuthenticated`的凭据。表单视图将具有与`Signup`组件相同的元素，输入值在更改时更新状态。'
- en: On form submit, the component will call the `update` fetch method with the `userId`,
    JWT, and updated user data.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单提交时，组件将使用`userId`、JWT和更新后的用户数据调用`update` fetch方法。
- en: '`mern-skeleton/client/user/EditProfile.js`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/EditProfile.js`：'
- en: '[PRE61]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Depending on the response from the server, the user will either see an error
    message or be redirected to the updated Profile page with the following `Redirect`
    component in the render function.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 根据服务器的响应，用户将要么看到错误消息，要么在渲染函数中使用以下`Redirect`组件重定向到更新后的Profile页面。
- en: '`mern-skeleton/client/user/EditProfile.js`:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/EditProfile.js`：'
- en: '[PRE62]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: To add the `EditProfile` component to the app, we will use a `PrivateRoute`
    this time, to restrict the component from loading at all if the user is not signed
    in. The order of placement in `MainRouter` will also be important.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`EditProfile`组件添加到应用程序中，这次我们将使用`PrivateRoute`，以限制用户未登录时根本不加载组件。在`MainRouter`中的放置顺序也很重要。
- en: '`mern-skeleton/client/MainRouter.js`:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/MainRouter.js`：'
- en: '[PRE63]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The route with path `'/user/edit/:userId'` needs to be placed before the route
    with path `'/user/:userId'`, so that the edit path is matched first exclusively
    in the Switch component when this route is requested, and not confused with the
    `Profile` route.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 具有路径`'/user/edit/:userId'`的路由需要放置在具有路径`'/user/:userId'`的路由之前，以便在请求此路由时，编辑路径首先在Switch组件中独占匹配，不会与`Profile`路由混淆。
- en: DeleteUser component
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DeleteUser组件
- en: 'The `DeleteUser` component in `client/user/DeleteUser.js` is basically a button
    that we will add to the Profile view, which when clicked opens a `Dialog` component
    asking the user to confirm the `delete` action:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/user/DeleteUser.js`中的`DeleteUser`组件基本上是一个按钮，我们将其添加到Profile视图中，当点击时会打开一个要求用户确认`delete`操作的`Dialog`组件：'
- en: '![](assets/9107c796-0e36-4350-9124-4bcb51662b99.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9107c796-0e36-4350-9124-4bcb51662b99.png)'
- en: The component first initializes the state with `open` set to `false` for the
    `Dialog` component, and `redirect` also set to `false` so it isn't rendered first.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件首先使用`open`设置为`false`来初始化`Dialog`组件的状态，并且还将`redirect`设置为`false`，因此首先不会被渲染。
- en: '`mern-skeleton/client/user/DeleteUser.js`:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/DeleteUser.js`：'
- en: '[PRE64]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Next, we need handler methods to open and close the `dialog` button. The dialog
    is opened when the user clicks the `delete` button.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要处理打开和关闭`dialog`按钮的方法。当用户点击`delete`按钮时，对话框将被打开。
- en: '`mern-skeleton/client/user/DeleteUser.js`:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/DeleteUser.js`：'
- en: '[PRE65]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The dialog is closed when the user clicks `cancel` on the dialog.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在对话框上点击`cancel`时，对话框将被关闭。
- en: '`mern-skeleton/client/user/DeleteUser.js`:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/DeleteUser.js`：'
- en: '[PRE66]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The component will have access to the `userId` passed in as a prop from the
    `Profile` component, which is needed to call the `remove` fetch method along with
    the JWT, after the user confirms the `delete` action in the dialog.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件将从`Profile`组件中作为属性传递的`userId`，这是调用`remove` fetch方法所需的，同时还需要JWT，用户在对话框中确认`delete`操作后。
- en: '`mern-skeleton/client/user/DeleteUser.js`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/DeleteUser.js`：'
- en: '[PRE67]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: On confirmation, the `deleteAccount` function calls the `remove` fetch method
    with the `userId` from props and JWT from `isAuthenticated`. On successful deletion
    in the server, the user will be signed out and redirected to the Home view.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 确认后，`deleteAccount`函数使用来自属性的`userId`和来自`isAuthenticated`的JWT调用`remove` fetch方法。在服务器成功删除后，用户将被注销并重定向到主页视图。
- en: 'The render function contains the conditional `Redirect` to Home view and returns
    the `DeleteUser` component elements, a `DeleteIcon` button and the confirmation
    `Dialog`:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染函数包含对主页视图的条件性`Redirect`，并返回`DeleteUser`组件元素、`DeleteIcon`按钮和确认`Dialog`：
- en: '`mern-skeleton/client/user/DeleteUser.js`:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/DeleteUser.js`：'
- en: '[PRE68]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '`DeleteUser` takes the `userId` as a prop to be used in the `delete` fetch
    call, so we add a `propType` check for the required prop `userId`.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeleteUser`将`userId`作为属性传递，用于`delete` fetch调用，因此我们为所需的属性`userId`添加了`propType`检查。'
- en: '`mern-skeleton/client/user/DeleteUser.js`:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/user/DeleteUser.js`：'
- en: '[PRE69]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: As we are using the `DeleteUser` component in the `Profile` component, it gets
    added to the application view when `Profile` is added in `MainRouter`.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在`Profile`组件中使用`DeleteUser`组件，所以当`Profile`添加到`MainRouter`中时，它将被添加到应用视图中。
- en: Menu component
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 菜单组件
- en: The `Menu` component will function as a navigation bar across the frontend application
    by providing links to all the available views, and also be indicating the current
    location in the application.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`Menu`组件将作为整个前端应用程序的导航栏，提供到所有可用视图的链接，并指示应用程序中的当前位置。'
- en: To implement these navigation bar functionalities, we will use the HOC `withRouter` from
    React Router to get access to the history object's properties. The following code
    in the `Menu` component adds just the title, the `Home` icon linked to the root
    Route, and `Users` button linked to the `'/users'` route.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这些导航栏功能，我们将使用React Router中的HOC `withRouter`来访问历史对象的属性。`Menu`组件中的以下代码仅添加了标题、与根路由相关联的`Home`图标以及与`'/users'`路由相关联的`Users`按钮。
- en: '`mern-skeleton/client/core/Menu.js`:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/core/Menu.js`：'
- en: '[PRE70]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: To indicate the current location of the application on the `Menu`, we will highlight
    the link that matches with the current location path by changing the color conditionally.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 为了指示应用程序的当前位置在`Menu`上，我们将通过条件性地改变颜色来突出显示与当前位置路径匹配的链接。
- en: '`mern-skeleton/client/core/Menu.js`:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/core/Menu.js`：'
- en: '[PRE71]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The `isActive` function is used to apply color to the buttons in the `Menu`
    as follows:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`isActive`函数用于在`Menu`中为按钮应用颜色，如下所示：'
- en: '[PRE72]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The remaining links such as SIGN IN, SIGN UP, MY PROFILE, and SIGN OUT will
    show up on the `Menu` based on whether the user is signed in or not:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的链接，如SIGN IN、SIGN UP、MY PROFILE和SIGN OUT，将根据用户是否已登录显示在`Menu`上：
- en: '![](assets/0771a0a9-9fbc-4b22-b1d7-4b195a068d13.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0771a0a9-9fbc-4b22-b1d7-4b195a068d13.png)'
- en: For example, the links to SIGN UP and SIGN IN should only show on the menu when
    the user is not signed in. So we need to add it to the `Menu` component after
    the `Users` button with a condition.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当用户未登录时，注册和登录的链接应该只显示在菜单上。因此，我们需要在`Menu`组件中添加它，并在`Users`按钮之后加上条件。
- en: '`mern-skeleton/client/core/Menu.js`:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/core/Menu.js`：'
- en: '[PRE73]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Similarly, the link to `MY PROFILE` and the `SIGN OUT` button should only show
    on the menu when the user is signed in, and should be added to the `Menu` component
    with this condition check.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，只有当用户已登录时，`MY PROFILE`链接和`SIGN OUT`按钮才应该显示在菜单上，并且应该根据这个条件检查添加到`Menu`组件中。
- en: '`mern-skeleton/client/core/Menu.js`:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/core/Menu.js`：'
- en: '[PRE74]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The `MY PROFILE` button uses the signed-in user''s information to link to the
    user''s own profile, and the `SIGN OUT` button calls the `auth.signout()` method
    when clicked. When the user is signed in, the Menu will look as follows:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`MY PROFILE`按钮使用已登录用户的信息链接到用户自己的个人资料，并且`SIGN OUT`按钮在点击时调用`auth.signout()`方法。当用户已登录时，菜单将如下所示：'
- en: '![](assets/0cab70a8-b7d1-461c-93f7-6ba69b4281af.png)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0cab70a8-b7d1-461c-93f7-6ba69b4281af.png)'
- en: To have the `Menu` navigation bar present in all the views, we need to add it
    to the `MainRouter` before all the other routes, and outside the `Switch` component.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在所有视图中显示`Menu`导航栏，我们需要在`MainRouter`中添加它，放在所有其他路由之前，并且在`Switch`组件之外。
- en: '`mern-skeleton/client/MainRouter.js`:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/MainRouter.js`：'
- en: '[PRE75]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: This will make the `Menu` component render on top of all the other components
    when the component is accessed at a route.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 当在路由上访问组件时，这将使`Menu`组件呈现在所有其他组件的顶部。
- en: The skeleton frontend is complete with all components necessary to enable a
    user to sign up, view, and modify user data on the backend with consideration
    to authentication and authorization restrictions. However, it is still not possible
    to visit the frontend routes directly in the browser address bar, and can only
    be accessed when linked from within the frontend view. To enable this functionality
    in the skeleton application, we need to implement basic server-side rendering.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 骨架前端已经完整，包括所有必要的组件，以便用户可以在后端注册、查看和修改用户数据，并考虑到认证和授权限制。然而，目前还不能直接在浏览器地址栏中访问前端路由，只能在前端视图内部链接时访问。为了在骨架应用程序中实现此功能，我们需要实现基本的服务器端渲染。
- en: Basic server-side rendering
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的服务器端渲染
- en: Currently, when the React Router routes or pathnames are directly entered in
    the browser address bar or when a view that is not at the root path is refreshed,
    the URL does not work. This happens because the server does not recognize the
    React Router routes. We have to implement basic server-side rendering on the backend,
    so the server is able to respond when it receives a request to a frontend route.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当React Router路由或路径名直接输入到浏览器地址栏，或者刷新不在根路径的视图时，URL无法工作。这是因为服务器无法识别React Router路由。我们需要在后端实现基本的服务器端渲染，以便服务器在收到对前端路由的请求时能够响应。
- en: To render relevant React components properly when the server receives requests
    to the frontend routes, we need to render the React components server side with
    regard to the React Router and Material-UI components.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器接收到前端路由的请求时，我们需要根据React Router和Material-UI组件在服务器端正确渲染相关的React组件。
- en: The basic idea behind server-side rendering of React apps is to use the `renderToString`
    method from `react-dom` to convert the root React component to markup string,
    and attach it to the template that the server renders when it receives a request.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: React应用程序服务器端渲染的基本思想是使用`react-dom`中的`renderToString`方法将根React组件转换为标记字符串，并将其附加到服务器在接收到请求时渲染的模板上。
- en: 'In `express.js`, we will replace the code that returns `template.js` in response
    to the `GET` request for `''/''`, with code, which on receiving any incoming GET
    request, generates server-side rendered markup of the relevant React components,
    and adds this markup to the template. This code will have the following structure:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在`express.js`中，我们将用代码替换对`'/'`的`GET`请求返回`template.js`的代码，该代码在接收到任何传入的GET请求时，生成相关React组件的服务器端渲染标记，并将此标记添加到模板中。此代码将具有以下结构：
- en: '[PRE76]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Modules for server-side rendering
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于服务器端渲染的模块
- en: 'To implement basic server-side rendering, we will need to import the following
    React, React Router, and Material-UI-specific modules into the server code. In
    our code structure, these modules will be imported into `server/express.js`:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现基本的服务器端渲染，我们需要将以下React、React Router和Material-UI特定模块导入到服务器代码中。在我们的代码结构中，这些模块将被导入到`server/express.js`中：
- en: '**React modules**: Required to render the React components and use `renderToString`:'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React模块**：用于渲染React组件和使用`renderToString`：'
- en: '[PRE77]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '**Router modules**: The `StaticRouter` is a stateless router that takes the
    requested URL to match the frontend route and the `MainRouter` component, which
    is the root component in our frontend:'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Router模块**：`StaticRouter`是一个无状态路由器，它接受请求的URL以匹配前端路由和`MainRouter`组件，这是我们前端的根组件：'
- en: '[PRE78]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '**Material-UI modules**: The following modules will help generate the CSS styles
    for the frontend components based on the Material-UI theme used on the frontend:'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Material-UI模块**：以下模块将帮助基于前端使用的Material-UI主题为前端组件生成CSS样式：'
- en: '[PRE79]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: With these modules, we can prepare, generate, and return server-side rendered
    frontend code.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些模块，我们可以准备、生成和返回服务器端渲染的前端代码。
- en: Preparing Material-UI styles for SSR
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为SSR准备Material-UI样式
- en: When the server receives any request, prior to responding with the generated
    markup containing the React view, we need to prepare the CSS styles that should
    also be added to the markup, so the UI does not break on initial render.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器接收到任何请求时，在响应包含React视图的生成标记之前，我们需要准备应该添加到标记中的CSS样式，以便UI在初始渲染时不会中断。
- en: '`mern-skeleton/server/express.js`:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/express.js`：'
- en: '[PRE80]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: In order to inject the Material-UI styles, on every request we first generate
    a new `SheetsRegistry` and MUI theme instance, matching what is used in the frontend
    code.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 为了注入Material-UI样式，在每个请求上，我们首先生成一个新的`SheetsRegistry`和MUI主题实例，与前端代码中使用的相匹配。
- en: Generating markup
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成标记
- en: 'The purpose of using `renderToString` is to generate an HTML string version
    of the React component that is to be shown to the user in response to the requested
    URL:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`renderToString`的目的是生成要响应请求的用户显示的React组件的HTML字符串版本：
- en: '`mern-skeleton/server/express.js`:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/express.js`：'
- en: '[PRE81]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: The client app's root component, `MainRouter`, is wrapped with the Material-UI
    theme and JSS to provide the styling props needed by the `MainRouter` child components.
    The stateless `StaticRouter` is used here instead of the `BrowserRouter` used
    on the client side, to wrap `MainRouter` and provide the routing props used in
    implementing the client-side components. Based on these values, such as the requested
    `location` route and theme passed in as props to the wrapping components, the
    `renderToString` will return markup containing the relevant view.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端应用程序的根组件`MainRouter`被Material-UI主题和JSS包裹，以提供`MainRouter`子组件所需的样式属性。在这里使用无状态的`StaticRouter`代替客户端使用的`BrowserRouter`，来包裹`MainRouter`并提供在实现客户端组件时使用的路由属性。基于这些值，例如请求的`location`路由和作为属性传递给包装组件的主题，`renderToString`将返回包含相关视图的标记。
- en: Sending a template with markup and CSS
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送包含标记和CSS的模板
- en: Once the markup is generated, we first check if there was a `redirect` rendered
    in the component to be sent in the markup. If there was no redirect, then we generate
    the CSS string from the `sheetsRegistry`, and in the response send the template
    back with the markup and CSS injected.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦生成了标记，我们首先检查组件中是否有渲染的`redirect`，以便在标记中发送。如果没有重定向，那么我们从`sheetsRegistry`生成CSS字符串，并在响应中发送带有标记和注入的CSS的模板。
- en: '`mern-skeleton/server/express.js`:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/express.js`：'
- en: '[PRE82]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: An example of a case where redirect is rendered in the component is when trying
    to access a `PrivateRoute` via server-side render. As the server side cannot access
    the auth token from client-side `sessionStorage`, the redirect in the `PrivateRoute`
    will render. The `context.url`, in this case, will have the `'/signin'` route,
    and hence instead of trying to render the `PrivateRoute` component, it will redirect
    to the `'/signin'` route.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件中渲染重定向的一个例子是尝试通过服务器端渲染访问`PrivateRoute`时。由于服务器端无法从客户端的`sessionStorage`访问auth令牌，`PrivateRoute`中的重定向将被渲染。在这种情况下，`context.url`将具有`'/signin'`路由，因此不会尝试渲染`PrivateRoute`组件，而是重定向到`'/signin'`路由。
- en: Updating template.js
  id: totrans-390
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新template.js
- en: The markup and CSS generated on the server must be added to the `template.js` 
    HTML code as follows for it to be loaded when the server renders the template.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上生成的标记和CSS必须添加到`template.js`的HTML代码中，以便在服务器渲染模板时加载。
- en: '`mern-skeleton/template.js`:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/template.js`：'
- en: '[PRE83]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Updating MainRouter
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新MainRouter
- en: 'Once the code rendered on the server side reaches the browser, and the frontend
    script takes over, we need to remove the server-side injected CSS when the main
    component mounts. This will give back full control over rendering the React app
    to the client side:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在服务器端渲染的代码到达浏览器，并且前端脚本接管后，我们需要在主组件挂载时移除服务器端注入的CSS。这将完全控制React应用程序的渲染权力交给客户端：
- en: '`mern-skeleton/client/MainRouter.js`:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/client/MainRouter.js`：'
- en: '[PRE84]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Hydrate instead of render
  id: totrans-398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用hydrate代替render
- en: 'Now that the React components will be rendered on the server side, we can update
    the `main.js` code to use `ReactDOM.hydrate()` instead of `ReactDOM.render()`:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 现在React组件将在服务器端渲染，我们可以更新`main.js`代码，使用`ReactDOM.hydrate()`代替`ReactDOM.render()`：
- en: '[PRE85]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The `hydrate` function hydrates a container that already has HTML content rendered
    by `ReactDOMServer`. This means the server-rendered markup is preserved and only
    event-handlers are attached when React takes over in the browser, allowing the
    initial load performance to be better.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`hydrate`函数用于给已由`ReactDOMServer`渲染的HTML内容进行水合。这意味着服务器端渲染的标记将被保留，只有当React在浏览器中接管时才会附加事件处理程序，从而使初始加载性能更好。'
- en: With basic server-side rendering implemented, direct requests to the frontend
    routes from the browser address bar can now be handled properly by the server,
    making it possible to bookmark the React frontend views.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现基本的服务器端渲染，服务器现在可以正确处理浏览器地址栏对前端路由的直接请求，从而可以将React前端视图加入书签。
- en: The skeleton MERN application developed here is now a completely functioning
    MERN web application with basic user features. We can extend the code in this
    skeleton to add a variety of features for different applications.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 这里开发的骨架MERN应用程序现在是一个具有基本用户功能的完全功能的MERN Web应用程序。我们可以扩展这个骨架中的代码，为不同的应用程序添加各种功能。
- en: Summary
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we completed the MERN skeleton application by adding a working
    React frontend, including frontend routing and basic server-side rendering of
    the React views.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过添加一个工作的React前端完成了MERN骨架应用程序，包括前端路由和React视图的基本服务器端渲染。
- en: We started off by updating the development flow to include client-side code
    bundling for the React views. We updated configuration for Webpack and Babel to
    compile the React code and discussed how to load the configured Webpack middleware
    from the Express app to initiate server-side and client-side code compilation
    from one place during development.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先更新了开发流程，以包括用于React视图的客户端代码捆绑。我们更新了Webpack和Babel的配置以编译React代码，并讨论了如何从Express应用程序加载配置的Webpack中间件，以便在开发过程中从一个地方启动服务器端和客户端代码的编译。
- en: With the development flow updated and before building out the frontend, we added
    the relevant React dependencies along with React Router for frontend routing and
    Material-UI to use their existing components in the skeleton app's user interface.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新开发流程并构建前端之前，我们添加了相关的React依赖项，以及用于前端路由的React Router和用于在骨架应用程序的用户界面中使用现有组件的Material-UI。
- en: Then, we implemented the top-level root React components, and integrated React
    Router that allowed us to add client-side routes for navigation. Using these routes,
    we loaded the custom React components that we developed using Material-UI components to
    make up the skeleton application's user interface.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们实现了顶层根React组件，并集成了React Router，这使我们能够添加用于导航的客户端路由。使用这些路由，我们加载了使用Material-UI组件开发的自定义React组件，以构成骨架应用程序的用户界面。
- en: To make these React views dynamic and interactive with data fetched from the
    backend, we used the Fetch API to connect to the backend user APIs. Then we incorporated
    authentication and authorization on the frontend views using `sessionStorage`
    to store user-specific details and JWT fetched from the server on successful sign-in,
    and also by limiting access to certain views using a `PrivateRoute` component.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些React视图能够与从后端获取的数据动态交互，我们使用Fetch API连接到后端用户API。然后，我们使用`sessionStorage`存储用户特定的细节和从服务器成功登录时获取的JWT，还通过使用`PrivateRoute`组件限制对某些视图的访问来在前端视图上实现身份验证和授权。
- en: Finally, we modified the server code to implement basic server-side rendering
    that allows loading the frontend routes directly in the browser with server-side
    rendered markup after the server recognizes that the incoming request is actually
    for a React route.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们修改了服务器代码，实现了基本的服务器端渲染，允许在服务器识别到传入请求实际上是针对React路由时，在浏览器中直接加载经服务器端渲染的标记。
- en: In the next chapter, we will use the concepts learned while developing this
    basic MERN application, and extend the skeleton application code to build a fully-featured
    social media application.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将利用开发这个基本的MERN应用程序时学到的概念，扩展骨架应用程序的代码，构建一个功能齐全的社交媒体应用程序。
