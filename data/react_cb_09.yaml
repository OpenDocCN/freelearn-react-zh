- en: Apollo and GraphQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apollo和GraphQL
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下配方：
- en: Creating our first GraphQL server
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个GraphQL服务器
- en: Creating a Twitter timeline with Apollo and GraphQL
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Apollo和GraphQL创建Twitter时间线
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: GraphQL is an application-layer query language that can be used with any database.
    It is also open source (MIT license) and was created by Facebook. It mainly differs
    from REST in that GraphQL does not use endpoints, but queries instead, and is
    supported by most server languages, such as JavaScript (Node.js), Go, Ruby, PHP,
    Java, and Python.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL是一种可以与任何数据库一起使用的应用层查询语言。它也是开源的（MIT许可证），由Facebook创建。它与REST的主要区别在于GraphQL不使用端点，而是使用查询，并且受大多数服务器语言支持，如JavaScript（Node.js），Go，Ruby，PHP，Java和Python。
- en: We'll now look at the main differences between GraphQL and REST.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看GraphQL和REST之间的主要区别。
- en: 'GraphQL:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL：
- en: The queries are readable
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询可读
- en: You can evolve the API without versions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在不使用版本的情况下演变API
- en: Type system
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型系统
- en: You can avoid doing multiple round trips to fetch related data
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以避免进行多次往返以获取相关数据
- en: It's easy to limit the set of data we need
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很容易限制我们需要的数据集
- en: 'REST:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: REST：
- en: In REST, everything is a resource
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在REST中，一切都是资源
- en: REST is schemaless
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST是无模式的
- en: You need versions to evolve the API
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要版本来演变API
- en: It's hard to limit the set of data we need
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很难限制我们需要的数据集
- en: If you need data from different resources, you need to make multiple requests
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要来自不同资源的数据，您需要进行多个请求
- en: Creating our first GraphQL server
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个GraphQL服务器
- en: For this recipe, we are going to create a contacts list in which we will save
    the name, phone, and email addresses of our friends.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将创建一个联系人列表，其中我们将保存我们朋友的姓名，电话和电子邮件地址。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The first thing we need to do is to create a directory for our project and
    initialize a new `package.json` file installing `express`, `graphql`, and `express-graphql`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是为我们的项目创建一个目录并初始化一个新的`package.json`文件，安装`express`，`graphql`和`express-graphql`：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We need to install `babel-preset-env` and `babel-cli` to use ES6 syntax in
    Node. Also, we need to create a `.babelrc` file :'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装`babel-preset-env`和`babel-cli`以在Node中使用ES6语法。此外，我们需要创建一个`.babelrc`文件：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'File: .babelrc'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：.babelrc
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s create our first GraphQL server:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个GraphQL服务器：
- en: 'First, we need to create an `index.js` file for our Express server:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要为我们的Express服务器创建一个`index.js`文件：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'File: index.js'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：index.js
- en: 'If you run `babel-node index.js` in your terminal, you should be able to see
    the node server running on port 3000:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在终端中运行`babel-node index.js`，您应该能够看到运行在端口3000上的节点服务器：
- en: '![](assets/5edc3ef2-a083-479b-85ac-1951698bc0ec.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5edc3ef2-a083-479b-85ac-1951698bc0ec.png)'
- en: 'Now we need to include our `express-graphql` library and import the `buildSchema`
    method from `graphql`:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要包含我们的`express-graphql`库，并从`graphql`导入`buildSchema`方法：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'File: index.js'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：index.js
- en: 'Once we have our `expressGraphQL` and `buildSchema`, let''s create our first
    GraphQL server with our first query:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们有了`expressGraphQL`和`buildSchema`，让我们用我们的第一个查询创建我们的第一个GraphQL服务器：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'File: index.js'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：index.js
- en: 'Now let''s create our data file for our contacts list. We can make a data directory
    and a `contacts.json` file:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们为我们的联系人列表创建数据文件。我们可以创建一个data目录和一个`contacts.json`文件：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'File: data/contacts.json'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：data/contacts.json
- en: 'We will now need to add the methods to get the data (`getContact` and `getContacts`):'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加获取数据的方法（`getContact`和`getContacts`）：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'File: index.js'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：index.js
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you run the server and you go to the URL `http://localhost:3000/graphql`,
    you will see the GraphiQL IDE and, by default, the message query, if you click
    on the play button you will observe the data with the message "First message":'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行服务器并转到URL `http://localhost:3000/graphql`，你将看到GraphiQL IDE，并且默认情况下会有一个message查询，如果你点击播放按钮，你将观察到带有消息“First
    message”的数据：
- en: '![](assets/2a59fbac-07c1-410f-9653-0925ce08df1e.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2a59fbac-07c1-410f-9653-0925ce08df1e.png)'
- en: 'Now in the GraphiQL IDE, we need to create a query and add a query variable
    for our `contactId` to get a single contact:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在GraphiQL IDE中，我们需要创建一个查询，并为我们的`contactId`添加一个查询变量以获取单个联系人：
- en: '![](assets/b32ab4c1-5303-4fc4-ac6a-390545ab3c91.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b32ab4c1-5303-4fc4-ac6a-390545ab3c91.png)'
- en: 'Now for our `getContacts` query, we need to pass the `contactName` variable:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对于我们的`getContacts`查询，我们需要传递`contactName`变量：
- en: '![](assets/5074e9a1-1678-4f5c-a50a-f83f82cc87eb.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5074e9a1-1678-4f5c-a50a-f83f82cc87eb.png)'
- en: 'As you can see, if we send John as the `contactName`, the query will return
    the two rows we have with the names John Smith and John Brown. Also, if we send
    an empty value, we are going to get all the contacts:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，如果我们发送`John`作为`contactName`，查询将返回我们拥有的两行名称为`John Smith`和`John Brown`的联系人。此外，如果我们发送一个空值，我们将得到所有的联系人：
- en: '![](assets/a10fbcf4-b026-4ad8-949d-244c0cbb23fe.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a10fbcf4-b026-4ad8-949d-244c0cbb23fe.png)'
- en: 'Also, we can start using fragments, which are used to share fields between
    `queries`, `mutations`, and `subscriptions`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以开始使用fragments，它们用于在`queries`，`mutations`和`subscriptions`之间共享字段：
- en: '![](assets/0f616bcb-3ddb-4a81-9143-30ac8e349e55.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0f616bcb-3ddb-4a81-9143-30ac8e349e55.png)'
- en: As you can see, we define our fragment with the fields we want to get and then
    in both queries (`contact1` and `contact2`), we re-use the same fragment (`contactFields`).
    In the query variables, we pass the values of the contacts we want to get data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们用我们想要获取的字段定义了我们的fragment，然后在两个查询（`contact1`和`contact2`）中，我们重复使用了相同的fragment（`contactFields`）。在查询变量中，我们传递了我们想要获取数据的联系人的值。
- en: There's more...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Mutations are also essential because they help us to modify our data. Let's
    implement a mutation and update a contact by passing the ID and the fields we
    want to change.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Mutation也是必不可少的，因为它们帮助我们修改数据。让我们实现一个mutation，并通过传递ID和我们想要更改的字段来更新一个联系人。
- en: 'We need to add our mutation definition and create the function to update our
    contact; our code should look like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加我们的mutation定义并创建更新联系人的函数；我们的代码应该如下所示：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'File: index.js'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：index.js
- en: 'Now let''s create our mutation in GraphiQL and update a contact:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在GraphiQL中创建我们的mutation并更新一个联系人：
- en: '![](assets/23b94c48-b325-4a54-a7b5-92ba24d6c675.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/23b94c48-b325-4a54-a7b5-92ba24d6c675.png)'
- en: Creating a Twitter timeline with Apollo and GraphQL
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apollo和GraphQL创建Twitter时间线
- en: Apollo is an open source infrastructure for GraphQL. There are other libraries
    for handling GraphQL, such as Relay and Universal React Query Library (URQL).
    The main problem with these libraries is that they are mainly for React applications,
    while Apollo can work with any other technology or framework.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Apollo是一个用于GraphQL的开源基础设施。还有其他处理GraphQL的库，比如Relay和Universal React Query Library
    (URQL)。这些库的主要问题是它们主要用于React应用程序，而Apollo可以与任何其他技术或框架一起使用。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we are going to create a new React application using `create-react-app`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用`create-react-app`创建一个新的React应用程序：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We need to eject the configuration by executing the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过执行以下命令来弹出配置：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `eject` command will bring all the configuration of `react-scripts` to your
    local project (Webpack configuration).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`eject`命令将把`react-scripts`的所有配置带到你的本地项目中（Webpack配置）。'
- en: 'Now we need to install the following packages:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要安装以下包：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And we need to install these dev packages as well:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要安装这些开发包：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then we need to add a `resolutions` node to specify the exact version of GraphQL we
    are going to use. This is to avoid version conflicts. The current version of `graphql`
    is `0.13.2`. Of course, you will need to specify the latest version of GraphqQL
    at the time you''re reading this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要创建我们的tweet模型：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Also, we need to remove the `babel` node in our `package.json`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要在我们的`package.json`中删除`babel`节点。
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'File: package.json'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：package.json
- en: 'Then, finally, we need to create a `.babelrc` file with this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，最后，我们需要创建一个`.babelrc`文件，其中包含以下内容：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'File: .babelrc'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是真相的时刻！如果您正确地按照所有步骤进行了操作，您应该看到GraphiQL IDE在`http://localhost:5000/graphiql`上运行，但可能会出现以下错误：
- en: Before we jump to the actual recipe, we need to create first our GraphQL backend
    server to create all the queries and mutations we will need to complete this project.
    We'll see how to do that in the following sections.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装并运行MongoDB才能使用此项目。如果您不知道如何做到这一点，您可以查看[第8章](41637135-a49d-409a-bbbe-2928609e749b.xhtml)*，使用MongoDB和MySQL创建Node.js
    API*。
- en: Creating our GraphQL backend server
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件：.babelrc
- en: 'Let''s get started with the backend server:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始后端服务器：
- en: 'First, inside the `apollo` project (the one we created with `create-react-app`),
    we need to create a new directory called `backend`, initialize a `package.json`
    file, and create inside the `src` folder:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`apollo`项目内（我们使用`create-react-app`创建的项目），我们需要创建一个名为`backend`的新目录，初始化一个`package.json`文件，并在`src`文件夹内创建：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now we need to install these dependencies:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要安装这些依赖项：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In our `package.json` file, we need to modify our start script to use `nodemon`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`package.json`文件中，我们需要修改我们的启动脚本以使用`nodemon`：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'File: package.json'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要添加一个`resolutions`节点来指定我们将要使用的GraphQL的确切版本。这是为了避免版本冲突。当前版本的`graphql`是`0.13.2`。当然，您需要在阅读本文时指定最新版本的GraphqQL：
- en: 'Then we need to create our `app.js` file, in which we are going to create our
    GraphQL middleware:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们需要创建我们的`app.js`文件，在其中我们将创建我们的GraphQL中间件：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'File: src/app.js'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/app.js
- en: 'As you can see, we have included our typeDefs and resolvers from `types` folder,
    so let''s create that directory and create our Query file:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们已经从`types`文件夹中包含了我们的typeDefs和resolvers，所以让我们创建这个目录并创建我们的Query文件：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'File: src/types/Query.js'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们的GraphQL后端服务器
- en: 'After we have created our Query file, we need to add our resolvers. These are
    the functions that are executed for each Query and Mutation. We are also going
    to define our custom `DateTime` type using `GraphQLScalarType`:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件：src/types/Query.js
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'File: src/types/Resolvers.js'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们跳到实际的配方之前，我们需要首先创建我们的GraphQL后端服务器，以创建我们完成这个项目所需的所有查询和变异。我们将在接下来的章节中看到如何做到这一点。
- en: 'Finally, we need to create our tweet model:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件：src/types/Resolvers.js
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'File: src/model/Tweet.jsYou need to have MongoDB installed and running to use
    this project. If you don''t know how to do this, you can look at [Chapter 8](41637135-a49d-409a-bbbe-2928609e749b.xhtml)*,
    Creating an API with Node.js Using MongoDB and MySQL.*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/model/Tweet.js
- en: 'Now for the moment of truth! If you followed all the steps correctly you should
    see the GraphiQL IDE working if you go to `http://localhost:5000/graphiql`, but
    it''s possible you''ll get this error:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件：package.json
- en: '![](assets/ff5648d9-00ed-40d2-b6b9-9000eda3bc43.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: 在我们创建了Query文件之后，我们需要添加我们的resolvers。这些是为每个查询和变异执行的函数。我们还将使用`GraphQLScalarType`定义我们的自定义`DateTime`类型：
- en: 'Usually, this error means that we are using `graphql` in two projects (frontend
    and backend) and npm does not know which version will use which. This is a tricky
    error, but I will show you how to fix it. First, we remove the `node_modules`
    folder from both of our projects (frontend and backend). Then we need to add a
    `resolutions` node in both of the `package.json` files:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，这个错误意味着我们在两个项目（前端和后端）中都在使用`graphql`，npm不知道将使用哪个版本。这是一个棘手的错误，但我会告诉你如何修复它。首先，我们从我们的两个项目（前端和后端）中删除`node_modules`文件夹。然后我们需要在两个`package.json`文件中添加一个`resolutions`节点：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: At the same time, we also need to remove the caret (`^`) from the `graphql`
    version in both `package.json` files.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，我们还需要从两个`package.json`文件中的`graphql`版本中删除插入符（`^`）。
- en: Now we must delete the `package-lock.json` and `yarn.lock` files (if you have
    them).
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们必须删除`package-lock.json`和`yarn.lock`文件（如果有的话）。
- en: 'Before we install the dependencies again, it''s a good idea to update npm to
    the latest version:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们再次安装依赖之前，最好将npm更新到最新版本：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After that, just to be safe, let''s remove the npm cache:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，为了安全起见，让我们清除npm缓存：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And now you run `npm install` again (first on the backend), and after you run
    the project with `npm start`, if everything works fine you should see the GraphiQL
    IDE working properly:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后再次运行`npm install`（首先在后端），然后在`npm start`中运行项目，如果一切正常，您应该看到GraphiQL IDE正常工作：
- en: '![](assets/8c8eb593-bfdb-48d0-84fd-92cef490ace7.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8c8eb593-bfdb-48d0-84fd-92cef490ace7.png)'
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Now that we have our backend ready, let''s start working on our frontend:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的后端准备好了，让我们开始在前端工作：
- en: 'The first file we need to modify is the `index.js` file:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要修改的第一个文件是`index.js`文件：
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'File: src/index.js'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/index.js
- en: 'We connect our backend endpoint to `ApolloClient`, and we wrapped our `<App
    />` component with `<ApolloProvider>` (yes, this is similar to Redux Provider).
    Now let''s modify our `App.js` file to include our main component (`Tweets`):'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将后端端点连接到`ApolloClient`，并将我们的`<App />`组件包装在`<ApolloProvider>`中（是的，这类似于Redux
    Provider）。现在让我们修改我们的`App.js`文件，包括我们的主要组件（`Tweets`）：
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'File: src/App.js'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/App.js
- en: 'The first thing we need to do is create our GraphQL queries and mutations.
    To do this, we need to create a new directory called `graphql` and other two directories
    inside it, one for `mutations` and the other for `queries`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是创建我们的GraphQL查询和mutations。为此，我们需要创建一个名为`graphql`的新目录，并在其中创建另外两个目录，一个用于`mutations`，另一个用于`queries`：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'File: src/graphql/queries/index.js'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/graphql/queries/index.js
- en: 'Yes, you see it properly, it''s not a typo! The function is called without
    parentheses and using only backticks (`gql`YOUR QUERY HERE``). The `getTweets`
    query is already defined in our backend. We are executing the `getTweets` query,
    and we will get the fields (`_id`, `tweet`, `author`, and `createdAt`). Now let''s
    create our mutations:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，你看得没错，这不是打字错误！该函数在没有括号的情况下被调用，并且只使用反引号（`gql`YOUR QUERY HERE``）。`getTweets`查询已经在我们的后端中定义。我们正在执行`getTweets`查询，并将获得字段（`_id`，`tweet`，`author`和`createdAt`）。现在让我们创建我们的mutations：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'File: src/graphql/mutations/index.js'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/graphql/mutations/index.js
- en: 'I always like to do refactors and improve things, that''s why I created two
    helpers for the `Query` and `Mutation` components from `react-apollo`. First,
    let''s create two directories, `shared` and `shared/components`. First, this is
    our Query component:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我总是喜欢重构和改进事物，这就是为什么我为`react-apollo`的`Query`和`Mutation`组件创建了两个帮助程序。首先，让我们创建两个目录，`shared`和`shared/components`。首先，这是我们的Query组件：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'File: src/shared/components/Query.js'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/components/Query.js
- en: 'Our Mutation component should be like this:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的Mutation组件应该是这样的：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'File: src/shared/components/Mutation.js'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/components/Mutation.js
- en: 'Once we have our helpers ready, let''s create our components for Tweets, Tweet,
    and CreateTweet. This is our `Tweets` component:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们的助手准备好了，让我们创建我们的Tweets、Tweet和CreateTweet组件。这是我们的`Tweets`组件：
- en: '[PRE31]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'File: src/components/Tweets.js'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Tweets.js
- en: 'This is our `Tweet` component:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我们的`Tweet`组件：
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'File: src/components/Tweet.js'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Tweet.js
- en: 'Our `CreateTweet` component is as follows:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`CreateTweet`组件如下：
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'File: src/components/CreateTweet.js'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/CreateTweet.js
- en: 'Finally, but no less important, this is the file for the styles:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，但同样重要的是，这是样式文件：
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'File: src/components/Tweets.css'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Tweets.css
- en: How it works...
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you did everything correctly and you run the frontend and backend (each
    on a different terminal) then you can run the project at `http://localhost:3000`,
    and you should see this view:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做了一切正确，并且你在前端和后端分别运行（在不同的终端上），那么你可以在`http://localhost:3000`上运行项目，你应该会看到这个视图：
- en: '![](assets/7feb894b-1343-4945-8b92-a2d0931b6508.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7feb894b-1343-4945-8b92-a2d0931b6508.png)'
- en: 'Now we can create new tweets by writing them in the text area and clicking
    on the Tweet it! button:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过在文本区域中编写推文并点击“Tweet it!”按钮来创建新的推文：
- en: '![](assets/ff42cba1-738f-44f6-a5cd-8343f15abbd9.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ff42cba1-738f-44f6-a5cd-8343f15abbd9.png)'
- en: 'As you can see, the order of tweets is descending. This means that the newest
    tweets are posted at the top. If you want to edit a tweet, you can click on the
    edit icon (the pencil):'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，推文的顺序是降序的。这意味着最新的推文会被发布在顶部。如果你想编辑一条推文，你可以点击编辑图标（铅笔）：
- en: '![](assets/4aff01c3-e14d-47e2-9272-2709d3fd4ae3.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4aff01c3-e14d-47e2-9272-2709d3fd4ae3.png)'
- en: 'The way to save the changes is by removing the focus (onBlur) on the textarea,
    and now we can see the updated tweet:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改的方法是通过移除文本区域的焦点（onBlur），现在我们可以看到更新后的推文：
- en: '![](assets/37cb4645-bcce-49e8-9e99-7537e6c3a7e8.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/37cb4645-bcce-49e8-9e99-7537e6c3a7e8.png)'
- en: 'Finally, if you want to delete a tweet, then click on the trash icon (I have
    removed the second tweet):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你想删除一条推文，那么点击垃圾桶图标（我已经删除了第二条推文）：
- en: '![](assets/d342e424-cabe-45a6-99e5-bfaff86550a4.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d342e424-cabe-45a6-99e5-bfaff86550a4.png)'
- en: As you can see, the mutations are very easy to implement, and with the helpers,
    we have simplified this process.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，变异非常容易实现，并且通过助手，我们简化了这个过程。
- en: You're probably thinking that there's some way to use Redux with GraphQL, but
    let me tell you that it is possible that GraphQL will replace Redux because we
    have access to the data through the ApolloProvider.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为有一些方法可以将Redux与GraphQL一起使用，但让我告诉你，GraphQL有可能会取代Redux，因为我们可以通过ApolloProvider访问数据。
