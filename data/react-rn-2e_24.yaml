- en: Handling Application State
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理应用程序状态
- en: From early on in this book, you've been using state to control your React components.
    State is an important concept in any React application because it controls what
    the user can see and interact with. Without state, you just have a bunch of empty
    React components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的早期，你一直在使用状态来控制你的React组件。状态是任何React应用程序中的重要概念，因为它控制用户可以看到和交互的内容。没有状态，你只有一堆空的React组件。
- en: In this chapter, you'll learn about Flux and how it can serve as the basis of
    your information architecture. Then, you'll learn how to build an architecture
    that best serves web and mobile architectures. You'll also be introduced to the
    Redux library, followed by a discussion on the limitations of React architectures
    and how you might overcome them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习Flux以及它如何作为信息架构的基础。然后，你将学习如何构建最适合Web和移动架构的架构。你还将介绍Redux库，然后讨论React架构的局限性以及如何克服它们。
- en: Information architecture and Flux
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信息架构和Flux
- en: It can be difficult to think of user interfaces as information architectures.
    More often, you get a rough idea of how the UI should look and behave, and then
    you implement it. I do this all the time, and it's a great way to get the ball
    rolling, to discover issues with your approach early, and so on. But then I like
    to take a step back and picture what's happening without any widgets. Inevitably,
    what I've built is flawed in terms of how state flows through the various components.
    This is fine; at least I have something to work with now. I just have to make
    sure that I address the information architecture before building too much.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将用户界面视为信息架构可能很难。更常见的是，你对UI应该如何看起来和行为有一个大致的想法，然后你实现它。我一直这样做，这是一个很好的方法，可以让事情开始进行，及早发现你的方法存在的问题等等。但是然后我喜欢退一步，想象没有任何小部件时会发生什么。不可避免的是，我构建的东西在状态通过各种组件流动方面存在缺陷。这没关系；至少现在我有东西可以使用。我只需要确保在构建太多之前解决信息架构的问题。
- en: Flux is a set of patterns created by Facebook that helps developers think about
    their information architecture in a way that fits in naturally with their apps.
    I'll go over the key concepts of Flux next so that you can apply these ideas to
    a unified React architecture.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Flux是Facebook创建的一组模式，它帮助开发人员以与其应用程序自然契合的方式思考他们的信息架构。接下来我将介绍Flux的关键概念，这样你就可以将这些想法应用到统一的React架构中。
- en: Unidirectionality
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单向性
- en: Earlier in this book, I introduced the container pattern for React components.
    The container component has state, but it doesn't actually render any UI elements.
    Instead, it renders other React components and passes in its state as properties.
    Whenever the container state changes, the child components are re-rendered with
    new property values. This is unidirectional data flow.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前面，我介绍了React组件的容器模式。容器组件具有状态，但实际上不会呈现任何UI元素。相反，它呈现其他React组件并将其状态作为属性传递。每当容器状态更改时，子组件都会使用新的属性值重新呈现。这是单向数据流。
- en: Flux takes this idea and applies it to something called a store. A **store**
    is an abstract concept that holds application state. As far as I'm concerned,
    a React container is a perfectly valid Flux store. I'll have more to say about
    stores in a moment. First, I want you to understand why unidirectional data flows
    are advantageous.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Flux采纳了这个想法，并将其应用于称为存储的东西。**存储**是一个抽象概念，它保存应用程序状态。就我而言，React容器是一个完全有效的Flux存储。我一会儿会详细介绍存储。首先，我希望你理解为什么单向数据流是有利的。
- en: There's a good chance that you've implemented a UI component that changes state,
    but you're not always sure how it happens. Was it the result of some event in
    another component? Was it a side-effect from some network call completing? When
    that happens, you spend lots of time chasing down where the update came from.
    The effect is often a cascading game of whack-a-mole. When changes can only come
    from one direction, you can eliminate a number of other possibilities, thus, making
    the architecture as a whole more predictable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您很可能已经实现了一个改变状态的UI组件，但并不总是确定它是如何发生的。它是另一个组件中的某个事件的结果吗？是某个网络调用完成的副作用吗？当发生这种情况时，您会花费大量时间追踪更新的来源。结果往往是一个连续的麻烦游戏。当改变只能来自一个方向时，您可以排除许多其他可能性，从而使整体架构更可预测。
- en: Synchronous update rounds
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步更新轮次
- en: When you change the state of a React container, it will re-render its children,
    who re-render their children, and so on. In Flux terminology, this is called an
    *update round*. From the time state changes to the time that the UI elements reflect
    this change, this is the boundary of the round. It's nice to be able to group
    the dynamic parts of application behavior into larger chunks like this because
    it's easier to reason about cause and effect.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当您改变React容器的状态时，它将重新渲染其子组件，子组件将重新渲染它们的子组件，依此类推。在Flux术语中，这称为*更新轮次*。从状态改变到UI元素反映这一变化的时间，这就是轮次的边界。能够将应用程序行为的动态部分分组成更大的块是很好的，因为这样更容易理解因果关系。
- en: A potential problem with React container components is that they can interweave
    with one another and render in a non-deterministic order. For example, what if
    some API call completes and causes a state update to happen before the rendering
    has completed in another update round? The side effects of asynchronicity can
    accumulate and morph into unsustainable architectures if not taken seriously.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: React容器组件的一个潜在问题是它们可以交织在一起并以非确定性的顺序进行渲染。例如，如果某个API调用完成并导致在另一个更新轮次中的渲染完成之前发生状态更新，会发生什么？如果不认真对待，异步性的副作用会累积并演变成不可持续的架构。
- en: The solution in Flux architectures is to enforce synchronous update rounds,
    and to treat attempts to sidestep the update round order as an error. JavaScript
    is a single-threaded, run-to-completion environment that should be embraced by
    working with it rather than against it. Update the whole UI, and then update the
    whole UI again. It turns out that React is a really good tool for this job.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Flux架构中的解决方案是强制同步更新轮次，并将试图规避更新轮次顺序的尝试视为错误。JavaScript是一个单线程的、运行至完成的环境，应该通过与之合作而不是对抗来接受它。先更新整个UI，然后再次更新整个UI。事实证明，React是这项工作的一个非常好的工具。
- en: Predictable state transformations
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可预测的状态转换
- en: In a Flux architecture, you havea store used to hold application state. You
    know that, when state changes, it happens synchronously and unidirectionally,
    making the system as a whole more predictable and easy to reason about. However,
    there's still one more thing you can do to ensure that side effects aren't introduced.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Flux架构中，您有一个用于保存应用程序状态的存储。您知道，当状态发生变化时，它是同步和单向的，使整个系统更可预测且更易于理解。然而，还有一件事可以做，以确保不会引入副作用。
- en: You're keeping all your application state in a store, which is great, but you
    can still break things by mutating data in other places. These mutations might
    seem innocent at first glance, but they're toxic to your architecture. For example,
    the callback function that handles a `fetch()` call might manipulate the data
    before passing it to the store. An event handler might generate some structure
    and pass it to the store. There are limitless possibilities.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你将所有应用程序状态都保存在一个存储中，这很好，但你仍然可以通过在其他地方改变数据来破坏一切。这些变化乍看起来可能无害，但对你的架构来说是有害的。例如，处理`fetch()`调用的回调函数可能在将数据传递给存储之前对数据进行操作。事件处理程序可能生成一些结构并将其传递给存储。可能性是无限的。
- en: 'The problem with performing these state transformations outside the store is
    that you don''t necessarily know that they''re happening. Think of mutating data
    as the butterfly effect: one small change has far-reaching consequences that aren''t
    obvious at first. The solution is to only mutate state in the store, without exception.
    It''s predictable and easy to trace the cause and effect of your React architecture
    this way.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在存储之外执行这些状态转换的问题在于你并不一定知道它们正在发生。将数据变异看作蝴蝶效应：一个小的改变会产生不明显的深远影响。解决方案是只在存储中变异状态，没有例外。这样做是可预测的，可以轻松追踪你的React架构的因果关系。
- en: I've been using `Immutable.js` for state in most of the examples throughout
    the book. This will come in handy when you're thinking about state transformations
    in Flux architecture on a large scale. Controlling where state transformations
    take place is important, but so is state immutability. It helps to enforce the
    ideas of Flux architecture, and you'll learn about these ideas in more depth momentarily
    when we look at Redux.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直在本书的大部分示例中使用`Immutable.js`来管理状态。当你考虑Flux架构中的状态转换时，这将会很有用。控制状态转换发生的位置很重要，但状态的不可变性也很重要。它有助于强化Flux架构的理念，当我们深入了解Redux时，你将更深入地了解这些理念。
- en: Unified information architecture
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统一的信息架构
- en: 'Let''s take a moment to recap the ingredients of our application architecture
    so far:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下到目前为止我们应用程序架构的要素：
- en: '**React Web**: Applications that run in web browsers'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React Web**：在Web浏览器中运行的应用程序'
- en: '**React Native**: Applications that run natively on mobile platforms'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React Native**：在移动平台上本地运行的应用程序'
- en: '**Flux**: Patterns for scalable data in React applications'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Flux**：可扩展数据在React应用程序中的模式'
- en: Remember, React is just an abstraction that sits on top of a render target.
    The two main render targets are browsers and mobile native. This list will likely
    grow, so it's up to you to design your architecture in a way that doesn't exclude
    future possibilities. The challenge is that you're not porting a web application
    to a native mobile application; they're different applications, but they serve
    the same purpose.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，React只是一个位于渲染目标之上的抽象。两个主要的渲染目标是浏览器和移动原生应用。这个列表可能会不断增长，所以你需要设计你的架构，以便不排除未来的可能性。挑战在于你不是将一个Web应用程序移植到原生移动应用程序；它们是不同的应用程序，但它们有相同的目的。
- en: 'Having said that, is there a way that you can still have some kind of unified
    information architecture based on ideas from Flux that can be used by these different
    applications? The best answer I can come up with, unfortunately, is: sort of.
    You don''t want to let the different web and mobile user experiences lead to drastically
    different approaches in handling state. If the goals of the applications are the
    same, then there has to be some common information that you can share, using the
    same Flux concepts.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，是否有一种方式可以基于Flux的思想仍然拥有某种统一的信息架构，可以被这些不同的应用使用？我能想到的最好答案，不幸的是，是：有点。你不希望让不同的网页和移动用户体验导致在处理状态上采取截然不同的方法。如果应用的目标是相同的，那么必须有一些共同的信息可以使用，使用相同的Flux概念。
- en: The difficult part is the fact that web and native mobile are different experiences,
    which means that the shape of your application state will be different. It has
    to be different; otherwise, you would just be porting from one platform to the
    other, which defeats the purpose of using React Native to leverage capabilities
    that don't exist in browsers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 困难的部分在于网页和原生移动应用是不同的体验，这意味着你的应用状态的形式会有所不同。它必须是不同的；否则，你只是在不同平台之间移植，这违背了使用React
    Native来利用浏览器中不存在的功能的初衷。
- en: Implementing Redux
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Redux
- en: You'll use a library called Redux to implement a basic application that demonstrates
    the Flux architecture. Redux doesn't strictly follow the patterns set forth by
    Flux. Instead, it borrows key ideas from Flux, and implements a small API to make
    it easy to implement Flux.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用一个叫做Redux的库来实现一个演示Flux架构的基本应用。Redux并不严格遵循Flux所设定的模式。相反，它借鉴了Flux的关键思想，并实现了一个小的API，使得实现Flux变得容易。
- en: The application itself will be a newsreader, a specialized reader for hipsters
    that you probably haven't heard of. It's a simple app, but I want to highlight
    the architectural challenges as I walk through the implementation. Even simple
    apps get complex when you're paying attention to what's going on with the data.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 应用本身将是一个新闻阅读器，一个你可能从未听说过的时髦读者。这是一个简单的应用，但我想要在实现过程中突出架构上的挑战。即使是简单的应用，在关注数据时也会变得复杂。
- en: You're going to implement two versions of this app. You'll start with the web
    version, and then you'll implement mobile—native apps for iOS and Android. You'll
    see how you can share architectural concepts between your apps. This lowers the
    conceptual overhead when you need to implement the same application on several
    platforms. You're implementing two apps right now, but this will likely be more
    in the future as React expands its rendering capabilities.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你将实现这个应用的两个版本。你将从网页版本开始，然后实现移动——iOS和Android的原生应用。你将看到如何在应用之间共享架构概念。当你需要在多个平台上实现相同的应用时，这降低了概念上的负担。你现在正在实现两个应用，但随着React扩展其渲染能力，将来可能会有更多。
- en: Once again, I urge you to download the code samples for this book from [https://github.com/PacktPublishing/React-and-React-Native-Second-Edition](https://github.com/PacktPublishing/React-and-React-Native-Second-Edition).
    There are a lot of little details that I simply do not have room to cover in this
    book, especially for these example apps we're about to look at.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我再次敦促你从[https://github.com/PacktPublishing/React-and-React-Native-Second-Edition](https://github.com/PacktPublishing/React-and-React-Native-Second-Edition)下载本书的代码示例。这本书中有很多我无法在书中覆盖的细节，尤其是对于我们即将看到的这些示例应用。
- en: Initial application state
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始应用状态
- en: 'Let''s start by looking at the initial state of the Flux store. In Redux, the
    entire state of the application is represented by a single store. Here''s what
    it looks like:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下Flux存储的初始状态。在Redux中，应用的整个状态由一个单一的存储表示。它看起来是这样的：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This module exports an `Immutable.js Map` instance. You'll see why later on.
    But for now, let's look at the organization of this state. In Redux, you divide
    up application state by slices. In this case, it's a simple application, so the
    store only has three slices of state. Each slice of state is mapped to a major
    application feature.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块导出一个`Immutable.js Map`实例。稍后您会明白原因。但现在，让我们看看这个状态的组织。在Redux中，您通过切片来划分应用程序状态。在这种情况下，这是一个简单的应用程序，因此存储只有三个状态切片。每个状态切片都映射到一个主要的应用程序功能。
- en: For example, the `Home` key represents a state that's used by the `Home` component
    of your app. It's important to initialize any state, even if it's an empty object
    or array, so that your components have initial properties. Now let's use some
    Redux functions to create a  store that's used to get data to your React components.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`Home`键表示应用程序的`Home`组件使用的状态。初始化任何状态都很重要，即使它是一个空对象或数组，这样您的组件就有了初始属性。现在让我们使用一些Redux函数来创建一个用于向您的React组件获取数据的存储。
- en: Creating the store
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建存储
- en: The initial state is useful when the application first starts. This is enough
    to render components, but that's about it. Once the user starts interacting with
    the UI, you need a way to change the state of the store. In Redux, you assign
    a reducer function to each slice of state in your store. So, for example, your
    app would have a `Home` reducer, an `App` reducer, and an `Article` reducer.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 初始状态在应用程序首次启动时很有用。这足以呈现组件，但仅此而已。一旦用户开始与UI交互，您需要一种改变存储状态的方法。在Redux中，您为存储中的每个状态切片分配一个减速器函数。因此，例如，您的应用程序将有一个`Home`减速器，一个`App`减速器和一个`Article`减速器。
- en: 'The key concept of a reducer in Redux is that it''s pure and side-effect free.
    This is where having `Immutable.js` structures as state comes in handy. Let''s
    see how to tie your initial state to the reducer functions that will eventually
    change the state of our store:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Redux中减速器的关键概念是它是纯净的，没有副作用。这就是在状态中使用`Immutable.js`结构有用的地方。让我们看看如何将初始状态与最终改变我们存储状态的减速器函数联系起来：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `App`, `Home`, and `Article` functions are named in exactly the same way
    as the slice of state that they manipulate. This makes it easier to add new states
    and reducer functions as the application grows.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`App`，`Home`和`Article`函数的命名方式与它们操作的状态片段完全相同。随着应用程序的增长，这使得添加新的状态和减速器函数变得更容易。'
- en: You now have a Redux store that's ready to go. But you still haven't hooked
    it up to the React components that actually render state. Let's take a look at
    how to do this now.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有一个准备就绪的Redux存储。但您仍然没有将其连接到实际呈现状态的React组件。现在让我们看看如何做到这一点。
- en: Store provider and routes
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储提供程序和路由
- en: Redux has a `Provider` component (technically, it's the `react-redux` package
    that provides it) that's used to wrap the top-level components of your application.
    This will ensure that Redux store data is available to every component in your
    application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Redux有一个`Provider`组件（技术上，它是`react-redux`包提供的），用于包装应用程序的顶级组件。这将确保Redux存储数据对应用程序中的每个组件都可用。
- en: 'In the hipster newsreader app you''re developing, you''ll wrap the `Router`
    component with a `Provider` component. Then, as you build your components, you
    know that store data will be available. Here''s what the `Root` component looks
    like:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在您正在开发的潮流新闻阅读器应用中，您将使用`Provider`组件将`Router`组件包装起来。然后，在构建组件时，您知道存储数据将可用。以下是`Root`组件的外观：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The store that you created by taking initial state and combining it with reducer
    functions is passed to `<Provider>`. This means that, when your reducers cause
    the Redux store to change, the store data is automatically passed to each application
    component. We'll take a look at the `App` component next.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将初始状态与减速器函数组合来创建的存储器被传递给`<Provider>`。这意味着，当你的减速器导致Redux存储器改变时，存储器数据会自动传递给每个应用程序组件。接下来我们将看一下`App`组件。
- en: The App component
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: App组件
- en: 'The `App` component includes the page heading and a list of links to various
    article categories. When the user moves around the user interface, the `App` component
    is always rendered, but each `<Route>` element renders different content based
    on the current route. Let''s take a look at the component, and then we''ll break
    down how it works:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`App`组件包括页面标题和各种文章分类的链接列表。当用户在用户界面中移动时，`App`组件总是被渲染，但每个`<Route>`元素根据当前路由渲染不同的内容。让我们来看一下这个组件，然后我们将分解它的工作原理：'
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This component requires a `title` property and a `links` property. Both of these
    values are actually states that come from the Redux store. Note that it's exporting
    a higher-order component, created using the `connect()` function. This function
    accepts a callback function that transforms the store state into properties that
    the component needs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件需要一个`title`属性和一个`links`属性。这两个值实际上都是来自Redux存储器的状态。请注意，它导出了一个使用`connect()`函数创建的高阶组件。这个函数接受一个回调函数，将存储器状态转换为组件需要的属性。
- en: 'In this example, you need the `App` state. Turning this map into a plain JavaScript
    object is done using the `toJS()` method. This is how Redux state is passed to
    components. Here''s what the rendered content of the `App` component looks like:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你需要`App`状态。使用`toJS()`方法将这个映射转换为普通的JavaScript对象。这就是Redux状态传递给组件的方式。下面是`App`组件的渲染内容：
- en: '![](Images/85d4cac5-eed4-49e3-a5d2-3886db1b8c91.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/85d4cac5-eed4-49e3-a5d2-3886db1b8c91.png)'
- en: Ignore the amazing article titles for a moment; we'll return to these briefly.
    The title and the category links are rendered by the `App` component. The article
    titles are rendered by a one of the `<Route>` elements.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时忽略这些惊人的文章标题；我们稍后会回到这些。标题和分类链接是由`App`组件渲染的。文章标题是由`<Route>`元素之一渲染的。
- en: 'Notice how the All category is bold? This is because it''s the currently selected
    category. If the Local category is selected, the All text will go back to regular
    font, and the Local text will be emboldened. This is all controlled through the
    Redux state. Let''s take a look at the `App` reducer function now as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意所有分类都是粗体吗？这是因为它是当前选定的分类。如果选择了本地分类，所有文本将恢复为常规字体，而本地文本将加粗。这一切都是通过Redux状态控制的。现在让我们来看一下`App`减速器函数：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are two points I'd like to make about this reducer logic. First, you can
    now see how having immutable data structures in place makes this code concise
    and easy to follow. Second, a lot of state handling happens here in response to
    simple actions. Take the `FETCHING_ARTICLE` and `FETCHING_ARTICLES` actions, for
    example. You want to change the UI before actually issuing a network request.
    I think this type of explicitness is the real value of Flux and Redux. You know
    exactly why something changes. It's explicit, but not verbose.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个减速器逻辑，我想提出两点。首先，你现在可以看到，使用不可变数据结构使得这段代码简洁易懂。其次，对于简单的操作，这里发生了很多状态处理。例如，以`FETCHING_ARTICLE`和`FETCHING_ARTICLES`操作为例。在实际发出网络请求之前，你希望改变UI。我认为这种明确性是Flux和Redux的真正价值。你知道为什么某些东西会改变。它是明确的，但不啰嗦。
- en: The Home component
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主页组件
- en: The last major piece of the Redux architecture that's missing from this picture
    is the action creator functions. These are called by components in order to dispatch
    payloads to the Redux store. The end result of dispatching any action is a change
    in state. However, some actions need to go and fetch state before they can be
    dispatched to the store as a payload.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Redux架构中缺少的最后一个重要部分是动作创建函数。这些函数由组件调用，以便向Redux存储发送有效负载。调度任何操作的最终结果是状态的改变。然而，有些操作需要去获取状态，然后才能作为有效负载调度到存储中。
- en: 'Let''s look at the `Home` component of the `Neckbeard News` app. It''ll show
    you how you can pass along action creator functions when wiring up components
    to the Redux store. Here''s the code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`Neckbeard News`应用程序的`Home`组件。它将向您展示如何在将组件连接到Redux存储时传递动作创建函数。以下是代码：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let's focus on the `connect()` function, which is used to connect the `Home`
    component to the store. The first argument is a function that takes relevant state
    from the store and returns it as `props` for this component. It's using `ownProps`
    so that you can pass `props` directly to the component and override anything from
    the store. The `filter` property is why we need this capability.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们专注于`connect()`函数，它用于将`Home`组件连接到存储。第一个参数是一个函数，它从存储中获取相关状态，并将其作为此组件的`props`返回。它使用`ownProps`，这样您就可以直接将`props`传递给组件，并覆盖存储中的任何内容。`filter`属性是我们需要这种能力的原因。
- en: The second argument is a function that returns action creator functions as `props`.
    The `dispatch()` function is how these action creator functions are able to deliver
    payloads to the store. For example, the `toggleArticle()` function is a call directly
    to `dispatch()`, and is called in response to the user clicking the article title.
    However, the `fetchingArticles()` call involves asynchronous behavior. This means
    that `dispatch()` isn't called until the `fetch()` promise resolves. It's up to
    you to make sure that nothing unexpected happens in between.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是一个函数，它将动作创建函数作为`props`返回。`dispatch()`函数是这些动作创建函数能够向存储传递有效负载的方式。例如，`toggleArticle()`函数直接调用了`dispatch()`，并且是响应用户点击文章标题时调用的。然而，`fetchingArticles()`调用涉及异步行为。这意味着直到`fetch()`承诺解决之前，`dispatch()`才会被调用。您需要确保在此期间不会发生意外情况。
- en: 'Let''s wrap things up by looking at the reducer function used with the `Home`
    component:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看与`Home`组件一起使用的reducer函数来结束这些内容：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The same technique of using a type map to change state based on the action type
    is used here. Once again, this code is easy to reason about, yet everything that
    can change in the system is explicit.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里也使用了使用类型映射根据操作类型改变状态的相同技术。再次强调，这段代码易于理解，但系统中可以发生变化的所有内容都是明确的。
- en: State in mobile apps
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用中的状态
- en: What about using Redux in React Native mobile apps? Of course you should, if
    you're developing the same application for the web and for native platforms. In
    fact, I've implemented `Neckbeard News` in React Native for both iOS and Android.
    I encourage you to download the code for this book and get this application running
    for both web and native mobile.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在React Native移动应用中使用Redux怎么样？当然应该，如果您正在为Web和原生平台开发相同的应用程序。事实上，我已经在React Native中为iOS和Android都实现了`Neckbeard
    News`。我鼓励您下载本书的代码，并让这个应用程序在Web和原生移动设备上运行。
- en: 'There really is no difference in how you actually use Redux in a mobile app.
    The only difference is in the shape of state that''s used. In other words, don''t
    think that you can use the exact same Redux store and reducer functions in the
    web and native versions of your app. Think about React Native components. There''s
    no one-size-fits-all component for many things. You have some components that
    are optimized for the iOS platform while others are optimized for the Android
    platform. It''s the same idea with Redux state. Here''s what the initial state
    looks like for mobile `Neckbeard News`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动应用中，实际上使用Redux并没有什么不同。唯一的区别在于所使用的状态的形状。换句话说，不要认为你可以在网页和原生应用的版本中使用完全相同的Redux存储和减速器函数。想想React
    Native组件。许多事情并没有一种大小适合所有的组件。你有一些组件针对iOS平台进行了优化，而其他一些则针对Android平台进行了优化。Redux状态也是同样的道理。以下是移动应用“Neckbeard
    News”的初始状态：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, the same principles that apply in a Web context apply here in
    a mobile context. It's just the state itself that differs, in order to support
    the given components we're using and the unique ways that you're using them to
    implement your application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，适用于Web环境的相同原则在移动环境中同样适用。只是状态本身不同，以支持我们使用的特定组件以及你使用它们实现应用程序的独特方式。
- en: Scaling the architecture
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构的扩展
- en: By now, you probably have a pretty good hands on Flux concepts, the mechanisms
    of Redux, and how they're used to implement sound information architectures for
    React applications. The question then becomes, How sustainable is this approach,
    and can it handle arbitrarily large and complex applications?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能已经对Flux的概念、Redux的机制以及它们如何用于实现React应用程序的健全信息架构有了很好的掌握。那么问题就变成了，这种方法有多可持续，它能否处理任意大型和复杂的应用程序？
- en: I think Redux is a great way to implement large-scale React applications. You
    can predict what's going to happen as the result of any given action because everything
    is explicit. It's declarative. It's unidirectional and without side effects. But
    it isn't without challenges.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Redux是实现大规模React应用程序的好方法。你可以预测任何给定操作的结果，因为一切都是明确的。它是声明式的。它是单向的，没有副作用。但它并非没有挑战。
- en: The limiting factor with Redux is also its bread and butter; because everything
    is explicit, applications that need to scale up, in terms of feature count and
    complexity, ultimately end up with more moving parts. There's nothing wrong with
    this; it's just the nature of the game. The unavoidable consequence of scaling
    up is slowing down. You simply cannot grasp enough of the big picture in order
    to implement things quickly.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Redux的限制因素也是它的核心；因为一切都是明确的，需要扩展功能数量和复杂性的应用程序最终会有更多的移动部分。这并没有什么错；这只是游戏的本质。扩展的不可避免后果是减速。你简单地无法把握足够的全局图景来快速实现事情。
- en: 'In the final two chapters of this book, we''re going to look at a related but
    different approach to Flux: Relay/GraphQL. I think this technology can scale in
    ways that Redux cannot.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后两章中，我们将研究与Flux相关但不同的方法：Relay/GraphQL。我认为这种技术可以以Redux无法做到的方式扩展。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about Flux, a set of architectural patterns that
    aid in building information architecture for your React application. The key ideas
    with Flux involve unidirectional data flow, synchronous update rounds, and predictable
    state transformations.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了Flux，一组有助于构建React应用程序信息架构的架构模式。Flux的关键思想包括单向数据流、同步更新轮和可预测的状态转换。
- en: Next, I walked through a detailed implementation of a Redux / React application.
    Redux provides a simplified implementation of Flux ideas. The benefit is predictability
    everywhere.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将详细介绍Redux / React应用程序的实现。Redux提供了Flux思想的简化实现。好处是无论何时都能预测。
- en: Then, you learned whether or not Redux has what it takes to build scalable architectures
    for our React applications. The answer is yes, for the most part. For the remainder
    of this book, however, you're going to explore Relay and GraphQL to see whether these
    technologies can scale your applications to the next level.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将了解Redux是否具备构建可扩展架构的React应用程序所需的条件。答案大多数情况下是肯定的。然而，在本书的其余部分，您将探索Relay和GraphQL，以查看这些技术是否能将您的应用程序提升到下一个水平。
- en: Test your knowledge
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: Which of the following best describes Flux?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪种最能描述Flux？
- en: Flux is an architectural pattern used to augment the properties of DOM elements,
    making it easier to get API data into your HTML.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flux是一种用于增强DOM元素属性的架构模式，使得更容易将API数据传入HTML中。
- en: Flux is an architectural pattern used to control the unidirectional flow of
    data in your app, making changes more predictable.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flux是一种用于控制应用程序中数据单向流动的架构模式，使变化更加可预测。
- en: Flux is a library that handles all of your application state for you.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flux是一个处理应用程序状态的库。
- en: What's the difference between Flux and Redux?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flux和Redux之间有什么区别？
- en: There is no difference, they both represent the same architectural pattern.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有区别，它们都代表相同的架构模式。
- en: Flux is the official way to handle state in React components whereas Redux is
    something to avoid.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flux是处理React组件状态的官方方式，而Redux是要避免的东西。
- en: Redux is an opinionated implementation of Flux concepts that you can use to
    help manage data flow in your application.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Redux是Flux概念的一种有主见的实现，可以帮助管理应用程序中的数据流。
- en: How do you get data from a Redux store into your components?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将数据从Redux存储库传递到组件？
- en: You use the `connect()` higher-order function to connection your component to
    the store, using a function that translates store data into component properties.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用`connect()`高阶函数将组件连接到存储库，使用将存储库数据转换为组件属性的函数。
- en: You extend `Redux.Component` to automatically have state from the Redux store
    set on your component.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以扩展`Redux.Component`以自动在组件上设置来自Redux存储库的状态。
- en: You can access state at any time from the global `store` object.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以随时从全局`store`对象访问状态。
- en: What's the difference between Redux in a web app and a native mobile app?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Redux在Web应用程序和原生移动应用程序之间有什么区别？
- en: There's a specific `redux-react-native` package that you should use.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一个特定的`redux-react-native`包，你应该使用它。
- en: There is no difference.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有区别。
- en: Further reading
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information, check out the following links:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请查看以下链接：
- en: '[https://redux.js.org/](https://redux.js.org/)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://redux.js.org/](https://redux.js.org/)'
- en: '[https://facebook.github.io/flux/](https://facebook.github.io/flux/)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/flux/](https://facebook.github.io/flux/)'
