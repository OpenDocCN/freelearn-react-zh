- en: Building a Backend with MongoDB, Express, and Node
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB、Express和Node构建后端
- en: During the development of most web applications, there are common tasks, basic
    features, and implementation code repeated across the process. The same is true
    for the MERN applications developed in this book. Taking these similarities into
    consideration, we will first lay the foundations for a skeleton MERN application
    that can be easily modified and extended to implement a variety of MERN applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数Web应用程序的开发过程中，存在常见任务、基本功能和实现代码的重复。这本书中开发的MERN应用程序也是如此。考虑到这些相似之处，我们将首先为一个骨架MERN应用程序奠定基础，该应用程序可以轻松修改和扩展，以实现各种MERN应用程序。
- en: 'In this chapter, we will cover the following topics and start with the backend
    implementation of the MERN skeleton, using Node, Express, and MongoDB:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题，并从MERN骨架的后端实现开始，使用Node、Express和MongoDB：
- en: User CRUD and auth in a MERN application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MERN应用程序中的用户CRUD和auth
- en: Handling HTTP requests with an Express server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Express服务器处理HTTP请求
- en: Using a Mongoose schema for a user model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mongoose模式进行用户模型
- en: APIs for user CRUD and auth
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户CRUD和auth的API
- en: Auth with JWT for protected routes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用JWT进行受保护路由的身份验证
- en: Running backend code and checking APIs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行后端代码并检查API
- en: Skeleton application overview
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 骨架应用程序概述
- en: The skeleton application will encapsulate rudimentary features and a workflow
    repeated for most MERN applications. We will build the skeleton essentially as
    a basic but fully functioning MERN web application with user **cr**eate, **u**pdate,
    **d**elete (**CRUD**), and **auth**entication-**auth**orization (**auth**) capabilities,
    which will also lay out how to develop, organize, and run code for general web
    applications built using this stack. The aim is to keep the skeleton as simple
    as possible so it is easy to extend, and can be used as a base application for
    developing different MERN applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 骨架应用程序将封装基本功能和一个在大多数MERN应用程序中重复的工作流程。我们将构建骨架本质上作为一个基本但完全功能的MERN Web应用程序，具有用户创建（CRUD）和身份验证-授权（auth）功能，这也将展示如何开发、组织和运行使用这个堆栈构建的一般Web应用程序的代码。目标是保持骨架尽可能简单，以便易于扩展，并可用作开发不同MERN应用程序的基础应用程序。
- en: Feature breakdown
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能分解
- en: 'In the skeleton application, we will add the following use cases with user
    CRUD and auth functionality implementations:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在骨架应用程序中，我们将添加以下用例，其中包括用户CRUD和auth功能的实现：
- en: '**Sign up**: Users can register by creating a new account using an email address'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册**：用户可以通过使用电子邮件地址注册创建新帐户'
- en: '**User list**: Any visitor can see the list of all registered users'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户列表**：任何访问者都可以看到所有注册用户的列表'
- en: '**Authentication**: Registered users can sign in and sign out'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证**：注册用户可以登录和退出'
- en: '**Protected user profile**: Only registered users can view individual user
    details after signing in'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**受保护的用户资料**：只有注册用户可以在登录后查看个人用户详细信息'
- en: '**Authorized user edit and delete**: Only a registered and authenticated user
    can edit or remove their own user account details'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权用户编辑和删除**：只有注册和经过身份验证的用户才能编辑或删除自己的用户帐户详细信息'
- en: Focus of this chapter – the backend
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章重点-后端
- en: In this chapter, we will focus on building a working backend for the skeleton
    application with Node, Express, and MongoDB. The completed backend will be a standalone
    server-side application that can handle HTTP requests to create a user, list all
    users, and view, update, or delete a user in the database while taking user authentication
    and authorization into consideration.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于使用Node、Express和MongoDB构建骨架应用程序的工作后端。完成的后端将是一个独立的服务器端应用程序，可以处理HTTP请求以创建用户、列出所有用户，并在考虑用户身份验证和授权的情况下查看、更新或删除数据库中的用户。
- en: User model
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户模型
- en: 'The user model will define user details to be stored in the MongoDB database,
    and also handle user-related business logic such as password encryption and user
    data validation. The user model for this skeletal version will be basic with support
    for the following attributes:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 用户模型将定义要存储在MongoDB数据库中的用户详细信息，并处理与用户相关的业务逻辑，如密码加密和用户数据验证。这个骨架版本的用户模型将是基本的，支持以下属性：
- en: '| **Field name** | **Type** | **Description** |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **字段名称** | **类型** | **描述** |'
- en: '| `name` | String | Required field to store user''s name |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `name` | String | 存储用户姓名的必需字段 |'
- en: '| `email` | String | Required unique field to store user''s email and identify
    each account (only one account allowed per unique email) |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `email` | String | 必需的唯一字段，用于存储用户的电子邮件并标识每个帐户（每个唯一电子邮件只允许一个帐户） |'
- en: '| `password` | String | Required field for authentication, the database will
    store the encrypted password and not the actual string for security purposes |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `password` | String | 用于身份验证的必需字段，数据库将存储加密后的密码而不是实际字符串，以确保安全性 |'
- en: '| `created` | Date | Automatically generated timestamp when a new user account
    is created |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `created` | Date | 当创建新用户帐户时自动生成的时间戳 |'
- en: '| `updated` | Date | Automatically generated timestamp when existing user details
    are updated |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `updated` | Date | 当现有用户详细信息更新时自动生成的时间戳 |'
- en: API endpoints for user CRUD
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户CRUD的API端点
- en: 'To enable and handle user CRUD operations on the user database, the backend
    will implement and expose API endpoints that the frontend can utilize in the views,
    as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在用户数据库上启用和处理用户CRUD操作，后端将实现并公开API端点，供前端在视图中使用，如下所示：
- en: '| **Operation** | **API route** | **HTTP method** |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| **操作** | **API路由** | **HTTP方法** |'
- en: '| Create a user | `/api/users` | `POST` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 创建用户 | `/api/users` | `POST` |'
- en: '| List all users | `/api/users` | `GET` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 列出所有用户 | `/api/users` | `GET` |'
- en: '| Fetch a user | `/api/users/:userId` | `GET` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 获取用户 | `/api/users/:userId` | `GET` |'
- en: '| Update a user | `/api/users/:userId` | `PUT` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 更新用户 | `/api/users/:userId` | `PUT` |'
- en: '| Delete a user | `/api/users/:userId` | `DELETE` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 删除用户 | `/api/users/:userId` | `DELETE` |'
- en: '| User sign-in | `/auth/signin` | `POST` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 用户登录 | `/auth/signin` | `POST` |'
- en: '| User sign-out (optional) | `/auth/signout` | `GET` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 用户退出登录（可选） | `/auth/signout` | `GET` |'
- en: Some of these user CRUD operations will have protected access, which will require
    the requesting client to be either authenticated, authorized, or both. The last
    two routes are for authentication and will allow the user to sign in and sign
    out.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些用户CRUD操作将具有受保护的访问权限，这将要求请求的客户端进行身份验证、授权或两者都要求。最后两个路由用于身份验证，将允许用户登录和退出登录。
- en: Auth with JSON Web Tokens
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSON Web Tokens进行身份验证
- en: To restrict and protect access to the user API endpoints according to the skeleton
    features, the backend will need to incorporate authentication and authorization
    mechanisms. There are a number of options when it comes to implementing user auth
    for web applications. The most common and time tested option is the use of sessions
    to store user state on both the client and server side. But a newer approach is
    the use of **JSON Web Token** (**JWT**) as a stateless authentication mechanism
    that does not require storing user state on the server side.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了根据骨架特性限制和保护对用户API端点的访问，后端需要整合身份验证和授权机制。在实现Web应用程序的用户身份验证时有许多选择。最常见和经过时间考验的选项是使用会话在客户端和服务器端存储用户状态。但是，一种较新的方法是使用**JSON
    Web Token**（**JWT**）作为无状态身份验证机制，不需要在服务器端存储用户状态。
- en: Both approaches have strengths for relevant real-world use cases. However, for
    the purpose of keeping the code simple in this book, and because it pairs well
    with the MERN stack and our example applications, we will use JWT for auth implementation.
    Additionally, the book will also suggest security enhancement options in future
    chapters.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法在相关的真实用例中都有优势。然而，为了简化本书中的代码，并且因为它与MERN堆栈和我们的示例应用程序配合得很好，我们将使用JWT进行身份验证实现。此外，本书还将在未来章节中提出安全增强选项。
- en: How JWT works
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JWT的工作原理
- en: 'When a user successfully signs in using their credentials, the server side
    generates a JWT signed with a secret key and a unique user detail. Then, this
    token is returned to the requesting client to be saved locally either in `localStorage`,
    `sessionStorage`, or a cookie in the browser, essentially handing over the responsibility
    of maintaining user state to the client side:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户成功使用其凭据登录时，服务器端会生成一个使用秘钥和唯一用户详细信息签名的JWT。然后，将此令牌返回给请求的客户端，以便在本地保存，可以保存在`localStorage`、`sessionStorage`或浏览器的cookie中，从根本上将维护用户状态的责任交给客户端：
- en: '![](assets/fd35db0d-22fd-4aa9-8206-3e51089ada4d.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fd35db0d-22fd-4aa9-8206-3e51089ada4d.png)'
- en: 'For HTTP requests made following a successful sign-in, specially requests for
    API endpoints that are protected and have restricted access, the client side has
    to attach this token to the request. More specifically, the `JSON Web Token` must
    be included in the request `Authorization` header as a `Bearer`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于成功登录后进行的HTTP请求，特别是对受保护且具有受限访问权限的API端点的请求，客户端必须将此令牌附加到请求中。更具体地说，`JSON Web Token`必须包含在请求的`Authorization`头部中作为`Bearer`：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When the server receives a request for a protected API endpoint, it checks the
    `Authorization` header of the request for a valid JWT, then verifies the signature
    to identify the sender and ensures the request data was not corrupted. If the
    token is valid, the requesting client is given access to the associated operation
    or resource, otherwise an authorization error is returned.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器收到对受保护的API端点的请求时，它会检查请求的`Authorization`头部是否包含有效的JWT，然后验证签名以识别发送者，并确保请求数据未被损坏。如果令牌有效，则请求的客户端将被授予对关联操作或资源的访问权限，否则将返回授权错误。
- en: In the skeleton application, when a user signs in with email and password, the
    backend will generate a signed JWT with the user's ID and with a secret key available
    only on the server. This token will then be required for verification when a user
    tries to view any user profiles, update their account details, or delete their
    user account.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在骨架应用程序中，当用户使用电子邮件和密码登录时，后端将使用仅在服务器上可用的秘钥生成带有用户ID的签名JWT。然后，当用户尝试查看任何用户配置文件、更新其帐户详细信息或删除其用户帐户时，将需要此令牌进行验证。
- en: Implementing the user model to store and validate user data, then integrating
    it with APIs to perform CRUD operations based on auth with JWT, will produce a
    functioning standalone backend. In the rest of the chapter, we will look at how
    to achieve this in the MERN stack and setup.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 实现用户模型来存储和验证用户数据，然后将其与API集成以基于JWT执行CRUD操作，将产生一个功能齐全的独立后端。在本章的其余部分，我们将看看如何在MERN堆栈和设置中实现这一点。
- en: Implementing the skeleton backend
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现骨架后端
- en: To start developing the backend part of the MERN skeleton, we will first set
    up the project folder, install and configure the necessary npm modules, and then
    prepare the run scripts to aid development and run the code. Then, we will go
    through the code step by step to implement the user model, API endpoints, and
    JWT-based auth to meet the specifications we defined earlier for the user-oriented
    features.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始开发MERN骨架的后端部分，我们将首先设置项目文件夹，安装和配置必要的npm模块，然后准备运行脚本以帮助开发和运行代码。然后，我们将逐步通过代码实现用户模型、API端点和基于JWT的身份验证，以满足我们之前为面向用户的功能定义的规范。
- en: The code discussed in this chapter, and for the complete skeleton application
    is available on GitHub in the repository at [github.com/shamahoque/mern-skeleton](https://github.com/shamahoque/mern-skeleton). The
    code for just the backend is available at the same repository in the branch named
    `mern-skeleton-backend`. You can clone this code and run the application as you
    go through the code explanations in the rest of this chapter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的代码以及完整的骨架应用程序的代码可在GitHub的存储库[github.com/shamahoque/mern-skeleton](https://github.com/shamahoque/mern-skeleton)中找到。仅后端的代码可在同一存储库的名为`mern-skeleton-backend`的分支中找到。您可以克隆此代码，并在阅读本章其余部分的代码解释时运行应用程序。
- en: Folder and file structure
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件夹和文件结构
- en: 'The following folder structure only shows the files that are relevant for the
    MERN skeleton backend. With these files, we will produce a functioning, standalone
    server-side application:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下文件夹结构仅显示与MERN骨架后端相关的文件。有了这些文件，我们将生成一个功能齐全的独立服务器端应用程序：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This structure will be further expanded in the next chapter, where we complete
    the skeleton application by adding a `React` frontend.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结构将在下一章进一步扩展，在那里我们通过添加`React`前端来完成骨架应用程序。
- en: Setting up the project
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目设置
- en: If the development environment is already set up, we can initialize the MERN
    project to start developing the backend. First, we will initialize `package.json`
    in the project folder, configure and install development dependencies, set configuration
    variables to be used in the code, and update `package.json` with run scripts to
    help develop and run the code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开发环境已经设置好，我们可以初始化MERN项目以开始开发后端。首先，我们将在项目文件夹中初始化`package.json`，配置和安装开发依赖项，设置用于代码的配置变量，并更新`package.json`以帮助开发和运行代码的运行脚本。
- en: Initializing package.json
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化`package.json`
- en: We will need a `package.json` file to store meta information about the project,
    list the module dependencies with version numbers, and to define run scripts.
    To initialize a `package.json` file in the project folder, go to the project folder
    from the command line and run `npm init`, then follow the instructions to add
    the necessary details. With `package.json` created, we can proceed with setup
    and development, and update the file as more modules are required throughout code
    implementation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个`package.json`文件来存储有关项目的元信息，列出模块依赖项及其版本号，并定义运行脚本。要在项目文件夹中初始化`package.json`文件，请从命令行转到项目文件夹并运行`npm
    init`，然后按照说明添加必要的细节。有了`package.json`文件后，我们可以继续设置和开发，并在代码实现过程中根据需要更新文件。
- en: Development dependencies
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发依赖项
- en: In order to begin with development and to run the backend server code, we will
    configure and install Babel, Webpack, and Nodemon as discussed in [Chapter 2](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml)*,*
    *Preparing the Development Environment*, with some minor adjustments for just
    the backend.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始开发并运行后端服务器代码，我们将配置和安装Babel、Webpack和Nodemon，如[第2章](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml)中所讨论的那样，对于仅后端，进行一些微小的调整。
- en: Babel
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Babel
- en: Since we will be using ES6 to write the backend code, we will configure and
    install Babel modules to convert ES6.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用ES6编写后端代码，我们将配置和安装Babel模块来转换ES6。
- en: First, we configure Babel in the `.babelrc` file with presets for the latest
    JS features and some stage-x features not currently covered under `babel-preset-env`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`.babelrc`文件中配置Babel，使用最新JS特性的预设和一些目前未在`babel-preset-env`下覆盖的stage-x特性。
- en: '`mern-skeleton/.babelrc`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/.babelrc`：'
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we install the Babel modules as `devDependencies` from the command line:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从命令行安装Babel模块作为`devDependencies`：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once the module installations are done, you will notice that the `devDependencies`
    list has been updated in the `package.json` file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模块安装完成，您会注意到`package.json`文件中的`devDependencies`列表已更新。
- en: Webpack
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack
- en: We will need Webpack to compile and bundle the server-side code using Babel,
    and for configuration we can use the same `webpack.config.server.js` discussed
    in [Chapter 2](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml), *Preparing the Development
    Environment*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要Webpack使用Babel编译和捆绑服务器端代码，并且对于配置，我们可以使用在[第2章](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml)中讨论的相同的`webpack.config.server.js`。
- en: 'From the command line, run the following command to install `webpack`, `webpack-cli`,
    and the `webpack-node-externals` module:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行运行以下命令来安装`webpack`，`webpack-cli`和`webpack-node-externals`模块：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will install the Webpack modules and update the `package.json` file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装Webpack模块并更新`package.json`文件。
- en: Nodemon
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nodemon
- en: To automatically restart the Node server as we update the code during development,
    we will use Nodemon to monitor the server code for changes. We can use the same
    installation and configuration guidelines discussed in [Chapter 2](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml),
    *Preparing the Development Environment*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在开发过程中更新代码时自动重新启动Node服务器，我们将使用Nodemon来监视服务器代码的更改。我们可以使用与[第2章](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml)中讨论的相同的安装和配置指南，*准备开发环境*。
- en: Config variables
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置变量
- en: In the `config/config.js` file, we will define some server-side configuration
    related variables that will be used in the code, but should not be hardcoded as
    a best practice, as well as for security purposes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在`config/config.js`文件中，我们将定义一些与服务器端配置相关的变量，这些变量将在代码中使用，但不应作为最佳实践硬编码，也是出于安全目的。
- en: '`mern-skeleton/config/config.js`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/config/config.js`：'
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The config variables defined are:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 定义的配置变量有：
- en: '`env`: To differentiate between development and production mode'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env`：区分开发和生产模式'
- en: '`port`: To define the listening port for the server'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`端口`：定义服务器的监听端口'
- en: '`jwtSecret`: The secret key to be used to sign JWT'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jwtSecret`：用于签署JWT的秘钥'
- en: '`mongoUri`: The location of the MongoDB database for the project'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mongoUri`：项目的MongoDB数据库位置'
- en: Running scripts
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行脚本
- en: To run the server as we develop the code for only the backend, we can start
    with the `npm run development` script in the `package.json` file. For the complete
    skeleton application, we will use the same run scripts defined in [Chapter 2](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml),
    *Preparing the Development Environment*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在开发后端代码时运行服务器，我们可以从`package.json`文件中的`npm run development`脚本开始。对于完整的骨架应用程序，我们将使用[第2章](844f64fb-8fc2-47a1-94a4-dea6bc8f5665.xhtml)中定义的相同的运行脚本，*准备开发环境*。
- en: '`mern-skeleton/package.json`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/package.json`：'
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`npm run development`: Running this in the command line from your project folder
    will basically start Nodemon according to the configuration in `nodemon.js`. The
    configuration instructs Nodemon to monitor the server files for updates, and on
    update to build the files again, then restart the server so the changes are immediately
    available.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm run development`：从项目文件夹的命令行中运行此命令基本上会根据`nodemon.js`中的配置启动Nodemon。配置指示Nodemon监视服务器文件的更新，并在更新时重新构建文件，然后重新启动服务器，以便立即使用更改。'
- en: Preparing the server
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备服务器
- en: In this section, we will integrate Express, Node, and MongoDB to run a completely
    configured server before we start implementing the user specific features.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将集成Express、Node和MongoDB，以在开始实现特定于用户的功能之前运行完全配置的服务器。
- en: Configuring Express
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Express
- en: To use Express, we will first install Express, then add and configure it in
    the `server/express.js` file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Express，我们将首先安装Express，然后在`server/express.js`文件中添加和配置它。
- en: 'From the command line, run the following command to install the `express` module with
    the `--save` flag, so the `package.json` file is automatically updated:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行运行以下命令来安装带有`--save`标志的`express`模块，以便`package.json`文件会自动更新：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once Express is installed, we can import it into the `express.js` file, configure
    as required, and make it available to the rest of the app.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Express安装完成，我们可以将其导入到`express.js`文件中，并根据需要进行配置，并使其对整个应用程序可用。
- en: '`mern-skeleton/server/express.js`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/express.js`：'
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To handle HTTP requests and serve responses properly, we will use the following
    modules to configure Express:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确处理HTTP请求并提供响应，我们将使用以下模块来配置Express：
- en: '`body-parser`: Body parsing middleware to handle the complexities of parsing
    streamable request objects, so we can simplify browser-server communication by
    exchanging JSON in the request body:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body-parser`：用于处理流式请求对象解析复杂性的主体解析中间件，以便我们可以通过在请求主体中交换JSON来简化浏览器-服务器通信：'
- en: 'Install the `body-parser` module: `npm install body-parser --save`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`body-parser`模块：`npm install body-parser --save`
- en: 'Configure Express: `bodyParser.json()` and `bodyParser.urlencoded({ extended:
    true })`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '配置Express：`bodyParser.json()`和`bodyParser.urlencoded({ extended: true })`'
- en: '`cookie-parser`: Cookie parsing middleware to parse and set cookies in request
    objects:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cookie-parser`：用于解析和设置请求对象中的cookie的cookie解析中间件：'
- en: 'Install the `cookie-parser` module: `npm install cookie-parser --save`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`cookie-parser`模块：`npm install cookie-parser --save`
- en: '`compression`: Compression middleware that will attempt to compress response
    bodies for all requests that traverse through the middleware:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`压缩`：压缩中间件，将尝试压缩所有通过中间件传递的请求的响应主体：'
- en: 'Install the `compression` module: `npm install compression --save`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`compression`模块：`npm install compression --save`
- en: '`helmet`: A collection of middleware functions to help secure Express apps
    by setting various HTTP headers:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`头盔`：一组中间件函数，通过设置各种HTTP头部来帮助保护Express应用程序：'
- en: 'Install the `helmet` module: `npm install helmet --save`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`头盔`模块：`npm install helmet --save`
- en: '`cors`: Middleware to enable **CORS** (**Cross-origin resource sharing**):'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cors`：中间件以启用**CORS**（**跨源资源共享**）：'
- en: Install the `cors` module: `npm install cors --save`
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`cors`模块：`npm install cors --save`
- en: After the preceding modules are installed, we can update `express.js` to import
    these modules and configure the Express app before exporting it for use in the
    rest of the server code.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了上述模块之后，我们可以更新`express.js`来导入这些模块并在导出到服务器其余代码中使用之前配置Express应用程序。
- en: 'The updated `mern-skeleton/server/express.js` code should be as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的`mern-skeleton/server/express.js`代码应该如下所示：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Starting the server
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动服务器
- en: With the Express app configured to accept HTTP requests, we can go ahead and
    use it to implement the server to listen for incoming requests.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通过配置Express应用程序来接受HTTP请求，我们可以继续使用它来实现服务器以监听传入的请求。
- en: 'In the `mern-skeleton/server/server.js` file, add the following code to implement
    the server:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mern-skeleton/server/server.js`文件中，添加以下代码来实现服务器：
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We first import the config variables to set the port number that the server
    will listen on, and then the configured Express app to start the server.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入配置变量来设置服务器将监听的端口号，然后配置Express应用程序以启动服务器。
- en: To get this code running and continue development, you can now run `npm run
    development` from the command line. If the code has no errors, the server should
    start running with Nodemon monitoring for code changes.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此代码运行并继续开发，现在可以从命令行运行`npm run development`。如果代码没有错误，服务器应该开始运行，并且Nodemon会监视代码更改。
- en: Setting up Mongoose and connecting to MongoDB
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Mongoose并连接到MongoDB
- en: We will be using the `Mongoose` module to implement the user model in this skeleton,
    and also all future data models for our MERN applications. Here, we will start
    by configuring Mongoose, and utilizing it to define a connection with the MongoDB
    database.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`Mongoose`模块来在此骨架中实现用户模型，以及我们MERN应用程序的所有未来数据模型。在这里，我们将首先配置Mongoose，并利用它来定义与MongoDB数据库的连接。
- en: 'First, to install the `mongoose` module, run the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，要安装`mongoose`模块，请运行以下命令：
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Then, update the `server.js` file to import the `mongoose` module, configure
    it to use native ES6 promises, and finally use it to handle the connection to
    the MongoDB database for the project.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，更新`server.js`文件以导入`mongoose`模块，配置它以使用原生的ES6 promises，并最终使用它来处理与项目的MongoDB数据库的连接。
- en: '`mern-skeleton/server/server.js`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/server.js`：'
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you have the code running in development, saving this update should restart
    the server that is now integrated with Mongoose and MongoDB.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在开发中运行代码，则保存此更新应重新启动现在已集成了Mongoose和MongoDB的服务器。
- en: Mongoose is a MongoDB object modeling tool that provides a schema-based solution
    to model application data. It includes built-in type casting, validation, query
    building, and business logic hooks. Using Mongoose with this backend stack provides
    a higher layer over MongoDB with more functionality including mapping object models
    to database documents. Thus, making it simpler and more productive to develop
    with a Node and MongoDB backend. To learn more about Mongoose, visit [mongoosejs.com](http://mongoosejs.com).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Mongoose是一个MongoDB对象建模工具，它提供了基于模式的解决方案来对应用程序数据进行建模。它包括内置的类型转换、验证、查询构建和业务逻辑钩子。在此后端堆栈中使用Mongoose提供了对MongoDB的更高层次的功能，包括将对象模型映射到数据库文档。因此，使用Node和MongoDB后端进行开发变得更简单和更高效。要了解有关Mongoose的更多信息，请访问[mongoosejs.com](http://mongoosejs.com)。
- en: Serving an HTML template at a root URL
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在根URL上提供HTML模板
- en: With a Node, Express, and MongoDB enabled server now running, we can extend
    it to serve an HTML template in response to an incoming request at the root URL
    `/`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，具有Node、Express和MongoDB功能的服务器正在运行，我们可以扩展它以响应根URL`/`的传入请求并提供HTML模板。
- en: In the `template.js` file, add a JS function that returns a simple HTML document
    that will render `Hello World` on the browser screen.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在`template.js`文件中，添加一个JS函数，该函数返回一个简单的HTML文档，该文档将在浏览器屏幕上呈现`Hello World`。
- en: '`mern-skeleton/template.js`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/template.js`：'
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To serve this template at the root URL, update the `express.js` file to import
    this template, and send it in the response to a GET request for the `'/'` route.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要在根URL上提供此模板，请更新`express.js`文件以导入此模板，并在对`'/'`路由的GET请求的响应中发送它。
- en: '`mern-skeleton/server/express.js`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/express.js`：'
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With this update, opening the root URL in a browser should show Hello World
    rendered on the page.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个更新，在浏览器中打开根URL应该显示“Hello World”在页面上呈现。
- en: If you are running the code on your local machine, the root URL will be `http://localhost:3000/`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在本地机器上运行代码，根URL将是`http://localhost:3000/`。
- en: User model
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户模型
- en: We will implement the user model in the `server/models/user.model.js` file,
    using Mongoose to define the schema with the necessary user data fields, to add
    built-in validation for the fields and to incorporate business logic such as password
    encryption, authentication, and custom validation.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`server/models/user.model.js`文件中实现用户模型，使用Mongoose来定义包含必要用户数据字段的模式，为字段添加内置验证，并整合密码加密、认证和自定义验证等业务逻辑。
- en: We will begin by importing the `mongoose` module and use it to generate a `UserSchema`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先导入`mongoose`模块，并使用它来生成一个`UserSchema`。
- en: '`mern-skeleton/server/models/user.model.js`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/models/user.model.js`:'
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `mongoose.Schema()` function takes a schema definition object as a parameter
    to generate a new Mongoose schema object that can be used in the rest of the backend
    code.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`mongoose.Schema()`函数以模式定义对象作为参数，生成一个新的Mongoose模式对象，可以在后端代码的其余部分中使用。'
- en: User schema definition
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户模式定义
- en: The user schema definition object needed to generate the new Mongoose schema
    will declare all the user data fields and associated properties.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 生成新的Mongoose模式所需的用户模式定义对象将声明所有用户数据字段和相关属性。
- en: Name
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 名称
- en: The `name` field is a required field of type `String`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: “name”字段是一个必填字段，类型为“String”。
- en: '`mern-skeleton/server/models/user.model.js`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/models/user.model.js`:'
- en: '[PRE17]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Email
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件
- en: The `email` field is a required field of type `String`, which must match a valid
    email format and must also be `unique` in the user collection.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`email`字段是一个必填字段，类型为`String`，必须匹配有效的电子邮件格式，并且在用户集合中也必须是“唯一”的。'
- en: '`mern-skeleton/server/models/user.model.js`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/models/user.model.js`:'
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Created and updated timestamps
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和更新时间戳
- en: The fields `created` and `updated` are `Date` values that will be programmatically
    generated to record timestamps for a user being created and updated.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`created`和`updated`字段是`Date`值，将被程序生成以记录用户创建和更新的时间戳。'
- en: '`mern-skeleton/server/models/user.model.js`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/models/user.model.js`:'
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Hashed password and salt
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希密码和盐
- en: The `hashed_password` and `salt` fields represent the encrypted user password
    that we will use for authentication.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`hashed_password`和`salt`字段代表我们将用于认证的加密用户密码。'
- en: '`mern-skeleton/server/models/user.model.js`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/models/user.model.js`:'
- en: '[PRE20]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The actual password string is not stored directly in the database for security
    purposes and is handled separately.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全目的，实际密码字符串不会直接存储在数据库中，而是单独处理。
- en: Password for auth
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于认证的密码
- en: The password field is very crucial for providing secure user authentication
    in any application, and it needs to be encrypted, validated, and authenticated
    securely as a part of the user model.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 密码字段对于在任何应用程序中提供安全用户认证非常重要，它需要作为用户模型的一部分进行加密、验证和安全认证。
- en: As a virtual field
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为虚拟字段
- en: The `password` string provided by the user is not stored directly in the user
    document. Instead, it is handled as a `virtual` field.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 用户提供的“password”字符串不会直接存储在用户文档中。相反，它被处理为一个“虚拟”字段。
- en: '`mern-skeleton/server/models/user.model.js`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/models/user.model.js`:'
- en: '[PRE21]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When the `password` value is received on user creation or update, it is encrypted
    into a new hashed value and set to the `hashed_password` field, along with the
    `salt` value in the `salt` field.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当在用户创建或更新时接收到`password`值时，它将被加密为一个新的哈希值，并设置为`hashed_password`字段，以及在`salt`字段中设置`salt`值。
- en: Encryption and authentication
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密和认证
- en: The encryption logic and salt generation logic, which are used to generate the
    `hashed_password` and `salt` values representing the `password` value, are defined
    as `UserSchema` methods.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 加密逻辑和盐生成逻辑，用于生成代表`password`值的`hashed_password`和`salt`值，被定义为`UserSchema`方法。
- en: '`mern-skeleton/server/models/user.model.js`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/models/user.model.js`：'
- en: '[PRE22]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Additionally, the `authenticate` method is also defined as a `UserSchema` method,
    which is used when a user supplied password must be authenticated for sign-in.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`authenticate`方法也被定义为`UserSchema`方法，用于在用户提供的密码必须进行验证以进行登录时使用。
- en: The `crypto` module in Node is used to encrypt the user-provided password string
    into a `hashed_password` with a randomly generated `salt` value. The `hashed_password`
    and the salt is stored in the user document when the user details are saved to
    the database on a create or update. Both the `hashed_password` and `salt` values
    are required in order to match and authenticate a password string provided during
    user sign-in, using the `authenticate` method defined previously.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Node中的`crypto`模块用于将用户提供的密码字符串加密为带有随机生成的`salt`值的`hashed_password`。当用户详细信息在创建或更新时保存到数据库中，`hashed_password`和salt将存储在用户文档中。在用户登录时，需要`hashed_password`和salt值来匹配和验证提供的密码字符串，使用之前定义的`authenticate`方法。
- en: Password field validation
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码字段验证
- en: To add validation constraints on the actual password string selected by the
    end user, we will need to add custom validation logic and associate it with the
    `hashed_password` field in the schema.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在最终用户选择的实际密码字符串上添加验证约束，我们需要添加自定义验证逻辑并将其与模式中的`hashed_password`字段关联起来。
- en: '`mern-skeleton/server/models/user.model.js`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/models/user.model.js`：'
- en: '[PRE23]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: To ensure that a password value is indeed provided, and has a length of at least
    six characters when a new user is created or existing password is updated, custom
    validation is added to check the password value before Mongoose attempts to store
    the `hashed_password` value. If validation fails, the logic will return the relevant
    error message.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保在创建新用户或更新现有密码时确实提供了密码值，并且长度至少为六个字符，我们添加了自定义验证以在Mongoose尝试存储`hashed_password`值之前检查密码值。如果验证失败，逻辑将返回相关的错误消息。
- en: Once the `UserSchema` is defined, and all the password related business logic
    is added as discussed previously, we can finally export the schema at the bottom
    of the `user.model.js` file, in order to use it in other parts of the backend
    code.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`UserSchema`被定义，并且所有与密码相关的业务逻辑都像之前讨论的那样被添加，我们最终可以在`user.model.js`文件的底部导出模式，以便在后端代码的其他部分中使用它。
- en: '`mern-skeleton/server/models/user.model.js`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/models/user.model.js`：'
- en: '[PRE24]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Mongoose error handling
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mongoose错误处理
- en: The validation constraints added to the user schema fields will throw error
    messages, if violated when user data is saved to the database. To handle these
    validation errors and other errors that the database may throw when we make queries
    to it, we will define a helper method to return a relevant error message that
    can be propagated in the request-response cycle as appropriate.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 向用户模式字段添加的验证约束将在将用户数据保存到数据库时引发错误消息。为了处理这些验证错误以及我们向数据库查询时可能引发的其他错误，我们将定义一个辅助方法来返回相关的错误消息，以便在请求-响应周期中适当地传播。
- en: We will add the `getErrorMessage` helper method in the `server/helpers/dbErrorHandler.js`
    file. This method will parse and return the error message associated with the
    specific validation error or other error that occurred while querying MongoDB
    using Mongoose.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`server/helpers/dbErrorHandler.js`文件中添加`getErrorMessage`辅助方法。该方法将解析并返回与使用Mongoose查询MongoDB时发生的特定验证错误或其他错误相关联的错误消息。
- en: '`mern-skeleton/server/helpers/dbErrorHandler.js`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/helpers/dbErrorHandler.js`：'
- en: '[PRE25]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Errors that are not thrown because of a Mongoose validator violation will contain
    an error code and in some cases need to be handled differently. For example, errors
    caused due to a violation of the unique constraint will return a different error
    object than Mongoose validation errors. The unique option is not a validator but
    a convenient helper for building MongoDB unique indexes, and thus we will add
    another `getUniqueErrorMessage` method to parse the unique constraint related
    error object and construct an appropriate error message.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 不是因为Mongoose验证器违规而抛出的错误将包含错误代码，并且在某些情况下需要以不同方式处理。例如，由于违反唯一约束而导致的错误将返回一个与Mongoose验证错误不同的错误对象。唯一选项不是验证器，而是用于构建MongoDB唯一索引的便捷助手，因此我们将添加另一个`getUniqueErrorMessage`方法来解析与唯一约束相关的错误对象，并构造适当的错误消息。
- en: '`mern-skeleton/server/helpers/dbErrorHandler.js`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/helpers/dbErrorHandler.js`：'
- en: '[PRE26]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: By using the `getErrorMessage` function exported from this helper file, we will
    add meaningful error messages when handling errors thrown by Mongoose operations
    performed for user CRUD.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用从此辅助文件导出的`getErrorMessage`函数，我们将在处理Mongoose执行的用户CRUD操作引发的错误时添加有意义的错误消息。
- en: User CRUD API
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户CRUD API
- en: The user API endpoints exposed by the Express app will allow the frontend to
    do CRUD operations on the documents generated according to the user model. To
    implement these working endpoints, we will write Express routes and corresponding
    controller callback functions that should be executed when HTTP requests come
    in for these declared routes. In this section, we will look at how these endpoints
    will work without any auth restrictions.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Express应用程序公开的用户API端点将允许前端对根据用户模型生成的文档执行CRUD操作。为了实现这些工作端点，我们将编写Express路由和相应的控制器回调函数，当这些声明的路由收到HTTP请求时应该执行这些函数。在本节中，我们将看看这些端点在没有任何身份验证限制的情况下如何工作。
- en: The user API routes will be declared using Express router in `server/routes/user.routes.js`,
    and then mounted on the Express app we configured in `server/express.js`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 用户API路由将在`server/routes/user.routes.js`中使用Express路由器声明，然后挂载到我们在`server/express.js`中配置的Express应用程序上。
- en: '`mern-skeleton/server/express.js`:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/express.js`：'
- en: '[PRE27]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: User routes
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户路由
- en: The user routes defined in the `user.routes.js` file will use `express.Router()`
    to declare the route paths with relevant HTTP methods, and assign the corresponding
    controller function that should be called when these requests are received by
    the server.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`user.routes.js`文件中定义的用户路由将使用`express.Router()`来声明具有相关HTTP方法的路由路径，并分配应该在服务器接收到这些请求时调用的相应控制器函数。'
- en: 'We will keep the user routes simple, by using the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下方式保持用户路由简单：
- en: '`/api/users` for:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/api/users`用于：'
- en: Listing users with GET
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GET列出用户
- en: Creating a new user with POST
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用POST创建新用户
- en: '`/api/users/:userId` for:'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/api/users/:userId`用于：'
- en: Fetching a user with GET
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GET获取用户
- en: Updating a user with PUT
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PUT更新用户
- en: Deleting a user with DELETE
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DELETE删除用户
- en: The resulting `user.routes.js` code will look as follows (without the auth considerations
    that need to be added for protected routes).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`user.routes.js`代码将如下所示（不包括需要为受保护的路由添加的身份验证考虑）。
- en: '`mern-skeleton/server/routes/user.routes.js`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/routes/user.routes.js`：'
- en: '[PRE28]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: User controller
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户控制器
- en: The `server/controllers/user.controller.js` file will contain the controller
    methods used in the preceding user route declarations as callbacks when a route
    request is received by the server.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`server/controllers/user.controller.js`文件将包含在前面的用户路由声明中使用的控制器方法，作为服务器接收到路由请求时的回调。'
- en: 'The `user.controller.js` file will have the following structure:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`user.controller.js`文件将具有以下结构：'
- en: '[PRE29]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The controller will make use of the `errorHandler` helper to respond to the
    route requests with meaningful messages when a Mongoose error occurs. It will
    also use a module called `lodash` when updating an existing user with changed
    values.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器将使用`errorHandler`助手来在Mongoose发生错误时响应路由请求并提供有意义的消息。在更新具有更改值的现有用户时，它还将使用一个名为`lodash`的模块。
- en: '`lodash` is a JavaScript library which provides utility functions for common
    programming tasks including manipulation of arrays and objects. To install `lodash`,
    run `npm install lodash --save` from command line.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`lodash`是一个JavaScript库，提供常见编程任务的实用函数，包括对数组和对象的操作。要安装`lodash`，请从命令行运行`npm install
    lodash --save`。'
- en: Each of the controller functions defined previously are related to a route request,
    and will be elaborated on in relation to each API use case.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 先前定义的每个控制器函数都与路由请求相关，并将根据每个API用例进行详细说明。
- en: Creating a new user
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新用户
- en: The API endpoint to create a new user is declared in the following route.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新用户的API端点在以下路由中声明。
- en: '`mern-skeleton/server/routes/user.routes.js`:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/routes/user.routes.js`：'
- en: '[PRE30]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: When the Express app gets a POST request at `'/api/users'`, it calls the `create`
    function defined in the controller.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当Express应用程序在`'/api/users'`处收到POST请求时，它会调用控制器中定义的`create`函数。
- en: '`mern-skeleton/server/controllers/user.controller.js`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/controllers/user.controller.js`：'
- en: '[PRE31]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This function creates a new user with the user JSON object received in the POST
    request from the frontend within `req.body`. The `user.save` attempts to save
    the new user into the database after Mongoose does a validation check on the data,
    consequently an error or success response is returned to the requesting client.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数使用从前端收到的用户JSON对象在`req.body`中创建新用户。`user.save`尝试在Mongoose对数据进行验证检查后将新用户保存到数据库中，因此将向请求的客户端返回错误或成功响应。
- en: Listing all users
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出所有用户
- en: The API endpoint to fetch all the users is declared in the following route.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 获取所有用户的API端点在以下路由中声明。
- en: '`mern-skeleton/server/routes/user.routes.js`:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/routes/user.routes.js`：'
- en: '[PRE32]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When the Express app gets a GET request at `'/api/users'`, it executes the `list`
    controller function.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 当Express应用程序在`'/api/users'`处收到GET请求时，它会执行`list`控制器函数。
- en: '`mern-skeleton/server/controllers/user.controller.js`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/controllers/user.controller.js`：'
- en: '[PRE33]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `list` controller function finds all the users from the database, populates
    only the name, email, created and updated fields in the resulting user list, and
    then returns this list of users as JSON objects in an array to the requesting
    client.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`控制器函数从数据库中找到所有用户，仅填充结果用户列表中的名称、电子邮件、创建和更新字段，然后将这些用户列表作为JSON对象数组返回给请求的客户端。'
- en: Loading a user by ID to read, update, or delete
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按ID加载用户以进行读取、更新或删除
- en: All three API endpoints for read, update, and delete require a user to be retrieved
    from the database based on the user ID of the user being accessed. We will program
    the Express router to do this action first before responding to the specific request
    to read, update, or delete.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 读取、更新和删除的所有三个API端点都需要根据正在访问的用户的用户ID从数据库中检索用户。在响应特定的读取、更新或删除请求之前，我们将编程Express路由器执行此操作。
- en: Loading
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载
- en: Whenever the Express app receives a request to a route that matches a path containing
    the `:userId` param in it, the app will first execute the `userByID` controller
    function before propagating to the `next` function specific to the request that
    came in.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 每当Express应用程序收到与路径中包含“:userId”参数匹配的路由的请求时，该应用程序将首先执行`userByID`控制器函数，然后传播到传入请求特定的`next`函数。
- en: '`mern-skeleton/server/routes/user.routes.js`:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/routes/user.routes.js`：'
- en: '[PRE34]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `userByID` controller function uses the value in the `:userId` param to
    query the database by `_id`, and load the matching user's details.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`userByID`控制器函数使用`:userId`参数中的值来查询数据库的`_id`，并加载匹配用户的详细信息。'
- en: '`mern-skeleton/server/controllers/user.controller.js`:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/controllers/user.controller.js`：'
- en: '[PRE35]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If a matching user is found in the database, the user object is appended to
    the request object in the `profile` key. Then, the `next()` middleware is used
    to propagate control to the next relevant controller function. For example, if
    the original request was to read a user profile, the `next()` call in `userById`
    would go to the `read` controller function.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在数据库中找到匹配的用户，则用户对象将附加到请求对象的`profile`键中。然后，使用`next()`中间件将控制传播到下一个相关的控制器函数。例如，如果原始请求是读取用户配置文件，则`userById`中的`next()`调用将转到`read`控制器函数。
- en: Reading
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读
- en: The API endpoint to read a single user's data is declared in the following route.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 声明了读取单个用户数据的API端点在以下路由中。
- en: '`mern-skeleton/server/routes/user.routes.js`:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/routes/user.routes.js`：'
- en: '[PRE36]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: When the Express app gets a GET request at `'/api/users/:userId'`, it executes
    the `userByID` controller function to load the user by the `userId` value in the
    param, and then the `read` controller function.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 当Express应用程序在`'/api/users/:userId'`接收到GET请求时，它执行`userByID`控制器函数，通过参数中的`userId`值加载用户，然后执行`read`控制器函数。
- en: '`mern-skeleton/server/controllers/user.controller.js`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/controllers/user.controller.js`：'
- en: '[PRE37]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `read` function retrieves the user details from `req.profile` and removes
    sensitive information, such as the `hashed_password` and `salt` values, before
    sending the user object in the response to the requesting client.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`read`函数从`req.profile`中检索用户详细信息，并在将用户对象发送到请求客户端的响应之前删除敏感信息，如`hashed_password`和`salt`值。'
- en: Updating
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新
- en: The API endpoint to update a single user is declared in the following route.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 声明了更新单个用户的API端点在以下路由中。
- en: '`mern-skeleton/server/routes/user.routes.js`:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/routes/user.routes.js`：'
- en: '[PRE38]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: When the Express app gets a PUT request at `'/api/users/:userId'`, similar to
    the `read`, it first loads the user with the `:userId` param value, and then the
    `update` controller function is executed.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 当Express应用程序在`'/api/users/:userId'`接收到PUT请求时，类似于`read`，它首先加载具有`:userId`参数值的用户，然后执行`update`控制器函数。
- en: '`mern-skeleton/server/controllers/user.controller.js`:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/controllers/user.controller.js`：'
- en: '[PRE39]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `update` function retrieves the user details from `req.profile`, then uses
    the `lodash` module to extend and merge the changes that came in the request body
    to update the user data. Before saving this updated user to the database, the
    `updated` field is populated with the current date to reflect the last updated
    at timestamp. On successful save of this update, the updated user object is cleaned
    by removing the sensitive data, such as `hashed_password` and `salt`, before sending
    the user object in the response to the requesting client.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`update`函数从`req.profile`中检索用户详细信息，然后使用`lodash`模块来扩展和合并请求体中的更改以更新用户数据。在将此更新后的用户保存到数据库之前，`updated`字段将填充为当前日期以反映最后更新的时间戳。成功保存此更新后，更新后的用户对象将通过删除敏感数据，如`hashed_password`和`salt`，然后将用户对象发送到请求客户端的响应中。'
- en: Deleting
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除
- en: The API endpoint to delete a user is declared in the following route.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 声明了删除用户的API端点在以下路由中。
- en: '`mern-skeleton/server/routes/user.routes.js`:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/routes/user.routes.js`：'
- en: '[PRE40]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: When the Express app gets a DELETE request at `'/api/users/:userId'`, similar
    to the read and update, it first loads the user by ID, and then the `remove` controller
    function is executed.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当Express应用程序在`'/api/users/:userId'`接收到DELETE请求时，类似于读取和更新，它首先通过ID加载用户，然后执行`remove`控制器函数。
- en: '`mern-skeleton/server/controllers/user.controller.js`:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/controllers/user.controller.js`：'
- en: '[PRE41]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `remove` function retrieves the user from `req.profile` and uses the `remove()`
    query to delete the user from the database. On successful deletion, the requesting
    client is returned the deleted user object in the response.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`remove`函数从`req.profile`中检索用户，并使用`remove()`查询从数据库中删除用户。成功删除后，将在响应中返回已删除的用户对象。'
- en: With the implementation of the API endpoints so far, any client can perform
    CRUD operations on the user model, but we want to restrict access to some of these
    operations with authentication and authorization.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，通过实现API端点，任何客户端都可以对用户模型执行CRUD操作，但我们希望通过认证和授权来限制对其中一些操作的访问。
- en: User auth and protected routes
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户认证和受保护的路由
- en: To restrict access to user operations such as user profile view, user update,
    and user delete, we will implement sign-in authentication with JWT, then protect
    and authorize the read, update, and delete routes.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 为了限制用户操作（如用户资料查看、用户更新和用户删除），我们将实现JWT的登录认证，然后保护和授权读取、更新和删除路由。
- en: The auth-related API endpoints for sign-in and sign-out will be declared in
    `server/routes/auth.routes.js` and then mounted on the Express app in `server/express.js`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 登录和登出的认证相关API端点将在`server/routes/auth.routes.js`中声明，然后挂载到`server/express.js`中的Express应用程序上。
- en: '`mern-skeleton/server/express.js`:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/express.js`：'
- en: '[PRE42]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Auth routes
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证路由
- en: The two auth APIs are defined in the `auth.routes.js` file using `express.Router()`
    to declare the route paths with relevant HTTP methods, and assigned corresponding
    auth controller functions that should be called when requests are received for
    these routes.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`express.Router()`在`auth.routes.js`文件中定义了两个认证API，以声明具有相关HTTP方法的路由路径，并分配了应在收到这些路由的请求时调用的相应认证控制器函数。
- en: 'The auth routes are as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 认证路由如下：
- en: '`''/auth/signin''`: POST request to authenticate the user with email and password'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''/auth/signin''`：使用电子邮件和密码进行用户认证的POST请求'
- en: '`''/auth/signout''`: GET request to clear the cookie containing a JWT that
    was set on the response object after sign-in'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''/auth/signout''`：GET请求以清除包含在登录后设置在响应对象上的JWT的cookie'
- en: 'The resulting `mern-skeleton/server/routes/auth.routes.js` file will be as
    follows:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`mern-skeleton/server/routes/auth.routes.js`文件将如下所示：
- en: '[PRE43]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Auth controller
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证控制器
- en: The auth controller functions in `server/controllers/auth.controller.js` will
    not only handle requests to the sign-in and sign-out routes, but also provide
    JWT and `express-jwt` functionality to enable authentication and authorization
    for protected user API endpoints.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`server/controllers/auth.controller.js`中的认证控制器函数不仅处理登录和登出路由的请求，还提供JWT和`express-jwt`功能，以启用受保护的用户API端点的认证和授权。'
- en: 'The `auth.controller.js` file will have the following structure:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`auth.controller.js`文件将具有以下结构：'
- en: '[PRE44]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The four controller functions are elaborated on in the following to show how
    the backend implements user auth using JSON Web Tokens.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 以下详细说明了四个控制器函数，以展示后端如何使用JSON Web Tokens实现用户认证。
- en: Sign-in
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录
- en: The API endpoint to sign in a user is declared in the following route.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下路由中声明了用于登录用户的API端点。
- en: '`mern-skeleton/server/routes/auth.routes.js`:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/routes/auth.routes.js`：'
- en: '[PRE45]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: When the Express app gets a POST request at `'/auth/signin'`, it executes the
    `signin` controller function.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 当Express应用程序在`'/auth/signin'`收到POST请求时，它会执行`signin`控制器函数。
- en: '`mern-skeleton/server/controllers/auth.controller.js`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/controllers/auth.controller.js`：'
- en: '[PRE46]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The `POST` request object receives the email and password in `req.body`. This
    email is used to retrieve a matching user from the database. Then, the password
    authentication method defined in the `UserSchema` is used to verify the password
    received in the `req.body` from the client.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`请求对象在`req.body`中接收电子邮件和密码。该电子邮件用于从数据库中检索匹配的用户。然后，`UserSchema`中定义的密码验证方法用于验证从客户端`req.body`中接收的密码。'
- en: If the password is successfully verified, the JWT module is used to generate
    a JWT signed using a secret key and the user's `_id` value.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果密码成功验证，JWT模块将用秘密密钥和用户的`_id`值生成一个签名的JWT。
- en: Install the `jsonwebtoken` module to make it available to this controller in
    the import by running `npm install jsonwebtoken --save` from the command line.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`jsonwebtoken`模块，通过在命令行中运行`npm install jsonwebtoken --save`来使其在导入此控制器时可用。
- en: Then, the signed JWT is returned to the authenticated client along with user
    details. Optionally, we can also set the token to a cookie in the response object
    so it is available to the client side if cookies is the chosen form of JWT storage.
    On the client side, this token must be attached as an `Authorization` header when
    requesting protected routes from the server.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，签名的JWT将与用户详细信息一起返回给经过身份验证的客户端。可选地，我们还可以将令牌设置为响应对象中的cookie，以便在客户端选择JWT存储的情况下可用。在客户端，当从服务器请求受保护的路由时，必须将此令牌附加为`Authorization`头。
- en: Sign-out
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登出
- en: The API endpoint to sign out a user is declared in the following route.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下路由中声明了用于登出用户的API端点。
- en: '`mern-skeleton/server/routes/auth.routes.js`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/routes/auth.routes.js`:'
- en: '[PRE47]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: When the Express app gets a GET request at `'/auth/signout'`, it executes the
    `signout` controller function.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 当Express应用程序在`'/auth/signout'`处收到GET请求时，它会执行`signout`控制器函数。
- en: '`mern-skeleton/server/controllers/auth.controller.js`:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/controllers/auth.controller.js`:'
- en: '[PRE48]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The `signout` function clears the response cookie containing the signed JWT.
    This is an optional endpoint and not really necessary for auth purposes if cookies
    are not used at all in the frontend. With JWT, user state storage is the client's
    responsibility, and there are multiple options for client-side storage besides
    cookies. On sign-out, the client needs to delete the token on the client side
    to establish that the user is no longer authenticated.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`signout`函数清除包含签名JWT的响应cookie。这是一个可选的端点，如果前端根本不使用cookie，则对身份验证没有真正必要。使用JWT，用户状态存储是客户端的责任，并且除了cookie之外，客户端存储的选择有多种选项。在登出时，客户端需要在客户端删除令牌，以确立用户不再经过身份验证。'
- en: Protecting routes with express-jwt
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用express-jwt保护路由
- en: To protect access to the read, update, and delete routes, the server will need
    to check that the requesting client is actually an authenticated and authorized
    user.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护对读取、更新和删除路由的访问，服务器需要检查请求的客户端是否真的是经过身份验证和授权的用户。
- en: To check if the requesting user is signed in and has a valid JWT when a protected
    route is accessed, we will use the `express-jwt` module.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在访问受保护的路由时，我们将使用`express-jwt`模块来检查请求用户是否已登录并具有有效的JWT。
- en: The `express-jwt` module is middleware that validates JSON Web Tokens. Run `npm
    install express-jwt --save` from the command line to install `express-jwt`.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`express-jwt`模块是验证JSON Web令牌的中间件。运行`npm install express-jwt --save`来安装`express-jwt`。'
- en: Requiring sign-in
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求登录
- en: The `requireSignin` method in `auth.controller.js` uses `express-jwt` to verify
    that the incoming request has a valid JWT in the `Authorization` header. If the
    token is valid, it appends the verified user's ID in an `'auth'` key to the request
    object, otherwise it throws an authentication error.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`auth.controller.js`中的`requireSignin`方法使用`express-jwt`来验证传入请求的`Authorization`头中是否有有效的JWT。如果令牌有效，它会将经过验证的用户ID附加在请求对象的`''auth''`键中，否则会抛出身份验证错误。'
- en: '`mern-skeleton/server/controllers/auth.controller.js`:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/controllers/auth.controller.js`：'
- en: '[PRE49]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We can add `requireSignin` to any route that should be protected against unauthenticated
    access.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将`requireSignin`添加到任何应受保护免受未经身份验证访问的路由。
- en: Authorizing signed in users
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权已登录用户
- en: For some of the protected routes such as update and delete, on top of checking
    for authentication we also want to make sure the requesting user is only updating
    or deleting their own user information. To achieve this, the `hasAuthorization`
    function defined in `auth.controller.js` checks if the authenticated user is the
    same as the user being updated or deleted before the corresponding CRUD controller
    function is allowed to proceed.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些受保护的路由，如更新和删除，除了检查身份验证外，我们还希望确保请求的用户只能更新或删除自己的用户信息。为了实现这一点，在`auth.controller.js`中定义的`hasAuthorization`函数在允许相应的CRUD控制器函数继续之前，检查经过身份验证的用户是否与正在更新或删除的用户相同。
- en: '`mern-skeleton/server/controllers/auth.controller.js`:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/controllers/auth.controller.js`：'
- en: '[PRE50]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The `req.auth` object is populated by `express-jwt` in `requireSignin` after
    authentication verification, and the `req.profile` is populated by the `userByID`
    function in the `user.controller.js`. We will add the `hasAuthorization` function
    to routes that require both authentication and authorization.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`req.auth`对象由`express-jwt`在身份验证验证后的`requireSignin`中填充，而`req.profile`由`user.controller.js`中的`userByID`函数填充。我们将在需要身份验证和授权的路由中添加`hasAuthorization`函数。'
- en: Protecting user routes
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护用户路由
- en: We will add `requireSignin` and `hasAuthorization` to the user route declarations
    that need to be protected with authentication and also authorization.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在需要受到身份验证和授权保护的用户路由声明中添加`requireSignin`和`hasAuthorization`。
- en: Update the read, update, and delete routes in `user.routes.js` as follows.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`user.routes.js`中的读取、更新和删除路由如下。
- en: '`mern-skeleton/server/routes/user.routes.js`:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-skeleton/server/routes/user.routes.js`：'
- en: '[PRE51]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The route to read a user's information only needs authentication verification,
    whereas the update and delete routes should check for both authentication and
    authorization before these CRUD operations are executed.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 只需要身份验证验证的用户信息读取路由，而更新和删除路由在执行这些CRUD操作之前应检查身份验证和授权。
- en: Auth error handling for express-jwt
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对于express-jwt的身份验证错误处理
- en: 'To handle the auth-related errors thrown by `express-jwt` when it tries to
    validate JWT tokens in incoming requests, we need to add the following error-catching
    code to the Express app configuration in `mern-skeleton/server/express.js`, near
    the end of the code, after the routes are mounted and before the app is exported:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 处理由`express-jwt`抛出的与验证传入请求中的JWT令牌相关的错误时，我们需要在Express应用程序配置中添加以下错误捕获代码，该配置位于`mern-skeleton/server/express.js`中的代码末尾，在挂载路由之后并在导出应用程序之前：
- en: '[PRE52]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '`express-jwt` throws an error named `UnauthorizedError` when the token cannot
    be validated for some reason. We catch this error here to return a `401` status
    back to the requesting client.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 当令牌由于某种原因无法验证时，`express-jwt`会抛出一个名为`UnauthorizedError`的错误。我们在这里捕获此错误，以便向请求的客户端返回`401`状态。
- en: With user auth implemented for protecting routes, we have covered all the desired
    features of a working backend for the skeleton MERN application. In the next section,
    we will look at how we can check if this standalone backend is functioning as
    desired without implementing a frontend.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施用户身份验证来保护路由，我们已经涵盖了骨架MERN应用程序的所有期望功能。在下一节中，我们将看看如何在不实施前端的情况下检查这个独立后端是否按预期运行。
- en: Checking the standalone backend
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查独立后端
- en: There are a number of options when it comes to selecting tools to check backend
    APIs, ranging from the command-line tool curl ([https://github.com/curl/curl](https://github.com/curl/curl))
    to Advanced REST Client ([https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo))—a
    Chrome extension app with an interactive user interface.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择用于检查后端API的工具时，有许多选项，从命令行工具curl（[https://github.com/curl/curl](https://github.com/curl/curl)）到Advanced
    REST Client（[https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo)）—一个具有交互式用户界面的Chrome扩展程序应用。
- en: To check the APIs implemented in this chapter, first have the server running
    from the command line, and use either of these tools to request the routes. If
    you are running the code on your local machine, the root URL is `http://localhost:3000/`.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查本章实现的API，首先从命令行运行服务器，并使用这些工具之一请求路由。如果您在本地计算机上运行代码，则根URL为`http://localhost:3000/`。
- en: Using ARC, we will showcase the expected behavior for five use cases of checking
    the implemented API endpoints.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ARC，我们将展示检查实现的API端点的五个用例的预期行为。
- en: Creating a new user
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新用户
- en: 'First, we will create a new user with the `/api/users` POST request, and pass
    name, email, and password values in the request body. When the user is successfully
    created in the database without any validation errors, we will see a 200 OK success
    message as shown in the following screenshot:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用`/api/users`的POST请求创建一个新用户，并在请求体中传递名称、电子邮件和密码值。当用户在数据库中成功创建且没有任何验证错误时，我们将看到一个200
    OK的成功消息，如下面的屏幕截图所示：
- en: '![](assets/a33bc049-08a1-4fc9-b5ae-33f3f08a4ce1.png)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a33bc049-08a1-4fc9-b5ae-33f3f08a4ce1.png)'
- en: Fetching the user list
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取用户列表
- en: 'We can see if the new user is in the database by fetching a list of all users
    with a `GET` request to `/api/users`. The response should contain an array of
    all the user objects stored in the database:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过对`/api/users`进行`GET`请求来查看数据库中是否有新用户。响应应包含存储在数据库中的所有用户对象的数组：
- en: '![](assets/a9f44f9e-5f75-4c8e-875b-0c9eeedf7308.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a9f44f9e-5f75-4c8e-875b-0c9eeedf7308.png)'
- en: Trying to fetch a single user
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试获取单个用户
- en: 'Next, we will try to access a protected API without signing in first. A `GET`
    request to read any one of the users will return a 401 Unauthorized, such as in
    the following example, a `GET` request to `/api/users/5a1c7ead1a692aa19c3e7b33`
    returns a 401:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将尝试在未登录的情况下访问受保护的API。对任何一个用户进行`GET`请求将返回401未经授权，例如，在以下示例中，对`/api/users/5a1c7ead1a692aa19c3e7b33`的`GET`请求将返回401：
- en: '![](assets/6d089bdf-7f14-480c-97b3-4217eeac894b.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6d089bdf-7f14-480c-97b3-4217eeac894b.png)'
- en: Signing in
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录
- en: 'To be able to access the protected route, we will sign in using the credentials
    of the user created in the first example. To sign in, a POST request is sent at
    `/auth/signin` with the email and password in the request body. On successful
    sign-in, the server returns a signed JWT and user details. We will need this token
    to access the protected route for fetching a single user:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够访问受保护的路由，我们将使用第一个示例中创建的用户的凭据进行登录。要登录，需要在`/auth/signin`发送带有电子邮件和密码的POST请求。成功登录后，服务器将返回一个签名的JWT和用户详细信息。我们将需要这个令牌来访问获取单个用户的受保护路由：
- en: '![](assets/6f5444db-3e39-4a3f-8f8e-fd0ef0976303.png)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6f5444db-3e39-4a3f-8f8e-fd0ef0976303.png)'
- en: Fetching a single user successfully
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成功获取单个用户
- en: 'Using the token received after sign-in, we can now access the protected route
    that failed before. The token is set in the `Authorization` header in the Bearer
    scheme when making the GET request to `/api/users/5a1c7ead1a692aa19c3e7b33`, and
    this time the user object is returned successfully:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 使用登录后收到的令牌，我们现在可以访问之前失败的受保护路由。在向`/api/users/5a1c7ead1a692aa19c3e7b33`发出GET请求时，令牌以Bearer方案设置在`Authorization`标头中，这次用户对象成功返回。
- en: '![](assets/93af55fd-9288-4870-9250-549a0df79e08.png)'
  id: totrans-352
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/93af55fd-9288-4870-9250-549a0df79e08.png)'
- en: Summary
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we developed a fully functioning standalone server-side application
    using Node, Express, and MongoDB, covering the first part of the MERN skeleton
    application. In the backend, we implemented the following features:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Node、Express和MongoDB开发了一个完全独立的服务器端应用程序，涵盖了MERN骨架应用程序的第一部分。在后端，我们实现了以下功能：
- en: A user model for storing user data, implemented with Mongoose
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用Mongoose实现的用于存储用户数据的用户模型
- en: User API endpoints to perform CRUD operations, implemented with Express
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Express实现的用户API端点执行CRUD操作
- en: User auth for protected routes, implemented with JWT and `express-jwt`
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JWT和`express-jwt`实现受保护路由的用户认证
- en: We also set up the development flow by configuring Webpack to compile ES6 code,
    and Nodemon to restart the server when the code changes. Finally, we checked the
    implementation of the APIs using the Advanced Rest API Client extension app for
    Chrome.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还通过配置Webpack编译ES6代码和Nodemon在代码更改时重新启动服务器来设置开发流程。最后，我们使用Chrome的高级Rest API客户端扩展应用程序检查了API的实现。
- en: We are now ready to extend this backend application code in the following chapter,
    to add the React frontend and complete the MERN skeleton application.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备在下一章中扩展这个后端应用程序代码，添加React前端，并完成MERN骨架应用程序。
