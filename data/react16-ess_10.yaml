- en: Chapter 10. Supercharging Your React Architecture with Flux
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。使用Flux加强您的React架构
- en: The process of building a web application has one quality that somewhat mirrors
    the process of evolution of life itself—it never ends. Unlike building a bridge,
    building a web application has no natural state that represents the end of the
    development process. It's up to you or your team to decide when you should stop
    the development process and release what you've already built.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构建Web应用程序的过程具有一种与生命本身的演变过程有些相似的特质——它永远不会结束。与建造桥梁不同，构建Web应用程序没有代表开发过程结束的自然状态。由您或您的团队决定何时停止开发过程并发布您已经构建的内容。
- en: In this book, we've reached the point at which we can stop developing Snapterest.
    Right now, we have a small React.js application with a basic functionality that
    simply works.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们已经达到了可以停止开发Snapterest的点。现在，我们有一个基本功能的小型React.js应用程序，它只是简单地运行。
- en: Isn't that enough?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就够了吗？
- en: Not exactly. Earlier in this book, we discussed how the process of maintaining
    your web application is much more expensive in terms of time and effort than the
    process of developing it. If we choose to finish developing Snapterest at its
    current state, we'll also choose to start the process of maintaining it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 并不完全是这样。在本书的早些部分，我们讨论了维护Web应用程序的过程在时间和精力方面要比开发过程昂贵得多。如果我们选择在其当前状态下完成Snapterest的开发，我们也将选择开始维护它的过程。
- en: Are we ready to maintain Snapterest? Do we know if its current state will allow
    us to introduce new functionality later on without any significant code refactoring?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备好维护Snapterest了吗？我们知道它的当前状态是否允许我们在以后引入新功能而无需进行重大代码重构吗？
- en: Analyzing your web application's architecture
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析您的Web应用程序架构
- en: 'To answer these questions, let''s zoom out from the implementation details
    and explore our application''s architecture:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答这些问题，让我们从实现细节中放大，并探索我们应用程序的架构：
- en: The `app.js` file renders our `Application` component
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.js`文件呈现我们的`Application`组件'
- en: The `Application` component manages a collection of tweets and renders our `Stream`
    and `Collection` components
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Application`组件管理tweet集合并呈现我们的`Stream`和`Collection`组件'
- en: The `Stream` component receives the new tweets from the `SnapkiteStreamClient`
    library and renders the `StreamTweet` and `Header` components
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stream`组件从`SnapkiteStreamClient`库接收新的tweets并呈现`StreamTweet`和`Header`组件'
- en: The `Collection` component renders the `CollectionControls` and `TweetList`
    components
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collection`组件呈现`CollectionControls`和`TweetList`组件'
- en: 'Stop right there. Can you tell how data flows inside our application? Do you
    know where it enters our application? How does a new tweet end up in our collection?
    Let''s examine our data flow more closely:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 停在那里。您能告诉数据在我们的应用程序内部是如何流动的吗？您知道它是如何进入我们的应用程序的吗？新的tweet是如何最终进入我们的集合的？让我们更仔细地检查我们的数据流：
- en: We use the `SnapkiteStreamClient` library to receive a new tweet inside a `Stream`
    component.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`SnapkiteStreamClient`库在`Stream`组件内接收新tweet。
- en: This new tweet is then passed from `Stream` to the `StreamTweet` component.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，这个新的tweet从`Stream`传递到`StreamTweet`组件。
- en: The `StreamTweet` component passes it to the `Tweet` component, which renders
    the tweet image.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`StreamTweet`组件将其传递给`Tweet`组件，后者呈现tweet图像。'
- en: A user clicks on that tweet image to add it to its collection.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户点击该tweet图像将其添加到其集合中。
- en: The `Tweet` component passes the `tweet` object to the `StreamTweet` component
    via the `handleImageClick(tweet)` callback function.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Tweet`组件通过`handleImageClick(tweet)`回调函数将`tweet`对象传递给`StreamTweet`组件。'
- en: The `StreamTweet` component passes that `tweet` object to the `Stream` component
    via the `onAddTweetToCollection(tweet)` callback function.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`StreamTweet`组件通过`onAddTweetToCollection(tweet)`回调函数将`tweet`对象传递给`Stream`组件。'
- en: The `Stream` component passes that `tweet` object to the `Application` component
    via the `onAddTweetToCollection(tweet)` callback function.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Stream`组件通过`onAddTweetToCollection(tweet)`回调函数将`tweet`对象传递给`Application`组件。'
- en: The `Application` component adds `tweet` to the `collectionTweets` object and
    updates its state.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Application`组件将`tweet`添加到`collectionTweets`对象并更新其状态。'
- en: The state update triggers the `Application` component to re-render, which in
    turn re-renders the `Collection` component with an updated collection of tweets.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 状态更新触发`Application`组件重新渲染，进而使用更新后的推文集合重新渲染`Collection`组件。
- en: Then, the child components of the `Collection` component can mutate our collection
    of tweets as well.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，`Collection`组件的子组件也可以改变我们的推文集合。
- en: Do you feel confused? Can you rely on this architecture in the long run? Do
    you think it's easily maintainable? I don't think so.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你感到困惑吗？你能长期依赖这种架构吗？你认为它容易维护吗？我不这么认为。
- en: Let's identify the key problems with our current architecture. We can see that
    the new data enters our React application via the `Stream` component. It then
    travels all the way down to the `Tweet` component in the component hierarchy.
    Then, it travels all the way up to the `Application` component, where it's stored
    and managed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们识别当前架构的关键问题。我们可以看到新数据通过`Stream`组件进入我们的React应用程序。然后，它沿着组件层次结构一直传递到`Tweet`组件。然后，它一直传递到`Application`组件，那里存储和管理它。
- en: 'Why do we store and manage our collection tweets in the `Application` component?
    Because `Application` is a parent component for two other components: `Stream`
    and `Collection`. Both of them need to be able to mutate our collection tweets.
    In order to accommodate this, our `Application` component needs to pass callback
    functions to both the components:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们要在`Application`组件中存储和管理我们的推文集合？因为`Application`是另外两个组件`Stream`和`Collection`的父组件：它们都需要能够改变我们的推文集合。为了适应这一点，我们的`Application`组件需要将回调函数传递给这两个组件：
- en: 'The `Stream` component:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stream`组件：'
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `Collection` component:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collection`组件：'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Stream` component gets the `onAddTweetToCollection()` function to add a
    tweet to the collection. The `Collection` component gets the `onRemoveTweetFromCollection()`
    function to remove a tweet from the collection, and the `onRemoveAllTweetsFromCollection()`
    function to remove all the tweets from the collection.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`Stream`组件获取`onAddTweetToCollection()`函数以将推文添加到集合中。`Collection`组件获取`onRemoveTweetFromCollection()`函数以从集合中移除推文，并获取`onRemoveAllTweetsFromCollection()`函数以移除集合中的所有推文。'
- en: 'These callback functions are then propagated down to the component hierarchy
    until they reach some component that actually calls them. In our application,
    the `onAddTweetToCollection()` function is only called in the `Tweet` component.
    Let''s take a look at how many times it needs to be passed from one component
    to another before it can be called in a `Tweet` component:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这些回调函数会一直传播到组件层次结构的底部，直到它们到达实际调用它们的某个组件。在我们的应用程序中，`onAddTweetToCollection()`函数只在`Tweet`组件中被调用。让我们看看在它被调用之前需要从一个组件传递到另一个组件多少次：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `onAddTweetToCollection()` function is not used in the `Stream` and `StreamTweet`
    components, yet both of them get it as a property for the purpose of passing it
    down to their child components.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`onAddTweetToCollection()`函数在`Stream`和`StreamTweet`组件中都没有被使用，但它们都将其作为属性传递下去，目的是将其传递给它们的子组件。'
- en: 'Snapterest is a small React application, so this problem is rather an inconvenience,
    but later on, if you decide to add new features, this inconvenience will quickly
    become a maintenance nightmare:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Snapterest是一个小型的React应用程序，所以这个问题只是一个不便，但以后，如果你决定添加新功能，这个不便很快就会变成一个维护的噩梦：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To prevent this from happening, we''re going to solve two problems:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种情况发生，我们将解决两个问题：
- en: We'll change how the new data enters our application
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将改变新数据进入我们的应用程序的方式
- en: We'll change how the components get and set data
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将改变组件如何获取和设置数据
- en: We'll rethink of how data flows inside our application with the help of Flux.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将借助Flux重新思考应用程序内部数据流。
- en: Understanding Flux
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Flux
- en: '**Flux** is the application architecture from Facebook that complements React.
    It''s not a framework or a library, but rather a solution to a common problem—how
    to build scalable client-side applications.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Flux**是Facebook提供的应用程序架构，它与React相辅相成。它不是一个框架或库，而是一个解决常见问题的解决方案——如何构建可扩展的客户端应用程序。'
- en: With the Flux architecture, we can rethink how data flows inside of our application.
    Flux makes sure that all our data flows only in a **single direction**. This helps
    us to reason about how our application works, regardless of how small or large
    it is. With Flux, we can add new functionality without exploding our application's
    complexity or its mental model.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Flux架构，我们可以重新思考数据在我们的应用程序内部的流动方式。Flux确保我们的所有数据只在一个**单一方向**中流动。这有助于我们理解我们的应用程序如何工作，无论它有多小或多大。使用Flux，我们可以添加新功能，而不会使应用程序的复杂性或其心智模型爆炸。
- en: You might have noticed that both React and Flux share the same core concept—one-way
    data flow. This is why they naturally work well together. We know how data flows
    inside of a React component, but how does Flux implement the one-way data flow?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，React和Flux都共享相同的核心概念——单向数据流。这就是为什么它们自然而然地很好地配合在一起。我们知道数据在React组件内部如何流动，但Flux如何实现单向数据流呢？
- en: 'With Flux, we separate the concerns of our application into four logical entities:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Flux，我们将应用程序的关注点分为四个逻辑实体：
- en: Actions
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作
- en: Dispatchers
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分发器
- en: Stores
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储器
- en: Views
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图
- en: '**Actions** are objects that we create when we want to change our application''s
    state. For example, when our application receives a new tweet, we create a new
    action. An action object has a `type` property that identifies what action it
    is and any other properties that our application needs to transition to a new
    state. Here is an example of an action object:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**操作**是我们在想要改变应用程序状态时创建的对象。例如，当我们的应用程序接收到新推文时，我们创建一个新操作。操作对象有一个“类型”属性，用于标识它是什么操作，以及我们的应用程序需要过渡到新状态的任何其他属性。以下是一个操作对象的示例：'
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, this is an action of the `receive_tweet` type, and it has the
    `tweet` property, which is a new tweet object that our application has received.
    You can guess what change in your application's state this action represents by
    looking at the action's type. For each new tweet that our application receives,
    it creates a `receive_tweet` action.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这是一个“receive_tweet”类型的操作，它有一个“tweet”属性，这是我们的应用程序接收到的新推文对象。通过查看操作的类型，您可以猜测这个操作代表了应用程序状态的什么变化。对于我们的应用程序接收到的每条新推文，它都会创建一个“receive_tweet”操作。
- en: Where does this action go? What part of our application gets this action? Actions
    are dispatched to stores.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作去哪里？我们的应用程序的哪个部分会接收到这个操作？操作被分发到存储器。
- en: Stores are responsible for managing your application's data. They provide methods
    for accessing that data, but not for changing it. If you want to change data in
    stores, you have to create and dispatch an action.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 存储器负责管理应用程序的数据。它们提供了访问数据的方法，但不提供更改数据的方法。如果要更改存储器中的数据，必须创建并分发一个操作。
- en: We know how to create an action, but how do you dispatch it? As the name suggests,
    you can use a dispatcher for this.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道如何创建一个操作，但如何分发它呢？顾名思义，您可以使用分发器来做这件事。
- en: 'The dispatcher is responsible for dispatching all the actions to all stores:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 分发器负责将所有操作分发到所有存储器：
- en: All store register with a dispatcher. They provide a callback function.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有存储器都向分发器注册。它们提供一个回调函数。
- en: All actions are dispatched by a dispatcher to all stores that did register with
    a dispatcher.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有操作都由调度程序分派到所有已向调度程序注册的存储。
- en: 'This is how data flow looks like in the Flux architecture:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Flux 架构中数据流的样子：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can see that the dispatcher plays a role of a central element in our data
    flow. All actions are dispatched by it. Stores register with it. All the actions
    are dispatched synchronously. You can't dispatch an action in the middle of the
    previous action dispatch. No action can skip the dispatcher in the Flux architecture.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到调度程序在我们的数据流中扮演着一个中心元素的角色。所有操作都由它分派。存储与它注册。所有操作都是同步分派的。您不能在上一个操作分派的中间分派操作。在
    Flux 架构中，没有操作可以跳过调度程序。
- en: Creating a dispatcher
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建调度程序
- en: 'Now let''s implement this data flow. We''ll start by creating a dispatcher
    first. Facebook offers us its implementation of a dispatcher that we can reuse.
    Let''s take advantage of this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现这个数据流。我们将首先创建一个调度程序。Facebook 提供了一个我们可以重用的调度程序的实现。让我们利用一下：
- en: 'Navigate to the `~/snapterest` directory and run the following command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `~/snapterest` 目录并运行以下命令：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `flux` module comes with a `Dispatcher` function that we'll be reusing.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`flux` 模块带有一个我们将重用的 `Dispatcher` 函数。'
- en: 'Next, create a new folder called `dispatcher` in our project''s `~/snapterest/source/dispatcher`
    directory. Now create the `AppDispatcher.js` file in it:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在我们项目的 `~/snapterest/source/dispatcher` 目录中创建一个名为 `dispatcher` 的新文件夹。然后在其中创建
    `AppDispatcher.js` 文件：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: First, we import `Dispatcher` provided by Facebook, then create, and export
    a new instance of it. Now we can use this instance in our application.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入 Facebook 提供的 `Dispatcher`，然后创建并导出一个新的实例。现在我们可以在我们的应用程序中使用这个实例。
- en: Next, we need a convenient way of creating and dispatching actions. For each
    action, let's create a function that creates and dispatches that action. In the
    Flux architecture, these functions are called action creator functions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一种方便的方式来创建和分派操作。对于每个操作，让我们创建一个函数来创建和分派该操作。在 Flux 架构中，这些函数被称为操作创建者函数。
- en: Creating an action creator
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建操作创建者
- en: 'Let''s create a new folder called `actions` in our project''s `~/snapterest/source/actions`
    directory. Then, we''ll create the `TweetActionCreators.js` file in it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们项目的 `~/snapterest/source/actions` 目录中创建一个名为 `actions` 的新文件夹。然后，在其中创建 `TweetActionCreators.js`
    文件：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Our action creators will need a dispatcher to dispatch the actions. We will
    import `AppDispatcher` that we created previously:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的操作创建者将需要一个调度程序来分派操作。我们将导入之前创建的 `AppDispatcher`：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, we will create our first action creator `receiveTweet()`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建我们的第一个操作创建者 `receiveTweet()`：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `receiveTweet()` function takes the `tweet` object as an argument, and creates
    the `action` object with a `type` property set to `receive_tweet`. It also adds
    the `tweet` object to our `action` object, and now every store will receive this
    `tweet` object.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`receiveTweet()` 函数以 `tweet` 对象作为参数，并创建具有 `type` 属性设置为 `receive_tweet` 的 `action`
    对象。它还将 `tweet` 对象添加到我们的 `action` 对象中，现在每个存储都将接收到这个 `tweet` 对象。'
- en: 'Finally, the `receiveTweet()` action creator dispatches our `action` object
    by calling the `dispatch()` method on the `AppDispatcher` object:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`receiveTweet()` 操作创建者通过在 `AppDispatcher` 对象上调用 `dispatch()` 方法来分派我们的 `action`
    对象：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `dispatch()` method dispatches the `action` object to all the stores registered
    with the `AppDispatcher` dispatcher.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`dispatch()` 方法将 `action` 对象分派到所有已向 `AppDispatcher` 调度程序注册的存储。'
- en: 'We then export our `receiveTweet` method:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们导出我们的 `receiveTweet` 方法：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So far, we've created `AppDispatcher` and `TweetActionCreators`. Next, let's
    create our first store.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了 `AppDispatcher` 和 `TweetActionCreators`。接下来，让我们创建我们的第一个存储。
- en: Creating a store
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建存储
- en: As you learned earlier, stores manage data in your Flux architecture. They provide
    that data to the React components. We'll create a simple store that manages a
    new tweet that our application receives from Twitter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您之前学到的，存储在您的 Flux 架构中管理数据。它们将这些数据提供给 React 组件。我们将创建一个简单的存储，用于管理我们的应用程序从 Twitter
    接收到的新推文。
- en: 'Create a new folder called `stores` in our project''s `~/snapterest/source/stores`
    directory. Then, create the `TweetStore.js` file in it:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的 `~/snapterest/source/stores` 目录中创建一个名为 `stores` 的新文件夹。然后，在其中创建 `TweetStore.js`
    文件：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `TweetStore.js` file implements a simple store. We can break it into four
    logical parts:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`TweetStore.js` 文件实现了一个简单的存储。我们可以将其分为四个逻辑部分：'
- en: Importing dependency modules and creating private data and methods
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入依赖模块并创建私有数据和方法
- en: Creating the `TweetStore` object with public methods
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有公共方法的 `TweetStore` 对象
- en: Creating an action handler and registering a store with a dispatcher
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个操作处理程序并向调度程序注册存储
- en: Assigning `dispatchToken` to our `TweetStore` object and exporting it
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `dispatchToken` 分配给我们的 `TweetStore` 对象并导出它。
- en: 'In the first logical part of our store, we''re simply importing the dependency
    modules that our store needs:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们存储的第一个逻辑部分中，我们只是导入存储所需的依赖模块：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Because our store will need to register with a dispatcher, we import the `AppDispatcher`
    module. Next, we import the `EventEmitter` class to be able to add and remove
    event listeners from our store:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们的存储将需要向调度程序注册，所以我们导入 `AppDispatcher` 模块。接下来，我们导入 `EventEmitter` 类，以便能够向我们的存储添加和移除事件监听器：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once we import all the dependencies, we then define the data that our store
    manages:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 导入所有依赖项后，我们定义存储管理的数据：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `TweetStore` object manages a simple tweet object that we initially set
    to `null` to identify that we didn't receive the new tweet yet.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`TweetStore` 对象管理一个简单的推文对象，我们最初将其设置为 `null`，以标识我们尚未收到新的推文。'
- en: 'Next, let''s create the two private methods:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建两个私有方法：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `setTweet()` function updates `tweet` with a `receiveTweet` object. The
    `emitChange` function emits the `change` event on the `TweetStore` object. These
    methods are private to the `TweetStore` module and they're not accessible outside
    of it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTweet()` 函数用 `receiveTweet` 对象更新 `tweet`。`emitChange` 函数在 `TweetStore`
    对象上发出 `change` 事件。这些方法对于 `TweetStore` 模块是私有的，外部无法访问。'
- en: 'The second logical part of the `TweetStore.js` file is creating the `TweetStore`
    object:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`TweetStore.js` 文件的第二个逻辑部分是创建 `TweetStore` 对象：'
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We want our store to be able to notify other parts of our application when
    its state has changed. We''ll use events for this. Whenever our store updates
    its state, it emits the `change` event. Anyone interested in changes in the store''s
    state can listen to this `change` event. They need to add their event listener
    function that our store will trigger on every `change` event. For this, our store
    defines the `addChangeListener()` method that adds the event listener, which listens
    to the `change` event, and the `removeChangeListener()` method that removes the
    `change` event listener. However, `addChangeListener()` and `removeChangeListener()`
    depend on methods provided by the `EventEmitter.prototype` object. So we need
    to copy the methods from the `EventEmitter.prototype` object to our `TweetStore`
    object. This is what the `Object.assign()` function does:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的存储在状态发生变化时能够通知应用程序的其他部分。我们将使用事件来实现这一点。每当我们的存储更新其状态时，它会发出 `change` 事件。对存储状态变化感兴趣的任何人都可以监听这个
    `change` 事件。他们需要添加他们的事件监听器函数，我们的存储将在每个 `change` 事件上触发。为此，我们的存储定义了 `addChangeListener()`
    方法，用于添加监听 `change` 事件的事件监听器，以及 `removeChangeListener()` 方法，用于移除 `change` 事件监听器。但是，`addChangeListener()`
    和 `removeChangeListener()` 依赖于 `EventEmitter.prototype` 对象提供的方法。因此，我们需要将这些方法从
    `EventEmitter.prototype` 对象复制到我们的 `TweetStore` 对象中。这就是 `Object.assign()` 函数的作用：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `Object.assign()` copies the properties owned by `sourceObject1` and `sourceObject2`
    to `targetObject` and then it returns `targetObject`. In our case, `sourceObject1`
    is `EventEmitter.prototype`, and `sourceObject2` is an object literal that defines
    our store''s methods:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.assign()`将`sourceObject1`和`sourceObject2`拥有的属性复制到`targetObject`，然后返回`targetObject`。在我们的情况下，`sourceObject1`是`EventEmitter.prototype`，`sourceObject2`是一个定义了我们存储器方法的对象字面量：'
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `Object.assign()` method returns `targetObject` with the properties copied
    from all the source objects. This is what our `TweetStore` object does.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.assign()`方法返回从所有源对象复制的属性的`targetObject`。这就是我们的`TweetStore`对象所做的。'
- en: Have you noticed that we define the `getTweet()` function as a method of our
    `TweetStore` object, whereas we don't do that with the `setTweet()` function.
    Why is that?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否注意到我们将`getTweet()`函数定义为`TweetStore`对象的一个方法，而对`setTweet()`函数却没有这样做。为什么呢？
- en: Later on, we'll export the `TweetStore` object, which means that all its properties
    will be available for other parts of our application to use. We want them to be
    able to get the data from `TweetStore`, but not to update that data directly by
    calling `setTweet()`. Instead, the only way to update data in any store is to
    create an action and dispatch it (using a dispatcher) to stores that have registered
    with that dispatcher. When the store gets that action, it can decide how to update
    its data.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们将导出`TweetStore`对象，这意味着它的所有属性都将可供应用程序的其他部分使用。我们希望它们能够从`TweetStore`获取数据，但不能直接通过调用`setTweet()`来更新数据。相反，更新任何存储器中的数据的唯一方法是创建一个操作并将其分派（使用调度程序）到已向该调度程序注册的存储器。当存储器收到该操作时，它可以决定如何更新其数据。
- en: This is a very important aspect of the Flux architecture. Stores are in full
    control of managing their data. They only allow other parts in our application
    to read that data, but never write to it directly. Only actions should mutate
    data in the stores.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Flux架构非常重要的一个方面。存储器完全控制管理它们的数据。它们只允许应用程序中的其他部分读取数据，但永远不会直接写入数据。只有操作应该改变存储器中的数据。
- en: The third logical part of the `TweetStore.js` file is creating an action handler
    and registering the store with a dispatcher.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`TweetStore.js`文件的第三个逻辑部分是创建一个操作处理程序并向调度程序注册存储器。'
- en: 'First, we create the action handler function:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建操作处理程序函数：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `handleAction()` function takes an `action` object as a parameter and checks
    its type property. In Flux, all stores get all the actions, but not all stores
    are interested in all the actions, so each store must decide what actions it's
    interested in. For this, a store must check for the action type. In our `TweetStore`
    store, we check whether the action type is `receive_tweet`, which means that our
    application has received a new tweet. If that's the case, then our `TweetStore`
    calls its private `setTweet()` function to update the `tweet` object with a new
    one that comes from the `action` object, that is, `action.tweet`. When the store
    changes its data, it needs to tell everyone who is interested in the data change.
    For this, it calls its private `emitChange()` function that emits the `change`
    event and triggers all the event listeners created by other parts in our application.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleAction()`函数以`action`对象作为参数，并检查其类型属性。在Flux中，所有存储器都会收到所有操作，但并非所有存储器都对所有操作感兴趣，因此每个存储器必须决定自己感兴趣的操作。为此，存储器必须检查操作类型。在我们的`TweetStore`存储器中，我们检查操作类型是否为`receive_tweet`，这意味着我们的应用程序已收到一条新推文。如果是这样，那么我们的`TweetStore`调用其私有的`setTweet()`函数来使用来自`action`对象的新推文更新`tweet`对象，即`action.tweet`。当存储器更改其数据时，它需要告诉所有对数据更改感兴趣的人。为此，它调用其私有的`emitChange()`函数，发出`change`事件并触发应用程序中其他部分创建的所有事件侦听器。'
- en: Our next task is to register the `TweetStore` store with a dispatcher. To register
    a store with a dispatcher, you need to call a dispatcher's `register()` method
    and pass the store's action handler function to it as a callback function. Whenever
    the dispatcher dispatches an action, it calls that callback function and passes
    the action object to it.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个任务是将`TweetStore`商店与调度程序注册。要将商店与调度程序注册，您需要调用调度程序的`register()`方法，并将商店的操作处理程序函数作为回调函数传递给它。每当调度程序分派一个操作时，它都会调用该回调函数并将操作对象传递给它。
- en: 'Let''s take a look at our example:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们的例子：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We call the `register()` method on the `AppDispatcher` object and pass the `handleAction`
    function as an argument. The `register()` method returns a token that identifies
    the `TweetStore` store. We save that token as a property of our `TweetStore` object.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`AppDispatcher`对象上调用`register()`方法，并将`handleAction`函数作为参数传递。`register()`方法返回一个标识`TweetStore`商店的令牌。我们将该令牌保存为我们的`TweetStore`对象的属性。
- en: 'The fourth logical part of the `TweetStore.js` file is exporting the `TweetStore`
    object:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`TweetStore.js`文件的第四个逻辑部分是导出`TweetStore`对象：'
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This is how you create a simple store. Now, since we have implemented our first
    action creator, dispatcher, and store, let''s revisit the Flux architecture and
    take a look at a bigger picture of how it works:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您创建一个简单商店的方式。现在，既然我们已经实现了我们的第一个操作创建者、调度程序和商店，让我们重新审视Flux架构，并看看它是如何工作的：
- en: The stores register themselves with a dispatcher.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 商店向调度程序注册自己。
- en: Action creators create and dispatch actions to the stores via a dispatcher.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作创建者通过调度程序创建和分派操作到商店。
- en: Stores check for relevant actions and change their data accordingly.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 商店检查相关操作并相应地更改它们的数据。
- en: Stores notify everyone who is listening about the data change.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 商店通知所有正在听的人数据变化。
- en: Well that makes sense, you may say, but what triggers action creators? Who is
    listening to store updates? These are very good questions to ask. And the answers
    are awaiting you in our next chapter.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有道理的，你可能会说，但是是什么触发了操作创建者？谁在监听商店更新？这些都是非常好的问题。答案等着你在我们的下一章中。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you analyzed our React application's architecture. You learned
    the core concepts behind the Flux architecture, and you implemented a dispatcher,
    an action creator, and a store.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您分析了我们的React应用程序的架构。您学习了Flux架构背后的核心概念，并实现了调度程序、操作创建者和商店。
- en: In the next chapter, we'll integrate them into our React application and get
    our architecture ready for the maintenance paradise.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把它们整合到我们的React应用程序中，并让我们的架构准备好迎接维护的天堂。
