- en: Testing and Debugging
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和调试
- en: React, thanks to its components, makes it easy to test our applications. There
    are many different tools that we can use to create tests with React, and here
    we'll cover the most popular ones to understand the benefits they provide.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由于React具有组件，因此很容易测试我们的应用程序。有许多不同的工具可以用来创建React测试，我们将在这里介绍最流行的工具，以了解它们提供的好处。
- en: '**Jest**  is an *all-in-one* testing framework  solution, maintained by  Christopher
    Pojer  from Facebook and contributors within the community, and aims to give you
    the best developer experience.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jest** 是一个由Facebook的Christopher Pojer和社区内的贡献者维护的*一站式*测试框架解决方案，旨在为您提供最佳的开发者体验。'
- en: By the end of the chapter, you'll be able to create a test environment from
    scratch and write tests for your application's components.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将能够从头开始创建测试环境，并为应用程序的组件编写测试。
- en: 'In this chapter, we will look at the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Why it is important to test our applications, and how they help developers move
    faster
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么测试我们的应用程序很重要，以及它们如何帮助开发人员更快地移动
- en: How to set up a Jest environment to test components using Enzyme
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置Jest环境以使用Enzyme测试组件
- en: What React Testing Library is and why it is a *must-have* for testing React
    applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Testing Library是什么，以及为什么它对于测试React应用程序是*必不可少*的
- en: How to test events
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何测试事件
- en: React DevTools and some error-handling techniques
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React DevTools和一些错误处理技术
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete this chapter, you will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章，您将需要以下内容：
- en: Node.js 12+
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: Visual Studio Code
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: 'You can find the code for this chapter in the book''s GitHub Repository: [https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter11).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在书的GitHub存储库中找到本章的代码：[https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter11)。
- en: Understanding the benefits of testing
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解测试的好处
- en: Testing web UIs has always been a difficult job. From unit to *end-to-end* tests,
    the fact that the interfaces depend on browsers, user interactions, and many other
    variables makes it difficult to implement an effective testing strategy.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 测试Web用户界面一直是一项困难的工作。从单元测试到端到端测试，界面依赖于浏览器、用户交互和许多其他变量，这使得实施有效的测试策略变得困难。
- en: If you've ever tried to write end-to-end tests for the web, you'll know how
    complex it is to get consistent results and how the results are often affected
    by false negatives due to different factors, such as the network. Other than that,
    user interfaces are frequently updated to improve  the experience, maximize conversions,
    or simply add new features.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经尝试为Web编写端到端测试，您将知道获得一致的结果有多么复杂，结果往往受到不同因素（如网络）的影响而产生假阴性。除此之外，用户界面经常更新以改善体验，最大化转化率，或者仅仅添加新功能。
- en: If tests are hard to write and maintain, developers are less prone to cover
    their applications. On the other hand, tests are pretty important because they
    make developers more confident with their code, which is reflected in speed and
    quality. If a piece of code is well tested (and the tests are well written), developers
    can be sure that it works and is ready to ship. Similarly, thanks to tests, it
    becomes easier to refactor the code because tests guarantee that the functionalities
    do not change during the rewrite.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试很难编写和维护，开发人员就不太可能覆盖他们的应用程序。另一方面，测试非常重要，因为它们使开发人员对他们的代码更有信心，这反映在速度和质量上。如果一段代码经过了良好的测试（并且测试编写得很好），开发人员可以确信它可以正常工作并且已经准备好发布。同样，由于测试的存在，重构代码变得更容易，因为测试保证了功能在重写过程中不会改变。
- en: Developers tend to focus on the feature they are currently implementing, and
    sometimes it is hard to know if other parts of the application are affected by
    those changes. Tests help to avoid regressions because they can tell if the new
    code breaks the old tests. Greater confidence in writing new features leads to
    faster releases.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员往往会专注于他们当前正在实现的功能，有时很难知道应用程序的其他部分是否受到这些更改的影响。测试有助于避免回归，因为它们可以告诉我们新代码是否破坏了旧测试。对于编写新功能的更大信心会导致更快的发布。
- en: Testing the main functionalities of an application makes the code base more
    solid, and whenever a new bug is found, it can be reproduced, fixed, and covered
    by tests so that it does not happen again in the future.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应用程序的主要功能使代码基础更加稳固，每当发现新的bug时，都可以重现、修复并通过测试覆盖，以便将来不再发生。
- en: Luckily, React (and the component era) makes testing user interfaces easy and
    efficient. Testing components, or trees of components, is a less arduous job because
    every single part of the application has its responsibilities and boundaries.
    If components are built in the right way, if they are pure and aim for composability
    and reusability, they can be tested as simple functions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，React（以及组件时代）使得测试用户界面变得更加简单和高效。测试组件或组件树是一项较少费力的工作，因为应用程序的每个部分都有其责任和边界。如果组件以正确的方式构建，如果它们是纯净的，并且旨在可组合和可重用，它们可以被测试为简单的函数。
- en: Another great power that modern tools bring us is the ability to run tests using
    Node.js and the console. Spinning up a browser for every single test makes tests
    slower and less predictable, degrading the developer experience; instead, running
    the tests using the console is faster.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现代工具带给我们的另一个巨大优势是能够使用Node.js和控制台运行测试。为每个测试启动浏览器会使测试变慢且不太可预测，降低开发人员的体验；相反，使用控制台运行测试会更快。
- en: Testing components only in the console can sometimes give unexpected behaviors
    when they are rendered in a real browser, but in my experience this is rare. When
    we test React components, we want to make sure that they work properly and that,
    given different sets of props, their output is always correct.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中仅测试组件有时会在实际浏览器中呈现时产生意外行为，但根据我的经验，这种情况很少见。当我们测试React组件时，我们希望确保它们能正常工作，并且在给定不同的props集合时，它们的输出始终是正确的。
- en: We may also want to cover all the various states that a component can have.
    The state might change by clicking a button, so we write tests to check if all
    the event handlers are doing what they are supposed to do.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还希望覆盖组件可能具有的所有各种状态。状态可能会通过单击按钮而改变，因此我们编写测试来检查所有事件处理程序是否按预期进行。
- en: When all the functionalities of the component are covered, but we want to do
    more, we can write tests to verify the component's behavior on  **edge cases**.
    Edge cases are states that the component can assume when, for example, all the
    props are  `null`, or there is an error. Once the tests are written, we can be
    pretty confident that the component behaves as expected.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当组件的所有功能都被覆盖时，但我们想要做更多时，我们可以编写测试来验证组件在**边缘情况**下的行为。边缘情况是组件在例如所有props都为`null`或出现错误时可能出现的状态。一旦测试编写完成，我们就可以相当有信心地认为组件的行为符合预期。
- en: Testing a single component is great, but it does not guarantee that multiple
    individually tested components will still work once they are put together. As
    we will see later, with React we can mount a tree of components and test the integration
    between them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 测试单个组件很好，但这并不能保证一旦它们放在一起，多个经过单独测试的组件仍然能够正常工作。正如我们将在后面看到的，使用React，我们可以挂载一组组件并测试它们之间的集成。
- en: There are different techniques that we can use to write tests, and one of the
    most popular ones is  **test-driven development** (**TDD**). Applying TDD means
    writing the tests first and then writing the code to pass the tests.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用不同的技术来编写测试，其中最流行的之一是**测试驱动开发**（**TDD**）。应用TDD意味着首先编写测试，然后编写代码来通过测试。
- en: Following this pattern helps us to write better code because we are forced to
    think more about the design before implementing the functionalities, which usually
    leads to higher quality.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这种模式有助于我们编写更好的代码，因为我们被迫在实现功能之前更多地考虑设计，这通常会导致更高的质量。
- en: Painless JavaScript testing with Jest
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jest轻松进行JavaScript测试
- en: The most important way to learn how to test React components in the right way
    is by writing some code, and that is what we are going to do in this section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何以正确的方式测试React组件最重要的方法是通过编写一些代码，这就是我们将在本节中要做的事情。
- en: The React documentation says that at Facebook they use Jest to test their components.
    However, React does not force you to use a particular test framework, and you
    can use your favorite one without any problems. To see Jest in action, we are
    going to create a project from scratch, installing all the dependencies and writing
    a component with some tests. It'll be fun!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: React文档表示，在Facebook他们使用Jest来测试他们的组件。然而，React并不强制您使用特定的测试框架，您可以使用自己喜欢的任何一个而不会有任何问题。为了看到Jest的实际效果，我们将从头开始创建一个项目，安装所有依赖项并编写一个带有一些测试的组件。这将很有趣！
- en: 'The first thing to do is to move into a new folder and run the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是进入一个新文件夹并运行以下命令：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once `package.json` is created, we can start installing the dependencies, with
    the first one being the `jest` package itself:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了`package.json`，我们就可以开始安装依赖项，第一个依赖项就是`jest`包本身：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To tell `npm` that we want to use the `jest` command to run the tests, we have
    to add the following scripts to `package.json`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉`npm`我们想要使用`jest`命令来运行测试，我们必须在`package.json`中添加以下脚本：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To write components and tests using ES6 and JSX, we have to install all Babel-related
    packages so that Jest can use them to transpile and understand the code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用ES6和JSX编写组件和测试，我们必须安装所有与Babel相关的包，以便Jest可以使用它们来转译和理解代码。
- en: 'The second set of dependencies is installed as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第二组依赖项的安装如下：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you may know, we now have to create a  `.babelrc`  file, which is used by
    Babel to know the presets and the plugins that we would like to use inside the
    project.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，我们现在必须创建一个`.babelrc`文件，Babel将使用它来了解我们想要在项目中使用的预设和插件。
- en: 'The `.babelrc` file  looks like the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`.babelrc`文件如下所示：'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, it is time to install React and `ReactDOM`, which we need to create and
    render components:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候安装React和`ReactDOM`了，我们需要它们来创建和渲染组件：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The setup is ready, and we can run Jest against the ES6 code and render our
    components into the DOM, but there is one more thing to do.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 设置已经准备好，我们可以针对ES6代码运行Jest并将我们的组件渲染到DOM中，但还有一件事要做。
- en: 'We need to install `@testing-library/jest-dom` and `@testing-library/react`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装`@testing-library/jest-dom`和`@testing-library/react`：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After you have installed these packages, you have to create the `jest.config.js`
    file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了这些软件包之后，您必须创建`jest.config.js`文件：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, let''s create the `setUpTests.ts` file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们创建`setUpTests.ts`文件：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s imagine we have a `Hello` component:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假设我们有一个`Hello`组件：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In order to test this component, we need to create a file with the same name
    but add the `.test` (or `.spec`) suffix to the new file. This will be our test
    file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个组件，我们需要创建一个同名文件，但是在新文件中添加`.test`（或`.spec`）后缀。这将是我们的测试文件：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, in order to run the `test`, you need to execute the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了运行`test`，您需要执行以下命令：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see this result:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到这个结果：
- en: '![](assets/bd39fedb-e1f8-4b12-bf54-84be4de6e301.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bd39fedb-e1f8-4b12-bf54-84be4de6e301.png)'
- en: 'The `PASS` label means that all tests have been passed successfully; if you
    failed at least one test, you would see the `FAIL` label. Let''s change one of
    our tests to make it fail:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`PASS`标签表示所有测试都已成功通过；如果您至少有一个测试失败，您将看到`FAIL`标签。让我们更改其中一个测试以使其失败：'
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is the result:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![](assets/12392022-1665-46d6-8972-36a2bb038acc.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/12392022-1665-46d6-8972-36a2bb038acc.png)'
- en: As you can see, the `FAIL` label is specified with an `X`. Also, the expected
    and received values provide useful information, and you can see which value is
    expected and which value is being received.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`FAIL`标签用`X`指定。此外，期望和接收值提供了有用的信息，您可以看到期望的值和接收的值。
- en: 'If you want to see the coverage percentage of all your unit tests, you can
    execute the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看所有单元测试的覆盖百分比，您可以执行以下命令：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The result is the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![](assets/101fc17a-5565-4d30-a2ea-77dc069f6219.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/101fc17a-5565-4d30-a2ea-77dc069f6219.png)'
- en: 'The coverage also generates an HTML version of the result; it creates a directory
    called `coverage` and inside another called `Icov-report`. If you open the `index.html`
    file in your browser, you will see the HTML version as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖还生成了结果的HTML版本；它创建了一个名为`coverage`的目录，里面又创建了一个名为`Icov-report`的目录。如果您在浏览器中打开`index.html`文件，您将看到以下HTML版本：
- en: '![](assets/93b5b5e8-0c27-48db-a971-9a801f198362.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/93b5b5e8-0c27-48db-a971-9a801f198362.png)'
- en: Now that you made your first tests and you know how to collect the coverage
    data, let's see how we can test events in the next section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经进行了第一次测试，并且知道如何收集覆盖数据，让我们在下一节中看看如何测试事件。
- en: Testing events
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试事件
- en: 'The events are very common in any web application and we need to test them
    as well, so let''s learn how to test events. For this, let''s create a new `ShowInformation`
    component:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 事件在任何Web应用程序中都很常见，我们也需要测试它们，因此让我们学习如何测试事件。为此，让我们创建一个新的`ShowInformation`组件：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s create the test file at `src/components/ShowInformation/index.test.tsx`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`src/components/ShowInformation/index.test.tsx`中创建测试文件：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you run the test and it works fine, you should see this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行测试并且工作正常，您应该会看到这个：
- en: '![](assets/b2197c2a-99a7-4613-96c0-849c4db68bb5.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b2197c2a-99a7-4613-96c0-849c4db68bb5.png)'
- en: Using React DevTools
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React DevTools
- en: When testing in the console is not enough, and we want to inspect our application
    while it is running inside the browser, we can use React DevTools.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当在控制台中进行测试不够时，我们希望在应用程序在浏览器中运行时检查它，我们可以使用React DevTools。
- en: 'You can install this as a Chrome extension at the following URL: [https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址安装此Chrome扩展程序：[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)。
- en: The installation adds a tab to the Chrome DevTools called  **React**,  where
    you can inspect the rendered tree of components and check which properties they
    have received and what their state is at a particular point in time.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后会在Chrome DevTools中添加一个名为**React**的选项卡，您可以检查组件的渲染树，以及它们在特定时间点接收到的属性和状态。
- en: Props and states can be read, and they can be changed in real time to trigger
    updates in the UI and see the results straight away. This is a must-have tool,
    and in the most recent versions, it has a new feature that can be enabled by ticking
    the  Trace React Updates  checkbox.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Props和states可以被读取，并且可以实时更改以触发UI中的更新并立即查看结果。这是一个必不可少的工具，在最新版本中，它有一个新功能，可以通过选中“Trace
    React Updates”复选框来启用。
- en: When this functionality is enabled, we can use our application and visually
    see which components get updated when we perform a particular action. The updated
    components are highlighted with colored rectangles, and it becomes easy to spot
    possible optimizations.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 启用此功能后，我们可以使用我们的应用程序并直观地看到在执行特定操作时更新了哪些组件。更新的组件会用彩色矩形突出显示，这样就很容易发现可能的优化。
- en: Using Redux DevTools
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Redux DevTools
- en: 'If you are using Redux in your application, you probably want to use Redux
    DevTools to be able to debug your Redux flow. You can install it at the following
    URL: [https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在应用程序中使用Redux，您可能希望使用Redux DevTools来调试Redux流程。您可以在以下网址安装它：[https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es)。
- en: 'Also, you need to install the `redux-devtools-extension` package:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您需要安装`redux-devtools-extension`包：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once you have installed React DevTools and Redux DevTools, you will need to
    configure them.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了React DevTools和Redux DevTools后，您需要对它们进行配置。
- en: 'If you try to use Redux DevTools directly, it won''t work; this is because
    we need to pass the `composeWithDevTools` method into the Redux store; this should
    be the `configureStore.ts` file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试直接使用Redux DevTools，它将无法工作；这是因为我们需要将`composeWithDevTools`方法传递到Redux存储中；这应该是`configureStore.ts`文件：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is the best tool to test our Redux applications.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是测试我们的Redux应用程序的最佳工具。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the benefits of testing, and the frameworks
    you can use to cover your React components with tests.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了测试的好处，以及可以用来覆盖React组件的框架。
- en: You learned how to implement and test components and events with React Testing
    Library, how to use the Jest coverage, and how to use React DevTools and Redux
    DevTools. It is important to bear in mind common solutions when it comes to testing
    complex components, such as higher-order components  or forms with multiple nested
    fields.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您学会了如何使用React Testing Library实现和测试组件和事件，如何使用Jest覆盖率，以及如何使用React DevTools和Redux
    DevTools。在测试复杂组件时，例如高阶组件或具有多个嵌套字段的表单时，牢记常见的解决方案是很重要的。
- en: In the next chapter, you will learn how to implement routes in your application
    using React Router.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用React Router在应用程序中实现路由。
