- en: Animations with React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React进行动画
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下食谱：
- en: Animating a todo list with ReactCSSTransitionGroup
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ReactCSSTransitionGroup对待事项列表进行动画处理
- en: Using react-animations library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用react-animations库
- en: Creating our first animation with React pose
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React pose创建我们的第一个动画
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Animations are very common in any web application. Since CSS3, animations have
    become widespread and easy to implement. The most common use of animations are
    transitions, where you can change CSS properties and define the duration or delay.
    React can handle animations using an animation add-on called `ReactCSSTransitionGroup`.
    In the following recipes, we are going to use `ReactCSSTransitionGroup` to create
    some animations. `ReactCSSTransitionGroup` is an add-on component for implementing
    basic CSS animations and transitions smoothly.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 动画在任何Web应用程序中都很常见。自CSS3以来，动画已经变得普遍且易于实现。动画最常见的用途是过渡，您可以在其中更改CSS属性并定义持续时间或延迟。React可以使用名为`ReactCSSTransitionGroup`的动画插件来处理动画。在接下来的食谱中，我们将使用`ReactCSSTransitionGroup`来创建一些动画。`ReactCSSTransitionGroup`是一个用于平滑实现基本CSS动画和过渡的附加组件。
- en: Animating a todo list with ReactCSSTransitionGroup
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ReactCSSTransitionGroup对待事项列表进行动画处理
- en: In this recipe, we are going to animate a todo list using `ReactCSSTransitionGroup`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用`ReactCSSTransitionGroup`来对待事项列表进行动画处理。
- en: Getting Ready
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'For this recipe, we need to install the `react-addons-css-transition-group` package:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们需要安装`react-addons-css-transition-group`包：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We are going to make a Todo list with some animations:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将制作一个带有一些动画效果的待办事项列表：
- en: 'First, let''s create our `Todo` component:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建我们的`Todo`组件：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'File: src/components/Todo/index.jsx'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Todo/index.jsx
- en: 'Now, in our `List` component, we need to include `ReactCSSTransitionGroup`
    and use it as a wrapper in our list elements. We need to specify the name of our
    transition using the `transitionName` prop, and `transitionAppear` adds a transition
    at the first animation mount. By default, it is `false`:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在我们的`List`组件中，我们需要包括`ReactCSSTransitionGroup`并将其用作列表元素的包装器。我们需要使用`transitionName`属性指定我们的过渡名称，`transitionAppear`在第一次动画挂载时添加过渡。默认情况下为`false`：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'File: src/components/Todo/List.jsx'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Todo/List.jsx
- en: 'Now, using `transitionName`, we will add some styles using the special classes
    that are created by `ReactCSSTransitionGroup`:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`transitionName`，我们将使用由`ReactCSSTransitionGroup`创建的特殊类添加一些样式：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'File: src/components/Todo/List.css'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Todo/List.css
- en: How it works...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We need to include the elements we want to animate inside our `ReactCSSTransitionGroup`
    component. Every time we add an item to our Todo list, we can see that our special
    classes (`.todo-enter` and `.todo-enter-active`) are being injected for a second
    to start our animation:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`ReactCSSTransitionGroup`组件内包含我们想要动画的元素。每当我们向待办事项列表中添加一个项目时，我们可以看到我们的特殊类（`.todo-enter`和`.todo-enter-active`）被注入一秒钟，以启动我们的动画：
- en: '![](assets/39d3ce5a-af0e-46ee-942a-6c6cfec5d6e8.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/39d3ce5a-af0e-46ee-942a-6c6cfec5d6e8.png)'
- en: 'And if we remove an item, we will see the `.todo-leave` and `.todo-leave-active` classes for
    a second:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们删除一个项目，我们将看到`.todo-leave`和`.todo-leave-active`类持续一秒钟：
- en: '![](assets/ff4cc9b6-789b-4149-9551-0a0cbbd8701c.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ff4cc9b6-789b-4149-9551-0a0cbbd8701c.png)'
- en: As you can see, using `ReactCSSTransitionGroup` helps us to handle the states
    of our animations. You can use this to create better animations in your React
    application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，使用`ReactCSSTransitionGroup`帮助我们处理动画的状态。您可以使用它来在您的React应用程序中创建更好的动画。
- en: Using react-animations library
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用react-animations库
- en: In this recipe, we are going to learn how to use the library react-animations.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何使用库react-animations。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'For this recipe, we need to install the following packages:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们需要安装以下软件包：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s do some animation:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一些动画：
- en: 'We need to use `Radium` to create our inline styles to use our animations from
    the `react-animations` package. First, let''s create our component:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要使用`Radium`来创建内联样式，以便使用`react-animations`包中的动画。首先，让我们创建我们的组件：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Animations/index.jsx
- en: In this example, we are using the `fadeIn` animation. We need to import the
    animation we want to use from `react-animations`, add the animation to our `Radium`
    styles, then use `<StyleRoot>` as a wrapper for our animation, and finally specify
    the inline style, `fadeIn`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了`fadeIn`动画。我们需要从`react-animations`中导入我们想要使用的动画，将动画添加到我们的`Radium`样式中，然后使用`<StyleRoot>`作为我们动画的包装器，最后指定内联样式`fadeIn`。
- en: 'If you want to use another animation, for example, `bounce`, then you need
    to add the bounce animation and create a style for it:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想使用另一个动画，例如`bounce`，那么你需要添加弹跳动画并为其创建一个样式：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Animations/index.jsx
- en: There's more...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'As you can see, using animations from `react-animations` is very easy. There
    are a lot more animations:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，使用`react-animations`中的动画非常容易。还有很多其他动画：
- en: '`bounce`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹跳
- en: '`fadeIn`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 淡入
- en: '`fadeOut`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 淡出
- en: '`flash`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闪光
- en: '`flip`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻转
- en: '`rollIn`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚入
- en: '`rollOut`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚出
- en: '`rotateIn`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 淡入旋转
- en: '`rotateOut`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旋转出
- en: '`rubberBand`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 橡皮筋舞蹈
- en: '`shake`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摇动
- en: '`swing`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摇摆
- en: '`zoomIn`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放大
- en: '`zoomOut`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩小
- en: To see all the available animations, visit the official repository at [https://github.com/FormidableLabs/react-animations](https://github.com/FormidableLabs/react-animations).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有可用的动画，请访问官方存储库[https://github.com/FormidableLabs/react-animations](https://github.com/FormidableLabs/react-animations)。
- en: Creating our first animation with React Pose
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React Pose创建我们的第一个动画
- en: React Pose is a declarative motion system for HTML, SVG, and React. It is a
    very cool library with which you can do amazing animations with React.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: React Pose是用于HTML、SVG和React的声明式动作系统。这是一个非常酷的库，你可以用它在React中做出惊人的动画。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we will need to install the following packages and update
    our `react` and `react-dom` to be `16.4.2` or higher:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要安装以下软件包并更新我们的`react`和`react-dom`至`16.4.2`或更高版本：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to create a React pose animation:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建React pose动画：
- en: 'First, let''s create our component structure:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建我们的组件结构：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Animations/index.jsx
- en: 'The second thing we need to do is to create our first posed `div` with the
    states of our animation (`normal` and `hover`) and create a styled `div` using
    `styled-components`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的第二件事是创建我们的第一个posed `div`，并创建一个使用`styled-components`的样式化`div`，并具有我们动画的状态（`normal`和`hover`）：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Animations/index.jsx
- en: 'Now we need to add our `StyledCircle` component into our `render` method:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要将我们的`StyledCircle`组件添加到我们的`render`方法中：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Animations/index.jsx
- en: 'As you can see, we need to create some event methods, and we are going to use
    the local state to change the size of the circle and the color when the user clicks:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们需要创建一些事件方法，并且当用户点击时，我们将使用本地状态来改变圆圈的大小和颜色：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Animations/index.jsx
- en: How it works...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Our first view is going to be a blue circle with the label Click me!:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个视图将是一个带有标签“点击我！”的蓝色圆圈：
- en: '![](assets/d598d075-98ae-4cf2-b619-93a389c20bc1.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d598d075-98ae-4cf2-b619-93a389c20bc1.png)'
- en: 'If we hover over the circle, we are going to see the pose animation, which
    increases the scale of the circle:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们悬停在圆圈上，我们将看到pose动画，它会增加圆圈的比例：
- en: '![](assets/ac3f8e69-19c8-4e0f-b7a2-9f7d40f4a6d5.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ac3f8e69-19c8-4e0f-b7a2-9f7d40f4a6d5.png)'
- en: 'Finally, if we click on the circle, we are going to see the that our circle
    change its background color randomly:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们点击圆圈，我们会看到我们的圆圈会随机改变背景颜色：
- en: '![](assets/1eda21d4-cc03-48ea-b429-608a33aedc0f.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1eda21d4-cc03-48ea-b429-608a33aedc0f.png)'
- en: There's more...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We can even combine the animations from `react-animations` library. For example,
    if we want to flip the circle when the user clicks on it, then we can do this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以结合`react-animations`库中的动画。例如，如果我们想要在用户点击圆圈时翻转它，那么我们可以这样做：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Animations/index.jsx
