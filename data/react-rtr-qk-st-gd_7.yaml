- en: Using NativeRouter in a React Native Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在React Native应用程序中使用NativeRouter
- en: The React Router library provides the `react-router-native` package, which includes
    the implementation of the `NativeRouter` component for use in React Native applications.
    The React Native framework allows you to build native mobile applications for
    iOS and Android using JavaScript and React.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React Router库提供了`react-router-native`包，其中包括用于React Native应用程序的`NativeRouter`组件的实现。React
    Native框架允许您使用JavaScript和React构建iOS和Android的本机移动应用程序。
- en: 'From React Native''s Documentation ([https://facebook.github.io/react-native/](https://facebook.github.io/react-native/)):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 来自React Native文档（[https://facebook.github.io/react-native/](https://facebook.github.io/react-native/)）：
- en: '"With React Native, you don''t build a **mobile web app**, an **HTML5 app**,
    or a **hybrid app**. You build a real mobile app that''s indistinguishable from
    an app built using Objective-C or Java. React Native uses the same fundamental
    UI building blocks as regular iOS and Android apps. You just put those building
    blocks together using JavaScript and React."'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “使用React Native，您不会构建**移动Web应用程序**，**HTML5应用程序**或**混合应用程序**。您构建的是一个与使用Objective-C或Java构建的应用程序无异的真实移动应用程序。React
    Native使用与常规iOS和Android应用程序相同的基本UI构建块。您只需使用JavaScript和React将这些构建块组合在一起。”
- en: 'In this chapter, the following topics are discussed:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，讨论了以下主题：
- en: Using NativeRouter in a React Native application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在React Native应用程序中使用NativeRouter
- en: The NativeRouter component and its props
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NativeRouter组件及其属性
- en: Using the `<BackButton>` component to interact with a devices' back button
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`<BackButton>`组件与设备的返回按钮交互
- en: Creating Deeplinks using the `<DeepLinking>` component
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`<DeepLinking>`组件创建深链接
- en: Using NativeRouter in a React Native application
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在React Native应用程序中使用NativeRouter
- en: Similar to the `create-react-app` CLI, the `create-react-native-app` CLI is
    used to create an application that includes build scripts that can be used to
    build an application for both development and production environments. It also
    includes `packager`, which allows you to test your application on iOS and Android
    emulators and also on real devices.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与`create-react-app`CLI类似，`create-react-native-app`CLI用于创建一个包含构建脚本的应用程序，可用于开发和生产环境。它还包括`packager`，允许您在iOS和Android模拟器以及真实设备上测试应用程序。
- en: Creating a new project with the create-react-native-app CLI
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用create-react-native-app CLI创建新项目
- en: 'Let''s get started by first installing the CLI:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先安装CLI：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command installs the CLI in the global `node_modules` directory.
    The next step is to create a React Native project using the CLI:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将CLI安装在全局的`node_modules`目录中。下一步是使用CLI创建一个React Native项目：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `react-native-test-app` directory is created and all the required scripts
    are downloaded in the `node_modules` directory.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了`react-native-test-app`目录，并在`node_modules`目录中下载了所有必需的脚本。
- en: 'Now, when you run the `npm start` script, the build script starts `packager`
    and it generates a QR code and a URL for you to access the application on a real
    device (iOS or Android) or on the emulator. Also, you could launch the iOS or
    Android emulator if you have Xcode or Android Studio installed. Here''s an example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您运行`npm start`脚本时，构建脚本会启动`packager`，并为您生成一个QR码和一个URL，以便您在真实设备（iOS或Android）或模拟器上访问应用程序。此外，如果您已安装Xcode或Android
    Studio，还可以启动iOS或Android模拟器。这是一个例子：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For the purpose of this example, we will use the Xcode emulator; here''s a
    screenshot of the application when you request the application to be viewed on
    the iOS emulator:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用Xcode模拟器；当您请求在iOS模拟器上查看应用程序时，这是应用程序的屏幕截图：
- en: '![](Images/f7fd2ef8-6c2e-45db-ae0f-4af41389c7c4.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f7fd2ef8-6c2e-45db-ae0f-4af41389c7c4.png)'
- en: React Native provides several components that allow you to build views for the
    native platform. Let's take a look at the code and understand some of the components
    used to build the preceding view.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: React Native提供了几个组件，允许您为原生平台构建视图。让我们看一下代码，并了解用于构建前述视图的一些组件。
- en: 'In `App.js`, the following code is included:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.js`中，包括以下代码：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, React Native's `<View>` component is used to create a container in a similar
    way to how you would create a container using `<div>` or `<section>` in a React
    application. In React Native, instead of using HTML elements, such as `<div>` and `<span>`,
    React Native's components, such as `<View>` and `<Text>`, are used.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，React Native的`<View>`组件被用来创建一个容器，类似于在React应用程序中使用`<div>`或`<section>`创建容器的方式。在React
    Native中，不是使用HTML元素，如`<div>`和`<span>`，而是使用React Native的组件，如`<View>`和`<Text>`。
- en: Adding the <NativeRouter> component
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加`<NativeRouter>`组件
- en: 'Let''s now add the `react-router-native` package to the application that we
    just created:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在将`react-router-native`包添加到我们刚刚创建的应用程序中：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `NativeRouter` component is used in React Native applications to provide
    routing and navigation support. It enables components such as `<Route>` and `<Link>`
    to be used in the native application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`NativeRouter`组件用于在React Native应用程序中提供路由和导航支持。它使得诸如`<Route>`和`<Link>`之类的组件可以在原生应用程序中使用。'
- en: 'Let''s first create a side menu that includes a couple of `<Link>` components:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个包含一对`<Link>`组件的侧边菜单：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `<ScrollView>` component is used as a container to host our menu items
    (the `<Link>` components). As the name suggests, the `<ScrollView>` component
    is used to create a scrollable container. The next step is to add `<Route>` components
    to the application:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`<ScrollView>`组件被用作容器来承载我们的菜单项（`<Link>`组件）。正如其名称所示，`<ScrollView>`组件用于创建可滚动的容器。下一步是向应用程序添加`<Route>`组件：'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `ContentView` component wraps the `<Route>` components inside a `<View>`
    component, thus defining two application routes with path `/` and `/dashboard`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContentView`组件将`<Route>`组件包装在`<View>`组件中，从而定义了路径为`/`和`/dashboard`的两个应用程序路由。'
- en: 'As the last step, we will now use the `<SideMenu>` component from `react-native-side-menu` to
    create a drawer menu. This menu is then wrapped inside the `<NativeRouter>` component
    in App.js:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一步，我们现在将使用`react-native-side-menu`中的`<SideMenu>`组件来创建一个抽屉菜单。然后在App.js中将此菜单包装在`<NativeRouter>`组件中：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Similar to other Router implementations, the `NativeRouter` component wraps
    the application root component and enables the `<Route>` and `<Link>` components
    to update `history` as the user navigates through the application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于其他路由器实现，`NativeRouter`组件包装了应用程序根组件，并使得`<Route>`和`<Link>`组件可以在用户浏览应用程序时更新`history`。
- en: 'After rebuilding the application on the emulator:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器上重新构建应用程序后：
- en: '![](Images/317f8265-8360-4d55-9354-3a4a7df48933.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/317f8265-8360-4d55-9354-3a4a7df48933.png)'
- en: When you select either of the links, `ContentView` is updated with the component
    rendered as a result of a `<Route>` match.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择任一链接时，`ContentView`将使用由`<Route>`匹配渲染的组件进行更新。
- en: The preceding functionality is similar to how `BrowserRouter` enables you to
    navigate through various routes defined in the application. Similar to the `<Route>`
    and `<Link>` components, other components such as `<Switch>`, `<Redirect>`, and
    `<NavLink>` behave the same in a React Native application. However, when you try
    to block the navigation using the `<Prompt>` component, React Native's `Alert` component
    should be used to display a confirmation message.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前述功能类似于`BrowserRouter`使您能够浏览应用程序中定义的各种路由。类似于`<Route>`和`<Link>`组件，其他组件，如`<Switch>`、`<Redirect>`和`<NavLink>`在React
    Native应用程序中的行为也是相同的。然而，当您尝试使用`<Prompt>`组件阻止导航时，应该使用React Native的`Alert`组件来显示确认消息。
- en: 'From NativeRouter''s implementation:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从NativeRouter的实现：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'NativeRouter provides a default implementation of the `getUserConfirmation` function,
    which makes use of the `Alert` component defined in the `react-native` package
    to display a confirmation message to the user:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: NativeRouter提供了`getUserConfirmation`函数的默认实现，它使用`react-native`包中定义的`Alert`组件来向用户显示确认消息：
- en: '![](Images/ebf55586-f7e0-4a03-b0cd-61f6cf419d08.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ebf55586-f7e0-4a03-b0cd-61f6cf419d08.png)'
- en: 'This default behavior can be overridden by including the `getUserConfirmation`
    prop:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种默认行为可以通过包括`getUserConfirmation`属性来覆盖：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The <NativeRouter> component
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <NativeRouter>组件
- en: The `NativeRouter` component uses the `MemoryRouter` component defined in the
    `react-router` package to provide routing support in a React Native application. `MemoryRouter`
    is used when you want to maintain the browsing history in memory without updating
    the URL in the address bar. It's particularly useful in non-browser environments
    where an address bar is not available. The `MemoryRouter` component creates a
    `history` object using the `createMemoryHistory` class available in the `history`
    package. This `history` object is then provided to the low-level `<Router>` interface.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`NativeRouter`组件使用`react-router`包中定义的`MemoryRouter`组件在React Native应用程序中提供路由支持。当您希望在内存中保留浏览历史记录而不更新地址栏中的URL时，可以使用`MemoryRouter`。这在没有地址栏的非浏览器环境中特别有用。`MemoryRouter`组件使用`history`包中可用的`createMemoryHistory`类创建一个`history`对象。然后将此`history`对象提供给低级别的`<Router>`接口。'
- en: 'In `NativeRotuer.js`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在`NativeRotuer.js`中：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then the `MemoryRouter` component creates a `history` object using `createMemoryHistory`,
    in `MemoryRouter.js`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`MemoryRouter`组件使用`createMemoryHistory`在`MemoryRouter.js`中创建一个`history`对象：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `NativeRouter` component accepts props: `initialEntries`, `initialIndex`,
    `getUserConfirmation`, `keyLength`, and `children`. As mentioned previously, a
    default implementation for `getUserConfirmation` is included in the `NativeRouter` class
    and both `keyLength` and `children` props behave similarly to other Router components,
    as mentioned in previous chapters.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`NativeRouter`组件接受props：`initialEntries`，`initialIndex`，`getUserConfirmation`，`keyLength`和`children`。如前所述，`NativeRouter`类中包含了`getUserConfirmation`的默认实现，而`keyLength`和`children`属性的行为与前几章中提到的其他路由器组件类似。'
- en: Let's take a look at `initialEntries` and `initialIndex` props.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`initialEntries`和`initialIndex`属性。
- en: The initialEntries prop
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: initialEntries属性
- en: 'The `initialEntries` prop is used to populate the history stack with a list
    of locations:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: initialEntries属性用于使用位置列表填充历史堆栈：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'At the time of initializing `NativeRouter`, you could populate the history
    by providing an array of location paths. A location path could be a string or
    even an object of shape `{ pathname, search, hash, state }`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化NativeRouter时，您可以通过提供位置路径数组来填充历史记录。位置路径可以是字符串，甚至是形状为`{ pathname，search，hash，state
    }`的对象：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The initialIndex prop
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: initialIndex属性
- en: 'The `initialIndex` prop is used to specify the index value of the location
    in the `initialEntries` array to render when the application loads. For example,
    if the `initialEntries` array has two locations listed, then an `initialIndex`
    value of `1` loads the second entry; that is, a `<Route>` instance matching the
    pathname mentioned as the second entry in `initialEntries` array is rendered:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: initialIndex属性用于指定在应用程序加载时渲染在`initialEntries`数组中的位置的索引值。例如，如果`initialEntries`数组列出了两个位置，那么`initialIndex`值为`1`会加载第二个条目；也就是说，匹配`initialEntries`数组中第二个条目作为路径名的`<Route>`实例会被渲染：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this example, the `initialIndex` value is set to `1` and thus the `<Route>` matching
    the location path `/dashboard` is rendered when the application loads.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`initialIndex`的值设置为`1`，因此当应用程序加载时，匹配位置路径`/dashboard`的`<Route>`被渲染。
- en: The <BackButton> component
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <BackButton>组件
- en: 'By default, when you press the back button on an Android device, the application
    exits instead of navigating the user to the previous state in the history. The
    React Native library includes a `BackHandler` class, which lets you customize
    the behavior of the devices'' hardware back button. The `<BackButton>` component
    in React Router uses the `BackHandler` class to customize the behavior of the
    back button on an Android device:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在Android设备上按下返回按钮时，应用程序会退出，而不是将用户导航到历史记录中的上一个状态。React Native库包括一个`BackHandler`类，它允许您自定义设备的硬件返回按钮的行为。React
    Router中的`<BackButton>`组件使用`BackHandler`类来自定义Android设备上返回按钮的行为：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `<BackButton>` component can be included anywhere in the application. In
    the preceding example, the component is included in the root component and it
    does not include any child components. Please note that the `<BackButton>` component
    does not render anything on the viewport; rather, it facilitates the interaction
    with the devices' back button.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`<BackButton>`组件可以包含在应用程序的任何位置。在前面的示例中，该组件包含在根组件中，不包含任何子组件。请注意，`<BackButton>`组件不会在视口上呈现任何内容；相反，它促进了与设备返回按钮的交互。'
- en: 'Here''s the workflow:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是工作流程：
- en: '![](Images/3ee74a56-b270-4210-a09c-3bc8a798ee30.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3ee74a56-b270-4210-a09c-3bc8a798ee30.png)'
- en: Whilst on the Dashboard screen (at path `/dashboard`), when you click the devices'
    back button, the user is navigated to the home page (at path `/`).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在仪表板屏幕（路径为`/dashboard`）上，当您点击设备的返回按钮时，用户将被导航到主页（路径为`/`）。
- en: Creating Deeplinks with <DeepLinking>
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用<DeepLinking>创建深层链接
- en: In a web application, the HTTP URL refers to a location that can be accessed
    by entering the same in the address bar of the browser. In Single Page Applications,
    this location refers to a specific route that the user can navigate to. In the
    context of a mobile application, `DeepLink` refers to a specific page or content
    that you would want to view. For example, when you click on a link on a mobile
    device, instead of opening a new tab in the browser window, an application is
    launched and the requested page is shown.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中，HTTP URL引用的位置可以通过在浏览器的地址栏中输入来访问。在单页应用程序中，此位置指的是用户可以导航到的特定路由。在移动应用程序的上下文中，`DeepLink`指的是您想要查看的特定页面或内容。例如，当您在移动设备上点击链接时，应用程序会启动，而不是在浏览器窗口中打开新标签，并显示所请求的页面。
- en: Unlike web applications, which use HTTP to refer to a specific location, applications
    on a mobile device need to declare a URI scheme for the application. For example,
    the Twitter application uses the URI scheme `twitter://` and thus you could view
    their Twitter profile by referring to the URI `twitter://profile`. Deeplinks are
    very helpful when the user clicks on links in an email or accesses push notification
    messages, which navigate the user to the application to show the requested content.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与Web应用程序不同，移动设备上的应用程序需要为应用程序声明URI方案，而不是使用HTTP引用特定位置。例如，Twitter应用程序使用URI方案`twitter://`，因此您可以通过引用URI
    `twitter://profile` 查看他们的Twitter个人资料。当用户点击电子邮件中的链接或访问推送通知消息时，深层链接非常有用，这些链接将用户导航到应用程序以显示所请求的内容。
- en: React Native provides interfaces that allow you to create Deeplinks for devices
    on both iOS and Android platforms. In this section, we will take a look at how
    to create Deeplinks to an application's content on an Android device and thus
    we require Android Studio to be installed. Android Studio allows us to create
    virtual devices (AVD) that can then be used to test Deeplinks.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: React Native提供了接口，允许您在iOS和Android平台上为设备创建深层链接。在本节中，我们将看看如何在Android设备上创建深层链接，因此我们需要安装Android
    Studio。Android Studio允许我们创建虚拟设备（AVD），然后用于测试深层链接。
- en: A step-by-step guide to installing the necessary components on iOS and Android
    is detailed in the React Native documentation: [https://facebook.github.io/react-native/docs/getting-started.html](https://facebook.github.io/react-native/docs/getting-started.html).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在React Native文档中详细介绍了在iOS和Android上安装必要组件的逐步指南：[https://facebook.github.io/react-native/docs/getting-started.html](https://facebook.github.io/react-native/docs/getting-started.html)。
- en: After installing Android Studio and creating an AVD, the application needs to
    be configured with a URI scheme. To add the URI scheme, some of the native files
    need to be updated, and to get access to these native files, you need to eject
    from the current setup.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Android Studio并创建AVD后，需要为应用程序配置URI方案。要添加URI方案，需要更新一些本机文件，并且要访问这些本机文件，需要退出当前设置。
- en: Ejecting from the create-react-native-app
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从create-react-native-app中退出
- en: 'The `create-react-native-app` CLI is a very good option for scaffolding a React
    Native application and for testing the application on an emulator. However, to
    test `DeepLinking` we would need to include entries in the manifest file and thus
    it''s required that we eject from the configuration using the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`create-react-native-app` CLI是一个非常好的选项，可以为React Native应用程序提供脚手架和在模拟器上测试应用程序。然而，要测试`DeepLinking`，我们需要在清单文件中包含条目，因此需要使用以下命令退出配置：'
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The previous command will generate configuration files for iOS and Android platforms.
    This bare-minimum configuration allows you to generate a `.ipa` file for an iOS
    device and a `.apk` file for an Android device. In this section, we will see how
    we can generate the `.apk` file, which will then be deployed to an AVD.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将为iOS和Android平台生成配置文件。这个最基本的配置允许你为iOS设备生成一个`.ipa`文件，为Android设备生成一个`.apk`文件。在本节中，我们将看到如何生成`.apk`文件，然后部署到AVD上。
- en: 'After ejecting, you will see various directories and files generated for both
    iOS and Android:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 退出后，你会看到为iOS和Android生成的各种目录和文件：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The next step is to build and run the application on the Android device:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在Android设备上构建和运行应用程序：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The previous command will run the build script and generate the `.apk` file,
    which gets deployed on an AVD. Please ensure that you have the virtual device
    running before executing the previous command.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将运行构建脚本并生成`.apk`文件，然后部署到AVD上。请确保在执行上一个命令之前虚拟设备正在运行。
- en: To configure the URI scheme on an Android device, the `AndroidManifest.xml` manifest
    file located at the `/android/app/src/main` path needs to be updated. In the next
    section, we will see the configuration that needs to be added to the manifest
    file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Android设备上配置URI方案，需要更新位于`/android/app/src/main`路径的`AndroidManifest.xml`清单文件。在下一节中，我们将看到需要添加到清单文件中的配置。
- en: Adding <intent-filter> to the manifest file
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向清单文件添加<intent-filter>
- en: The `AndroidManifest.xml` file contains meta information about the application,
    and it is used to declare various components present in the application. These
    components are activated using intent filters. An `<intent-filter>` instance in
    the manifest file is used to define the capabilities of the application and in
    defining a policy on how other applications would interact with the application.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`AndroidManifest.xml`文件包含有关应用程序的元信息，并用于声明应用程序中存在的各种组件。这些组件使用意图过滤器进行激活。清单文件中的`<intent-filter>`实例用于定义应用程序的功能，并定义其他应用程序与应用程序交互的策略。'
- en: 'When you eject from the configuration, the `AndroidManifest.xml` file is generated:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当你退出配置时，`AndroidManifest.xml`文件将被生成：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, `<intent-filter>` has the action and the category defined for the application
    as `android.intent.action.MAIN` and `android.intent.category.LAUNCHER`. The previous `intent-filter`
    enables the application to be seen on the user's device and when the user taps
    on the application, `MainActivity` (see the activity tag) in the application is
    triggered.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<intent-filter>`为应用程序定义了动作和类别，分别为`android.intent.action.MAIN`和`android.intent.category.LAUNCHER`。前一个`intent-filter`使应用程序能够在用户设备上看到，并且当用户点击应用程序时，应用程序中的`MainActivity`（请参阅activity标签）会被触发。
- en: 'Similarly, `intent-filter` for defining a URI scheme for the application can
    be added to the manifest file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，用于为应用程序定义URI方案的`intent-filter`可以添加到清单文件中：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, the `<data>` tag is used to specify the URI scheme for the application.
    The `android:scheme` attribute in the `<data>` tag is used to specify the scheme
    name and the `android:host` attribute is used to specify the type of `hostname`
    to use for the application. Thus the `deeplink://app.chapter7.com` URI is used
    to access the home page in the application. A route with the `/dashboard` path
    can be accessed using this URI: `deeplink://app.chapter7.com/dashboard`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<data>`标签用于指定应用程序的URI方案。`<data>`标签中的`android:scheme`属性用于指定方案名称，`android:host`属性用于指定应用程序使用的`hostname`类型。因此，`deeplink://app.chapter7.com`
    URI用于访问应用程序中的主页。可以使用此URI访问具有`/dashboard`路径的路由：`deeplink://app.chapter7.com/dashboard`。
- en: The next step is to use React Router's `<DeepLinking>` component so that the
    application can react to the incoming request and navigate the user to the request
    route.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用React Router的`<DeepLinking>`组件，以便应用程序可以对传入的请求做出反应，并将用户导航到请求的路由。
- en: Including the <DeepLinking> component
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包括<DeepLinking>组件
- en: The `<DeepLinking>` component in the `react-router-native` package uses React
    Native's `Linking` interface to listen to the changes in the URL. Whenever a change
    is detected, the user is navigated to the requested path by adding an entry in
    the history stack.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-router-native`包中的`<DeepLinking>`组件使用React Native的`Linking`接口来监听URL的更改。每当检测到更改时，用户就会通过在历史堆栈中添加条目来导航到请求的路径。'
- en: 'The `<DeepLinking>` component can be included anywhere in the application:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`<DeepLinking>`组件可以包含在应用程序的任何位置：'
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, the `<DeepLinking>` component is included in the `RootComponent` of the
    application, and also the `<Route>` paths are updated with the prefix `app.chapter7.com` to
    match the hostname declared in the `AndroidManifest.xml` file.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<DeepLinking>`组件包含在应用程序的`RootComponent`中，并且`<Route>`路径使用前缀`app.chapter7.com`进行更新，以匹配`AndroidManifest.xml`文件中声明的主机名。
- en: 'To test deep-linking, try the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试深层链接，请尝试以下命令：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The previous command should launch the application on the AVD and navigate you
    to the route with the `/dashboard` path.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令应该在AVD上启动应用程序，并将您导航到具有`/dashboard`路径的路由。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at how React Router's `<NativeRouter>` component
    can be used in a React Native application. The `<NativeRouter>` component is available
    in the `react-router-native` package, and it uses the `<MemoryRouter>` component
    internally, which is defined in the `react-router` package. The `<NativeRouter>`
    component accepts props: `initialEntries`, `initialIndex`, `getUserConfirmation`,
    `keyLength`, and `children`. Also, it provides a default implementation for the `getUserConfirmation`
    function, which uses React Native's `Alert` component to display a confirmation
    message. This confirmation message is shown when the `<Prompt>` component is included
    in the application and the user tries to navigate away from the current route.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一下React Router的`<NativeRouter>`组件如何在React Native应用程序中使用。`<NativeRouter>`组件包含在`react-router-native`包中，并在内部使用`react-router`包中定义的`<MemoryRouter>`组件。`<NativeRouter>`组件接受props：`initialEntries`、`initialIndex`、`getUserConfirmation`、`keyLength`和`children`。此外，它为`getUserConfirmation`函数提供了默认实现，该函数使用React
    Native的`Alert`组件显示确认消息。当应用程序中包含`<Prompt>`组件并且用户尝试从当前路由导航时，将显示此确认消息。
- en: The `<BackButton>` component in `react-router-native` is a wrapper around React
    Native's `BackHandler` class, which listens to the devices' back button and navigates
    the user back by one entry in the history stack. The `<DeepLinking>` component
    is used to handle deep links to the content in the application. The component
    uses React Native's `Linking` interface to listen to the URL changes and it navigates
    the user to the requested route when the application is accessed using a deep
    link URI scheme. To define a URI scheme for the application, the `AndroidManifest.xml` manifest
    file is updated with `<intent-filter>` for the main activity (`.MainActivity`). `intent-filter`
    declares the URI scheme and the hostname to use to access the content inside the
    application.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`<BackButton>`组件在`react-router-native`中是React Native的`BackHandler`类的包装器，它监听设备的返回按钮，并通过历史堆栈中的一个条目将用户导航回去。`<DeepLinking>`组件用于处理应用程序中内容的深层链接。该组件使用React
    Native的`Linking`接口来监听URL的更改，并在使用深层链接URI方案访问应用程序时将用户导航到请求的路由。要为应用程序定义URI方案，需要更新`AndroidManifest.xml`清单文件，为主要活动（`.MainActivity`）添加`<intent-filter>`。`intent-filter`声明要使用的URI方案和主机名以访问应用程序内的内容。'
- en: In the next chapter, we will take a look at the state management tool, Redux,
    and understand how React Router can be used in conjunction with Redux.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下状态管理工具Redux，并了解如何将React Router与Redux结合使用。
