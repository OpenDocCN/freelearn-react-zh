- en: Exploring Popular Composition Patterns
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 探索流行的组合模式
- en: Now, it's time to learn how to make components communicate with each other effectively.
    React is powerful because it lets you build complex applications comprising small,
    testable, and maintainable components. Applying this paradigm, you can take control
    of every single part of the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候学习如何使组件有效地相互通信了。React之所以强大，是因为它让您构建由小型、可测试和可维护组件组成的复杂应用程序成为可能。应用这种范式，您可以控制应用程序的每个部分。
- en: In this chapter, we will go through some of the most popular composition patterns
    and tools.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一些最流行的组合模式和工具。
- en: 'We will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: How components communicate with each other using props and children
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件如何使用props和children相互通信
- en: The container and presentational patterns and how they can make our code more
    maintainable
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器和表示模式以及它们如何使我们的代码更易于维护
- en: What **higher-order components** (**HOCs**) are and how, thanks to them, we
    can structure our applications in a better way
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高阶组件**（HOCs）是什么，以及如何借助它们更好地构建我们的应用程序'
- en: What the function of the child component pattern is and what its benefits are
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子组件模式的功能及其好处
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，您将需要以下内容：
- en: Node.js 12+
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: Visual Studio Code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: You can find the code for this chapter in the book's GitHub Repository at [https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter04](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter04)[.](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter04)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在书籍的GitHub存储库中找到本章的代码[https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter04](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter04)。
- en: Communicating components
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通信组件
- en: Reusing functions is one of our goals as developers, and in the previous chapter,
    we saw how React makes it easy to create reusable components. **Reusable components**  can
    be shared  across  multiple domains of your application to avoid duplication.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 重用函数是我们作为开发人员的目标之一，在上一章中，我们看到了React如何轻松创建可重用组件。可重用组件可以在应用程序的多个领域之间共享，以避免重复。
- en: Small components with a clean interface  can  be composed together to create
    complex applications that are powerful and maintainable at the same time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 具有清晰接口的小组件可以组合在一起，以创建同时强大又易于维护的复杂应用程序。
- en: 'Composing React components is pretty straightforward; you just have to include
    them in the render:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 编写React组件非常简单；您只需在渲染中包含它们：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For example, you can create a  `Profile`  component by simply composing a  `Picture`
    component to display the profile image and a  `UserName`  component to display
    the name and the screen name of the user.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以通过简单地将`Picture`组件组合到`Profile`组件中来显示配置文件图像，并将`UserName`组件组合到其中以显示用户的名称和屏幕名称。
- en: In this way, you can produce new parts of the user interface very quickly, writing
    only a few lines of code. Whenever you compose components, as in the  preceding  example,
    you share data between them using  props. Props are the way a parent component
    can pass its data down the tree to every component that needs it (or part of it).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，您可以非常快速地生成用户界面的新部分，只需编写几行代码。每当您组合组件时，就像前面的例子一样，您可以使用props在它们之间共享数据。Props是父组件将其数据传递到树中每个需要它（或部分需要它）的组件的方式。
- en: When a component passes some props to another component, it is called the **owner,**
    irrespective of the parent-child relationship between them. For example, in the
    preceding snippet, `Profile` is not the direct parent of `Picture` (the `div`
    tag is), but `Profile` owns `Picture` because it passes down the props to it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个组件将一些属性传递给另一个组件时，不管它们之间的父子关系如何，都称为**所有者**。例如，在前面的片段中，`Profile`不是`Picture`的直接父级（`div`标签是），但`Profile`拥有`Picture`，因为它将属性传递给它。
- en: In the next section, you will learn about the `children` prop and how to use
    it correctly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习有关`children`属性以及如何正确使用它的知识。
- en: Using the children prop
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用children属性
- en: There is a special prop that can be passed from the owners to the components
    defined inside their render—`children`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个特殊的属性可以从所有者传递给其渲染内定义的组件——`children`。
- en: In the React documentation, it is described as  **opaque**  because it is a
    property that does not tell you anything about the value it contains. Subcomponents
    defined inside the render of a parent component usually receive props that are
    passed as attributes of the component itself in JSX, or as a second parameter
    of the  `_jsx`  function. Components can also be defined with nested components
    inside them, and they  can  access those children using the `children` prop.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在React文档中，它被描述为**不透明**，因为它是一个不告诉您包含的值的属性。通常在父组件的渲染内定义的子组件会接收作为JSX组件本身的属性传递的属性，或者作为`_jsx`函数的第二个参数。组件也可以在其中定义嵌套组件，并且它们可以使用`children`属性访问这些子组件。
- en: 'Consider that we have a  `Button`  component that has a `text` property representing
    the text of the button:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个`Button`组件，它有一个`text`属性表示按钮的文本：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The component can be used in the following way:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件可以以以下方式使用：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And this will render the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将呈现以下代码：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, suppose we want to use the same button with the same class name in multiple
    parts of our application, and we also want to be able to display more than a simple
    string. Our UI consists of buttons with text, buttons with text and icons, and
    buttons with text and labels.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想在应用程序的多个部分中使用相同的按钮和相同的类名，并且我们还想能够显示不止一个简单的字符串。我们的UI由带有文本的按钮，带有文本和图标的按钮以及带有文本和标签的按钮组成。
- en: In most cases, a good solution would be to add multiple parameters to `Button`
    or to create different versions of `Button`, each one with its single specialization,
    for example, `IconButton`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，一个好的解决方案是向`Button`添加多个参数，或者创建不同版本的`Button`，每个版本都有自己的专业化，例如`IconButton`。
- en: 'However, we should realize that `Button`  could just be a wrapper, and we are
    able to render any element inside it and use the  `children`  property:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们应该意识到`Button`可能只是一个包装器，我们可以在其中呈现任何元素并使用`children`属性：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: By passing the `children` prop, we are not limited to a simple single text property,
    but we  can  pass any element to `Button`, and it is rendered in place of the  `children`  property.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递`children`属性，我们不仅限于一个简单的单文本属性，而是可以将任何元素传递给`Button`，并且它将呈现在`children`属性的位置。
- en: In this case,  any  element that we wrap inside the  `Button`  component will
    be rendered as a child of the `button` element with `btn` as the class name.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们在`Button`组件内部包装的任何元素都将作为`button`元素的子元素呈现，其中`btn`是类名。
- en: 'For example, if we want to render an image inside the button and some text
    wrapped into a `span` tag, we can do this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想在按钮内部呈现一张图片，并将一些文本包裹在`span`标签中，我们可以这样做：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding snippet gets rendered in the browser as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的片段在浏览器中呈现如下：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is a pretty convenient way to allow components to accept any  `children`  elements
    and wrap those elements inside a predefined parent.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种非常方便的方式，允许组件接受任何`children`元素，并将这些元素包装在预定义的父元素中。
- en: Now, we can pass images, labels, and even other React components inside the  `Button`
    component, and they will be rendered as its children. As you can see in the preceding
    example, we defined the `children` property as an array, which means that we can
    pass any number  of  elements as the component's children.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将图像、标签甚至其他React组件传递到`Button`组件中，并且它们将作为其子元素呈现。正如您在前面的示例中所看到的，我们将`children`属性定义为数组，这意味着我们可以将任意数量的元素作为组件的子元素传递。
- en: 'We can pass a single child, as shown in the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以传递单个子元素，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's now explore the container and the presentational pattern in the next section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中探索容器和展示模式。
- en: Exploring the container and presentational patterns
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索容器和展示模式
- en: In the last chapter, we saw how to take a coupled component and make it reusable
    step by step. Now we will see how to apply a similar pattern to our  components  to
    make them clearer and more maintainable.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了如何逐步使耦合的组件可重用。现在我们将看到如何将类似的模式应用到我们的组件中，使它们更清晰和更易维护。
- en: React components  typically  contain a mix of  *logic*  and  *presentation.*
    By logic, we refer to anything that is unrelated to the UI, such as API calls,
    data manipulation, and event handlers. The presentation is the part inside `render`
    where we create the elements to be displayed on the UI.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: React组件通常包含*逻辑*和*呈现*的混合。逻辑指的是与UI无关的任何内容，例如API调用、数据处理和事件处理程序。呈现是指在`render`中创建要显示在UI上的元素的部分。
- en: In React, there are simple and powerful patterns, known as  **container** and
    **presentational**, which we can apply when creating components that help us to  separate  those
    two concerns.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，有一些简单而强大的模式，称为**容器**和**展示**，我们在创建组件时可以应用这些模式，帮助我们分离这两个关注点。
- en: Creating well-defined boundaries between logic and presentation not only makes
    components more reusable, but also provides many other benefits, which you will
    learn about in this section. Again, one of the best ways to learn new concepts
    is by seeing practical examples, so let's delve into some code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在逻辑和呈现之间创建明确定义的边界不仅使组件更具重用性，还提供了许多其他好处，您将在本节中了解到。再次强调，学习新概念的最佳方式之一是通过看到实际示例，所以让我们深入一些代码。
- en: Suppose we have a component that uses geolocation APIs to get the position of
    the user and displays the latitude and longitude on the page in the browser.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个组件，它使用地理位置API来获取用户的位置，并在浏览器中显示纬度和经度。
- en: 'First, we create a  `Geolocation.tsx`  file in our `components` folder and
    define the  `Geolocation`  component using a functional component:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在我们的`components`文件夹中创建一个`Geolocation.tsx`文件，并使用函数组件定义`Geolocation`组件：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We then define our states:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义我们的状态：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we can use the `useEffect` Hook to fire the request to the APIs:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`useEffect` Hook来向API发送请求：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When the browser returns the data, we store the result into the state using
    the following function (place this function before the `useEffect` Hook):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器返回数据时，我们使用以下函数将结果存储到状态中（将此函数放在`useEffect` Hook之前）：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, we show the `latitude` and `longitude` values:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们显示`latitude`和`longitude`的值：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It is important to note that, during the first `render`, `latitude` and `longitude`
    are  `null`  because we asked the browser for the coordinates when the component
    was mounted. In a real-world component, you might want to display a spinner until
    the data gets returned. To do that, you can use one of the conditional techniques
    we saw in  *Chapter 2, Cleaning Up Your Code.*
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，在第一次`render`期间，`latitude`和`longitude`是`null`，因为我们在组件挂载时要求浏览器返回坐标。在真实世界的组件中，您可能希望显示一个加载动画，直到数据返回。为此，您可以使用我们在*第2章，清理您的代码*中看到的条件技术之一。
- en: Now, this component does not have any problems, and it works as expected. Wouldn't
    it be nice to separate it from the part where the position gets requested and
    loaded to iterate faster on it?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个组件没有任何问题，并且按预期工作。将它与请求和加载位置的部分分开以便更快地迭代，这不是件好事吗？
- en: We will use the container and presentational patterns to isolate the presentational
    part. In this pattern, every component is split into two smaller ones, each one
    with its clear responsibilities. The container knows everything about the logic
    of the component and is where the APIs are called. It also deals with data manipulation
    and event handling.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用容器和呈现模式来隔离呈现部分。在这种模式中，每个组件都分成两个较小的组件，每个组件都有其明确的责任。容器了解组件的所有逻辑，并且是调用API的地方。它还处理数据操作和事件处理。
- en: The presentational component is where the UI is defined, and it receives data
    in the form of props from the container. Since the presentational component is
    usually logic-free, we can create it as a functional, stateless component.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 呈现组件是定义UI的地方，并且以props的形式从容器接收数据。由于呈现组件通常是无逻辑的，因此我们可以将其创建为功能性的无状态组件。
- en: There are no rules that say that the presentational component must not have
    a state (for example, it could keep a UI state inside it). In this case, we need
    a component to display the latitude and longitude, so we are going to use a simple
    function.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 没有规定呈现组件不能有状态的规则（例如，它可以在内部保留UI状态）。在这种情况下，我们需要一个组件来显示纬度和经度，因此我们将使用一个简单的函数。
- en: 'First of all, we should rename our  `Geolocation`  component to  `GeolocationContainer`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应该将我们的`Geolocation`组件重命名为`GeolocationContainer`：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We will also change the filename from  `Geolocation.tsx`  to  `GeolocationContainer.tsx`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将把文件名从`Geolocation.tsx`改为`GeolocationContainer.tsx`。
- en: This rule is not strict, but it is a best practice that's widely used in the
    React community to append `Container` to the end of the `Container` component
    name and give the original name to the presentational one.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则并不严格，但它是React社区中广泛使用的最佳实践，即在`Container`组件名称的末尾添加`Container`并给原始名称呈现。
- en: 'We also have to change the implementation of `render` and remove all the UI
    parts of it, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须更改`render`的实现并删除其中的所有UI部分，如下所示：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see in the preceding snippet, instead of creating the HTML  elements  inside
    the `return` of the container, we just use the presentational one (which we will
    create next), and we pass the state to it. The states are `latitude` and `longitude`,
    which are  `null`  by default, and they contain the real position of the user
    when the browser fires the callback.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上面的片段中所看到的，我们不是在容器的`return`中创建HTML元素，而是只使用呈现元素（接下来我们将创建），并将状态传递给它。状态是`latitude`和`longitude`，默认情况下为`null`，它们包含用户的真实位置，当浏览器触发回调时。
- en: 'Let''s create a new file, called  `Geolocation.tsx`, where we define the functional
    component as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新文件，名为`Geolocation.tsx`，在其中定义如下的功能组件：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Functional components are an incredibly elegant way to define UIs. They are
    pure functions that, given a `state`, return the elements of it. In this case,
    our function receives `latitude` and `longitude` from the owner, and it returns
    the markup structure to display it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 功能组件是定义用户界面的一种非常优雅的方式。它们是纯函数，给定一个 `state`，返回其中的元素。在这种情况下，我们的函数从所有者那里接收 `latitude`
    和 `longitude`，然后返回标记结构以显示它。
- en: 'If you run the components in the browser the first time, the browser will require
    your permission to allow it to know about your location:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您第一次在浏览器中运行组件，浏览器将要求您允许其了解您的位置：
- en: '![](assets/a4e9f236-5fa4-4679-b7ad-aaa48d69b873.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a4e9f236-5fa4-4679-b7ad-aaa48d69b873.png)'
- en: 'After you allow the browser to know your location, you will see something like
    this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在您允许浏览器了解您的位置之后，您将看到类似于这样的东西：
- en: '![](assets/fe41afa4-9f4c-467b-8936-75ee2b89713d.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fe41afa4-9f4c-467b-8936-75ee2b89713d.png)'
- en: Following the container and presentational pattern, we created a dumb reusable
    component that we can put in our Style Guide so that we can pass fake coordinates
    to it. If in some other parts of the application we need to display the same data
    structure, we do not have to create a new component; we just wrap this one into
    a new container that, for example, could load the latitude and longitude from
    a different endpoint.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循容器和展示模式，我们创建了一个愚蠢的可重用组件，我们可以将其放入我们的样式指南中，以便我们可以向其传递虚假坐标。如果在应用程序的其他部分中我们需要显示相同的数据结构，我们不需要创建一个新的组件；我们只需将这个组件包装到一个新的容器中，例如可以从不同的端点加载纬度和经度。
- en: At the same time, other developers in our team can improve the container that
    uses geolocation by adding some error-handling logic, without affecting its presentation.
    They can even build a temporary presentational component just to display and debug
    data and then replace it with the real presentational component when it is ready.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，我们团队中的其他开发人员可以通过添加一些错误处理逻辑来改进使用地理位置的容器，而不会影响其展示。他们甚至可以构建一个临时的展示组件来显示和调试数据，然后在准备就绪时用真正的展示组件替换它。
- en: Being able to work in parallel on the same component is a big win for teams,
    especially for those companies where building interfaces is an iterative process.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 能够并行在同一个组件上工作对团队来说是一个巨大的胜利，特别是对于那些构建界面是一个迭代过程的公司。
- en: This pattern is simple but very powerful, and when applied to big applications,
    it can make a difference when it comes to the speed of development and the maintainability
    of the project. On the other hand, applying this pattern without a real reason
    can give us the opposite problem and make the  **code base**  less useful as it
    involves the  creation  of more files and components.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式简单但非常强大，当应用于大型应用程序时，它可以在开发速度和项目可维护性方面产生巨大差异。另一方面，没有真正的原因应用这种模式可能会给我们带来相反的问题，并使
    **代码库** 变得不太有用，因为它涉及创建更多的文件和组件。
- en: So, we should  think  carefully when we decide that a component has to be refactored
    following the container and presentational patterns. In general, the right path
    to follow is starting with a single component and splitting it only when the logic
    and the presentation become too coupled where they shouldn't be.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们决定一个组件必须按照容器和展示模式进行重构时，我们应该仔细考虑。一般来说，正确的做法是从一个单一的组件开始，只有当逻辑和展示过于耦合时才进行拆分，而它们本不应该耦合在一起。
- en: 'In our example, we began from a single component, and we realized that we could
    separate the API call from the markup. Deciding what to put in the container and
    what goes into the presentation is not always straightforward; the following points
    should help you make that decision:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们从一个单一的组件开始，然后意识到我们可以将 API 调用与标记分开。决定将什么放在容器中，什么放在展示中并不总是直截了当的；以下几点应该帮助您做出决定：
- en: 'The following are the characteristics of container components:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是容器组件的特点：
- en: They are more concerned with behavior.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们更关注于行为。
- en: They render their presentational components.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们渲染它们的展示组件。
- en: They make API calls and manipulate data.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们进行API调用和数据操作。
- en: They define event handlers.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们定义事件处理程序。
- en: 'The following are the characteristics of presentational components:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是展示组件的特点：
- en: They are more concerned with the visual representation.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们更关注于视觉表现。
- en: They render the HTML markup (or other components).
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们渲染HTML标记（或其他组件）。
- en: They receive data from the parents in the form of props.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们以props的形式从父组件接收数据。
- en: They are often written as stateless functional components.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们通常被写成无状态的功能组件。
- en: As you can see, these patterns form a really powerful tool that will help you
    to develop your web applications faster. Let's see what HOCs are in the next section.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这些模式形成了一个非常强大的工具，将帮助您更快地开发您的Web应用程序。让我们在下一节中看看HOCs是什么。
- en: Understanding HOCs
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解HOCs
- en: In the *Functional programming* section of  *Chapter 2, Cleaning Up Your Code*,
    we mentioned the concept of **h****igher-order functions**  (**HOFs**), which
    are functions that, given a function, enhance it with some extra behaviors, returning
    a new one. When we apply the idea of  HOFs to components, we call these **higher-order
    components** (or **HOCs** for brevity).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在《第2章，清理你的代码》的*函数式编程*部分，我们提到了**高阶函数**（**HOFs**）的概念，它们是这样的函数，给定一个函数，用一些额外的行为增强它，返回一个新的函数。当我们将HOFs的概念应用到组件上时，我们称之为**高阶组件**（或简称**HOCs**）。
- en: 'First of all, let''s see what `HoC` looks like:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看`HoC`是什么样子的：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: HOCs are functions that take a component as input and return an enhanced one
    as the output.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: HOCs是以一个组件作为输入，并返回一个增强的组件作为输出的函数。
- en: Let's start with a very simple example to understand what an enhanced component
    looks like.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个非常简单的例子开始，以了解增强组件是什么样子的。
- en: 'Suppose, for whatever reason, you need to attach the same  `className`  property
    to every component. You could go and change all the `render` methods by adding
    the  `className`  property to each of them, or you could write an HOC such as
    the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 假设出于某种原因，您需要将相同的`className`属性附加到每个组件上。您可以去改变所有的`render`方法，通过为每个方法添加`className`属性，或者您可以编写一个HOC，比如下面这样：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the React community, it is very common to have the prefix `with` for HOCs.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在React社区中，对于HOCs来说，使用`with`前缀是非常常见的。
- en: The preceding code can be a little difficult to understand initially; let's
    go through it together.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，上面的代码可能有点难以理解；让我们一起来看一下。
- en: We declare a  `withClassName`  function that takes a  `Component`  and returns
    another function. The returned function is a functional component that receives
    some props and renders the original component. The collected props are spread,
    and a  `className`  property with the `"my-class"`  value is passed to the functional
    component.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明一个`withClassName`函数，它接受一个`Component`并返回另一个函数。返回的函数是一个功能组件，它接收一些props并渲染原始组件。收集到的props被展开，并且一个带有`"my-class"`值的`className`属性被传递给功能组件。
- en: The reason why HOCs usually spread the props they receive on the component is
    because they tend to be transparent and only add the new behavior.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: HOC通常会将它们接收到的props展开到组件上，因为它们倾向于是透明的，只添加新的行为。
- en: This is pretty simple and not very useful, but it should give you a better understanding
    of what HOCs are and what they look like. Let's now see how we can use the  `withClassName`  HOC
    in our components.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，也不是很有用，但它应该让您更好地理解HOCs是什么样子的。现在让我们看看如何在我们的组件中使用`withClassName` HOC。
- en: 'First of all, we create a stateless  functional  component that receives the
    class name and applies it to a  `div` tag:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个无状态的函数组件，它接收类名并将其应用于`div`标签：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Instead of using the component directly, we pass it to an HOC, as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是直接使用组件，我们将其传递给HOC，如下所示：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Wrapping our components into the  `withClassName`  function, we ensure that
    it receives the  `className`  property.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的组件包装到`withClassName`函数中，确保它接收`className`属性。
- en: 'Now, let''s move on to something more exciting, and let''s create an HOC to
    detect the `InnerWidth`. First of all, we have to create a function that receives
    a `Component`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续做一些更令人兴奋的事情，让我们创建一个HOC来检测`InnerWidth`。首先，我们必须创建一个接收`Component`的函数：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You may have spotted a pattern in the way HOCs are named. It is a common practice
    to prefix HOCs that provide some information to the components they enhance using
    the  `with`  pattern.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到HOC的命名模式。习惯上，使用`with`模式为增强组件提供一些信息的HOC添加前缀。
- en: 'Now you need to define the `innerWidth` state and the `handleResize` function:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您需要定义`innerWidth`状态和`handleResize`函数：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then we add the effects:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们添加效果：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, the original component gets rendered in the following way:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，原始组件以以下方式呈现：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you may note here, we are spreading the props as we saw before, but we are
    also passing the `innerWidth` state.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在这里所注意到的，我们正在传播props，就像我们之前看到的那样，但我们也传递了`innerWidth`状态。
- en: We are storing the  `innerWidth`  value as a state to achieve the original behavior,
    but we do not pollute the state of the component; we use props instead.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`innerWidth`值存储为状态以实现原始行为，但我们不会污染组件的状态；我们使用props代替。
- en: Using props is always a good solution to enforce reusability.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用props始终是强制可重用性的好解决方案。
- en: Now, using an HOC and getting the  `innerWidth` value is pretty straightforward.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用HOC并获取`innerWidth`值非常简单。
- en: The new React Hooks can easily replace an HOC by creating custom Hooks.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 新的React Hooks可以轻松地通过创建自定义Hooks来替代HOC。
- en: 'We create a functional component that expects `innerWidth`  as a property:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个期望`innerWidth`作为属性的函数组件：
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We enhance it as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其改进如下：
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: First of all, we do not pollute any state, and we do not require the component
    to implement any function. This means that the component and the HOC are not coupled,
    and they can both be reused across the application.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们不会污染任何状态，也不需要组件实现任何函数。这意味着组件和HOC没有耦合，它们都可以在应用程序中重复使用。
- en: Again, using props instead of state lets us make our component dumb so that
    we can use it in our Style Guide, ignoring any complex logic and just passing
    down the props.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，使用props而不是state让我们的组件变得简单，这样我们就可以在我们的样式指南中使用它，忽略任何复杂的逻辑，只需传递props。
- en: In this particular case, we could create a component for each of the different  `innerWidth`  sizes
    we support.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种特殊情况下，我们可以为我们支持的不同`innerWidth`大小创建一个组件。
- en: 'Consider the following example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Or consider the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 或考虑以下情况：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As you can see, by using the HOCs we can pass a component and then return a
    new component with extra functionalities. Some of the most common HOCs are `connect`
    from Redux and `createFragmentContainer` from Relay.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，通过使用HOC，我们可以传递一个组件，然后返回一个具有额外功能的新组件。一些最常见的HOC是Redux中的`connect`和Relay中的`createFragmentContainer`。
- en: Understanding FunctionAsChild
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解FunctionAsChild
- en: There is a pattern that is gaining consensus within the React community, known
    as  `FunctionAsChild`. It is widely used in the popular  `react-motion` library,
    which we will see in  *Chapter 7, Writing Code for the Browser*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: React社区中有一种模式正在获得共识，被称为`FunctionAsChild`。它被广泛应用于流行的`react-motion`库中，我们将在*第7章，为浏览器编写代码*中看到。
- en: 'The main concept is that, instead of passing a child in the form of a component,
    we define a function that can receive parameters from the parent. Let''s see what
    it looks like:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 主要概念是，我们不是以组件的形式传递子组件，而是定义一个可以从父组件接收参数的函数。让我们看看它是什么样子的：
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you can see, `FunctionAsChild`  is a component that has a `children` property
    defined as a function and, instead of being used as a JSX expression, it gets
    called.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`FunctionAsChild`是一个具有函数作为`children`属性定义的组件，而不是作为JSX表达式使用，它被调用。
- en: 'The preceding component can be used in the following way:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的组件可以这样使用：
- en: '[PRE29]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It is as simple as it looks: the children function is fired in the `render`
    method of the parent, and it returns the  `Hello, World!`  text wrapped in a  `div`
    tag, which is displayed on the screen.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 就像它看起来那样简单：`render`方法中触发`children`函数，并返回包裹在`div`标签中的`Hello, World!`文本，这将显示在屏幕上。
- en: Let's delve into a more meaningful example where the parent component passes
    some parameters to the `children` function.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入一个更有意义的例子，父组件向`children`函数传递一些参数。
- en: 'Create a `Name` component that expects a function as `children` and passes
    it the `World` string:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`Name`组件，它期望一个函数作为`children`并将`World`字符串传递给它：
- en: '[PRE30]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The preceding component can be used in the following way:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的组件可以这样使用：
- en: '[PRE31]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The snippet renders  `Hello, World!`  again, but this time the name has been
    passed by the parent. It should be clear how this pattern works, so let's look
    at the advantages of this approach.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段再次呈现`Hello, World!`，但这次名称是由父组件传递的。应该清楚这种模式是如何工作的，所以让我们看看这种方法的优势。
- en: The first benefit is that we can wrap components, passing the variables at runtime
    rather than fixed properties, as we do with HOCs.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个好处是，我们可以在运行时包装组件，而不是使用HOCs时传递固定属性。
- en: 'A good example is a  `Fetch`  component that loads  some data from an API endpoint
    and returns it to the  `children`  function:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是`Fetch`组件，它从API端点加载一些数据并将其返回给`children`函数：
- en: '[PRE32]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Secondly, composing components with this approach does not force `children`  to
    use some predefined prop names. Since the function receives variables, their names
    can be decided by the developers who use the component. That makes the `FunctionAsChild`
    solution more flexible.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，使用这种方法组合组件不会强制`children`使用一些预定义的属性名称。由于函数接收变量，它们的名称可以由使用组件的开发人员决定。这使得`FunctionAsChild`解决方案更加灵活。
- en: Last but not least, the wrapper is highly reusable because it does not make
    any assumptions about `children` it receives—it just expects a function. Due to
    this, the same `FunctionAsChild` component can be used in different parts of the
    application, serving various `children` components.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但并非最不重要的是，包装器非常可重用，因为它不对接收到的`children`做任何假设——它只是期望一个函数。因此，相同的`FunctionAsChild`组件可以在应用程序的不同部分使用，为各种`children`组件提供服务。
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to compose our reusable components and make
    them communicate effectively. Props are a way to decouple components from each
    other and create a clean and well-defined interface.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何组合我们的可重用组件并使它们有效地进行通信。Props是一种将组件解耦并创建清晰和明确定义接口的方法。
- en: Then, we went through some of the most interesting composition patterns in React.
    The first one was the so-called container and the other was the presentational
    pattern. These patterns helped us to separate the logic from the presentation
    and create more specialized components with a single responsibility.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学习了React中一些最有趣的组合模式。第一个是所谓的容器，另一个是表示模式。这些模式帮助我们将逻辑与呈现分离，并创建具有单一责任的更专业化的组件。
- en: We learned how to deal with context without needing to couple our components
    to it, thanks to HOCs. Finally, we saw how we could compose components dynamically
    by following the `FunctionAsChild` pattern.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学会了如何处理上下文，而无需将我们的组件与其耦合，这要归功于HOCs。最后，我们看到了如何通过遵循“FunctionAsChild”模式来动态组合组件。
- en: In the next chapter, we will learn about GraphQL and how to create JWT tokens,
    perform a login, and create models with Sequelize.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习GraphQL以及如何创建JWT令牌，执行登录操作，并使用Sequelize创建模型。
