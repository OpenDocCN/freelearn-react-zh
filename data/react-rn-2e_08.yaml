- en: Extending Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展组件
- en: 'In this chapter, you''ll learn how to add new capabilities to existing components
    by extending them. There are two React mechanisms that you can use to extend a
    component:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何通过扩展现有组件来添加新的功能。有两种 React 机制可以用来扩展组件：
- en: Component inheritance
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件继承
- en: Composition with higher-order components
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用高阶组件进行组合
- en: You'll start by learning about basic component inheritance, just like object-oriented
    class inheritance. Then you'll implement some higher-order components used to
    compose React components.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您将首先学习基本组件继承，就像面向对象的类继承一样。然后，您将实现一些用于组合 React 组件的高阶组件。
- en: Component inheritance
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件继承
- en: Components are just classes. In fact, when you implement a component using **ES2015**
    class syntax, you extend the base `Component` class from React. You can keep on
    extending your classes like this to create your own base components.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 组件就是类。事实上，当您使用 **ES2015** 类语法实现组件时，您会从 React 扩展基类 `Component`。您可以继续像这样扩展您的类，以创建自己的基本组件。
- en: In this section, you'll see how your components can inherit state, properties,
    and just about anything else, including JSX markup and event handlers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将看到您的组件可以继承状态、属性，以及几乎任何其他东西，包括 JSX 标记和事件处理程序。
- en: Inheriting state
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承状态
- en: 'Sometimes, you have several React components that use the same initial state.
    You can implement a base component that sets this initial state. Then, any components
    that want to use this as their initial state can extend this component. Let''s
    implement a base component that sets some basic state:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您有几个使用相同初始状态的 React 组件。您可以实现一个设置此初始状态的基本组件。然后，想要使用此作为其初始状态的任何组件都可以扩展此组件。让我们实现一个设置一些基本状态的基本组件：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The state is an immutable `Map`. This base component also implements immutable
    data setter and getter methods. Let''s implement a component that extends this
    one:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 状态是不可变的 `Map`。这个基本组件还实现了不可变数据的设置和获取方法。让我们实现一个扩展了这个组件的组件：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This component doesn''t actually have to set any initial state because it''s
    already set by `BaseComponent`. Since the state is already an immutable `Map`,
    you can tweak the initial state in `componentDidMount()` using `merge()`. Here''s
    what the rendered output looks like:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件实际上不需要设置任何初始状态，因为它已经被 `BaseComponent` 设置了。由于状态已经是不可变的 `Map`，您可以在 `componentDidMount()`
    中使用 `merge()` 调整初始状态。渲染输出如下所示：
- en: '![](Images/e02cbf22-0356-4bdc-9423-4f51752db9b3.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e02cbf22-0356-4bdc-9423-4f51752db9b3.png)'
- en: 'If you delete the default text in the input element, you can see that the placeholder
    text added by `MyComponent` to the initial state is applied as expected:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您删除输入元素中的默认文本，您会发现 `MyComponent` 添加到初始状态的占位文本会如预期般应用：
- en: '![](Images/fbbf16b0-ddb6-4f53-bd48-c3de4f29d678.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fbbf16b0-ddb6-4f53-bd48-c3de4f29d678.png)'
- en: You can also change the text to something else and the `onChange()` event handler
    will set the `name` state accordingly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将文本更改为其他内容，`onChange()` 事件处理程序将相应地设置 `name` 状态。
- en: Inheriting properties
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承属性
- en: 'Inheriting properties works by defining the default property values and the
    property types as static attributes of a base class. Any classes that inherit
    from this base class also inherit the property values and the property specs.
    Let''s take a look at a base class implementation:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将默认属性值和属性类型定义为基类的静态属性，来实现属性继承。从这个基类继承的任何类也会继承属性值和属性规范。让我们来看一个基类的实现：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The class itself doesn't actually do anything. The only reason to define it
    is so that there's a place to declare the default property values and their type
    constraints. Respectively, these are the `defaultProps` and the `propTypes` static
    class attributes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类本身实际上并没有做任何事情。定义它的唯一原因是为了声明默认的属性值和它们的类型约束的地方。分别是“defaultProps”和“propTypes”静态类属性。
- en: 'Now, let''s take a look at a component that inherits these properties:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一个继承这些属性的组件：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s try rendering `MyComponent` to make sure that the inherited properties
    are working as expected:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试渲染“MyComponent”以确保继承的属性按预期工作：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Despite the fact that `MyComponent` doesn't define any property defaults or
    types, you get the expected behavior. When you try to pass numbers to the `users`
    and `groups` properties, you don't see anything rendered. That's because `MyComponent`
    is expecting a `map()` method on these property values, and there isn't one.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管“MyComponent”没有定义任何属性默认值或类型，但你会得到预期的行为。当你尝试将数字传递给“users”和“groups”属性时，你不会看到任何渲染。这是因为“MyComponent”期望这些属性值上有一个“map（）”方法，而实际上并没有。
- en: 'The `ErrorBoundary` elements are used here to isolate errors. Without them,
    any of the `MyComponent` elements failing would cause other components on the
    page to fail as well, for example, by passing number values to users and groups.
    Here''s what the `ErrorBoundary` component looks like:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用“ErrorBoundary”元素来隔离错误。如果没有它们，任何“MyComponent”元素失败都会导致页面上的其他组件也失败，例如，通过将数字值传递给用户和组。下面是“ErrorBoundary”组件的样子：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This component uses the `componentDidCatch()` lifecycle method that you learned
    about in [Chapter 6](01d31b70-53c0-4d08-9bf7-93d0b513bced.xhtml), *The React Component
    Lifecycle*. If it catches an error, it sets the error state so that the `render()`
    method knows to not render the component that caused the error again. Here''s
    what the rendered content looks like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件使用了你在[第6章](01d31b70-53c0-4d08-9bf7-93d0b513bced.xhtml)中学到的“componentDidCatch（）”生命周期方法。如果捕获到错误，它会设置错误状态，以便“render（）”方法知道不再渲染导致错误的组件。下面是渲染的内容：
- en: '![](Images/befae03e-b792-4887-8ac2-7a4d4f504e0c.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/befae03e-b792-4887-8ac2-7a4d4f504e0c.png)'
- en: Inheriting JSX and event handlers
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承JSX和事件处理程序
- en: In this section, you'll learn about inheriting JSX and event handlers. You might
    want to use this approach if you have a single UI component that has the same
    UI elements and event handling logic, but there are differences in what the initial
    state should be, depending on where the component is used.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何继承JSX和事件处理程序。如果你有一个单一的UI组件，它具有相同的UI元素和事件处理逻辑，但在组件使用的位置上初始状态有所不同，那么你可能想使用这种方法。
- en: 'For example, a base class would define the JSX and event handler methods, while
    the more specific components define the initial state that''s unique to the feature.
    Here''s an example base class:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个基类会定义JSX和事件处理程序方法，而更具体的组件会定义特定于功能的初始状态。下面是一个基类的例子：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This base component renders a list of items that, when clicked, toggles the
    style of the item text. By default, the state of this component has an empty item
    list. This means that it is safe to render this component without setting the
    component state. However, that''s not very useful, so let''s give this list some
    items by inheriting the base component and setting the state:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基础组件渲染一个项目列表，当点击时，切换项目文本的样式。默认情况下，这个组件的状态有一个空的项目列表。这意味着可以安全地渲染这个组件，而不设置组件状态。然而，这并不是很有用，所以让我们通过继承基础组件并设置状态来给这个列表添加一些项目：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `componentDidMount()` lifecycle method can safely set the state of the component.
    The base component uses your `data` setter/getter to change the state of the component.
    Another thing that's handy about this approach is that if you want to override
    one of the event handlers of the base component, you can define the method in
    `MyComponent`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentDidMount()`生命周期方法可以安全地设置组件的状态。基本组件使用您的`data`设置器/获取器来改变组件的状态。这种方法的另一个方便之处是，如果您想要覆盖基本组件的事件处理程序之一，您可以在`MyComponent`中定义该方法。'
- en: 'Here''s what the list looks like when rendered:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染时，列表的样子如下：
- en: '![](Images/3a20f49c-5d9d-441f-8cb3-0e358c5947fc.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3a20f49c-5d9d-441f-8cb3-0e358c5947fc.png)'
- en: 'And here''s what the list looks like when all of the items have been clicked:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有项目都被点击时，列表的样子如下：
- en: '![](Images/99c1b546-33c7-422f-8203-570bef2b79a7.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/99c1b546-33c7-422f-8203-570bef2b79a7.png)'
- en: Composition with higher-order components
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用高阶组件进行组合
- en: In this section, you'll learn about **higher-order components**. If you're familiar
    with higher-order functions in functional programming, higher-order components
    work the same way. A **higher-order function** is a function that takes another
    function as input, and returns a new function as output. This returned function
    calls the original function in some way. The idea is to compose new behavior out
    of existing behavior.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解**高阶组件**。如果您熟悉函数式编程中的高阶函数，高阶组件的工作方式是相同的。**高阶函数**是一个以另一个函数作为输入的函数，并返回一个新函数作为输出。返回的函数以某种方式调用原始函数。其思想是通过现有行为组合新行为。
- en: With higher-order React components, you have a function that takes a component
    as input, and returns a new component as output. This is the preferred way to
    compose new behavior in React applications, and it seems that many of the popular
    React libraries are moving in this direction, if they haven't already. You get
    more flexibility when composing functionality this way.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用高阶React组件，您有一个以组件作为输入的函数，并返回一个新组件作为输出。这是在React应用程序中组合新行为的首选方式，而且似乎许多流行的React库正在朝着这个方向发展，如果它们还没有的话。通过这种方式组合功能时，您会获得更多的灵活性。
- en: Conditional component rendering
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件组件渲染
- en: One use case for a higher-order component is conditional rendering. For example,
    depending on the outcome of a predicate, the component is rendered or nothing
    is rendered. The predicate could be anything that's specific to the application,
    such as permissions or something like that.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 高阶组件的一个用例是条件渲染。例如，根据谓词的结果，渲染组件或不渲染任何内容。谓词可以是特定于应用程序的任何内容，比如权限或类似的东西。
- en: 'Let''s say you have the following component:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有以下组件：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, to control the display of this component, you can wrap it with another
    component. Wrapping is handled by the higher-order function.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要控制此组件的显示，您可以用另一个组件包装它。包装由高阶函数处理。
- en: If you hear the term "wrapper" in the context of React, it's probably referring
    to a higher-order component. Essentially, this is what it does; it wraps the component
    that you pass to it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在React的上下文中听到“包装器”这个术语，它可能指的是高阶组件。基本上，它的作用是包装您传递给它的组件。
- en: 'Now, let''s create a higher-order React component:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个高阶React组件：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The two arguments to this function are `Component`, which is the component that
    you're wrapping, and the `predicate` to call. If the call to `predicate()` returns
    `true`, then `<Component>` is returned. Otherwise, nothing will be rendered.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的两个参数是`Component`，即您要包装的组件，和要调用的`predicate`。如果对`predicate()`的调用返回`true`，那么将返回`<Component>`。否则，将不会渲染任何内容。
- en: 'Now, let''s actually compose a new component using this function, and your
    component that renders a paragraph of text:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实际使用这个函数来组合一个新的组件，以及渲染一个段落文本的组件：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You''ve just created two new components using `MyComponent`, `cond()`, and
    a `predicate` function. Here''s the rendered output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚使用`MyComponent`、`cond()`和`predicate`函数创建了两个新组件。这是渲染输出：
- en: '![](Images/5314290f-2c48-46df-b1b7-9a790269eb3b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5314290f-2c48-46df-b1b7-9a790269eb3b.png)'
- en: Providing data sources
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供数据源
- en: 'Let''s finish the chapter by looking at a more involved higher-order component
    example. You''ll implement a data store function that wraps a given component
    with a data source. This type of pattern is handy to know, because it''s used
    by React libraries such as **Redux**. Here''s the `connect()` function that''s
    used to wrap components:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看一个更复杂的高阶组件示例来完成本章。您将实现一个数据存储函数，用数据源包装给定的组件。了解这种模式很有用，因为它被React库（如**Redux**）使用。这是用于包装组件的`connect()`函数：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This module defines two internal immutable objects: `components` and `store`.
    The `components` list holds references to components that are listening to `store`
    changes. The `store` represents the entire application state.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块定义了两个内部不可变对象：`components`和`store`。`components`列表保存了监听`store`变化的组件的引用。`store`代表整个应用程序状态。
- en: The concept of a store stems from **Flux**, a set of architectural patterns
    used to build large-scale React applications. I'll touch on Flux ideas throughout
    this book, but Flux goes way beyond the scope of this book.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 存储的概念源自**Flux**，这是一组用于构建大规模React应用程序的架构模式。我将在本书中介绍Flux的想法，但Flux远远超出了本书的范围。
- en: 'The important pieces of this module are the exported functions: `setState()`,
    `getState()`, and `connect()`. The `getState()` function simply returns a reference
    to the data store. The `setState()` function sets the state of the store, and then
    notifies all components that the state of the application has changed. The `connect()`
    function is the higher-order function that wraps the given component with a new
    one. When the component is mounted, it registers itself with the store so that
    it will receive updates when the store changes state. It renders the composed
    component by passing the `store` as properties.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块的重要部分是导出的函数：`setState()`，`getState()`和`connect()`。`getState()`函数简单地返回对数据存储的引用。`setState()`函数设置存储的状态，然后通知所有组件应用程序的状态已更改。`connect()`函数是一个高阶函数，用一个新的组件包装给定的组件。当组件被挂载时，它会在存储中注册自己，以便在存储更改状态时接收更新。它通过将`store`作为属性传递来呈现组合的组件。
- en: 'Now, let''s use this utility to build a simple filter and list. First, the
    list component:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用这个实用程序来构建一个简单的过滤器和列表。首先是列表组件：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There are two pieces of state that are passed to this component as properties.
    The first is the `filterValue` string that comes from the filter text input. The
    second is the `items` array of values to filter. It is filtered by constructing
    a case-insensitive regular expression and using it with `test()` inside `filter()`.
    Then, only items that match the `filterValue` are part of the JSX output of this
    component. Next, let''s look at `MyInput`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个状态片段作为属性传递给这个组件。第一个是来自过滤文本输入的`filterValue`字符串。第二个是要过滤的值数组`items`。通过构建一个不区分大小写的正则表达式并在`filter()`内部使用它来进行过滤。然后，只有与`filterValue`匹配的项目才是这个组件的JSX输出的一部分。接下来，让我们看一下`MyInput`：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `MyInput` component renders an `<input>` element. The goal of the `onChange()`
    handler is to filter the user list so that only items that contain the current
    input text are displayed. It does this by setting the `filterValue` state whenever
    the text input changes. This will cause the `MyList` component to re-render with
    the new filter value to filter items with.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyInput`组件呈现一个`<input>`元素。`onChange()`处理程序的目标是过滤用户列表，以便仅显示包含当前输入文本的项目。它通过在文本输入更改时设置`filterValue`状态来实现此目的。这将导致`MyList`组件使用新的过滤值重新呈现以过滤项目。'
- en: 'Here''s what the rendered filter input and item list looks like:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染的过滤输入和项目列表的样子：
- en: '![](Images/5484c7d4-8726-42cf-9e9c-25bae93d685e.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5484c7d4-8726-42cf-9e9c-25bae93d685e.png)'
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the different ways to extend existing components.
    The first mechanism you learned about was inheritance. This is done using ES2015
    class syntax and is useful for implementing common methods or JSX markup.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了扩展现有组件的不同方法。您了解的第一种机制是继承。这是使用ES2015类语法完成的，对于实现常见方法或JSX标记非常有用。
- en: Then, you learned about higher-order components, where you use a function to
    wrap one component with another to provide it with new capabilities. This is the
    direction that new React applications are moving in, instead of inheritance.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您了解了高阶组件，其中您使用函数来包装一个组件，以便为其提供新的功能。这是新的React应用程序正在向其移动的方向，而不是继承。
- en: In the next chapter, you'll learn how to render components based on the current
    URL.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何根据当前URL渲染组件。
- en: Test your knowledge
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: When should you inherit component state?
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时应该继承组件状态？
- en: You should never inherit component state
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不应该继承组件状态
- en: Only when you have many different components that all share the same state structure,
    but render different output
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有当您有许多不同的组件都共享相同的状态结构，但呈现不同的输出时
- en: Only when you want to share state between two or more components
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有当您想要在两个或更多组件之间共享状态时
- en: What is a higher-order component?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是高阶组件？
- en: A component rendered by another component
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由另一个组件渲染的组件
- en: Another name for a functional component
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 功能组件的另一个名称
- en: A component that returns another component
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回另一个组件的组件
- en: If you inherit JSX from a component, what should you override?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您从组件继承JSX，您应该覆盖什么？
- en: Nothing. You're only inheriting to provide a new name for the component.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有。您只是继承以为组件提供一个新名称。
- en: You should only override the state.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该只覆盖状态。
- en: You can pass new state values to the inherited component in **`componentDidMount()`.**
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在**`componentDidMount()`**中将新的状态值传递给继承的组件。
- en: Further reading
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[https://reactjs.org/docs/components-and-props.html](https://reactjs.org/docs/components-and-props.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/components-and-props.html](https://reactjs.org/docs/components-and-props.html)'
