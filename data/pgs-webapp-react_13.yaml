- en: Auditing Our App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审核我们的应用程序
- en: '**Auditing** is a way of confirming that our Progressive Web App is a true
    PWA, that it lives up to the standards of the name. This audit is an important
    last step for us to check our work and ensure that our app is as good as it can
    be in terms of PWA functionality.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**审核**是确认我们的渐进式Web应用程序是否真正符合PWA标准的一种方式。这种审核是我们检查工作并确保我们的应用在PWA功能方面尽可能好的重要最后一步。'
- en: As mentioned previously, the biggest champion of Progressive Web Apps is Google.
    Not only are their Chrome browser and Android operating systems the most PWA-friendly
    of all, Google puts a great deal of effort into educating developers on how and
    why to build a PWA. As you move forward (beyond this book) into the world of the
    PWA, you'll probably often turn to their documentation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，渐进式Web应用程序的最大支持者是谷歌。他们的Chrome浏览器和Android操作系统不仅是所有PWA友好的，而且谷歌还非常努力地教育开发人员如何以及为什么构建PWA。当您进入PWA的世界时（超出本书范围），您可能经常会查阅他们的文档。
- en: However, Google provides another way to light the way forward to the progressive
    web. To ensure the quality of your web page or application, they have released
    a set of tools to measure your site against a set criteria. The main tool they
    use to do so is called Lighthouse.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，谷歌提供了另一种引领渐进式网络前进的方式。为了确保您的网页或应用程序的质量，他们发布了一套工具来衡量您的网站是否符合一组标准。他们用来做到这一点的主要工具称为Lighthouse。
- en: 'Here''s what we''ll cover in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将涵盖的内容：
- en: What is Lighthouse?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lighthouse是什么？
- en: What criteria does it follow?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它遵循哪些标准？
- en: What is the Audits tab in DevTools?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevTools中的审核标签是什么？
- en: Running our first audit
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行我们的第一次审核
- en: Evaluating the readout
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估读数
- en: Using the Lighthouse CLI
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Lighthouse CLI
- en: What is Lighthouse?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lighthouse是什么？
- en: In a sentence, **Lighthouse** is a tool that runs your site and tells you how
    progressive it really is, based on a set of specific criteria.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，**Lighthouse**是一个工具，运行您的网站并告诉您基于一组特定标准它到底有多渐进式。
- en: It does so by trying to load the page under a variety of conditions (including
    a 3G network and offline) and assessing how the page responds. It also checks
    for some PWA standbys, such as a splash screen and a service worker.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过尝试在各种条件下加载页面（包括3G网络和离线），并评估页面的响应方式来实现。它还检查一些PWA的常规功能，例如启动画面和服务工作者。
- en: The criteria
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准
- en: The following criteria are essentially a checklist that Lighthouse follows while
    looking at your app. Each "test" is a simple yes/no. If you pass all the tests,
    you get a score of 100\. That's what we want!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下标准本质上是Lighthouse在查看您的应用程序时遵循的一份清单。每个“测试”都是一个简单的是/否。如果您通过所有测试，您将获得100分。这就是我们想要的！
- en: 'Here’s a written list of the criteria, as of August 2017:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是2017年8月的标准列表：
- en: '**Registers a Service Worker**: The service worker is the technology that enables
    your app to use many Progressive Web App features, such as offline, add to homescreen,
    and push notifications.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册服务工作者**：服务工作者是使您的应用能够使用许多渐进式Web应用程序功能的技术，例如离线、添加到主屏幕和推送通知。'
- en: '**Responds with a 200 when offline:** If you''re building a Progressive Web
    App, consider using a service worker so that your app can work offline.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**离线时响应200**：如果您正在构建渐进式Web应用程序，请考虑使用服务工作者，以便您的应用程序可以离线工作。'
- en: '**Contains some content when JavaScript is not available**: Your app should
    display some content when JavaScript is disabled, even if it''s just a warning
    to the user that JavaScript is required to use the app.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当JavaScript不可用时包含一些内容：即使只是警告用户JavaScript是必需的，您的应用程序也应在JavaScript被禁用时显示一些内容。
- en: '**Configured for a custom splash screen:** A default splash screen will be
    constructed for your app, but satisfying these requirements guarantees a high-quality
    splash screen that transitions the user from tapping on the home screen icon to
    your app''s first paint.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置自定义启动画面：您的应用将构建一个默认的启动画面，但满足这些要求可以保证一个高质量的启动画面，让用户从点击主屏幕图标到应用的首次绘制有一个流畅的过渡。
- en: '**Uses HTTPS**: All sites should be protected with HTTPS, even ones that don''t
    handle sensitive data. HTTPS prevents intruders from tampering with or passively
    listening in on the communications between your app and your users, and is a prerequisite
    for HTTP/2 and many new web platform APIs.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTPS：所有网站都应该使用HTTPS进行保护，即使不处理敏感数据的网站也是如此。HTTPS可以防止入侵者篡改或被动监听您的应用与用户之间的通信，并且是HTTP/2和许多新的网络平台API的先决条件。
- en: '**Redirects HTTP traffic to HTTPS**: If you''ve already set up HTTPS, ensure
    that you redirect all HTTP traffic to HTTPS.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将HTTP流量重定向到HTTPS：如果您已经设置了HTTPS，请确保将所有HTTP流量重定向到HTTPS。
- en: '**Page load is fast enough on 3G:** This criterion is satisfied if the **Time
    To Interactive** duration is shorter than 10 seconds, as defined by the PWA Baseline
    Checklist (source--[https://developers.google.com/web/progressive-web-apps/checklist](https://developers.google.com/web/progressive-web-apps/checklist)).
    Network throttling is required (specifically, RTT latencies >= 150 RTT are expected).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3G网络下的页面加载速度足够快：如果**交互时间**短于10秒，即满足PWA基准检查表中的定义（来源--[https://developers.google.com/web/progressive-web-apps/checklist](https://developers.google.com/web/progressive-web-apps/checklist)），则满足此标准。需要进行网络限速（具体来说，预期的RTT延迟>=150
    RTT）。
- en: '**User can be prompted to install the Web App:** While users can manually add
    your site to their home screen, the prompt (also known as app install banner)
    will proactively prompt the user to install the app if the various requirements
    are met and the user has moderate engagement with your site.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以被提示安装Web应用：虽然用户可以手动将您的网站添加到其主屏幕，但如果满足各种要求并且用户对您的网站有适度的参与度，提示（也称为应用安装横幅）将主动提示用户安装应用。
- en: '**Address bar matches brand colors:** The browser address bar can be themed
    to match your site. A ``theme-color`` meta tag will upgrade the address bar when
    a user browses the site, and the manifest theme color will apply the same theme
    site-wide once it''s been added to the home screen.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址栏与品牌颜色匹配：浏览器地址栏可以进行主题设置以匹配您的网站。当用户浏览网站时，``theme-color``元标签将升级地址栏，一旦添加到主屏幕后，清单主题颜色将在整个网站上应用相同的主题。
- en: '**Has a <meta name="viewport"> tag with width or initial-scale:** Add a `viewport`
    meta tag to optimize your app for mobile screens.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有带有宽度或初始缩放的<meta name="viewport">标签：添加`viewport`元标签以优化您的应用在移动屏幕上的显示。
- en: '**Content is sized correctly for the viewport:** If the width of your app''s
    content doesn''t match the width of the viewport, your app might not be optimized
    for mobile screens.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容在视口中正确调整大小：如果您的应用内容的宽度与视口的宽度不匹配，您的应用可能没有针对移动屏幕进行优化。
- en: The Audits tab
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审核标签
- en: Until the release of Chrome 60, Lighthouse was only available in beta version
    as a Chrome extension or command-line tool. Now, however, it has its very own
    place in the Chrome DevTools, in the new **Audits tab**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 直到Chrome 60发布之前，Lighthouse只能作为Chrome扩展程序或命令行工具的测试版版本。然而，现在它在Chrome DevTools中有了自己的位置，在新的**审核标签**中。
- en: Included in the Audits tab, alongside the Lighthouse PWA audit, is a selection
    of other benchmark tests, including performance and web best practices. We’ll
    focus on the PWA test and performance tests, but feel free to run the other tests
    as well.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在审核标签中，除了Lighthouse PWA审核之外，还包括一系列其他基准测试，包括性能和网络最佳实践。我们将专注于PWA测试和性能测试，但也可以随意运行其他测试。
- en: Another useful feature of the Audits tab is the ability to save previous audits,
    to get a sort of history of your application as you improve it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 审计选项卡的另一个有用功能是能够保存先前的审计，以便在改进应用程序时获得应用程序的历史记录。
- en: Okay, enough talk. Let's go ahead and run our first audit!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，说够了。让我们继续进行我们的第一次审计！
- en: Our first audit
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一次审计
- en: Open up your DevTools, navigate to the Audits tab, and click on Run Audit.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的DevTools，导航到审计选项卡，然后单击运行审计。
- en: 'It should take a few seconds, and then give you a nice summary of how our site
    looks, drumroll. How good is our Progressive Web App?:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 应该需要几秒钟，然后给您一个关于我们网站外观的简要摘要，鼓掌。我们的渐进式Web应用程序有多好呢？：
- en: '![](../images/00091.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00091.jpeg)'
- en: Not bad at all. In fact, it doesn't get better than that in the PWA category.
    Give yourself a pat on the back and perhaps a high-five for a job well-done. Let's
    evaluate the readout, and then decide whether we want to move on or aim for 100%
    in all categories.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一点也不糟糕。事实上，在PWA类别中没有比这更好的了。给自己一个鼓励，也许是一个成功的高五。让我们评估读数，然后决定是否要继续前进或者争取在所有类别中达到100%。
- en: Please note that since Lighthouse is under active development, your scores may
    not match the above due to new criteria. In that case, I encourage you to take
    a look at what Lighthouse is complaining about, and see if you can solve it to
    get to that '100' score.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于Lighthouse正在积极开发中，您的分数可能与上述不符合新的标准。在这种情况下，我鼓励您查看Lighthouse所抱怨的内容，并看看是否可以解决问题以达到“100”分。
- en: Evaluating the readout
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估读数
- en: 'If your results don''t match the preceding, there are two possibilities:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的结果与前面的不符，有两种可能性：
- en: Chrome has added a new test that our app does not fulfill. As we've mentioned
    many times, PWAs are an evolving technology, so this is certainly possible.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome添加了我们的应用程序无法满足的新测试。正如我们多次提到的，PWA是一种不断发展的技术，所以这是完全可能的。
- en: You missed some step in the book; happens to the best of us.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您在书中错过了一些步骤；最好的人也会发生这种情况。
- en: In either case, I encourage you to investigate and try to solve the root issue.
    Google provides documentation for every test criteria, which is a good place to
    start.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，我都鼓励您进行调查并尝试解决根本问题。谷歌为每个测试标准提供了文档，这是一个很好的起点。
- en: 'In our case, the only test we didn''t pass with flying colors was Performance.
    Let''s look at the reason we didn''t:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们唯一没有通过的测试是性能。让我们看看我们没有通过的原因：
- en: '![](../images/00092.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00092.jpeg)'
- en: As we see here, our first meaningful paint takes about three seconds. Note that
    our app shell is not considered a meaningful paint, though it does improve the
    perceived performance of the page. Chrome is smart enough to know that it is not
    until our `login` form or `chat` container appears that we actually have meaningful
    content on the screen--stuff the user can actually use.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这里看到的，我们的第一个有意义的绘制大约需要三秒钟。请注意，我们的应用程序外壳不被视为有意义的绘制，尽管它确实改善了页面的感知性能。Chrome足够聪明，知道只有当我们的“登录”表单或“聊天”容器出现时，我们才真正在屏幕上有有意义的内容--用户实际可以使用的东西。
- en: The reason it takes over three seconds to display that meaningful content, though,
    is that we need to wait for our JavaScript to load, boot up, and then load whether
    our user is currently logged in, and then either load the chat messages or redirect
    to login. That’s a lot of subsequent steps.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，显示有意义的内容需要超过三秒的原因是，我们需要等待我们的JavaScript加载，启动，然后加载我们的用户当前是否已登录，然后加载聊天消息或重定向到登录。这是很多后续步骤。
- en: Is this a solvable problem? Perhaps. We can wire up some way of finding out
    whether our user is logged in before React loads (in other words, move some JavaScript
    out of our main app). We can move both the `chat` container and the `login` form
    out of React to ensure that they can be rendered before the library loads, and
    then come up with some means of replacing them once React initializes (the challenge
    being replacing inputs without erasing anything the user has started typing).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可以解决的问题吗？也许可以。我们可以设置一些方式，在React加载之前找出用户是否已登录（换句话说，将一些JavaScript移出我们的主应用程序）。我们可以将`chat`容器和`login`表单都移出React，以确保它们可以在库加载之前呈现，然后想出一些方法在React初始化后替换它们（挑战在于替换输入而不擦除用户已开始输入的任何内容）。
- en: All the mentioned challenges fall under the category of optimizing the critical
    render path. For anyone who wants to dive deeper into performance optimization,
    I encourage you to try it out. From a business perspective, however, that’s a
    lot of (potentially buggy) optimization for little gain. Our users already receive
    content in around 400 ms, according to the previous benchmarks, and the full application
    in just over three seconds. Remember that, thanks to caching, most users will
    then get a much faster load time in their subsequent visits.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所有提到的挑战都属于优化关键渲染路径的范畴。对于任何想深入了解性能优化的人，我鼓励你去尝试一下。然而，从商业角度来看，这对于一点收益来说是很多（可能有错误）优化。根据先前的基准测试，我们的用户已经在大约400毫秒内接收到内容，并且完整的应用程序在三秒多一点的时间内加载完成。请记住，由于缓存，大多数用户在随后的访问中将获得更快的加载时间。
- en: Our lower performance score demonstrates, in fact, the cost-benefit of using
    a weighty JavaScript library such as React to build a high performance application.
    For those interested in a more lightweight alternative, check out the section
    on Preact in the next chapter, a possible solution to the preceding problem.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们较低的性能得分实际上展示了使用诸如React之类的庞大JavaScript库构建高性能应用程序的成本效益。对于那些对更轻量级替代方案感兴趣的人，在下一章节中查看关于Preact的部分，这可能是解决前述问题的一个可能方案。
- en: Using the Lighthouse CLI
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Lighthouse CLI
- en: Running the tests from the Audits tab is nice and easy, but how can we ensure
    that the quality of our application is maintained before we push it live?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从审计选项卡运行测试非常简单易行，但我们如何确保在将应用程序推送到线上之前保持应用程序的质量呢？
- en: The answer is to incorporate Lighthouse into our deploy process, and use it
    to assess our build automatically. This is similar to having a test suite run
    when we hit `yarn deploy`. Fortunately, Google supplies with a Lighthouse CLI
    for exactly this purpose.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是将Lighthouse纳入我们的部署流程，并使用它自动评估我们的构建。这类似于在我们执行`yarn deploy`时运行测试套件。幸运的是，谷歌为此目的提供了Lighthouse
    CLI。
- en: 'Let’s install it with the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下命令进行安装：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, our goal is to run Lighthouse on our application whenever we run `yarn
    deploy`. To do so, we have to make a custom deploy script.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们的目标是在执行`yarn deploy`时在我们的应用程序上运行Lighthouse。为此，我们必须制作一个自定义部署脚本。
- en: 'If you open up our `package.json`, you’ll see the following under `scripts`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果打开我们的`package.json`，你会在`scripts`下看到以下内容：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s change that to the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其更改为以下内容：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will use node to run a custom build script written in JavaScript. Create
    `scripts/ folder` in your directory root, along with the `assess.js` file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用node来运行一个用JavaScript编写的自定义构建脚本。在你的目录根目录下创建`scripts/文件夹`，以及`assess.js`文件。
- en: 'Our process will be as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的流程将如下：
- en: Serve our `build` folder locally, so it runs in the browser.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地提供我们的`build`文件夹，以便在浏览器中运行。
- en: Use Lighthouse to assess the served page.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Lighthouse评估提供的页面。
- en: Console log the results.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台记录结果。
- en: 'Let''s add the package we need to serve our `build` folder:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加我们需要用来提供我们的`build`文件夹的包：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that we're saving this and `lighthouse` as `dev` dependencies, given that
    we'll never use them in production.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，鉴于我们永远不会在生产中使用它们，我们将这个和`lighthouse`保存为`dev`依赖项。
- en: Serving our build folder
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务我们的构建文件夹
- en: 'Inside our new `scripts/assess.js`, require the `serve` package:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的新`scripts/assess.js`中，要求`serve`包：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'All we want to do is `serve` our newly compiled `build` folder on `port:5000`,
    which looks like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只想要在端口5000上“serve”我们新编译的“build”文件夹，看起来是这样的：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can stop the server at any time by running `server.stop()`. We'll do that
    once our scores are displayed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以随时通过运行`server.stop()`来停止服务器。我们会在显示分数后这样做。
- en: Using Lighthouse to assess the served page
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Lighthouse来评估提供的页面
- en: 'Now, let''s require two more tools at the top of `assess.js`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`assess.js`的顶部要求另外两个工具：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`chromeLauncher` will allow us to open up Chrome to the target page, and then
    run Lighthouse. Let’s make a function called `launchChromeAndRunLighthouse` to
    do exactly this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`chromeLauncher`将允许我们打开Chrome到目标页面，然后运行Lighthouse。让我们创建一个名为`launchChromeAndRunLighthouse`的函数来做到这一点：'
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can optionally pass in some flags and config, which we won't use here (flags
    can be used to turn on logging as the process unfolds).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择传入一些标志和配置，这里我们不会使用（标志可以用来在过程展开时打开日志记录）。
- en: 'Inside the function, we''ll launch Chrome, set the port for Lighthouse to run
    on, and then run it. Lastly, we''ll stop Chrome:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数内部，我们将启动Chrome，设置Lighthouse运行的端口，然后运行它。最后，我们将停止Chrome：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This function is taken directly from the Lighthouse CLI documentation, by the
    way.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，这个函数直接来自Lighthouse CLI文档。
- en: 'Okay, now for the last step. We''ll run our function with our chosen URL (put
    this at the bottom of the file, below the `serve` command):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在是最后一步了。我们将使用我们选择的URL运行我们的函数（将其放在文件底部，在`serve`命令下方）：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once we have our results, we stop the server, but we need to display our results
    properly.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了结果，我们就停止服务器，但我们需要正确显示我们的结果。
- en: Logging the results
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录结果
- en: 'The results variable comes in as an object. It gives a detailed breakdown of
    each category with the score given, but we only care about trouble areas. Above
    our function invocation, let''s add a score cutoff:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 结果变量以对象的形式出现。它提供了每个类别的详细分数，但我们只关心有问题的地方。在我们的函数调用之前，让我们添加一个分数截止线：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We'll use this to say "only show results that score less than 90/100."
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个来说“只显示得分低于90/100的结果”。
- en: 'The process of logging out the results isn''t too exciting, so we won''t walk
    through it here in depth. Here''s the complete file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 登出结果的过程并不是很令人兴奋，所以我们不会在这里深入讨论。以下是完整的文件：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you run `node scripts/assess.js` from your Terminal, you should see a list
    of problem areas as well as a final score for each category. Bring it all together
    by running `yarn deploy`, and you'll see those scores appear before the Firebase
    deployment.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从终端运行`node scripts/assess.js`，您应该会看到一个问题区域的列表，以及每个类别的最终得分。通过运行`yarn deploy`将所有内容汇总在一起，您将在Firebase部署之前看到这些分数。
- en: Now we have an easy and clean way to keep up to date on the status of our application
    as it evolves, without having to launch the site ourselves to test it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个简单而干净的方法来随时了解我们应用程序的状态，而不必自己启动网站来测试它。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Done! We fully audited our application, and it passed with flying colors in
    every category. We have a working Progressive Web Application. In this chapter,
    we learned what Lighthouse was, and why it's important to verify our PWA. We also
    added it as part of our deployment process to ensure that our app continues to
    meet the quality standards. We can now consider our app complete in every aspect.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！我们对我们的应用进行了全面审查，它在每个类别都表现出色。我们有一个可用的渐进式Web应用程序。在本章中，我们了解了Lighthouse是什么，以及为什么验证我们的PWA很重要。我们还将其作为部署过程的一部分，以确保我们的应用程序继续符合质量标准。现在我们可以认为我们的应用在各个方面都已经完成。
- en: Next, we'll talk about the subsequent steps as well as useful resources for
    growing your knowledge of PWAs, but first, about submitting our app to your friend
    and the Chatastrophe board.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论后续步骤以及增加对PWA知识的有用资源，但首先，关于将我们的应用提交给你的朋友和Chatastrophe委员会。
