- en: 3D or Reality in Dimensions Other than X and Y
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D或其他维度中的现实
- en: We've decided to step into a virtually real world. To understand how to draw
    that world, we'll need to understand exactly how to describe it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定进入一个几乎真实的世界。要理解如何绘制这个世界，我们需要准确理解如何描述它。
- en: This chapter describes how we do that in a mathematical sense. Don't worry,
    this is not a return to high–school math! (Well, maybe geometry. OK, so maybe
    a little bit. OK, maybe a lot. I'll try to make it painless.)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章描述了我们如何在数学意义上做到这一点。别担心，这不是回到高中数学！（好吧，也许是几何。好吧，也许有一点点。好吧，也许有很多。我会尽量让它不那么痛苦。）
- en: 'There are many different ways to describe the world; it is still the same world
    no matter how we do so. As Shakespeare said in Romeo and Juliet:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 描述世界的方式有很多种；不管我们如何描述，它仍然是同一个世界。正如莎士比亚在《罗密欧与朱丽叶》中所说的：
- en: '"What''s in a name? That which we call a rose by any other name would smell
    as sweet."'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: “名字有什么含义？不管我们如何称呼玫瑰，它依然芬芳。”
- en: 'In our case, interestingly, this is not so: a box described incorrectly will
    look totally different. You need to learn the language. Not only that, you need
    to learn how React VR describes the world, as different 3D graphics programs all
    use different numbers (scaling), directions (vectors), and rotations.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，有趣的是，情况并非如此：一个描述错误的盒子看起来会完全不同。你需要学会这种语言。不仅如此，你还需要了解React VR如何描述这个世界，因为不同的3D图形程序都使用不同的数字（缩放）、方向（向量）和旋转。
- en: With virtual worlds, the types of software and hardware all require different
    ways of describing the things you see. For example, coordinates can be left handed
    or right handed. If you mix them up, objects will move in a different direction
    than you had intended them to!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于虚拟世界，不同类型的软件和硬件都需要不同的描述方式。例如，坐标可以是左手系或右手系。如果搞混了，物体会朝着与你预期的方向不同的方向移动！
- en: 'In particular, up has different meanings in 3D; more specifically, the up direction
    typically is not standard between different 3D programs. In React VR, Y is up.
    Why is Y up?  Read on to learn about:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，在3D中，上下有不同的含义；更具体地说，不同的3D程序之间通常上方方向是不标准的。在React VR中，Y轴向上。为什么Y轴向上？继续阅读了解：
- en: 'Coordinates: These are fixing points in space'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 坐标：这些是空间中的固定点
- en: 'Points: These are building blocks for polygons'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点：这些是多边形的构建块
- en: 'Vectors: These are directions'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量：这些是方向
- en: 'Transforms: These are moving things to where you want them'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变换：这些是将事物移动到你想要它们的地方
- en: 'Rendering: This turns this discussion of points and transforms into something
    real'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染：这将把点和变换的讨论转化为真实的东西
- en: Beyond flatland - 3D concepts
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越平面 - 3D概念
- en: To represent things in 3D, we have to translate what we see into things that
    the computer can use to generate images. These methods will involve files with
    3D geometry, pictures, and code. First, let's discuss how we position things in
    3D.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在3D中表示事物，我们必须将所见的东西转化为计算机可以用来生成图像的东西。这些方法将涉及到具有3D几何、图片和代码的文件。首先，让我们讨论如何在3D中定位事物。
- en: To represent objects in 3D, we need their locations. A spreadsheet such as Excel
    uses A-Z (across) and 1-66 down (actually, A-XFD and 1-1048576). Computer graphics
    use numbers for all three axes. However, there are different ways to code these
    coordinates.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在3D中表示物体，我们需要它们的位置。像Excel这样的电子表格使用A-Z（横向）和1-66（实际上是A-XFD和1-1048576）。计算机图形使用数字表示所有三个轴。然而，编码这些坐标的方式有很多种。
- en: This applies to both the scale (what is one, an inch? One mile?) and what direction
    they go (is it Y or Z that is up?). To figure this out, we need to talk about
    coordinate systems.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这适用于比例（什么是一英寸？一英里？）以及它们移动的方向（是Y还是Z向上？）。为了弄清楚这一点，我们需要谈论坐标系。
- en: Coordinates
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 坐标
- en: We're all used to graph paper, grids, glowing spreadsheets with *X* and *Y*
    grids, or, numbers and letters like A1 and B1 in whatever spreadsheet program
    you use. Moving into the third dimension can be confusing, even though that's
    where we live. This is why I called this section *Beyond flatland*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都习惯于使用图纸、网格、发光的电子表格，带有*X*和*Y*网格，或者在你使用的任何电子表格程序中的数字和字母，比如A1和B1。进入第三维可能会让人感到困惑，尽管那是我们生活的空间。这就是为什么我将这一部分称为*超越平面*。
- en: Math operations we take for granted in two dimensions or general math turn out
    to be just different in three dimensions. For example, if you multiply *X* and
    *Y*, you get the same answer as if you multiplied *Y* and *X*. Yet in three dimensions,
    rotations do not behave that way. To see this in action, try taking both copies
    of this book. (I bought two copies, didn't you? Mom, aren't you reading it?)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在二维或一般数学中认为理所当然的数学运算在三维中却是不同的。例如，如果你将*X*和*Y*相乘，你得到的答案与将*Y*和*X*相乘的答案相同。然而在三维中，旋转并不是这样的。要看到这一点，试着拿起这本书的两份副本。（我买了两本，你呢？妈妈，你在读吗？）
- en: OK, seriously, please pick up any two books, real books on paper. If you have
    two Kindles, you could use those.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，认真地，请拿起任意两本书，纸质书。如果你有两个Kindle，你也可以用它们。
- en: 'With book number one:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第一本书：
- en: Physically flip it (while closed) a quarter turn left to right (toward your
    right hand).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 物理上将其（合上）向左旋转四分之一圈（朝向你的右手）。
- en: Then, flip the back edge toward you (flip it over).
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将背边向你翻转（翻过来）。
- en: You are now looking at the back page, sideways.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在看到的是背面，侧面。
- en: 'With book number two, flip it in the opposite order:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第二本书，以相反的顺序翻转：
- en: Flip the back edge toward you (flip it over).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将背边向你翻转（翻过来）。
- en: Then rotate it a quarter turn clockwise left to right (toward your right hand).
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将其顺时针向左旋转四分之一圈（朝向你的右手）。
- en: The two books are facing different directions, even though you rotated them
    the same way both times, just in a slightly different order.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这两本书面对着不同的方向，尽管你两次以相同的方式旋转它们，只是顺序略有不同。
- en: Three-dimensional math can be confusing. Normally, if you multiply *A* and *B*,
    you get the same results as if you multiply *B* by *A*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 三维数学可能会让人感到困惑。通常，如果你将*A*和*B*相乘，你得到的结果与将*B*乘以*A*的结果相同。
- en: This concept is very important when it comes to translations, rotations, and
    scaling. Where your objects end up in the world and what they look like is dependent
    on the order you code it in.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到平移、旋转和缩放时，这个概念非常重要。你编码的顺序决定了你的物体最终在世界中的位置和它们的外观。
- en: We will use three numbers to designate a location for everything in 3D, specifically
    *X*, *Y*, and *Z*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用三个数字来指定三维空间中的每个位置，具体来说是*X*、*Y*和*Z*。
- en: This is called a **Cartesian coordinate system**. There are other types of coordinate
    systems, but nearly every computer system uses a Cartesian system for spatial
    locations. Rotations and vectors will sometimes use other systems. This is a **Euclidean
    space.**
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为**笛卡尔坐标系**。还有其他类型的坐标系，但几乎每个计算机系统都使用笛卡尔坐标系来表示空间位置。旋转和向量有时会使用其他坐标系。这是一个**欧几里得空间**。
- en: To make 3D more confusing, some people use *X* and *Y*, with *Z* being the new
    dimension, while others say *Y* is up. Why is (it) up? When dealing with a screen,
    you're used to using *X* and *Y*. A sheet of paper is similar, although paper
    is usually horizontal and a screen is vertical.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让三维更加令人困惑，有些人使用*X*和*Y*，*Z*成为新的维度，而其他人则说*Y*是向上的。为什么（它）是向上的？当处理屏幕时，你习惯于使用*X*和*Y*。一张纸类似，尽管纸通常是水平的，而屏幕是垂直的。
- en: This causes an interesting issue of conversion to 3D. In 3D, we use *X*, *Y*,
    and *Z*. If you're used to using *X* and *Y*, then the *Z* has to be the new third
    dimension, and it would be up. If, however, you're used to thinking of *X* and
    *Y* as a piece of graph paper, then *Y* is already up and so *Z* ends up being
    in and out. Each 3D system seems to be slightly different.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了一个有趣的三维转换问题。在三维中，我们使用*X*、*Y*和*Z*。如果你习惯使用*X*和*Y*，那么*Z*就必须成为新的第三维，它将是向上的。然而，如果你习惯将*X*和*Y*看作是一张图纸，那么*Y*已经是向上的，所以*Z*最终会是内部和外部。每个三维系统似乎都有些不同。
- en: WebGL, which React VR is based on, uses the familiar *X* and *Y* as right/left
    and up/down; so *Z* has to be in/out. However, one difference is that in React
    VR, *Y* is up; in standard HTML, *Y* is down. In other words, HTML and React use
    a coordinate of (zero by zero) as the upper left-hand corner. Is *Y* is up? Most
    3D programs use *Y* or *Z* as up, meaning in our case positive *Y* is up.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 基于WebGL的React VR使用熟悉的*X*和*Y*作为左/右和上/下；所以*Z*必须是内部/外部。然而，一个不同之处是在React VR中，*Y*是向上的；在标准的HTML中，*Y*是向下的。换句话说，HTML和React使用的坐标是（零乘零）作为左上角。*Y*是向上的吗？大多数三维程序使用*Y*或*Z*作为向上，也就是说在我们的情况下，正的*Y*是向上的。
- en: WebGL and HTML are different than React, and may take some getting used to.
    To put an object forward in front of you so you can see it, you'll need to give
    it a negative Z.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: WebGL和HTML与React不同，可能需要一些时间来适应。要将一个物体放在你面前，以便你能看到它，你需要给它一个负的Z。
- en: In 3D, coordinates can be left handed or right handed. As we've seen with *X*,
    *Y*, and *Z*, sometimes arrows don't go in the direction you'd expect. Why didn't
    React VR (really, it was OpenGL) decide to make Z go in the screen? Then the coordinates
    would be left handed. Instead, most graphics systems use a right handed coordinate
    system.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在三维中，坐标可以是左手的或右手的。正如我们在*X*、*Y*和*Z*中看到的，有时箭头的方向并不是你所期望的。为什么React VR（实际上是OpenGL）没有决定让Z进入屏幕呢？那么坐标将是左手的。相反，大多数图形系统使用右手坐标系。
- en: My brother is left handed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我哥哥是左撇子。
- en: Nothing wrong with a south paw.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 左撇子也没什么不好。
- en: (Actually, he's right handed, but why spoil a good story with the facts?)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: （实际上，他是右撇子，但为什么要用事实来破坏一个好故事呢？）
- en: 'What in the world does right versus left handed mean? It is a mnemonic that
    helps with the direction of the arrows and with rotations. If you take either
    hand and spread your first three digits out, they spell out the *X*, *Y* and *Z*
    directions. A diagram would help; your first three digits (thumb, index, middle
    finger) point in positive *X*, *Y*, and *Z*:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 右手和左手有什么意思？这是一个助记符，有助于箭头的方向和旋转。如果你拿起任何一只手，伸开前三个手指，它们就会拼出*X*、*Y*和*Z*的方向。一个图表会有所帮助；你的前三个手指（拇指、食指、中指）指向正的*X*、*Y*和*Z*：
- en: '![](Images/70da68aa-7788-45c8-a787-59a2251ef419.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/70da68aa-7788-45c8-a787-59a2251ef419.jpg)'
- en: In this diagram, there are a few things to note. The camera represents us on
    the left, looking into the screen (depicted transparently). Because *Y* is up
    (why?) and *X* is to the right, the coordinate system that OpenGL uses isn't similar
    to HTML or to a piece of graph paper, but it is more or less a standard with the
    web.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图表中，有几件事情需要注意。相机代表我们在左边，透明地看着屏幕。因为*Y*是向上的（为什么？），*X*是向右的，OpenGL使用的坐标系统与HTML或一张图纸并不相似，但它更或多或少是网络上的标准。
- en: This was chosen to map more easily to the way that 3D models, **Computer Aided
    Design** (**CAD**), and modeling programs (such as Blender, Maya, 3DSMax) are
    constructed. It is backwards from the way that React works—*Y* is positive going
    down with React. This is a right handed system; if you try to do this with your
    left hand, you get a different order of the *X*, *Y* and *Z* axes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 选择这种方式更容易映射到3D模型、计算机辅助设计（CAD）和建模程序（如Blender、Maya、3DSMax）的构造方式。这与React的工作方式相反——*Y*向下为正。这是一个右手坐标系；如果你用左手尝试，*X*、*Y*和*Z*轴的顺序会不同。
- en: What about rotations?
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旋转呢？
- en: 'Rotations around any axis with React VR and OpenGL are also right handed. This
    means a positive rotation around any axis will go in the direction the thumb points
    and the fingers curl. For example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在React VR和OpenGL中，围绕任何轴的旋转也是右手坐标系。这意味着围绕任何轴的正旋转将沿着拇指指向的方向进行，手指弯曲。例如：
- en: '![](Images/7d08ad11-3632-48f3-bd08-47cfc805800f.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7d08ad11-3632-48f3-bd08-47cfc805800f.jpg)'
- en: Are you looking at your right hand and curling your fingers? It's OK, it helps
    to visualize. Yes, those are arrows showing the positive direction along the respective
    axes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否在看着你的右手并弯曲手指？没关系，这有助于可视化。是的，那些箭头显示了各自轴上的正方向。
- en: Honestly, *Y* is up and *Z* is up seem to be pretty commonly mixed in the 3D
    CAD world. Your CAD system may work differently. It's OK, we can flip and invert
    it - just be aware that when importing models, you may find them on their side,
    or even inside out.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，*Y*朝上和*Z*朝上似乎在3D CAD世界中很常见混淆。你的CAD系统可能工作方式不同。没关系，我们可以翻转和反转它——只要知道在导入模型时，你可能会发现它们侧倒，甚至是里外颠倒。
- en: In particular, in Blender *Z* is up and *X* and *Y* are in the flat plane; however,
    it can substitute *Y* for up when you export. Why? Because it's on the up and
    up.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在Blender中，*Z*朝上，*X*和*Y*在平面上；然而，在导出时，*Y*可以替代朝上。为什么？因为这是正当合法的。
- en: These numbers are dimensionless; a cube that is 1 x 1 x 1 can be thought of
    as 1 mile or 1 foot. However, in WebVR and React VR, the units are commonly thought
    of in meters.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字是无单位的；一个边长为1的立方体可以被视为1英里或1英尺。然而，在WebVR和React VR中，单位通常被认为是米。
- en: Blender can use dimensionless units, metric, or imperial, so you'll need to
    fiddle with scaling when importing things.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Blender可以使用无单位、公制或英制，因此在导入物体时需要调整比例。
- en: The program Poser uses odd units—you will need to scale anything coming from
    it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 程序Poser使用奇怪的单位——你需要调整从中导入的任何东西的比例。
- en: 'OBJ files, commonly used for importing models, have no unit information; they
    are dimensionless: 1 is 1, not 1 meter.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 用于导入模型的OBJ文件没有单位信息；它们是无尺寸的：1就是1，不是1米。
- en: Points
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点
- en: 'Points refer to 3D locations in space, generally identified via *X*, *Y*, and
    *Z* locations. A point is rarely described directly in React VR, unless you are
    doing native rendering, but locations in space are frequently described as points.
    For example, a transform node may say:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 点是指空间中的3D位置，通常通过*X*、*Y*和*Z*位置来确定。在React VR中很少直接描述点，除非你正在进行本地渲染，但空间中的位置经常被描述为点。例如，一个变换节点可能会说：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The center of the object that the transform is applied to will be at the location
    *X*=0, *Y*=400,  *Z*=700.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 应用变换的对象的中心将位于位置*X*=0，*Y*=400，*Z*=700处。
- en: Vectors
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向量
- en: Vectors refer to a direction. In Aviation, pilots talk about vectors. From the
    scene in the movie *Airplane*, Clarence Oveur, Roger Murdock, Victor Basta, and
    the control tower discuss heading:  ([http://bit.ly/WhatsOurVector](http://bit.ly/WhatsOurVector))
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 向量指的是方向。在航空中，飞行员谈论向量。从电影《飞机》中的场景中，克拉伦斯·奥弗、罗杰·默多克、维克多·巴斯塔和控制塔讨论航向：([http://bit.ly/WhatsOurVector](http://bit.ly/WhatsOurVector))
- en: '"Roger Murdock: Flight 2-0-9''er, you are cleared for take-off.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 罗杰·默多克：2-0-9号航班，你已获准起飞。
- en: 'Captain Oveur: Roger!'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 奥弗船长：罗杰！
- en: 'Roger Murdock: Huh?'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 罗杰·默多克：啊？
- en: 'Tower voice: L.A. departure frequency, 123 point 9''er.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 塔台声音：L.A.离港频率，123点9。
- en: 'Captain Oveur: Roger!'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 奥维尔船长：罗杰！
- en: 'Roger Murdock: Huh?'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 罗杰·默多克：啊？
- en: 'Victor Basta: Request vector, over.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 维克多·巴斯塔：请求矢量，结束。
- en: 'Captain Oveur: What?'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 奥维尔船长：什么？
- en: 'Tower voice: Flight 2-0-9''er cleared for vector 324.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 塔台声音：飞行2-0-9清除矢量324。
- en: 'Roger Murdock: We have clearance, Clarence.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 罗杰·默多克：我们有许可，克拉伦斯。
- en: 'Captain Oveur: Roger, Roger. What''s our vector, Victor?'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 奥维尔船长：罗杰，罗杰。我们的矢量是多少，维克多？
- en: 'Tower voice: Tower''s radio clearance, over!'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 塔台声音：塔台的无线电许可，结束！
- en: 'Captain Oveur: That''s Clarence Oveur. Over."'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 奥维尔船长：那是克拉伦斯·奥维尔。结束。
- en: From our standpoint as VR people, they really mean heading. In 3D space, you
    can also be aimed up or down. All three directions are very important to us.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们作为VR人的角度来看，他们真的是指航向。在3D空间中，你也可以朝上或朝下。这三个方向对我们来说都非常重要。
- en: Translations, properly speaking, use vectors; if you give a transform property
    to an object of [0, 2, 0], you are telling the object to move *2* units in the
    *+Y* direction, not necessarily to an absolute position of 0,2,0\. However, note
    that if the object's origin is at 0,0,0, then it is the same. It is important
    to consider the origin of your 3D objects when translating them, and whether objects
    take absolute or relative positioning.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译，严格来说，使用向量；如果你给一个对象的变换属性为[0, 2, 0]，你是在告诉对象在*+Y*方向上移动*2*个单位，而不一定是绝对位置0,2,0。然而，需要注意的是，如果对象的原点是在0,0,0，那么它是一样的。在翻译时，考虑你的3D对象的原点以及对象是否采用绝对或相对定位是很重要的。
- en: Transforms
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变换
- en: This is not a book about bizarre foldable robots, so we are talking about transforms,
    not Transformers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一本关于奇异的可折叠机器人的书，所以我们谈论的是变换，而不是变形金刚。
- en: Transforms are ways to place, position, move, and scale objects, essentially,
    anything that transforms the *X*, *Y*, *Z* coordinates of an object, point, and
    so on.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 变换是放置、定位、移动和缩放对象的方式，基本上是任何转换对象、点等的*X*、*Y*、*Z*坐标。
- en: 'In React VR, transforms are usually part of a style. For example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在React VR中，变换通常是样式的一部分。例如：
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Transform order is very important. As we discussed earlier, in 3D, transforms
    are not transitive—if you translate, then rotate, you end up in a different spot
    than if you rotate, then translate. Remember the book example?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 变换顺序非常重要。正如我们之前讨论的，在3D中，变换不是传递的 - 如果你先平移，然后旋转，你最终会停在一个不同的位置，而不是如果你先旋转，然后平移。记得书上的例子吗？
- en: In React VR, the Transform is a standard props node for most objects that have
    a physical presence. (See Appendix and Chapter 4, *The React VR Library*.)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在React VR中，变换是大多数具有物理存在的对象的标准属性节点。（见附录和第4章《React VR库》。）
- en: Transforms take really three main arguments (and a number of deprecated props);
    a transform, or matrix arguments.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 变换确实有三个主要参数（和一些已弃用的属性）；一个变换，或矩阵参数。
- en: Yes, I said the matrix.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我说的是矩阵。
- en: '![](Images/f12b10ac-92c1-40c0-9af8-a8e99912e12d.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f12b10ac-92c1-40c0-9af8-a8e99912e12d.png)'
- en: A matrix has always been a mathematical concept for quite some time. It also
    made a great movie. Due to copyright restrictions, I can't include a picture of
    the matrix here, but above is my representation of our VR controller scene viewed
    in the matrix. In any event, I don't mean the movie. We will use the matrix to
    create 3D scenes of our own.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵一直是一个数学概念已经有一段时间了。它也是一部很棒的电影。由于版权限制，我不能在这里包含矩阵的图片，但上面是我在矩阵中查看我们的VR控制器场景的表示。无论如何，我不是指电影。我们将使用矩阵来创建我们自己的3D场景。
- en: A matrix is a mathematical way to describe translation (vectors), rotations,
    scaling, and skewing. Some of my friends get skewed on the weekends, but skewing
    is a mathematical term meaning to shift, say, the top of an object more than the
    bottom. You might think of it as tilted.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵是描述平移（向量）、旋转、缩放和扭曲的数学方式。我的一些朋友在周末会有些扭曲，但扭曲是一个数学术语，意思是移动对象的顶部比底部更多。你可以把它想象成倾斜。
- en: To fully understand matrices, let's talk about the non-Keanu Reeves way of doing
    it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全理解矩阵，让我们谈谈非基努·里维斯的做法。
- en: 'Anytime there is a physical object, such as a box, a model, a light, or a VR
    button, you have various style props, one of which is a transform. A transform
    node can use matrices, or, a little easier sometimes, direct translation properties.
    For example, if you define a `Cylinder` in React VR, you might transform it like
    this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每当有一个物理对象，比如一个盒子、一个模型、一个灯光或一个VR按钮，你都有各种样式属性，其中之一就是变换。变换节点可以使用矩阵，或者有时候更容易一些，直接使用平移属性。例如，如果你在React
    VR中定义一个`Cylinder`，你可以这样变换它：
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Transform order is important. Here is an example of three cylinders, identical
    except for their color and transforms:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 变换顺序很重要。这是一个三个圆柱体的例子，除了颜色和变换之外都是相同的：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is the resulting React VR world:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成的React VR世界：
- en: '![](Images/a28d4478-ef65-41b7-82b7-8f6a0d669186.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a28d4478-ef65-41b7-82b7-8f6a0d669186.jpg)'
- en: What about the matrix?
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矩阵怎么样？
- en: A matrix is a four column by four row series (array) of numbers.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵是一个四列四行的数字系列（数组）。
- en: You can use a `matrix` in the transform node as well. A complete discussion
    of matrix math is beyond the scope of this book. There are plenty of reference
    materials on the web. The basic concept is fairly straightforward, but rotations
    can be a bit difficult (although deterministic) to program free-hand.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在变换节点中使用`矩阵`。矩阵数学的完整讨论超出了本书的范围。网上有很多参考资料。基本概念相当简单，但旋转可能有点困难（尽管是确定性的）手工编程。
- en: 'Translations are stored as:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 平移被存储为：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Scaling is represented by:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放由以下表示：
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Rotations can be represented by the R values in:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转可以用R值表示：
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Rotations via matrix math are very precise, but also very complicated. As we
    saw earlier, the order of rotations will change the location of the resulting
    object. A matrix does not have these problems as the order is baked into the matrix
    itself. Calculating the rotations can be messy.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过矩阵数学进行的旋转非常精确，但也非常复杂。正如我们之前所看到的，旋转的顺序会改变结果对象的位置。矩阵本身不会有这些问题，因为顺序已经嵌入到矩阵中。计算旋转可能会很混乱。
- en: Generally speaking, you'll want to use the transform styles instead of the matrix
    math, when moving an object by hand (manual coding).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，当手动移动对象时，您会希望使用变换样式而不是矩阵数学。
- en: You'll want to use matrices when copying an object's position and orientation
    or programmatically moving it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当复制对象的位置和方向或以编程方式移动对象时，您会希望使用矩阵。
- en: 'A `matrix` that scales all axes by one tenth and translates by [3, 2, 1] can
    be applied as a `matrix` as such:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`矩阵`按比例缩小所有轴十分之一并按[3, 2, 1]进行平移的`矩阵`可以应用如下：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You cannot use a transform matrix and a transform style (separate translate,
    rotate, scale) at the same time. There is really no need to, as you can do everything
    with a matrix you would do by specifying individual transformations. If you do
    use a matrix, you're pretty hardcore! In any event, any transforms that you create
    will be converted to a matrix behind the scenes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能同时使用变换矩阵和变换样式（单独的平移、旋转、缩放）。实际上没有必要，因为您可以通过指定单独的变换来完成矩阵可以完成的一切。如果您使用矩阵，您就是相当专业！无论如何，您创建的任何变换都将在幕后转换为矩阵。
- en: Welcome to the matrix - now you can create it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到矩阵-现在你可以创建它。
- en: Rendering
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染
- en: 'Bing defines rendering as:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Bing将渲染定义为：
- en: '![](Images/862749ff-cd38-427a-9b98-edee837df825.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/862749ff-cd38-427a-9b98-edee837df825.png)'
- en: Well, that was fun, but is obviously not what we mean. Rendering refers to taking
    all of the mathematical description we've been discussing and making something
    visual out of it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，那很有趣，但显然不是我们的意思。渲染是指将我们一直在讨论的所有数学描述转化为可视化的东西。
- en: The rendering engine used with React VR is three.js ([http://bit.ly/2wHI8S9](http://bit.ly/2wHI8S9)),
    which normally uses WebGL for rendering ([http://bit.ly/2wKoKCe](http://bit.ly/2wKoKCe)).
    WebGL is a robust JavaScript API for generating high performance graphics. It
    will use any high performance graphics hardware (GPU) in your system, and is native
    in most browsers, allowing 3D graphics without requiring plugins.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: React VR使用的渲染引擎是three.js（[http://bit.ly/2wHI8S9](http://bit.ly/2wHI8S9)），通常使用WebGL进行渲染（[http://bit.ly/2wKoKCe](http://bit.ly/2wKoKCe)）。WebGL是一个强大的JavaScript
    API，用于生成高性能图形。它将使用系统中的任何高性能图形硬件（GPU），并且在大多数浏览器中是本地的，无需插件即可进行3D图形处理。
- en: Usually, however, the web can be a wild place. You would think browser manufacturers
    would have learned from the compatibility problems of 20 years ago, but sadly
    this is not the case. There may be wrinkles or issues with some browsers, especially
    on mobile.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，网络通常是一个狂野的地方。你会认为浏览器制造商会从20年前的兼容性问题中吸取教训，但遗憾的是情况并非如此。一些浏览器可能会出现问题或兼容性问题，尤其是在移动设备上。
- en: Can't we all just get along?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们难道不能和平相处吗？
- en: This will affect how well React VR works. If you want to see whether your browser
    and hardware support WebGL, go to the WebGL test page at [http://bit.ly/WebGLTestPage](http://bit.ly/WebGLTestPage).
    The page will display a spinning cube; it may also display some warnings if you
    use a browser that is not one hundred percent compatible. The WebGL Wikipedia
    page ([http://bit.ly/2wKoKCe](http://bit.ly/2wKoKCe)) has a good description of
    which browsers do what, but things change.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这将影响React VR的运行情况。如果你想知道你的浏览器和硬件是否支持WebGL，请访问[http://bit.ly/WebGLTestPage](http://bit.ly/WebGLTestPage)的WebGL测试页面。该页面将显示一个旋转的立方体；如果你使用的浏览器不是百分之百兼容的，它可能还会显示一些警告。WebGL维基百科页面（[http://bit.ly/2wKoKCe](http://bit.ly/2wKoKCe)）对各种浏览器的功能有很好的描述，但事情会发生变化。
- en: You need to test.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要进行测试。
- en: Testing how it looks
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试它的外观
- en: In World War II, the Marines tested amphibious landings extensively before the
    War in the Pacific. They had tactics and strategy down.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二次世界大战中，美国海军陆战队在太平洋战争前对水陆两栖登陆进行了大量测试。他们已经掌握了战术和战略。
- en: 'The first landing they did, they hit coral reefs. There are no coral reefs
    in San Diego/Camp Pendleton. As a result, although it was a successful landing,
    it was a bit more calamitous than they thought it would be. As a result, the Marine
    Corps has a saying:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 他们第一次登陆时，撞上了珊瑚礁。圣迭戈/彭德尔顿营地没有珊瑚礁。因此，尽管这是一次成功的登陆，但比他们预想的更加灾难性。因此，美国海军陆战队有一句话：
- en: '"Train as you would fight."'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '"训练就像你将要战斗一样。"'
- en: 'This has apparently been a long–standing saying. The Roman Legion used to say:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然是一个长期存在的说法。罗马军团过去常说：
- en: '"Training should be a bloodless battle, so that in battle, it will be just
    like bloody training." -Roman Legion Training Maxim'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 训练应该是一场无血的战斗，这样在战斗中，就会像血腥的训练一样。-罗马军团训练法则
- en: If you get used to using Firefox, send your React VR solution out into the world,
    and your Aunt Petunia uses the Orchestra browser to view your world, it may not
    work, and Aunt Petunia will still think you're that shiftless spawn of her aimless
    sibling. Note that Orchestra isn't a real browser as far as I know, although I
    use Opera.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯使用Firefox，将你的React VR解决方案发布到世界上，你的Petunia阿姨使用Orchestra浏览器查看你的世界，可能不起作用，Petunia阿姨仍然会认为你是她那个无目标的兄弟的懒散后代。请注意，据我所知，Orchestra不是一个真正的浏览器，尽管我使用Opera。
- en: If this is an internal company-only app, and you have a standard (and can enforce
    it!) of only one browser, then you can test and develop with that browser.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个内部公司专用的应用程序，并且你有一个标准（并且可以强制执行！）只使用一个浏览器，那么你可以使用该浏览器进行测试和开发。
- en: If, however, you want a wide number of people to use your React VR app, you
    really should test with a variety of browsers. If you have a Mac, a PC, and a
    Linux machine, so much the better. These can be virtual machines (especially Windows,
    with the appropriate license, and Linux), otherwise you need beta testers.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你希望许多人使用你的React VR应用程序，你确实应该使用各种浏览器进行测试。如果你有一台Mac、一台PC和一台Linux机器，那就更好了。这些可以是虚拟机（特别是Windows，带有适当的许可证，和Linux），否则你需要Beta测试人员。
- en: You need to test it like you expect people to use it, otherwise you'll think
    it works fine but people will not be happy with your virtual world. You'll need
    to test with as many browsers and hardware platforms as you can. Of course, this
    is not really practical, but it is necessary. This is where beta testers can come
    in handy.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要像你期望人们使用它一样测试它，否则你会认为它运行良好，但人们对你的虚拟世界不满意。你需要尽可能多地在各种浏览器和硬件平台上进行测试。当然，这实际上并不现实，但却是必要的。这就是Beta测试人员可以派上用场的地方。
- en: How rendering works
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染的工作原理
- en: We were talking about rendering. This is the process of taking the mathematical
    model, with the attributes expressed, and turning it into something you can see
    on your screen.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在谈论渲染。这是将数学模型与表达的属性转化为屏幕上可见的东西的过程。
- en: To render your models in VR, React VR uses WebGL, which is based on OpenGL.
    WebGL is a JavaScript implementation and should, generally, look the same on most
    platforms if they have a fairly functional implementation in the browser. If you
    describe an upright red arrow, then in all browsers it will look like an arrow
    pointing up. The advice about testing is generally to make sure that it works
    at all, not so much to make sure an up arrow will not suddenly point to the right.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在VR中渲染你的模型，React VR使用了基于OpenGL的WebGL。WebGL是JavaScript的实现，如果浏览器中有一个相当功能的实现，它通常应该在大多数平台上看起来一样。如果你描述一个竖直的红色箭头，那么在所有浏览器中它都应该看起来像一个指向上方的箭头。关于测试的建议通常是确保它能够正常工作，而不是确保一个向上的箭头不会突然指向右边。
- en: In the game industry, people usually have to make a decision between DirectX
    and OpenGL. WebVR uses neither, although WebGL is based on the design of OpenGL.
    Unlike OpenGL, it also includes HTML elements such as HTML5 canvas and DOM (Document
    Object Model). If you are using WebVR, you are using WebGL.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏行业，人们通常需要在DirectX和OpenGL之间做出决定。WebVR既不使用DirectX也不使用OpenGL，尽管WebGL是基于OpenGL设计的。与OpenGL不同，它还包括HTML元素，如HTML5画布和DOM（文档对象模型）。如果你在使用WebVR，你就是在使用WebGL。
- en: If a browser you are testing doesn't show your scene right, but does in other
    browsers, *please* file a bug report. Many of these applications are, like most
    cool things on the internet, bleeding edge.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在测试的浏览器没有正确显示你的场景，但其他浏览器可以，请务必提交错误报告。这些应用程序中的许多都是像互联网上的大多数酷东西一样处于前沿。
- en: You want these bugs fixed — so tell people. Programmers can't fix what they
    don't know about. You'll be contributing to a saner, cleaner, more effective web.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望这些错误得到修复-所以告诉人们。程序员无法修复他们不知道的问题。你将为更加理智、更加清洁、更加有效的网络做出贡献。
- en: Be part of the solution!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 成为解决方案的一部分！
- en: WebGL will generally use your high performance GPU, through either OpenGL or
    through DirectX. You don't need to worry about, nor are you able to control, what
    React VR uses (unless going native), although this is an advantage. The web browser
    will generally do the right thing and use any hardware available on either mobile
    (phones, tablets), laptop, or desktop machine.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: WebGL通常会使用高性能的GPU，通过OpenGL或DirectX。你不需要担心，也无法控制React VR使用的内容（除非使用原生应用），尽管这是一个优势。Web浏览器通常会做正确的事情，并利用手机（手机，平板电脑），笔记本电脑或台式机上可用的任何硬件。
- en: What if you want to control rendering more precisely? That is possible with
    React VR Native, which we will cover in more detail in a later chapter.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更精确地控制渲染呢？这是可能的，使用React VR Native，我们将在以后的章节中更详细地介绍。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned the important ways to describe our VR world. If
    you want to think about it this way, we're learning the language of the matrix,
    and it even involves matrices. We learned about 3D coordinates, points, vectors,
    right-and left-handed worlds, and transforms.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了描述我们的VR世界的重要方法。如果你想这样想，我们正在学习矩阵的语言，甚至涉及到矩阵。我们学习了关于3D坐标，点，向量，右手和左手世界以及变换。
- en: We learned how all of these concepts come together and are rendered, and how
    the different web pages take that information and create a visual space out of
    it. We also learned to test!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了所有这些概念是如何结合在一起并呈现的，以及不同的网页如何利用这些信息创建一个视觉空间。我们还学会了如何进行测试！
- en: To be able to test, we need something in the browser. To do that, we need to
    know not only how to describe the world in terms of numbers and rotations, but
    also how these numbers are used in building blocks. The next section will cover
    the keywords, components, and objects that React VR uses to describe the world.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行测试，我们需要在浏览器中有一些东西。为了做到这一点，我们不仅需要知道如何用数字和旋转来描述世界，还需要知道这些数字如何在构建块中使用。下一节将介绍React
    VR用来描述世界的关键词，组件和对象。
