- en: Chapter 1. Getting Started with React and Bootstrap
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。开始使用React和Bootstrap
- en: There are many different ways to build modern web application with JavaScript
    and CSS, including a lot of different tool choices, and a lot of new theory to
    learn. This book introduces you to ReactJS and Bootstrap which you will likely
    come across as you learn about modern web app development. They are both used
    for building fast and scalable user interfaces. React is famously known as a the
    (view) in MVC. When we talk about defining *M* and *C* we need to look somewhere
    else or we can use other frameworks like Redux and Flux to handle the remote data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript和CSS构建现代Web应用程序有许多不同的方法，包括许多不同的工具选择和许多新的理论需要学习。本书向您介绍了ReactJS和Bootstrap，您在学习现代Web应用程序开发时可能会遇到它们。它们都用于构建快速和可扩展的用户界面。React以（视图）而闻名于MVC。当我们谈论定义*M*和*C*时，我们需要寻找其他地方，或者我们可以使用其他框架如Redux和Flux来处理远程数据。
- en: The best way to learn code is to write code, so we're going to jump right in.
    To show you just how easy it is to get up and running with Bootstrap and ReactJS,
    we're going to  cover theory and will make a super simple application that will
    allow us to build a form and have it displayed on the page in real time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 学习代码的最佳方法是编写代码，所以我们将立即开始。为了向您展示使用Bootstrap和ReactJS轻松上手的方法，我们将涵盖理论，并制作一个超级简单的应用程序，可以让我们构建一个表单，并实时在页面上显示它。
- en: 'You can write code in whichever way you feel comfortable. Try to create small
    components/code samples, which will give you more clarity/understanding of any
    technology. Now, let''s see how this book is going to make your life easier when
    it comes to Bootstrap and ReactJS. We are going to cover some theoretical part
    and build two simple, real-time examples:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以任何您感觉舒适的方式编写代码。尝试创建小组件/代码示例，这将让您更清楚/了解任何技术。现在，让我们看看这本书将如何在涉及Bootstrap和ReactJS时让您的生活变得更轻松。我们将涵盖一些理论部分，并构建两个简单的实时示例：
- en: Hello World! with ReactJS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hello World！使用ReactJS
- en: A simple static form application with React and Bootstrap
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React和Bootstrap的简单静态表单应用程序
- en: Facebook has really changed the way we think about frontend UI development with
    the introduction of React. One of the main advantages of this component-based
    approach is that it is easy to understand, as the view is just a function of the
    properties and state.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook通过引入React真正改变了我们对前端UI开发的看法。这种基于组件的方法的主要优势之一是易于理解，因为视图只是属性和状态的函数。
- en: 'We''re going to cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Setting up the environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置环境
- en: ReactJS setup
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReactJS设置
- en: Bootstrap setup
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap设置
- en: Why Bootstrap
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要使用Bootstrap
- en: Static form example with React and Bootstrap
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React和Bootstrap的静态表单示例
- en: ReactJS
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ReactJS
- en: React (sometimes called React.js or ReactJS) is an open-source JavaScript library
    that provides a view for data rendered as HTML. Components have been used typically
    to render React views that contain additional components specified as custom HTML
    tags. React gives you a trivial virtual DOM, powerful views without templates,
    unidirectional data flow, and explicit mutation. It is very methodical in updating
    the HTML document when the data changes; and provides a clean separation of components
    on a modern single-page application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: React（有时称为React.js或ReactJS）是一个开源的JavaScript库，提供了一个将数据呈现为HTML的视图。组件通常用于呈现包含自定义HTML标记的其他组件的React视图。React为您提供了一个微不足道的虚拟DOM，强大的视图而无需模板，单向数据流和显式变异。当数据发生变化时，它在更新HTML文档方面非常有条理；并在现代单页应用程序上提供了组件的清晰分离。
- en: Observing the following example, we will have a clear idea of normal HTML encapsulation
    and ReactJS custom HTML tags.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下示例，我们将清楚地了解普通HTML封装和ReactJS自定义HTML标记。
- en: 'Observe the following JavaScript code snippet:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下JavaScript代码片段：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Observe the following ReactJS code snippet:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下ReactJS代码片段：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As your app comes into existence and develops further, it's advantageous to
    ensure that your components are used in the right manner. The React app consists
    of reusable components, which makes code reuse, testing, and separation of concerns
    easy.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序的出现和进一步发展，确保组件以正确的方式使用是有利的。React应用程序由可重用组件组成，这使得代码重用、测试和关注点分离变得容易。
- en: React is not only the *V* in MVC, but it also has stateful components (stateful
    components remember everything within `this.state`). It handles mapping from input
    to state changes, and it renders components. In this sense, it does everything
    that an MVC does.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: React不仅是MVC中的*V*，还具有有状态组件（有状态组件记住`this.state`中的所有内容）。它处理输入到状态变化的映射，并渲染组件。在这个意义上，它做了MVC所做的一切。
- en: 'Let''s look at React''s component life cycle and its different levels. We will
    discuss more on this in the forthcoming chapters. Observe the following diagram:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下React的组件生命周期及其不同的级别。我们将在接下来的章节中更多地讨论这个问题。观察以下图表：
- en: '![ReactJS](graphics/image_01_001.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![ReactJS](graphics/image_01_001.jpg)'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: React isn't an MVC framework; it's a library for building a composable user
    interface and reusable components. React is used at Facebook in its production
    stages and [instagram.com](https://www.instagram.com/?hl=en) is entirely built
    on React.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: React不是一个MVC框架；它是一个用于构建可组合用户界面和可重用组件的库。React在Facebook的生产阶段使用，并且[instagram.com](https://www.instagram.com/?hl=en)完全基于React构建。
- en: Setting up the environment
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'When we start to make an application with ReactJS, we need to do some setup,
    which just involves an HTML page and includes a few files. First, we create a
    directory (folder) called `chapter1`. Open it up in any of your code editors.
    Create a new file called `index.html` directly inside it and add the following
    HTML5 boilerplate code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始使用ReactJS制作应用程序时，我们需要进行一些设置，这只涉及一个HTML页面和包含一些文件。首先，我们创建一个名为`chapter1`的目录（文件夹）。在任何代码编辑器中打开它。直接在其中创建一个名为`index.html`的新文件，并添加以下HTML5样板代码：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is a standard HTML page that we can update once we have included the React
    and Bootstrap libraries.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个标准的HTML页面，一旦我们包含了React和Bootstrap库，就可以更新它。
- en: 'Now we need to create a couple of folders inside the `chapter1` folder named
    `images`, `css`, and `js` (JavaScript) to make your application manageable. Once
    you have completed the folder structure it will look like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在`chapter1`文件夹内创建`images`、`css`和`js`（JavaScript）等几个文件夹，以便使应用程序更易管理。完成文件夹结构后，它将如下所示：
- en: '![Setting up the environment](graphics/image_01_002.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![设置环境](graphics/image_01_002.jpg)'
- en: Installing ReactJS and Bootstrap
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装ReactJS和Bootstrap
- en: Once we have finished creating the folder structure, we need to install both
    our frameworks, ReactJS and Bootstrap. It's as simple as including JavaScript
    and CSS files in your page. We can do this via a **Content Delivery Network**
    (**CDN**), such as Google or Microsoft, but we are going to fetch the files manually
    in our application so we don't have to be dependent on the Internet and can work
    offline.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件夹结构完成后，我们需要安装ReactJS和Bootstrap两个框架。只需在页面中包含JavaScript和CSS文件即可。我们可以通过**内容传送网络**（**CDN**）来实现这一点，比如谷歌或微软，但我们将在应用程序中手动获取文件，这样就不必依赖互联网，可以离线工作。
- en: Installing React
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装React
- en: 'First, we have to go to this URL [https://facebook.github.io/react/](https://facebook.github.io/react/)
    and hit the **Download React v15.1.0** button:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要转到此网址[https://facebook.github.io/react/](https://facebook.github.io/react/)，然后点击**下载React
    v15.1.0**按钮：
- en: '![Installing React](graphics/image_01_003.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![安装React](graphics/image_01_003.jpg)'
- en: This will give you a ZIP file of the latest version of ReactJS that includes
    ReactJS library files and some sample code for ReactJS.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您提供最新版本的ReactJS的ZIP文件，其中包括ReactJS库文件和一些ReactJS的示例代码。
- en: 'For now, we will only need two files in our application: `react.min.js` and
    `react-dom.min.js` from the `build` directory of the extracted folder.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在我们的应用程序中只需要两个文件：从提取的文件夹的`build`目录中的`react.min.js`和`react-dom.min.js`。
- en: 'Here are a few steps we need to follow:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们需要遵循的几个步骤：
- en: Copy `react.min.js` and `react-dom.min.js` to your project directory, the `chapter1/js`
    folder, and open up your `index.html` file in your editor.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`react.min.js`和`react-dom.min.js`复制到您的项目目录，`chapter1/js`文件夹，并在编辑器中打开您的`index.html`文件。
- en: 'Now you just need to add the following script in your page''s `head` tag section:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您只需要在页面的`head`标签部分添加以下脚本：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now we need to include the compiler in our project to build the code because
    right now we are using tools such as npm. We will download the file from the following
    CDN path, [https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js](https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js),
    or you can give the CDN path directly.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要在我们的项目中包含编译器来构建代码，因为现在我们正在使用诸如npm之类的工具。我们将从以下CDN路径下载文件，[https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js](https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js)，或者您可以直接给出CDN路径。
- en: 'The `head` tag section will look like this:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`head`标签部分将如下所示：'
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is what the final structure of your `js` folder will look like:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的`js`文件夹的最终结构将是这样的：
- en: '![Installing React](graphics/image_01_004.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![安装React](graphics/image_01_004.jpg)'
- en: Bootstrap
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap
- en: Bootstrap is an open source frontend framework maintained by Twitter for developing
    responsive websites and web applications. It includes HTML, CSS, and JavaScript
    code to build user interface components. It's a fast and easy way to develop a
    powerful mobile-first user interface.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap是由Twitter维护的开源前端框架，用于开发响应式网站和Web应用程序。它包括HTML、CSS和JavaScript代码来构建用户界面组件。这是开发强大的移动优先用户界面的快速简便的方式。
- en: The Bootstrap grid system allows you to create responsive 12-column grids, layouts,
    and components. It includes predefined classes for easy layout options (fixed
    width and full width). Bootstrap has a dozen prestyled reusable components and
    custom jQuery plugins, such as button, alerts, dropdown, modal, tooltip tab, pagination,
    carousal, badges, icons, and much more.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap网格系统允许您创建响应式的12列网格、布局和组件。它包括预定义的类，用于简单的布局选项（固定宽度和全宽度）。Bootstrap有数十个预定义的可重用组件和自定义jQuery插件，如按钮、警报、下拉菜单、模态框、工具提示标签、分页、轮播、徽章、图标等等。
- en: Installing Bootstrap
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Bootstrap
- en: 'Now, we need to install Bootstrap. Visit [http://getbootstrap.com/getting-started/#download](http://getbootstrap.com/getting-started/#download)and
    hit on the **Download Bootstrap** button:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要安装Bootstrap。访问[http://getbootstrap.com/getting-started/#download](http://getbootstrap.com/getting-started/#download)，然后点击**下载Bootstrap**按钮：
- en: '![Installing Bootstrap](graphics/image_01_005.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![安装Bootstrap](graphics/image_01_005.jpg)'
- en: 'This includes the compiled and minified version of `css` and `js` for our app;
    we just need the CSS `bootstrap.min.css` and `fonts` folder. This style sheet
    will provide you with the look and feel of all the components, and is responsive
    layout structure for our application. Previous versions of Bootstrap included
    icons as images but, in version 3, icons have been replaced with fonts. We can
    also customize the Bootstrap CSS style sheet as per the component used in your
    application:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括我们应用程序的`css`和`js`的编译和压缩版本；我们只需要CSS`bootstrap.min.css`和`fonts`文件夹。这个样式表将为您提供所有组件的外观和感觉，并为我们的应用程序提供响应式布局结构。Bootstrap的早期版本包括图标作为图像，但在3版本中，图标已被替换为字体。我们还可以根据应用程序中使用的组件自定义Bootstrap
    CSS样式表：
- en: Extract the ZIP folder and copy the Bootstrap CSS from the `css` folder to your
    project folder's CSS.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压缩ZIP文件夹，并将Bootstrap CSS从`css`文件夹复制到项目文件夹的CSS中。
- en: Now copy the `fonts` folder of Bootstrap into your project root directory.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将Bootstrap的`fonts`文件夹复制到您的项目根目录中。
- en: 'Open your `index.html` in your editor and add this `link` tag in your `head`
    section:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开你的`index.html`，并在`head`部分添加这个`link`标签：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'That''s it. Now we can open up `index.html` again, but this time in your browser,
    to see what we are working with. The following is the code that we have written
    so far:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在我们可以再次在浏览器中打开`index.html`，看看我们正在处理的内容。以下是我们迄今为止编写的代码：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using React
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React
- en: So now we've got the ReactJS and Bootstrap style sheet from where we've initialized
    our app. Now let's start to write our first Hello World app using `ReactDOM.render()`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经从ReactJS和Bootstrap样式表中初始化了我们的应用程序。现在让我们开始编写我们的第一个Hello World应用程序，使用`ReactDOM.render()`。
- en: 'The first argument of the `ReactDOM.render` method is the component we want
    to render and the second is the DOM node to which it should mount (append) to.
    Observe the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReactDOM.render`方法的第一个参数是我们要渲染的组件，第二个参数是它应该挂载（附加）到的DOM节点。观察以下代码：'
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In order to translate it to vanilla JavaScript, we use wraps in our React code,
    `<script type"text/babel">`, tag that actually performs the transformation in
    the browser.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将其转换为纯JavaScript，我们在我们的React代码中使用包裹，`<script type"text/babel">`，这个标签实际上在浏览器中执行转换。
- en: 'Let''s start out by putting one `div` tag in our `body` tag:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在`body`标签中放一个`div`标签开始：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, add the `script` tag with React code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加带有React代码的`script`标签：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The XML syntax of JavaScript is called JSX. We will explore this in further
    chapters.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的XML语法称为JSX。我们将在后续章节中探讨这一点。
- en: 'Let''s open the HTML page in your browser. If you see **Hello, world!** in
    your browser then we are on a good track. Observe the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中打开HTML页面。如果你在浏览器中看到**Hello, world!**，那么我们就走在了正确的轨道上。观察以下截图：
- en: '![Using React](graphics/image_01_006.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![使用React](graphics/image_01_006.jpg)'
- en: 'In the preceding screenshot, you can see it shows **Hello, world!** in your
    browser. That''s great. We have successfully completed our setup and built our
    first Hello World app. Here is the complete code that we have written so far:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，你可以看到它在你的浏览器中显示了**Hello, world!**。太棒了。我们已经成功完成了我们的设置，并构建了我们的第一个Hello
    World应用程序。以下是迄今为止我们编写的完整代码：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Static form with React and Bootstrap
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React和Bootstrap创建静态表单
- en: We have completed our first Hello World app with React and Bootstrap and everything
    looks good and as expected. Now it's time do more and create one static login
    form, applying the Bootstrap look and feel to it. Bootstrap is a great way to
    make your app a responsive grid system for different mobile devices and apply
    the fundamental styles on HTML elements with the inclusion of a few classes and
    divs.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了我们的第一个使用React和Bootstrap的Hello World应用程序，一切看起来都很好，符合预期。现在是时候做更多的事情，创建一个静态登录表单，并将Bootstrap的外观和感觉应用到它上面。Bootstrap是一个很好的方式，可以使您的应用程序成为不同移动设备的响应式网格系统，并在HTML元素上应用基本样式，包括一些类和divs。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The responsive grid system is an easy, flexible, and quick way to make your
    web application responsive and mobile-first, that appropriately scales up to 12
    columns per device and viewport size.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式网格系统是一种简单、灵活、快速的方式，可以使您的Web应用程序具有响应性和移动优先性，适当地按设备和视口大小扩展到12列。
- en: First, let's start to make an HTML structure to follow the Bootstrap grid system.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们开始制作一个HTML结构，以遵循Bootstrap网格系统。
- en: 'Create a `div` and add a `className .container` for (fixed width) and `.container-fluid`
    for (full width). Use the `className` attribute instead of using `class`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`div`，并添加一个`className .container`（固定宽度）和`.container-fluid`（全宽度）。使用`className`属性而不是使用`class`：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As we know, `class` and `for` are discouraged as XML attribute names. Moreover,
    these are reserved words in many JavaScript libraries so, to have a clear difference
    and identical understanding, instead of using `class` and `for`, we can use `className`
    and `htmlFor`. Create a `div` and add the `className="row"`. The `row` must be
    placed within `.container-fluid`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，`class`和`for`被不鼓励作为XML属性名称。此外，这些在许多JavaScript库中都是保留字，因此，为了有一个清晰的区别和相同的理解，我们可以使用`className`和`htmlFor`来代替使用`class`和`for`。创建一个`div`并添加`className="row"`。`row`必须放在`.container-fluid`中：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now create columns that must be immediate children of a row:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建必须是行的直接子元素的列：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`.row` and `.col-xs-4` are predefined classes that are available for quickly
    making grid layouts.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`.row`和`.col-xs-4`是预定义的类，可用于快速创建网格布局。'
- en: 'Add the `h1` tag for the title of the page:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为页面的标题添加`h1`标签：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Grid columns are created by the given specified number of `col-sm-*` of 12
    available columns. For example, if we are using a four column layout, we need
    to specify to `col-sm-3` lead-in equal columns:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 网格列是由给定的`col-sm-*`中的指定数量的12个可用列创建的。例如，如果我们使用四列布局，我们需要指定`col-sm-3`以获得相等的列：
- en: '| **Class name** | **Devices** |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| **类名** | **设备** |'
- en: '| `col-sm-*` | Small devices |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `col-sm-*` | 小设备 |'
- en: '| `col-md-*` | Medium devices |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `col-md-*` | 中等设备 |'
- en: '| `col-lg-*` | Large devices |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `col-lg-*` | 大设备 |'
- en: 'We are using the `col-sm-*` prefix to resize our columns for small devices.
    Inside the columns, we need to wrap our form elements `label` and `input` tags
    into a `div` tag with the `form-group` class:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`col-sm-*`前缀来调整我们的小设备的列。在列内，我们需要将我们的表单元素`label`和`input`标签包装在具有`form-group`类的`div`标签中：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Forget the style of Bootstrap; we need to add the `form-control` class in our
    input elements. If we need extra padding in our `label` tag then we can add the
    `control-label` class on the `label`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 忘记Bootstrap的样式；我们需要在输入元素中添加`form-control`类。如果我们需要在`label`标签中添加额外的填充，那么我们可以在`label`上添加`control-label`类。
- en: Let's quickly add the rest of the elements. I am going to add a `password` and
    `submit` button.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速添加其余的元素。我将添加一个`password`和`submit`按钮。
- en: In previous versions of Bootstrap, form elements were usually wrapped in an
    element with the `form-action` class. However, in Bootstrap 3, we just need to
    use the same `form-group` instead of `form-action`. We will discuss Bootstrap
    classes and responsiveness in more detail in [Chapter 2](ch02.html "Chapter 2. Lets
    Build a Responsive Theme with React-Bootstrap and React"), *Lets Build a Responsive
    Theme with React-Bootstrap and React*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bootstrap的早期版本中，表单元素通常包装在具有`form-action`类的元素中。然而，在Bootstrap 3中，我们只需要使用相同的`form-group`而不是`form-action`。我们将在[第2章](ch02.html
    "第2章。使用React-Bootstrap和React构建响应式主题")中更详细地讨论Bootstrap类和响应性，*使用React-Bootstrap和React构建响应式主题*。
- en: 'Here is our complete HTML code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们完整的HTML代码：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now create one object inside the `var loginFormHTML` script tag and assign
    this HTML:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`var loginFormHTML`脚本标签内创建一个对象，并将此HTML分配给它：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will pass this object in the `React.DOM()` method instead of directly passing
    the HTML:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`React.DOM()`方法中传递这个对象，而不是直接传递HTML：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Our form is ready. Now let''s see how it looks in the browser:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表单已经准备好了。现在让我们看看它在浏览器中的样子：
- en: '![Static form with React and Bootstrap](graphics/image_01_007.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![使用React和Bootstrap的静态表单](graphics/image_01_007.jpg)'
- en: The compiler is unable to parse our HTML because we have not enclosed one of
    the `div` tags properly. You can see in our HTML that we have not closed the wrapper
    `container-fluid` at the end. Now close the wrapper tag at the end and open the
    file again in your browser.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '编译器无法解析我们的HTML，因为我们没有正确地封闭其中一个`div`标签。您可以在我们的HTML中看到，我们没有在最后关闭包装器`container-fluid`。现在在最后关闭包装器标签，然后在浏览器中重新打开文件。 '
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Whenever you hand code (write) your HTML code, please double-check your start
    tag and end tag. It should be written/closed properly, otherwise it will break
    your UI/frontend look and feel.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您手工编写HTML代码时，请仔细检查您的起始标记和结束标记。它应该被正确地编写/关闭，否则它将破坏您的UI/前端外观和感觉。
- en: 'Here is the HTML after closing the `div` tag:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在关闭`div`标签后的HTML如下：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, you can check your page on a browser and you will be able to see the form
    with the look and feel as shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在浏览器上检查您的页面，您将能够看到表单的外观和感觉如下屏幕截图所示：
- en: '![Static form with React and Bootstrap](graphics/image_01_008.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![使用React和Bootstrap的静态表单](graphics/image_01_008.jpg)'
- en: 'Now it''s working fine and looks good. Bootstrap also provides two additional
    classes to make your elements smaller and larger: `input-lg` and `input-sm`. You
    can also check the responsive behavior by resizing the browser. Observe the following
    screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它运行良好，看起来不错。Bootstrap还提供了两个额外的类来使您的元素变小和变大：`input-lg`和`input-sm`。您还可以通过调整浏览器大小来检查响应式行为。观察以下屏幕截图：
- en: '![Static form with React and Bootstrap](graphics/image_01_009.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![使用React和Bootstrap的静态表单](graphics/image_01_009.jpg)'
- en: That looks great. Our small static login form application is ready with responsive
    behavior.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错。我们的小型静态登录表单应用程序已经具备了响应式行为。
- en: As this is an introductory chapter, a question might come to your mind of how
    will React be helpful or beneficial?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个介绍性的章节，您可能会想知道React如何有益或有利？
- en: 'Here''s your answer:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你的答案：
- en: Rendering your component is very easy
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染您的组件非常容易
- en: Reading a component's code would be very easy with help of JSX
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过JSX的帮助，阅读组件的代码将会非常容易
- en: JSX will also help you to check your layout as well as checking components plug
    in with each other
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSX还将帮助您检查布局以及检查组件之间的插件
- en: You can test your code easily and it also allows other tools to integrate for
    enhancement
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以轻松测试您的代码，它还允许其他工具集成以进行增强
- en: React is a view layer, and you can also use it with other JavaScript frameworks
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React是一个视图层，您还可以将其与其他JavaScript框架一起使用。
- en: The preceding points are very high-level and we will see more benefits in detail
    with the upcoming examples in the chapters that follow.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 上述观点是非常高层次的，我们将在接下来的章节中详细了解更多好处。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Our simple static login form application and Hello World examples are looking
    great and working exactly how they should, so let's recap what we've learned in
    the this chapter.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简单的静态登录表单应用程序和Hello World示例看起来很棒，而且正好按照预期工作，所以让我们回顾一下我们在本章中学到的内容。
- en: To begin with, we saw just how easy it is to get ReactJS and Bootstrap installed
    with the inclusion of JavaScript files and a style sheet. We also looked at how
    the React application is initialized and started building our first form application.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们看到了使用JavaScript文件和样式表轻松安装ReactJS和Bootstrap的方法。我们还看了React应用程序是如何初始化的，并开始构建我们的第一个表单应用程序。
- en: 'The Hello World app and form application which we have created demonstrates
    some of React''s and Bootstrap''s basic features such as the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的Hello World应用程序和表单应用程序演示了React和Bootstrap的一些基本功能，例如以下内容：
- en: ReactDOM
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReactDOM
- en: Render
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染
- en: Browserify
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Browserify
- en: Bootstrap
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap
- en: With Bootstrap, we worked towards having a responsive grid system for different
    mobile devices and applied the fundamental styles of HTML elements with the inclusion
    of a few classes and divs.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bootstrap，我们努力为不同的移动设备实现响应式网格系统，并应用了一些类和div的基本HTML元素样式。
- en: We also saw the framework's new mobile-first responsive design in action without
    cluttering up our markup with unnecessary classes or elements.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了框架的新的移动优先响应式设计，而不会在我们的标记中添加不必要的类或元素。
- en: In [Chapter 2](ch02.html "Chapter 2. Lets Build a Responsive Theme with React-Bootstrap
    and React"), *Lets Build a Responsive Theme with React-Bootstrap and React*, we
    will delve into Bootstrap's features and how to use the grid. We are going to
    explore some more Bootstrap fundamentals and introduce the project we are going
    to build over the course of this book.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。使用React-Bootstrap和React构建响应式主题")中，*让我们使用React-Bootstrap和React构建一个响应式主题*，我们将深入了解Bootstrap的特性以及如何使用网格。我们将探索一些更多的Bootstrap基础知识，并介绍我们将在本书中构建的项目。
