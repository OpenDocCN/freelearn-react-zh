- en: Chapter 4. Creating Your First React Component
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。创建您的第一个React组件
- en: In the previous chapter, you learned how to create React elements and how to
    use them to render the HTML markup. You saw how easy it is to produce React elements
    using JSX. At this point, you know enough about React to create static web pages,
    which we discussed in [Chapter 3](ch03.html "Chapter 3. Creating Your First React
    Element"), *Creating Your First React Element*. However, I bet that's not the
    reason why you've decided to learn React. You don't want to just build websites
    made of static HTML elements. You want to build interactive user interfaces that
    react to user and server events. What does it mean to react to an event? How can
    a static HTML element **react**? How can a React element react? In this chapter,
    we'll answer these questions and many other questions while introducing ourselves
    to React components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了如何创建React元素以及如何使用它们来渲染HTML标记。您看到使用JSX生成React元素是多么容易。在这一点上，您已经了解了足够多的关于React的知识，可以创建静态网页，我们在[第3章](ch03.html
    "第3章。创建您的第一个React元素")中讨论了这一点，*创建您的第一个React元素*。然而，我敢打赌这不是您决定学习React的原因。您不只是想构建由静态HTML元素组成的网站。您想要构建对用户和服务器事件做出反应的交互式用户界面。对事件做出反应意味着什么？静态HTML元素如何**反应**？React元素如何反应？在本章中，我们将回答这些问题以及许多其他问题，同时向React组件介绍自己。
- en: Stateless versus stateful
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无状态与有状态
- en: To react means to switch from one state to another. This means that you need
    to have a state in the first place and the ability to change that state. Have
    we mentioned a state or the ability to change that state in React elements? No.
    They are stateless. Their sole purpose is to construct and render virtual DOM
    elements. In fact, we want them to render in the exact same way, given that we
    provide them with exactly the same set of parameters. We want them to be consistent
    because it makes it easy for us to reason about them. This is one of the key benefits
    of using React—the ease of reasoning about how our web application works.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 反应意味着从一种状态切换到另一种状态。这意味着你需要首先有一个状态，以及改变该状态的能力。我们在React元素中提到了状态或改变状态的能力吗？没有。它们是无状态的。它们的唯一目的是构建和渲染虚拟DOM元素。事实上，我们希望它们以完全相同的方式渲染，只要我们为它们提供完全相同的参数。我们希望它们保持一致，因为这样可以方便我们理解它们。这是使用React的关键好处之一——方便我们理解我们的Web应用程序的工作原理。
- en: How can we add state to our stateless React elements? If we can't encapsulate
    state in React elements, then we should encapsulate React elements in something
    that already has state. Think of a simple state machine that represents a user
    interface. Every user action triggers a change of a state in that state machine.
    Every state is represented by a different React element. In React, this state
    machine is called a **React component**.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何向我们的无状态React元素添加状态？如果我们不能在React元素中封装状态，那么我们应该将React元素封装在已经具有状态的东西中。想象一个代表用户界面的简单状态机。每个用户操作都会触发该状态机中的状态变化。每个状态由不同的React元素表示。在React中，这个状态机被称为**React组件**。
- en: Creating your first stateless React component
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个无状态React组件
- en: 'Let''s take a look at the following example of how to create a React component:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个React组件的以下示例：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Some of the preceding code should already look familiar to you, and the rest
    can be broken down into two simple steps:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的一些代码对你来说可能已经很熟悉了，其余部分可以分解为两个简单的步骤：
- en: Creating a React component class.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个React组件类。
- en: Creating a React component.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个React组件。
- en: 'Let''s take a closer look at how we can create a React component:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下如何创建一个React组件：
- en: Create a `ReactClass` class as a subclass of the `Component` class. In this
    chapter, we'll focus on learning how to create React component classes in more
    detail.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`ReactClass`类作为`Component`类的子类。在本章中，我们将重点学习如何更详细地创建React组件类。
- en: Create `reactComponent` by calling the `ReactDOM.render()` function and providing
    our `ReactClass` element as its element parameter.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`ReactDOM.render()`函数并将我们的`ReactClass`元素作为其元素参数提供来创建`reactComponent`。
- en: 'I strongly recommend that you read this blog post by Dan Abramov that explains
    in greater details the differences between React components, elements and instances:
    [https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html](https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议您阅读Dan Abramov的这篇博文，其中更详细地解释了React组件、元素和实例之间的区别：[https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html](https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html)
- en: The look and feel of our React component is declared in `ReactClass`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: React组件的外观和感觉在`ReactClass`中声明。
- en: 'The `Component` class encapsulates a component''s state and describes how a
    component is rendered. At the very minimum, the React component class needs to
    have a `render()` method so that it returns `null` or `false`. Here is an example
    of a `render()` method in its simplest form:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Component`类封装了组件的状态并描述了组件的呈现方式。至少，React组件类需要有一个`render()`方法，以便返回`null`或`false`。以下是一个最简单形式的`render()`方法的示例：'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can guess, the `render()` method is responsible for telling React what
    this component should render. It can return `null`, as in the preceding example,
    and nothing will be rendered on the screen. Or, it can return JSX elements that
    we learned how to create in [Chapter 3](ch03.html "Chapter 3. Creating Your First
    React Element"), *Creating Your First React Element*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可以猜到的，`render()`方法负责告诉React这个组件应该呈现什么。它可以返回`null`，就像前面的例子中一样，屏幕上将不会呈现任何内容。或者，它可以返回我们在[第3章](ch03.html
    "第3章。创建您的第一个React元素")中学习如何创建的JSX元素，*创建您的第一个React元素*：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This example shows how we can encapsulate our React element inside our React
    component. We create an `h1` element with a `className` property and some text
    as its children. Then, we return it when the `render()` method is called. The
    fact that we encapsulated our React element inside a React component doesn''t
    affect how it will be rendered:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了我们如何将React元素封装在React组件中。我们创建了一个带有`className`属性和一些文本作为其子元素的`h1`元素。然后，在调用`render()`方法时返回它。我们将React元素封装在React组件中的事实并不影响它的呈现方式：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the produced HTML markup is identical to the one we created
    in [Chapter 3](ch03.html "Chapter 3. Creating Your First React Element"), *Creating
    Your First React Element*, without using the React component. In this case, you
    might be wondering, what's the benefit of having a `render()` method if we can
    render the exact same markup without it?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，生成的HTML标记与我们在[第3章](ch03.html "第3章。创建您的第一个React元素")中创建的标记相同，*创建您的第一个React元素*，而不使用React组件。在这种情况下，您可能会想知道，如果我们可以在没有它的情况下呈现完全相同的标记，那么拥有`render()`方法的好处是什么？
- en: 'The advantage of having a `render()` method is that, like with any other function,
    before it returns a value, it can choose what value to return. So far, you''ve
    seen two examples of a `render()` method: one that returns `null` and the other
    one that returns a React element. We can merge the two and add a condition that
    decides what to render:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有`render()`方法的优势在于，与任何其他函数一样，在返回值之前，它可以选择返回什么值。到目前为止，您已经看到了两个`render()`方法的例子：一个返回`null`，另一个返回一个React元素。我们可以合并这两个并添加一个条件来决定要渲染什么：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this example, we created the `componentState` constant that references to
    an object with a single `isHidden` property. This object acts as a state for our
    React component. If we want to hide our React component, then we need to set the
    value of `componentState.isHidden` to `true`, and our `render` function will return
    `null`. In this case, React will render nothing. Logically, setting `componentState.isHidden`
    to `false`, will return our React element and render the expected HTML markup.
    The question you might ask is how do we set the value of `componentState.isHidden`
    to `false`? Or to `true`? Or how do we change it in general?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了`componentState`常量，它引用了一个具有单个`isHidden`属性的对象。这个对象充当我们的React组件的状态。如果我们想要隐藏我们的React组件，那么我们需要将`componentState.isHidden`的值设置为`true`，我们的`render`函数将返回`null`。在这种情况下，React将不渲染任何内容。从逻辑上讲，将`componentState.isHidden`设置为`false`，将返回我们的React元素并渲染预期的HTML标记。您可能会问的问题是，我们如何将`componentState.isHidden`的值设置为`false`？或者设置为`true`？或者如何一般地改变它？
- en: Let's think of scenarios in which we might want to change that state. One of
    them is when a user interacts with our user interface. Another one is when a server
    sends data. Or, when a certain amount of time passes, and now, we want to render
    something else. Our `render()` method is not aware of all these events, and it
    shouldn't be because its sole purpose is to return a React element based on the
    data that we pass to it. How do we pass data to it?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想想我们可能想要改变状态的情况。其中之一是当用户与我们的用户界面交互时。另一个是当服务器发送数据时。或者，当一定时间过去后，现在我们想要渲染其他东西。我们的`render()`方法并不知道所有这些事件，也不应该知道，因为它的唯一目的是根据我们传递给它的数据返回一个React元素。我们如何将数据传递给它？
- en: 'There are two ways to pass data to a `render()` method using the React API:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以使用React API将数据传递给`render()`方法：
- en: '`this.props`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.props`'
- en: '`this.state`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.state`'
- en: Here, `this.props` should look familiar to you. In [Chapter 3](ch03.html "Chapter 3. Creating
    Your First React Element"), *Creating* *Your First React Element*, you learned
    that the `React.createElement()` function accepts the `props` parameter. We used
    it to pass attributes to our HTML elements, but we didn't discuss what happens
    behind the scene and why attributes passed to the `props` object get rendered.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`this.props`对您来说应该很熟悉。在[第3章](ch03.html "第3章。创建您的第一个React元素")*创建您的第一个React元素*中，您学习了`React.createElement()`函数接受`props`参数。我们用它来传递属性给我们的HTML元素，但我们没有讨论发生了什么以及为什么传递给`props`对象的属性会被渲染。
- en: 'Any data that you put in the `props` object and pass to JSX elements can be
    accessed inside the `render()` method via `this.props`. Once you access data from
    `this.props`, you can render it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您放入`props`对象并传递给JSX元素的任何数据都可以通过`this.props`在`render()`方法中访问。一旦您从`this.props`访问数据，您可以渲染它：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, we're using `this.props` inside of our `render()` method to
    access the `header` property. We're then passing `this.props.header` directly
    to the `h1 element` as a child.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们在`render()`方法中使用`this.props`来访问`header`属性。然后，我们直接将`this.props.header`作为子元素传递给`h1元素`。
- en: 'In the preceding example, we can pass the value of `isHidden` as another property
    of the `this.props` object:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们可以将`isHidden`的值作为`this.props`对象的另一个属性传递：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Notice that in this example we''re repeating `this.props` twice. It''s quite
    common for a `this.props` object to have properties that we want to access multiple
    times in our `render` method. For this reason, I recommend that you destructure
    `this.props` first:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这个例子中，我们重复了两次`this.props`。一个`this.props`对象通常有我们想要在`render`方法中多次访问的属性。因此，我建议你首先解构`this.props`：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Have you noticed how in the previous example instead of storing `isHidden` in
    a `render()` method we're passing it via `this.props`? We removed our `componentState`
    object because we don't need to worry about the component's state in our `render()`
    method. The `render()` method shouldn't mutate the component's state or access
    the real DOM or otherwise interact with a web browser. We might want to render
    our React component on a server, where we have no web browser, and we should expect
    the `render()` method to produce the same result regardless of the environment.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否注意到在前面的例子中，我们不是将`isHidden`存储在`render()`方法中，而是通过`this.props`传递它？我们移除了我们的`componentState`对象，因为我们不需要在`render()`方法中担心组件的状态。`render()`方法不应该改变组件的状态或访问真实的DOM，或以其他方式与Web浏览器交互。我们可能希望在服务器上渲染我们的React组件，在那里我们没有Web浏览器，并且我们应该期望`render()`方法在任何环境下都能产生相同的结果。
- en: If our `render()` method doesn't manage the state, then how do we manage it?
    How do we set the state, and how do we update it while handling user or browser
    events in React?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的`render()`方法不管理状态，那么我们如何管理它？我们如何设置状态，以及在处理React中的用户或浏览器事件时如何更新它？
- en: 'Earlier in this chapter, you learned that in React, we can represent a user
    interface with React components. There are two types of React components:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，你学到了在React中，我们可以用React组件表示用户界面。有两种类型的React组件：
- en: With a state
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个状态
- en: Without a state
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有状态
- en: Hold on! Didn't we say that React components are state machines? Surely, every
    state machine needs to have a state. You're correct, however, it's a good practice
    to keep as many React components stateless as possible.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下！我们不是说React组件是状态机吗？当然，每个状态机都需要有一个状态。你是对的，但是尽可能保持尽可能多的React组件无状态是一个好习惯。
- en: 'React components are composable. As a result, we can have a hierarchy of React
    components. Imagine that we have a parent React component that has two child components,
    and each of them in turn has another two child components. All the components
    are stateful and they can manage their own state:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: React组件是可组合的。因此，我们可以有一个React组件的层次结构。想象一下，我们有一个父React组件，它有两个子组件，每个子组件又有另外两个子组件。所有组件都是有状态的，它们可以管理自己的状态：
- en: '![Creating your first stateless React component](graphics/B05915_04_01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![创建你的第一个无状态React组件](graphics/B05915_04_01.jpg)'
- en: 'How easy will it be to figure out what the last child component in the hierarchy
    will render, if the top component in the hierarchy updates its state? Not easy.
    There is a design pattern that removes this unnecessary complexity. The idea is
    to separate your components by two concerns: how to handle the user interface
    interaction logic and how to render data.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果层次结构中顶部组件更新其状态，要弄清楚最后一个子组件将渲染什么，会有多容易？不容易。有一种设计模式可以消除这种不必要的复杂性。这个想法是通过两个关注点来分离你的组件：如何处理用户界面交互逻辑和如何渲染数据。
- en: The minority of your React components are stateful. They should be at the top
    of your components' hierarchy. They encapsulate all of the interaction logic,
    manage the user interface state, and pass that state down the hierarchy to stateless
    components using `props`.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的React组件中少数是有状态的。它们应该位于组件层次结构的顶部。它们封装了所有的交互逻辑，管理用户界面状态，并将该状态通过`props`传递到无状态组件的层次结构中。
- en: The majority of your React components are stateless. They receive their parent
    components' state data via `this.props` and render that data accordingly.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的React组件中大多数是无状态的。它们通过`this.props`接收其父组件的状态数据，并相应地渲染该数据。
- en: In our previous example, we received the `isHidden` state data via `this.props`,
    and then we rendered that data. Our component was stateless.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的例子中，我们通过`this.props`接收了`isHidden`状态数据，然后渲染了该数据。我们的组件是无状态的。
- en: Next, let's create our first stateful component.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建我们的第一个有状态组件。
- en: Creating your first stateful React component
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个有状态的React组件
- en: Stateful components are the most appropriate place for your application to handle
    the interaction logic and manage states. They make it easier for you to reason
    about how your application works. This reasoning plays a key role in building
    maintainable web applications.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有状态的组件是应用程序处理交互逻辑和管理状态的最合适的地方。它们使您更容易理解应用程序的工作原理。这种推理在构建可维护的Web应用程序中起着关键作用。
- en: 'React stores the component''s state in a `this.state` object. We assign the
    initial value of `this.state` as a public class field of the `Component` class:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: React将组件的状态存储在`this.state`对象中。我们将`this.state`的初始值分配为`Component`类的公共类字段：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, `{ isHidden: false }` is the initial state of our React component and
    our user interface. Notice that in our `render()` method, we''re now destructuring
    the `isHidden` property from `this.state` instead of `this.props`.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，`{ isHidden: false }`是我们的React组件和用户界面的初始状态。请注意，在我们的`render()`方法中，我们现在从`this.state`而不是`this.props`中解构`isHidden`属性。'
- en: Earlier in this chapter, you learned that we can pass data to the component's
    `render()` function via `this.props` or `this.state`. What is the difference between
    the two?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，您已经学习到我们可以通过`this.props`或`this.state`将数据传递给组件的`render()`函数。这两者之间有什么区别呢？
- en: '`this.props`: This stores read-only data that is passed from the parent. It
    belongs to the parent and cannot be changed by its children. This data should
    be considered immutable.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.props`：这存储了从父级传递的只读数据。它属于父级，不能被其子级更改。这些数据应被视为不可变的。'
- en: '`this.state`: This stores data that is private to the component. It can be
    changed by the component. The compoent will re-render itself when the state is
    updated.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.state`：这存储了对组件私有的数据。它可以被组件更改。当状态更新时，组件将重新渲染自身。'
- en: 'How do we update a component''s state? You can inform React of a state change
    using `setState(nextState, callback)`. This function takes two parameters:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如何更新组件的状态？您可以使用`setState(nextState, callback)`通知React状态变化。此函数接受两个参数：
- en: 'The `nextState` object that represents the next state. It could also be a function
    with a signature of `function(prevState, props) => newState`. This function takes
    two parameters: previous state and properties, and returns an object that represents
    a new state.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代表下一个状态的`nextState`对象。它也可以是一个带有`function(prevState, props) => newState`签名的函数。此函数接受两个参数：先前的状态和属性，并返回表示新状态的对象。
- en: The `callback` function, which you will rarely need to use because React keeps
    your user interface up to date for you.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callback`函数，您很少需要使用，因为React会为您保持用户界面的更新。'
- en: How does React keep your user interface up to date? It calls the component's
    `render()` function every time you update the component's state, including any
    child components, which are re-rendered as well. In fact, it re-renders the entire
    virtual DOM every time our `render()` function is called.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: React如何保持用户界面的更新？每次更新组件的状态时，包括任何子组件，它都会调用组件的`render()`函数。实际上，每次调用我们的`render()`函数时，它都会重新渲染整个虚拟DOM。
- en: When you call the `this.setState()` function and pass it a data object that
    represents the next state, React will merge that next state with the current state.
    During the merge, React will overwrite the current state with the next state.
    The current state that is not overwritten by the next state will become part of
    the next state.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用`this.setState()`函数并传递表示下一个状态的数据对象时，React将将下一个状态与当前状态合并。在合并过程中，React将用下一个状态覆盖当前状态。未被下一个状态覆盖的当前状态将成为下一个状态的一部分。
- en: 'Imagine that this is our current state:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下这是我们当前的状态：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We call `this.setState(nextState)`, where `nextState` is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用`this.setState(nextState)`，其中`nextState`如下：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'React will merge the two states into a new one:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: React将这两个状态合并为一个新的状态：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `isHidden` property was updated and the `title` property was not deleted
    or updated in any way.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`isHidden`属性已更新，`title`属性未被删除或以任何方式更新。'
- en: 'Now that we know how to update our component''s state, let''s create a stateful
    component that reacts to a user event:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何更新我们组件的状态，让我们创建一个对用户事件做出反应的有状态组件：
- en: 'In this example, we''re creating a toggle button that shows and hides a header.
    The first thing we do is that we set our initial state object. Our initial state
    has two properties: `isHeaderHidden` that is set to `false`, and the title set
    to `Stateful React Component`. Now, we can access this state object in our `render()`
    method via `this.state`. Inside our `render()` method, we create three React elements:
    `h1`, `button`, and `div`. Our `div` element acts as a parent element for our
    `h1` and `button` elements. However, in one case, we create our `div` element
    with two children, the `header` and `button` elements, and in another case, we
    create it with only one child, the `button`. The case we choose depends on the
    value of `this.state.isHeaderHidden`. The current state of our component directly
    affects what the `render()` function will render. While this should look familiar
    to you, there is something new in this example that we haven''t seen before.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在创建一个切换按钮，用于显示和隐藏标题。我们首先设置我们的初始状态对象。我们的初始状态有两个属性：`isHeaderHidden`设置为`false`，标题设置为`Stateful
    React Component`。现在，我们可以通过`this.state`在我们的`render()`方法中访问这个状态对象。在我们的`render()`方法中，我们创建三个React元素：`h1`，`button`和`div`。我们的`div`元素充当我们的`h1`和`button`元素的父元素。然而，在某种情况下，我们创建我们的`div`元素有两个子元素，`header`和`button`元素，而在另一种情况下，我们只创建一个子元素，`button`。我们选择的情况取决于`this.state.isHeaderHidden`的值。我们组件的当前状态直接影响`render()`函数将渲染什么。虽然这对您来说应该很熟悉，但在这个例子中有一些新的东西是我们以前没有见过的。
- en: Notice that we've added a new method called `handleClick()` to our component
    class. The `handleClick()` method has no special meaning to React. It's part of
    our application logic, and we use it to handle the `onClick` events. You can add
    your own custom methods to a React component class as well because it's just a
    JavaScript class. All of these methods will be available via a `this` reference,
    which you can access in any method in your component class. For example, we are
    accessing a state object via `this.state` in both the `render()` and `handleClick()`
    methods.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在组件类中添加了一个名为`handleClick()`的新方法。`handleClick()`方法对React没有特殊意义。它是我们应用逻辑的一部分，我们用它来处理`onClick`事件。您也可以向React组件类添加自定义方法，因为它只是一个JavaScript类。所有这些方法都将通过`this`引用可用，您可以在组件类中的任何方法中访问它。例如，我们在`render()`和`handleClick()`方法中都通过`this.state`访问状态对象。
- en: 'What does our `handleClick()` method do? It updates our component''s state
    by toggling the `isHeaderHidden` property:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`handleClick()`方法做什么？它通过切换`isHeaderHidden`属性来更新我们组件的状态：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Our `handleClick()` method reacts to a user''s interaction with our user interface.
    Our user interface is a `button` element that a user can click on, and we can
    attach an event handler to it. In React, you can attach event handlers to components
    by passing them to JSX properties:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`handleClick()`方法对用户与用户界面的交互做出反应。我们的用户界面是一个`button`元素，用户可以点击它，我们可以将事件处理程序附加到它上面。在React中，您可以通过将它们传递给JSX属性来将事件处理程序附加到组件上：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: React uses the **camelCase** naming convention for event handlers, for example,
    `onClick`. You can find a list of all the supported events at [http://facebook.github.io/react/docs/events.html#supported-events](http://facebook.github.io/react/docs/events.html#supported-events).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: React使用**驼峰命名**约定来命名事件处理程序，例如，`onClick`。您可以在[http://facebook.github.io/react/docs/events.html#supported-events](http://facebook.github.io/react/docs/events.html#supported-events)找到所有支持的事件列表。
- en: By default, React triggers the event handlers in the bubble phase, but you can
    tell React to trigger them in the capture phase by appending `Capture` to the
    event name, for example, `onClickCapture`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，React在冒泡阶段触发事件处理程序，但您可以告诉React在捕获阶段触发它们，方法是在事件名称后附加`Capture`，例如`onClickCapture`。
- en: React wraps a browser's native events into the `SyntheticEvent` object to ensure
    that all the supported events behave identically in Internet Explorer 8 and above.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: React将浏览器的原生事件封装到`SyntheticEvent`对象中，以确保所有支持的事件在Internet Explorer 8及以上版本中表现一致。
- en: The `SyntheticEvent` object provides the same API as the native browser's event,
    which means that you can use the `stopPropagation()` and `preventDefault()` methods
    as usual. If for some reason, you need to access that native browser's event,
    then you can do this via the `nativeEvent` property.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`SyntheticEvent`对象提供与原生浏览器事件相同的API，这意味着您可以像往常一样使用`stopPropagation()`和`preventDefault()`方法。如果出于某种原因，您需要访问原生浏览器事件，那么可以通过`nativeEvent`属性来实现。'
- en: 'Notice that passing the `onClick` property to our `createElement()` function
    in the previous example does not create an inline event handler in the rendered
    HTML markup:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上一个示例中，将`onClick`属性传递给我们的`createElement()`函数并不会在呈现的HTML标记中创建内联事件处理程序：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is because React doesn't actually attach event handlers to the DOM nodes
    themselves. Instead, React listens for all the events at the top level using a
    single event listener and delegates them to their appropriate event handlers.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为React实际上并没有将事件处理程序附加到DOM节点本身。相反，React在顶层监听所有事件，使用单个事件侦听器并将它们委托给它们适当的事件处理程序。
- en: In the previous example, you learned how to create a stateful React component
    that a user can interact with and change its state. We created and attached an
    event handler to the `click` event that updates the value of the `isHeaderHidden`
    property. But have you noticed that the user interaction does not update the value
    of another property that we store in our state, `title`. Does that seem odd to
    you? We have data in our state that doesn't ever get changed. This observation
    raises an important question; what should we *not* put in our state?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，您学习了如何创建一个有状态的React组件，用户可以与之交互并更改其状态。我们创建并附加了一个事件处理程序到`click`事件，以更新`isHeaderHidden`属性的值。但您是否注意到用户交互不会更新我们在状态中存储的另一个属性`title`的值。这对您来说是否奇怪？我们的状态中有一些数据永远不会改变。这个观察引发了一个重要的问题；我们不应该将什么放在我们的状态中？
- en: Ask yourself, "What data can I remove from a component's state and still keep
    its user interface always up to date?" Keep asking and keep removing that data
    until you're absolutely certain that there is nothing left to remove, without
    breaking your user interface.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 问问自己，“我可以从组件的状态中删除哪些数据，而仍然保持其用户界面始终更新？”继续问，继续删除数据，直到您绝对确定没有剩下任何要删除的东西，而不会破坏用户界面。
- en: 'In our example, we have the `title` property in our state object that we can
    move to our `render()` method, without breaking the interactivity of our toggle
    button. The component will still work as expected:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们在状态对象中有`title`属性，我们可以将其移动到我们的`render()`方法中，而不会破坏我们的切换按钮的交互性。组件仍将按预期工作：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'On the other hand, if we move the `isHeaderHidden` property out of our state
    object, then we''ll break the interactivity of our component, because our `render()`
    method will not be triggered automatically by React every time that a user clicks
    on our button anymore. This is an example of broken interactivity:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果我们将`isHeaderHidden`属性移出状态对象，那么我们将破坏组件的交互性，因为我们的`render()`方法将不再被React自动触发，每当用户点击我们的按钮时。这是一个破坏交互性的例子。
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: For better results in the output, please refer to the code files.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：为了获得更好的输出结果，请参考代码文件。'
- en: This is an antipattern.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个反模式。
- en: 'Remember this rule of thumb: a component''s state should store data that a
    component''s event handlers may change over time in order to re-render a component''s
    user interface and keep it up to date. Keep the minimal possible representation
    of a component''s state in a `state` object, and compute the rest of the data
    based on what''s in `state` and `props` inside a component''s `render()` method.
    Take advantage of the fact that React will re-render your component when its state
    is changed.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住这个经验法则：组件的状态应该存储组件的事件处理程序可能随时间改变的数据，以便重新渲染组件的用户界面并保持其最新状态。在`state`对象中保持组件状态的最小可能表示，并根据`state`和`props`中的内容在组件的`render()`方法中计算其余数据。利用React会在其状态改变时重新渲染组件的特性。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you reached an important milestone: you learned how to encapsulate
    a state and create interactive user interfaces by creating React components. We
    discussed stateless and stateful React components and the difference, between
    them. We talked about browser events and how to handle them in React.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您达到了一个重要的里程碑：您学会了如何封装状态并通过创建React组件来创建交互式用户界面。我们讨论了无状态和有状态的React组件以及它们之间的区别。我们谈到了浏览器事件以及如何在React中处理它们。
- en: In the next chapter, you'll learn what's new in React 16.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解React 16中的新功能。
