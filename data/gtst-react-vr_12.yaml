- en: Publishing Your App, and Where to Go from Here
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布您的应用程序，以及接下来要做什么
- en: It is fun to develop and experience virtual worlds at home. Eventually though,
    you want the world to see your world. To do that, we need to package and publish
    our app. In the course of development, upgrades to React may come along; before
    publishing, you will need to decide whether you need to "code freeze" and ship
    with a stable version, or upgrade to a new version. This is a design decision.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在家中开发和体验虚拟世界是很有趣的。但最终，您希望世界能看到您的世界。为了做到这一点，我们需要打包和发布我们的应用程序。在开发过程中，可能会出现对React的升级；在发布之前，您需要决定是否需要“冻结代码”并使用稳定版本进行发布，或者升级到新版本。这是一个设计决策。
- en: 'At some point, you will need to upgrade, and you will need to publish. This
    chapter will explain how to do both as well as how to organize your code and check
    your dryer, and your code, for lint. We will cover these topics here:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，您将需要升级，并且您将需要发布。本章将解释如何同时做到这两点，以及如何组织您的代码并检查您的干衣机和代码是否有lint。我们将在这里涵盖以下主题：
- en: 'Types of upgrades: Rip and Replace or "Facelift" upgrade, or "Upgrade in place"'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级类型：Rip and Replace或“Facelift”升级，或“现场升级”
- en: How to ensure that proper versions of your components are present
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何确保您的组件的正确版本存在
- en: Development versus non-development versions, components, and libraries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发与非开发版本、组件和库
- en: Distribution licenses
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分发许可证
- en: Linking and embedding VR content
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接和嵌入VR内容
- en: Publishing to common web hosts and Content Delivery Networks.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布到常见的Web主机和内容交付网络。
- en: Where VR is going in the next 5 years
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未来5年VR的发展方向
- en: Upgrading React VR
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级React VR
- en: 'One of the neat things, although it can be frustrating, is that web projects
    are frequently updated. During the writing of this book, React VR was updated.
    There are a couple of different ways to do an upgrade:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个很棒的事情，尽管可能会令人沮丧，是Web项目经常会更新。在编写本书时，React VR已经更新。有几种不同的升级方式：
- en: You can install/create a new app with the same name
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以安装/创建一个同名的新应用程序
- en: You will then go to your old app and copy everything over
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后您将转到您的旧应用程序并复制所有内容
- en: This is a **facelift** upgrade or *Rip and Replace*
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一种**facelift**升级或*Rip and Replace*
- en: Do an update. Mostly, this is an update to `package.json`, and then delete `node_modules`
    and rebuild it. This is an **upgrade in place**.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行更新。主要是对`package.json`进行更新，然后删除`node_modules`并重新构建。这是一种**现场升级**。
- en: 'It is up to you which method you use, but the major difference is that an upgrade
    in place is somewhat easier—no source code to modify and copy—but it may or may
    not work. A Facelift upgrade also relies on you using the correct `react-vr-cli`.
    There is a notice that runs whenever you run React VR from the Command Prompt
    that will tell you whether it''s old:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择使用哪种方法，但主要区别在于现场升级有点更容易——无需修改和复制源代码——但可能有效也可能无效。Facelift升级还取决于您是否使用了正确的`react-vr-cli`。每当您从命令提示符运行React
    VR时，都会有一个通知告诉您它是否过时：
- en: '![](Images/b5176f24-10f5-41f5-8449-3d2cec0094bf.png)The error or warning that
    comes up about an upgrade when you run React VR from a Command Prompt may fly
    by quickly. It takes a while to run, so you may go away for a cup of coffee.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/b5176f24-10f5-41f5-8449-3d2cec0094bf.png)当您从命令提示符运行React VR时，关于升级的错误或警告可能会很快地飞过。运行需要一段时间，所以您可能会离开一会儿去喝杯咖啡。'
- en: Pay attention to red lines, seriously.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 认真关注红线。
- en: To do an upgrade in place, you will typically get an update notification from
    Git if you have subscribed to the project. If you haven't, you should go to: [http://bit.ly/ReactVR](http://bit.ly/ReactVR),
    create an account (if you don't have one already), and click on the eyeball icon
    to join the watch list. Then, you will get an email every time there is an upgrade.
    We will cover the most straightforward way to do an upgrade—upgrade in place,
    first.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行就地升级，通常会从Git那里收到更新通知，如果您已经订阅了该项目。如果没有，您应该转到：[http://bit.ly/ReactVR](http://bit.ly/ReactVR)，创建一个帐户（如果您还没有），然后单击眼睛图标加入观察列表。然后，每次有升级时，您都会收到一封电子邮件。我们将介绍最简单的升级方式——就地升级，首先。
- en: Upgrading in place
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 就地升级
- en: 'How do you know what version of React you have installed? From a Node.js prompt,
    type this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您如何知道您安装了哪个版本的React？从Node.js提示符中，键入以下内容：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Also, check the version of `react-vr-web`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 还要检查`react-vr-web`的版本：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Check the version of `react-vr-cli` (the command-line interface, really only
    for creating the *hello world* app).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`react-vr-cli`（命令行界面，实际上只用于创建*hello world*应用程序）的版本。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Check the version of `ovrui` (open VR''s user interface):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`ovrui`（open VR的用户界面）的版本：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can check these against the versions on the documentation. If you've subscribed
    to React VR on GitHub (and you should!), then you will get an email telling you
    that there is an upgrade. Note that the CLI will also tell you if it is out of
    date, although this only applies when you are creating a new application (folder/website).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据文档中的版本进行检查。如果您已经在GitHub上订阅了React VR（您应该这样做！），那么您将收到一封电子邮件告诉您有升级。请注意，CLI还会告诉您是否过时，尽管这仅适用于创建新应用程序（文件夹/网站）时。
- en: 'The release notes are at: [http://bit.ly/VRReleases](http://bit.ly/VRReleases) .
    There, you will find instructions to upgrade. The upgrade instructions usually
    have you do the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 发布说明在：[http://bit.ly/VRReleases](http://bit.ly/VRReleases)。在那里，您将找到升级的说明。升级说明通常要求您执行以下操作：
- en: Delete your `node_modules` directory.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除您的`node_modules`目录。
- en: Open your `package.json` file.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的`package.json`文件。
- en: Update `react-vr`, `react-vr-web`, and `ovrui` to "New version number" for example,
    2.0.0.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`react-vr`，`react-vr-web`和`ovrui`更新为"新版本号"，例如2.0.0。
- en: Update `react` to "a.b.c".
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`react`更新为"a.b.c"。
- en: Update `react-native to` "~d.e.f".
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`react-native`更新为"~d.e.f"。
- en: Update `three` to "^g.h.k".
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`three`更新为"^g.h.k"。
- en: Run `npm` install or yarn.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`npm` install或yarn。
- en: Note the ~ and ^ symbols; ~version means *approximately equivalent to version* and ^version
    means *compatible with version*. This is a help, as you may have other packages
    that may want other versions of `react-native` and `three`, specifically. To get
    the values of {a...k}, refer to the release notes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意~和^符号；~版本表示*大致等于版本*，^版本表示*与版本兼容*。这是一个帮助，因为您可能有其他包可能需要其他版本的`react-native`和`three`。要获取{a...k}的值，请参考发布说明。
- en: 'I have also found that you may need to include these modules in the `devDependencies` section
    of `package.json`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我还发现您可能需要在`package.json`的`devDependencies`部分中包含这些模块：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You may see this error:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会看到此错误：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you do, make the following changes in your projects root folder in the
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您这样做，请在项目的根目录中进行以下更改
- en: '`rncli.config.js` file.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`rncli.config.js`文件。'
- en: Replace the `var blacklist = require('./node_modules/react-native/packager/blacklist');` line with `var
    blacklist = require('./node_modules/metro-bundler/src/blacklist');`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将`var blacklist = require('./node_modules/react-native/packager/blacklist');`行替换为`var
    blacklist = require('./node_modules/metro-bundler/src/blacklist');`。
- en: Third-party dependencies
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方依赖
- en: 'If you have been experimenting and adding modules with `npm install <something>`,
    you may find, after an upgrade, that things do not work. The `package.json` file
    also needs to know about all the additional packages you installed during experimentation.
    This is the project way (npm way) to ensure that Node.js knows we need a particular
    piece of software. If you have this issue, you''ll need to either repeat the `install`
    with the—`save` parameter, or edit the `dependencies` section in your `package.json`
    file. For example (bold line mine), when we were experimenting with random numbers
    in the last chapter, we could add this line manually:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在尝试实验并使用`npm install <something>`添加模块，你可能会发现，在升级后，事情不起作用。`package.json`文件也需要知道你在实验过程中安装的所有额外包。这是项目方式（npm方式）确保Node.js知道我们需要特定的软件。如果你遇到这个问题，你需要使用`--save`参数重复`install`，或者编辑你的`package.json`文件中的`dependencies`部分。例如（我加粗的那行），在上一章中我们尝试随机数时，我们可以手动添加这行：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Again, this is the manual way; a better way is to use `npm install <package>
    -save`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这是手动的方法；更好的方法是使用`npm install <package> -save`。
- en: The `-s` qualifier saves the new package you've installed in `package.json`.
    The manual edits can be handy to ensure that you've got the right versions if
    you get a version mismatch.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`-s`限定符将你安装的新包保存在`package.json`中。手动编辑可以确保你得到正确的版本，如果出现版本不匹配的情况。'
- en: 'If you mess around with installing and removing enough packages, you will eventually
    mess up your modules. If you get errors even after removing `node_modules`, issue
    these commands:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试安装和移除足够多的包，最终会搞乱你的模块。即使删除了`node_modules`后仍然出现错误，可以使用以下命令：
- en: '`npm cache clean --force`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm cache clean --force`'
- en: '`npm start -- --reset-cache`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm start -- --reset-cache`'
- en: The cache clean won't do it by itself; you need the `reset-cache`, otherwise,
    the problem packages will still be saved, even if they don't physically exist!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的缓存清理不起作用；你需要`reset-cache`，否则问题包仍然会被保存，即使它们实际上不存在！
- en: Really broken upgrades – rip and replace
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真的坏掉的升级 - 拆除和替换
- en: 'If, however, after all that work, your upgrade *still* does not work, all is
    not lost. We can do a *rip and replace* upgrade. Note that this is sort of a "last
    resort", but it does work fairly well. Follow these steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使经过所有这些工作，你的升级*仍然*不起作用，也不是没有希望。我们可以进行*拆除和替换*升级。请注意，这有点像“最后的手段”，但它确实效果相当不错。按照以下步骤操作：
- en: 'Ensure that your `react-vr-cli` package is up to date, globally:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的`react-vr-cli`包是全局最新的：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is important, as when there is a new version of React, you may not have
    the most up-to-date `react-vr-cli`. It will tell you when you use it that there
    is a newer version out, but that line frequently scrolls by; if you get bored
    and don't note, you can spend a lot of time trying to install an updated version,
    to no avail.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，因为当React有新版本时，你可能没有最新的`react-vr-cli`。它会在你使用它时告诉你有新版本发布了，但那行经常会滚动过去；如果你感到无聊并且没有注意到，你可能会花费很长时间尝试安装更新的版本，但却毫无结果。
- en: An npm generates a lot of verbiage, but it is important to read what it says,
    especially red formatted lines.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: npm会生成大量的文字，但重要的是要阅读它说了什么，尤其是红色格式的行。
- en: Ensure that all CLI (DOS) windows, editing sessions, Node.js running CLIs, and
    so on, are closed. (You shouldn't need to reboot, however; just close everything
    using the old directory).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有CLI（DOS）窗口、编辑会话、Node.js运行的CLI等都已关闭。（但是你不需要重新启动；只需关闭使用旧目录的所有内容）。
- en: Rename the *old* code to `MyAppName140` (add a version number to the end of
    the old `react-vr` directory).
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将*旧*代码重命名为`MyAppName140`（在旧的`react-vr`目录末尾添加版本号）。
- en: Create the application, using `react-vr init MyAppName`, in other words, the
    original app name.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`react-vr init MyAppName`创建应用程序，换句话说，就是原始应用程序名称。
- en: The next step is easiest using a diff program (refer to [http://bit.ly/WinDiff](http://bit.ly/WinDiff)).
    I use Beyond Compare, but there are other ones too. Choose one and install it,
    if needed.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步最容易使用差异程序（参考[http://bit.ly/WinDiff](http://bit.ly/WinDiff)）。我使用Beyond Compare，但也有其他选择。选择一个并安装它，如果需要的话。
- en: Compare the two directories, `.\MyAppName` (new) and `.\MyAppName140`, and see
    what files have changed.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较两个目录，`.\MyAppName`（新）和`.\MyAppName140`，看看哪些文件已更改。
- en: Move over any new files from your old app, including assets (you can probably
    copy over the entire static_assets folder).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从旧应用中移动任何新文件，包括资产（您可能可以复制整个static_assets文件夹）。
- en: 'Merge any files that have changed, except `package.json`. Generally, you will
    need to merge these files:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合并任何已更改的文件，除了`package.json`。通常，您需要合并这些文件：
- en: '`index.vr.js`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.vr.js`'
- en: '`client.js` (if you changed it)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client.js`（如果您已更改）'
- en: For `package.json`, see what lines have been added, and install those packages
    in the new app via npm `install <missed package> --save`, or start the app and
    see what is missing.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`package.json`，查看已添加了哪些行，并通过npm `install <missed package> --save`在新应用程序中安装这些包，或者启动应用程序并查看缺少了什么。
- en: Remove any files seeded by the *hello world* app, such as `chess-world.jpg`
    (unless you are using that background, of course).
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除*hello world*应用程序种子的任何文件，例如`chess-world.jpg`（除非您当然正在使用该背景）。
- en: Usually, you don't change the `rn-cli.config.js` file (unless you modified the
    seeded version).
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常情况下，您不会更改`rn-cli.config.js`文件（除非您修改了种子版本）。
- en: Most code will move directly over. Ensure that you change the application name
    if you changed the directory name, but with the preceding directions, you won't
    have to.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数代码将直接移动过来。确保如果更改了目录名称，则更改应用程序名称，但根据前述的指示，您不必这样做。
- en: The preceding list of upgrade steps may be slightly easier if there are massive
    changes to React VR; it will require some picking through source files. The source
    is pretty straightforward, so this should be easy in practice.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果React VR有大规模的更改，前述的升级步骤可能会稍微容易一些；这将需要一些对源文件的挑选。源代码非常直接，所以在实践中应该很容易。
- en: I found that these techniques will work best if the automatic upgrade did not
    work.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现如果自动升级没有起作用，这些技术将效果最佳。
- en: The best time to do an upgrade
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行升级的最佳时间
- en: As mentioned earlier, the time to do a major upgrade probably is not right before
    publishing the app, unless there is some new feature you need. You want to adequately
    test your app to ensure that there aren't any bugs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，进行重大升级的时间可能不是在发布应用程序之前，除非有一些新功能是必需的。您希望充分测试您的应用程序，以确保没有任何错误。
- en: I'm including the upgrade steps here, though, but not because you should do
    it right before publishing.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里包括升级步骤，但不是因为您应该在发布之前立即执行。
- en: Getting your code ready to publish
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好发布您的代码
- en: Honestly, you should never put off organizing your clothes until, oh, wait,
    we're talking about code. You should never put off organizing your code until
    the night you want to ship it. Even the code you think is throw away may end up
    in production. Learn good coding habits and style from the beginning.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，您永远不应该推迟整理衣服，直到，哦，等等，我们在谈论代码。您不应该推迟整理代码，直到您想要发布的那天晚上。即使您认为是临时的代码，也可能最终投入生产。从一开始就学习良好的编码习惯和风格。
- en: Good code organization
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 良好的代码组织
- en: 'Good code, from the very start, is very important for many reasons:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始就良好的代码对许多原因非常重要：
- en: If your code uses sloppy indentation, it's more difficult to read. Many code
    editors, such as Visual Studio Code, Atom, and Webstorm, will format code for
    you, but don't rely on these tools.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的代码缩进混乱，那么阅读起来会更加困难。许多代码编辑器，如Visual Studio Code，Atom和Webstorm，都会为您格式化代码，但不要依赖这些工具。
- en: Poor naming conventions can hide problems.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 糟糕的命名约定可能会隐藏问题。
- en: An improper case on variables can hide problems, such as using `this.State`
    instead of `this.state`.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量的不正确用法可能会隐藏问题，比如使用`this.State`而不是`this.state`。
- en: Most of the time spent coding, as much as 80%, is in maintenance. If you can't
    read the code, you can't maintain it. When you're a starting out programmer, you
    frequently think you'll always be able to read your own code, but when you pick
    up a piece years later and say *"Who wrote this junk?"* and then realize it was
    *you*, you will quit doing things like a, b, c, d variable names and the like.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码的大部分时间，高达80%，都是在维护。如果你看不懂代码，就无法维护它。当你作为一名初学者程序员时，你经常会认为自己永远能读懂自己的代码，但当几年后你拿起一段代码并说“谁写的这破玩意？”然后意识到是你自己时，你就会停止使用像a、b、c、d这样的变量名。
- en: Most software at some point is maintained, read, copied, or used by someone
    other than the author.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数软件在某个时候都会被其他人维护、阅读、复制或使用，而不是作者本人。
- en: Most programmers think code standards are for "the other guy," yet complain
    when they have to code well. Who then does?
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数程序员认为代码标准是给“别人”准备的，但却抱怨自己必须写好代码。那么是谁来做呢？
- en: Most programmers will immediately ask for the code documentation and roll their
    eyes when they don't find it. I usually ask to see the documentation they wrote
    for their last project. Every programmer I've hired usually gives me a deer in
    the headlights look. This is why I usually require good comments in the code.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数程序员会立刻要求代码文档，并在找不到时翻白眼。我通常会要求看他们上一个项目的文档。我雇佣的每个程序员通常都会露出茫然的表情。这就是为什么我通常要求代码中有良好的注释。
- en: 'A good comment is not something like this:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个好的注释不是这样的：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A good comment is this:'
  id: totrans-92
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个好的注释是这样的：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Cleaning the lint trap (checking code standards)
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理绒毛滤网（检查代码标准）
- en: When you wash clothes, the lint builds up and will eventually clog your washing
    machine or dryer, or cause a fire. In the PC world, old code, poorly typed names,
    and all can also build up.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当你洗衣服时，绒毛会堆积，最终会堵塞你的洗衣机或烘干机，或者引发火灾。在PC世界中，旧代码、打字不好的名称等也会堆积起来。
- en: '**Refactoring** is one way to clean up the code. I *highly* recommend that
    you use some form of version control, such as Git or bitbucket to check your code;
    while refactoring, it''s quite possible to totally mess up your code and if you
    don''t use version control, you may lose a lot of work.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**重构**是清理代码的一种方法。我*强烈*建议你使用某种版本控制，比如Git或bitbucket来检查你的代码；在重构时，完全有可能彻底搞砸你的代码，如果你不使用版本控制，可能会丢失很多工作。'
- en: A great way to do a code review of your work, before you publish, is to use
    a **linter**. Linters go through your code and point out problems (crud), improper
    syntax, things that may work differently than you intend, and generally try to
    pick up your room after you, like your mom does. While you might not like it if
    your mom does that, these tools are invaluable. Computers are, after all, very
    picky and why not use the machines against each other?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布之前，对你的工作进行代码审查的一个很好的方法是使用**linter**。Linter会检查你的代码并指出问题（垃圾）、不正确的语法，可能与你意图不同的东西，并且通常会尽力整理你的房间，就像你妈妈一样。虽然你可能不喜欢你妈妈这样做，但这些工具是非常宝贵的。毕竟，计算机非常挑剔，为什么不让它们互相对抗呢？
- en: One of the most common ways to let software check your software for JavaScript
    is a program called **ESLint**. You can read about it at: [http://bit.ly/JSLinter](http://bit.ly/JSLinter).
    To install ESLint, you can do it via npm like most packages—`npm install eslint
    --save-dev`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让软件检查你的JavaScript代码的最常见方法之一是一个名为**ESLint**的程序。你可以在这里了解更多信息：[http://bit.ly/JSLinter](http://bit.ly/JSLinter)。要安装ESLint，你可以像大多数软件包一样通过npm来安装——`npm
    install eslint --save-dev`。
- en: The `--save-dev` option puts a requirement in your project while you are developing.
    Once you've published your app, you won't need to pack the ESLint information
    with your project!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`--save-dev`选项在你开发项目时会对你的项目有要求。一旦你发布了你的应用程序，你就不需要将ESLint信息与你的项目一起打包了！'
- en: There are a number of other things you need to get ESLint to work properly;
    read the configuration pages and go through the tutorials. A lot depends on what
    IDE you use. You can use ESLint with Visual Studio, for example.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他事情你需要做才能让ESLint正常工作；阅读配置页面并完成教程。很大程度上取决于你使用的IDE。例如，你可以在Visual Studio中使用ESLint。
- en: Once you've installed ESLint, you need to configure a local configuration file.
    Do this with
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了ESLint之后，你需要配置一个本地配置文件。使用以下命令完成：
- en: '`eslint --init`.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`eslint --init`。'
- en: The `--init` command will display a prompt that will ask you how to configure
    the rules it will follow. It will ask a series of questions, and ask what style
    to use. AirBNB is fairly common, although you can use others; there's no wrong
    choice. If you are working for a company, they may already have standards, so
    check with management. One of the prompts will ask if you need React.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`--init`命令将显示一个提示，询问你如何配置它将遵循的规则。它会问一系列问题，并询问要使用什么样的风格。AirBNB是相当常见的，尽管你可以使用其他的；没有错误的选择。如果你在公司工作，他们可能已经有标准，所以请向管理层确认。其中一个提示将询问你是否需要React。'
- en: React VR coding style
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React VR编码风格
- en: '**Coding style** can be nearly religious, but in the JavaScript and React world,
    some standards are very common. AirBNB has one good, fairly well–regarded style
    guide at: [http://bit.ly/JStyle](http://bit.ly/JStyle).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**编码风格**几乎可以说是宗教，但在JavaScript和React世界中，一些标准是非常普遍的。AirBNB在这里有一个很好的、相当受推崇的样式指南：[http://bit.ly/JStyle](http://bit.ly/JStyle)。'
- en: 'For React VR, some style options to consider are as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于React VR，一些要考虑的样式选项如下：
- en: Use lowercase for the first letter of a variable name. In other words, this.props.currentX,
    not this.props.CurrentX, and don't use underscores (this is called **camelCase**).
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名的第一个字母使用小写。换句话说，使用this.props.currentX，而不是this.props.CurrentX，并且不要使用下划线（这被称为**驼峰命名法**）。
- en: Use **PascalCase** only when naming constructors or classes.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在命名构造函数或类时才使用**帕斯卡命名法**。
- en: As you're using PascalCase for files, make the filename match the class, so
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于你在文件中使用帕斯卡命名法，所以文件名要与类名匹配，因此
- en: import `MyClass from './MyClass'`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`MyClass from './MyClass'`。
- en: Be careful about 0 vs {0}. In general, learn JavaScript and React.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小心0与{0}。一般来说，学习JavaScript和React。
- en: Always use `const` or let to declare variables to avoid polluting the global
    namespace.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终使用`const`或`let`声明变量，以避免污染全局命名空间。
- en: Avoid using ++ and --. This one was hard for me, being a C++ programmer. Hopefully,
    by the time you've read this, I've fixed it in the source examples. If not, do
    as I say, not as I do!
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用++和--。这对我来说很难，因为我是一个C++程序员。希望在你读到这篇文章时，我已经在源代码示例中修复了它。如果没有，那就照我说的做，而不是照我做的做！
- en: Learn the difference between == and ===, and use them properly, another thing
    that is new for C++ and C# programmers.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习==和===之间的区别，并正确使用它们，这对于C++和C#程序员来说是新的。
- en: 'In general, I highly recommend that you pour over these coding styles and use
    a linter when you write your code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我强烈建议你仔细研究这些编码风格，并在编写代码时使用一个代码检查工具：
- en: '![](Images/07b6e8fd-0da4-4c28-b92c-dcc10c09dbf3.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/07b6e8fd-0da4-4c28-b92c-dcc10c09dbf3.png)'
- en: Third-party dependencies
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方依赖
- en: 'For your published website/application to really work reliably, we also need
    to update `package.json`; this is sort of the "project" way to ensure that Node.js
    knows we need a particular piece of software. We will edit the `"dependencies"`
    section to add the last line,(bold emphasis mine, bold won''t show up in a text
    editor, obviously!):'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使您发布的网站/应用程序真正可靠地工作，我们还需要更新`package.json`；这是一种“项目”方式，确保Node.js知道我们需要特定的软件。我们将编辑`"dependencies"`部分以添加最后一行（我加粗的部分，加粗在文本编辑器中不会显示出来，显然！）：
- en: '[PRE10]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is the manual way; a better way is to use `npm install <package> -s`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是手动的方法；更好的方法是使用`npm install <package> -s`。
- en: The `-s` qualifier saves the new package you've installed in `package.json`.
    The manual edits can be handy to ensure that you've got the right versions, if
    you get a version mismatch.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`-s` 限定符将安装的新软件包保存在`package.json`中。手动编辑可以确保您拥有正确的版本，如果出现版本不匹配的情况。'
- en: 'If you mess around with installing and removing enough packages, you will eventually
    mess up your modules. If you get errors, even after removing `node_modules`, issue
    these commands:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试安装和删除足够多的软件包，最终会搞乱您的模块。如果删除`node_modules`后仍然出现错误，请发出以下命令：
- en: '`npm start -- --reset-cache`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm start -- --reset-cache`'
- en: '`npm cache clean --force`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm cache clean --force`'
- en: The cache clean won't do it by itself; you need the reset–cache, otherwise the
    problem packages will still be saved, even if they don't physically exist!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 仅进行缓存清理是不够的；您需要重置缓存，否则问题软件包仍将被保存，即使它们在物理上不存在！
- en: Bundling for publishing on the web
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网络上发布捆绑
- en: Assuming that you have your project dependencies set up correctly to get your
    project to run from a web server, typically through an ISP or service provider,
    you need to "bundle" it. React VR has a script that will package up everything
    into just a few files.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经正确设置了项目依赖项，以便通过ISP或服务提供商从web服务器运行项目，您需要“捆绑”它。React VR有一个脚本，可以将所有内容打包成几个文件。
- en: Note, of course, that your desktop machine counts as a "web server", although
    I wouldn't recommend that you expose your development machine to the web. The
    better way to have other people experience your new Virtual Reality is to bundle
    it and put it on a commercial web service.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您的台式机也算是“web服务器”，尽管我不建议您将开发机暴露在网络上。让其他人体验您的新虚拟现实的更好方法是将其捆绑并放在商业网络服务上。
- en: Packaging React VR for release on a website
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为在网站上发布React VR进行打包
- en: 'The basic process is easy with the React VR provided script:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React VR提供的脚本，基本流程很容易：
- en: 'Go to the VR directory where you normally run `npm start`, and run the `npm
    run bundle` command:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到通常运行`npm start`的VR目录，并运行`npm run bundle`命令：
- en: '![](Images/c8ecd3f9-66c1-466c-99b2-e5a8e4bface4.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c8ecd3f9-66c1-466c-99b2-e5a8e4bface4.png)'
- en: You will then go to your website the same way you normally upload files, and
    create a directory called `vr`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您将以与通常上传文件相同的方式转到您的网站，并创建一个名为`vr`的目录。
- en: 'In your project directory, in our case `f:\ReactVR\WalkInAMaze`, find the following
    files in `.\VR\Build`:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目目录中，在我们的案例中是`f:\ReactVR\WalkInAMaze`，在`.\VR\Build`中找到以下文件：
- en: '`client.bundle.js`'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`client.bundle.js`'
- en: '`index.bundle.js`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.bundle.js`'
- en: Copy those to your website.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将它们复制到您的网站上。
- en: Make a directory called `static_assets`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`static_assets`的目录。
- en: Copy all of your files (that your app uses) from `AppName\static_assets` to
    the new `static_assets` folder.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的所有文件（您的应用程序使用的文件）从`AppName\static_assets`复制到新的`static_assets`文件夹。
- en: 'Ensure that you have MIME mapping set up for all of your content; in particular,
    .obj, .mtl, and .gltf files may need new mappings. Check with your web server
    documentation:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您为所有内容设置了MIME映射；特别是，.obj、.mtl和.gltf文件可能需要新的映射。请查阅您的web服务器文档：
- en: For gltf files, use `model/gltf-binary`
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于gltf文件，使用`model/gltf-binary`。
- en: Any .bin files used by gltf should be `application/octet-stream`
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何被gltf使用的.bin文件应为`application/octet-stream`
- en: For .obj files, I've used `application/octet-stream`
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于.obj文件，我使用了`application/octet-stream`
- en: The official list is at [http://bit.ly/MimeTypes](http://bit.ly/MimeTypes)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方列表位于[http://bit.ly/MimeTypes](http://bit.ly/MimeTypes)
- en: Very generally, `application/octet-stream` will send the files "exactly" as
    they are on the server, so this is sort of a general purpose "catch all"
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常一般地说，`application/octet-stream`将以服务器上的文件的“原样”发送，因此这在某种程度上是一种通用的“捕获所有”
- en: Copy the `index.html` from the root of your application to the directory on
    your website where you are publishing the app; in our case, it'll be the `vr` directory,
    so the file is alongside the two .js files.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`index.html`从应用程序的根目录复制到您发布应用程序的网站目录中；在我们的情况下，它将是`vr`目录，因此该文件与两个.js文件并列。
- en: 'Modify `index.html` for the following lines (note the change to `./index.vr`):'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`index.html`的以下行（请注意更改为`./index.vr`）：
- en: '[PRE11]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note for a production release, which means if you're pointing to a prebuilt
    bundle on a static web server and not the React Native bundler, the dev and platform
    flags actually won't do anything, so there's no difference between `dev=true`,
    `dev=false`, or even `dev=foobar`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于生产发布，这意味着如果您指向静态Web服务器上的预构建捆绑包而不是React Native捆绑器，则开发和平台标志实际上不会起作用，因此`dev=true`，`dev=false`或甚至`dev=foobar`之间没有区别。
- en: Obtaining releases and attribution
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取发布和归属
- en: If you used any assets from anywhere on the web, ensure that you have the proper
    release. For example, many Daz3D or Poser models do not include the rights to
    publish the geometry information; including these on your website as an OBJ or
    glTF file may be a violation of that agreement. Someone could easily download
    the model, or nearly all the geometry fairly easily, and then use it for something
    else.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从网络上的任何地方使用了任何资产，请确保您拥有适当的发布。例如，许多Daz3D或Poser模型不包括发布几何信息的权利；将这些信息包含在您的网站上作为OBJ或glTF文件可能会违反协议。某人可以轻松地下载模型，或者几乎所有的几何信息，然后将其用于其他用途。
- en: I am not a lawyer; you should check with wherever you get your models to ensure
    that you have permission, and if necessary, attribute properly.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我不是律师；您应该与您获取模型的地方核实您是否有权限，并在必要时正确归属。
- en: Attribution licenses are a little difficult with a VR world, unless you embed
    the attribution into a graphic somewhere; as we've seen, adding text can sometimes
    be distracting, and you will always have scale issues. If you embed a VR world
    in a page with `<iframe>`, you can always give proper attribution on the HTML
    side. However, this isn't really VR.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 归属许可在VR世界中有点困难，除非您将归属信息嵌入到某个图形中；正如我们所见，添加文本有时可能会分散注意力，并且您总会遇到比例问题。如果您在页面中嵌入了一个带有`<iframe>`的VR世界，您可以在HTML端始终给予适当的归属。但是，这并不是真正的VR。
- en: Checking image sizes and using content delivery sites
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查图像大小并使用内容交付站点
- en: Some of the images you use, especially the ones in a `<pano>` statement, can
    be quite large. You may need to optimize these for proper web speed and responsiveness.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用的一些图像，特别是`<pano>`语句中的图像，可能相当大。您可能需要优化这些图像以获得适当的网页速度和响应性。
- en: This is a fairly general topic, but one thing that can help is a **content delivery
    network **(**CDN**), especially if your world will be a high-volume one.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当一般的话题，但可以帮助的一件事是**内容交付网络**（**CDN**），特别是如果您的世界将是高流量的。
- en: 'Adding a CDN to your web server is easy. You host your asset files from a separate
    location, and you pass the root directory as the assetRoot at the `ReactVR.init()`
    call. For example, if your files were hosted at `https://cdn.example.com/vr_assets/`,
    you would change the method call in `index.html` to include the following third
    argument:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 将CDN添加到您的Web服务器很容易。您可以从一个单独的位置托管您的资产文件，并在`ReactVR.init()`调用时将根目录作为assetRoot传递。例如，如果您的文件托管在`https://cdn.example.com/vr_assets/`，您可以更改`index.html`中的方法调用以包括以下第三个参数：
- en: '[PRE12]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Optimizing your models
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化您的模型
- en: In [Chapter 10](59d8d97d-7730-4dd6-b8cc-af059352b533.xhtml), *Bringing in the
    Real Live World*, we built a maze that had the same *bush* model repeated for
    every square of the maze. If you were watching the web console, you may have noted
    this model being loaded over and over. It is not necessarily the most efficient
    way. Consider other techniques such as passing a model for the various child components
    as a prop.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](59d8d97d-7730-4dd6-b8cc-af059352b533.xhtml)中，*引入真实世界*，我们建立了一个迷宫，迷宫的每个方块都重复使用了相同的*灌木*模型。如果您观察了Web控制台，您可能会注意到这个模型一遍又一遍地被加载。这并不一定是最有效的方法。考虑其他技术，比如将模型作为属性传递给各种子组件。
- en: '**Polygon decimation** is another technique that is very valuable in optimizing
    models for the web and VR. With the glTF file format, you can use "normal maps"
    and still make a low polygon model look like a high-resolution one. Techniques
    to do this are well documented in the game development field. These techniques
    really do work well.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**多边形减少**是另一种在优化Web和VR模型中非常有价值的技术。使用glTF文件格式，您可以使用“法线贴图”，仍然使低多边形模型看起来像高分辨率模型。这些技术在游戏开发领域得到了很好的记录。这些技术确实非常有效。'
- en: You should also optimize models to not display unseen geometry. If you are showing
    a car model with blacked out windows, for example, there is no need to have engine
    detail and interior details loaded (unless the windows are transparent). This
    sounds obvious, although I found the lamp that I used to illustrate the lighting
    examples had almost tripled the number of polygons than was needed; the glass
    lamp shade had an inner and outer polygons that were inside the model.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该优化模型以不显示看不见的几何图形。例如，如果您显示一个有黑色窗户的汽车模型，就没有必要加载发动机细节和内部细节（除非窗户是透明的）。这听起来很明显，尽管我发现我用来说明照明示例的灯几乎比需要的多了两倍的多边形数量；玻璃灯罩内外都有多边形在模型内部。
- en: Now that we've gotten it published, what's next
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 既然我们已经发布了，接下来呢？
- en: Once we've gotten our realities built, what do we do? Where do we go?
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们建立了我们的现实，我们该怎么办？我们该去哪里？
- en: You wouldn't be reading this book if you didn't have some idea of some kind
    of VR experience to build. I encourage you to play and experiment. You can even
    try things that you've heard are bad (such as moving points of view).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有某种VR体验的想法，您就不会读这本书。我鼓励您去玩耍和尝试。您甚至可以尝试一些您听说过的不好的东西（比如移动视角）。
- en: When VR started exploding again, I was briefly somewhat disgruntled; most of
    the things that I'd done in the generation of VR before seemed to have been forgotten;
    people thought "VR UIs are new!". All the while VR academic literature is literally
    decades old, discussing perceptual effectiveness and VR UIs, just for one area
    of VR.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当VR再次爆发时，我曾经感到有些不满；我在之前的VR时代所做的大部分事情似乎已经被遗忘了；人们认为“VR用户界面是新的！”。而与此同时，VR学术文献实际上已经有几十年的历史，讨论了感知效果和VR用户界面，仅仅是VR的一个领域。
- en: However, this is not a bad thing. If the people flooding into VR can come up
    with some fresh new idea, maybe that will be the "Killer App" that everyone is
    looking for.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不是一件坏事。如果涌入VR的人们能够提出一些新鲜的想法，也许那将是每个人都在寻找的“杀手级应用程序”。
- en: Maybe you can be the one to do this! I hope you will.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你可以成为这样的人！我希望你能。
- en: React VR is a lightweight, VR-enabled rendering system. There are still a lot
    of things that can be added.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: React VR是一个轻量级的、支持VR的渲染系统。仍然有很多东西可以添加。
- en: Physics – making the world interact with itself
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理学-使世界相互作用
- en: Real worlds have objects that move and interact with each other. Programming
    such interaction can become tedious; this is where a good physics package can
    excel.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现实世界中有物体移动并相互作用。编写这种交互可能会变得乏味；这就是一个好的物理包可以胜任的地方。
- en: Simply put, if your objects have real-world physics, they will look much more
    *real*.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，如果您的物体具有真实世界的物理特性，它们看起来会更加*真实*。
- en: A lot of the demos I see with physics are *bouncing ball* type demos that show
    objects flying around and smacking things. I think a more subtle approach to physics
    that is nonetheless accurate (physics engine based) will give a sense of verisimilitude
    in VR worlds that should not be overlooked.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到的许多物理演示都是*弹跳球*类型的演示，显示物体飞来飞去并撞击物体。我认为对物理的更微妙的方法，尽管准确（基于物理引擎），将在VR世界中给人一种逼真感，这是不应该被忽视的。
- en: There are a couple of JavaScript physics engines: **Cannon.JS** and **Oimo.js**.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个JavaScript物理引擎：**Cannon.JS**和**Oimo.js**。
- en: Cannon.JS is a rigid body physics engine that includes simple collision detection,
    various body shapes, contacts, friction, and constraints. The source code and
    documentation is at: [http://bit.ly/CannonJS](http://bit.ly/CannonJS).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Cannon.JS是一个刚体物理引擎，包括简单的碰撞检测、各种物体形状、接触、摩擦和约束。源代码和文档在：[http://bit.ly/CannonJS](http://bit.ly/CannonJS)。
- en: The **collision detection** algorithms are themselves enough reason to use one
    of these packages, even if you don't foresee writing a bowling game or shooting
    spheres at brick walls. Collision detection can be used, for example, to determine
    whether a virtual avatar can navigate to a particular location in the VR world.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**碰撞检测**算法本身就足以使用这些包之一，即使您不预见编写保龄球游戏或向砖墙射击球体。例如，碰撞检测可用于确定虚拟化身是否可以在VR世界中导航到特定位置。'
- en: A blog post covering React VR and Cannon.js is at: [http://bit.ly/ReactPhysics](http://bit.ly/ReactPhysics).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 涵盖React VR和Cannon.js的博客文章在：[http://bit.ly/ReactPhysics](http://bit.ly/ReactPhysics)。
- en: Oimo.jsis a similar rigid body physics engine; it can be found at: [http://bit.ly/OmioPhysics](http://bit.ly/OmioPhysics).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Oimo.js是一个类似的刚体物理引擎；可以在：[http://bit.ly/OmioPhysics](http://bit.ly/OmioPhysics)找到。
- en: Note that Oimo.js examples show *native* three.js units, that are smaller than
    React VR (typically 10 to 1,000). In React VR, units are more or less 1 = 1 meter,
    so Oimo.js will integrate fairly smoothly.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Oimo.js的示例显示*本机*的three.js单位，比React VR（通常为10到1,000）小。在React VR中，单位更多或少为1=1米，因此Oimo.js将集成得相当顺畅。
- en: Game play engines – letting you interact with others
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏引擎-让您与其他人互动
- en: There are a few websites that can package the TCP/IP code to enable multiplayer
    games. React VR integrates into these well, as long as they use JavaScript. Once
    such engine is **Lance.gg**, available at: [http://bit.ly/Lance_gg](http://bit.ly/Lance_gg).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些网站可以打包TCP/IP代码以启用多人游戏。只要它们使用JavaScript，React VR就可以很好地集成到其中。其中一个引擎是**Lance.gg**，位于：[http://bit.ly/Lance_gg](http://bit.ly/Lance_gg)。
- en: 'It is a node-based game server. It was created to enable JavaScript developers
    to build real-time online multiplayer games without worrying about implementing
    net synchronization code. It strives to provide a smooth experience for both developers
    and players, regardless of lag. It has the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于节点的游戏服务器。它是为了让JavaScript开发人员能够构建实时在线多人游戏而创建的，而不必担心实现网络同步代码。它致力于为开发人员和玩家提供流畅的体验，而不受延迟的影响。它具有以下功能：
- en: Lance takes care of the netcode, so we can focus on the VR parts
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lance负责网络代码，因此我们可以专注于VR部分
- en: Can support any type of game or genre
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以支持任何类型的游戏或流派
- en: Optimized networking
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化网络
- en: TCP via websockets
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Websockets的TCP
- en: Communication is packed and serialized into binary
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通信被打包并序列化为二进制
- en: Automatic handling of network spikes with step correction
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络尖峰的自动处理和步骤校正
- en: Intelligent sync strategies for lag handling
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于处理延迟的智能同步策略
- en: Extrapolation (client-side prediction) with step reenactment
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外推（客户端预测）与步骤重演
- en: Interpolation for optimal object motion
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于最佳对象运动的插值
- en: Tools for debugging and tracing
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于调试和跟踪的工具
- en: Monetizing VR
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 货币化VR
- en: There are several ways to make money off of VR. It is a very new art form, and
    a lot of applications are still being discovered. Like any new field, many things
    out there are experiments or funded loss leaders. The major hardware manufacturers
    have even built software ecosystems by funding developers.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以从VR中赚钱。这是一种非常新的艺术形式，许多应用程序仍在被发现。像任何新领域一样，那里有很多实验或资助的亏损项目。主要的硬件制造商甚至通过资助开发人员来建立软件生态系统。
- en: It is a "who came first, the hardware or the killer app" situation currently.
    Headset sales are strong, although mobile headsets definitely lead the way, with
    almost ten times as many Samsung GearVR, Google Daydream, and Cardboard headsets
    as the higher-end models such as the Rift and Vive. The PSVR is a good system,
    but it can be difficult for developers who are not part of a game studio to get
    access to.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 目前是“硬件先行还是杀手级应用程序先行”的情况。头戴式显示器的销售额强劲，尽管移动头戴式显示器绝对领先，三星GearVR、Google Daydream和Cardboard头戴式显示器的销量几乎是Rift和Vive等高端型号的近十倍。PSVR是一个不错的系统，但对于不属于游戏工作室的开发人员来说，可能很难获得访问权限。
- en: Don't forget, however, that you don't even need a VR headset to appreciate React
    VR. Most of the code you work on will be viewed in a browser without entering
    full VR mode, and many of your viewers may choose to do the same thing. Embedding
    a VR window on a website will still give a compelling experience to people even
    without VR equipment.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，不要忘记，您甚至不需要VR头盔就可以欣赏React VR。您所编写的大部分代码将在浏览器中查看，而无需进入完整的VR模式，许多观众可能也会选择这样做。即使没有VR设备，将VR窗口嵌入网站仍将为人们带来引人入胜的体验。
- en: React VR may have an advantage when it comes to monetizing VR, at least from
    advertising.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在利用VR进行货币化方面，React VR可能具有优势，至少在广告方面是这样。
- en: 'Ways to make money off of VR are as listed:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 赚取VR的方式如下：
- en: '**Sell applications**:To do this on a website, you will probably need to implement
    some type of pay-to-view system. Most people do not like paywalls around websites,
    so this is probably best for full blown VR games, such as something built with
    Unity and Unreal. However, let''s not discount this.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**销售应用程序**：要在网站上实现这一点，您可能需要实施某种付费观看系统。大多数人不喜欢网站周围的付费墙，因此这可能最适合完整的VR游戏，例如使用Unity和Unreal构建的游戏。但是，让我们不要忽视这一点。'
- en: '**Being paid to build a VR experience**: Most web searches for VR Advertising
    will turn up these types of apps. They are almost always free to download, and
    are often pretty compelling. It is not, however, in my mind, a growth model for
    the VR producers; you can be paid fairly well to develop a VR app, but once that
    is done, so is your income stream. I see studio releases of VR sites that play
    content associated with a movie to be essentially the same concept, and an area
    I think React VR will be well suited for.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**被付费构建VR体验**：大多数搜索VR广告的网络搜索结果将显示出这些类型的应用程序。它们几乎总是免费下载，并且通常非常引人入胜。然而，在我看来，这不是VR生产者的增长模式；您可以获得相当不错的报酬来开发VR应用程序，但一旦完成，您的收入流也就结束了。我认为，发布与电影相关内容的VR网站的工作室版本基本上是相同的概念，我认为React
    VR非常适合这个领域。'
- en: '**Embedding VR advertisements in your world**:One advantage of React VR is
    that it has access to all the layout possibilities with React itself, so this
    may be easier and more direct for React VR than any other VR system. One challenge
    is that people immersed in a VR world do not like distractions, so having advertisements
    pop up may have the opposite effect. Still, product placement, or billboards in
    your world can be fairly effective, especially if you are building some kind of
    virtual city.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的世界中嵌入VR广告：React VR的一个优势是它可以访问React本身的所有布局可能性，因此对于React VR来说，这可能比任何其他VR系统更容易和更直接。一个挑战是，沉浸在VR世界中的人不喜欢分心，因此弹出广告可能会产生相反的效果。不过，在你的世界中进行产品放置或者广告牌可能会非常有效，特别是如果你正在构建某种虚拟城市。
- en: '**Linking to products or sites from inside your VR world**: This works well
    for regular websites, although the challenge for VR is that you may need to take
    off the VR headset to really interact with what you just clicked on in the VR
    world. Some advertising companies have discussed building in VR advertising worlds
    that you will warp to from within a VR world, although so far most of these have
    been for traditional game engines. Still, we can expect a lot of development in
    this area in the future.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从VR世界内部链接到产品或网站：这对于常规网站来说效果很好，尽管对于VR来说，挑战在于你可能需要摘下VR头盔才能真正与你在VR世界中刚刚点击的内容进行交互。一些广告公司已经讨论过在VR广告世界中构建链接，你可以从VR世界中跳转到这些链接，尽管到目前为止，大多数都是针对传统游戏引擎的。不过，我们可以期待未来在这一领域的大量发展。
- en: '**Selling off metadata**: In this model, the app itself will be free, but the
    VR developer will enable gaze tracking.* Hot spots* of areas within the VR world
    can be sold off to advertisers in the same way that clicks or impressions are
    sold with a more flat HTML model. This is another area of emerging standards.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出售元数据：在这种模式下，应用本身将是免费的，但VR开发者将启用凝视跟踪。VR世界内的热点区域可以以与更平面的HTML模型相同的方式出售给广告商，就像点击或印象一样。这是另一个新兴标准领域。
- en: '**Demo version to full version**: You can build a React VR world with models
    and assets taken from a full blown game engine, then put this on a web page as
    a tie–in or free giveaway to get people interested in your full VR app. Having
    industry standard formats, such as OBJ and glTF, will help do this, although a
    lot of the logic will have to be developed from scratch. A possibly better way
    is to have a free web URL and a for-pay URL behind a paywall.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从演示版本到完整版本：你可以使用从完整游戏引擎中获取的模型和资产构建一个React VR世界，然后将其放在网页上作为联系或免费赠品，以吸引人们对你的完整VR应用感兴趣。拥有行业标准格式，如OBJ和glTF，将有助于实现这一点，尽管很多逻辑将不得不从头开始开发。一个可能更好的方法是在付费墙后面拥有一个免费的网页URL和一个付费的URL。
- en: '**In-app purchases**: This will be a way for things in the game to trigger
    purchases outside of it. For example, a video player can request a particular
    video be paid for, then the React VR code will play that video. In-app purchases
    will be fairly straightforward with React VR due to the straightforward way to
    integrate JavaScript.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用内购买：这将是游戏中的事物触发游戏外购买的一种方式。例如，视频播放器可以请求支付特定的视频，然后React VR代码将播放该视频。由于React VR具有直接集成JavaScript的简单方式，应用内购买将会相当简单。
- en: Where VR will go in the next five years
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VR在未来五年将会走向何方
- en: If I knew exactly where VR would go in the next five years, I would be rich
    in five years, and so would you, if you invest in my predictions. Let me know
    how that works out.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我确切地知道VR在未来五年会走向何方，那么五年后我会变得富有，如果你投资我的预测，你也会。让我知道结果如何。
- en: I hope you invest in VR by developing amazing worlds, even if it isn't with
    React VR. I really believe in VR, and want to see it succeed this time.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你通过开发令人惊叹的世界来投资VR，即使不是通过React VR。我真的相信VR，并希望这一次它能取得成功。
- en: That brings up what I mean by *this time*. I've been through at least one wave
    of VR; back then, everyone thought VR was the wave of the future. All the great
    things you are hearing about VR, I've heard before. I was doing VR from about
    1995 to 2000 or so. VR crashed hard. There were HMDs being created, data gloves,
    and entire virtual worlds.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这就提出了我所说的“这个时候”的意思。我至少经历过一次VR的浪潮；那时，每个人都认为VR是未来的浪潮。关于VR的所有伟大事物，我以前都听过。我大约在1995年到2000年左右开始接触VR。VR遭遇了严重的崩溃。当时有人在制造头戴式显示器、数据手套和整个虚拟世界。
- en: Most people say the graphics back then were too crude. There is some truth to
    that, but people that haven't tried VR still, say *"I will wait until the graphics
    get more real"* not realizing, as we've discussed and seen, it doesn't take great
    graphics for VR to appear *real*.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人说当时的图形太粗糙了。这有一些道理，但是那些还没有尝试过VR的人，仍然说“我会等到图形更真实”而没有意识到，正如我们已经讨论和看到的，VR并不需要出色的图形才能显得“真实”。
- en: What we called VR is also a little different. Back then, seemingly ages ago,
    any 3D program on a PC was loosely called VR. I even predicted while the VRML
    language was being invented (it is now X3D), that we needed to get all this right
    or people would walk up to strangers from all over the world, in beautiful 3D
    environments, and (virtually) kill them.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所谓的VR也有一些不同。那时，似乎很久以前，在PC上的任何3D程序都被宽泛地称为VR。我甚至在VRML语言被发明时（现在是X3D），预测我们需要把所有这些搞对，否则人们会走到来自世界各地的陌生人面前，在美丽的3D环境中（虚拟地）杀死他们。
- en: In a way, I was right; in the World of Warcraft, for example, this is exactly
    what happens. Modern VR has everything it does due to computer gaming. All of
    those frag games have created a demand for cheap, high-quality video cards. You
    may think that a high-end video card isn't cheap, but compared to the first VR
    hardware, they are amazingly cheap.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种程度上，我是对的；例如，在魔兽世界中，这正是发生的事情。现代VR之所以拥有一切，都是因为电脑游戏。所有那些击杀游戏已经创造了对廉价、高质量视频卡的需求。你可能认为高端视频卡并不便宜，但与最初的VR硬件相比，它们非常便宜。
- en: 3D computer games on a screen are not what we call VR today, and that is really
    correct. Computer games, no matter how great they look, are not as immersive as
    an HMD-based VR experience.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上的3D电脑游戏不是我们今天所说的VR，这是真的。无论电脑游戏看起来多么出色，都不如基于HMD的VR体验那样沉浸。
- en: I am worried that VR might crash again; yet I don't think it will this time.
    The difference this time is that we all have high-powered VR devices in our pocketsour
    cell phones. Modern cell phones are as capable as the $100,000 Reality Engine
    by Silicon Graphics. We can pop a cell phone in a simple, cheap VR headset and
    see VR. It may not be as interactive as something with tracked controllers, but
    it works. Bluetooth controllers are not going away, and neither are cell phones.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我担心VR可能会再次崩溃；然而，我不认为这次会发生。这次的不同之处在于，我们都在口袋里拥有高性能的VR设备——我们的手机。现代手机和Silicon Graphics的10万美元的Reality
    Engine一样强大。我们可以把手机放入一个简单、便宜的VR头盔中看VR。它可能不像带有跟踪控制器的设备那样互动，但它可以工作。蓝牙控制器不会消失，手机也不会消失。
- en: VR is thus here to stay, but where will it go?
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，VR是来留下的，但它将走向何方呢？
- en: Do not wait for next year's technology
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要等待明年的技术
- en: A long time ago, when I was buying my first stereo, when I was 20, and flush
    with what I thought was a lot of money from working the summer during my college
    break, I really wanted a stereo. I spent weeks pouring over specifications, listening
    tests, comparing features, and was generally a bit parallelized by options.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 很久以前，当我买我的第一个音响时，我20岁，从大学暑假工作中赚了一大笔钱，我真的很想要一个音响。我花了几个星期研究规格，听力测试，比较功能，总的来说，我对选项有点犹豫不决。
- en: I went around to stereo stores with a wad of dough, looking to buy something.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我带着一大堆钱到立体声商店，想买点东西。
- en: I went to one store, and asked the sales guy what stereo system he had.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我去了一家商店，问销售员他有什么立体声系统。
- en: '*"Oh, I''ve got next years model,"* he said.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，我有明年的型号，”他说。
- en: '*What*? I thought. *Is something really great coming out*?'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '*什么*？我想。*是不是真的有什么很棒的东西要出来*？'
- en: '*"Oh, so what are you waiting for?"* I asked. *"What is coming out?"*'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，那你在等什么？”我问。“有什么要出来的吗？”
- en: '"*Oh, next year I''ll wait for the next year too,"* he said. *"You see, next
    year is always next year, so I never have a stereo that is obsolete,"* he said.
    He simply didn''t ever buy a stereo.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，明年我也会等待明年，”他说。“你看，明年总是明年，所以我从来没有过时的立体声，”他说。他根本就没有买过立体声。
- en: I see his point. You might be thinking, *Wait till it gets better.*
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我理解他的观点。你可能会想，*等它变得更好*。
- en: My point is that in the last 30 years, I've listened to a *lot* more music than
    that salesman ever did.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我想说的是，在过去的30年里，我听过的音乐比那个销售员听过的要多得多。
- en: You shouldn't wait to buy the next great piece of VR gear, get into it now.
    If something new comes out, you'll have enjoyed VR for much longer than if you
    had waited, and you'll know what you like a lot more. There aren't any bad decisions
    right now.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 你不应该等待购买下一件伟大的VR设备，现在就开始。如果有新的东西出来，你会比等待更长时间更享受VR，并且你会更了解自己喜欢什么。现在没有任何错误的决定。
- en: Better HMDs
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更好的HMD
- en: The HMDs we have today, things such as the HTC Vive, the Oculus Rift, the PS
    VR, and mobile-based VR devices such as the Samsung Gear VR, the Google Daydream,
    and Google Cardboard, are pretty good, but they can be a lot better.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天拥有的HMD，比如HTC Vive、Oculus Rift、PS VR，以及像三星Gear VR、Google Daydream和Google
    Cardboard这样的基于移动设备的VR设备，都相当不错，但它们可以做得更好。
- en: The human eye can't really be compared to a pixel display, although we know
    for sure that we see more detail than any current HMDs can show. We also have
    a wider field of view.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 人眼实际上无法与像素显示进行比较，尽管我们确切知道我们看到的细节比任何现有的HMD都要多。我们还有更宽的视野。
- en: Current displays are roughly similar in view; 1,080 x 1,200 pixels with about
    110 degrees field of view. That gives us roughly 10 to 15 pixels per degree. The
    human eye can see anywhere from 500 to about 1,000 pixels per inch at ten inches;
    this gives us about 90 to 177 pixels per degree. This will mean a nearly 20,000
    or 40,000 pixel display. We're not talking about megapixels, but about gigapixels.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的显示屏大致相似；1,080 x 1,200像素，视野约为110度。这给我们大约每度10到15像素。人眼在十英寸处可以看到从500到约1,000像素每英寸；这给我们大约90到177像素每度。这将意味着一个近20,000或40,000像素的显示屏。我们谈论的不是百万像素，而是十亿像素。
- en: Can we get there in 5 years? That's a pretty high resolution, but I think we
    will get resolutions at least 4 or 16 times better than now.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能在5年内达到那个水平吗？这是一个非常高的分辨率，但我认为我们的分辨率至少会比现在好4到16倍。
- en: HMDs will probably be more comfortable. I'm not sure they will get significantly
    smaller due to optical issues, although in 10 to 15 years, I expect that they
    will be the size of contacts or glasses. This is a very rough guess.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: HMD可能会更舒适。由于光学问题，我不确定它们会变得更小，尽管在10到15年内，我预计它们的大小将与隐形眼镜或眼镜相同。这只是一个非常粗略的猜测。
- en: Better and more realistic graphics
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更好和更逼真的图形
- en: Graphics cards get faster as well as cheaper all the time. In five years, we
    will need every ounce of that processing power to generate a display with the
    same visual complexity as we have now—not any better looking—due to the increase
    in pixels. In other words, as displays go up in pixels, making for better and
    wider displays, the amount of processing power to drive those goes up too, so
    there isn't as much of an increase in visual fidelity as you would expect. Is
    there a light at the end of that tunnel? Or is the light at the end of the tunnel
    a train going the other way? There is good news, and it is called Foveated rendering.
    For that, we need eye tracking, which we'll discuss in a bit.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 显卡的速度和价格都在不断提高。在五年内，我们将需要每一点处理能力来生成与现在相同视觉复杂度的显示屏，不是更好看的，因为像素增加了。换句话说，随着显示屏像素的增加，使得显示更好更宽，驱动这些显示所需的处理能力也会增加，因此视觉保真度的增加并不像你期望的那样多。这个隧道的尽头有光吗？还是隧道尽头有一列朝着另一个方向行驶的火车？有好消息，那就是凹凸渲染。为此，我们需要眼球追踪，我们稍后会讨论。
- en: Regardless of eye tracking and foveated rendering, we'll see more realistic
    rendering and more realistic looking humans. Will it be dramatically better? Will
    it look real? If you remember from the beginning of our book, graphics don't need
    to look like real life to seem real, so although I'm looking forward to better
    graphics, I don't think VR is reliant on them.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是眼球追踪和凹凸渲染，我们会看到更加逼真的渲染和更加逼真的人物形象。会有显著的改善吗？会看起来真实吗？如果你还记得我们书的开头，图形不需要看起来像现实生活才能显得真实，所以虽然我期待更好的图形，但我不认为VR依赖于它们。
- en: Easier content creation and more high-end content
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更容易的内容创作和更高端的内容
- en: 'So far, we have just discussed technical changes in VR. There are a lot more
    things that I think will happen, that will have a much larger effect on VR. Regardless
    of how the images are generated, sound, look, or even feel, we will need the so-called "Killer
    App". Right now, most VR that makes money are games. Once the larger game development
    studios see a future in VR, they will develop more AAA games (triple A games mean
    games with large budgets, often tens or hundreds of millions of dollars and large
    teams, including artists, developers, designers, authors, and project managers).
    Three AAA games are scheduled to come out shortly after this book is published:
    Doom VR, Fallout 4 VR, and Skyrim VR. Once we have large games with tens or hundreds
    of hours of gameplay, if it is compelling (and I believe it will be very compelling),
    we will see VR take off.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只讨论了VR中的技术变化。我认为还会发生很多事情，这些事情将对VR产生更大的影响。无论图像是如何生成的，声音、外观甚至感觉，我们都需要所谓的“杀手级应用”。现在，大部分赚钱的VR都是游戏。一旦更大的游戏开发工作室看到VR的未来，他们将开发更多AAA游戏（AAA游戏意味着预算庞大，通常是数十亿或数亿美元，团队庞大，包括艺术家、开发人员、设计师、作者和项目经理）。在这本书出版后不久，将有三款AAA游戏推出：《毁灭战士VR》、《辐射4
    VR》和《上古卷轴VR》。一旦我们有了数十甚至数百小时的大型游戏，如果它引人入胜（我相信它会非常引人入胜），我们将看到VR腾飞。
- en: In the next five years, I think this will surely progress even further. I expect
    to see large persistent worlds, **Massively Multiplayer On-line Role Play Games** (**MMORPGS**)
    become a staple of VR. Instead of playing a game in the World of Warcraft, you
    will be *in* the World of Warcraft. Wow! (pun intended).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的五年里，我认为这肯定会进一步发展。我期待看到大型持久世界，大型多人在线角色扮演游戏（MMORPGS）成为VR的主打。你不再是在《魔兽世界》中玩游戏，而是*在*《魔兽世界》中。哇！（双关语）
- en: On the content side, we will also see more high-end creation software that is
    also in VR. Currently, the more complex creation tools, such as Max, Maya, and
    Blender, make the best models that you see in VR, but they are themselves conventional
    apps. Today, we see some apps, such as *Tilt-brush*, that let us design objects
    in VR. I expect higher–end CAD will have a ubiquitous VR mode themselves.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在内容方面，我们还将看到更多高端的创作软件也在VR中。目前，诸如Max、Maya和Blender等更复杂的创作工具制作了我们在VR中看到的最好的模型，但它们本身是传统的应用程序。今天，我们看到一些应用程序，比如*Tilt-brush*，让我们在VR中设计物体。我预计更高端的CAD也将拥有普遍的VR模式。
- en: HMDs can become hot, heavy, and fatiguing after a while (mainly due to convergence accommodation conflict
    as discussed earlier). I don't see all work being done in VR, but it will help
    at the initial stages as well as in checking models.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: HMD在一段时间后可能会变得炎热、沉重和令人疲劳（主要是由于之前讨论的聚散调节冲突）。我并不认为所有的工作都会在VR中完成，但它将在初始阶段以及检查模型时有所帮助。
- en: 'What is quicker: to look at two objects on the screen and drag them around
    with the mouse, or just grab them with your hands and move them? Imagine sculpting
    with magic putty that you have an ***undo*** command. You can''t do that with
    real clay, but you will be able to in VR.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 哪种更快：在屏幕上看两个物体并用鼠标拖动它们，还是直接用手抓住它们并移动？想象一下用魔法泥塑塑造物体，而且还有一个“撤销”命令。你无法在真实的黏土上做到这一点，但在VR中你将能够做到。
- en: Eye tracking
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 眼动追踪
- en: What is the eye tracking that I alluded to earlier? It is a sensor inside the
    HMD that looks at where your eyeballs are pointed. There are a few advantages
    to this kind of scanning, mainly social and rendering.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到的眼动追踪是什么？它是HMD内部的传感器，用来追踪你的眼球注视的位置。这种扫描有一些优势，主要是社交和渲染方面。
- en: Social advantages are immense, in my opinion. When you look at someone's avatar,
    which is an in–game representation of another person, they can look very stiff
    and emotionless. Human beings detect an immense amount of emotion from their eyes;
    with eye tracking, your avatar can show some of these expressions. One simple
    test showed a dramatic improvement by simply putting cartoon eyeballs—just a black
    dot in a white ball—and have those eyes look around as the user was looking. The
    avatars, even though cartoons, looked much more real.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，社交优势是巨大的。当你看着别人的头像时，这是另一个人在游戏中的代表，他们可能看起来非常僵硬和没有表情。人类从眼睛中感知到大量的情感；通过眼动追踪，你的头像可以展现出一些这些表情。一个简单的测试显示，通过简单地放置卡通眼球——只是一个白色球中的黑点——并让这些眼睛随着用户的注视而移动，可以显著改善。即使是卡通形象，头像看起来更真实。
- en: The rendering improvements with eye tracking, as briefly mentioned earlier,
    are a type of rendering called foveated rendering. With the eye tracker, instead
    of filling every pixel with high-detail objects, we can just show what you are
    looking at with high detail. The rest of the eye typically does not see in as
    much detail as right where your eyeball is pointed. Our rods and cones in the
    eye are tightly distributed in the center, and are much less dense at the outer
    edges of our eye. Foveated rendering makes use of that by showing less detail
    away from the center point of your gaze.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 眼动追踪的渲染改进，如之前简要提到的，是一种称为凹凸渲染的渲染类型。通过眼动追踪，我们可以只显示你正在注视的部分高清细节，而不是填充每个像素都是高细节对象。眼睛的其余部分通常没有那么多细节。我们眼睛中的视杆和锥体在中心密集分布，在眼睛的外缘密度要低得多。凹凸渲染利用这一点。
- en: This really works and can significantly speed up graphics; you don't need to
    compute what you don't display. This was first demonstrated at the annual **Special
    Interest Group for GRAPHics** (**SIGGRAPH**) conference in 2016.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很有效，可以显著加快图形处理速度；你不需要计算你不显示的部分。这是在2016年的年度**图形专业兴趣小组**（**SIGGRAPH**）会议上首次展示的。
- en: Audio improvements
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音频改进
- en: Most people, when it comes to VR audio, are worried about how well the headsets
    work, or if they block out the sound of your cat screeching when you sit down
    on the couch without taking off your HMD. (Let's hope not!) There is a lot more
    to VR audio though; our ears do an amazing thing with pinpointing where a sound
    is coming from with only two sensors (normally, it takes three sensors to detect
    both distance and direction of any 3D source). How do our ears do that? It's done
    with something called a HRTF. Currently, we do have the technology to calculate
    HRTFs in real time. However, *what* HRTF to calculate is not that easy to determine.
    This is no surprise; people are unique.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人在谈到VR音频时，担心头戴设备的音效效果如何，或者当你坐在沙发上而不摘下头戴设备时，是否会屏蔽掉猫尖叫的声音。（希望不会！）然而，VR音频还有很多其他方面；我们的耳朵可以用两个传感器惊人地确定声音来自何处（通常，需要三个传感器才能检测到任何3D声源的距离和方向）。我们的耳朵是如何做到的呢？这是通过一种叫做HRTF的东西完成的。目前，我们确实有技术可以实时计算HRTF。然而，确定要计算*哪个*HRTF并不那么容易。这并不奇怪；人们是独一无二的。
- en: Everyone's HRTF is different; if we play back a sound that is generated using
    my HRTF, I will hear a noise with my eyes closed as if it was coming directly
    from the spot the designer intended. If you hear the same noise with the same
    headset, you may think it sounds fake, or is coming from a different direction.
    This is just a reality of how we process sound.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人的HRTF都是不同的；如果我们播放使用我的HRTF生成的声音，我闭上眼睛会听到声音好像直接来自设计者打算的位置。如果你用同样的头戴设备听到同样的声音，你可能会觉得它听起来是假的，或者来自不同的方向。这只是我们处理声音的现实。
- en: There are some solutions currently—either measuring your HRTF in a chamber specially
    designed to calculate this or possibly using additional speakers in a headset.
    Time will tell which of these techniques will be the best; this is still an open
    area.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有一些解决方案——要么在专门设计用于计算这一点的房间里测量你的HRTF，要么可能使用头戴设备中的额外扬声器。时间会告诉我们这些技术中哪一种会是最好的；这仍然是一个开放的领域。
- en: Along with the HRTF calculations to localize (pinpoint) the sound, we need more
    and better ways in software to locate that sound.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用HRTF计算来定位（确定）声音，我们需要更多更好的软件方式来定位那个声音。
- en: I would think in five years, whatever physics systems we are using for our virtual
    worlds may be able to generate the proper sound effects, not just play back a
    canned noise. For example, if you hit a concrete wall, maybe the software can
    generate the thud noise, at the right location and the right sound, considering
    how thick the wall is, and other parameters. Currently, we just play canned noises
    at the right location (which is still amazing, but can use some improvement).
    That is something I would like to see.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为在五年内，我们用于虚拟世界的物理系统可能能够产生适当的音效，而不仅仅是播放预先录制的声音。例如，如果你撞到了一堵混凝土墙，也许软件可以生成沉闷的撞击声，位于正确的位置并发出正确的声音，考虑到墙有多厚以及其他参数。目前，我们只是在正确的位置播放预先录制的声音（这仍然很惊人，但可以有所改进）。这是我想要看到的东西。
- en: Controlling VR
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制VR
- en: Today's controllers usually consist of two handheld devices with multiple buttons.
    Most have a simple mechanical way to vibrate via software. There is a huge area
    of innovation possible. The VR industry has been working for decades on sophisticated
    devices that allow better haptics, smaller, and more accurate controllers, and
    data gloves. Why use a controller when you can just reach out and grab things?
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当今的控制器通常由两个手持设备组成，带有多个按钮。大多数都有一种简单的机械方式通过软件来振动。创新的可能性非常巨大。VR行业已经在几十年里致力于研发复杂的设备，可以实现更好的触觉反馈、更小、更精确的控制器和数据手套。当你可以伸手去抓东西时，为什么还要使用控制器呢？
- en: '**Haptics** are any interaction involving touch. This doesn''t just mean touching
    or holding your mouse; it can be anything from feeling a click or shake when you
    move your controller (the current state of the art), but it can also mean a device
    that pushes back when you move it. These have been demonstrated for years, and
    there are commercial off-the-shelf products that can do things such as allowing
    you to feel a surface. These will become more common and more of mass-produced,
    consumer-level devices.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触觉**是涉及触摸的任何互动。这不仅意味着触摸或握住鼠标；它可以是任何感觉到当你移动控制器时的点击或震动（目前的技术水平），但它也可以是一种在你移动时产生阻力的设备。这些已经被演示多年，也有商用现成产品可以做到让你感受到表面。这些将变得更常见，成为更大规模生产的消费级设备。'
- en: '**Data gloves** are devices that you wear that allow every finger joint and
    movement to be tracked in VR. They have been available for decades. There are
    even systems (the Leap Motion device) that will let you reach out with your real
    hand, and have that interact in the virtual world. I believe that this is an area
    with a lot of potential in the next few years.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据手套**是您戴在手上的设备，可以跟踪VR中每个手指关节和动作。它们已经问世几十年了。甚至有一些系统（Leap Motion设备）可以让你用真实的手伸出来，并在虚拟世界中进行互动。我相信这是未来几年潜力巨大的领域。'
- en: '**Whole body** controllers will allow your entire virtual body to be visually
    present, accurate, and tracked in the VR world. This is another area with a lot
    of potential. There are even a few prototype suits that provide full body haptics.
    Imagine putting on a suit and being able to feel and touch the world, not just
    wave a wand through the images.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全身**控制器将允许您的整个虚拟身体在VR世界中被视觉呈现、准确地跟踪。这是另一个潜力巨大的领域。甚至有一些原型套装可以提供全身触觉。想象一下穿上一套衣服，能够感受和触摸世界，而不仅仅是在图像中挥舞魔杖。'
- en: Social and legal issues and solutions
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社会和法律问题及解决方案
- en: If you can put a virtual statue in the middle of a public space, is that vandalism?
    What about painting on the side of a business in AR or VR? At first, you might
    think this is perfectly fine; I myself might like to see a model of some sci-fi
    thing in the middle of the park, that people can interact with. What if that model
    is of a Confederate war hero who was in favor of slavery? What if malcontent neighbors
    virtually tag your house with slanderous allegations?
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以把一个虚拟雕像放在公共空间中，那算不算破坏公物？在AR或VR中在商业建筑的一侧绘画呢？起初，你可能会认为这是完全可以的；我自己可能会想看到一个科幻模型在公园中央，人们可以与之互动。如果那个模型是一个赞成奴隶制的南方战争英雄呢？如果不满的邻居在虚拟空间中用诽谤性的指控标记你的房子呢？
- en: Within social VR, we can harass people in ways just not possible in real life.
    If someone moves into your space, you can push them back, but in VR, bad behavior
    may be very easy to do. VR environments will need to take these kinds of things
    into consideration.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在社交VR中，我们可以以一种在现实生活中不可能的方式骚扰人。如果有人进入您的空间，您可以把他们推开，但在VR中，不良行为可能会非常容易。VR环境将需要考虑这些问题。
- en: If we have guards in place to prevent virtual desecration, how do we decide
    what is right and what is wrong, especially in public spaces? VR can be similar
    to the real world—libel is libel, yet VR also offers some unique possibilities.
    If you are a southern gentleman, you may want to see rebel statues, and you can.
    The young person next to you may instead see George Washington Carver. We can
    all just get along; or can we? What if the guy next you wants to display chem
    trail deposition?
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有防止虚拟亵渎的保护措施，我们如何决定什么是对的，什么是错的，尤其是在公共空间？VR可能类似于现实世界——诽谤就是诽谤，但VR也提供了一些独特的可能性。如果你是一个南方绅士，你可能想看到叛军雕像，你可以。你旁边的年轻人可能会看到乔治·华盛顿·卡弗。我们都可以和睦相处；或者我们可以吗？如果你旁边的人想展示化学尾迹沉积呢？
- en: I do think persistent virtual worlds will flourish, and we will come up with
    innovative and interesting solutions to the preceding issues. Just remember that
    many people who don't like technology, or who fear it generally don't understand
    it. If we can create any worlds we want, we just have to want to create worthwhile
    worlds.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实认为持久的虚拟世界将蓬勃发展，并且我们将针对先前的问题提出创新和有趣的解决方案。只要记住，许多不喜欢技术或普遍害怕技术的人并不理解它。如果我们可以创造任何我们想要的世界，我们只需要想要创造有价值的世界。
- en: Please do!
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必！
- en: Summary
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to unleash our realities onto the internet.
    Specifically, we covered how to do version upgrades, and if we need to, how to do
    *rip and replace* upgrades. We discussed when to do an upgrade. We really should
    have discussed coding standards earlier, as it's never too soon to start, but
    first we had to get some React VR syntax down, so we covered this before we set
    our code on the world. We further discussed how to use ESLint and other linters
    to help you code well. Once you have good clean code, we talked about how to package
    your development React VR content for the web as well as how to make it fast through
    optimization and **Content Delivery Networks** (**CDN**s).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将我们的现实释放到互联网上。具体来说，我们讨论了如何进行版本升级，以及如果需要的话，如何进行*rip and replace*升级。我们讨论了何时进行升级。我们真的应该更早讨论编码标准，因为现在开始永远不会太早，但首先我们必须掌握一些React
    VR语法，所以在我们将代码发布到世界之前我们先进行了讨论。我们进一步讨论了如何使用ESLint和其他代码检查工具来帮助您编写良好的代码。一旦您有了良好的干净代码，我们还讨论了如何将您的开发React
    VR内容打包到网络上，以及如何通过优化和**内容交付网络**（**CDN**）使其快速。
- en: We discussed how to further make your websites real (through physics), play
    games as well as how to monetize them.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了如何通过物理学进一步使您的网站真实（通过物理学），玩游戏以及如何实现盈利。
- en: You now know everything you need to learn to use React VR on the web. I'm looking
    forward to finding out what you create!
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经知道了在网络上使用React VR所需学习的一切。我期待着看到您创造出什么！
