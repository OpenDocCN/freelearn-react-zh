- en: Chapter 8. ReactJS API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。ReactJS API
- en: In the previous chapters, we learned about the React router which allows us
    to create single-page applications and ensures our UI is in sync with URLs. We
    have also covered the advantages of the React router, dynamic route matching,
    and how we can configure our components in the router to be rendered in DOM with
    matching URLs. With the React router browser history feature, the user can navigate
    backwards/forwards and restore the previous state of the application. Now we are
    going to check how we can integrate React API with other APIs such as Facebook,
    Twitter, and Git.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了React路由器，它允许我们创建单页应用程序，并确保我们的UI与URL同步。我们还介绍了React路由器的优势、动态路由匹配以及如何配置路由器中的组件以与匹配的URL在DOM中呈现。通过React路由器浏览器历史功能，用户可以向后/向前导航并恢复应用程序的先前状态。现在我们将检查如何将React
    API与Facebook、Twitter和Git等其他API集成。
- en: React Top-Level API
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React顶级API
- en: When we are talking about the React API, it's the first step to getting into
    the React library. Different uses of React will provide different outputs. For
    example, using the React `script` tag will make top-level APIs available on the
    `React` global, using ES6 with npm will allow us to write `import React from 'react'`,
    and using ES5 with npm will allow us to write `var React = require('react')`,
    so there are multiple ways to initialize React with different features.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论React API时，这是进入React库的第一步。不同的React用法会提供不同的输出。例如，使用React的`script`标签将使顶级API在`React`全局上可用，使用npm的ES6将允许我们编写`import
    React from 'react'`，而使用npm的ES5将允许我们编写`var React = require('react')`，因此有多种不同特性初始化React的方式。
- en: React API component
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React API组件
- en: 'Generally, we are building components that fit into other components while
    we are dealing with React and we are assuming that whatever is built with React
    is a component. However, this is not true. There needs to be some other way to
    write supporting code to bridge the external world with React. Observe the following
    code snippet:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在处理React时，我们正在构建适合其他组件的组件，并且我们假设用React构建的任何东西都是一个组件。然而，这并不正确。需要有其他一些方法来编写支持代码，以将外部世界与React连接起来。观察以下代码片段：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `render` method is used to update the property of the component and we can
    then declare a new element to render it again.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`render`方法用于更新组件的属性，然后我们可以声明一个新元素来再次呈现它。'
- en: 'Another method, is `unmountComponentAtNode`, is used to clean your code. When
    we have a SAP built with React components, we have to plug `unmountComponentAtNode`
    to initiate at the right time, which results in cleaning the app''s life cycle.
    Observe the following code snippet:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是`unmountComponentAtNode`，用于清理你的代码。当我们使用React组件构建SAP时，我们必须插入`unmountComponentAtNode`以在正确的时间启动，从而清理应用程序的生命周期。观察以下代码片段：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Most of the time, I have observed that developers don't call the `unmountComponentAtNode`
    method and this results in having a memory-leak issue in their app.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常观察到开发人员不调用`unmountComponentAtNode`方法，这导致他们的应用程序出现内存泄漏问题。
- en: Mount/Unmount components
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挂载/卸载组件
- en: It's always recommended to have a custom wrapper API in your API. Suppose you
    have a single root or more than one root and it will be deleted at some period,
    so in that case you will not lose it. Facebook has such a setup, which automatically
    calls `unmountComponentAtNode`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的API中，建议始终使用自定义包装器API。假设你有一个或多个根，它将在某个时期被删除，那么在这种情况下，你将不会丢失它。Facebook就有这样的设置，它会自动调用`unmountComponentAtNode`。
- en: I also suggest not calling `ReactDOM.render()` every time but an ideal way is
    to write or use it through the library. In that case the application will use
    mounting and unmounting to manage it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我还建议不要每次调用`ReactDOM.render()`，而是通过库来编写或使用它的理想方式。在这种情况下，应用程序将使用挂载和卸载来进行管理。
- en: Creating a custom wrapper will help you to manage configurations in one place,
    such as internationalization, routers, and user data. It would be very painful
    to set up all the configuration, every time, in different places.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个自定义包装器将帮助您在一个地方管理配置，比如国际化、路由器和用户数据。每次在不同的地方设置所有配置都会非常痛苦。
- en: Object-oriented programming
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程
- en: 'A declared variable gets overridden if we declare it again beneath its declaration,
    the same way as `ReactDOM.render`overrides its declared properties:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在声明变量下面再次声明它，它将被覆盖，就像`ReactDOM.render`覆盖了它的声明属性一样：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It might be confusing to suggest that object-oriented programming will override
    all declared properties if we just override one property within your component.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只覆盖组件中的一个属性，那么建议使用面向对象编程将覆盖所有声明的属性可能会令人困惑。
- en: You might think that we generally use `setProps` as a helper function, to help
    to override selective properties, but as we are working with React we can't use
    it; thus, it is recommended to have a custom wrapper ;n your API.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会认为我们通常使用`setProps`作为辅助函数，以帮助覆盖选择性属性，但由于我们正在使用React，我们不能使用它；因此，建议在您的API中使用自定义包装器。
- en: 'In the following code, you will see a boilerplate to help you to understand
    it better:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，您将看到一个样板，以帮助您更好地理解它：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding example, it seems that we can still write better code in object-oriented
    APIs but for that we must know about the natural object-oriented API and its use
    in the React component:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，似乎我们仍然可以在面向对象的API中编写更好的代码，但为此我们必须了解自然的面向对象API及其在React组件中的使用：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can understand from the preceding example, the difference between an **imperative**
    API and a **declarative** API. This example also shows how we can provide an imperative
    on top of a declarative API or vice versa. While creating a custom web component
    with React, we can use a declarative API as a wrapper.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从前面的例子中了解到**命令式**API和**声明式**API之间的区别。这个例子还展示了我们如何在声明式API或反之上提供命令式API。在使用React创建自定义Web组件时，我们可以使用声明式API作为包装器。
- en: React integration with other APIs
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React与其他API的集成
- en: React integration is nothing but converting a web component to a React component
    by using JSX, Redux, and other React methods.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: React集成只是通过使用JSX、Redux和其他React方法将Web组件转换为React组件。
- en: Let's see one practical example of React integration with another API.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个React与另一个API集成的实际例子。
- en: React integration with the Facebook API
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React与Facebook API集成
- en: This app will help you to integrate the Facebook API and you will have access
    to your profile picture and however many friends you have in your friends list.
    You will also see how many likes, comments, and posts there are in a respective
    friend's list.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用将帮助您集成Facebook API，并且您将可以访问您的个人资料图片以及您在好友列表中有多少个朋友。您还将看到在各自朋友列表中有多少个赞、评论和帖子。
- en: To start with, you have to install the Node.js server and add the npm package
    in your system.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您必须安装Node.js服务器并在系统中添加npm包。
- en: If you don't know how to install Node.js then please see the following instructions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不知道如何安装Node.js，请参阅以下说明。
- en: Installing Node
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Node
- en: First, we have to download and install Node.js version 0.12.10, if we have not
    installed it on the system. We can download Node.js from [http://nodejs.org](http://nodejs.org)
    and it includes the npm package manager.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须下载并安装Node.js版本0.12.10，如果我们还没有在系统上安装它。我们可以从[http://nodejs.org](http://nodejs.org)下载Node.js，它包括npm包管理器。
- en: 'Once the setup is done, we can check whether Node.js was set up properly or
    not. Open the command prompt and run the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，我们可以检查Node.js是否设置正确。打开命令提示符并运行以下命令：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: OR
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will return the Node.js installed version, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回Node.js安装的版本，如下所示：
- en: '![Installing Node](graphics/image_08_001-1.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Installing Node](graphics/image_08_001-1.jpg)'
- en: You should be able to see version information, which ensures that the installation
    was successful.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够看到版本信息，这可以确保安装成功。
- en: After installing Node, you will have `babel-plugin-syntax-object-rest-spread`
    and `babel-plugin-transform-object-rest-spread`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Node后，您将拥有`babel-plugin-syntax-object-rest-spread`和`babel-plugin-transform-object-rest-spread`。
- en: 'There is a basic difference between these two: `spread` will only allow you
    to read the syntax but `transform` will allow you to transform your syntax back
    to ES5.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者之间有一个基本的区别：`spread`只允许您阅读语法，但`transform`将允许您将语法转换回ES5。
- en: 'After getting this done, you will have to store plugins into the `.babelrc`
    file, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，您将不得不将插件存储到`.babelrc`文件中，如下所示：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Setting up the application
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置应用程序
- en: 'First we need to create a `package.json` file for our project, which includes
    the project information and dependencies. Now, open the command prompt/console
    and navigate to the directory you have created. Run the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为我们的项目创建一个`package.json`文件，其中包括项目信息和依赖项。现在，打开命令提示符/控制台并导航到您创建的目录。运行以下命令：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This command will initialize our app and ask several questions before creating
    a JSON file named `package.json`. The utility will ask questions about the project
    name, description, entry point, version, author name, dependencies, license information,
    and so on. Once the command is executed, it will generate a `package.json` file
    in the root directory of your project.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将初始化我们的应用程序，并在创建一个名为`package.json`的JSON文件之前询问几个问题。该实用程序将询问有关项目名称、描述、入口点、版本、作者名称、依赖项、许可信息等的问题。一旦执行了该命令，它将在项目的根目录中生成一个`package.json`文件。
- en: 'I have created my `package.json` file with my requirements, which are shown
    in the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经根据我的要求创建了`package.json`文件，如下所示：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding code, you can see the `name` of the application, the `version`
    of your application, and the `description` of your application. Observe the following
    code snippet:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，您可以看到应用程序的`name`，您的应用程序的`version`和您的应用程序的`description`。观察以下代码片段：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'From the preceding code, you can set up your `scripts`, to detail such things
    as how to `start` your server, what to `build`, what is `clean`, and `deploy`
    and `dev`. Please make sure whatever path you have defined in the respective variable
    is correct, otherwise your application won''t work as expected. Observe the following
    code snippet:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中，您可以设置您的`scripts`，以详细说明如何`start`您的服务器，如何`build`，如何`clean`，以及`deploy`和`dev`。请确保您在各自变量中定义的路径是正确的，否则您的应用程序将无法按预期工作。观察以下代码片段：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code shows the `author` name, `license` (if applicable), and
    `keywords` for your application. Observe the following code snippet:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码显示了`author`名称，`license`（如果适用）以及您的应用程序的`keywords`。观察以下代码片段：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Finally, you can see, in the preceding code, the `dependencies` of your application
    which will help you set the required components and fetch data, as well as the
    frontend stuff. You can also see defined `devDependencies` and their versions,
    which are linked to your application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以在上述代码中看到您的应用程序的`dependencies`，这将帮助您设置所需的组件并获取数据，以及前端内容。您还可以看到定义的`devDependencies`及其版本，这些与您的应用程序相关联。
- en: 'After setting up the `package.json` file, we have our HTML markup as shown
    in the following code, named `index.html`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`package.json`文件后，我们有如下所示的HTML标记，名为`index.html`：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Configure your application with a unique ID in `config.js`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在`config.js`中使用唯一ID配置您的应用程序：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As shown in the preceding code, you can have your configuration in one file.
    You can name it `index.js`. This file includes your `appId`, which is very important
    when it comes to to running your app in your local directory.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，您可以将配置放在一个文件中。您可以将其命名为`index.js`。该文件包括您的`appId`，在本地目录中运行应用程序时非常重要。
- en: 'To have your ID, you have to register your app in Facebook at [https://developers.facebook.com](https://developers.facebook.com)
    and there you will have to follow these steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得您的ID，您必须在Facebook上注册您的应用程序[https://developers.facebook.com](https://developers.facebook.com)，然后您将需要按照以下步骤进行操作：
- en: Log in to your Facebook developer account:![Setting up the application](graphics/image_08_002-1.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的Facebook开发者帐户：![设置应用程序](graphics/image_08_002-1.jpg)
- en: After logging in, you will see on the right-hand side a drop-down called **My
    apps**. Click on that and open up the list menu. There you will find **Add new
    app**. Clicking that will open a dialog saying, **Create a New App ID**, as shown
    in the following screenshot:![Setting up the application](graphics/image_08_003-1.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，您将在右侧看到一个名为**我的应用程序**的下拉菜单。点击它并打开列表菜单。在那里，您将找到**添加新应用程序**。点击它将打开一个对话框，显示**创建新应用程序ID**，如下截图所示：![设置应用程序](graphics/image_08_003-1.jpg)
- en: Enter the required details and click on the **Create App ID** button.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 输入所需的详细信息，然后点击**创建应用程序ID**按钮。
- en: After creating your app ID, please jump to the **Dashboard** page and you will
    see a screen resembling the following:![Setting up the application](graphics/image_08_004-1.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建应用程序ID后，请转到**仪表板**页面，您将看到类似以下的屏幕：![设置应用程序](graphics/image_08_004-1.jpg)
- en: On the **Dashboard** page, your left-hand side navigation shows the **Settings**
    link. Please click on that to set the **Basic** and **Advanced** settings for
    your app:![Setting up the application](graphics/image_08_005-1.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**仪表板**页面上，您左侧的导航显示**设置**链接。请点击该链接设置应用程序的**基本**和**高级**设置：![设置应用程序](graphics/image_08_005-1.jpg)
- en: Once you are able to see the preceding screen, you will be able to see that
    your dynamic generated **App ID**, **Display Name**category, and **App Secret**
    are automatically filled in. You will also see **App Domains**. This field is
    very important when it comes to accessing your app as a website and notifying
    that we need to define the domain here. However, if you write your `localhost`
    as the domain straightaway, it will not be accepted and your application will
    have errors.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您能够看到前面的屏幕，您将能够看到您动态生成的**应用程序ID**，**显示名称**类别和**应用程序密钥**自动填充。您还将看到**应用程序域**。在访问应用程序并通知我们需要在此处定义域时，此字段非常重要。但是，如果您直接将您的`localhost`写为域，它将不被接受，您的应用程序将出现错误。
- en: 'To make your localhost accessible, we have to define its platform. Now, please
    scroll down a bit to access **+** **Add platform**:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使您的本地主机可访问，我们必须定义其平台。现在，请向下滚动一点以访问**+** **添加平台**：
- en: '![Setting up the application](graphics/image_08_006-1.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![设置应用程序](graphics/image_08_006-1.jpg)'
- en: Once you click on **+ Add Platform**, you will see the following options on
    the screen and you will have to select a **Website** to run your application on
    your local server:![Setting up the application](graphics/image_08_007-1.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您点击**+添加平台**，您将在屏幕上看到以下选项，并且您必须选择**网站**在本地服务器上运行应用程序：![设置应用程序](graphics/image_08_007-1.jpg)
- en: After you have selected **Website** as a platform, one more field will be added
    to your screen as shown in the following screenshot:![Setting up the application](graphics/image_08_008-2.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您选择**网站**作为平台后，将会在屏幕上添加一个字段，如下截图所示：![设置应用程序](graphics/image_08_008-2.jpg)
- en: Once you get the preceding screen, you have to define the **Site URL** as `http://localhost:3000/`
    and then, in a similar way, you will have to define the same domain in the **App
    Domains** field, as shown in the following screenshot:![Setting up the application](graphics/image_08_009-3.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你得到了前面的屏幕，你需要将**站点URL**定义为`http://localhost:3000/`，然后以类似的方式，在**应用域**字段中定义相同的域，如下面的截图所示：![设置应用程序](graphics/image_08_009-3.jpg)
- en: After doing the aforementioned changes, please save your changes by clicking
    on the **Save Changes** button at the bottom-right side:![Setting up the application](graphics/image_08_010-1.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在做了上述更改之后，请通过点击右下角的**保存更改**按钮来保存你的更改：![设置应用程序](graphics/image_08_010-1.jpg)
- en: Now your ID is created, which you can use in your `config.js` file to link your
    app to run in the local server.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的ID已经创建好了，你可以在你的`config.js`文件中使用它来链接你的应用在本地服务器上运行。
- en: After setting up the `config.js` file, the next step is to set your required
    files in that app and inject your dynamic stuff into the HTML ID.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好`config.js`文件之后，下一步是在应用程序中设置你所需的文件，并将你的动态内容注入到HTML ID中。
- en: 'You can import required components, utils, and CSS in the `index.js` file and
    put it in a different folder so that it will not conflict with your configuration
    `index.js` file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`index.js`文件中导入所需的组件、工具和CSS，并将其放在不同的文件夹中，这样它就不会与你的配置`index.js`文件冲突：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code, you can see that I have imported `React` for React-supported
    files and imported the required CSS files. As a final step, the `render` method
    will do the trick for you after defining your HTML ID into the selector. Make
    sure `document.querySelector` has the correct selector, otherwise your application
    will not render with the correct structure.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你可以看到我导入了`React`来支持React文件，并导入了所需的CSS文件。最后一步，`render`方法在定义了你的HTML ID之后将为你完成这个技巧。确保`document.querySelector`有正确的选择器，否则你的应用将无法以正确的结构渲染。
- en: You can see in the preceding code that I have created one component called `App`
    and imported it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在前面的代码中看到，我创建了一个名为`App`的组件并导入了它。
- en: In the `App.js` file, I have imported several components, which helped me to
    fetch data from my Facebook account with the help of the Facebook API integration.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.js`文件中，我导入了几个组件，这些组件帮助我从我的Facebook账户中获取数据，借助Facebook API集成。
- en: 'Observe the following code structure of the `App.js` file:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 观察一下`App.js`文件的代码结构：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding imported JavaScript files have been set up to fetch data, building
    the structure about how it will be executed in your application.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面导入的JavaScript文件已经设置好了获取数据的结构，关于它将如何在你的应用程序中执行。
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code defines constants to create styles for the wrapper, which
    will be applied while your page renders in the browser.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码定义了常量来为包装器创建样式，在页面在浏览器中渲染时将应用这些样式。
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding code extends components, with details of mount/unmount, which
    we have already covered in previous chapters. If you are still unsure about this
    area, then please revisit it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码扩展了组件，包括挂载/卸载的细节，这些细节我们在之前的章节中已经涵盖过了。如果你对这个领域还不确定，那么请重新查看一下。
- en: '`window.fbAsyncInit` will sync the Facebook API with the login setup and it
    will also validate the status of the login.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`window.fbAsyncInit`将会将Facebook API与登录设置同步，并验证登录的状态。'
- en: It will also async Facebook data such as your profile and friends list, which
    has separate JavaScript and will be covered later in this chapter.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 它还将异步获取Facebook数据，比如你的个人资料和好友列表，这部分有单独的JavaScript，将在本章后面进行讲解。
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Defining a scope array means we are accessing the user's Facebook friends and
    posts.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个范围数组意味着我们正在访问用户的Facebook好友和帖子。
- en: 'Observe the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 观察下面的截图：
- en: '![Setting up the application](graphics/image_08_011-1.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![设置应用程序](graphics/image_08_011-1.jpg)'
- en: 'In the preceding screenshot, you can see default login permission access in
    the **App Review** tab while creating the Facebook login app. We can submit the
    approval to access any other user information:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，您可以看到在创建Facebook登录应用程序时**App Review**选项卡中的默认登录权限访问。我们可以提交批准以访问任何其他用户信息：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, the `mainRender` method will render the `Profile`, `myFriends`
    (friend list), and `status` and it will return the value in the `render return`.
    You can see, in the `render` method, one `<div>` tag; have called it `{this.mainRender()}`
    to inject the data inside it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`mainRender`方法将呈现`Profile`，`myFriends`（好友列表）和`status`，并且它将在`render return`中返回值。您可以在`render`方法中看到一个`<div>`标签；我称之为`{this.mainRender()}`来在其中注入数据。
- en: 'As you know, here we are dealing with third-party API integration. We are not
    sure about how long we will be connected to that API and how long it will take
    to load the content. It''s better to have a content loader (spinner), which indicates
    that the user should wait for a while, so we have used the following spinner to
    show the progress in loading the content on the page. The code for the spinner
    is also included in the `App.js` file. Here''s a look at the spinner:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，这里我们正在处理第三方API集成。我们不确定我们将连接到该API多长时间以及加载内容需要多长时间。最好有一个内容加载器（旋转器），表示用户需要等待一段时间，因此我们使用以下旋转器来显示页面上内容加载的进度。旋转器的代码也包含在`App.js`文件中。以下是旋转器的样子：
- en: '![Setting up the application](graphics/image_08_012-1.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![设置应用程序](graphics/image_08_012-1.jpg)'
- en: You can also choose your own custom spinner.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以选择自己的自定义旋转器。
- en: 'Once your application page is ready, your final output should look like the
    following screenshot, where you will see the basic look and feel, along with the
    required elements:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的应用程序页面准备就绪，最终输出应该如下截图所示，您将看到基本的外观和感觉，以及所需的元素：
- en: '![Setting up the application](graphics/B05743_08_13-1.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![设置应用程序](graphics/B05743_08_13-1.jpg)'
- en: Once you hit your local server, the preceding screen will ask your permission
    to proceed with the login process.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您启动本地服务器，上述屏幕将要求您允许继续登录过程。
- en: 'Once you press the **Agree** button, it will redirect you to the Facebook login
    page. This can be achieved through the following code (`Login.js`):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您按下**同意**按钮，它将重定向您到Facebook登录页面。这可以通过以下代码（`Login.js`）实现：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: After importing the React `PropTypes`, in the following code you will see that
    I have defined a constant to create styles for the login page. You can also define
    styles here and you can put them into one CSS file and have an external file call.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入React `PropTypes`之后，在以下代码中，您将看到我已经定义了一个常量来为登录页面创建样式。您也可以在这里定义样式，并且可以将它们放入一个CSS文件中，并且有一个外部文件调用。
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following code shows the HTML structure of the login page and it also has
    the `Login.propTypes` defined for the login button:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了登录页面的HTML结构，并且还定义了`Login.propTypes`用于登录按钮：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When you click on the **Agree** button, your application will be redirected
    to the Facebook login page. Please refer to the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击**同意**按钮时，您的应用程序将被重定向到Facebook登录页面。请参考以下截图：
- en: '![Setting up the application](graphics/image_08_014-1.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![设置应用程序](graphics/image_08_014-1.jpg)'
- en: 'Once you login with your credentials, it will ask you for permission to access
    your data as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您使用您的凭据登录，它将要求您允许访问您的数据，如下截图所示：
- en: '![Setting up the application](graphics/image_08_015-1.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![设置应用程序](graphics/image_08_015-1.jpg)'
- en: Once you have provided the required details and pressed the **Continue** as
    button, it will give you the final screen with the final output.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您提供了所需的细节并按下**继续**按钮，它将给您最终屏幕和最终输出。
- en: '![Setting up the application](graphics/image_08_016-1.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![设置应用程序](graphics/image_08_016-1.jpg)'
- en: For security reasons, I have blurred my friends' profile pictures and their
    names, but you will get the same layout in your Facebook account. Now you're thinking
    about fetching a friends list in your application, right? So, with help of the
    following code, I have fetched a list in my custom app.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全原因，我已经模糊了我的朋友的个人资料图片和他们的名字，但是您将在您的Facebook账户中获得相同的布局。现在您在考虑在您的应用程序中获取朋友列表，对吧？所以，借助以下代码的帮助，我在我的自定义应用程序中获取了一个列表。
- en: '`FriendList.js` is imported in the `App.js` file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`FriendList.js`被导入到`App.js`文件中：'
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As we can see in the preceding code snippets, we are also importing `React`,
    `constants`, and `FriendItem` to get the data. Here we are just importing `FriendItem`
    but it will have a separate file to deal with this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们还导入了`React`，`constants`和`FriendItem`来获取数据。在这里，我们只是导入了`FriendItem`，但它将有一个单独的文件来处理这个问题：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding code defines the wrapper styles for the friends list content.
    As I said earlier, you can also have those in a separate CSS file and have an
    external call, whichever is convenient for you.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码定义了朋友列表内容的包装器样式。正如我之前所说，您也可以将它们放在一个单独的CSS文件中，并进行外部调用，以便您方便。
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the preceding code, you can see a condition to validate whether someone has
    friends or no friends. If someone does not have a friends list in their Facebook
    account, it will show the aforementioned message.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，您可以看到一个条件来验证某人是否有朋友或没有朋友。如果某人在他们的Facebook账户中没有朋友列表，它将显示上述消息。
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If your account has friends, then you will get a full list of friends including
    their profile pictures, likes, comments, and the number of posts, so in this way
    you can also have Facebook API integration with React.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的账户有朋友，那么您将获得一个包括他们的个人资料图片、点赞、评论和帖子数量的完整朋友列表，因此您也可以通过React与Facebook API集成。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have explored integrating the Facebook API with the help of React, and you
    can also integrate with other APIs in a similar way.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探索了如何借助React集成Facebook API，您也可以以类似的方式集成其他API。
- en: We have used constants, utils, and extended components to achieve integration
    and get the expected output.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了常量、工具和扩展组件来实现集成并获得预期的输出。
- en: The key examples shown in this chapter will help you to understand or clarify
    your concept of the integration of other APIs with React.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中展示的关键示例将帮助您理解或澄清您对将其他API与React集成的概念。
