- en: Mobile-First React Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动优先React组件
- en: In this chapter, you'll learn how to use the `react-bootstrap` package. This
    package provides mobile-first React components by leveraging the Bootstrap CSS
    framework. It's not the only option available for doing mobile-first React, but
    it's a good choice, and it brings together two of the most popular technologies
    on the web.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用`react-bootstrap`包。该包通过利用Bootstrap CSS框架提供移动优先的React组件。这不是进行移动优先React的唯一选择，但这是一个不错的选择，并且它将网络上最流行的两种技术结合在一起。
- en: I'll start with the motivation for adopting a mobile-first design strategy.
    Then you'll spend the rest of this chapter implementing a few `react-bootstrap`
    components.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我将从采用移动优先设计策略的动机开始。然后您将在本章的其余部分中实现一些`react-bootstrap`组件。
- en: The rationale behind mobile-first design
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动优先设计背后的原理
- en: Mobile-first design is a strategy that treats mobile devices as the primary
    target for user interfaces. Larger screens, such as laptops or big monitors, are
    secondary targets. This doesn't necessarily mean that the majority of users are
    accessing your app on their phones. It simply means that mobile is the starting
    point for scaling the user interface geometrically.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 移动优先设计是一种将移动设备视为用户界面的主要目标的策略。较大的屏幕，如笔记本电脑或大型显示器，是次要目标。这并不一定意味着大多数用户在手机上访问您的应用程序。这只是意味着移动设备是缩放用户界面的起点。
- en: 'For example, when mobile browsers first appeared it was customary to design
    the UI for normal desktop screens, and then to scale down to smaller screens when
    necessary. The approach is illustrated here:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当移动浏览器首次出现时，习惯上是为普通桌面屏幕设计用户界面，然后在必要时缩小到较小的屏幕。该方法如下所示：
- en: '![](Images/b280ba0f-34ce-4d9d-8ad7-ba20ff26b511.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b280ba0f-34ce-4d9d-8ad7-ba20ff26b511.png)'
- en: The idea here is that you design the UI with larger screens in mind so that
    you can fit as much functionality as possible onto the screen at once. When smaller
    devices are used, your code has to either use a different layout or different
    components on the fly.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是，您设计UI时要考虑较大的屏幕，以便一次性将尽可能多的功能放在屏幕上。当使用较小的设备时，您的代码必须在运行时使用不同的布局或不同的组件。
- en: This is very limiting for a number of reasons. First, it's very difficult to
    maintain code that has lots of special-case handling for different screen resolutions.
    Second, and the more compelling argument against this approach, is that it's next
    to impossible to provide a similar user experience across devices. If large screens
    have a ton of functionality displayed all at once, you simply cannot replicate
    this on smaller screens. Not only is there less real estate, but the processing
    power and network bandwidth of smaller devices are limiting factors as well.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这在许多方面都是非常有限的。首先，对于不同的屏幕分辨率，维护大量特殊情况处理的代码非常困难。其次，更具有说服力的反对这种方法的论点是，几乎不可能在不同设备上提供类似的用户体验。如果大屏幕一次显示大量功能，您简单无法在较小的屏幕上复制这一点。不仅是屏幕空间较小，而且较小设备的处理能力和网络带宽也是限制因素。
- en: 'The mobile-first approach to UI design tackles these issues by scaling the
    UI up, instead of trying to scale it down, as shown here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: UI设计的移动优先方法通过放大UI来解决这些问题，而不是试图缩小UI，如下所示：
- en: '![](Images/a0669383-dc7c-41c3-816f-5666d856f7aa.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a0669383-dc7c-41c3-816f-5666d856f7aa.png)'
- en: This approach never used to make sense because you would be limiting the capabilities
    of your application; there weren't many tablets or phones around. This is not
    the case today, where the expectation is that users can interact with applications
    on their mobile devices without any issues. There are a lot more of them now,
    and mobile browsers are quite capable of handling anything you throw at them.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法以前是没有意义的，因为你会限制你的应用程序的功能；周围没有很多平板电脑或手机。但今天情况不同了，人们期望用户能够在他们的移动设备上与应用程序进行交互而不会出现任何问题。现在有更多的移动设备了，移动浏览器完全能够处理你提出的任何要求。
- en: Once you've implemented your application functionality in a mobile context,
    scaling it up to larger screen sizes is a relatively easy problem to solve. Now,
    let's take a look at how to approach mobile-first in React applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在移动环境中实现了应用程序功能，将其扩展到更大的屏幕尺寸就是一个相对容易解决的问题。现在，让我们看看如何在React应用程序中实现移动优先。
- en: Using react-bootstrap components
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用react-bootstrap组件
- en: While it's possible to implement mobile-first React user interfaces by rolling
    your own CSS, I would recommend against doing this. There are a number of CSS
    libraries that handle the seemingly endless edge cases for you. In this section,
    I'll introduce the `react-bootstrap` package—React components for Bootstrap.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以通过自己编写CSS来实现移动优先的React用户界面，但我建议不要这样做。有许多CSS库可以为你处理看似无穷无尽的边缘情况。在这一部分，我将介绍`react-bootstrap`包——Bootstrap的React组件。
- en: The `react-bootstrap` package exposes a number of components that serve as a
    thin abstraction layer between your application and Bootstrap HTML/CSS.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-bootstrap`包公开了许多组件，它们在你的应用程序和Bootstrap HTML/CSS之间提供了一个薄的抽象层。'
- en: Let's implement some examples now. Another reason I'm showing you how to work
    with `react-bootstrap` components is that they're similar to `react-native` components,
    which you'll learn about starting in the next chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现一些示例。我向你展示如何使用`react-bootstrap`组件的另一个原因是它们与`react-native`组件相似，你将在下一章中学习到。
- en: The idea with the following examples is not in-depth coverage of `react-bootstrap`,
    or Bootstrap itself for that matter. Rather, the idea is to give you a feel for
    what it's like to work with mobile-first components in React by passing them state
    from containers and so on. For now, take a look at the `react-bootstrap` documentation
    ([http://react-bootstrap.github.io/](http://react-bootstrap.github.io/)) for specifics.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例的重点不是深入覆盖`react-bootstrap`，或者Bootstrap本身。相反，重点是让你感受一下通过从容器传递状态等方式在React中使用移动优先组件的感觉。现在，先看一下`react-bootstrap`文档（[http://react-bootstrap.github.io/](http://react-bootstrap.github.io/)）了解具体内容。
- en: Implementing navigation
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现导航
- en: The most important aspect of a mobile-first design is the navigation. It's especially
    difficult to get this right on mobile devices because there's barely enough room
    for feature content, let alone tools to move from feature to feature. Thankfully,
    Bootstrap handles much of the difficulty for you.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 移动优先设计的最重要方面是导航。在移动设备上很难做到这一点，因为几乎没有足够的空间来放置功能内容，更别提从一个功能到另一个功能的工具了。幸运的是，Bootstrap为你处理了许多困难。
- en: In this section, you'll learn how to implement two types of navigation. You'll
    start with toolbar navigation, and then you'll build a sidebar navigation section.
    This makes up part of the UI skeleton that you'll start with. What I find really
    useful about this approach is that, once the navigation mechanisms are in place,
    it's easy to add new pages and to move around in the app as I build it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将学习如何实现两种类型的导航。你将从工具栏导航开始，然后构建一个侧边栏导航部分。这构成了你将开始的UI骨架的一部分。我发现这种方法真的很有用，因为一旦导航机制就位，我在构建应用程序时很容易添加新页面和在应用程序中移动。
- en: 'Let''s start with the `Navbar.` This is a component found in most applications
    and is statically positioned at the top of the screen. Within this bar, you''ll
    add some navigation links. Here''s what the JSX for this looks like:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`Navbar.`开始。这是大多数应用程序中的一个组件，静态地位于屏幕顶部。在这个栏中，你将添加一些导航链接。这是这个JSX的样子：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s what the navigation bar looks like:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏的样子如下：
- en: '![](Images/6ecf6e39-4aed-4963-be2c-94291f0e21b9.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6ecf6e39-4aed-4963-be2c-94291f0e21b9.png)'
- en: The `<Navbar.Header>` component defines the title of the application and is
    placed to the left of the navigation bar. The links themselves are placed in the
    `<Nav>` element and the `pullRight` property aligns them to the right side of
    the navigation bar. You can see that, instead of using `<Link>` from the `react-router`
    package, you're using `<LinkContainer>` and `<IndexLinkContainer>`. These components
    come from the `react-router-bootstrap` package. They're necessary to make Bootstrap
    links work properly with the router.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Navbar.Header>`组件定义了应用程序的标题，并放置在导航栏的左侧。链接本身放在`<Nav>`元素中，`pullRight`属性将它们对齐到导航栏的右侧。你可以看到，你没有使用`react-router`包中的`<Link>`，而是使用了`<LinkContainer>`和`<IndexLinkContainer>`。这些组件来自`react-router-bootstrap`包。它们是必要的，以使Bootstrap链接与路由器正常工作。'
- en: 'The `<Nav>` element is wrapped in a `<Navbar.Collapse>` element and the header
    contains a `<Navbar.Toggle>` button. These components are necessary to collapse
    the links into a drop-down menu for smaller screens. Since it''s based on the
    browser''s width, you can just resize your browser window to see it in action:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Nav>`元素被包裹在`<Navbar.Collapse>`元素中，头部包含一个`<Navbar.Toggle>`按钮。这些组件是必要的，用于将链接折叠成下拉菜单以适应较小的屏幕。由于它是基于浏览器的宽度，你可以调整浏览器窗口大小来看它的效果：'
- en: '![](Images/54cb73bc-0763-4256-8a2a-629cc125783b.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/54cb73bc-0763-4256-8a2a-629cc125783b.png)'
- en: 'The links that were displayed are now collapsed into a standard menu button.
    When this button is clicked, the same links are displayed in a vertical fashion.
    This works much better on smaller devices. But with larger screens, having all
    navigation displayed in the top navigation bar might not be ideal. The standard
    approach is to implement a left-hand sidebar with navigation links stacked vertically.
    Let''s implement this now:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的链接现在已经折叠成了一个标准菜单按钮。当点击这个按钮时，相同的链接以垂直方式显示。这在较小的设备上效果更好。但是在较大的屏幕上，将所有导航显示在顶部导航栏可能不是理想的。标准的方法是实现一个带有垂直堆叠导航链接的左侧边栏。让我们现在来实现这个：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `<Col>` element is the container for the `<Nav>` and you''ve added your
    own class name to it. You''ll see why in a moment. Inside the `<Nav>` element,
    things look exactly the same as they do in the navigation toolbar, with link containers
    and menu items. Here''s what the sidebar looks like:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Col>`元素是`<Nav>`的容器，你已经给它添加了自己的类名。你马上就会明白为什么要这样做。在`<Nav>`元素内部，事情看起来和导航工具栏中一样，有链接容器和菜单项。这就是侧边栏的样子：'
- en: '![](Images/16781823-18a2-4b58-a9be-8e3eb1e93751.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/16781823-18a2-4b58-a9be-8e3eb1e93751.png)'
- en: 'Now, the reason that we needed to add that custom `sidebar` class name to the
    containing element was so that we can hide it completely on smaller devices. Let''s
    take a look at the CSS involved:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要给包含元素添加自定义的`sidebar`类名的原因是为了在较小的设备上完全隐藏它。让我们来看一下涉及的CSS：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This CSS, along with the overall structure of this example, is adapted from
    this Bootstrap example: [http://getbootstrap.com/examples/dashboard/](http://getbootstrap.com/examples/dashboard/).
    The idea behind this media query is that if the minimum browser width is `768px`,
    then show the sidebar in a fixed position. Otherwise, hide it completely because
    we''re on a smaller screen.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CSS，以及这个示例的整体结构，都是从Bootstrap示例中调整而来：[http://getbootstrap.com/examples/dashboard/](http://getbootstrap.com/examples/dashboard/)。这个媒体查询的背后思想是，如果最小浏览器宽度为`768px`，那么在固定位置显示侧边栏。否则，完全隐藏它，因为我们在一个较小的屏幕上。
- en: At this point, you have two navigation components collaborating with one another
    to change how they're displayed based on the screen resolution.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您有两个导航组件相互协作，根据屏幕分辨率改变它们的显示方式。
- en: Lists
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: 'A common UI element in both mobile and desktop contexts is rendering lists
    of items. This is easy enough to do without the support of a CSS library, but
    libraries help keep the look and feel consistent. Let''s implement a list that''s
    controlled by a set of filters. First, you have the component that renders the
    `react-bootstrap` components:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动和桌面环境中，一个常见的UI元素是渲染项目列表。这很容易在没有CSS库的支持下完成，但库有助于保持外观和感觉一致。让我们实现一个由一组过滤器控制的列表。首先，您有渲染`react-bootstrap`组件的组件：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, you have the `<ButtonGroup>` and the `<Button>` elements. These are the
    filters that the user can apply to the list. By default, only todo items are displayed.
    But, they can choose to filter by done items, or to show all items.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您有`<ButtonGroup>`和`<Button>`元素。这些是用户可以应用于列表的过滤器。默认情况下，只显示待办事项。但是，他们可以选择按已完成项目进行过滤，或者显示所有项目。
- en: 'The list itself is a `<ListGroup>` element with `<ListGroupItem>` elements
    as children. The item renders differently, depending on the `done` state of the
    item. The end result looks like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 列表本身是一个`<ListGroup>`元素，其子元素是`<ListGroupItem>`元素。该项目根据项目的`done`状态而呈现不同。最终结果如下：
- en: '![](Images/49c26dbd-7540-41ed-aa20-2a38446132a9.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: ！[](Images/49c26dbd-7540-41ed-aa20-2a38446132a9.png)
- en: 'You can toggle the done state of a list item simply by clicking on the Done
    button. What''s nice about the way this component works is that if you''re viewing
    todo items and mark one as done, it''s taken off the list because it no longer
    meets the current filter criteria. The filter is re-evaluated because the component
    is re-rendered. Here''s what an item that''s marked as done looks like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过单击“完成”按钮来切换列表项的完成状态。这个组件的好处在于，如果您正在查看待办事项并将其标记为已完成，它将从列表中删除，因为它不再符合当前的过滤条件。组件重新呈现，因此重新评估过滤器。以下是标记为已完成的项目的外观：
- en: '![](Images/71702a3c-8322-42ce-a9dd-9a75f44f6bad.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: ！[](Images/71702a3c-8322-42ce-a9dd-9a75f44f6bad.png)
- en: 'Now let''s take a look at the container component that handles the state of
    the filter buttons and the item list:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下处理过滤器按钮和项目列表状态的容器组件：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This component has four pieces of state and four event handler functions. Three
    pieces of state do nothing more than track which filter button is selected. The
    `filter` state is the callback function that's used by `<FilteredList>` to filter
    the items. The tactic is to pass a different filter function to the child view,
    based on the filter selection.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件有四个状态和四个事件处理程序函数。三个状态仅仅是跟踪哪个过滤器按钮被选中。`filter`状态是由`<FilteredList>`使用的回调函数，用于过滤项目。策略是根据过滤器选择向子视图传递不同的过滤器函数。
- en: Forms
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单
- en: In this final section of the chapter, you'll implement some form components
    from `react-bootstrap`. Just like the filter buttons you created in the preceding
    section, form components have state that needs to be passed down from a container
    component.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后一节中，您将从`react-bootstrap`实现一些表单组件。就像您在前一节中创建的过滤按钮一样，表单组件也有需要从容器组件传递下来的状态。
- en: 'However, even simple form controls have many moving parts. First, you''ll learn
    about text inputs. There''s the input itself, but there''s also the label, the
    placeholder, the error text, the validation function, and so on. To help glue
    all these pieces together, let''s create a generic component that encapsulates
    all of the Bootstrap parts:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使是简单的表单控件也有许多组成部分。首先，您将了解文本输入。有输入本身，还有标签，占位符，错误文本，验证函数等等。为了帮助将所有这些部分粘合在一起，让我们创建一个封装了所有Bootstrap部分的通用组件：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are two key advantages to this approach. One is that, instead of having
    to use `<FormGroup>`, `<FormControl>`, `<HelpBlock>`, and so on, you just need
    your `<Input>` element. Another advantage is that only the `type` property is
    required, meaning that `<Input>` can be used for simple and complex controls.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有两个关键优势。一个是，不需要使用`<FormGroup>`，`<FormControl>`，`<HelpBlock>`等，只需要您的`<Input>`元素。另一个优势是，只需要`type`属性，这意味着`<Input>`可以用于简单和复杂的控件。
- en: 'Let''s see this component in action now:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看这个组件的实际效果：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'There''s only one component used to create all of the necessary Bootstrap pieces
    underneath. Everything is passed in through a property. Here''s what this form
    looks like:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一个组件用于创建所有必要的Bootstrap部分。所有内容都通过属性传入。这个表单看起来是这样的：
- en: '![](Images/e57f86f6-a57a-43b2-bacf-3c959d110b81.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e57f86f6-a57a-43b2-bacf-3c959d110b81.png)'
- en: 'Now let''s look at the container component that controls the state of these
    inputs:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看控制这些输入状态的容器组件：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The event handlers for the inputs are part of the state that get passed to
    `InputsForm` as properties. Now let''s take a look at some checkboxes and radio
    buttons. You''ll use the `<Radio>` and the `<Checkbox>` react-bootstrap components:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 输入的事件处理程序是作为状态的一部分传递给`InputsForm`作为属性。现在让我们来看看一些复选框和单选按钮。您将使用`<Radio>`和`<Checkbox>`
    react-bootstrap组件：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The radio buttons toggle the `enabled` state of the checkbox and the checkbox
    toggles the `enabled` state of the radios. Note that, although the two `<Radio>`
    elements are in the same `<FormGroup>`, they need to have the same `name` property
    value. Otherwise, you''ll be able to select both radios at the same time. Here''s
    what this form looks like:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 单选按钮切换复选框的“enabled”状态，复选框切换单选按钮的“enabled”状态。请注意，尽管两个`<Radio>`元素在同一个`<FormGroup>`中，它们需要具有相同的`name`属性值。否则，您将能够同时选择两个单选按钮。这个表单看起来是这样的：
- en: '![](Images/70854800-97b6-4343-92ee-aca2cff405d1.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/70854800-97b6-4343-92ee-aca2cff405d1.png)'
- en: 'Finally, let''s look at the container component that handles the state of the
    radios and the checkbox:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看看处理单选按钮和复选框状态的容器组件：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced you to the concept of mobile-first design. You had a
    brief overview of why you might want to use the mobile-first strategy. It boils
    down to the fact that scaling mobile designs up to larger devices is much easier
    than scaling in the opposite direction.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您介绍了移动优先设计的概念。您简要了解了为什么要使用移动优先策略。归根结底，这是因为将移动设计扩展到更大的设备要比相反方向的扩展容易得多。
- en: Next, you learned what this means in the context of a React application. In
    particular, you want to use a framework such as Bootstrap that handles the scaling
    details for us. You then implemented several examples using components from the
    `react-bootstrap` package.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你了解了这在React应用程序的上下文中意味着什么。特别是，你希望使用处理我们的缩放细节的框架，比如Bootstrap。然后，你使用了`react-bootstrap`包中的几个组件来实现了几个示例。
- en: This concludes the first part of this book. You're now ready to tackle React
    projects that live on the web, including mobile browsers! Mobile browsers are
    getting better, but they're no match for the native capabilities of mobile platforms.
    Part 2 of this book teaches you how to use React Native.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了本书的第一部分。现在你已经准备好处理在网络上运行的React项目，包括移动浏览器！移动浏览器变得越来越好，但它们无法与移动平台的本机功能相媲美。本书的第二部分将教你如何使用React
    Native。
- en: Test your knowledge
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: Why should React developers consider the mobile-first approach to designing
    their applications?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React开发者为什么要考虑移动优先的设计方法呢？
- en: Because most users are on mobile devices and it isn't worthwhile to think about
    larger displays.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为大多数用户使用移动设备，考虑较大的显示屏并不值得。
- en: Because targeting mobile devices as the primary display for your application
    ensures that you can handle mobile devices and scaling up to larger devices is
    easier than the other way around.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为将移动设备作为应用程序的主要显示屏，可以确保你可以处理移动设备，并且向较大设备的扩展比另一种方式更容易。
- en: It doesn't make sense. You should target larger displays first and scale down
    your application for mobile devices.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这没有意义。你应该首先针对较大的显示屏，然后缩小应用程序以适应移动设备。
- en: If you're using a library such as `react-bootstrap`, you don't even need to
    think about mobile-first concepts.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用`react-bootstrap`这样的库，你甚至不需要考虑移动优先的概念。
- en: Does `react-router` integrate well with `react-bootstrap`?
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`react-router`与`react-bootstrap`集成良好吗？'
- en: Yes. Although you'll want to use the **`react-router-bootstrap`** package to
    make sure that you can add links to the **`NavItem`** and **`MenuItem`** components.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的。尽管你会想要使用**`react-router-bootstrap`**包，以确保你可以向**`NavItem`**和**`MenuItem`**组件添加链接。
- en: No, you should just use regular links in your `react-bootstrap` components.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，你应该在`react-bootstrap`组件中使用常规链接。
- en: Yes, but you should consider writing your own abstractions so that all types
    of `react-bootstrap` buttons work with the `Link` component.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，但是你应该考虑编写自己的抽象，以便所有类型的`react-bootstrap`按钮与`Link`组件一起工作。
- en: How would you go about rendering lists of items using `react-bootstrap`?
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会如何使用`react-bootstrap`渲染项目列表？
- en: Wrap a `<ul>` element with a `<ListGroup>` component from `react-bootstrap`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`react-bootstrap`中的`<ListGroup>`组件包装`<ul>`元素。
- en: Just use a `<ul>` and apply Bootstrap classes to the element.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需使用`<ul>`并将Bootstrap类应用于该元素。
- en: Use **`ListGroup`** and **`ListGroupItem`** components from **`react-bootstrap`.**
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**`react-bootstrap`**中的**`ListGroup`**和**`ListGroupItem`**组件。
- en: Why should you create an abstraction for `react-bootstrap` form components?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么你要为`react-bootstrap`表单组件创建一个抽象？
- en: Because `react-bootstrap` form components are lacking in functionality.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为`react-bootstrap`表单组件在功能上缺乏。
- en: Because there are many related components that you need to use for basic inputs
    and creating this abstraction makes life easier.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为有许多相关组件需要用于基本输入，创建这种抽象会让生活更轻松。
- en: Because this is the only way to get input validation to work.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为这是使输入验证工作的唯一方法。
- en: Further reading
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information you can check out the following links:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息可以查看以下链接：
- en: '[https://react-bootstrap.github.io/](https://react-bootstrap.github.io/)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://react-bootstrap.github.io/](https://react-bootstrap.github.io/)'
- en: '[https://getbootstrap.com/](https://getbootstrap.com/)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://getbootstrap.com/](https://getbootstrap.com/)'
