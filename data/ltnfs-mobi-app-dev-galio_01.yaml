- en: '*Chapter 1*:Introduction to React Native and Galio'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第1章*：介绍React Native和Galio'
- en: Let's start by understanding what this book is about and how it can help you
    learn how to use React Native and Galio. By reading this book, you'll understand
    how to install React Native and all the necessary tools for using it with both
    macOS and Windows. You will then understand how to create an Expo project and
    why we're using Expo, the difference between the template workflows and how they
    come in handy, and also how to start your new project on both a physical device
    and a simulator. Things should be really easy to follow, so you might find the
    experience rewarding.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先了解本书的内容以及它如何帮助您学习如何使用React Native和Galio。通过阅读本书，您将了解如何在macOS和Windows上安装React
    Native以及所有必要的工具。然后，您将了解如何创建一个Expo项目以及为什么我们使用Expo，模板工作流之间的区别以及它们如何方便，以及如何在物理设备和模拟器上启动新项目。事情应该非常容易跟随，所以您可能会发现这种体验是有益的。
- en: Understanding the world of cross-platform mobile programming isn't an easy task
    but it sure is a doable one. You made the first step by purchasing this book –
    the second one is currently in progress since you're reading this book to discover
    how React Native works and how Galio is meant to help you build apps faster. The
    main purpose of this book is for you to get accustomed to how React Native works,
    how to use it for your projects, and how Galio comes in handy and could potentially
    save a lot of your time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 了解跨平台移动编程的世界并不容易，但肯定是可行的。购买这本书是您迈出的第一步，第二步正在进行中，因为您正在阅读本书，了解React Native的工作原理以及Galio如何帮助您更快地构建应用。本书的主要目的是让您熟悉React
    Native的工作原理，如何在项目中使用它，以及Galio如何方便并可能节省大量时间。
- en: I can understand this might not be an easy task at first but I strongly recommend
    going over each section as many times as needed. If there is something that might
    not be entirely easy to understand at first, you can always ask questions in places
    such as Stack Overflow or different subreddits. We'll look at places to ask for
    help in depth later in this book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我能理解一开始这可能不是一项容易的任务，但我强烈建议您尽可能多地查看每个部分。如果有一些东西一开始可能不太容易理解，您可以在Stack Overflow或不同的subreddits等地方提问。我们将在本书的后面深入了解寻求帮助的地方。
- en: At first, most programmers, myself included, thought cross-platform mobile programming
    frameworks might be much slower than the native ones. This was just a thought
    as we're going to see that React Native is a really good way of creating mobile
    apps as they're not at all that slow compared to the native ones.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，大多数程序员，包括我自己在内，都认为跨平台移动编程框架可能比本地框架慢得多。这只是一种想法，因为我们将看到React Native是创建移动应用的一种非常好的方式，因为它们与本地应用相比并不慢。
- en: As you'll understand soon enough, this book is strongly connected to Galio,
    which I believe to be one of the best-looking UI libraries out there. Galio is
    going to help us build a React Native app faster and with more style than we would've
    been able to do on our own.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 很快您就会明白，这本书与Galio紧密相连，我认为Galio是最好看的UI库之一。Galio将帮助我们更快地构建React Native应用，并且比我们自己能做的更有风格。
- en: You'll also learn lots of ways to develop your own UIs and how to start thinking
    outside of the box while developing your applications. This is important as it
    could make the difference between a successful app and an unsuccessful one.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将学习许多开发自己UI的方法，以及在开发应用程序时如何开始跳出思维定式。这很重要，因为这可能是成功应用和失败应用之间的区别。
- en: Learning the basic rules of design and programming is only the first step in
    the process of being a complete frontend developer. Learning how to break those
    rules will develop your skills even further.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 学习设计和编程的基本规则只是成为一个完整的前端开发人员过程中的第一步。学会如何打破这些规则将进一步发展你的技能。
- en: Sometimes, there are going to be tips showing up in places where they're most
    needed, and following them will benefit anyone trying to get into a programmer
    mindset.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，会有提示出现在最需要的地方，遵循这些提示将有利于任何试图进入程序员思维的人。
- en: At the end of this book, you'll find exercises and lots of tips on how to develop
    a more complex UI for your mobile applications. All these have a great purpose
    in mind and that is to develop a programming style while having a good base.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的结尾，你会找到练习和许多关于如何为你的移动应用程序开发更复杂的UI的提示。所有这些都有一个很好的目的，那就是在拥有一个良好的基础的同时发展编程风格。
- en: I strongly believe that by the end of this book, anyone should be able to create
    at least a basic cross-platform mobile app that'll serve as a good MVP for a personal
    project. Learning and experiencing all that is written in this book should play
    an important role not only for you as you learn to use React Native and Galio
    but also for you as a programmer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚信在读完本书之后，任何人都应该能够创建至少一个基本的跨平台移动应用程序，这将作为个人项目的一个很好的MVP。学习和体验本书中所写的所有内容不仅对你作为学习使用React
    Native和Galio的人很重要，对你作为一个程序员也很重要。
- en: 'This chapter will cover the following topics:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Why React Native?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择React Native？
- en: Galio – the best UI alternative
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Galio - 最好的UI替代品
- en: Configuring your React Native environment
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置你的React Native环境
- en: Creating your first React Native project
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个React Native项目
- en: Why React Native?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择React Native？
- en: So, you may be wondering, "Why React Native?". There are so many cross-platform
    frameworks available out there such as Flutter, Xamarin, and Cordava, to name
    a few, so we need to understand why React Native is a great choice for mobile
    application development.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你可能会想，“为什么选择React Native？”。市面上有很多跨平台框架，比如Flutter、Xamarin和Cordava等，所以我们需要了解为什么React
    Native是移动应用程序开发的一个很好的选择。
- en: You need to understand that there is no right choice. This is only based on
    the current context of the market and personal appreciation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要明白，没有绝对正确的选择。这只是基于当前市场环境和个人欣赏。
- en: Programming frameworks are like a painter's brush. A painter has multiple brushes,
    each of them with a different purpose. You need to understand as much as you can
    about the tool that you're using because the better the painter knows the brush,
    the better they can paint and bring their vision to life.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 编程框架就像画家的画笔。画家有多种画笔，每一种都有不同的用途。你需要尽可能多地了解你正在使用的工具，因为画家对画笔了解得越多，他们就能越好地绘画并将他们的愿景变为现实。
- en: You need to learn how to use React Native to develop cross-platform apps quickly
    and easily. So, let's go a bit more in depth into why React Native is such a great
    choice for app development.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要学会如何使用React Native快速轻松地开发跨平台应用程序。所以，让我们更深入地了解为什么React Native是开发应用程序的一个很好的选择。
- en: You only learn it once
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你只需要学习一次
- en: First of all, React Native is based on React, which means you only learn it
    once and you can develop everywhere. This is a really good way of expanding your
    skills. By learning React Native, you'll be ready to write React code for your
    website.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，React Native是基于React的，这意味着你只需要学习一次，就可以在任何地方开发。这是扩展你技能的一个非常好的方式。通过学习React
    Native，你将准备好为你的网站编写React代码。
- en: This should make it easy for you to understand why this is such a great choice.
    Imagine that you have already created an app. Your application is cool – people
    are starting to download it from the App Store or Google Play – but what would
    help even more is a landing page. Because you've already learned React Native,
    using your skills with React is going to be a piece of cake.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该让您很容易理解为什么这是一个如此好的选择。想象一下，您已经创建了一个应用程序。您的应用程序很酷 - 人们开始从App Store或Google Play下载它
    - 但更有帮助的是一个落地页。因为您已经学会了React Native，利用您的React技能将变得轻而易举。
- en: Bigger talent pool
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更大的人才储备
- en: Back in the old days of programming, when you had an app idea and you wanted
    to develop it, you had to search for a backend developer with some C# or Java
    skills, an iOS developer with Objective-C skills, an Android developer that had
    to know Java, and maybe even some web frontend developers for your application's
    website.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的编程时代，当您有一个应用程序想法并想要开发它时，您必须寻找具有一些C#或Java技能的后端开发人员，具有Objective-C技能的iOS开发人员，必须了解Java的Android开发人员，甚至可能还需要一些网页前端开发人员来开发应用程序的网站。
- en: This requires a lot of effort and a pretty big budget. At the end of the project,
    your idea might not work in today's market, and you will have lost a lot of time
    and money.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要大量的努力和相当大的预算。在项目结束时，您的想法可能在今天的市场上行不通，而您将浪费大量的时间和金钱。
- en: Now, all those specific jobs could be handled by JavaScript engineers – we have
    multiple alternatives to the native frameworks that work just as good but they're
    written in JavaScript, which is one of the most used languages right now. JavaScript
    developers are even more available on the market and transferring from one framework
    to another is easier than ever. By hiring a JavaScript developer, the budget is
    cut in half, the app is developed even faster, and they can help each other even
    though they have different jobs.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有这些特定的工作都可以由JavaScript工程师来处理 - 我们有多种替代方案来使用与原生框架一样好的JavaScript编写的框架，而JavaScript是目前最常用的语言之一。市场上甚至有更多的JavaScript开发人员，并且从一个框架转移到另一个框架比以往任何时候都更容易。通过雇佣JavaScript开发人员，预算减少了一半，应用程序开发速度更快，即使他们有不同的工作，他们也可以互相帮助。
- en: JavaScript developers can easily change teams. A backend developer can help
    a frontend developer or even the mobile app team. They can go and help out wherever
    you need more manpower to push the development even faster. This is especially
    valuable when one of your developers is missing due to resignation or illness.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript开发人员可以轻松更换团队。后端开发人员可以帮助前端开发人员，甚至移动应用团队。他们可以随时提供帮助，无论您在哪里需要更多的人手来加快开发速度。当您的开发人员因辞职或疾病而缺席时，这一点尤为重要。
- en: Having a bigger pool of people to choose from is a big plus for any app development.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有更多可供选择的人才对于任何应用程序开发来说都是一个巨大的优势。
- en: React's popularity
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React的流行
- en: 'You''d think that React''s popularity has nothing to do with React Native but
    actually, React and React Native are close in terms of writing code and methodology.
    My recommendation is to always look at Google Trends because it can help us understand
    whether a framework is popular or not:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为React的流行与React Native无关，但实际上，就编写代码和方法论而言，React和React Native是密切相关的。我的建议是始终关注Google趋势，因为它可以帮助我们了解一个框架是否受欢迎：
- en: '![Figure 1.1 – Google Trends showing the popularity of React at this moment'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1 - Google趋势显示了React目前的流行程度'
- en: '](Images/Figure_1.01_B17074.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/Figure_1.01_B17074.jpg)'
- en: Figure 1.1 – Google Trends showing the popularity of React at this moment
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 - Google趋势显示了React目前的流行程度
- en: React makes it easy for developers to build a great web UI, but the components-based
    approach also makes the app a lot easier to maintain. React Native brings all
    those advantages to the mobile app development universe.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: React使开发人员能够轻松构建出色的Web UI，但基于组件的方法也使应用程序更容易维护。React Native将所有这些优势带到了移动应用程序开发领域。
- en: So, what does this show us? There's a pretty big community of people searching
    for React, and React Native has one of the biggest and most active communities.
    For almost every little issue that you might encounter, there's someone that has
    already written an article or opened up an issue for it on GitHub. The community
    is really big on GitHub as well, which will be helpful as you can get in contact
    with more developers, ask for help regarding any of the libraries that you might
    be using inside your app, and get more help for any open source ideas that you
    might have, which could potentially help a lot of developers.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这给我们展示了什么？有一个相当庞大的React搜索社区，而React Native拥有一个最大且最活跃的社区之一。对于您可能遇到的几乎每一个小问题，都有人已经在GitHub上撰写了文章或为其提出了问题。GitHub上的社区也非常庞大，这将会很有帮助，因为您可以与更多开发人员联系，寻求关于您可能在应用程序中使用的任何库的帮助，并为您可能拥有的任何开源想法获得更多帮助，这可能会对许多开发人员有所帮助。
- en: I recommend that everyone contributes to open source projects because this will
    help develop your skills and expand your way of thinking like a programmer. The
    community is so helpful and friendly that you might find it hard to switch to
    any other framework as this seems like the best choice for most of your needs.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议每个人都参与开源项目，因为这将有助于发展您的技能，并扩展您作为程序员的思维方式。社区是如此乐于助人和友好，以至于您可能会发现很难转向任何其他框架，因为这似乎是大多数需求的最佳选择。
- en: Performance
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能
- en: React Native gets close to a native app from a performance standpoint but you
    have to use it in the right way. Technically, you have a JavaScript thread running,
    which is pretty slow compared to native code such as Kotlin for Android or Swift
    for iOS.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: React Native在性能方面接近原生应用，但您必须以正确的方式使用它。从技术上讲，您有一个运行缓慢的JavaScript线程，与Android的Kotlin或iOS的Swift等本地代码相比，速度相当慢。
- en: React Native shines because it creates a bridge between the JavaScript thread
    and the native one. It was designed to move the most expensive and powerful tasks
    such as rendering to the native side. This is used asynchronously so that the
    JavaScript thread will not have to wait on the native computations.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: React Native的闪光点在于它在JavaScript线程和本地线程之间创建了一个桥梁。它旨在将诸如渲染之类的最昂贵和强大的任务移动到本地端。这是异步使用的，因此JavaScript线程不必等待本地计算。
- en: Let's say the user presses a button – React Native will translate this into
    an event that JavaScript can handle. After that, by sending messages between a
    native platform such as iOS or Android and a JavaScript code base, the React Native
    bridge translates native events into ones that React components can understand
    and respond to.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户按下按钮-React Native将把这个转化为JavaScript可以处理的事件。之后，通过在本地平台（如iOS或Android）和JavaScript代码库之间发送消息，React
    Native桥将本地事件转换为React组件可以理解和响应的事件。
- en: There are certain challenges here, such as default components – which are built-in
    elements provided by React Native – not looking or responding the same on both
    platforms since there are so many platform-specific events. There's nothing to
    worry about though because this bridging architecture allows us to use all the
    existing native views from platforms, SDKs, and JavaScript libraries.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些挑战，比如默认组件-这些是React Native提供的内置元素-在两个平台上看起来或响应起来并不相同，因为有很多特定于平台的事件。不过不用担心，因为这种桥接架构允许我们使用来自平台、SDK和JavaScript库的所有现有本地视图。
- en: The language
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语言
- en: JavaScript was created as a client-side language. It was built to make websites
    interactive. If you think of a basic website layout, you have your HTML, which
    describes the basic content and the website's structure, and then you have your
    CSS, which styles the HTML and makes it pretty. This is a static website that
    doesn't do much, so we needed a programming language that could add functionality
    to our website and bring it to life. This is where JavaScript came into the game.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是作为客户端语言创建的。它被设计用来使网站具有交互性。如果你想象一个基本的网站布局，你有你的HTML，描述基本内容和网站结构，然后你有你的CSS，为HTML添加样式并使其美观。这是一个不做太多事情的静态网站，所以我们需要一种编程语言，可以为我们的网站添加功能并使其生动起来。这就是JavaScript进入游戏的地方。
- en: Time passed and people realized they could do a lot more with JavaScript. The
    most popular use of JavaScript is client side but ever since Node.js appeared
    in the programming scene, the language has evolved so much that this is not the
    case anymore. JavaScript is now an all-purpose programming language, meaning you
    can use it to build almost anything. You can even have typed JavaScript with TypeScript
    or Flow. The support inside code editors got a lot better as well.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 时间过去了，人们意识到他们可以用JavaScript做更多的事情。JavaScript最流行的用途是客户端，但自从Node.js出现在编程场景中以来，这种语言已经发展得如此之多，以至于这不再是情况。JavaScript现在是一种多用途的编程语言，意味着你可以用它来构建几乎任何东西。你甚至可以使用TypeScript或Flow来获得类型化的JavaScript。代码编辑器内的支持也变得更好了。
- en: Having said all this, React Native uses JavaScript as its main programming language.
    *As we learn more, we'll see that React Native can also use native code to run
    faster and do better computations*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，React Native使用JavaScript作为其主要编程语言。*随着我们的学习，我们会发现React Native也可以使用原生代码来运行得更快，做更好的计算*。
- en: Stack Overflow (one of the biggest communities of programmers) does a survey
    each year where they try to understand more about developers and the people using
    their platform. You can ask any developer about their platform and almost anyone
    could tell you they've browsed it at least once. Their 2020 study showed that
    almost 70% of their user base was formed of professional developers using JavaScript.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Stack Overflow（程序员最大的社区之一）每年都会进行一项调查，试图更多地了解开发者和使用他们平台的人。你可以问任何开发者关于他们的平台，几乎任何人都会告诉你他们至少浏览过一次。他们2020年的研究显示，几乎70%的用户是使用JavaScript的专业开发者。
- en: Being such a versatile language, learning it for React Native or another framework
    can only help you expand your territory as a programmer. The fact that React Native
    uses it is a big plus as it shows how easy this allows you to move between technologies.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种多才多艺的语言，学习它用于React Native或其他框架只会帮助你扩展作为程序员的领域。React Native使用它是一个很大的优势，因为它显示了这样做可以让你在不同技术之间轻松移动。
- en: You can learn more about Stack Overflow statistics regarding the 2020 study
    by going to [https://insights.stackoverflow.com/survey/2020](https://insights.stackoverflow.com/survey/2020).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问[https://insights.stackoverflow.com/survey/2020](https://insights.stackoverflow.com/survey/2020)了解更多关于Stack
    Overflow关于2020年调查的统计数据。
- en: Drawing conclusions
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 得出结论
- en: After reading all this about React Native, we need to understand that even though
    React Native is not exactly as fast as a native app, it can be almost as fast
    as one. And if we throw in the fact that the language has so many opportunities
    for us developers and also that the community is so strong and friendly, we might
    see React Native as one of the best frameworks for cross-platform mobile app development.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读了关于React Native的所有内容之后，我们需要明白，尽管React Native并不像原生应用那样快速，但它几乎可以和原生应用一样快。而且，考虑到这种语言对开发者有如此多的机会，以及社区如此强大友好，我们可能会将React
    Native视为跨平台移动应用开发的最佳框架之一。
- en: To pick the library that suits your needs, you need to take what's the most
    important to you into account. I hope you know a little bit more about React Native
    and that you're confident that this framework is a good choice for **you**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了选择适合你需求的库，你需要考虑对你来说最重要的是什么。我希望你对React Native有了一些了解，并且对这个框架是一个好选择有信心。
- en: Next, we'll understand more about what a UI library is and how Galio comes in
    like a great sidekick to help us out when we're writing our code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更多地了解UI库是什么，以及Galio是如何像一个伟大的助手一样帮助我们编写代码的。
- en: Galio – the best UI alternative
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Galio - 最佳UI替代品
- en: So, you've learned a thing or two about how React Native works and now you're
    wondering how Galio can help you. Well, first of all, what exactly is Galio?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你已经学会了一些关于React Native的工作原理，现在你想知道Galio如何帮助你。首先，Galio到底是什么？
- en: To put it simply, Galio is a React Native UI library, so it's a collection of
    resources meant to help developers write code faster and easier. The thing is...
    React Native doesn't have that many components. We'll come back to what exactly
    a component is later in this book, but for now, just think of them as puzzle pieces.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Galio是一个React Native UI库，因此它是一组资源，旨在帮助开发人员更快、更容易地编写代码。问题是... React Native没有那么多组件。我们将在本书的后面回到组件的具体含义，但现在，只需将它们视为拼图块。
- en: React Native has a certain amount of puzzle pieces, each of which is as simple
    as possible. Galio comes in as a wrapper around those puzzle pieces and adds a
    bit of color and functionality. Sometimes, you can even find different pieces
    that are built by combining more basic pieces into a really big one for specific
    reasons.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: React Native有一定数量的拼图块，每个拼图块尽可能简单。Galio作为这些拼图块的包装器，添加了一些颜色和功能。有时，甚至可以找到通过将更基本的拼图块组合成一个非常大的拼图块的不同拼图块，出于特定原因。
- en: Now, let's go over the reasons why Galio might be the best UI library for you
    in your cross-platform mobile development journey.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看为什么Galio可能是你在跨平台移动开发旅程中最好的UI库。
- en: Time-effective
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节省时间
- en: All right, too many metaphors. The thing is, React Native only has basic-looking
    components, which makes developers build their own. This is time-consuming as
    you would always have to build new components for your new app.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，比喻太多了。事实是，React Native只有基本外观的组件，这使开发人员需要构建自己的组件。这是耗时的，因为你总是需要为你的新应用构建新组件。
- en: This is where Galio comes in handy! Packed with a lot of already beautiful components,
    it eases the pain of creating your own all the time.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Galio派上用场的地方！它拥有许多已经美丽的组件，减轻了一直创建自己的痛苦。
- en: Also, all the components are easier to customize and still fit the whole design
    layout, without putting too much pressure on the developer to think about how
    to do it and where to start. The process of customizing a component from Galio
    is straightforward and usually, it revolves around using props, which make the
    whole thing a lot more readable.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所有组件都更容易定制，仍然适合整个设计布局，而不会给开发人员施加太大压力，让他们考虑如何做以及从哪里开始。从Galio定制组件的过程很简单，通常围绕着使用props，这使整个过程更加可读。
- en: I know that words such as "component" and "props" are completely or maybe just
    somewhat alien to you right now, but all that matters is that they save you a
    lot of time. We'll learn more about these keywords shortly, but we need to understand
    a bit of the overall image of what all these technologies mean in the grand scheme
    of things.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道像“组件”和“props”这样的词对你来说完全或可能有些陌生，但重要的是它们可以节省你大量的时间。我们很快就会了解更多关于这些关键词，但我们需要了解一些关于所有这些技术在整体方案中意味着什么。
- en: Building an app with Galio is usually more about the way you choose to create
    your layout than it is about actually programming the UI. It is using a direct
    way of creating a mobile screen by placing each component under the previous one.
    This allows us to be more efficient and waste as little time as possible as we
    code and think about what the final screen should look like.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Galio构建应用通常更多地取决于您选择创建布局的方式，而不是实际编程UI。它是通过直接放置每个组件在前一个组件下面的方式来创建移动屏幕。这使我们能够更高效，尽可能少地浪费时间编写代码并思考最终屏幕的样子。
- en: 'The following diagram shows the basic program structure you can create using
    the pieces of the puzzle we were discussing:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了您可以使用我们讨论的拼图块创建的基本程序结构：
- en: '![Figure 1.2 – Representation of how adding more components helps build a mobile
    screen'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2 - 添加更多组件如何帮助构建移动屏幕的表示'
- en: '](Images/Figure_1.02_B17074.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/Figure_1.02_B17074.jpg)'
- en: Figure 1.2 – Representation of how adding more components helps build a mobile
    screen
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 - 添加更多组件如何帮助构建移动屏幕的表示
- en: This is a great way of thinking because it makes you understand some of the
    best principles of atomic design. It also creates a more organized code base that
    you can expand into a more complex and fuller app.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种很好的思考方式，因为它让您了解了一些最佳的原子设计原则。它还创建了一个更有组织的代码库，您可以将其扩展为更复杂和更完整的应用程序。
- en: It's really beautiful
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这真的很美
- en: The fact that Galio comes already packed with a design system in mind means
    that all the components will follow the same design principles, so there's never
    going to be any discrepancies between the components.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Galio已经预先设计了一个设计系统，这意味着所有组件都将遵循相同的设计原则，因此组件之间永远不会有任何差异。
- en: A consistent design is what makes an app complete. A consistent design will
    help the user understand your app flow better, all the symbols that you wish to
    incorporate in your app, and how to use it. It's all about being consistent with
    your buttons, texts, and design.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一致的设计是使应用完整的关键。一致的设计将帮助用户更好地理解您的应用流程，您希望在应用中引入的所有符号以及如何使用它。这一切都与您的按钮、文本和设计保持一致有关。
- en: You might not necessarily like the colors at first, which is OK because you
    can always change them easily with the help of `<GalioProvider>`. We will look
    at this later in this book.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 起初您可能不喜欢颜色，这没关系，因为您可以借助`<GalioProvider>`轻松更改它们。我们稍后会在本书中讨论这一点。
- en: Right now, we've learned about why React Native is such a great choice and why
    Galio is a great UI library for us to start building apps. The next step is to
    understand how to configure a good environment so that we can start building cross-platform
    mobile apps.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经了解了为什么React Native是一个如此好的选择，以及为什么Galio是一个很好的UI库，让我们开始构建应用。下一步是了解如何配置一个良好的环境，以便我们可以开始构建跨平台移动应用。
- en: Configuring your React Native environment
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置您的React Native环境
- en: 'There are two things that we need to know about: **Expo** and **the React Native
    CLI**.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有两件事我们需要了解：**Expo**和**React Native CLI**。
- en: Both of them are easy to install and we'll go over both of them to make sure
    we cover all possible ground. I recommend not skipping over this part as it will
    help you make a good choice when you start developing your mobile project.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都很容易安装，我们将介绍它们，以确保我们覆盖所有可能的情况。我建议不要跳过这部分，因为它将帮助您在开始开发移动项目时做出一个好选择。
- en: Things are going to be much easier to install on macOS compared to Windows as
    macOS is a UNIX-based system, so the terminal is a lot more powerful. But worry
    not – we will solve this problem for Windows as well.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上安装东西要比在Windows上容易得多，因为macOS是基于UNIX的系统，所以终端更加强大。但不用担心 - 我们也会解决Windows上的这个问题。
- en: We have some requirements we must consider before we move on. These are going
    to help us create a good environment for both Expo and the React Native CLI, and
    also for JavaScript programming in general.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们必须考虑一些要求。这些将帮助我们为Expo和React Native CLI以及一般的JavaScript编程创建一个良好的环境。
- en: 'We''ll need the following technologies installed for either system:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是哪个系统，我们都需要安装以下技术：
- en: Homebrew – macOS only
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Homebrew - 仅限macOS
- en: Chocolatey – Windows only
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chocolatey - 仅限Windows
- en: Node.js
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js
- en: Text Editor
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: Android Studio
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio
- en: Xcode – macOS only
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode - 仅限macOS
- en: We'll start by installing Node.js, which is one of the most important technologies
    we need for JavaScript to run outside the browser. Node.js is built on Chrome's
    V8 JavaScript engine, which means you would be able to run any JavaScript code
    that runs on the latest Chrome version (the web browser).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从安装Node.js开始，这是我们在浏览器之外运行JavaScript所需的最重要的技术之一。Node.js是建立在Chrome的V8 JavaScript引擎上的，这意味着您可以运行在最新Chrome版本（Web浏览器）上运行的任何JavaScript代码。
- en: The recommended way of installing Node.js depends on your operating system.
    For macOS users, the best way would be by using Homebrew, while for Windows users,
    you would use Chocolatey. Homebrew and Chocolatey are package managers that enable
    you to install different packages such as Node.js easier and faster, all via the
    command line or terminal. You can also install it via the official website at
    [https://nodejs.org](https://nodejs.org), but we're going to use Homebrew or Chocolatey
    in this book.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Node.js的推荐方式取决于您的操作系统。对于macOS用户，最好的方式是使用Homebrew，而对于Windows用户，您将使用Chocolatey。Homebrew和Chocolatey是包管理器，可以让您更轻松，更快速地安装不同的软件包，如Node.js，都可以通过命令行或终端进行。您也可以通过官方网站[https://nodejs.org](https://nodejs.org)安装它，但是在本书中我们将使用Homebrew或Chocolatey。
- en: Homebrew
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Homebrew
- en: For macOS, we have Homebrew, which is easy to install. You can find more information
    on it on their official website at [https://brew.sh](https://brew.sh).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS，我们有Homebrew，它很容易安装。您可以在他们的官方网站[https://brew.sh](https://brew.sh)上找到更多信息。
- en: 'To install it, you should open **Terminal** and write the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它，您应该打开**终端**并输入以下命令：
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After writing the command, press *Enter*. More information regarding everything
    that is going to be installed will appear; just press *Enter* again and you should
    be ready to go.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入命令后，按*Enter*。将会出现有关即将安装的所有内容的更多信息；只需再次按*Enter*，您就准备好了。
- en: Chocolatey
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chocolatey
- en: For Windows, we have Chocolatey, which is a bit more complicated than Homebrew
    to install but by following the steps here, you should be all set. You can find
    out more about Chocolatey by going to their official website at [https://chocolatey.org](https://chocolatey.org).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，我们有Chocolatey，它比Homebrew更复杂，但是按照这里的步骤，您应该已经准备好了。您可以通过访问它们的官方网站[https://chocolatey.org](https://chocolatey.org)了解更多关于Chocolatey的信息。
- en: First of all, we need to use PowerShell with administrative rights. All you
    have to do to access it is to press the *Windows logo + X* on your keyboard. A
    new menu will appear in the bottom-left corner of your screen. Here, select **Windows
    Powershell (Admin)**. A new window will open.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要以管理员权限使用PowerShell。要访问它，您只需在键盘上按*Windows标志+X*。一个新菜单将出现在屏幕的左下角。在这里，选择**Windows
    Powershell（管理员）**。一个新窗口将打开。
- en: 'First, you need to verify that `Get-ExecutionPolicy` is not Restricted, so
    write the following in PowerShell:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要验证`Get-ExecutionPolicy`是否不受限制，因此在PowerShell中写入以下内容：
- en: '[PRE1]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If it returns `Restricted`, then you need to run the following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回`Restricted`，那么您需要运行以下命令：
- en: '[PRE2]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, you''re all set to run the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经准备好运行以下命令：
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, wait for a few minutes for everything to be installed. If you didn't encounter
    any errors during installation, just type `choco` to return your Chocolatey version.
    If it does return it, then you're all set and ready to go.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，等待几分钟让一切都安装好。如果在安装过程中没有遇到任何错误，只需输入`choco`即可返回Chocolatey版本。如果返回了版本号，那么你就已经准备好了。
- en: 'All we need to do right now is install Node.js so that we can learn about Expo
    and the React Native CLI. Having installed Homebrew or Chocolatey makes this easy
    as all you have to do is write the following commands and Node.js will start installing:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的就是安装Node.js，这样我们就可以学习Expo和React Native CLI了。安装了Homebrew或Chocolatey后，只需输入以下命令，Node.js就会开始安装：
- en: 'Use the following command on macOS:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS上使用以下命令：
- en: '[PRE4]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Use the following command on Windows:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上使用以下命令：
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Congratulations! We're now ready to move forward! With that, we have installed
    Node.js. Before setting up our environment, let's discuss text editors for a second
    – I promise you it won't take long.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们现在已经准备好继续前进了！有了这个，我们已经安装了Node.js。在设置环境之前，让我们讨论一下文本编辑器-我保证不会花太长时间。
- en: I bet you're thinking *Wait, did he say we can write code in a Word document?*.
    Well, not really. Microsoft Word is not a plain text editor, but you can use something
    such as Notepad to write code. Just because we can use Notepad doesn't mean we
    will use it; it doesn't look very professional, does it?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢打赌你现在在想，“等等，他说我们可以在Word文档中写代码吗？”其实不是。Microsoft Word不是一个纯文本编辑器，但你可以使用诸如Notepad之类的东西来写代码。仅仅因为我们可以使用Notepad并不意味着我们会使用它；它看起来并不太专业，对吧？
- en: The type of text editor we're going to use is going to have cool features such
    as a color scheme for our code syntax, as well as different add-ons that will
    help us write code faster and prettier.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的文本编辑器将具有一些很酷的功能，比如代码语法的颜色方案，以及将帮助我们更快更漂亮地编写代码的不同附加组件。
- en: There are many different free text editors out there, including Sublime, Atom,
    Visual Studio Code, Notepad++, and Brackets. They're all equally good and I recommend
    that you download at least two or three of them and check them out. My personal
    preference is Visual Studio Code, and I am going to use it throughout this book.
    You don't need to use the same text editor if you don't like the way it looks
    because you can follow this book by using any of the aforementioned editors.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的免费文本编辑器，包括Sublime、Atom、Visual Studio Code、Notepad++和Brackets。它们都同样优秀，我建议你至少下载两三个来试试。我个人偏好Visual
    Studio Code，并且在本书中将一直使用它。如果你不喜欢某个文本编辑器的外观，你不需要使用相同的文本编辑器，因为你可以使用上述任何一个编辑器来跟随本书。
- en: You can download Visual Studio Code (or just VSCode) from [https://code.visualstudio.com/](https://code.visualstudio.com/).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[https://code.visualstudio.com/](https://code.visualstudio.com/)下载Visual
    Studio Code（或简称VSCode）。
- en: Now that we have got some necessities out of the way, it is time to move on
    and learn about Expo and the React Native CLI. Both of them can be used to get
    to the same outcome – they're just different ways of creating a React Native app
    and we'll try to understand them as much as we can. Knowing everything about them
    is going to help us choose the right one for us and our app.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经解决了一些必需品，是时候继续学习Expo和React Native CLI了。它们都可以用来实现相同的结果-它们只是创建React Native应用的不同方式，我们将尽量理解它们。了解它们的一切将帮助我们选择适合我们和我们的应用的正确方式。
- en: The React Native CLI
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React Native CLI
- en: The React Native CLI is the official and first method of creating a React Native
    project. It is usually harder to configure and it takes a lot more time than Expo,
    but it is worth it. After all, you need a simulator to test your app on different
    phones. I recommend not skipping this section.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: React Native CLI是创建React Native项目的官方和首选方法。通常比Expo更难配置，需要更多时间，但是很值得。毕竟，您需要模拟器来测试您的应用在不同手机上的情况。我建议不要跳过这一部分。
- en: macOS
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS
- en: A good thing about having macOS is the fact that you can simulate an iPhone
    and see what your project looks like on different Apple technologies. This is
    something that you can't do on Windows but Android works on both, so macOS has
    an advantage in being able to simulate all types of platforms.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有macOS的一个好处是您可以模拟iPhone，并查看您的项目在不同的Apple技术上的外观。这是在Windows上无法做到的，但Android可以在两者上运行，因此macOS在能够模拟所有类型的平台方面具有优势。
- en: 'We should get going and install all of the necessary dependencies; open Terminal
    and write the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该开始并安装所有必要的依赖项；打开终端并写入以下内容：
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Watchman is a tool developed by Facebook to watch the changes inside the filesystem.
    It also offers better performance.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Watchman是Facebook开发的一个工具，用于监视文件系统内的更改。它还提供更好的性能。
- en: Now, you need to install Xcode. Go ahead and open the Mac App Store, search
    for Xcode, and click on **Install**. This will also install the iOS Simulator
    and the rest of the tools we need to build our iOS apps. Your Xcode version needs
    to be at least 9.4 for React Native to work with it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您需要安装Xcode。前往Mac App Store，搜索Xcode，然后点击**安装**。这也将安装iOS模拟器和构建iOS应用所需的其他工具。您的Xcode版本至少需要是9.4才能与React
    Native一起使用。
- en: 'Now, we need the Xcode Command Line Tools package. Once Xcode has finished
    downloading and installing, open it up and go to **Preferences** (it''s under
    the Xcode menu in the navbar; alternatively, just press *Cmd + ,*). A new window
    should open. Go to **Locations** and install Command Line Tools by selecting the
    most recent version from the dropdown:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要安装Xcode命令行工具包。一旦Xcode下载和安装完成，打开它，然后转到**首选项**（在导航栏的Xcode菜单下; 或者，只需按*Cmd
    + ,*）。应该会打开一个新窗口。转到**位置**，通过从下拉菜单中选择最新版本来安装命令行工具：
- en: '![Figure 1.3 – Preferences window in Xcode'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.3 - Xcode中的首选项窗口'
- en: '](Images/Figure_1.03_B17074.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: Figure 1.3 – Preferences window in Xcode
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 - Xcode中的首选项窗口
- en: Now, go to the **Components** tab and install the latest simulators that you
    wish to use.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到**组件**选项卡，并安装您希望使用的最新模拟器。
- en: Important Note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: There is a simulator for each iOS version supported by Apple. You should try
    to install the last two major versions since your app users might always be on
    a previous iOS version.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果支持的每个iOS版本都有一个模拟器。您应该尝试安装最近的两个主要版本，因为您的应用用户可能始终使用较早的iOS版本。
- en: 'All you need to do now is install CocoaPods by writing the following in Terminal:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您只需要通过在终端中写入以下内容来安装CocoaPods：
- en: '[PRE7]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is a Ruby gem that manages dependencies for your Xcode projects.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个Ruby gem，用于管理Xcode项目的依赖关系。
- en: With that, you're all set to create your first project on macOS! We'll do this
    in just a bit!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，您就可以在macOS上创建您的第一个项目了！我们马上就会做到！
- en: Windows
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows
- en: As we know, we can't install any simulators for iOS on Windows, so we might
    as well just install the Android one.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，我们无法在Windows上安装任何iOS模拟器，所以我们不妨只安装Android模拟器。
- en: 'We have already installed Node.js, so all that''s left to do is install JDK
    by going to our admin PowerShell (we explained how to open it earlier when we
    installed Node.js and Chocolatey). Once you''ve opened it, write the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经安装了Node.js，现在剩下的就是通过转到我们的管理员PowerShell（我们在安装Node.js和Chocolatey时解释了如何打开它）来安装JDK。一旦打开它，写入以下内容：
- en: '[PRE8]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you already have JDK installed, make sure it's at least v8.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了JDK，请确保至少是v8。
- en: Now, it's time to install our Android development environment, which can be
    a bit tedious. However, it's worth it as we're going to be able to run our React
    Native apps right on our virtual Android simulator.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候安装我们的Android开发环境了，这可能有点乏味。然而，这是值得的，因为我们将能够在虚拟Android模拟器上运行我们的React Native应用程序。
- en: Go ahead and download Android Studio by going to [https://developer.android.com/studio](https://developer.android.com/studio).
    Once it has finished installing, start Android Studio. Once you've opened it,
    choose the theme that you like and all the preferences that are good for your
    computer. At one point, the **SDK Components Setup** page will appear. Make sure
    you have selected the **Android SDK**, **Android SDK Platform**, and **Android
    Virtual Device** checkboxes.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://developer.android.com/studio](https://developer.android.com/studio)下载Android
    Studio。安装完成后，启动Android Studio。打开后，选择您喜欢的主题和适合您计算机的所有首选项。在某个时候，**SDK组件设置**页面将出现。确保已选择了**Android
    SDK**、**Android SDK平台**和**Android虚拟设备**复选框。
- en: 'Once the installation has been completed, it is time to move on. Android Studio
    is always installing the latest Android SDK by default. However, building a React
    Native app with native Android code requires the **Android 10 (Q) SDK**. To install
    it, open Android Studio, click on **Configure** at the bottom-right corner of
    the window, and select **SDK Manager**:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，是时候继续了。Android Studio默认安装最新的Android SDK。然而，使用本地Android代码构建React Native应用程序需要**Android
    10 (Q) SDK**。要安装它，打开Android Studio，点击窗口右下角的**配置**，然后选择**SDK Manager**：
- en: '![Figure 1.4 – Android Studio and the positioning of the buttons'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4 – Android Studio和按钮的位置'
- en: '](Images/Figure_1.04_B17074.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/Figure_1.04_B17074.jpg)'
- en: Figure 1.4 – Android Studio and the positioning of the buttons
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – Android Studio和按钮的位置
- en: 'Now, select the **SDK Platforms** tab and check the box in the bottom-right
    corner that states **Show package details**. Look for and expand Android 10 (Q)
    and make sure the following are checked:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择**SDK平台**选项卡，并在右下角的复选框中选中**显示包详细信息**。查找并展开Android 10 (Q)，并确保以下内容已被选中：
- en: '**Android SDK Platform 29**'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android SDK平台29**'
- en: '**Intel x86 Atom_64 System Image or Google APIs Intel x86 Atom System Image**'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Intel x86 Atom_64系统映像或Google APIs Intel x86 Atom系统映像**'
- en: The next thing you should select is the **SDK Tools** tab and check the box
    next to **Show Package details**. Look for **Android SDK Build-Tools** and select
    **29.0.2**.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您应该选择**SDK Tools**选项卡，并选中**显示包详细信息**旁边的复选框。查找**Android SDK构建工具**，并选择**29.0.2**。
- en: Click **Apply** and download all the necessary files.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**应用**并下载所有必要的文件。
- en: 'Now, it''s time to configure the `ANDROID_HOME` environment variable so that
    we can use native code. Open **Control Panel**, click on **User Accounts**, and
    then on **User Accounts** once more. On the left-hand side, you''ll find **Change
    my environment variables**; click on it. Now, click on **New…** and write the
    following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候配置`ANDROID_HOME`环境变量，以便我们可以使用本地代码。打开**控制面板**，点击**用户帐户**，然后再次点击**用户帐户**。在左侧，您会找到**更改我的环境变量**；点击它。现在，点击**新建…**并写入以下内容：
- en: '**Variable name**: `ANDROID_HOME`.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量名**：`ANDROID_HOME`。'
- en: '**Variable value**: `C:\Users\{name}\AppData\Local\Android\Sdk`, where `{name}`
    is the username of your PC:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量值**：`C:\Users\{name}\AppData\Local\Android\Sdk`，其中`{name}`是您的PC用户名：'
- en: '![Figure 1.5 – Windows showing my user variable'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.5 – Windows显示我的用户变量'
- en: '](Images/Figure_1.05_B17074.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/Figure_1.05_B17074.jpg)'
- en: Figure 1.5 – Windows showing my user variable
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – Windows显示我的用户变量
- en: 'To check whether the environment variable has been loaded, go to your PowerShell
    environment and write the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 检查环境变量是否已加载，转到PowerShell环境并输入以下内容：
- en: '[PRE9]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You should see a list, and `ANDROID_HOME` should be part of it.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个列表，其中`ANDROID_HOME`应该是其中的一部分。
- en: 'After that, we need to add `platform-tools` to **Path**. We can do that by
    going to **Control Panel**, clicking **User Accounts**, and then clicking on **User
    Accounts** once more. Click on **Change my environment variables** and look for
    **Path**. Select **Path** and click **Edit**. A new window will appear where we
    can click **New**. Now, use the same variable value that we did previously but
    this time, go into the `Sdk` folder – more precisely, the `platform-tools` folder:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要将`platform-tools`添加到**Path**中。我们可以通过转到**控制面板**，点击**用户帐户**，然后再次点击**用户帐户**来实现这一点。点击**更改我的环境变量**，然后查找**Path**。选择**Path**并点击**编辑**。一个新窗口将出现，我们可以点击**新建**。现在，使用与之前相同的变量值，但这次进入`Sdk`文件夹
    - 更确切地说是`platform-tools`文件夹：
- en: '`C:\Users\{name}\AppData\Local\Android\Sdk\platform-tools`'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`C:\Users\{name}\AppData\Local\Android\Sdk\platform-tools`'
- en: We're now ready to start developing React Native apps on Windows!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好在Windows上开始开发React Native应用程序了！
- en: Expo
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Expo
- en: Expo is the easiest way to start a React Native project for a beginner. It comes
    packed with a big set of tools built for React Native, but we're not interested
    in that right now. We're only interested in the fact that Expo can get you up
    and running in a few minutes and it doesn't require you to have a simulator installed,
    so you can play with your app in a matter of minutes.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Expo是初学者开始React Native项目的最简单方式。它内置了一套为React Native构建的大量工具，但我们现在对此不感兴趣。我们只对Expo可以在几分钟内让您上手并且不需要您安装模拟器感兴趣，因此您可以在几分钟内玩转您的应用程序。
- en: They also came up with something called Snack ([https://snack.expo.io/](https://snack.expo.io/)),
    which is helpful if you wish to try out different code ideas directly in your
    browser! This is cool as you don't even need to start a project if just want to
    sketch something quickly.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 他们还推出了一个名为Snack（[https://snack.expo.io/](https://snack.expo.io/)）的东西，如果您希望直接在浏览器中尝试不同的代码想法，这将非常有帮助！这很酷，因为即使只是想快速草拟一些东西，您甚至都不需要启动一个项目。
- en: 'Let''s install it and see whether this is as easy as I make it out to be. Open
    a terminal or command line and write the following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装它，看看这是否像我所说的那样简单。打开终端或命令行并输入以下内容：
- en: '[PRE10]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Expo is now ready to go! Easy, right?
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Expo现在已经准备就绪！很简单，对吧？
- en: Ready to go even further?
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备进一步前进了吗？
- en: Now that we've installed all the necessary technologies, we're ready to create
    our own React Native project and create some awesome apps!
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有必要的技术，我们准备创建自己的React Native项目并创建一些很棒的应用程序！
- en: But first, let's understand the difference between the React Native CLI and
    Expo. Previously, I told you not to skip the React Native CLI part, even though
    it's a lot bigger than the Expo one. That's because we need to install Xcode or
    Android Studio to have some control over our app directly from our PC.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们了解React Native CLI和Expo之间的区别。之前，我告诉过您不要跳过React Native CLI部分，即使它比Expo大得多。这是因为我们需要安装Xcode或Android
    Studio，以便直接从我们的PC上控制我们的应用程序。
- en: We haven't created a project with either the React Native CLI or Expo yet because
    they're both created differently. However, we've installed the requirements for
    both of them. Creating a project with the React Native CLI leaves the developer
    with the job of fully creating an app from 0\. You have complete control over
    the app and there's nothing but your imagination that can limit what you can do.
    You can even use native code – Kotlin/Java for Android or Swift/Objective-C for
    iOS – and create your own completely native components. This is all very advanced,
    though, and we don't need it.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有使用React Native CLI或Expo创建项目，因为它们都是以不同的方式创建的。但是，我们已经安装了它们的要求。使用React Native
    CLI创建项目会让开发人员完全从0开始创建应用程序。您对应用程序拥有完全的控制权，没有任何东西能够限制您的想象力。您甚至可以使用本地代码 - Kotlin/Java用于Android或Swift/Objective-C用于iOS
    - 并创建自己完全本地的组件。不过，这都是非常高级的，我们并不需要它。
- en: Expo comes packed with a lot of tools for people who want to create a fast and
    powerful app, without the struggle of having to think about all the little details
    regarding how the app works and connects with each specific platform.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Expo内置了许多工具，适合那些想要创建快速强大的应用程序，而不必费心考虑应用程序如何运行并与特定平台连接的所有细节的人。
- en: For this reason, we'll use Expo to create the projects in this book.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用Expo来创建本书中的项目。
- en: Creating your first React Native project
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个React Native项目
- en: We're ready to go! Let's open up a terminal and head right into it!
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备好了！让我们打开一个终端，直接开始吧！
- en: Once the terminal is open, just move to your `Desktop` folder or any folder
    you wish to create your project in. You can move between folders by using the
    `cd` command. So, just by writing `cd Desktop`, we've arrived at the **Desktop**
    directory and we're ready to create our Expo project.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦终端打开，只需移动到您的`Desktop`文件夹或任何您希望在其中创建项目的文件夹。您可以使用`cd`命令在文件夹之间移动。因此，只需输入`cd Desktop`，我们就到达了**Desktop**目录，准备创建我们的Expo项目。
- en: 'We can create a new React Native project with Expo by writing the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式使用Expo创建一个新的React Native项目：
- en: '[PRE11]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Upon pressing *Enter*, Expo tells us we can choose between a multitude of templates.
    The biggest two categories are **Managed workflow** and **Bare workflow**:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Enter*键后，Expo告诉我们可以在多种模板之间进行选择。最大的两个类别是**托管工作流程**和**原始工作流程**：
- en: '![Figure 1.6 – A representation of what you will see after initializing a project'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.6 - 初始化项目后您将看到的表示'
- en: '](Images/Figure_1.06_B17074.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/Figure_1.06_B17074.jpg)'
- en: Figure 1.6 – A representation of what you will see after initializing a project
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 - 初始化项目后您将看到的表示
- en: 'We''ll explain what both are in a few seconds. For now, pick **blank** under
    **Managed workflow**. Wait a few seconds and you''ll see a message in your terminal
    stating the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在几秒钟内解释这两者是什么。现在，在**托管工作流程**下选择**空白**。等待几秒钟，您将在终端中看到以下消息：
- en: '[PRE12]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we''re ready to start it. Write the following command in the terminal;
    this will move us into our project''s folder:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备开始了。在终端中输入以下命令；这将把我们移动到我们项目的文件夹中：
- en: '[PRE13]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now that we're here, let's understand how each type of template works so that
    we can start playing with our first React Native app.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们在这里，让我们了解每种类型的模板是如何工作的，这样我们就可以开始玩我们的第一个React Native应用程序了。
- en: Managed workflow
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管工作流程
- en: The managed workflow tries to take care of almost all the complex actions you
    would have to do. This is usually for complete beginners who don't want to complicate
    things with Xcode or Android Studio, which is exactly why we've started by creating
    a project with this type of workflow. You can change all the app's information,
    such as its icon or splash screen, through `app.json` and have direct, easy access
    to different services such as push notifications.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 托管工作流程试图处理几乎所有你必须做的复杂操作。这通常适用于完全的初学者，他们不想用Xcode或Android Studio复杂化事情，这也正是我们开始创建这种类型工作流程的原因。你可以通过
    `app.json` 更改应用的所有信息，比如它的图标或启动画面，并且可以直接、轻松地访问不同的服务，比如推送通知。
- en: This workflow has some limitations, though. Let's say you want to use a specific
    device capability that the Expo SDK doesn't offer through their API. This means
    that you would need to run `eject` and `expo-cli` will do all the work and transfer
    you to the **bare workflow**.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种工作流程也有一些局限性。假设你想使用Expo SDK没有通过其API提供的特定设备功能。这意味着你需要运行 `eject`，`expo-cli`
    将会做所有的工作并将你转移到**裸工作流程**。
- en: Bare workflow
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 裸工作流程
- en: The bare workflow presents the developer with complete control over the app.
    However, this comes with all the complexity of having to take care of every little
    detail regarding your app. Now, the ability to easily configure `app.json` has
    disappeared and you're left with only Expo SDK installed and no pre-configuration
    done.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 裸工作流程为开发者提供了对应用的完全控制。然而，这也伴随着需要处理关于应用的每一个细节的复杂性。现在，轻松配置 `app.json` 的能力已经消失，你只剩下安装了Expo
    SDK并且没有进行预配置。
- en: This allows you to use native code and manage your dependencies however you
    want. You might be wondering, "*Well… isn't this the same thing as using the React
    Native CLI?*". Well, not really, because you get instant access to the Expo SDK
    and Expo framework, which within itself represents a big plus for a developer
    as it still eases your development process.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这使你可以使用本地代码并以任何你想要的方式管理你的依赖。你可能会想，“*嗯...这不就是使用React Native CLI一样吗？*”。嗯，其实不是，因为你可以立即访问Expo
    SDK和Expo框架，这本身对于开发者来说是一个巨大的优势，因为它仍然简化了你的开发过程。
- en: Opening our project files
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开我们的项目文件
- en: Now that we've understood what each template does and why we chose the managed
    workflow, let's see what the code looks like.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了每个模板的作用以及为什么选择了托管工作流程，让我们看看代码是什么样子的。
- en: Remember when we discussed text editors? Go ahead and open the text editor you
    chose. I'll use VSCode as I prefer the design compared to the others.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们讨论过文本编辑器吗？继续打开你选择的文本编辑器。我会使用VSCode，因为我更喜欢它的设计。
- en: Click on **File** | **Open Folder** and search for the project's folder. Mine's
    in the `Desktop` folder. Opening it lets us see all the files and folders inside
    our project.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**文件** | **打开文件夹**，然后搜索项目文件夹。我的在`桌面`文件夹中。打开它让我们看到项目中所有的文件和文件夹。
- en: I'm pretty sure you're confused about the purpose of each of these files. We'll
    look at this shortly, but for now, take a look around for a few minutes and see
    whether you can pick up anything by yourself.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我很确定你对每个文件的目的感到困惑。我们马上会看一下这个，但现在，花几分钟四处看看，看看你是否可以自己找到一些东西。
- en: Tip
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Investigating any piece of code that you find and create is the best way to
    ensure you're learning the stuff that you're reading or coding. The best programmers
    are always the ones that use their deductive skills.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 调查你找到和创建的任何代码片段是确保你正在学习你所阅读或编码的内容的最佳方式。最优秀的程序员总是那些运用他们的演绎能力的人。
- en: Preparing our physical device for preview
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为预览准备我们的物理设备
- en: It's time to prepare our phone so that it can preview our app because it's always
    cool to show off to our friends with our new skills.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候准备我们的手机，这样它就可以预览我们的应用了，因为向朋友展示我们的新技能总是很酷的。
- en: So, let's go to the App Store or Google Play and search for Expo. Install it
    and you'll be ready to go. This app allows us to test our apps right on our phones,
    so let's test it out!
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们去应用商店或Google Play搜索Expo。安装它，你就准备好了。这个应用程序允许我们在手机上测试我们的应用，所以让我们试一试吧！
- en: 'Go to your terminal and make your way to the project''s folder, if you''re
    not already there. Write the following command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 去你的终端，如果你还没有在项目文件夹中，就前往那里。输入以下命令：
- en: '[PRE14]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After that, press *Enter*. A new window should open in your default browser.
    A server has been created and your app can now be previewed on your physical device
    or even a simulator. On the sidebar, there is a QR code, and on top of that, a
    link and some buttons. What is this and how can we make use of it?
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，按下*Enter*。一个新窗口应该会在你的默认浏览器中打开。一个服务器已经创建，你的应用现在可以在你的物理设备上或者模拟器上预览了。在侧边栏上，有一个QR码，上面有一个链接和一些按钮。这是什么，我们怎样利用它呢？
- en: '![Figure 1.7 – Preview of all the buttons shown on the screen'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.7 - 屏幕上显示的所有按钮的预览'
- en: '](Images/Figure_1.07_B17074.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/Figure_1.07_B17074.jpg)'
- en: Figure 1.7 – Preview of all the buttons shown on the screen
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 - 屏幕上显示的所有按钮的预览
- en: Now, you can open your smartphone and either scan the QR code or paste the link
    above the QR code into a browser. A message will appear, asking you whether you're
    OK with opening the link with Expo. Press **Yes** and there you have it – your
    first React Native app on your physical device.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以打开你的智能手机，扫描QR码或者将QR码上方的链接粘贴到浏览器中。一个消息会出现，询问你是否愿意用Expo打开链接。按下**是**，你就成功了
    - 你的第一个React Native应用在你的物理设备上了。
- en: Pretty cool, right?
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 相当酷，对吧？
- en: Let's see what happens if we press **Run on Android device/emulator** or **Run
    on iOS simulator**. A message will appear in the top-right corner, letting you
    know Expo is **attempting to open a simulator**. Depending on which operating
    system you've started your project on and which simulator you have installed,
    choose the appropriate button.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果我们按下**在Android设备/模拟器上运行**或者**在iOS模拟器上运行**会发生什么。一个消息会出现在右上角，告诉你Expo正在**尝试打开模拟器**。取决于你在哪个操作系统上启动了你的项目，以及你安装了哪个模拟器，选择适当的按钮。
- en: For the Android simulator, you'll have to open Android Studio first. Then, you
    must go to the top-right corner, where it says **Configure**, and choose **AVD
    Manager**. Now, a new window will appear, displaying all the available virtual
    devices. If you don't see any, go to the bottom-left corner and click **Create
    virtual device**.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Android模拟器，你需要先打开Android Studio。然后，你必须去右上角，那里写着**配置**，选择**AVD Manager**。现在，一个新窗口会出现，显示所有可用的虚拟设备。如果你没有看到任何设备，去左下角点击**创建虚拟设备**。
- en: At this point, you will see a list of Android devices. I picked the Pixel 3a
    but you can choose an older one if your CPU is not very strong. After that, click
    **Next**; you will be asked to pick a system image. Locate the **x86 images**
    tab next to **Recommended** and pick the image that doesn't need to be downloaded
    called **Q**. If all of them need to be downloaded, then you need to go back to
    the Android Studio installation part and repeat that process. After selecting
    the image, click **Next** and name the AVD; it can be called anything, so be creative.
    Click **Finish**; you should see your device in the **AVD Manager** list. On the
    same row, to the right, you'll find a little green button that looks like the
    **play** symbol. Click it.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你会看到一个Android设备列表。我选择了Pixel 3a，但如果你的CPU不是很强大，你可以选择一个旧的设备。之后，点击**下一步**；你将被要求选择一个系统镜像。找到**推荐**旁边的**x86镜像**选项卡，并选择不需要下载的镜像，名为**Q**。如果所有镜像都需要下载，那么你需要回到Android
    Studio安装部分，重复该过程。选择镜像后，点击**下一步**，并命名AVD；它可以被称为任何东西，所以要有创意。点击**完成**；你应该在**AVD管理器**列表中看到你的设备。在同一行的右边，你会找到一个看起来像**播放**符号的小绿色按钮。点击它。
- en: 'A new Android Simulator will open, so let''s head back to the browser tab where
    we have our Expo server running and click on **Run on Android device/emulator**.
    If you look inside the terminal, you''ll see that some writing has appeared. We
    just need to wait a second for the Expo client to be downloaded and installed
    on our simulator. It should say something like this:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的Android模拟器将打开，所以让我们回到浏览器标签，我们的Expo服务器正在运行，然后点击**在Android设备/模拟器上运行**。如果你看一下终端，你会看到一些文字出现了。我们只需要等待一会儿，Expo客户端就会被下载并安装到我们的模拟器上。它应该会显示类似这样的内容：
- en: '[PRE15]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, your Android simulator should show a preview of your first React Native
    app. How does it feel? You''ve been through quite a lot but in the end, being
    able to correctly initialize a project is quite rewarding:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的Android模拟器应该显示你的第一个React Native应用的预览。感觉如何？你经历了很多，但最终，能够正确初始化一个项目是相当有回报的：
- en: '![Figure 1.8 – Android Simulator displaying a fresh new React Native project'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.8 - Android模拟器显示一个全新的React Native项目'
- en: '](Images/Figure_1.08_B17074.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/Figure_1.08_B17074.jpg)'
- en: Figure 1.8 – Android Simulator displaying a fresh new React Native project
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 - Android模拟器显示一个全新的React Native项目
- en: Before we move on, I think we should learn how to close a project in the terminal/command
    line. Go back to the terminal window and click on it so that it's in focus. Now,
    if you press *Ctrl + C*, the server should stop and you should be able to use
    that window of the terminal again.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我认为我们应该学习如何在终端/命令行中关闭一个项目。回到终端窗口，点击它，使其聚焦。现在，如果你按下*Ctrl + C*，服务器应该停止，你应该能够再次使用终端窗口。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter started with a brief introduction to React Native and Galio, and
    then we understood the main focus points as to why those libraries are good for
    your next personal cross-platform mobile app project. After fully understanding
    why learning about those libraries will help them become great assets in the future,
    we started setting up our React Native environment and learning everything there
    is to learn about testing and utilizing our soon-to-be-created mobile app.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 本章以对React Native和Galio的简要介绍开始，然后我们了解了为什么这些库对你的下一个个人跨平台移动应用项目很有好处的主要焦点。在充分理解为什么学习这些库将帮助它们成为未来的重要资产之后，我们开始设置我们的React
    Native环境，并学习关于测试和利用我们即将创建的移动应用的一切。
- en: We then created and tested our first React Native app! This has all been quite
    the journey for a newcomer into this beautiful world of programming and, trust
    me, it was all worth it. Everything you've learned here will serve as a base for
    what's coming up next. Isn't this all exciting? In the next chapter, it's time
    for us to learn the basics of React Native code writing and create even cooler
    apps.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着创建并测试了我们的第一个React Native应用！对于一个新手来说，进入这个美丽的编程世界确实是一次很棒的旅程，相信我，这一切都是值得的。你在这里学到的一切将作为接下来要学习的基础。这一切都很令人兴奋，不是吗？在下一章中，是时候学习React
    Native代码编写的基础知识，并创建更酷的应用了。
