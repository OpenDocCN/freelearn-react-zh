- en: The App Shell
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用外壳
- en: Our last chapter was about adding home screen installation and push notifications--both
    meant to improve the user's experience by adding functionality--but, as we described
    in our user stories at the beginning of the book, one of the most important features
    of this app was its inclusiveness; it was a chat app for everyone, anyone, anywhere.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上一章讨论了添加主屏幕安装和推送通知，这两者都旨在通过添加功能来改善用户体验，但正如我们在书的开头描述的用户故事一样，这个应用最重要的特性之一是包容性；它是一个面向所有人的聊天应用。
- en: 'From a web app perspective, we can better rephrase that as "any connection,
    any speed." The biggest blocker of web application performance is network requests:
    how long it takes to load data over a poor connection.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 从Web应用的角度来看，我们可以更好地重新表述为“任何连接，任何速度”。Web应用性能的最大障碍是网络请求：在慢速连接下加载数据需要多长时间。
- en: Developers can fail to give performance its due attention, simply because we
    usually test our sites on speedy connections inside air-conditioned buildings
    in urban hubs. However, for a global app such as Chatastrophe, we must think about
    the users in less developed countries, the users in rural areas, and the users
    who only have a tenth of the network speed we do. How can we make the app work
    for them?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可能会忽视性能，仅仅因为我们通常在城市中心的空调建筑内快速连接上测试我们的网站。然而，对于像Chatastrophe这样的全球应用，我们必须考虑在不发达国家的用户、农村地区的用户以及只有我们十分之一网络速度的用户。我们如何让应用为他们工作？
- en: This section is all about performance; specifically, it's about optimizing our
    app so that it performs well even in the worst conditions. If we do it well, we'll
    have a robust user experience, suited for any speed (or lack thereof).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本节重点讨论性能；具体来说，它是关于优化我们的应用，使其在最恶劣的条件下也能表现良好。如果我们做得好，我们将拥有一个强大的用户体验，适用于任何速度（或缺乏速度）。
- en: 'In this chapter, we''ll cover these things:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: What progressive enhancement is
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐进增强是什么
- en: The RAIL model of performance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能的RAIL模型
- en: Using Chrome DevTools to measure performance
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Chrome DevTools来衡量性能
- en: Moving our app shell out of React
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们的应用外壳从React中移出
- en: What is progressive enhancement?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是渐进增强？
- en: '**Progressive enhancement** is a simple idea with big consequences. It comes
    from a desire to provide an awesome user experience, married with the need for
    performance. If all our users had perfect, ultrafast connections, we could build
    an incredible application. However, if all our users have slow connections, we
    have to settle for a more bare-bones experience.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**渐进增强**是一个简单的想法，但影响深远。它源于提供出色用户体验的愿望，同时又需要性能。如果我们所有的用户都有完美、超快的连接，我们可以构建一个令人难以置信的应用。然而，如果我们所有的用户都有慢速连接，我们必须满足于更简化的体验。'
- en: Progressive enhancement says porque no los dos? Why not both?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进增强说为什么不两者兼得？为什么不两者都有？
- en: Our audience includes both fast connections and slow connections. We should
    serve both, and serve each appropriately, which means providing the best experience
    for the best connections and a more stripped-down (but still great) experience
    for poor connections, and everything in between.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的受众包括快速连接和慢速连接。我们应该为两者提供服务，并适当地为每个人提供服务，这意味着为最佳连接提供最佳体验，为较差的连接提供更简化（但仍然很棒）的体验，以及介于两者之间的一切。
- en: In a sentence, progressive enhancement means our application gets progressively
    better as our user’s connection improves, but it is always useful and useable.
    Our application is thus an application adaptive to the connection*.*
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，渐进增强意味着随着用户的连接改善，我们的应用会逐渐变得更好，但它始终是有用的和可用的。因此，我们的应用是一种适应连接的应用*。*
- en: You can actually imagine that this as exactly how a modern web page loads. First,
    we load the HTML--the basic, ugly skeleton of our content. Then, we add the CSS
    to make it pretty. Lastly, we load the JavaScript, which contains all the good
    stuff to make it pop. In other words, our application gets progressively better
    as the site loads.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以想象这正是现代网页加载的方式。首先，我们加载HTML——内容的基本、丑陋的骨架。然后，我们添加CSS使其变得漂亮。最后，我们加载JavaScript，其中包含使其生动的所有好东西。换句话说，随着网站的加载，我们的应用程序会逐渐变得更好。
- en: The progressive enhancement paradigms urge us to reorganize our site's content
    so that the importance stuff loads as quickly as possible, and then the bells
    and whistles come in. So, if you’re on a super fast connection, you get everything,
    now; otherwise, you get just what you need to get using the application and the
    rest of the stuff comes later.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进增强范式敦促我们重新组织网站的内容，以便重要的内容尽快加载，然后再加载其他功能。因此，如果您使用的是超快速的连接，您会立即得到所有内容；否则，您只会得到使用应用程序所需的内容，其他内容稍后再加载。
- en: So, in this chapter, we'll optimize our application to boot up as quickly as
    possible. We’ll also cover many tools you can use to keep an eye on performance,
    and continually enhance it, but how do we measure performance? What metrics can
    we use to ensure that we're delivering a fast app? Enter the RAIL model.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将优化我们的应用程序，尽快启动。我们还将介绍许多工具，您可以使用这些工具来关注性能，并不断增强性能，但是我们如何衡量性能呢？我们可以使用哪些指标来确保我们提供了一个快速的应用程序？RAIL模型应运而生。
- en: The RAIL model
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RAIL模型
- en: RAIL is what Google calls a "user-centric performance model". It's a set of
    guidelines for measuring our app's performance. We should try to avoid straying
    outside of these suggestions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: RAIL是谷歌所称的“以用户为中心的性能模型”。这是一组衡量我们应用性能的指南。我们应该尽量避免偏离这些建议。
- en: We will use RAIL's principles to speed up our application and ensure that it
    performs well enough for all users. You can read Google's full docs on RAIL at
    [https://developers.google.com/web/fundamentals/performance/rail](https://developers.google.com/web/fundamentals/performance/rail).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用RAIL的原则来加快我们的应用程序，并确保它对所有用户都表现良好。您可以在[https://developers.google.com/web/fundamentals/performance/rail](https://developers.google.com/web/fundamentals/performance/rail)上阅读谷歌关于RAIL的完整文档。
- en: 'RAIL outlines four specific periods in an application''s life cycle. They are
    as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: RAIL概述了应用程序生命周期中的四个特定时期。它们如下：
- en: Response
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应
- en: Animation
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画
- en: Idle
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空闲
- en: Load
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载
- en: Personally, I think it's easier to think about them in reverse order (since
    it's more true to their actual order), but that would have spelled LIAR, so we
    can see why Google shied away from that. Either way, that's how we'll cover them
    here.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我认为以相反的顺序来思考它们会更容易（因为这更符合它们的实际顺序），但那样会拼成LIAR，所以我们可以理解为什么谷歌会回避这一点。无论如何，在这里我们将以这种方式来介绍它们。
- en: Load
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载
- en: First, your application loads (let there be light!).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您的应用程序加载（让光明降临！）。
- en: RAIL says that the optimal load time is one second (or less). That doesn't mean
    your entire application loads in one second; it means the user sees content within
    one second. They get some sense that the current task (loading the page) is progressing
    in a meaningful way, rather than staring at a blank white screen. As we'll see,
    this is easier said than done!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: RAIL表示，最佳加载时间为一秒（或更短）。这并不意味着您的整个应用程序在一秒内加载完成；而是意味着用户在一秒内看到内容。他们会对当前任务（加载页面）有一定的感知，而不是盯着一片空白的白屏。正如我们将看到的，这并不容易做到！
- en: Idle
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空闲
- en: Once your application is done loading, it is idle (and also will be idle between
    actions) until a user performs an action.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的应用程序加载完成，它就是空闲的（在操作之间也会是空闲的），直到用户执行操作。
- en: Rather than letting your app just sit there (being lazy!), RAIL argues that
    we should use this time to continue loading in parts of the application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: RAIL认为，与其让你的应用程序闲置不用（懒惰！），我们应该利用这段时间继续加载应用程序的部分。
- en: We'll see this more in the next chapter, but if our initial load is just the
    bare bones version of our app, we load the rest (progressive enhancement!) during
    idle time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中更详细地看到这一点，但如果我们的初始加载只是我们应用程序的基本版本，我们会在空闲时间加载其他内容（渐进增强！）。
- en: Animation
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画
- en: Animation will be less relevant to our purpose, but we'll cover it briefly here.
    Essentially, users will note a lag in animations if they are not performed at
    60 fps. This will negatively affect the perceived performance (how the user feels
    about your app's speed).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 动画对我们的目的来说不太相关，但我们将在这里简要介绍一下。基本上，如果动画不以60帧每秒的速度执行，用户会注意到动画的延迟。这将对感知性能（用户对应用程序速度的感受）产生负面影响。
- en: Note that RAIL also defines scrolling and touch gestures as animations, so even
    if you have no animations, if your scroll is laggy, you have a problem.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，RAIL还将滚动和触摸手势定义为动画，因此即使你没有动画，如果你的滚动有延迟，你就会有问题。
- en: Response
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应
- en: Eventually (hopefully very quickly!), the user performs an action. Usually,
    that will mean clicking on a button or typing or using a gesture. Once they do
    so, you have 100 ms to provide a response that acknowledges their action; otherwise,
    users will notice and get frustrated, and maybe retry the action, causing more
    problems down the line (we've all experienced this--the mad double- and triple-clicking).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最终（希望非常快！），用户执行一个操作。通常，这意味着点击按钮、输入或使用手势。一旦他们这样做，你有100毫秒的时间来提供一个响应，以确认他们的行动；否则，用户会注意到并感到沮丧，也许会重试该操作，从而在后续造成更多问题（我们都经历过这种情况——疯狂地双击和三击）。
- en: Note that some actions will take longer to complete, if you need to do some
    calculation or network requests. You don’t need to complete the action in 100
    ms, but you do have to provide some response; otherwise, as *Meggin Kearney* puts
    it, "the connection between action and reaction is broken. Users will notice."
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果需要进行一些计算或网络请求，某些操作将需要更长的时间来完成。你不需要在100毫秒内完成操作，但你必须提供一些响应；否则，正如*Meggin
    Kearney*所说，“行动和反应之间的连接就断了。用户会注意到。”
- en: Timeline
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间轴
- en: 'As the preceding model illustrates, there are certain time limitations, within
    which our application has to live. Here''s a handy reference:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的模型所示，我们的应用程序必须在一定的时间限制内运行。这里有一个方便的参考：
- en: '>16ms: Time per frame of any animation/scrolling.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16毫秒：任何动画/滚动的每帧时间。
- en: '>100ms: Response to user action.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 100毫秒：对用户操作的响应。
- en: '>1000ms: Display content on the web page.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1000毫秒以上：在网页上显示内容。
- en: '1000ms+: User loses focus.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1000毫秒以上：用户失去焦点。
- en: '10,000ms+: User will likely abandon the page.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10,000毫秒以上：用户可能会放弃页面。
- en: If your application performs according to these specifications, you're in good
    standing (and these are not easy to do, as we shall see).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序按照这些规范执行，你就处于一个良好的状态（这些并不容易做到，正如我们将看到的）。
- en: Measuring using the timeline
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用时间轴进行测量
- en: In this section, we'll look at how to profile our application's performance
    using the Chrome DevTools, the first of a few tools we'll use to track how our
    application loads and responds.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看看如何使用Chrome DevTools来分析我们应用程序的性能，这是我们将使用的一些工具中的第一个，用来跟踪我们的应用程序加载和响应的方式。
- en: Once we have an idea of how it performs, we can improve it according to RAIL
    principles.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们了解了它的性能，我们可以根据RAIL原则进行改进。
- en: The DevTools are, of course, always under development, so their appearance may
    differ from the given screenshots. The core functionality should remain the same,
    however, and so, it's important to pay close attention to the principles at work.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 开发工具当然是一直在不断发展的，所以它们的外观可能会与给定的截图有所不同。然而，核心功能应该保持不变，因此，重要的是要密切关注工作原理。
- en: 'Go to your deployed Firebase application in Chrome and open up DevTools to
    the Performance tab (I recommend undocking the tools into a separate window via
    the dropdown menu in the top right, since there’s a lot of content to see); then,
    refresh the page. After the page finishes loading, you should see something similar
    to the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Chrome中打开部署的Firebase应用程序，并打开DevTools到性能标签（我建议通过右上角的下拉菜单将工具拖出到单独的窗口中，因为有很多内容要查看）；然后，刷新页面。页面加载完成后，您应该看到类似以下内容：
- en: '![](../images/00068.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00068.jpeg)'
- en: There's a lot going on here, so let's break it down. We'll start with the Summary
    tab, the circle graph at the bottom there.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多内容，让我们来分解一下。我们将从摘要标签开始，底部的圆形图表。
- en: The Summary tab
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要标签
- en: '![](../images/00069.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00069.jpeg)'
- en: The number in the middle is how long it took for our application to fully complete
    loading. Your number should be similar to mine, with some variation based on your
    internet speed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 中间的数字是我们的应用程序完全加载所花费的时间。您的数字应该与我的类似，根据您的互联网速度会有一些变化。
- en: By far the biggest number here is scripting, at almost 1000 ms on its own. Since
    our application is JavaScript-heavy, this makes sense. Right away, we can see
    where most of our optimization should be focused--on booting up our scripting
    as fast as possible.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这里最大的数字是脚本，几乎达到了1000毫秒。由于我们的应用程序使用JavaScript很多，这是有道理的。我们立刻就能看到我们大部分的优化应该集中在尽快启动我们的脚本上。
- en: The other significant number is the amount of idle time (almost as much as scripting
    time). We’ll see why there's so much in a moment, but keep in mind that the RAIL
    model recommends using that time to start preloading bits of the application that
    haven't loaded yet. As of now, we load everything at the start, boot it all up,
    and then sit around for a bit. It will make far more sense to load only what we
    need (thus reducing scripting time) and then load the rest in the background (thus
    reducing idle time).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的数字是空闲时间的数量（几乎与脚本时间一样多）。我们马上就会看到为什么会有这么多空闲时间，但请记住，RAIL模型建议利用这段时间开始预加载尚未加载的应用程序部分。目前，我们一开始就加载了所有内容，然后启动所有内容，然后坐在那里一会儿。只加载我们需要的内容（从而减少脚本时间），然后在后台加载其余内容（从而减少空闲时间）将更有意义。
- en: Network requests
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络请求
- en: '![](../images/00070.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00070.jpeg)'
- en: We will jump up to network requests now, since it'll help explain a lot of the
    rest of the performance profile.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将转到网络请求，因为这将有助于解释性能概况的其余部分。
- en: 'Here, you can see what data was exactly loaded in at what time. At the beginning,
    we see a lot of the setup files: the Firebase app and `messaging` libraries, our
    `bundle.js`, and the actual document for the page.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到确切加载了什么数据以及何时加载。一开始，我们看到了很多设置文件：Firebase应用和`messaging`库，我们的`bundle.js`，以及页面的实际文档。
- en: 'Later on, the two significant calls are for the user: to log in and load the
    user details. The last thing we load is the manifest.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，两个重要的调用是为了用户：登录和加载用户详细信息。我们加载的最后一件事是清单。
- en: This ordering makes sense. We need to load the Firebase libraries and our JavaScript
    in order to boot up our application. Once we do so, we start the login process.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个顺序是有道理的。我们需要加载Firebase库和我们的JavaScript来启动我们的应用程序。一旦我们这样做，我们就开始登录过程。
- en: The next thing that happens, once our user logs in, is that we receive the messages,
    data from Firebase. As you’ll note, this does not show up on the chart, because
    it's done over WebSockets, in real time, so it's not a network request as such.
    However, it will figure into the rest of the performance profile, so keep it in
    mind.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来发生的事情是，一旦用户登录，我们就会收到来自Firebase的消息和数据。正如您所注意到的，这在图表上并没有显示出来，因为它是通过WebSockets实时完成的，所以它并不是一个网络请求。然而，它将影响到其余的性能概况，所以请记住这一点。
- en: Waterfall
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 瀑布
- en: '![](../images/00071.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00071.jpeg)'
- en: Here, we have a detailed breakdown of what Chrome is actually doing at any time
    during the rendering process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以详细了解Chrome在渲染过程中实际在做什么。
- en: The Waterfall tool is detailed and complex, so we'll have to be content with
    a surface glimpse here. There are two insights we can draw just from looking at
    it, however. First, we can see all the idle time visualized. Most of it is at
    the start, which is somewhat unavoidable as we first load the document, but there's
    that great gap in the middle that we can try to fill.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布工具是详细和复杂的，所以我们只能对其进行表面浏览。然而，我们可以从中得出两个见解。首先，我们可以看到所有的空闲时间可视化。大部分是在开始时，这在我们首次加载文档时有些不可避免，但在中间有一个很大的空白，我们可以尝试填补它。
- en: Second, you can see when the application receives the messages from Firebase,
    in the rightmost waterfall section. If you hover over each block, you can actually
    trace Firebase receiving the message down to our `App.js`, setting its state to
    the messages array.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，您可以看到应用程序在右侧瀑布图中接收来自Firebase的消息。如果您将鼠标悬停在每个块上，实际上可以追踪Firebase接收消息并将其状态设置为消息数组的过程。
- en: So, while we can't see the messages loading in the network request, we can see
    the response in the JavaScript execution.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，虽然我们无法在网络请求中看到消息加载，但我们可以在JavaScript执行中看到响应。
- en: Screenshots
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕截图
- en: '![](../images/00072.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00072.jpeg)'
- en: This is my favorite section of the Performance Tools, because it vividly illustrates
    how your application loads.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我最喜欢的性能工具部分，因为它生动地说明了您的应用程序是如何加载的。
- en: As we established earlier, users should see content within 1,000 ms of loading
    your application. Here, we can see that content first appears on our application
    at about 400 ms, so we’re looking good, but as our application grows (and our
    scripting burden increases) that may change, so now’s the time to optimize as
    much as possible.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所建立的，用户应该在加载您的应用程序后的1000毫秒内看到内容。在这里，我们可以看到应用程序上的内容首先出现大约在400毫秒左右，所以我们看起来不错，但随着我们的应用程序增长（和我们的脚本负担增加），情况可能会改变，所以现在是尽可能优化的时候了。
- en: PageSpeed Insights
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PageSpeed Insights
- en: The Performance Tools are great in that they let us dive deep into the nitty
    gritty of our application's loading. We will use them to keep track of our app's
    performance as we try to improve it, but, if we want more specific, detailed suggestions,
    we can turn to **PageSpeed Insights**, a tool provided by Google.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 性能工具非常棒，因为它们让我们深入了解应用程序加载的细节。我们将使用它们来跟踪我们应用程序的性能，但是，如果我们想要更具体、更详细的建议，我们可以转向Google提供的**PageSpeed
    Insights**工具。
- en: 'Go to PageSpeed Insights ([https://developers.google.com/speed/pagespeed/insights/](https://developers.google.com/speed/pagespeed/insights/))
    and plug in the URL of your deployed application. After a few seconds, you''ll
    get recommendations about what can we improve about Chatastrophe:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 转到PageSpeed Insights（[https://developers.google.com/speed/pagespeed/insights/](https://developers.google.com/speed/pagespeed/insights/)）并输入您部署的应用程序的URL。几秒钟后，您将收到关于Chatastrophe可以改进的建议：
- en: '![](../images/00073.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00073.jpeg)'
- en: As you can see, our mobile performance is in dire need of aid. Most of the insights
    focus on our render-blocking JavaScript and CSS. I encourage you to read through
    their descriptions of these problems and try fixing them on your own. In the next
    section, we'll work on improving our app to Google's specifications, using another
    Progressive Web App secret weapon--the app shell pattern.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们的移动性能急需帮助。大部分见解都集中在我们的阻塞渲染 JavaScript 和 CSS 上。我鼓励你阅读关于这些问题的描述，并尝试自行解决它们。在下一节中，我们将致力于根据谷歌的规范改进我们的应用程序，使用另一个渐进式
    Web 应用程序的秘密武器——应用外壳模式。
- en: The app shell pattern
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用外壳模式
- en: The essence of our application is the message list and chat box, where users
    read and write messages.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的核心是消息列表和聊天框，用户在其中阅读和编写消息。
- en: 'This core functionality relies on JavaScript to work. We cannot get around
    the fact that we are unable to display the messages until the user has been authenticated
    through Firebase and the messages array has loaded, but everything surrounding
    those two pieces is mostly static content. It''s the same in every view and it
    does not rely on JavaScript to work:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个核心功能依赖于 JavaScript 来工作。我们无法绕过这样一个事实，即在用户通过 Firebase 进行身份验证并加载消息数组之前，我们无法显示消息，但是围绕这两个部分的一切大多是静态内容。在每个视图中都是相同的，并且不依赖于
    JavaScript 来工作：
- en: '![](../images/00074.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00074.jpeg)'
- en: We can refer to this as the application shell--the frame around the functional,
    JavaScript driven core.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这称为应用外壳——围绕功能性、由 JavaScript 驱动的核心的框架。
- en: Since this frame does not rely on JavaScript to function, there's actually no
    need for us to wait for React to load and boot up all our JavaScript before displaying
    it—which is what is currently happening.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个框架不依赖 JavaScript 来运行，实际上我们不需要等待 React 加载和启动所有 JavaScript，然后再显示它——这正是目前正在发生的事情。
- en: Right now, our shell is a part of our React code, so, all our JavaScript has
    to be loaded before we call `ReactDOM.render` and display it on the screen.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的外壳是我们的 React 代码的一部分，因此，在调用`ReactDOM.render`并在屏幕上显示之前，我们所有的 JavaScript都必须加载。
- en: However, with our app, and with many apps, there’s a significant section of
    the UI that is essentially just HTML and CSS. Also, if our goal is to decrease
    perceived load time (how long the user thinks it takes to load our app) and get
    content on the screen as soon as possible, we're better off keeping our shell
    just as HTML and CSS, that is, separating it from our JavaScript so that we don’t
    have to wait for React.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于我们的应用程序，以及许多应用程序来说，UI 中有一个相当大的部分基本上只是 HTML 和 CSS。此外，如果我们的目标是减少感知加载时间（用户认为加载应用程序需要多长时间）并尽快将内容显示在屏幕上，最好将我们的外壳保持为纯粹的
    HTML 和 CSS，即将其与 JavaScript 分离，这样我们就不必等待 React。
- en: 'Going back to our Performance Tools, you can see that the first thing loaded
    is the document, or our `index.html`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的性能工具，你可以看到加载的第一件事是文档，或者我们的`index.html`：
- en: '![](../images/00075.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00075.jpeg)'
- en: If we can move our shell in that `index.html`, it'll appear a heck of a lot
    faster than it currently is, because it won't have to wait for the bundle to load.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们可以将我们的外壳放在`index.html`中，它将比目前快得多，因为它不必等待捆绑包加载。
- en: Before we begin, however, let's take a benchmark to see where we are and how
    much of an improvement this will make.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在开始之前，让我们进行基准测试，看看我们目前的情况以及这将带来多大的改进。
- en: 'Using your deployed app, open up our Performance Tools and refresh the application
    (use the Empty Cache & Hard Reload option available when DevTools is open to ensure
    that there’s no accidental caching going on—hold and press the reload button to
    access it). Then, take a look at that image strip and see when content first appears:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你部署的应用程序，打开我们的性能工具并刷新应用程序（在DevTools打开时使用Empty Cache & Hard Reload选项，以确保没有意外的缓存发生-按住并按下重新加载按钮来访问它）。然后，看一下那个图像条，看看内容何时首次出现：
- en: '![](../images/00076.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00076.jpeg)'
- en: Run the test three times, to be sure, and then take the average. For me, it
    took an average of 600 ms. That's our benchmark to beat.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试三次，以确保，并取平均值。对我来说，平均需要600毫秒。这是我们要超越的基准。
- en: Moving shell HTML out of React
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将shell HTML从React中移出
- en: Let's start by defining what we want to move into our `index.html`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先定义我们想要移动到我们的`index.html`中的内容。
- en: 'In the following image, everything outside the messages and chat box line is
    our app shell:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图像中，除了消息和聊天框线之外的所有内容都是我们的应用程序shell：
- en: '![](../images/00077.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00077.jpeg)'
- en: That's what we want to move out of React and convert to plain HTML, but let's
    clarify something before moving on.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们想要从React中移出并转换为纯HTML的内容，但在继续之前让我们澄清一些事情。
- en: Our goal here is to create a fast-loading version of the parts of our app that
    don't need JavaScript immediately but, ultimately, some of our shell will need
    JavaScript. We need our logout button in the header and that will need JavaScript
    to function (though only once the user is authenticated).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是创建一个快速加载的应用程序部分的版本，这些部分不需要立即使用JavaScript，但最终，我们的一些shell将需要JavaScript。我们需要在页眉中放置我们的注销按钮，这将需要JavaScript来运行（尽管只有在用户经过身份验证后才需要）。
- en: So, while we talk of moving this content out of React, what we'll actually do
    is have a pure HTML and CSS version of the shell and then, when React initializes,
    we will replace it with with the React version.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们谈论将这些内容从React中移出时，我们实际上要做的是有一个纯HTML和CSS版本的shell，然后，当React初始化时，我们将用React版本替换它。
- en: 'This approach gives us the best of both worlds: a fast-loading version of the
    basics, which we''ll swap out once the JS is ready. If this sounds familiar, you
    can also call it progressively enhancing our app.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法给了我们最好的两种世界：一个快速加载基础版本，一旦JS准备好，我们就会替换掉它。如果这听起来很熟悉，你也可以称之为逐步增强我们的应用程序。
- en: 'So, how can we manage this swap-out? Well, let''s start by opening our `index.html`
    and taking a look at how our application initializes:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何管理这个替换呢？嗯，让我们从打开我们的`index.html`开始，看看我们的应用程序是如何初始化的：
- en: '![](../images/00078.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00078.jpeg)'
- en: 'The key is our `div#root`. As we see in our `index.js`, that''s where we inject
    our React content:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是我们的`div#root`。正如我们在`index.js`中看到的那样，那是我们注入React内容的地方：
- en: '![](../images/00079.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00079.jpeg)'
- en: 'Right now, we''re embedding our React content into an empty `div`, but let''s
    try out something; add an `<h1>` in there:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将我们的React内容嵌入到一个空的`div`中，但让我们尝试一些东西；在里面添加一个`<h1>`：
- en: '[PRE0]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, reload your app:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重新加载你的应用程序：
- en: '![](../images/00080.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00080.jpeg)'
- en: The `<h1>` appears until our React is ready, in which case it is replaced, so
    we can add content inside `div#root` and it’ll simply be overwritten when React
    is ready; that's our key.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`<h1>`出现直到我们的React准备好，此时它被替换，所以我们可以在`div#root`内添加内容，当React准备好时，它将被简单地覆盖；这就是我们的关键。'
- en: 'Let''s progressively move content over, starting from our `App.js` and working
    our way downward:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步移动内容，从我们的`App.js`开始，逐渐向下工作：
- en: '![](../images/00081.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00081.jpeg)'
- en: 'The only bit of HTML (or JSX, currently) we need here is the container. Let''s
    copy that into `div#root`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里唯一需要的HTML（或JSX，目前）是容器。让我们将它复制到`div#root`中：
- en: '[PRE1]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, inside `ChatContainer` (or `LoginContainer`, or `UserContainer`), we
    see we have a `div.inner-container`, which also can be moved over:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`ChatContainer`（或`LoginContainer`，或`UserContainer`）内部，我们看到有一个`div.inner-container`，也可以移动过去：
- en: '[PRE2]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note the change from `className` (for JSX) to `class` (for HTML).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 注意从`className`（对于JSX）到`class`（对于HTML）的更改。
- en: 'Then, we move the `Header` itself:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们移动`Header`本身：
- en: '[PRE3]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Reload your app and you''ll see a very ugly version of our HTML appear before
    the React loads:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载您的应用程序，您将看到我们的HTML的一个非常丑陋的版本在React加载之前出现：
- en: '![](../images/00082.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00082.jpeg)'
- en: What’s going on here? Well, our CSS is loaded inside our `App.js`, in our import
    statements, so it's not ready until our React is. The next step will be to move
    the relevant CSS inside our `index.html`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？嗯，我们的CSS是在我们的`App.js`中加载的，在我们的导入语句中，因此直到我们的React准备好之前它都不会准备好。下一步将是将相关的CSS移动到我们的`index.html`中。
- en: Moving CSS out of React
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将CSS移出React
- en: Right now, our app doesn't have that much CSS, so we can, in theory, just `<link>`
    our entire style sheet inside `index.html`, instead of importing it in `App.js`,
    but as our application and our CSS grow in size, that will be less than optimal.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的应用程序没有太多的CSS，所以理论上，我们可以只是在`index.html`中`<link>`整个样式表，而不是在`App.js`中导入它，但随着我们的应用程序和CSS的增长，这将不是最佳选择。
- en: Our best option is to inline the relevant CSS. We start by adding a `<style>`
    tag to our `<head>`, right below our `<title>` tags.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最好的选择是内联相关的CSS。我们首先在`<head>`下方的`<title>`标签右侧添加一个`<style>`标签。
- en: Then, open up `src/app.css`, and cut (not copy) the CSS within the `/* Start
    initial styles */` and `/* End Initial styles */` comments.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`src/app.css`，并剪切（而不是复制）`/* Start initial styles */`和`/* End Initial styles
    */`注释内的CSS。
- en: 'Put that inside the style tags and reload the app:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将其放在样式标签内并重新加载应用程序：
- en: '![](../images/00083.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00083.jpeg)'
- en: 'The application looks exactly the same! That''s the good news; at this stage,
    there probably isn''t a perceptible difference in load time. However, let''s deploy
    and then run our Performance tools again:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序看起来完全一样！这是个好消息；在这个阶段，可能不会有明显的加载时间差异。然而，让我们部署然后再次运行我们的性能工具：
- en: '![](../images/00084.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00084.jpeg)'
- en: As you can see, the shell (with the blank inner) appears well before the loading
    indicator appears (a sign that the React app has booted it up). This is time the
    user will usually spend staring at a blank screen.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，外壳（带有空白内部）出现在加载指示器出现之前（这表明React应用程序已经启动）。这是用户通常会花在空白屏幕上的时间。
- en: Moving the loading indicator
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动加载指示器
- en: Let's take it one small step forward, and also add the loading indicator into
    our app shell, to give the user a sense of what is happening.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再向前迈进一小步，还将加载指示器添加到我们的应用程序外壳中，以让用户了解发生了什么。
- en: 'Copy the JSX from `ChatContainer` and add it to our `index.html`. Then, reload
    the page:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 复制`ChatContainer`中的JSX并将其添加到我们的`index.html`。然后，重新加载页面：
- en: '[PRE4]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../images/00085.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00085.jpeg)'
- en: Now, the user gets a clear sense that the application is loading, and will be
    much more forgiving of our app's load time (though we will still do our best to
    decrease it).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，用户可以清楚地感觉到应用程序正在加载，并且会更宽容地对待我们应用程序的加载时间（尽管我们仍然会尽力减少它）。
- en: 'This is the essential principle to take from this chapter: Progressive Web
    Apps demand that we do as much as we can to improve our user''s experience. Sometimes,
    we can''t do anything about load times (at the end of the day, our JavaScript
    will always take some time to boot up--and once it does, it provides a great user
    experience) but we can at least give our user a sense of progress.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从本章中获得的基本原则：渐进式Web应用程序要求我们尽可能多地改善用户体验。有时，我们无法做任何关于加载时间的事情（归根结底，我们的JavaScript总是需要一些时间来启动--一旦它启动，它就提供了很好的用户体验），但我们至少可以让用户感受到进展。
- en: Good web design is about empathy. Progressive Web Apps are about being empathetic
    toward everyone, no matter what conditions they're accessing your app from.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的网页设计是关于共情。渐进式Web应用程序是关于对每个人都持有共情，无论他们从什么条件下访问您的应用程序。
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the essentials of performance tooling and concepts,
    from RAIL to DevTools, to PageSpeed Insights. We also made a significant performance
    improvement using the app shell pattern. We'll continue to hone our app's performance
    in the following chapters.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了性能工具和概念的基本知识，从RAIL到DevTools，再到PageSpeed Insights。我们还使用了应用程序外壳模式进行了重大的性能改进。在接下来的章节中，我们将继续完善我们应用的性能。
- en: Our next chapter will tackle the biggest performance hurdle--our behemoth JavaScript
    file. We'll learn how to split it into smaller chunks using the magic of React
    Router and how to load those chunks during the idle time of our app. Let's get
    to it!
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一章将解决最大的性能障碍——我们庞大的JavaScript文件。我们将学习如何使用React Router的魔力将其拆分成较小的块，并且如何在应用程序的空闲时间加载这些块。让我们开始吧！
