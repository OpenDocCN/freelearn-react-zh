- en: Do It Yourself – Native Modules and Three.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自己动手-本机模块和Three.js
- en: React VR makes it easy to do VR without having to know three.js. The three.js
    is the wrapper class that helps implement WebGL, which itself is a form of the
    native OpenGL rendering library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React VR使得在不需要了解three.js的情况下进行VR变得容易。three.js是帮助实现WebGL的包装类，WebGL本身是一种本机OpenGL渲染库的形式。
- en: React VR is fairly inclusive, but like all APIs, it can't do everything. Fortunately,
    React VR anticipated this; if React VR doesn't support a feature and you need
    it, you can build that feature yourself.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: React VR相当包容，但像所有API一样，它无法做到一切。幸运的是，React VR预料到了这一点；如果React VR不支持某个功能并且您需要它，您可以自己构建该功能。
- en: 'In this chapter, you will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将涵盖以下主题：
- en: Using three.js from inside React VR code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从React VR代码内部使用three.js
- en: The basic three.js procedural code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的three.js程序代码
- en: Setting up three.js to interact with our React VR components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置three.js以与我们的React VR组件进行交互
- en: Using three.js to do things visually that are lower level with three.js
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用three.js在视觉上执行低级别的操作
- en: Native modules and views
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本机模块和视图
- en: Maybe you do know three.js and need to use it. **React Native modules** are
    how your code can directly include raw three.js programming. This is very useful
    if you need to programmatically create native three.js objects, modify material
    attributes, or use other three.js code that isn't directly exposed by React VR.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 也许您确实了解three.js并且需要使用它。**React Native模块**是您的代码可以直接包含原始的three.js编程。如果您需要以编程方式创建本机的three.js对象，修改材质属性，或者使用React
    VR没有直接暴露的其他three.js代码，这将非常有用。
- en: You may have some JavaScript code that does business logic, and don't want to,
    or can't rewrite that as React VR components. You might need to access three.js
    or WebVR components from React VR. You might need to build a high-performance
    database query with multiple threads so that the main rendering loop doesn't slow
    down. All of these things are possible with React Native.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能有一些执行业务逻辑的JavaScript代码，并且不想或无法将其重写为React VR组件。您可能需要从React VR访问three.js或WebVR组件。您可能需要构建一个具有多个线程的高性能数据库查询，以便主渲染循环不会变慢。所有这些都是可能的，React
    Native可以实现。
- en: This is a fairly advanced topic and will not normally be required to write engaging,
    effective WebVR demos; still, it's fantastic knowing that React VR and React are
    so extensible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当高级的主题，通常不需要编写引人入胜、有效的WebVR演示；但是，了解React VR和React是如此可扩展，这仍然是令人难以置信的。
- en: Making a three.js cube demo
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作一个three.js立方体演示
- en: 'First, let''s take a look at a simple box demo. Let''s start with a freshly
    generated site. Go to your node.js command-line interface and kill any *npm start* windows
    you have running and recreate a new, fresh site  by issuing the command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一个简单的盒子演示。让我们从一个新生成的站点开始。转到您的node.js命令行界面，并关闭任何正在运行的*npm start*窗口，并通过发出以下命令重新创建一个新的、新鲜的站点：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first task is to go to the `vr` folder and edit `client.js`. Up to this
    point, we haven''t had to edit this file; it contains boilerplate React VR code.
    Today, we''re going to edit it, as we aren''t doing just boilerplate. The bold
    lines in the following code are the lines we will add to `client.js`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个任务是转到`vr`文件夹并编辑`client.js`。到目前为止，我们还没有必须编辑此文件；它包含样板React VR代码。今天，我们将编辑它，因为我们不只是在做样板。以下代码中的粗体行是我们将添加到`client.js`中的行：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also need to create the object CubeModule. You could put this in a separate
    file, and should if it gets complicated. For now, we can add it to the bottom
    of client.js:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建CubeModule对象。如果它变得复杂，您可以将其放在一个单独的文件中。现在，我们可以将其添加到client.js的底部：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: No other changes are needed. You will now see a bouncing, plain white cube.
    We haven't changed index.vr.js, so it still displays the hello text. This shows
    that both React VR and Native code, in this case three.js, are running at the
    same time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要做其他更改。现在你会看到一个弹跳的纯白色立方体。我们没有改变index.vr.js，所以它仍然显示着hello文本。这表明React VR和原生代码，在这种情况下是three.js，同时运行。
- en: '![](Images/716e2f93-e93a-4c21-be6e-c24d931de8b0.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/716e2f93-e93a-4c21-be6e-c24d931de8b0.png)'
- en: OK, so we put in a bouncing cube. The nice thing about this code is that it
    shows some high levels of integration; yet, this is done in a very clean way.
    For example, the line—`const scene = new THREE.Scene()`—gives you a three.js-accessible
    scene, so we can do whatever we want with three.js, yet, all of the React VR keywords
    just work because it will use the existing scene. You don't have to import/export
    scenes from one side to another and maintain handles/pointers. It's all clean,
    declarative, as React VR is supposed to be. We have the regular scene and objects
    created outside of our normal React VR syntax.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们放了一个弹跳的立方体。这段代码的好处是它展示了一些高度的集成；然而，这是以一种非常干净的方式完成的。例如，这一行代码——`const scene
    = new THREE.Scene()`——给你一个可访问的three.js场景，所以我们可以用three.js做任何我们想做的事情，然而，所有的React
    VR关键词都能正常工作，因为它将使用现有的场景。你不需要从一边导入/导出场景到另一边并维护句柄/指针。这一切都是干净的、声明式的，就像React VR应该是的那样。我们在正常的React
    VR语法之外创建了常规场景和对象。
- en: 'In our previous animations, we changed `index.vr.js`. In this case, with three.js
    objects, we make those changes directly in this part of `client.js`; right where
    the code generator suggests it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的动画中，我们改变了`index.vr.js`。在这种情况下，对于three.js对象，我们直接在`client.js`的这部分进行更改；就在代码生成器建议的地方：
- en: '`vr.render = function(timestamp) {`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`vr.render = function(timestamp) {`'
- en: '`// Any custom behavior you want to perform on each frame goes here`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: // 在这里执行每帧的自定义行为
- en: Making native code interact with React VR
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使原生代码与React VR交互
- en: You can really see the power of React VR if we then go ahead and make this object
    interact with the rest of the world. To do that, we will need to change the index.vr.js.
    We will also use a `VrButton` for the first time.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们继续让这个对象与世界其他部分进行交互，你就能真正看到React VR的强大之处。为了做到这一点，我们需要改变`index.vr.js`。我们还将第一次使用`VrButton`。
- en: Note the spelling in `VrButton`. I was beating my head against the keyboard
    for a while on that one. I just naturally type "VR" instead of "Vr," but it does
    follow the React VR case standard.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `VrButton` 中的拼写。我在这个问题上纠结了一段时间。我自然地会输入"VR"而不是"Vr"，但它确实遵循了React VR的大小写规范。
- en: The clue is that in the console you will see `VRButton is not defined`, which
    normally means that you forgot it in the `import` statement. In this particular
    case, you'll see an oddity of React; you can type `import { YoMomma } from 'react-vr';`
    and you won't get an error; try it. React VR is apparently too scared to talk
    back to YoMomma.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 线索是，在控制台中你会看到 `VRButton is not defined`，这通常意味着你在`import`语句中忘记了它。在这种特殊情况下，你会看到React的一个奇怪之处；你可以输入
    `import { YoMomma } from 'react-vr';` 而不会出错；试试看。React VR 显然太害怕回答YoMomma了。
- en: When we click on buttons, an important part of immersion is for them to make
    a click. Anyone that has their phone on silent, without vibration knows what I
    mean; you press on the cell phone and hear nothing and think it's broken. So,
    let's head to [FreeSound.org](http://FreeSound.org) and download some clicks.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击按钮时，沉浸感的一个重要部分是它们发出的点击声音。任何将手机调成静音且没有震动的人都知道我的意思；你按一下手机，什么声音都没有，以为它坏了。所以，让我们去[FreeSound.org](http://FreeSound.org)下载一些点击声音。
- en: 'I found *Switch Flip #1* by *IanStarGem*, and it''s Creative Commons licensed.
    So, let''s put that in the `static_assets` folder:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '我找到了 *IanStarGem* 制作的 *Switch Flip #1*，并且它是根据知识共享许可证授权的。所以，让我们把它放在 `static_assets`
    文件夹中：'
- en: 'First, we will need to include the declaration of our `NativeModule`; usually,
    you do this at the top after the `import` directives, as follows:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要包括我们的`NativeModule`的声明；通常，你会在`import`指令之后的顶部这样做，如下所示：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that you could call your object `CubeModule` but you can get confused with
    the implementation versus definition. It does make it easier to type. JavaScript
    can be pretty forgiving. That may or may not be a good thing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你可以将你的对象称为`CubeModule`，但你可能会在实现与定义之间感到困惑。这样打字会更容易。JavaScript可能会很宽容。这可能是好事，也可能不是。
- en: 'In any event, in `index.vr.js`, we need to setup our new inital state, or we
    get a black screen and an error:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无论如何，在`index.vr.js`中，我们需要设置我们的新初始状态，否则会出现黑屏和错误：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the same file, right below the `render()` statement, change the `<View>`
    definition to the following (note that we are still ''inside'' the view and haven''t
    closed it yet):'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个文件中，在`render()`语句的下面，将`<View>`的定义更改为以下内容（注意我们仍然在视图中，并且尚未关闭它）：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We are cheating slightly here, that is, moving the view backward so that the
    objects are in front of us.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里稍微作弊，也就是说，将视图向后移动，这样物体就在我们面前。
- en: As React VR is not a CAD system, you can't edit visually, so you've got to think
    about the positioning of items when you do the code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于React VR不是CAD系统，你无法进行可视化编辑，因此在编写代码时必须考虑物品的定位。
- en: Layout graph paper might also help for something complicated.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些复杂的情况，布局图纸也可能有所帮助。
- en: 'After the `<Pano>` statement, and before the `</View>` closing tag, insert
    the following (changing the template-generated Text statement):'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<Pano>`语句之后，并在`</View>`结束标记之前，插入以下内容（更改模板生成的Text语句）：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you refresh your browser, the cube will still bounce around, but you can
    click on the button and see the cube change color. When you move the mouse or
    controller's cursor over the button (visible as a `<Text>` component), you will
    see the button change to the cube's current color.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你刷新浏览器时，立方体仍然会四处弹跳，但你可以点击按钮看到立方体变色。当你将鼠标或控制器的光标悬停在按钮上（显示为`<Text>`组件），你会看到按钮变成立方体的当前颜色。
- en: One neat thing you could do is pregenerate the new color of the cube in a static
    variable (so it doesn't go away like let will) and then make the mouse over color
    be that color.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的做法是在静态变量中预先生成立方体的新颜色（这样它不会像let一样消失），然后使鼠标悬停的颜色变成那种颜色。
- en: A default color of white on white should be fixed too.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 白色背景上的默认颜色也应该修复。
- en: Go ahead and try that; it's a fun exercise.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 继续尝试吧；这是一个有趣的练习。
- en: 'When we play the sound, we get the following error in the console of the browser:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们播放声音时，在浏览器的控制台中会出现以下错误：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You may also see the following error:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还会看到以下错误：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The fix for this problem is to make sure that you have the right audio format
    for your browser. The right formats are:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决这个问题的方法是确保你的浏览器有正确的音频格式。正确的格式有：
- en: Audio files need to be mono; this is so they can be transformed into 3D space.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 音频文件需要是单声道；这样它们才能被转换成3D空间。
- en: Audio files need to be 48 KHz or lower. This seemed to change between Firefox
    55 and 59, but it's safest to be as generic as possible.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 音频文件需要是48千赫或更低。这似乎在Firefox 55和59之间有所改变，但尽可能通用是最安全的。
- en: 'If your files are the wrong format, or you don''t hear the sound, there are
    two possible fixes:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的文件格式错误，或者你听不到声音，有两种可能的解决方法：
- en: You can fix these with Audacity or other sound editing tools.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用Audacity或其他音频编辑工具来修复这些问题。
- en: 'You can let me fix it! I''ve already downloaded and converted the file for
    you in the book files. However, if you don''t try to do the fix, you won''t learn.You
    could just download only 48 KHz mono files and avoid the conversion, but in practice
    these are fairly rare. Converting the sounds is easy and free with Audacity, you
    just have to learn a little bit of the program to do this. Inside the VR button
    all we need to do is load the modifed, mono sound file:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以让我来修复它！我已经在书中的文件中下载并转换了文件。但是，如果你不尝试修复，你就学不到。你可以只下载48千赫单声道文件，避免转换，但实际上这些相当罕见。使用Audacity转换声音很容易和免费，你只需要学一点这个程序就可以了。在VR按钮内，我们需要做的就是加载修改后的单声道声音文件：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I mentioned this in an earlier section, but it bears repeating that if you get
    unexplained errors and you exclaim "I know the file is there and it plays!", try
    checking the format of the sound file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我在早期的部分提到过这一点，但值得重申的是，如果您遇到无法解释的错误，并且大声说“我知道文件在那里并且可以播放！”，请尝试检查声音文件的格式。
- en: Summing up the code so far
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结到目前为止的代码
- en: 'We added a lot of code; let''s summarize where we are. React VR can sometimes
    be confusing, as it is a mixture of JavaScript and XML "ish" code (JSX), so here
    is the complete and total `index.vr.js`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了很多代码；让我们总结一下我们的进展。React VR有时可能会令人困惑，因为它是JavaScript和XML“ish”代码（JSX）的混合，所以这里是完整的`index.vr.js`：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the file, `client.js`, in the `vr` folder (the folder name is lowercase),
    will be the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`vr`文件夹（文件夹名称为小写）中的`client.js`文件中将包含以下内容：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Something more visual
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多视觉效果
- en: We've done some neat interactivity, which is fantastic, although another big
    reason to use three.js directly is to do something rendering wise that React VR
    cannot do. Well, actually, React VR can do some amazing things through Native
    methods, so let's do exactly that.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做了一些很棒的交互，这是很棒的，尽管直接使用three.js的另一个重要原因是在渲染方面做一些React VR无法做到的事情。实际上，React VR可以通过本地方法做一些令人惊叹的事情，所以让我们确切地做到这一点。
- en: First, let's change our cube from bouncing around to spinning as well. It'll
    look more impressive when we add some of the visual effects.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们将我们的立方体从四处弹跳改为旋转。当我们添加一些视觉效果时，它会看起来更令人印象深刻。
- en: Let's also add a few spheres around. We'll want some things to reflect. I chose
    reflection as an impressive thing that you cannot really do in real time with
    WebVR currently, although we can do something really close to it through environment
    mapping. For a fairly long discussion of what environment mapping is, you can
    go to: [http://bit.ly/ReflectMap](http://bit.ly/ReflectMap).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也添加一些球体。我们希望有一些东西可以反射。我选择反射作为一个令人印象深刻的事情，目前在WebVR中你实际上不能做到，尽管我们可以通过环境映射做一些非常接近的事情。关于环境映射是什么的讨论比较长，你可以去这里了解：[http://bit.ly/ReflectMap](http://bit.ly/ReflectMap)。
- en: 'Add the following code to your existing `index.vr.js`, below the `</VrButton>`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到您现有的`index.vr.js`中，在`</VrButton>`下方：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We''ll also add an ambient and directional light to the top of `index.vr.js` inside
    the top level `<View>`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在顶层`<View>`内的`index.vr.js`中添加环境光和定向光：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Go ahead and load that, and make sure that you see a nice blue sphere and big
    red ball. Note that I''m coding slightly more dense than normal, so this book
    doesn''t kill more trees or photons.  Most of our changes are going to be in `client.js`.
    First, initialize all of the variables we need under `init`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 继续加载，并确保您看到一个漂亮的蓝色球和一个大红色球。请注意，我编码比平常稍微密集一些，这样这本书就不会消耗更多的树木或光子。我们大部分的更改将在`client.js`中进行。首先，在`init`下初始化我们需要的所有变量：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, we will set up a custom background to the scene. Interestingly, this
    doesn''t show up when we have a  `<Pano>` statement, but that''s a good thing
    as we''re coding in `three.js` right now; it doesn''t understand VR, so the background
    isn''t quite right. This will show up on the images a little, but fixing that
    is best left as an exercise by the reader. To setup the custom background for
    `three.js`, continue adding to the code as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将为场景设置自定义背景。有趣的是，在我们有`<Pano>`语句时，这并不会显示出来，但这是件好事，因为我们现在正在用`three.js`编码；它不理解VR，所以背景不太对。这会在图像上显示出来，但最好由读者自行修复。要为`three.js`设置自定义背景，继续按照以下方式添加代码：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, we''ll create a torus and the cube we already created earlier (remember
    that this is all still in the `init` statement):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个圆环和之前创建的立方体（记住，这一切仍然在`init`语句中）：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'What we''ve done here is created some extra cameras. We will move these cameras
    to where the torus and our bouncing cube will be, then render those cameras to
    an off-screen buffer (that won''t be visible). Now that we have created those
    cameras, we can create our cube and torus three.js objects; note that this is
    a slight change to our earlier cube:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的是创建了一些额外的摄像头。我们将把这些摄像头移动到圆环和我们的弹跳立方体所在的位置，然后将这些摄像头渲染到一个屏幕外的缓冲区（看不见）。现在我们已经创建了这些摄像头，我们可以创建我们的立方体和圆环three.js对象；请注意，这对我们之前的立方体有一点改变：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Note that the `cubeModule.init(cube);` statement should have already been there.
    Now, we just have to actually wrap the faux tinfoil around our objects; we will
    do this in the `vr.render` function. Here is the entire function:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`cubeModule.init(cube);`语句应该已经存在。现在，我们只需要真正地将假锡箔包裹在我们的物体周围；我们将在`vr.render`函数中完成这个操作。以下是整个函数：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: I changed the box slightly by removing the function `Math.abs(..)` around the
    sine wave so that it'll rotate in a complete circle; this is so that we can see
    what is good about reflection maps, and what is bad.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我稍微改变了盒子，去掉了正弦波周围的`Math.abs(..)`函数，这样它就会在一个完整的圆圈中旋转；这样我们就可以看到反射贴图的优点和缺点。
- en: Hopefully, we got everything pasted in. You can watch the display with a grin
    on your face. Neat chrome knot objects! After you stare at it, you'll note that
    a few things aren't quite right. You can see the difference between the faked
    reflections and real reflections in the square box. It'll look a little "off,"
    but the chrome knot looks good.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 希望我们已经把所有内容都粘贴进去了。你可以面带微笑地观看显示。漂亮的铬结对象！当你盯着它看时，你会注意到有些地方不太对劲。你可以看到在方框中伪造的反射和真实的反射之间的区别。它看起来有点“不对劲”，但铬结看起来不错。
- en: 'Check out the red highlight versus the green in the following image:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下图像中红色高亮和绿色的区别：
- en: '![](Images/4fba2cf3-bfb4-46b2-826c-83a442cd8a85.png)Creating good VR is all
    about reasonable compromises. In the case of reflections, they can look great,
    as the preceding image shows, but they can also look just a little disturbing.
    The box or a flat mirror would be a good example of something not to do. Curved
    objects look a lot more natural as you can see.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/4fba2cf3-bfb4-46b2-826c-83a442cd8a85.png)创建良好的VR主要是关于合理的妥协。在反射的情况下，它们看起来可能很棒，就像前面的图像所示的那样，但它们也可能看起来有点不舒服。盒子或平面镜子就是一个不好的例子。曲面物体看起来更自然，正如你所看到的。'
- en: Games and real-time programming are as much about careful design as a faithful
    recreation of the real world. Remember that we do not create something real; all
    we have to do is create something which will seem real.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏和实时编程与仔细的设计一样重要，也是对真实世界的忠实再现。记住，我们不是在创造真实的东西；我们所要做的就是创造一个看起来真实的东西。
- en: There is a true reflector in three.js called `THREE.Reflector` if you want to
    build a flat mirror. It is well documented in the three.js examples.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在three.js中有一个真正的反射器叫做`THREE.Reflector`，如果你想建造一个平面镜子。在three.js的示例中有很好的文档记录。
- en: With these techniques, and the React Native bridge, you can do some amazing
    things with React VR, without having to get deep into regular three.js programming.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 借助这些技术和React Native桥接，您可以在不深入常规three.js编程的情况下，在React VR中做一些令人惊叹的事情。
- en: Next steps
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步
- en: Now that you can see the basic three.js syntax for materials, you could look
    at the various three.js samples, and copy some of that code in. Don't just look
    at the samples on the screen. You will want to also try them in VR. Some game
    tricks, such as lens reflections or screen space reflections, do not look really
    good in VR. As always, test, test, and test.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了材料的基本three.js语法，您可以查看各种three.js示例，并复制其中的一些代码。不要只看屏幕上的示例。您还会想在VR中尝试它们。一些游戏技巧，比如镜头反射或屏幕空间反射，在VR中看起来并不好。一如既往，测试，测试和测试。
- en: I also changed the color of the button slightly, and we don't have a cursor
    when we shift into VR mode, so the button press doesn't always work. In the next
    chapter, I'll show you how to fix this, or you can investigate yourself.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我还略微改变了按钮的颜色，当我们切换到VR模式时，我们没有光标，所以按钮按下并不总是有效。在下一章中，我将向您展示如何解决这个问题，或者您可以自行调查。
- en: I've also loaded a metal-like reflection texture in the source files, called
    `static_assets/metal_reflect.jpg`. You don't have to do the camera rendering to
    get something that looks shiny, especially if it's a dull reflection, and may
    not want the extra overhead of halving your frame rate (all of those camera renderings
    do take time). If this is the case, you can do a simple environment map and skip
    the camera loading and rendering.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我还在源文件中加载了一个类似金属的反射纹理，名为`static_assets/metal_reflect.jpg`。您不必进行相机渲染来获得看起来闪亮的东西，特别是如果它是一种暗淡的反射，并且可能不希望额外增加帧速率（所有这些相机渲染都需要时间）。如果是这种情况，您可以做一个简单的环境贴图，跳过相机加载和渲染。
- en: Extending React VR — Native Views
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展React VR — 本机视图
- en: You can also extend React VR itself with something called **Native Views**.
    The word view might make you think of a camera rendering, although the meaning,
    in this case, is a little different. Think of these more as new React VR objects
    that are native three.js. They are very useful. You could use the three.js code we
    just went through  to mix in raw three.js programming, but you have limited ability
    to use declarative programming that way. Is there a more React VR way to do this?
    You can do this through Native Views.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过一种称为**本机视图**的东西来扩展React VR本身。视图这个词可能让您想到相机渲染，尽管在这种情况下，意思有点不同。把它们看作是本机three.js的新React
    VR对象更为合适。它们非常有用。您可以使用我们刚刚介绍的three.js代码来混合原始的three.js编程，但是以这种方式使用声明式编程的能力有限。有没有更适合React
    VR的方法？您可以通过本机视图来实现这一点。
- en: Extending the language
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展语言
- en: When you implement a Native View, you can control how properties and code interact
    with the rest of the runtime code. These injections will usually be visual, although
    you can inject sound as well.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当您实现本机视图时，您可以控制属性和代码与其余运行时代码的交互方式。这些注入通常是视觉的，尽管您也可以注入声音。
- en: You can also implement new Native objects. The programming is similar to what
    we have done so far; you implement base properties, expose the new keyword to
    the runtime, and then code them as if they were part of the React VR language.
    There are additional keywords and functions that let you describe your new React
    VR views in terms of props and types.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以实现新的本机对象。编程方式与我们迄今为止所做的类似；您实现基本属性，将新关键字暴露给运行时，然后将它们编码，就好像它们是React VR语言的一部分。还有其他关键字和函数，让您能够根据属性和类型描述您的新React
    VR视图。
- en: To create a native view, there is documentation at: [http://bit.ly/RCTNativeView.
     ](http://bit.ly/RCTNativeView)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建本机视图，可以查看文档：[http://bit.ly/RCTNativeView.  ](http://bit.ly/RCTNativeView)
- en: You are getting to the point now that you should be able to do some amazing
    things with React VR, and I fully trust that you can pick apart my examples, extend
    them, and have a fun time.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经到了可以用React VR做一些令人惊叹的事情的地步了，我完全相信你可以分解我的例子，扩展它们，并且玩得开心。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed how to use the full power of three.js with React
    VR. While learning this, we demonstrated where to place native code and the React
    VR Native bridge. We built `three.js` meshes directly via JavaScript and added
    sound that made the world seem more alive. We also used React Native Views and
    the Native bridge to do customized rendering, including a reflection map—we added
    chrome to VR (as opposed to viewing VR with Chrome). We also showed how to get
    access to the React VR camera via the `vr.player.renderer` to do more three.js
    processing.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何在React VR中使用three.js的全部功能。在学习这一点的同时，我们演示了如何放置本地代码和React VR本地桥接。我们直接通过JavaScript构建了`three.js`网格，并添加了使世界更加生动的声音。我们还使用了React
    Native Views和本地桥接来进行自定义渲染，包括反射贴图 - 我们为VR添加了Chrome（而不是用Chrome查看VR）。我们还展示了如何通过`vr.player.renderer`访问React
    VR相机来进行更多的three.js处理。
- en: With a full-blown three.js included, we really can do anything we want with
    React VR. We should, however, use React VR where it is needed, and three.js where
    we need a little more detail, otherwise React VR will be icing on a bolt. It would
    be liable to cause rust and easily fall off.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有了完整的three.js，我们真的可以用React VR做任何我们想做的事情。然而，我们应该在需要的地方使用React VR，在需要更多细节的地方使用three.js，否则React
    VR将成为螺栓上的糖霜。它可能会生锈并容易脱落。
