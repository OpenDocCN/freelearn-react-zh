- en: Guitar Tuner
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 吉他调音器
- en: React Native covers most of the components and APIs that are available in iOS
    and Android. Points such as UI components, navigation, or networking can be fully
    set up within our JavaScript code using React Native components, but not all the
    platform's capabilities have been mapped from the native world to the JavaScript
    world. Nonetheless, React Native offers a way to write real native code and have
    access to the full power of the platform. If React Native doesn't support a native
    feature that you need, you should be able to build it yourself.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React Native涵盖了iOS和Android中大部分可用的组件和API。诸如UI组件、导航或网络等点可以完全在我们的JavaScript代码中使用React
    Native组件进行设置，但并非所有平台的功能都已从本地世界映射到JavaScript世界。尽管如此，React Native提供了一种编写真正的本地代码并访问平台全部功能的方法。如果React
    Native不支持您需要的本地功能，您应该能够自己构建它。
- en: In this chapter, we are going to use React Native's ability to enable our JavaScript
    code to communicate with custom native code; specifically, we will write a native
    module to detect frequencies coming from the device's microphone. These capabilities
    shouldn't be part of the day-to-day tasks for a React Native developer but, eventually,
    we may need to use modules or SDKs, which are only available on Objective-C, Swift,
    or Java.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将利用React Native的能力，使我们的JavaScript代码能够与自定义的本地代码进行通信；具体来说，我们将编写一个本地模块来检测来自设备麦克风的频率。这些能力不应该是React
    Native开发人员日常任务的一部分，但最终，我们可能需要使用仅在Objective-C、Swift或Java上可用的模块或SDK。
- en: For this chapter, we will focus on iOS, as we need to write native code which
    is outside the scope of this book. Porting this app to Android should be fairly
    simple as we can fully reuse the UI, but we will keep that out of this chapter
    to reduce the amount of native code written. Since we are focusing only on iOS,
    we will cover all the aspects of building the app, adding a splash screen and
    an icon, so it is ready to be submitted to the App Store.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于iOS，因为我们需要编写超出本书范围的本地代码。将此应用程序移植到Android应该相当简单，因为我们可以完全重用UI，但我们将在本章中将其排除在外，以减少编写的本地代码量。由于我们只关注iOS，我们将涵盖构建应用程序的所有方面，添加启动画面和图标，使其准备好提交到App
    Store。
- en: We will need a Mac and XCode to add and compile native code for this project.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要一台Mac和XCode来为这个项目添加和编译本地代码。
- en: Overview
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: 'The concept of how a guitar is tuned should be simple to understand: each of
    the six strings of a guitar emits a sound at a specific frequency when played
    open (that is when no fret is pushed). Tuning a guitar means tightening the string
    until a specific frequency is emitted. This is the list of frequencies each string
    should emit to be standard tuned:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 理解吉他的调音概念应该很简单：吉他的六根弦在开放状态下（即没有按下任何品）发出特定频率的声音。调音意味着拉紧弦直到发出特定频率的声音。以下是每根弦应该发出的标准频率列表：
- en: '![](Images/1b31ca6f-97f7-4c10-966f-b8b470bdc6a3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1b31ca6f-97f7-4c10-966f-b8b470bdc6a3.png)'
- en: 'The digital process of tuning a guitar will follow these steps:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 吉他调音的数字过程将遵循以下步骤：
- en: Record a live sample of the frequencies captured through the device's microphone.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录通过设备麦克风捕获的频率的实时样本。
- en: Find the most prominent frequency in that sample.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到该样本中最突出的频率。
- en: Calculate what is the closest frequency in the preceding table to detect what
    string is being played.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算出前表中最接近的频率，以检测正在演奏的是哪根弦。
- en: Calculate the difference between the frequency emitted and the standard tuned
    frequency for that string, so we can let the user correct the string tension.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算发出的频率与该弦的标准调音频率之间的差异，以便让用户纠正弦的张力。
- en: There are also some pitfalls we need to overcome, like ignoring low volumes
    so that we don't confuse the user by detecting frequencies from sounds which are
    not coming from the strings.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要克服一些障碍，比如忽略低音量，这样我们就不会因为检测到不是来自琴弦的声音的频率而混淆用户。
- en: For much of this process, we will use native code not only because we need to
    deal with features not available in React Native's API (for example, recording
    through the microphone), but also because we can perform complex calculations
    in a more effectual way. The algorithm we will be using here to detect the predominant
    frequency from the samples we take from the microphone is called the **Fast Fourier
    Transform** (**FFT**). We won't go into much detail here, but we will use a native
    library to perform these calculations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们将使用原生代码，不仅因为我们需要处理React Native API中不可用的功能（例如，通过麦克风录音），而且因为我们可以以更有效的方式进行复杂的计算。我们将在这里使用的算法来检测从麦克风获取的样本中的主频率被称为**快速傅里叶变换**（**FFT**）。我们不会在这里详细介绍，但我们将使用一个原生库来执行这些计算。
- en: The user interface for this app should be really simple as we only have one
    screen to show the user. The complexity will reside in the logic, rather than
    in displaying a beautiful interface, although we will use some images and animations
    to make it more appealing. It's important to keep in mind that the interface is
    what makes an app appealing in the App Store, so we won't neglect this aspect.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序的用户界面应该非常简单，因为我们只有一个屏幕来展示给用户。复杂性将存在于逻辑中，而不是展示一个漂亮的界面，尽管我们将使用一些图像和动画使其更具吸引力。重要的是要记住，界面是使应用程序在应用商店中吸引人的因素，所以我们不会忽视这一方面。
- en: 'This is what our app will look like once it is finished:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的应用程序完成后的样子：
- en: '![](Images/16b23a5e-a1dc-4f05-bc79-fc4c5a4ac11c.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/16b23a5e-a1dc-4f05-bc79-fc4c5a4ac11c.png)'
- en: At the top of the screen, our app displays an "analog" tuner displaying the
    frequency the guitar string is emitting. A red indicator will move inside the
    tuner to show if the guitar string is close to the tuned frequency. If the indicator
    is on the left side, it means the guitar string is at a lower frequency and needs
    to be tightened. Therefore, a user should try to make the indicator go to the
    middle of the tuner to ensure the string is tuned. This is a very intuitive way
    of showing how well a string is tuned.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕顶部，我们的应用程序显示一个“模拟”调谐器，显示吉他弦发出的频率。一个红色指示器将在调谐器内移动，以显示吉他弦是否接近调谐频率。如果指示器在左侧，意味着吉他弦的频率较低，需要调紧。因此，用户应该尝试使指示器移动到调谐器的中间，以确保琴弦调谐。这是一种非常直观的方式来显示琴弦的调谐情况。
- en: However, we need to let the user know what string she is trying to tune. We
    can guess this by detecting what the closest tuned frequency is. Once we know
    what string was pushed, we will display it to the user in the bottom part of the
    screen where there is a representation of each of the strings plus the notes which
    should be played once the guitar is tuned. We will change the border color of
    the corresponding note to green to notify the user that the app detected a specific
    note.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要让用户知道她试图调谐的是哪根琴弦。我们可以通过检测最接近的调谐频率来猜测这一点。一旦我们知道是哪根琴弦被按下，我们将在屏幕底部向用户显示它，那里有每根琴弦的表示，以及调谐后应该演奏的音符。我们将改变相应音符的边框颜色为绿色，以通知用户应用程序检测到了特定音符。
- en: 'Let''s review the list of topics we will cover in this chapter:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下本章将涵盖的主题列表：
- en: Running native code from JavaScript
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从JavaScript运行原生代码
- en: Animating images
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画图像
- en: '`<StatusBar />`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<StatusBar />`'
- en: '`propTypes`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propTypes`'
- en: Adding a splash screen
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加启动画面
- en: Adding an icon
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加图标
- en: Setting up the folder structure
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置文件夹结构
- en: 'Let''s initialize a React Native project using React Native''s CLI. The project
    will be named `guitarTuner` and will be exclusively available for iOS:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用React Native的CLI初始化一个React Native项目。该项目将命名为`guitarTuner`，并且将专门用于iOS：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As this is a single-screen app, we won''t need a state management library such
    as Redux or MobX, so, we will use a simple folder structure:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个单屏应用程序，我们不需要像Redux或MobX这样的状态管理库，因此，我们将使用一个简单的文件夹结构：
- en: '![](Images/7e89eb67-4d3d-4a0d-85e3-83a06350ba56.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7e89eb67-4d3d-4a0d-85e3-83a06350ba56.png)'
- en: 'We have three images to support our custom interface:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三张图片来支持我们的自定义界面：
- en: '`indicator.jpg`: The red bar indicating how tuned a string is'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indicator.jpg`：指示弦音调的红色条'
- en: '`tuner.jpg`: The background in which the indicator will move'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tuner.jpg`：指示器将移动的背景'
- en: '`string.jpg`: A representation of a guitar string'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string.jpg`：吉他弦的表示'
- en: 'Our `src/` folder contains two subfolders:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`src/`文件夹包含两个子文件夹：
- en: '`components/`: This stores the `<Strings/>` component and the `<Tuner/>` component'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`components/`：这里存储了`<Strings/>`组件和`<Tuner/>`组件'
- en: '`utils/`: This holds a list of functions and constants which will be used in
    several parts of our app'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utils/`：这里保存了将在我们应用的几个部分中使用的函数和常量列表'
- en: Finally, the entry point of our app will be `index.ios.js`, as we will be building
    our app exclusively for the iOS platform.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们应用程序的入口点将是`index.ios.js`，因为我们将专门为iOS平台构建我们的应用程序。
- en: 'Let''s take a look at our `package.json` to identify what dependencies we will
    have:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的`package.json`，以确定我们将有哪些依赖项：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As can be seen, there are no dependencies other than `react` and `react-native`,
    which are created by React Native's CLI when running the `init` script.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到，除了由React Native的CLI在运行`init`脚本时创建的`react`和`react-native`之外，没有其他依赖项。
- en: 'To obtain permission to record from the microphone, we also need to modify
    our `ios/guitarTuner/Info.plist` to add a *Microphone Usage Description*, which
    is a message to be displayed to the user to request access to the microphone on
    her device. We need to add these lines right before the last `</dict></plist>`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得从麦克风录制的权限，我们还需要修改我们的`ios/guitarTuner/Info.plist`，添加一个*Microphone Usage Description*，这是一个要显示给用户的消息，请求在她的设备上访问麦克风。我们需要在最后的`</dict></plist>`之前添加这些行：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With this last step, we should have the JavaScript part of our app ready to
    start coding. However, we still need to set up the native modules we will be using
    for recording and frequency detecting.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这最后一步，我们应该已经准备好开始编写应用程序的JavaScript部分。但是，我们仍然需要设置我们将用于录制和频率检测的原生模块。
- en: Writing the native module
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写原生模块
- en: We need XCode to write the native module, which will use the microphone to record
    samples and to analyze those samples to calculate the main frequency. As we are
    not interested in how these calculations are made, we will use an open source
    library to delegate most of the recording and FFT calculations. The library is
    named `SCListener` and a fork of it can be found at [https://github.com/emilioicai/sc_listener](https://github.com/emilioicai/sc_listener).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要XCode来编写原生模块，该模块将使用麦克风录制样本，并分析这些样本以计算主频率。由于我们对这些计算方式不感兴趣，我们将使用一个开源库来委托大部分录制和FFT计算。该库名为`SCListener`，其分支可以在[https://github.com/emilioicai/sc_listener](https://github.com/emilioicai/sc_listener)找到。
- en: 'We need to download the library and add its files to the project following
    these steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要下载该库，并按照以下步骤将其文件添加到项目中：
- en: Navigate to the folder where our iOS project is: `<project_folder>/ios/`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们的iOS项目所在的文件夹：`<project_folder>/ios/`。
- en: Double-click on `guitarTuner.xcodeproj`, which should open XCode.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`guitarTuner.xcodeproj`，这将打开XCode。
- en: 'Right-click on the `guitarTuner` folder and click on Add Files to "guitarTuner"...:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`guitarTuner`文件夹，然后单击“添加文件到"guitarTuner"...”：
- en: '![](Images/26810fae-4e6f-4c4c-976f-c5d605f2d75b.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/26810fae-4e6f-4c4c-976f-c5d605f2d75b.png)'
- en: 'Select all the files from the downloaded `SCListener` library:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择从下载的`SCListener`库中选择所有文件：
- en: '![](Images/07f1b66c-4963-41ee-ac32-695895d0e59a.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/07f1b66c-4963-41ee-ac32-695895d0e59a.png)'
- en: 'Click on Accept. You should end up with a file structure in XCode similar to
    this one:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Accept。您应该在XCode中得到一个类似于这样的文件结构：
- en: '![](Images/78683d6d-fdf2-4100-b7b0-1252a051f8b9.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/78683d6d-fdf2-4100-b7b0-1252a051f8b9.png)'
- en: '`SCListener` needs the AudioToolbox framework to be installed. Let''s do this
    by clicking on the root of the project in XCode.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SCListener`需要安装AudioToolbox框架。我们可以通过在XCode中点击项目的根目录来实现这一点。'
- en: Select the Build Phases tab.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Build Phases选项卡。
- en: '![](Images/7dd608bd-8cfb-46cb-8a99-0aae7f1b9bd7.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7dd608bd-8cfb-46cb-8a99-0aae7f1b9bd7.png)'
- en: Go to Link Binary with Libraries.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Link Binary with Libraries。
- en: Click on the + icon.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击+图标。
- en: Select AudioToolbox.framework.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择AudioToolbox.framework。
- en: '![](Images/eef7db93-952a-45c8-88c6-7db97c63eb08.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/eef7db93-952a-45c8-88c6-7db97c63eb08.png)'
- en: Now, let's add our module which will use `SCListener` and will send the data
    to React Native. Right-click on the `guitarTuner` folder and click on New File.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加一个将使用`SCListener`并将数据发送到React Native的模块。右键单击`guitarTuner`文件夹，然后单击New
    File。
- en: 'Add a header file named `FrequencyDetector.h`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`FrequencyDetector.h`的头文件：
- en: '![](Images/3fcd3014-4554-4c19-a97d-77e261f99732.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3fcd3014-4554-4c19-a97d-77e261f99732.png)'
- en: Let's repeat the process to add an implementation file for our module: right-click
    on the `guitarTuner` folder and click on New File.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们重复这个过程，为我们的模块添加一个实现文件：右键单击`guitarTuner`文件夹，然后单击New File。
- en: 'Add an Objective-C file named `FrequencyDetector.m`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`FrequencyDetector.m`的Objective-C文件：
- en: '![](Images/73cc358f-ed17-446b-971a-bcf177a31955.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/73cc358f-ed17-446b-971a-bcf177a31955.png)'
- en: 'Our module `FrequencyDetector` is now ready to be implemented. Let''s take
    a look at what `FrequencyDetector.h` should look like:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模块`FrequencyDetector`现在已经准备好实现了。让我们看看`FrequencyDetector.h`应该是什么样子：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It just imports two modules: `Accelerate` which is used to make the Fourier
    Transform calculations and `RCTBridgeModule`, which enables our native module
    to interact with our app''s JavaScript code. Now, let''s move to the implementation
    of the module:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 它只导入了两个模块：`Accelerate`用于进行傅立叶变换计算，`RCTBridgeModule`用于使我们的本地模块与应用的JavaScript代码进行交互。现在，让我们来实现这个模块：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Even for non-Objective-C developers, this code should be easy to understand:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 即使对于非Objective-C开发人员，这段代码也应该很容易理解：
- en: First, we import `SCListener`, the module which exposes methods to record from
    the device's microphone, and calculate the FFT from the recorded sample
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入`SCListener`，这个模块暴露了从设备麦克风录制和计算录制样本的FFT的方法
- en: 'Then, we expose two methods: `getFrequency` and `initialise`'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们公开了两种方法：`getFrequency`和`initialise`
- en: The implementation of `getFrequency` is also quite simple. We only need to read
    the volume we detect on the microphone by calling `averagePower` on our SCListener
    shared instance. If the volume is strong enough, we decide a guitar string has
    been pushed so we update a variable named `freq`, which will be passed into a
    callback supplied from our JavaScript code. Note that sending data back to JavaScript
    can only be done through callbacks (or promises) due to the nature of the bridge
    between the native and the JavaScript code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`getFrequency`的实现也非常简单。我们只需要通过调用我们的SCListener共享实例上的`averagePower`来读取麦克风上检测到的音量。如果音量足够强，我们就认为弹了一根吉他弦，所以我们更新一个名为`freq`的变量，它将被传递到我们JavaScript代码提供的回调中。请注意，由于本地代码和JavaScript代码之间的桥接的性质，只能通过回调（或承诺）将数据发送回JavaScript。'
- en: 'The way we expose methods from the native world into the JavaScript world is
    by using `RCT_EXPORT_METHOD`, a macro provided by `RCTBridgeModule`. We also need
    to let React Native know this module can be used from our JavaScript code. We
    do it by calling another macro: `RCT_EXPORT_MODULE`. That''s all we need; from
    this moment on, we can access this module''s methods with this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将本地世界中的方法暴露到JavaScript世界的方式是使用`RCTBridgeModule`提供的宏`RCT_EXPORT_METHOD`。我们还需要让React
    Native知道这个模块可以从我们的JavaScript代码中使用。我们通过调用另一个宏来做到这一点：`RCT_EXPORT_MODULE`。这就是我们需要的全部；从这一刻起，我们可以使用这个模块的方法：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we can see, we pass a callback to `getFrequency` in which the current recorded
    frequency will be received. We can now use this value to calculate what string
    was pressed and how tuned it is. Let's take a look at how we are going to use
    this module in our app's JavaScript components.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们将一个回调传递给`getFrequency`，其中将接收当前记录的频率。我们现在可以使用这个值来计算按下了哪根弦以及它的调谐情况。让我们看看我们将如何在我们应用程序的JavaScript组件中使用这个模块。
- en: index.ios.js
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: index.ios.js
- en: 'We already saw how we can access the method we exposed from the native module
    `FrequencyDetector`. Let''s now see how we can use it within our components tree
    to update the state of our app:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了我们如何访问我们从本地模块`FrequencyDetector`中暴露的方法。现在让我们看看如何在我们的组件树中使用它来更新我们应用程序的状态：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Most of the logic will be placed in the `componentWillMount` method of our entry
    file. We need to initialize the `FrequencyDetector` module to start listening
    from the device's microphone and right after that, we call `setInterval` to repeatedly
    (every 0.5 seconds) invoke the `getFrequency` method of `FrequencyDetector` to
    get the updated prominent frequency. Every time we get a new frequency, we will
    check the guitar string which was most likely pressed by calling a support function
    named `getClosestString` and save the returned data in our component state. We
    will store this function in our `utils` file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分逻辑将放在我们的入口文件的`componentWillMount`方法中。我们需要初始化`FrequencyDetector`模块，从设备的麦克风开始监听，然后我们调用`setInterval`来重复（每0.5秒）调用`FrequencyDetector`的`getFrequency`方法来获取更新的显著频率。每次我们获得一个新的频率，我们将通过调用一个名为`getClosestString`的支持函数来检查最可能被按下的吉他弦，并将返回的数据保存在我们的组件状态中。我们将把这个函数存储在我们的`utils`文件中。
- en: utils
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: utils
- en: 'Before continuing with `index.ios.js`, let''s take a look at our `utils` file
    located in `src/utils/index.js`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续`index.ios.js`之前，让我们看看我们位于`src/utils/index.js`中的`utils`文件：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`getClosestString` is a function which, based on a provided frequency, will
    return a JavaScript object containing two values:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`getClosestString`是一个函数，根据提供的频率，将返回一个包含两个值的JavaScript对象：'
- en: '`number`: This is the number from the guitar string which was most likely pressed'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number`：这是最可能被按下的吉他弦的数字'
- en: '`delta`: This is the difference between the frequency provided and the tuned
    frequency for the guitar string which was most likely pressed'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delta`：这是提供的频率与最可能被按下的吉他弦的调谐频率之间的差异'
- en: We will also export a list of colors and their hex representation which will
    be used by some user interface components to keep consistency throughout the app.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将导出一组颜色及其十六进制表示，这将被一些用户界面组件使用，以保持整个应用程序的一致性。
- en: 'After invoking `getClosestString`, we have enough information to build the
    state in our app. Of course, we need to provide this data to the tuner (to show
    how well-tuned the guitar string is) and to the string''s representation (to show
    what guitar string was pressed). Let''s take a look at the entire root component
    to see how this data is spread among components:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`getClosestString`之后，我们有足够的信息来构建我们应用程序的状态。当然，我们需要将这些数据提供给调谐器（显示吉他弦的调谐情况）和弦的表示（显示哪根吉他弦被按下）。让我们看看整个根组件，看看这些数据是如何在组件之间传播的：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will use two components to render the current pressed string (`<Strings/>`)
    and how tuned the pressed string is (`<Tuner/>`).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用两个组件来渲染当前按下的弦（`<Strings/>`）以及按下的弦的调谐程度（`<Tuner/>`）。
- en: 'On top of that, we are using a React Native component named `<StatusBar/>`.
    `<StatusBar/>` allows the developer to choose the colors the app will show in
    the top bar where the carrier, time, battery level, and so on, are displayed:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们还使用了一个名为`<StatusBar/>`的React Native组件。`<StatusBar/>`允许开发人员选择应用程序在顶部栏中显示的颜色，其中显示运营商、时间、电池电量等：
- en: '![](Images/0566a8ca-a023-47d3-a9f9-2d2b6aed1ffb.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0566a8ca-a023-47d3-a9f9-2d2b6aed1ffb.png)'
- en: As we want our app to have a black background, we decided to use a `light-content` bar
    style. This component allows us to hide the bar completely, change its background
    color (Android only), or hide network activity, among other options.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们希望我们的应用有一个黑色的背景，我们决定使用`light-content`的bar样式。这个组件允许我们完全隐藏bar，改变其背景颜色（仅限Android），或隐藏网络活动，等等。
- en: Let's move now to the components displaying all the visual components. We will
    start with `<Tuner/>`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转向显示所有视觉组件的组件。我们将从`<Tuner/>`开始。
- en: Tuner
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调谐器
- en: 'Our `<Tuner/>` component comprises two elements: a background image dividing
    the screen into segments and an indicator which will move according to how well
    tuned the guitar string played is. To make it user-friendly, we will use animations
    to move the indicator, similar to the way analog tuners behave:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`<Tuner/>`组件包括两个元素：一个背景图像将屏幕分成几个部分，以及一个指示器，它将根据弹奏的吉他弦的音调移动。为了使其用户友好，我们将使用动画来移动指示器，类似于模拟调谐器的行为：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will use a component's `state` variable for the animation named `xIndicator`,
    which will store the value (in an animated way) of the position where the indicator
    should be. Remember, the closer to the center, the better tuned the string will
    be. We will update this value every time we receive a new `delta` prop from its
    parent using the `componentWillReceiveProps` method and the `Animated.timing`
    function to ensure the image is animated. To make it more realistic, we also added
    an easing function which will make the indicator bounce, a bit like a real analog
    indicator.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用组件的`state`变量来进行动画命名为`xIndicator`，它将以动画方式存储指示器应该在的位置的值。记住，越接近中心，弦的音调就会调得越好。我们将使用`componentWillReceiveProps`方法和`Animated.timing`函数每次从父组件接收到新的`delta`属性时更新这个值，以确保图像是动画的。为了使其更加逼真，我们还添加了一个缓动函数，这将使指示器像真正的模拟指示器一样弹跳。
- en: We also added a `propTypes` static attribute to our class for type checking.
    We will make sure this way our component receives a delta in the proper format.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为我们的类添加了一个`propTypes`静态属性进行类型检查。这样我们就可以确保我们的组件以正确的格式接收到一个delta。
- en: Finally, remember how we exported a list of colors and their hex value in the
    `utils` file? We are using it here to show what color the background of this component
    will be.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还记得我们在`utils`文件中导出了颜色列表及其十六进制值吗？我们在这里使用它来显示这个组件的背景颜色是什么。
- en: Strings
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弦
- en: 'The last component is a representation of the six strings of a guitar. When
    our `FrequencyDetector` native module detects which frequency is played, we will
    display which string has the ability to emit the closest frequency by changing
    the note''s container border to green here:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个组件是吉他的六根弦的表示。当我们的`FrequencyDetector`原生模块检测到弹奏的频率时，我们将通过将音符容器的边框更改为绿色来显示具有发射最接近频率的弦：
- en: '![](Images/e630770d-b6c7-4104-a222-bf0cc2a38363.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e630770d-b6c7-4104-a222-bf0cc2a38363.png)'
- en: 'Therefore, we need to accept one prop from its parent: the number of the active
    guitar string. Let''s take a look at the code for this simple component:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要从其父组件接受一个属性：活动吉他弦的编号。让我们来看一下这个简单组件的代码：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We are rendering six images, one per guitar string, and justifying them using `space-around`
    to distribute them across the entire device screen, leaving two small spaces on
    both sides. We use a constant array containing the notes for each of the strings
    in a guitar to map them into the string representation. We will also use the prop `activeString`
    received from its parent to decide if we should show a yellow or a green border
    for each note.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在渲染六个图像，每个代表一根吉他弦，并使用`space-around`来使它们在整个设备屏幕上分布，留下两个小空间。我们使用一个包含吉他每根弦音符的常量数组将它们映射到字符串表示中。我们还将使用从其父级接收到的`activeString`属性来决定是否应该为每个音符显示黄色边框还是绿色边框。
- en: We are again using `propTypes` to check the type of the provided prop (a number
    in this case).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用`propTypes`来检查所提供的属性的类型（在这种情况下是一个数字）。
- en: This is all the code we need to build our guitar tuner. Let's add an icon and
    a splash screen now to make the app ready for submission to the App Store.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们构建吉他调音器所需的所有代码。现在让我们添加一个图标和一个启动画面，使应用程序准备好提交到App Store。
- en: Adding an icon
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加图标
- en: 'Once we have our icon designed and saved as a large image, we need to resize
    it to all the formats Apple requires. In general, these are the sizes required:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设计好图标并将其保存为大图像，我们需要将其调整为苹果要求的所有格式。一般来说，这些是所需的尺寸：
- en: 20 x 20 px (iPhone Notification 2x)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20 x 20 px（iPhone Notification 2x）
- en: 60 x 60 px (iPhone Notification 3x)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 60 x 60 px（iPhone Notification 3x）
- en: 58 x 58 px (iPhone Spotlight - iOS 5,6 2x)
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 58 x 58 px（iPhone Spotlight - iOS 5,6 2x）
- en: 67 x 67 px (iPhone Spotlight - iOS 5,6 3x)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 67 x 67 px（iPhone Spotlight - iOS 5,6 3x）
- en: 80 x 80 px (iPhone Spotlight - iOS 7-10 2x)
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 80 x 80 px（iPhone Spotlight - iOS 7-10 2x）
- en: 120 x 120 px (iPhone Spotlight - iOS 7-10 3x && iPhone App ios 7-10 2x)
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 120 x 120 px（iPhone Spotlight - iOS 7-10 3x && iPhone App ios 7-10 2x）
- en: 180 x 180 px (iPhone App ios 7-10 3x)
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 180 x 180 px（iPhone App ios 7-10 3x）
- en: Since this is a very tedious process, we can use one of the online tools which
    automate all the resizing tasks by providing an image large enough. One of the
    most popular tools can be found at [https://resizeappicon.com/](https://resizeappicon.com/).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个非常繁琐的过程，我们可以使用在线工具之一，通过提供足够大的图像来自动完成所有调整大小的任务。最受欢迎的工具之一可以在[https://resizeappicon.com/](https://resizeappicon.com/)找到。
- en: 'Once we have our icon in the proper sizes, we need to add them to our XCode
    project. We will do this by clicking on `Images.xcassets` in XCode and adding
    each image with its corresponding size to each asset in this window:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了适当尺寸的图标，我们需要将它们添加到我们的XCode项目中。我们可以通过在XCode中点击`Images.xcassets`，并将每个图像与其相应的尺寸添加到此窗口中的每个资产来实现这一点：
- en: '![](Images/fa33b930-7d57-4042-bc25-51dd05c758d4.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fa33b930-7d57-4042-bc25-51dd05c758d4.png)'
- en: The next time we compile our app, we will see our new icon in the simulator
    (use *command* + *Shift* + *H* to show the home screen).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下次编译我们的应用程序时，我们将在模拟器中看到我们的新图标（使用*command* + *Shift* + *H*来显示主屏幕）。
- en: Adding a launch screen
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加启动画面
- en: 'The launch screen is an image iOS displays while your app is loading. There
    are several techniques to make this introduction pleasant for the user, like showing
    a preview of the user interface the user will see once the app is loaded. However,
    we will take a simpler approach: we will display the app logo with its title.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 启动画面是iOS在应用程序加载时显示的图像。有几种技术可以使这个介绍对用户愉快，比如显示用户界面的预览，用户一旦加载应用程序就会看到。然而，我们将采用更简单的方法：我们将显示带有标题的应用程序标志。
- en: 'The easiest and more flexible way to do this is to use the interface builder
    in XCode by clicking on `LaunchScreen.xib`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单和更灵活的方法是使用XCode中的界面构建器，通过点击`LaunchScreen.xib`来实现：
- en: '![](Images/8f92cf49-3334-4d35-9aaa-5c82395e214e.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8f92cf49-3334-4d35-9aaa-5c82395e214e.png）'
- en: An interface builder is a WYSIWYG tool, which helps developers building responsive
    screens by dragging and dropping components into a container. We kept it simple
    and just added a label with the name of the app and the same logo we used on the
    app icon.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 界面构建器是一个所见即所得的工具，它通过将组件拖放到容器中来帮助开发人员构建响应式屏幕。我们保持简单，只添加了一个带有应用程序名称和与应用程序图标相同的标志的标签。
- en: Another option could be to upload images as launch screens and remove the `LaunchScreen.xib` file,
    but then we would run the risk of stretching the images depending on which device
    the app is run, so the recommended approach is always to use the interface builder
    for launch screens.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择可能是将图像作为启动屏幕上传，并删除`LaunchScreen.xib`文件，但这样我们就会面临根据应用程序运行的设备而拉伸图像的风险，因此推荐的方法始终是使用界面构建器来制作启动屏幕。
- en: Disabling the landscape mode
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用横向模式
- en: 'When testing our app, we need to test both landscape and portrait modes as
    both will be enabled by default. In the case of this app, we don''t really need
    to have a landscape mode as it doesn''t add any extra value to the portrait mode.
    Having decided this point, we need to disable the landscape mode to ensure we
    don''t have any odd behavior in our user interface if the user orients the device
    as though for landscape mode. We will do this in XCode through the General tab
    when selecting the root of our project:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试我们的应用程序时，我们需要测试横向和纵向模式，因为两者都将默认启用。在这个应用程序的情况下，我们实际上不需要横向模式，因为它对纵向模式没有增加任何额外的价值。在决定了这一点之后，我们需要禁用横向模式，以确保如果用户将设备定向为横向模式，我们的用户界面不会出现任何奇怪的行为。我们将在XCode中通过选择项目根目录时的“常规”选项卡中完成这项工作：
- en: '![](Images/55e8eaaa-b928-41b9-9a97-e2eefc21cf09.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/55e8eaaa-b928-41b9-9a97-e2eefc21cf09.png)'
- en: We need to uncheck both Landscape Left and Landscape Right options to allow
    only portrait mode in all cases.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要取消勾选左横向和右横向选项，以便在所有情况下只允许纵向模式。
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The main challenge of this app was accessing a native module written in Objective-C
    from our JavaScript code. Fortunately, React Native has the means to ease the
    communication between those two worlds with relatively few lines of code.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序的主要挑战是从我们的JavaScript代码访问用Objective-C编写的本地模块。幸运的是，React Native有手段可以用相对较少的代码轻松实现这两个世界之间的通信。
- en: We focused only on iOS for this app, but the reality is that building the same
    app in Android should follow a very similar process taking into account that we
    should build our native module in Java instead of Objective-C. Besides, we learned
    the process of including an icon and a launch screen in our app to complete the
    development cycle prior to release.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只专注于iOS应用程序，但现实情况是，在Android中构建相同的应用程序应该遵循非常相似的过程，考虑到我们应该用Java而不是Objective-C构建我们的本地模块。此外，我们学会了在应用程序中包含图标和启动屏幕的过程，以完成发布前的开发周期。
- en: As we only had one screen in our app, we opted not to use any routing or state
    management libraries, which enabled us to keep the focus on the communication
    between our JavaScript code and the native module we implemented.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序只有一个屏幕，我们选择不使用任何路由或状态管理库，这使我们能够将重点放在我们的JavaScript代码和我们实现的本地模块之间的通信上。
- en: We also created some animations to emulate an analog tuner which gives an attractive
    and fun look to this app.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一些动画来模拟模拟调谐器，为这个应用程序增添了吸引人和有趣的外观。
- en: 'Besides the icon and the launch screen, we also took care of another visual
    element, which is important in many apps: the status bar. We saw how easy it is
    to change its content colors depending on what our app looks like. In this case,
    we opted for a dark background, so we needed light content in the status bar,
    although some apps (like games) may look better with no status bar at all.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 除了图标和启动屏幕外，我们还注意到了另一个在许多应用程序中很重要的视觉元素：状态栏。我们看到了根据我们的应用程序外观轻松更改其内容颜色有多容易。在这种情况下，我们选择了深色背景，因此我们需要在状态栏中使用浅色内容，尽管一些应用程序（如游戏）可能在没有状态栏的情况下看起来更好。
- en: 'We will move to a different kind of app in the next chapter: a messaging app.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将转向一种不同类型的应用程序：即消息应用程序。
