["```jsx\nreact-native init --version=\"0.45.1\" guitarTuner\n```", "```jsx\n/*** package.json ***/\n\n{\n        \"name\": \"guitarTuner\",\n        \"version\": \"0.0.1\",\n        \"private\": true,\n        \"scripts\": {\n                \"start\": \"node node_modules/react-native/\n                local-cli/cli.js start\",\n                \"test\": \"jest\"\n        },\n        \"dependencies\": {\n                \"react\": \"16.0.0-alpha.12\",\n                \"react-native\": \"0.45.1\"\n        },\n        \"devDependencies\": {\n                \"babel-jest\": \"20.0.3\",\n                \"babel-preset-react-native\": \"2.0.0\",\n                \"jest\": \"20.0.4\",\n                \"react-test-renderer\": \"16.0.0-alpha.12\"\n        },\n        \"jest\": {\n                \"preset\": \"react-native\"\n        }\n}\n```", "```jsx\n<key>NSMicrophoneUsageDescription</key><key>NSMicrophoneUsageDescription</key> \n<string>This app uses the microphone to detect what guitar \n         string is being pressed.\n</string>\n```", "```jsx\n/*** FrequencyDetector.h ***/\n\n#import <React/RCTBridgeModule.h>\n#import <Accelerate/Accelerate.h>\n\n@interface FrequencyDetector : NSObject \n@end\n```", "```jsx\n/*** FrequencyDetector.m ***/\n\n#import \"FrequencyDetector.h\"\n#import \"SCListener.h\"\n\nNSString *freq = @\"\";\n\n@implementation FrequencyDetector\n\nRCT_EXPORT_MODULE();\n\nRCT_EXPORT_METHOD(getFrequency:(RCTResponseSenderBlock)callback)\n{\n  double power = [[SCListener sharedListener] averagePower];\n  if(power < 0.03) { //ignore low volumes\n    freq = @\"0\";\n  } else {\n    freq = [NSString stringWithFormat:@\"%0.3f\",\n           [[SCListener sharedListener] frequency]];\n  }\n  callback(@[[NSNull null], freq]);\n}\n\nRCT_EXPORT_METHOD(initialise)\n{\n  [[SCListener sharedListener] listen];\n}\n\n@end\n```", "```jsx\nimport { NativeModules } from 'react-native';\nvar FrequencyDetector = NativeModules.FrequencyDetector;\n\nFrequencyDetector.initialise();\nFrequencyDetector.getFrequency((res, freq) => {});\n```", "```jsx\n/*** index.ios.js ***/\n\n...\n\nvar FrequencyDetector = NativeModules.FrequencyDetector;\n\nexport default class guitarTuner extends Component {\n\n  ...\n\n  componentWillMount() {\n FrequencyDetector.initialise();\n    setInterval(() => {\n      FrequencyDetector.getFrequency((res, freq) => {\n        let stringData = getClosestString(parseInt(freq));\n        if(!stringData) {\n          this.setState({\n            delta: null,\n            activeString: null\n          });\n        } else {\n          this.setState({\n            delta: stringData.delta,\n            activeString: stringData.number\n          });\n        }\n      });\n    }, 500);\n  }\n\n ...\n\n});\n\nAppRegistry.registerComponent('guitarTuner', () => guitarTuner);\n```", "```jsx\n/*** src/utils/index.js ***/\n\nconst stringFrequencies = [\n  { min: 287, max: 371, tuned: 329 },\n  { min: 221, max: 287, tuned: 246 },\n  { min: 171, max: 221, tuned: 196 },\n  { min: 128, max: 171, tuned: 146 },\n  { min: 96, max: 128, tuned: 110 },\n  { min: 36, max: 96, tuned: 82}\n];\n\nexport function getClosestString(freq) {\n  let stringData = null;\n  for(var i = 0; i < stringFrequencies.length; i++) {\n    if(stringFrequencies[i].min < freq && stringFrequencies[i].max \n       >= freq){\n      let delta = freq - stringFrequencies[i].tuned; //absolute delta\n      if(delta > 0){\n        delta = Math.floor(delta * 100 / (stringFrequencies[i].max - \n                           stringFrequencies[i].tuned));\n      } else {\n        delta = Math.floor(delta * 100 / (stringFrequencies[i].tuned - \n                           stringFrequencies[i].min));\n      }\n      if(delta > 75) delta = 75; //limit deltas\n      if(delta < -75) delta = -75;\n      stringData = { number: 6 - i, delta } //relative delta\n      break;\n    }\n  }\n  return stringData;\n}\n\nexport const colors = {\n  black: '#1f2025',\n  yellow: '#f3c556',\n  green: '#3bd78b'\n}\n\n```", "```jsx\n/*** index.ios.js ***/\n\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Image,\n  View,\n  NativeModules,\n  Animated,\n  Easing,\n  StatusBar,\n  Text\n} from 'react-native';\nimport Tuner from './src/components/Tuner';\nimport Strings from './src/components/Strings';\nimport { getClosestString, colors } from './src/utils/';\n\nvar FrequencyDetector = NativeModules.FrequencyDetector;\n\nexport default class guitarTuner extends Component {\n  state = {\n delta: null,\n    activeString: null\n  }\n\n  componentWillMount() {\n    FrequencyDetector.initialise();\n    setInterval(() => {\n      FrequencyDetector.getFrequency((res, freq) => {\n        let stringData = getClosestString(parseInt(freq));\n        if(!stringData) {\n          this.setState({\n            delta: null,\n            activeString: null\n          });\n        } else {\n          this.setState({\n            delta: stringData.delta,\n            activeString: stringData.number\n          });\n        }\n      });\n    }, 500);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n <StatusBar barStyle=\"light-content\"/>\n        <Tuner delta={this.state.delta} />\n        <Strings activeString={this.state.activeString}/>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.black,\n    flex: 1\n  }\n});\n\nAppRegistry.registerComponent('guitarTuner', () => guitarTuner);\n```", "```jsx\n/*** src/components/Tuner/index ***/\n\nimport React, { Component } from 'react';\nimport {\n  StyleSheet,\n  Image,\n  View,\n  Animated,\n  Easing,\n  Dimensions\n} from 'react-native';\n\nimport { colors } from '../utils/';\n\nvar {height, width} = Dimensions.get('window');\n\nexport default class Tuner extends Component {\n  state = {\n xIndicator:  new Animated.Value(width/2)\n  }\n\n  static propTypes = {\n    delta: React.PropTypes.number\n  }\n\n  componentWillReceiveProps(newProps) {\n    if(this.props.delta !== newProps.delta) {\n      Animated.timing(\n        this.state.xIndicator,\n        {\n          toValue: (width/2) + (newProps.delta*width/2)/100,\n          duration: 500,\n          easing: Easing.elastic(2)\n        }\n      ).start();\n    }\n  }\n\n  render() {\n    let { xIndicator } = this.state;\n\n    return (\n      <View style={styles.tunerContainer}>\n        <Image source={require('../../img/tuner.jpg')} \n         style={styles.tuner}/>\n <Animated.Image source={require('../../img/indicator.jpg')} \n         style={[styles.indicator, {left: xIndicator}]}/>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  tunerContainer: {\n    flex: 1,\n    backgroundColor: colors.black,\n    marginTop: height * 0.05\n  },\n  tuner: {\n    width,\n    resizeMode: 'contain'\n  },\n  indicator: {\n    position: 'absolute',\n    top: 10\n  }\n});\n```", "```jsx\n/*** src/components/Strings ***/\n\nimport React, { Component } from 'react';\nimport {\n  StyleSheet,\n  Image,\n  View,\n  Text\n} from 'react-native';\n\nimport { colors } from '../utils/';\n\nconst stringNotes = ['E','A','D','G','B','E'];\n\nexport default class Strings extends Component {\n static propTypes = {\n    activeString: React.PropTypes.number\n  }\n\n  render() {\n    return (\n      <View style={styles.stringsContainer}>\n        {\n          stringNotes.map((note, i) => {\n            return (\n              <View key={i} style={styles.stringContainer}>\n                <Image source={require('../../img/string.jpg')} \n                 style={styles.string}/>\n                <View style={[styles.noteContainer, \n                 {borderColor: (this.props.activeString === (i+1))\n                  ? '#3bd78b' : '#f3c556'}]}>\n                  <Text style={styles.note}>\n                    {note}\n                  </Text>\n                </View>\n              </View>\n            )\n          })\n        }\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  stringsContainer: {\n    borderTopColor: colors.green,\n    borderTopWidth: 5,\n justifyContent: 'space-around',\n    flexDirection: 'row'\n  },\n  stringContainer: {\n    alignItems: 'center'\n  },\n  note: {\n    color: 'white',\n    fontSize: 19,\n    textAlign: 'center'\n  },\n  noteContainer: {\n    top: 50,\n    height: 50,\n    width: 50,\n    position: 'absolute',\n    padding: 10,\n    borderColor: colors.yellow,\n    borderWidth: 3,\n    borderRadius: 25,\n    backgroundColor: colors.black\n  }\n});\n```"]