["```jsx\nreact-native init --version=\"0.49.3\" RSSReader\n```", "```jsx\n{ \n  \"name\":\"rssReader\",\n  \"version\":\"0.0.1\",\n  \"private\":true,\n  \"scripts\":{ \n  \"start\":\"node node_modules/react-native/local-cli/cli.js start\",\n  \"test\":\"jest\"\n  },\n  \"dependencies\":{ \n  \"mobx\":\"^3.1.9\",\n  \"mobx-react\":\"^4.1.8\",\n  \"native-base\":\"^2.1.3\",\n  \"react\":\"16.0.0-beta.5\",\n    \"react-native\": \"0.49.3\",\n  \"react-native-vector-icons\":\"^4.1.1\",\n  \"react-navigation\":\"^1.0.0-beta.9\",\n  \"simple-xml2json\":\"^1.2.3\"\n  },\n  \"devDependencies\":{ \n  \"babel-jest\":\"20.0.0\",\n  \"babel-plugin-transform-decorators-legacy\":\"^1.3.4\",\n  \"babel-preset-react-native\":\"1.9.1\",\n  \"babel-preset-react-native-stage-0\":\"^1.0.1\",\n  \"jest\":\"20.0.0\",\n  \"react-test-renderer\":\"16.0.0-alpha.6\"\n  },\n  \"jest\":{ \n  \"preset\":\"react-native\"\n  }\n}\n```", "```jsx\nnpm install\n```", "```jsx\nreact-native run-ios\n```", "```jsx\nreact-native run-android\n```", "```jsx\nreact-native link\n```", "```jsx\n/*** src/store.js ***/\n\nimport {observable} from 'mobx';\n\nclass Store {\n @observable feeds;\n\n ...\n\n constructor() {\n   this.feeds = [];\n }\n\n addFeed(url, feed) {\n   this.feeds.push({ \n     url, \n     entry: feed.entry,\n     title: feed.title,\n     updated: feed.updated\n   });\n   this._persistFeeds();\n }\n\n ...\n\n}\n\nconst store = new Store()\nexport default store\n```", "```jsx\nimport React from 'react';\nimport { Container, Content, List, ListItem, Text } from 'native-base';\nimport { observer } from 'mobx-react/native';\n\n@observer\nexport default class FeedsList extends React.Component {\n\n render() {\n  const { feeds } = this.props.screenProps.store;\n  return (\n    <Container>\n      <Content>\n        <List>\n          {feeds &&\n            feeds.map((f, i) => (\n              <ListItem key={i}>\n                <Text>{f.title}</Text>\n              </ListItem>\n            ))}\n        </List>\n      </Content>\n    </Container>\n  );\n }\n}\n\n```", "```jsx\n/*** src/store.js ** */\n\nimport { observable } from 'mobx';\nimport { AsyncStorage } from 'react-native';\n\nclass Store {\n  @observable feeds;\n  @observable selectedFeed;\n  @observable selectedEntry;\n\n  constructor() {\n    AsyncStorage.getItem('@feeds').then(sFeeds => {\n      this.feeds = JSON.parse(sFeeds) || [];\n    });\n  }\n\n  _persistFeeds() {\n    AsyncStorage.setItem('@feeds', JSON.stringify(this.feeds));\n  }\n\n  addFeed(url, feed) {\n    this.feeds.push({\n      url,\n      entry: feed.entry,\n      title: feed.title,\n      updated: feed.updated,\n    });\n    this._persistFeeds();\n  }\n\n  removeFeed(url) {\n    this.feeds = this.feeds.filter(f => f.url !== url);\n    this._persistFeeds();\n  }\n\n  selectFeed(feed) {\n    this.selectedFeed = feed;\n  }\n\n  selectEntry(entry) {\n    this.selectedEntry = entry;\n  }\n}\n\nconst store = new Store();\nexport default store;\n```", "```jsx\n/*** actions.js ** */\n\nimport store from './store';\nimport xml2json from 'simple-xml2json';\n\nexport async function fetchFeed(url) {\n  const response = await fetch(url);\n  const xml = await response.text();\n  const json = xml2json.parser(xml);\n  return {\n    entry:\n      (json.feed && json.feed.entry) || (json.rss && \n      json.rss.channel.item),\n    title:\n      (json.feed && json.feed.title) || (json.rss && \n      json.rss.channel.title),\n    updated: (json.feed && json.feed.updated) || null,\n  };\n}\n\nexport function selectFeed(feed) {\n  store.selectFeed(feed);\n}\n\nexport function selectEntry(entry) {\n  store.selectEntry(entry);\n}\n\nexport function addFeed(url, feed) {\n  store.addFeed(url, feed);\n}\n\nexport function removeFeed(url) {\n  store.removeFeed(url);\n}\n```", "```jsx\n/*** index.js ***/\n\nimport { AppRegistry } from 'react-native';\nimport App from './src/main';\nAppRegistry.registerComponent('rssReader', () => App);\n```", "```jsx\n/** * src/main.js ***/\n\nimport React from 'react';\nimport { StackNavigator } from 'react-navigation';\n\nimport FeedsList from './screens/FeedsList.js';\nimport FeedDetail from './screens/FeedDetail.js';\nimport EntryDetail from './screens/EntryDetail.js';\nimport AddFeed from './screens/AddFeed.js';\n\nimport store from './store';\n\nconst Navigator = StackNavigator({\n  FeedsList: { screen: FeedsList },\n  FeedDetail: { screen: FeedDetail },\n  EntryDetail: { screen: EntryDetail },\n  AddFeed: { screen: AddFeed },\n});\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return <Navigator screenProps={{ store }} />;\n  }\n}\n```", "```jsx\n/** * src/screens/FeedsList.js ***/\n\nimport React from 'react';\nimport { Container, Content, List, ListItem, Text } from 'native-base';\n\nexport default class FeedsList extends React.Component {\n  render() {\n    const { feeds } = this.props.screenProps.store;\n    return (\n      <Container>\n        <Content>\n          <List>\n            {feeds &&\n              feeds.map((f, i) => (\n              <ListItem key={i}>\n              <Text>{f.title}</Text>\n              </ListItem>\n             ))\n          </List>\n        </Content>\n      </Container>\n    );\n  }\n}\n```", "```jsx\n...\n\n@observer\nexport default class FeedsList extends React.Component {\n\n...\n```", "```jsx\n/** * src/screens/FeedsList.js ***/\n\n...\n\n@observer\nexport default class FeedsList extends React.Component {\n  _handleFeedPress(feed) {\n    selectFeed(feed);\n    this.props.navigation.navigate('FeedDetail', { feedUrl: feed.url });\n  }\n\n  render() {\n    const { feeds } = this.props.screenProps.store;\n    return (\n      <Container>\n        <Content>\n          <List>\n            {feeds &&\n              feeds.map((f, i) => (\n              <ListItem key={i} onPress=\n              {this._handleFeedPress.bind(this, f)}>\n              <Text>{f.title}</Text>\n              </ListItem>\n             ))\n            }\n          </List>\n        </Content>\n      </Container>\n    );\n  }\n}\n\n...\n```", "```jsx\n/** * src/screens/FeedsList.js ***/\n\n...\n\n@observer\nexport default class FeedsList extends React.Component {\n  static navigationOptions = props => ({\n    title: 'My Feeds',\n    headerRight: (\n      <Button transparent onPress={() => \n      props.navigation.navigate('AddFeed')}>\n        <Icon name=\"add\" />\n      </Button>\n    ),\n  });\n\n...\n\n}\n```", "```jsx\n/*** src/screens/FeedsList.js ** */\n\nimport React from 'react';\nimport {\n  Container,\n  Content,\n  List,\n  ListItem,\n  Text,\n  Icon,\n  Button,\n} from 'native-base';\nimport { observer } from 'mobx-react/native';\nimport { selectFeed, removeFeed } from '../actions';\n\n@observer\nexport default class FeedsList extends React.Component {\n  static navigationOptions = props => ({\n    title: 'My Feeds',\n    headerRight: (\n      <Button transparent onPress={() => \n       props.navigation.navigate('AddFeed')}>\n        <Icon name=\"add\" />\n      </Button>\n    ),\n  });\n\n  _handleFeedPress(feed) {\n    selectFeed(feed);\n    this.props.navigation.navigate('FeedDetail', { feedUrl: feed.url });\n  }\n\n  render() {\n    const { feeds } = this.props.screenProps.store;\n    return (\n      <Container>\n        <Content>\n          <List>\n            {feeds &&\n              feeds.map((f, i) => (\n              <ListItem key={i} onPress=\n              {this._handleFeedPress.bind(this, f)}>\n              <Text>{f.title}</Text>\n              </ListItem>\n             ))\n          </List>\n        </Content>\n      </Container>\n    );\n  }\n}\n```", "```jsx\n/*** src/screens/AddFeed.js ** */\n\nimport React from 'react';\nimport {\n  Container,\n  Content,\n  Form,\n  Item,\n  Input,\n  Button,\n  Text,\n} from 'native-base';\nimport { addFeed, fetchFeed } from '../actions';\nimport { Alert, ActivityIndicator } from 'react-native';\n\nexport default class AddFeed extends React.Component {\n  static navigationOptions = {\n    title: 'Add feed',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: '',\n      loading: false,\n    };\n  }\n\n  _handleAddPress() {\n    if (this.state.url.length > 0) {\n      this.setState({ loading: true });\n      fetchFeed(this.state.url)\n        .then(feed => {\n          addFeed(this.state.url, feed);\n          this.setState({ loading: false });\n          this.props.navigation.goBack();\n        })\n        .catch(() => {\n          Alert.alert(\"Couldn't find any rss feed on that url\");\n          this.setState({ loading: false });\n        });\n    }\n  }\n\n  render() {\n    return (\n      <Container style={{ padding: 10 }}>\n        <Content>\n          <Form>\n            <Item>\n              <Input\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                placeholder=\"feed's url\"\n                onChangeText={url => this.setState({ url })}\n              />\n            </Item>\n            <Button\n              block\n              style={{ marginTop: 20 }}\n              onPress={this._handleAddPress.bind(this)}\n            >\n              {this.state.loading && (\n                <ActivityIndicator color=\"white\" style={{ margin: 10 }}  \n                />\n              )}\n              <Text>Add</Text>\n            </Button>\n          </Form>\n        </Content>\n      </Container>\n    );\n  }\n}\n```", "```jsx\n{ this.state.loading && <ActivityIndicator color='white' style={{margin: 10}}/>}\n```", "```jsx\n_handleFeedPress(feed) {\n  selectFeed(feed);\n  this.props.navigation.navigate('FeedDetail', { feedUrl: feed.url });\n}\n```", "```jsx\n/*** src/screens/FeedDetail.js ***/\n\nimport React from 'react';\nimport { observer } from 'mobx-react/native';\nimport { fetchFeed} from '../actions';\n\n@observer\nexport default class FeedDetail extends React.Component {\n ... \n\n constructor (props) {\n  super(props);\n  this.state = {\n    loading: false,\n    entry: null\n  }\n }\n\n componentWillMount() {\n  this.setState({ loading: true });\n  fetchFeed(this.props.screenProps.store.selectedFeed.url)\n   .then((feed) => {\n    this.setState({ loading: false });\n    this.setState({ entry: feed.entry});\n  });\n }\n\n ...\n\n}\n```", "```jsx\n/** * src/screens/FeedDetail.js ** */\n\nimport React from 'react';\nimport {\n  Container,\n  Content,\n  List,\n  ListItem,\n  Text,\n  Button,\n  Icon,\n  Spinner,\n} from 'native-base';\nimport { observer } from 'mobx-react/native';\nimport { fetchFeed } from '../actions';\nimport { ActivityIndicator } from 'react-native';\n\n@observer\nexport default class FeedDetail extends React.Component {\n\n  ...\n\n  render() {\n    const { entry } = this.state;\n\n    return (\n      <Container>\n        <Content>\n          {this.state.loading && <ActivityIndicator style=\n          {{ margin: 20 }} />}\n          <List>\n            {entry &&\n              entry.map((e, i) => (\n                <ListItem key={i}>\n                  <Text>{e.title}</Text>\n                </ListItem>\n              ))}\n          </List>\n        </Content>\n      </Container>\n    );\n  }\n}\n```", "```jsx\n/** * src/screens/FeedDetail.js ** */\n\nimport React from 'react';\nimport {\n  Container,\n  Content,\n  List,\n  ListItem,\n  Text,\n  Button,\n  Icon,\n  Spinner,\n} from 'native-base';\nimport { observer } from 'mobx-react/native';\nimport { selectEntry, fetchFeed } from '../actions';\nimport { ActivityIndicator } from 'react-native';\n\n@observer\nexport default class FeedDetail extends React.Component {\n\n  ...\n\n  _handleEntryPress(entry) {\n    selectEntry(entry);\n    this.props.navigation.navigate('EntryDetail');\n  }\n\n  render() {\n    const { entry } = this.state;\n\n    return (\n      <Container>\n        <Content>\n          {this.state.loading && <ActivityIndicator style=\n          {{ margin: 20 }} />}\n          <List>\n            {entry &&\n              entry.map((e, i) => (\n                <ListItem\n                  key={i}\n                  onPress={this._handleEntryPress.bind(this, e)}\n                >\n                  <Text>{e.title}</Text>\n                </ListItem>\n              ))}\n          </List>\n        </Content>\n      </Container>\n    );\n  }\n}\n```", "```jsx\n/** * src/screens/FeedDetail.js ** */\n\n...\n\n@observer\nexport default class FeedDetail extends React.Component {\n  static navigationOptions = props => ({\n    title: props.screenProps.store.selectedFeed.title,\n    headerRight: (\n      <Button\n        transparent\n        onPress={() => {\n          removeFeed(props.navigation.state.params.feedUrl);\n          props.navigation.goBack();\n        }}\n      >\n        <Icon name=\"trash\" />\n      </Button>\n    ),\n  });\n\n  ...\n\n}\n```", "```jsx\n/*** src/screens/FeedDetail.js ** */\n\nimport React from 'react';\nimport {\n  Container,\n  Content,\n  List,\n  ListItem,\n  Text,\n  Button,\n  Icon,\n  Spinner,\n} from 'native-base';\nimport { observer } from 'mobx-react/native';\nimport { selectEntry, fetchFeed, removeFeed } from '../actions';\nimport { ActivityIndicator } from 'react-native';\n\n@observer\nexport default class FeedDetail extends React.Component {\n  static navigationOptions = props => ({\n    title: props.screenProps.store.selectedFeed.title,\n    headerRight: (\n      <Button\n        transparent\n        onPress={() => {\n          removeFeed(props.navigation.state.params.feedUrl);\n          props.navigation.goBack();\n        }}\n      >\n        <Icon name=\"trash\" />\n      </Button>\n    ),\n  });\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      entry: null,\n    };\n  }\n\n  componentWillMount() {\n    this.setState({ loading: true });\n    fetchFeed(this.props.screenProps.store.selectedFeed.url).\n    then(feed => {\n      this.setState({ loading: false });\n      this.setState({ entry: feed.entry });\n    });\n  }\n\n  _handleEntryPress(entry) {\n    selectEntry(entry);\n    this.props.navigation.navigate('EntryDetail');\n  }\n\n  render() {\n    const { entry } = this.state;\n\n    return (\n      <Container>\n        <Content>\n          {this.state.loading && <ActivityIndicator style=\n          {{ margin: 20 }} />}\n          <List>\n            {entry &&\n              entry.map((e, i) => (\n              <ListItem key={i} onPress=\n              {this._handleEntryPress.bind(this, e)}>\n              <Text>{e.title}</Text>\n          </ListItem>\n          ))\n          </List>\n        </Content>\n      </Container>\n    );\n  }\n}\n```", "```jsx\nimport React from 'react';\nimport { Container, Content } from 'native-base';\nimport { WebView } from 'react-native';\n\nexport default class EntryDetail extends React.Component {\n  render() {\n    const entry = this.props.screenProps.store.selectedEntry;\n    return <WebView source={{ uri: entry.link.href || entry.link }} />;\n  }\n}\n```"]