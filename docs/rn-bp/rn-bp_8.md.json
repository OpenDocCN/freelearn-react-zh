["```jsx\nreact-native init --version=\"0.48.3\" ecommerce \n```", "```jsx\n/*** package.json ***/\n\n{\n  \"name\": \"ecommerce\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start\",\n    \"test\": \"jest\",\n    \"ios\": \"react-native run-ios\",\n    \"android\": \"react-native run-android\"\n  },\n  \"dependencies\": {\n \"native-base\": \"^2.3.1\",\n \"prop-types\": \"^15.5.10\",\n    \"react\": \"16.0.0-alpha.12\",\n    \"react-native\": \"0.48.3\",\n \"react-native-credit-card-input\": \"^0.3.3\",\n \"react-navigation\": \"^1.0.0-beta.11\",\n \"react-redux\": \"^5.0.6\",\n \"redux\": \"^3.7.2\",\n \"redux-thunk\": \"^2.2.0\"\n  },\n  \"devDependencies\": {\n \"babel-eslint\": \"^7.2.3\",\n    \"babel-jest\": \"20.0.3\",\n    \"babel-plugin-lodash\": \"^3.2.11\",\n    \"babel-plugin-module-resolver\": \"^2.7.1\",\n    \"babel-plugin-transform-builtin-extend\": \"^1.1.2\",\n    \"babel-plugin-transform-react-jsx-source\": \"^6.22.0\",\n    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n    \"babel-preset-env\": \"^1.6.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"babel-preset-react-native\": \"2.0.0\",\n    \"babel-preset-stage-0\": \"^6.24.1\",\n \"eslint-config-airbnb\": \"^15.1.0\",\n    \"eslint-config-prettier\": \"^2.3.0\",\n    \"eslint-config-rallycoding\": \"^3.2.0\",\n    \"eslint-import-resolver-babel-module\": \"^3.0.0\",\n    \"eslint-import-resolver-webpack\": \"^0.8.3\",\n    \"eslint-plugin-flowtype\": \"^2.35.0\",\n    \"eslint-plugin-import\": \"^2.7.0\",\n    \"eslint-plugin-jsx-a11y\": \"^5.1.1\",\n    \"eslint-plugin-prettier\": \"^2.1.2\",\n    \"eslint-plugin-react\": \"^7.2.0\",\n    \"eslint-plugin-react-native\": \"^3.0.1\",\n    \"jest\": \"20.0.4\",\n \"prettier\": \"^1.5.3\",\n    \"prettier-package-json\": \"^1.4.0\",\n    \"react-test-renderer\": \"16.0.0-alpha.12\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\"\n  }\n}\n```", "```jsx\nnpm install\n```", "```jsx\n/*** .eslintrc ***/\n\n{\n  \"extends\": [\"airbnb\", \"prettier\", \"prettier/react\", \"prettier/flowtype\"],\n  \"globals\": {\n    \"queryTree\": false\n  },\n \"plugins\": [\"react\", \"react-native\", \"flowtype\", \"prettier\"],\n  \"env\": { \"es6\": true, \"jest\": true },\n  \"parser\": \"babel-eslint\",\n  \"rules\": {\n    \"prettier/prettier\": [\n \"error\",\n {\n \"trailingComma\": \"all\",\n \"singleQuote\": true,\n \"bracketSpacing\": true,\n \"tabWidth\": 2\n }\n ],\n\n    ...\n\n}\n```", "```jsx\n/*** index.ios.js and index.android.js ***/ \n\nimport { AppRegistry } from 'react-native';\nimport App from './src/main';\n\nAppRegistry.registerComponent('ecommerce', () => App);\n\n```", "```jsx\n/*** src/main.js ***/\n\nimport React from 'react';\nimport {\n  DrawerNavigator,\n  TabNavigator,\n  StackNavigator,\n} from 'react-navigation';\nimport { Platform } from 'react-native';\n\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport paymentsReducer from './reducers/payments';\nimport productsReducer from './reducers/products';\nimport userReducer from './reducers/user';\n\nimport ProductList from './screens/ProductList';\nimport ProductDetail from './screens/ProductDetail';\nimport MyCart from './screens/MyCart';\nimport MyProfile from './screens/MyProfile';\nimport Payment from './screens/Payment';\nimport PaymentConfirmation from './screens/PaymentConfirmation';\nimport Sales from './screens/Sales';\n\nconst ProductsNavigator = StackNavigator({\n ProductList: { screen: ProductList },\n ProductDetail: { screen: ProductDetail },\n});\n\nconst PurchaseNavigator = StackNavigator({\n MyCart: { screen: MyCart },\n Payment: { screen: Payment },\n PaymentConfirmation: { screen: PaymentConfirmation },\n});\n\nlet Navigator;\nif (Platform.OS === 'ios') {\n Navigator = TabNavigator(\n {\n Home: { screen: ProductsNavigator },\n MyCart: { screen: PurchaseNavigator },\n MyProfile: { screen: MyProfile },\n Sales: { screen: Sales },\n },\n {\n tabBarOptions: {\n inactiveTintColor: '#aaa',\n activeTintColor: '#000',\n showLabel: true,\n },\n },\n );\n} else {\n Navigator = DrawerNavigator({\n Home: { screen: ProductsNavigator },\n MyCart: { screen: MyCart },\n MyProfile: { screen: MyProfile },\n Sales: { screen: Sales },\n });\n}\n\nconst store = createStore(\n combineReducers({ paymentsReducer, productsReducer, userReducer }),\n applyMiddleware(thunk),\n);\n\nexport default () => (\n  <Provider store={store}>\n <Navigator />\n  </Provider>\n);\n```", "```jsx\nconst store = createStore(\n  combineReducers({ paymentsReducer, productsReducer, userReducer }),\n  applyMiddleware(thunk),\n);\n```", "```jsx\n/*** src/reducers/products.js ***/\n\nimport { get } from '../api';\n\n// Actions\nconst FETCH = 'products/FETCH';\nconst FETCH_SUCCESS = 'products/FETCH_SUCCESS';\nconst FETCH_ERROR = 'products/FETCH_ERROR';\nconst ADD_TO_CART = 'products/ADD_TO_CART';\nconst REMOVE_FROM_CART = 'products/REMOVE_FROM_CART';\nconst RESET_CART = 'products/RESET_CART';\n\n// Reducer\nconst initialState = {\n  loading: false,\n  cart: [],\n  products: [],\n};\nexport default function reducer(state = initialState, action = {}) {\n  let product;\n  let i;\n  switch (action.type) {\n case FETCH:\n      return { ...state, loading: true };\n case FETCH_SUCCESS:\n      return {\n        ...state,\n        products: action.payload.products,\n        loading: false,\n        error: null,\n      };\n case FETCH_ERROR:\n      return { ...state, error: action.payload.error, loading: false };\n case ADD_TO_CART:\n      product = state.cart.find(p => p.id === \n                action.payload.product.id);\n      if (product) {\n        product.quantity += 1;\n        return {\n          ...state,\n          cart: state.cart.slice(),\n        };\n      }\n      product = action.payload.product;\n      product.quantity = 1;\n      return {\n        ...state,\n        cart: state.cart.slice().concat([action.payload.product]),\n      };\n case REMOVE_FROM_CART:\n      i = state.cart.findIndex(p => p.id === \n          action.payload.product.id);\n      if (state.cart[i].quantity === 1) {\n        state.cart.splice(i, 1);\n      } else {\n        state.cart[i].quantity -= 1;\n      }\n      return {\n        ...state,\n        cart: state.cart.slice(),\n      };\n case RESET_CART:\n      return {\n        ...state,\n        cart: [],\n      };\n default:\n      return state;\n  }\n}\n\n// Action Creators\nexport function addProductToCart(product) {\n  return { type: ADD_TO_CART, payload: { product } };\n}\n\nexport function removeProductFromCart(product) {\n  return { type: REMOVE_FROM_CART, payload: { product } };\n}\n\nexport function fetchProducts() {\n  return dispatch => {\n    dispatch({ type: FETCH });\n    get('/products')\n      .then(products =>\n        dispatch({ type: FETCH_SUCCESS, payload: { products } }),\n      )\n      .catch(error => dispatch({ type: FETCH_ERROR, payload: { error } }));\n  };\n}\n\nexport function resetCart() {\n  return { type: RESET_CART };\n}\n```", "```jsx\n/*** src/reducers/user.js ***/\n\nimport { post } from '../api';\n\n// Actions\nconst LOGIN = 'user/LOGIN';\nconst LOGIN_SUCCESS = 'user/LOGIN_SUCCESS';\nconst LOGIN_ERROR = 'user/LOGIN_ERROR';\nconst REGISTER = 'user/REGISTER';\nconst REGISTER_SUCCESS = 'user/REGISTER_SUCCESS';\nconst REGISTER_ERROR = 'user/REGISTER_ERROR';\nconst LOGOUT = 'user/LOGOUT';\n\n// Reducer\nexport default function reducer(state = {}, action = {}) {\n  switch (action.type) {\n case LOGIN:\n case REGISTER:\n      return { ...state, user: null, loading: true, error: null };\n case LOGIN_SUCCESS:\n case REGISTER_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        loading: false,\n        error: null,\n      };\n case LOGIN_ERROR:\n case REGISTER_ERROR:\n      return {\n        ...state,\n        user: null,\n        loading: false,\n        error: action.payload.error,\n      };\n case LOGOUT:\n      return {\n        ...state,\n        user: null,\n      };\n    default:\n      return state;\n  }\n}\n\n// Action Creators\nexport function login({ email, password }) {\n  return dispatch => {\n    dispatch({ type: LOGIN });\n    post('/login', { email, password })\n      .then(user => dispatch({ type: LOGIN_SUCCESS, \n       payload: { user } }))\n      .catch(error => dispatch({ type: LOGIN_ERROR,\n       payload: { error } }));\n  };\n}\n\nexport function register({\n  email,\n  repeatEmail,\n  name,\n  password,\n  address,\n  postcode,\n  city,\n}) {\n  if (\n    !email ||\n    !repeatEmail ||\n    !name ||\n    !password ||\n    !name ||\n    !address ||\n    !postcode ||\n    !city\n  ) {\n    return {\n      type: REGISTER_ERROR,\n      payload: { error: 'All fields are mandatory' },\n    };\n  }\n  if (email !== repeatEmail) {\n    return {\n      type: REGISTER_ERROR,\n      payload: { error: \"Email fields don't match\" },\n    };\n  }\n  return dispatch => {\n    dispatch({ type: REGISTER });\n    post('/register', {\n      email,\n      name,\n      password,\n      address,\n      postcode,\n      city,\n    })\n      .then(user => dispatch({ type: REGISTER_SUCCESS, payload: \n                    { user } }))\n      .catch(error => dispatch({ type: REGISTER_ERROR, payload: \n                    { error } }));\n  };\n}\n\nexport function logout() {\n  return { type: LOGOUT };\n}\n```", "```jsx\n/*** src/reducers/payments.js ***/\n\nimport { post } from '../api';\n\n// Actions\nconst PAY = 'products/PAY';\nconst PAY_SUCCESS = 'products/PAY_SUCCESS';\nconst PAY_ERROR = 'products/PAY_ERROR';\nconst RESET_PAYMENT = 'products/RESET_PAYMENT';\n\n// Reducer\nexport default function reducer(state = {}, action = {}) {\n  switch (action.type) {\n    case PAY:\n      return { ...state, loading: true, paymentConfirmed: false, \n               error: null };\n    case PAY_SUCCESS:\n      return {\n        ...state,\n        paymentConfirmed: true,\n        loading: false,\n        error: null,\n      };\n    case PAY_ERROR:\n      return {\n        ...state,\n        loading: false,\n        paymentConfirmed: false,\n        error: action.payload.error,\n      };\n    case RESET_PAYMENT:\n      return { loading: false, paymentConfirmed: false, error: null };\n    default:\n      return state;\n  }\n}\n\n// Action Creators\nexport function pay(user, cart, card) {\n  return dispatch => {\n    dispatch({ type: PAY });\n    post('/pay', { user, cart, card })\n      .then(() => dispatch({ type: PAY_SUCCESS }))\n      .catch(error => dispatch({ type: PAY_ERROR, \n             payload: { error } }));\n  };\n}\n\nexport function resetPayment() {\n  return { type: RESET_PAYMENT };\n}\n```", "```jsx\n/*** src/api.js ***/\n\nexport const get = uri =>\n  new Promise(resolve => {\n    let response;\n\n    switch (uri) {\n      case '/products':\n        response = [\n          {\n            id: 1,\n            name: 'Mastering Docker - Second Edition',\n            author: 'James Cameron',\n            img:\n              'https://d1ldz4te4covpm.cloudfront.net/sites/default\n              /files/imagecache/ppv4_main_book_cover\n              /B06565_MockupCover_0.png',\n            price: 39.58,\n          },\n\n         ...\n\n        ];\n        break;\n      default:\n        return null;\n    }\n\n    setTimeout(() => resolve(response), 1000);\n    return null;\n  });\n\nexport const post = (uri, data) =>\n  new Promise((resolve, reject) => {\n    let response;\n\n    switch (uri) {\n      case '/login':\n        if (data.email === 'test@test.com' && data.password === 'test')  \n        {\n          response = {\n            email: 'test@test.com',\n            name: 'Test Testson',\n            address: '123 test street',\n            postcode: '2761XZ',\n            city: 'Testington',\n          };\n        } else {\n          setTimeout(() => reject('Unauthorised'), 1000);\n          return null;\n        }\n        break;\n      case '/pay':\n        if (data.card.cvc === '123') {\n          response = true;\n        } else {\n          setTimeout(() => reject('Payment not authorised'), 1000);\n          return null;\n        }\n        break;\n      case '/register':\n        response = data;\n        break;\n      default:\n        return null;\n    }\n\n    setTimeout(() => resolve(response), 1000);\n    return null;\n  });\n\nexport const put = () => {};\n```", "```jsx\n/*** src/screens/ProductList.js ***/\n\nimport React from 'react';\nimport { ScrollView, TouchableOpacity } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport {\n  Spinner,\n  Icon,\n  List,\n  ListItem,\n  Thumbnail,\n  Body,\n  Text,\n} from 'native-base';\nimport * as ProductActions from '../reducers/products';\n\nclass ProductList extends React.Component {\n  static navigationOptions = {\n    drawerLabel: 'Home',\n    tabBarIcon: () => <Icon name=\"home\" />,\n  };\n\n  componentWillMount() {\n this.props.fetchProducts();\n  }\n\n onProductPress(product) {\n this.props.navigation.navigate('ProductDetail', { product });\n }\n\n  render() {\n    return (\n      <ScrollView>\n {this.props.loading && <Spinner />}\n        <List>\n          {this.props.products.map(p => (\n            <ListItem key={p.id}>\n              <Thumbnail square height={80} source={{ uri: p.img }} />\n              <Body>\n                <TouchableOpacity onPress={() => \n                 this.onProductPress(p)}>\n                  <Text>{p.name}</Text>\n                  <Text note>${p.price}</Text>\n                </TouchableOpacity>\n              </Body>\n            </ListItem>\n          ))}\n        </List>\n      </ScrollView>\n    );\n  }\n}\n\nProductList.propTypes = {\n fetchProducts: PropTypes.func.isRequired,\n products: PropTypes.array.isRequired,\n loading: PropTypes.bool.isRequired,\n navigation: PropTypes.any.isRequired,\n};\n\nfunction mapStateToProps(state) {\n return {\n products: state.productsReducer.products || [],\n loading: state.productsReducer.loading,\n };\n}\n\nfunction mapStateActionsToProps(dispatch) {\n return bindActionCreators(ProductActions, dispatch);\n}\n\nexport default connect(mapStateToProps, mapStateActionsToProps)(ProductList);\n```", "```jsx\nProductList.propTypes = {\n  fetchProducts: PropTypes.func.isRequired,\n  products: PropTypes.array.isRequired,\n  loading: PropTypes.bool.isRequired,\n  navigation: PropTypes.any.isRequired,\n};\n```", "```jsx\nonProductPress(product) {\n    this.props.navigation.navigate('ProductDetail', { product });\n}\n```", "```jsx\n/*** src/screens/ProductDetail.js ***/\n\nimport React from 'react';\nimport { Image, ScrollView } from 'react-native';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Icon, Button, Text } from 'native-base';\nimport * as ProductsActions from '../reducers/products';\n\nclass ProductDetail extends React.Component {\n  static navigationOptions = {\n    drawerLabel: 'Home',\n    tabBarIcon: () => <Icon name=\"home\" />,\n  };\n\n  onBuyPress(product) {\n this.props.addProductToCart(product);\n this.props.navigation.goBack();\n setTimeout(() => this.props.navigation.navigate('MyCart',\n                     { product }), 0);\n }\n\n  render() {\n    const { navigation } = this.props;\n    const { state } = navigation;\n    const { params } = state;\n    const { product } = params;\n    return (\n      <ScrollView>\n        <Image\n style={{\n height: 200,\n width: 160,\n alignSelf: 'center',\n marginTop: 20,\n }}\n source={{ uri: product.img }}\n />\n <Text\n style={{\n alignSelf: 'center',\n marginTop: 20,\n fontSize: 30,\n fontWeight: 'bold',\n }}\n >\n ${product.price}\n        </Text>\n        <Text\n          style={{\n            alignSelf: 'center',\n            margin: 20,\n          }}\n        >\n          Lorem ipsum dolor sit amet, consectetur \n          adipiscing elit. Nullam nec\n          eros quis magna vehicula blandit at nec velit. \n          Mauris porta risus non\n          lectus ultricies lacinia. Phasellus molestie metus ac \n          metus dapibus,\n          nec maximus arcu interdum. In hac habitasse platea dictumst.\n          Suspendisse fermentum iaculis ex, faucibus semper turpis \n          vestibulum quis.\n        </Text>\n        <Button\n block\n style={{ margin: 20 }}\n onPress={() => this.onBuyPress(product)}\n >\n <Text>Buy!</Text>\n </Button>\n      </ScrollView>\n    );\n  }\n}\n\nProductDetail.propTypes = {\n  navigation: PropTypes.any.isRequired,\n  addProductToCart: PropTypes.func.isRequired,\n};\n\nProductDetail.navigationOptions = props => {\n  const { navigation } = props;\n  const { state } = navigation;\n  const { params } = state;\n  return {\n    tabBarIcon: () => <Icon name=\"home\" />,\n    headerTitle: params.product.name,\n  };\n};\n\nfunction mapStateToProps(state) {\n return {\n user: state.userReducer.user,\n };\n}\nfunction mapStateActionsToProps(dispatch) {\n return bindActionCreators(ProductsActions, dispatch);\n}\n\nexport default connect(mapStateToProps, mapStateActionsToProps)(ProductDetail);\n```", "```jsx\nonBuyPress(product) {\n    this.props.addProductToCart(product);\n    this.props.navigation.goBack();\n    setTimeout(() => this.props.navigation.navigate('MyCart', \n                     { product }), 0);\n}\n```", "```jsx\n/*** src/screens/MyCart.js ***/\n\nimport React from 'react';\nimport { ScrollView, View } from 'react-native';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  ListItem,\n  Text,\n  Icon,\n  Button,\n  Badge,\n  Header,\n  Title,\n} from 'native-base';\n\nimport * as ProductActions from '../reducers/products';\n\nclass MyCart extends React.Component {\n  static navigationOptions = {\n    drawerLabel: 'My Cart',\n    tabBarIcon: () => <Icon name=\"cart\" />,\n  };\n\n  onTrashPress(product) {\n this.props.removeProductFromCart(product);\n }\n\n  render() {\n    return (\n      <View>\n        <ScrollView>\n          {this.props.cart.map((p, i) => (\n            <ListItem key={i} style={{ justifyContent: \n                              'space-between' }}>\n              <Badge primary>\n                <Text>{p.quantity}</Text>\n              </Badge>\n              <Text> {p.name}</Text>\n              <Button\n icon\n danger\n small\n transparent\n onPress={() => this.onTrashPress(p)}\n >\n <Icon name=\"trash\" />\n </Button>\n            </ListItem>\n          ))}\n          {this.props.cart.length > 0 && (\n            <View>\n              <Text style={{ alignSelf: 'flex-end', margin: 10 }}>\n                Total: ${this.props.cart.reduce(\n                  (sum, p) => sum + p.price * p.quantity,\n                  0,\n                )}\n              </Text>\n              <View style={{ flexDirection: 'row', \n               justifyContent: 'center' }}>\n <Button\n style={{ margin: 10 }}\n onPress={() =>  \n                  this.props.navigation.navigate('Home')}\n >\n <Text>Keep buying</Text>\n </Button>\n <Button\n style={{ margin: 10 }}\n onPress={() => \n                  this.props.navigation.navigate('Payment')}\n >\n <Text>Confirm purchase</Text>\n </Button>\n              </View>\n            </View>\n          )}\n          {this.props.cart.length == 0 && (\n            <Text style={{ alignSelf: 'center', margin: 30 }}>\n              There are no products in the cart\n            </Text>\n          )}\n        </ScrollView>\n      </View>\n    );\n  }\n}\n\nMyCart.propTypes = {\n  cart: PropTypes.array.isRequired,\n  navigation: PropTypes.object.isRequired,\n  removeProductFromCart: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.userReducer.user,\n    cart: state.productsReducer.cart || [],\n    loading: state.userReducer.loading,\n    error: state.userReducer.error,\n    paying: state.paymentsReducer.loading,\n  };\n}\nfunction mapStateActionsToProps(dispatch) {\n  return bindActionCreators(ProductActions, dispatch);\n}\n\nexport default connect(mapStateToProps, mapStateActionsToProps)(MyCart);\n\n```", "```jsx\n/*** src/screens/Payment.js ***/\n\nimport React from 'react';\nimport { View } from 'react-native';\n\nimport { CreditCardInput } from 'react-native-credit-card-input';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Icon, Button, Text, Spinner, Title } from 'native-base';\nimport PropTypes from 'prop-types';\nimport * as PaymentsActions from '../reducers/payments';\nimport * as UserActions from '../reducers/user';\nimport LoginOrRegister from '../components/LoginOrRegister';\n\nclass Payment extends React.Component {\n  static navigationOptions = {\n    drawerLabel: 'MyCart',\n    tabBarIcon: () => <Icon name=\"cart\" />,\n  };\n  state = {\n validCardDetails: false,\n cardDetails: null,\n };\n  onCardInputChange(creditCardForm) {\n this.setState({\n validCardDetails: creditCardForm.valid,\n cardDetails: creditCardForm.values,\n });\n }\n\n  componentWillReceiveProps(newProps) {\n if (this.props.paying && newProps.paymentConfirmed) {\n this.props.navigation.navigate('PaymentConfirmation');\n }\n }\n\n  render() {\n    return (\n      <View\n        style={{\n          flex: 1,\n          alignSelf: 'stretch',\n          paddingTop: 10,\n        }}\n      >\n        {this.props.cart.length > 0 &&\n !this.props.user && (\n <LoginOrRegister\n login={this.props.login}\n register={this.props.register}\n logout={this.props.logout}\n loading={this.props.loading}\n error={this.props.error}\n />\n )}\n        {this.props.cart.length > 0 &&\n this.props.user && (\n          <View>\n            <Title style={{ margin: 10 }}>\n              Paying: $\n              {this.props.cart.reduce(\n                (sum, p) => sum + p.price * p.quantity,\n                0,\n              )}\n            </Title>\n            <CreditCardInput onChange=\n            {this.onCardInputChange.bind(this)} />\n            <Button\n block\n style={{ margin: 20 }}\n onPress={() =>\n this.props.pay(\n this.props.user,\n this.props.cart,\n this.state.cardDetails,\n )}\n disabled={!this.state.validCardDetails}\n >\n <Text>Pay now</Text>\n </Button>\n            {this.props.paying && <Spinner />}\n          </View>\n        )}\n        {this.props.cart.length > 0 &&\n        this.props.error && (\n          <Text\n style={{\n alignSelf: 'center',\n color: 'red',\n position: 'absolute',\n bottom: 10,\n }}\n >\n {this.props.error}\n </Text>\n        )}\n        {this.props.cart.length === 0 && (\n <Text style={{ alignSelf: 'center', margin: 30 }}>\n There are no products in the cart\n </Text>\n )}\n      </View>\n    );\n  }\n}\n\nPayment.propTypes = {\n user: PropTypes.object,\n cart: PropTypes.array,\n login: PropTypes.func.isRequired,\n register: PropTypes.func.isRequired,\n logout: PropTypes.func.isRequired,\n pay: PropTypes.func.isRequired,\n loading: PropTypes.bool,\n paying: PropTypes.bool,\n error: PropTypes.string,\n paymentConfirmed: PropTypes.bool,\n navigation: PropTypes.object.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.userReducer.user,\n    cart: state.productsReducer.cart,\n    loading: state.userReducer.loading,\n    paying: state.paymentsReducer.loading,\n    paymentConfirmed: state.paymentsReducer.paymentConfirmed,\n    error: state.paymentsReducer.error || state.userReducer.error,\n  };\n}\nfunction mapStateActionsToProps(dispatch) {\n  return bindActionCreators(\n    Object.assign({}, PaymentsActions, UserActions),\n    dispatch,\n  );\n}\n\nexport default connect(mapStateToProps, mapStateActionsToProps)(Payment);\n```", "```jsx\nPayment.propTypes = {\n  user: PropTypes.object,\n  cart: PropTypes.array,\n  login: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  logout: PropTypes.func.isRequired,\n  pay: PropTypes.func.isRequired,\n  loading: PropTypes.bool,\n  paying: PropTypes.bool,\n  error: PropTypes.string,\n  paymentConfirmed: PropTypes.bool,\n  navigation: PropTypes.object.isRequired,\n};\n```", "```jsx\nstate = {\n    validCardDetails: false,\n    cardDetails: null,\n};\n```", "```jsx\ncomponentWillReceiveProps(newProps) {\n    if (this.props.paying && newProps.paymentConfirmed) {\n      this.props.navigation.navigate('PaymentConfirmation');\n    }\n}\n```", "```jsx\n/*** src/screens/PaymentConfirmation ***/\n\nimport React from 'react';\nimport { View } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { NavigationActions } from 'react-navigation';\nimport { Icon, Title, Text, ListItem, Badge, Button } from 'native-base';\n\nimport * as UserActions from '../reducers/user';\nimport * as ProductActions from '../reducers/products';\nimport * as PaymentsActions from '../reducers/payments';\n\nclass PaymentConfirmation extends React.Component {\n  static navigationOptions = {\n    drawerLabel: 'MyCart',\n    tabBarIcon: () => <Icon name=\"cart\" />,\n  };\n\n  componentWillMount() {\n this.setState({ cart: this.props.cart }, () => {\n this.props.resetCart();\n this.props.resetPayment();\n });\n }\n\n continueShopping() {\n const resetAction = NavigationActions.reset({\n index: 0,\n actions: [NavigationActions.navigate({ routeName: 'MyCart' })],\n });\n this.props.navigation.dispatch(resetAction);\n }\n\n  render() {\n    return (\n      <View>\n        <Title style={{ marginTop: 20 }}>Your purchase is complete!\n        </Title>\n        <Text style={{ margin: 20 }}>\n          Thank you for buying with us. We sent you an email with the\n          confirmation details and an invoice. \n          Here you can find a summary of\n          your purchase:{' '}\n        </Text>\n        {this.state.cart.map((p, i) => (\n          <ListItem key={i} style={{ justifyContent: \n          'space-between' }}>\n            <Badge primary>\n              <Text>{p.quantity}</Text>\n            </Badge>\n            <Text> {p.name}</Text>\n            <Text> {p.price * p.quantity}</Text>\n          </ListItem>\n        ))}\n        <Text style={{ alignSelf: 'flex-end', margin: 10 }}>\n          Total: ${this.state.cart.reduce(\n            (sum, p) => sum + p.price * p.quantity,\n            0,\n          )}\n        </Text>\n        <Button\n          block\n          style={{ margin: 20 }}\n          onPress={this.continueShopping.bind(this)}\n        >\n          <Text>Continue Shopping</Text>\n        </Button>\n      </View>\n    );\n  }\n}\n\nPaymentConfirmation.propTypes = {\n  cart: PropTypes.array.isRequired,\n  resetCart: PropTypes.func.isRequired,\n  resetPayment: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    cart: state.productsReducer.cart || [],\n  };\n}\nfunction mapStateActionsToProps(dispatch) {\n  return bindActionCreators(\n    Object.assign({}, PaymentsActions, ProductActions, UserActions),\n    dispatch,\n  );\n}\n\nexport default connect(mapStateToProps, mapStateActionsToProps)(\n  PaymentConfirmation,\n);\n\n```", "```jsx\ncomponentWillMount() {\n    this.setState({ cart: this.props.cart }, () => {\n      this.props.resetCart();\n      this.props.resetPayment();\n    });\n}\n```", "```jsx\n/*** src/screens/MyProfile.js ***/\n\nimport React from 'react';\nimport { View, Button as LinkButton } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport {\n  Icon,\n  Header,\n  Title,\n  Label,\n  Input,\n  Item,\n  Form,\n  Content,\n} from 'native-base';\n\nimport * as UserActions from '../reducers/user';\nimport LoginOrRegister from '../components/LoginOrRegister';\n\nclass MyProfile extends React.Component {\n  static navigationOptions = {\n    drawerLabel: 'My Profile',\n    tabBarIcon: () => <Icon name=\"person\" />,\n  };\n\n  render() {\n    return (\n      <View\n        style={{\n          flex: 1,\n          alignSelf: 'stretch',\n        }}\n      >\n        <Header>\n          <Title style={{ paddingTop: 10 }}>My Profile</Title>\n        </Header>\n        {!this.props.user && (\n <LoginOrRegister\n login={this.props.login}\n register={this.props.register}\n logout={this.props.logout}\n loading={this.props.loading}\n error={this.props.error}\n />\n )}\n        {this.props.user && (\n          <Content>\n            <Form>\n              <Item>\n                <Item fixedLabel>\n                  <Label>Name</Label>\n                  <Input disabled placeholder={this.props.user.name} />\n                </Item>\n              </Item>\n              <Item disabled>\n                <Item fixedLabel>\n                  <Label>Email</Label>\n                  <Input disabled placeholder={this.props.user.email} \n                  />\n                </Item>\n              </Item>\n              <Item disabled>\n                <Item fixedLabel>\n                  <Label>Address</Label>\n                  <Input disabled placeholder={this.props.user.address} \n                  />\n                </Item>\n              </Item>\n              <Item disabled>\n                <Item fixedLabel&gt;\n                  <Label>Postcode</Label>\n                  <Input disabled placeholder=\n                    {this.props.user.postcode} />\n                </Item>\n              </Item>\n              <Item disabled>\n                <Item fixedLabel>\n                  <Label>City</Label>\n                  <Input disabled placeholder={this.props.user.city} />\n                </Item>\n              </Item>\n            </Form>\n            <LinkButton title={'Logout'} onPress={() => \n              this.props.logout()} />\n          </Content>\n        )}\n      </View>\n    );\n  }\n}\n\nMyProfile.propTypes = {\n user: PropTypes.any,\n login: PropTypes.func.isRequired,\n register: PropTypes.func.isRequired,\n logout: PropTypes.func.isRequired,\n loading: PropTypes.bool,\n error: PropTypes.string,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.userReducer.user || null,\n    loading: state.userReducer.loading,\n    error: state.userReducer.error,\n  };\n}\nfunction mapStateActionsToProps(dispatch) {\n  return bindActionCreators(UserActions, dispatch);\n}\n\nexport default connect(mapStateToProps, mapStateActionsToProps)(MyProfile);\n```", "```jsx\n/*** src/components/LoginOrRegister.js ***/\n\nimport React from 'react';\nimport { View } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport Login from './Login';\nimport Register from './Register';\n\nexport default class LoginOrRegister extends React.Component {\n  state = {\n display: 'login',\n };\n\n  render() {\n    return (\n      <View\n        style={{\n          flex: 1,\n          justifyContent: 'center',\n          alignSelf: 'stretch',\n        }}\n      >\n        {this.state.display === 'login' && (\n <Login\n login={this.props.login}\n changeToRegister={() => this.setState({ display: \n            'register' })}\n loading={this.props.loading}\n error={this.props.error}\n />\n )}\n {this.state.display === 'register' && (\n <Register\n register={this.props.register}\n changeToLogin={() => this.setState({ display: 'login' })}\n loading={this.props.loading}\n error={this.props.error}\n />\n )}\n      </View>\n    );\n  }\n}\n\nLoginOrRegister.propTypes = {\n  error: PropTypes.string,\n  login: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  loading: PropTypes.bool,\n};\n```", "```jsx\nchangeToRegister={() => this.setState({ display: 'register' })}\n\n...\n\nchangeToLogin={() => this.setState({ display: 'login' })}\n```", "```jsx\n/*** src/components/Login.js ***/\n\nimport React from 'react';\nimport { View, Button as LinkButton } from 'react-native';\nimport { Form, Item, Input, Content, Button, Text, Spinner } from 'native-base';\nimport PropTypes from 'prop-types';\n\nclass Login extends React.Component {\n  state = { email: null, password: null };\n\n  render() {\n    return (\n      <View style={{ flex: 1 }}>\n        <Content>\n          <Form>\n            <Item>\n              <Input\n placeholder=\"e-mail\"\n keyboardType={'email-address'}\n autoCapitalize={'none'}\n onChangeText={email => this.setState({ email })}\n />\n            </Item>\n            <Item last>\n              <Input\n placeholder=\"password\"\n secureTextEntry\n onChangeText={password => this.setState({ password })}\n />\n            </Item>\n            <Button\n block\n disabled={this.props.loading}\n style={{ margin: 20 }}\n onPress={() =>\n this.props.login({\n email: this.state.email,\n password: this.state.password,\n })}\n >\n <Text>Login</Text>\n </Button>\n          </Form>\n\n          <LinkButton\n title={'or Register'}\n onPress={() => this.props.changeToRegister()}\n />\n {this.props.loading && <Spinner />}\n        </Content>\n        {this.props.error && (\n          <Text\n            style={{\n              alignSelf: 'center',\n              color: 'red',\n              position: 'absolute',\n              bottom: 10,\n            }}\n          >\n            {this.props.error}\n          </Text>\n        )}\n      </View>\n    );\n  }\n}\n\nLogin.propTypes = {\n  error: PropTypes.string,\n  loading: PropTypes.bool,\n  login: PropTypes.func.isRequired,\n  changeToRegister: PropTypes.func.isRequired,\n};\n\nexport default Login;\n```", "```jsx\nimport React from 'react';\nimport { View, Button as LinkButton } from 'react-native';\nimport { Form, Item, Input, Content, Button, Text, Spinner } from 'native-base';\nimport PropTypes from 'prop-types';\n\nclass Register extends React.Component {\n  state = {\n email: null,\n repeatEmail: null,\n name: null,\n password: null,\n address: null,\n postcode: null,\n city: null,\n };\n\n  render() {\n    return (\n      <View style={{ flex: 1 }}>\n        <Content>\n          <Form>\n            <Item>\n              <Input\n                placeholder=\"e-mail\"\n                keyboardType={'email-address'}\n                autoCapitalize={'none'}\n                onChangeText={email => this.setState({ email })}\n              />\n            </Item>\n            <Item>\n              <Input\n                placeholder=\"repeat e-mail\"\n                autoCapitalize={'none'}\n                keyboardType={'email-address'}\n                onChangeText={repeatEmail => this.setState({ \n                                             repeatEmail })}\n              />\n            </Item>\n            <Item>\n              <Input\n                placeholder=\"name\"\n                onChangeText={name => this.setState({ name })}\n              />\n            </Item>\n            <Item>\n              <Input\n                placeholder=\"password\"\n                secureTextEntry\n                onChangeText={password => this.setState({ password })}\n              />\n            </Item>\n            <Item>\n              <Input\n                placeholder=\"address\"\n                onChangeText={address => this.setState({ address })}\n              />\n            </Item>\n            <Item>\n              <Input\n                placeholder=\"postcode\"\n                onChangeText={postcode => this.setState({ postcode })}\n              />\n            </Item>\n            <Item>\n              <Input\n                placeholder=\"city\"\n                onChangeText={city => this.setState({ city })}\n              />\n            </Item>\n            <Button\n block\n style={{ margin: 20 }}\n onPress={() =>\n this.props.register({\n email: this.state.email,\n repeatEmail: this.state.repeatEmail,\n name: this.state.name,\n password: this.state.password,\n address: this.state.address,\n postcode: this.state.postcode,\n city: this.state.city,\n })}\n >\n <Text>Register</Text>\n </Button>\n          </Form>\n          <LinkButton\n title={'or Login'}\n onPress={() => this.props.changeToLogin()}\n />\n {this.props.loading && <Spinner />}\n        </Content>\n        {this.props.error && (\n          <Text\n            style={{\n              alignSelf: 'center',\n              color: 'red',\n              position: 'absolute',\n              bottom: 10,\n            }}\n          >\n            {this.props.error}\n          </Text>\n        )}\n      </View>\n    );\n  }\n}\n\nRegister.propTypes = {\n  register: PropTypes.func.isRequired,\n  changeToLogin: PropTypes.func.isRequired,\n  error: PropTypes.string,\n  loading: PropTypes.bool,\n};\n\nexport default Register;\n```", "```jsx\n/*** src/screens/Sales.js ***/\n\nimport React from 'react';\nimport { ScrollView, Image } from 'react-native';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n  Icon,\n  Card,\n  CardItem,\n  Left,\n  Body,\n  Text,\n  Button,\n  Right,\n  Title,\n} from 'native-base';\nimport * as ProductActions from '../reducers/products';\n\nclass Sales extends React.Component {\n  static navigationOptions = {\n    drawerLabel: 'Sales',\n    tabBarIcon: () => <Icon name=\"home\" />,\n  };\n\n  onBuyPress(product) {\n this.props.addProductToCart(product);\n setTimeout(() => this.props.navigation.navigate\n    ('MyCart', { product }), 0);\n }\n\n  render() {\n    return (\n      <ScrollView style={{ padding: 20 }}>\n        {this.props.products.filter(p => p.discount).map(product => (\n          <Card key={product.id}>\n            <CardItem>\n              <Left>\n                <Body>\n                  <Text>{product.name}</Text>\n                  <Text note>{product.author}</Text>\n                </Body>\n              </Left>\n            </CardItem>\n            <CardItem cardBody>\n              <Image\n                source={{ uri: product.img }}\n                style={{ height: 200, width: null, flex: 1 }}\n              />\n            </CardItem>\n            <CardItem>\n              <Left>\n                <Title>${product.price}</Title>\n              </Left>\n              <Body>\n                <Button transparent onPress={() => \n                 this.onBuyPress(product)}>\n <Text>Add to cart</Text>\n </Button>\n              </Body>\n              <Right>\n                <Text style={{ color: 'red' }}>\n                 {product.discount} off!</Text>\n              </Right>\n            </CardItem>\n          </Card>\n        ))}\n      </ScrollView>\n    );\n  }\n}\n\nSales.propTypes = {\n products: PropTypes.array.isRequired,\n addProductToCart: PropTypes.func.isRequired,\n navigation: PropTypes.any.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    products: state.productsReducer.products || [],\n  };\n}\nfunction mapStateActionsToProps(dispatch) {\n  return bindActionCreators(ProductActions, dispatch);\n}\n\nexport default connect(mapStateToProps, mapStateActionsToProps)(Sales);\n```", "```jsx\nonBuyPress(product) {\n    this.props.addProductToCart(product);\n    setTimeout(() => this.props.navigation.navigate('MyCart',\n                                                    { product }), 0);\n}\n```"]