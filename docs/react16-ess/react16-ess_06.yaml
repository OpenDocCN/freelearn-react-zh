- en: Chapter 6. Using Your React Components with Another Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。使用 React 组件与另一个库
- en: 'React is a great library for building user interfaces. What if we want to integrate
    it with another library that is responsible for receiving data? In the previous
    chapter, we outlined five tasks that our Snapterest web application should be
    able to perform. We decided that four of them were related to the user interface,
    but one of them was all about receiving data: receiving tweets from the Snapkite
    Engine server in real time.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React 是一个用于构建用户界面的优秀库。如果我们想将其与负责接收数据的另一个库集成呢？在上一章中，我们概述了我们的 Snapterest web 应用程序应该能够执行的五项任务。我们决定其中四项与用户界面有关，但其中一项完全是关于接收数据的：实时从
    Snapkite Engine 服务器接收推文。
- en: In this chapter, you'll learn how to integrate React with the external JavaScript
    library and what React component lifecycle methods are, all while solving the
    important task of receiving data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何将 React 与外部 JavaScript 库集成，以及 React 组件生命周期方法是什么，同时解决接收数据的重要任务。
- en: Using another library in your React component
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的 React 组件中使用另一个库
- en: As we discussed earlier in this book, our Snapterest web application will consume
    a live stream of tweets. In [Chapter 2](ch02.html "Chapter 2. Installing Powerful
    Tools for Your Project"), *Installing Powerful Tools for Your Project*, you installed
    the **Snapkite Engine** library that connects to the Twitter Streaming API, filters
    incoming tweets, and sends them to our client application. In turn, our client
    application needs a way of connecting to that live stream and listening for new
    tweets.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书前面讨论过的，我们的 Snapterest web 应用程序将消费实时推文流。在[第 2 章](ch02.html "第 2 章。为您的项目安装强大的工具")中，*为您的项目安装强大的工具*，您安装了**Snapkite
    Engine**库，该库连接到 Twitter 流 API，过滤传入的推文，并将它们发送到我们的客户端应用程序。反过来，我们的客户端应用程序需要一种连接到该实时流并监听新推文的方法。
- en: 'Luckily, we don''t need to implement this functionality ourselves because we
    can reuse another Snapkite module called `snapkite-stream-client`. Let''s install
    this module:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '幸运的是，我们不需要自己实现这个功能，因为我们可以重用另一个 Snapkite 模块叫做 `snapkite-stream-client`。让我们安装这个模块:'
- en: 'Navigate to the `~/snapterest` directory and run the following command:'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '导航到 `~/snapterest` 目录并运行以下命令:'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will install the `snapkite-stream-client` module, and add it to `package.json`
    as a dependency.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将安装 `snapkite-stream-client` 模块，并将其添加到 `package.json` 作为一个依赖项。
- en: Now we're ready to reuse the `snapkite-stream-client` module in one of our React
    components.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好在我们的一个 React 组件中重用 `snapkite-stream-client` 模块了。
- en: 'In the previous chapter, we created the `Application` component with two child
    components: `Stream` and `Collection`. In this chapter, we''ll create our `Stream`
    component.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们创建了 `Application` 组件，其中包含两个子组件：`Stream` 和 `Collection`。在本章中，我们将创建我们的
    `Stream` 组件。
- en: 'Let''s start by creating the `~/snapterest/source/components/Stream.js` file:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们首先创建 `~/snapterest/source/components/Stream.js` 文件:'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'First, we will import the following modules that our `Stream` component depends
    on:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，我们将导入我们的 `Stream` 组件依赖的以下模块:'
- en: '`React` and `ReactDOM`: This is part of the React library'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`React` 和 `ReactDOM`: 这是 React 库的一部分'
- en: '`StreamTweet` and `Header`: These are React components'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StreamTweet` 和 `Header`: 这些是 React 组件'
- en: '`snapkite-stream-client`: This is a ut ility library'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`snapkite-stream-client`: 这是一个实用库'
- en: 'Then, we will define our React component. Let''s take a look at the methods
    that our `Stream` component implements:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '然后，我们将定义我们的 React 组件。让我们来看看我们的 `Stream` 组件实现了哪些方法:'
- en: '`componentDidMount()`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidMount()`'
- en: '`componentWillUnmount()`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillUnmount()`'
- en: '`handleNewTweet()`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handleNewTweet()`'
- en: '`render()`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render()`'
- en: 'We''re already familiar with the `render()` method. The `render()` method is
    part of React''s API. You already know that any React component must implement
    at least the `render()` method. Let''s take a look at the `render()` method of
    our `Stream` component:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经熟悉了 `render()` 方法。`render()` 方法是 React API 的一部分。你已经知道任何 React 组件都必须实现至少
    `render()` 方法。让我们来看看我们的 `Stream` 组件的 `render()` 方法：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, we created a new `tweet` constant that references the `tweet`
    property, which is part of a component's state object. We will then check whether
    that variable has a reference to an actual `tweet` object, and if it does, our
    `render()` method returns the `StreamTweet` component, or else, it returns the
    `Header` component.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们创建了一个新的 `tweet` 常量，引用了组件状态对象的 `tweet` 属性。然后我们将检查该变量是否引用了一个实际的 `tweet`
    对象，如果是，我们的 `render()` 方法将返回 `StreamTweet` 组件，否则返回 `Header` 组件。
- en: The `StreamTweet` component renders a header and the latest tweet from a stream,
    whereas the `Header` component renders only a header.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`StreamTweet` 组件渲染了一个标题和来自流的最新推文，而 `Header` 组件只渲染了一个标题。'
- en: Have you noticed that our `Stream` component doesn't render anything itself,
    but rather returns one of the two other components that do the actual rendering?
    The purpose of a `Stream` component is to encapsulate our application's logic
    and delegate rendering to the other React components. In React, you should have
    at least one component that encapsulates your application's logic, and stores
    and manages your application's state. This is usually a root component or one
    of the high-level components in your component hierarchy. All the other child
    React components should have no state, if possible. If you think of all the React
    components as `Views`, then our `Stream` component is a `ControllerView` component.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否注意到我们的 `Stream` 组件本身并不渲染任何东西，而是返回另外两个实际进行渲染的组件之一？`Stream` 组件的目的是封装我们应用的逻辑，并将渲染委托给其他
    React 组件。在 React 中，你应该至少有一个组件来封装你应用的逻辑，并存储和管理你应用的状态。这通常是你组件层次结构中的根组件或高级组件之一。所有其他子
    React 组件应尽可能不具有状态。如果你将所有的 React 组件都视为 `Views`，那么我们的 `Stream` 组件就是一个 `ControllerView`
    组件。
- en: 'Our `Stream` component will receive an endless stream of new tweets, and it
    needs to re-render its child components every time a new tweet is received. In
    order to achieve this, we need to store the current tweet in the component''s
    state. Once we update its state, React will call its `render()` method and re-render
    all of its child components. For this purpose, we will implement the `handleNewTweet()`
    method:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `Stream` 组件将接收一个无尽的新推文流，并且需要在每次接收到新推文时重新渲染其子组件。为了实现这一点，我们需要将当前推文存储在组件的状态中。一旦我们更新了它的状态，React
    将调用它的 `render()` 方法并重新渲染所有的子组件。为此，我们将实现 `handleNewTweet()` 方法：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `handleNewTweet()` method takes a `tweet` object, and sets it as a new value
    for the component state's `tweet` property.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleNewTweet()` 方法接受一个 `tweet` 对象，并将其设置为组件状态的 `tweet` 属性的新值。'
- en: 'Where does that new tweet come from and when does it come? Let''s take a look
    at our `componentDidMount()` method:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 新的推文是从哪里来的，什么时候来的？让我们来看看我们的 `componentDidMount()` 方法：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This method calls the `initializeStream()` property of the `SnapkiteStreamClient`
    object, and passes a `this.handleNewTweet` callback function as its argument.
    `SnapkiteStreamClient` is an external library with an API that we're using to
    initialize a stream of tweets. The `this.handleNewTweet` method will be called
    for every new tweet that `SnapkiteStreamClient` receives.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法调用 `SnapkiteStreamClient` 对象的 `initializeStream()` 属性，并将 `this.handleNewTweet`
    回调函数作为其参数传递。`SnapkiteStreamClient` 是一个外部库，具有我们用来初始化推文流的 API。`this.handleNewTweet`
    方法将被调用以处理 `SnapkiteStreamClient` 接收到的每条新推文。
- en: Why did we name this method `componentDidMount()`? We didn't. React did. In
    fact, the `componentDidMount()` method is part of React's API. It's one of the
    React component's lifecycle methods. It's called only once, immediately after
    React has finished the initial rendering of our component. At this point, React
    has created a DOM tree, which is represented by our component, and now we can
    access that DOM with another JavaScript library.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们将这个方法命名为`componentDidMount()`？其实不是我们命名的，是React命名的。事实上，`componentDidMount()`方法是React
    API的一部分。它只被调用一次，在React完成组件的初始渲染后立即调用。此时，React已经创建了一个DOM树，由我们的组件表示，现在我们可以使用另一个JavaScript库访问该DOM。
- en: The `componentDidMount()` library is a perfect place for integrating React with
    another JavaScript library. This is where we connect to a stream of tweets using
    the external `SnapkiteStreamClient` library.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentDidMount()`库是将React与另一个JavaScript库集成的完美场所。这是我们使用外部`SnapkiteStreamClient`库连接到推文流的地方。'
- en: 'Now we know when to initialize the external JavaScript libraries in our React
    components, but what about the reverse process—when should we uninitialize and
    clean up everything that we''ve done in the `componentDidMount()` method? It''s
    a good idea to clean up everything before we unmount our components. For this
    purpose, React API offers us another component lifecycle method—`componentWillUnmount()`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了在React组件中初始化外部JavaScript库的时机，但是反过来呢——我们应该在什么时候取消初始化并清理掉在`componentDidMount()`方法中所做的一切呢？在卸载组件之前清理一切是个好主意。为此，React
    API为我们提供了另一个组件生命周期方法——`componentWillUnmount()`：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `componentWillUnmount()` method is called by React just before React unmounts
    the component. As you can see in the `componentWillUnmount()` method, you're calling
    the `destroyStream()` property of the `SnapkiteStreamClient` object. The `destroyStream()`
    property cleans up our connection to `SnapkiteStreamClient`, and we can safely
    unmount our `Stream` component.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentWillUnmount()`方法在React卸载组件之前被调用。正如你在`componentWillUnmount()`方法中所看到的，你正在调用`SnapkiteStreamClient`对象的`destroyStream()`属性。`destroyStream()`属性清理了我们与`SnapkiteStreamClient`的连接，我们可以安全地卸载我们的`Stream`组件。'
- en: You might be wondering what the component lifecycle methods are, and why we
    need them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道组件的生命周期方法是什么，以及为什么我们需要它们。
- en: Understanding React component's lifecycle methods
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解React组件的生命周期方法
- en: Think about what a React component does? It describes what to render. We know
    that it uses the `render()` method for this. However, sometimes, having only the
    `render()` method is not enough because what if we want to do something before
    or after the component has rendered? What if we want to be able to decide whether
    a component's `render()` method should be called at all?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 想想React组件是做什么的？它描述了要渲染什么。我们知道它使用`render()`方法来实现这一点。然而，有时仅有`render()`方法是不够的，因为如果我们想在组件渲染之前或之后做一些事情怎么办？如果我们想决定是否应该调用组件的`render()`方法呢？
- en: Looks like what we're describing is a process during which the React component
    is rendered. This process has various stages, for example, before render, render,
    and after render. In React, this process is called the **component's lifecycle**.
    Each React component goes through this process. What we want is a way to hook
    into that process, and call our own functions at different stages of that process
    in order to have a greater control over it. For this purpose, React provides a
    number of methods that we can use to get notified when a certain stage in a component's
    lifecycle process occurs. These methods are called the **component's lifecycle
    methods**. They are called in a predictable order.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们描述的是React组件被渲染的过程。这个过程有各种阶段，例如在渲染之前，渲染和渲染之后。在React中，这个过程被称为**组件的生命周期**。每个React组件都经历这个过程。我们想要的是一种方法来连接到这个过程，并在这个过程的不同阶段调用我们自己的函数，以便更好地控制它。为此，React提供了一些方法，我们可以使用这些方法在组件的生命周期过程的不同阶段得到通知。这些方法被称为**组件的生命周期方法**。它们按照可预测的顺序被调用。
- en: 'All the React component''s lifecycle methods can be grouped into three phases:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所有React组件的生命周期方法可以分为三个阶段：
- en: '**Mounting**: This phase occurs when a component is being inserted into the
    DOM'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**挂载**：当组件被插入DOM时发生'
- en: '**Updating**: This phase occurs when a component is being re-rendered into
    a virtual DOM to figure out if the actual DOM needs to be updated'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新**：当组件被重新渲染到虚拟DOM中以确定实际DOM是否需要更新时发生'
- en: '**Unmounting**: This phase occurs when a component is being removed from the
    DOM:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卸载**：当组件被从DOM中移除时发生：'
- en: '![Understanding React component''s lifecycle methods](graphics/B05915_06_01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![理解React组件的生命周期方法](graphics/B05915_06_01.jpg)'
- en: In React's terminology, inserting a component into the DOM is called "mounting,"
    whereas removing a component from the DOM is called "unmounting."
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在React的术语中，将组件插入DOM称为"挂载"，而将组件从DOM中移除称为"卸载"。
- en: The best way to learn about the React component's lifecycle methods is to see
    them in action. Let's create our `StreamTweet` component that we discussed earlier
    in this chapter. This component will implement most of React's lifecycle methods.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 了解React组件的生命周期方法最好的方法是看它们在实际中的应用。让我们创建我们在本章前面讨论过的`StreamTweet`组件。这个组件将实现大部分React的生命周期方法。
- en: 'Navigate to `~/snapterest/source/components/` and create the `StreamTweet.js`
    file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`~/snapterest/source/components/`并创建`StreamTweet.js`文件：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, the `StreamTweet` component has no lifecycle methods yet, other
    than `render()`. We'll create and discuss them one by one as we move ahead.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`StreamTweet`组件除了`render()`之外还没有生命周期方法。随着我们的进展，我们将逐一创建并讨论它们。
- en: 'The four methods are called during a component''s *mounting* phase, as shown
    in the following figure:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这四种方法在组件的*挂载*阶段被调用，如下图所示：
- en: '![Understanding React component''s lifecycle methods](graphics/B05915_06_02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![理解React组件的生命周期方法](graphics/B05915_06_02.jpg)'
- en: 'As you can see from the preceding figure, the methods called are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从前面的图中所看到的，被调用的方法如下：
- en: '`constructor()`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数()
- en: '`componentWillMount()`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: componentWillMount()
- en: '`render()`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: render()
- en: '`componentDidMount()`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: componentDidMount()
- en: In this chapter, we'll discuss two of these four methods (except `render()`).
    They are called only once when the component is inserted into the DOM. Let's take
    a closer look at each of them.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论这四种方法中的两种（除了`render()`）。它们在组件插入DOM时只被调用一次。让我们更仔细地看看每一个。
- en: Mounting methods
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挂载方法
- en: Now let's look at some of the useful mounting methods.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一些有用的挂载方法。
- en: The componentWillMount method
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: componentWillMount方法
- en: 'The `componentWillMount()` method is invoked second. It is invoked *immediately
    before* React inserts a component into the DOM. Add this code right after the
    `constructor()` method in your `StreamTweet` component:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentWillMount()`方法被第二次调用。它在React将组件插入DOM之前*立即*调用。在您的`StreamTweet`组件的`constructor()`方法之后立即添加此代码：'
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We do a number of things in this method. First, we log the fact that this method
    is being invoked. In fact, for the purpose of demonstration, we'll log every component
    lifecycle method of this component. When you run this code in a web browser, you
    should be able to open the JavaScript console, and see these log messages printed
    in the expected ascending order.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法中，我们做了许多事情。首先，我们记录了调用此方法的事实。实际上，为了演示目的，我们将记录此组件的每个生命周期方法。当您在Web浏览器中运行此代码时，应该能够打开JavaScript控制台，并看到这些日志消息按预期的升序打印出来。
- en: 'Next, we update the component''s state using the `this.setState()` method:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`this.setState()`方法更新组件的状态：
- en: Set the `numberOfCharactersIsIncreasing` property to `true`
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`numberOfCharactersIsIncreasing`属性设置为`true`
- en: Set the `headerText` property to `'Latest public photo from Twitter'`
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`headerText`属性设置为“来自Twitter的最新公共照片”
- en: Because this is the very first tweet that this component will render, we know
    that the number of characters is definitely increasing from nothing to the number
    of characters in that first tweet. Hence, we set it to `true`. We also assign
    the default text to our header, `'Latest public photo from Twitter'`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是此组件将呈现的第一条推文，我们知道字符数肯定是从零增加到第一条推文中的字符数。因此，我们将其设置为`true`。我们还将默认文本分配给我们的标题，“来自Twitter的最新公共照片”。
- en: As you know, calling the `this.setState()` method should trigger the component's
    `render()` method, so it seems like `render()` will be called twice during the
    component's mounting phase. However, in this case, React knows that nothing has
    been rendered yet, so it will call the `render()` method only once.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，调用`this.setState()`方法应该触发组件的`render()`方法，因此在组件的挂载阶段似乎会调用两次`render()`。但是，在这种情况下，React知道尚未呈现任何内容，因此它只会调用一次`render()`方法。
- en: 'Finally, in this method, we define a `snapterest` global object with the following
    two properties:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在此方法中，我们使用以下两个属性定义了一个`snapterest`全局对象：
- en: '`numberOfReceivedTweets`: This property counts the number of all the received
    tweets'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收到的推文数量：此属性计算所有接收到的推文的数量
- en: '`numberOfDisplayedTweets`: This property counts the number of only the displayed
    tweets'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numberOfDisplayedTweets`：此属性计算仅显示的推文的数量'
- en: 'We set `numberOfReceivedTweets` to `1` because we know that the `componentWillMount()`
    method is called only once when the very first tweet is received. We also know
    that our `render()` method will be called for this very first tweet, so we set
    `numberOfDisplayedTweets` to `1` as well:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`numberOfReceivedTweets`设置为`1`，因为我们知道`componentWillMount()`方法仅在接收到第一条推文时调用一次。我们还知道我们的`render()`方法将为这条第一条推文调用，因此我们也将`numberOfDisplayedTweets`设置为`1`：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This global object is not part of React or our web application's logic; we can
    remove it and everything will still work as expected. In the preceding code, `window.snapterest`
    is a convenience tool used to keep track of how many tweets we've processed at
    any point in time. We use the global `window.snapterest` object for demonstration
    purposes only. I would strongly advise you against adding your own properties
    to a global object in real-life projects because you might overwrite the existing
    properties, and/or your properties might be overwritten later by some other JavaScript
    code that you don't own. Later on, if you decide to deploy Snapterest in production,
    then make sure to remove the global `window.snapterest` object and the related
    code from the `StreamTweet` component.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个全局对象不是React或我们的Web应用程序逻辑的一部分；我们可以删除它，一切仍将按预期工作。在前面的代码中，`window.snapterest`是一个方便的工具，用于跟踪我们在任何时间点处理了多少推文。我们仅出于演示目的使用全局`window.snapterest`对象。我强烈建议您不要在实际项目中向全局对象添加自己的属性，因为您可能会覆盖现有属性，和/或您的属性可能会被稍后由您不拥有的其他JavaScript代码覆盖。稍后，如果您决定将Snapterest部署到生产环境中，请确保删除全局`window.snapterest`对象以及与`StreamTweet`组件相关的代码。
- en: After viewing Snapterest in a web browser for a few minutes, you can open the
    JavaScript console and type the `snapterest.numberOfReceivedTweets` and `snapterest.numberOfDisplayedTweets`
    commands. These commands will output the numbers that will help you get a better
    understanding of how fast the new tweets are coming, and how many of them are
    not being displayed. In our next component lifecycle method, we'll add more properties
    to our `window.snapterest` object.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络浏览器中查看Snapterest几分钟后，您可以打开JavaScript控制台并输入`snapterest.numberOfReceivedTweets`和`snapterest.numberOfDisplayedTweets`命令。这些命令将输出数字，帮助您更好地了解新推文的到达速度以及有多少推文未被显示。在我们的下一个组件生命周期方法中，我们将向`window.snapterest`对象添加更多属性。
- en: The componentDidMount method
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: componentDidMount方法
- en: The `componentDidMount()` method is invoked *immediately after* React inserts
    a component into the DOM. The updated DOM is now available for access, which means
    that this method is the best place for initializing other JavaScript libraries
    that need access to that DOM.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentDidMount()`方法在React将组件插入DOM后*立即*调用。更新后的DOM现在可以访问，这意味着这个方法是初始化其他需要访问该DOM的JavaScript库的最佳位置。'
- en: Earlier in this chapter, we created our `Stream` component with the `componentDidMount()`
    method that initializes the external `snapkite-stream-client` JavaScript library.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的早些时候，我们使用了`componentDidMount()`方法创建了我们的`Stream`组件，该方法初始化了外部的`snapkite-stream-client`
    JavaScript库。
- en: 'Let''s take a look at this component''s `componentDidMount()` method. Add the
    following code to your `StreamTweet` component after the `componentWillMount()`
    method:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个组件的`componentDidMount()`方法。在`componentWillMount()`方法之后，向您的`StreamTweet`组件添加以下代码：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, we''re referencing the DOM that represents our `StreamTweet` component
    using the `ReactDOM.findDOMNode()` method. We pass `this` parameter that references
    the current component (in this case, `StreamTweet`). The `componentDOMRepresentation`
    constant references the DOM tree that we can traverse and, thereby, access its
    various properties. To get a good understanding of what this DOM tree looks like,
    let''s take a closer look at the `render()` method of our `StreamTweet` component:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`ReactDOM.findDOMNode()`方法引用表示我们的`StreamTweet`组件的DOM。我们传递`this`参数，引用当前组件（在本例中为`StreamTweet`）。`componentDOMRepresentation`常量引用了我们可以遍历的DOM树，从而访问其各种属性。为了更好地了解这个DOM树的样子，让我们更仔细地看一下我们的`StreamTweet`组件的`render()`方法：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'One of the greatest benefits of using JSX is that we can easily identify how
    many child elements our component will have just by looking at the component''s
    `render()` method. Here, we can see that a parent `<section>` element has two
    child components: `<Header/>` and `<Tweet/>`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JSX的最大好处之一是，我们可以通过查看组件的`render()`方法轻松地确定组件将有多少子元素。在这里，我们可以看到父`<section>`元素有两个子组件：`<Header/>`和`<Tweet/>`。
- en: 'So when we traverse the resulting DOM tree using the DOM API `children` property,
    we can be sure that it will have two child elements as well:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们使用DOM API的`children`属性遍历生成的DOM树时，我们可以确保它也将有两个子元素：
- en: '`componentDOMRepresentation.children[0]`: This is our `<Header />` component''s
    DOM representation'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDOMRepresentation.children[0]`：这是我们`<Header />`组件的DOM表示'
- en: '`componentDOMRepresentation.children[1]`: This is our `<Tweet />` component''s
    DOM representation'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDOMRepresentation.children[1]`：这是我们`<Tweet />`组件的DOM表示'
- en: The `outerHTML` attribute of each element gets the HTML string that represents
    the DOM tree of each element. We assign this HTML string to our global `window.snapterest`
    object for convenience, as we discussed earlier in this chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每个元素的`outerHTML`属性都会得到表示该元素DOM树的HTML字符串。我们将这个HTML字符串分配给我们的全局`window.snapterest`对象，以方便起见，正如我们在本章前面讨论过的那样。
- en: If you are using another JavaScript library, such as **jQuery**, along with
    React, then use the `componentDidMount()` method as an opportunity to integrate
    the two. If you want to send an AJAX request, or set timers using the `setTimeout()`
    or `setInterval()` functions, then you can do that in this method as well. In
    general, `componentDidMount()` should be your preferred component lifecycle method
    for integrating the React library with nonReact libraries and APIs.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用其他JavaScript库，例如**jQuery**，以及React一起使用，则可以使用`componentDidMount()`方法作为集成两者的机会。如果您想发送AJAX请求，或者使用`setTimeout()`或`setInterval()`函数设置定时器，那么您也可以在这个方法中执行。一般来说，`componentDidMount()`应该是您首选的组件生命周期方法，用于将React库与非React库和API集成。
- en: 'So far, in this chapter, you''ve learned the fundamental mounting methods that
    the React component provides us with. We used all three of them in our `StreamTweet`
    component. We also discussed the `StreamTweet` component''s `render()` method.
    This is all that we need to know to understand how React will render the `StreamTweet`
    component initially. On its very first render, React will execute the following
    sequence of methods:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，您已经学会了React组件提供给我们的基本挂载方法。我们在`StreamTweet`组件中使用了所有三种方法。我们还讨论了`StreamTweet`组件的`render()`方法。这就是我们需要了解的所有内容，以了解React将如何最初渲染`StreamTweet`组件。在其第一次渲染时，React将执行以下方法序列：
- en: '`componentWillMount()`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillMount()`'
- en: '`render()`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render()`'
- en: '`componentDidMount()`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidMount()`'
- en: This is called the React component's **mounting phase**. It's executed only
    once, unless we unmount a component and mount it again.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为React组件的**挂载阶段**。它只执行一次，除非我们卸载一个组件并再次挂载它。
- en: Next, let's discuss the React component's **unmounting phase**.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们讨论React组件的**卸载阶段**。
- en: Unmounting methods
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卸载方法
- en: Let's now take a look at one of the popular unmounting methods.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下流行的卸载方法之一。
- en: The componentWillUnmount method
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`componentWillUnmount`方法'
- en: 'React offers only one method for this phase, that is, `componentWillUnmount()`.
    It is invoked *immediately before* React removes a component from the DOM and
    destroys it. This method is useful for cleaning up any data that is created during
    the component''s mounting or updating phases. This is exactly what we do in our
    `StreamTweet` component. Add this code to your `StreamTweet` component after the
    `componentDidMount()` method:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: React仅为此阶段提供了一种方法，即`componentWillUnmount()`。它在React从DOM中移除组件并销毁之前立即调用。此方法对清理在组件挂载或更新阶段创建的任何数据非常有用。这正是我们在`StreamTweet`组件中所做的。在`componentDidMount()`方法之后，将此代码添加到您的`StreamTweet`组件中：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `componentWillUnmount()` method, we delete our global `window.snapterest`
    object using the `delete` operator:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`componentWillUnmount()`方法中，我们使用`delete`运算符删除全局的`window.snapterest`对象：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Removing `window.snapterest` will keep our global object clean. If you''ve
    created any additional DOM elements in the `componentDidMount()` method, then
    the `componentWillUnmount()` method is a good place to remove them. You can think
    of the `componentDidMount()` and `componentWillUnmount()` methods as a two-step
    mechanism for integrating the React component with another JavaScript API:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 删除`window.snapterest`将保持我们的全局对象清洁。如果您在`componentDidMount()`方法中创建了任何其他DOM元素，则`componentWillUnmount()`方法是删除它们的好地方。您可以将`componentDidMount()`和`componentWillUnmount()`方法视为将React组件与另一个JavaScript
    API集成的两步机制。
- en: Initialize it in the `componentDidMount()` method.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`componentDidMount()`方法中初始化它。
- en: Terminate it in the `componentWillUnmount()` method.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`componentWillUnmount()`方法中终止它。
- en: In this way, your external JavaScript libraries that need to work with the DOM
    will stay in sync with the DOM rendered by React.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，需要与DOM一起工作的外部JavaScript库将与React渲染的DOM保持同步。
- en: That's all we need to know to efficiently unmount React components.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要知道的有关有效卸载React组件的全部内容。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we created our `Stream` component and learned how to integrate
    a React component with the external JavaScript library. You also learned about
    the React component's lifecycle methods. We also focused on and discussed the
    mounting and unmounting methods in detail and started implementing the `StreamTweet`
    component.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了我们的`Stream`组件，并学习了如何将React组件与外部JavaScript库集成。您还了解了React组件的生命周期方法。我们还着重讨论了挂载和卸载方法，并开始实现`StreamTweet`组件。
- en: In our next chapter, we'll take a look at the component lifecycle's updating
    methods. We'll also implement our `Header` and `Tweet` components, and learn how
    to set the component's default properties.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一章中，我们将看一下组件生命周期的更新方法。我们还将实现我们的`Header`和`Tweet`组件，并学习如何设置组件的默认属性。
