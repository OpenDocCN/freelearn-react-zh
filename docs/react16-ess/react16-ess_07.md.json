["```jsx\ncomponentWillReceiveProps(nextProps) {\n  console.log('[Snapterest] StreamTweet: 4\\. Running componentWillReceiveProps()');\n\n  const { tweet: currentTweet } = this.props;\n  const { tweet: nextTweet } = nextProps;\n\n  const currentTweetLength = currentTweet.text.length;\n  const nextTweetLength = nextTweet.text.length;\n  const isNumberOfCharactersIncreasing = (nextTweetLength > currentTweetLength);\n  let headerText;\n\n  this.setState({\n    numberOfCharactersIsIncreasing: isNumberOfCharactersIncreasing\n  });\n\n  if (isNumberOfCharactersIncreasing) {\n    headerText = 'Number of characters is increasing';\n  } else {\n    headerText = 'Latest public photo from Twitter';\n  }\n\n  this.setState({\n    headerText\n  });\n\n  window.snapterest.numberOfReceivedTweets++;\n}\n```", "```jsx\nconst { tweet: currentTweet } = this.props;\nconst { tweet: nextTweet } = nextProps;\n\nconst currentTweetLength = currentTweet.text.length;\nconst nextTweetLength = nextTweet.text.length;\nconst isNumberOfCharactersIncreasing = (nextTweetLength > currentTweetLength);\nlet headerText;\n\nthis.setState({\n  numberOfCharactersIsIncreasing: isNumberOfCharactersIncreasing\n});\n```", "```jsx\nif (isNumberOfCharactersIncreasing) {\n  headerText = 'Number of characters is increasing';\n} else {\n  headerText = 'Latest public photo from Twitter';\n}\n\nthis.setState({\n  headerText\n});\n```", "```jsx\nwindow.snapterest.numberOfReceivedTweets++;\n```", "```jsx\nshouldComponentUpdate(nextProps, nextState) {\n  console.log('[Snapterest] StreamTweet: 5\\. Running shouldComponentUpdate()');\n\n  return (nextProps.tweet.text.length > 1);\n}\n```", "```jsx\ncomponentWillUpdate(nextProps, nextState) {\n  console.log('[Snapterest] StreamTweet: 6\\. Running componentWillUpdate()');\n}\n```", "```jsx\ncomponentDidUpdate(prevProps, prevState) {\n  console.log('[Snapterest] StreamTweet: 7\\. Running componentDidUpdate()');\n\n  window.snapterest.numberOfDisplayedTweets++;\n}\n```", "```jsx\nimport React from 'react';\n\nexport const DEFAULT_HEADER_TEXT = 'Default header';\n\nconst headerStyle = {\n  fontSize: '16px',\n  fontWeight: '300',\n  display: 'inline-block',\n  margin: '20px 10px'\n};\n\nclass Header extends React.Component {\n\n  render() {\n    const { text } = this.props;\n\n    return (\n      <h2 style={headerStyle}>{text}</h2>\n    );\n  }\n}\n\nHeader.defaultProps = {\n  text: DEFAULT_HEADER_TEXT\n};\n\nexport default Header;\n```", "```jsx\nHeader.defaultProps = {\n  text: DEFAULT_HEADER_TEXT\n};\n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst tweetStyle = {\n  position: 'relative',\n  display: 'inline-block',\n  width: '300px',\n  height: '400px',\n  margin: '10px'\n};\n\nconst imageStyle = {\n  maxHeight: '400px',\n  maxWidth: '100%',\n  boxShadow: '0px 1px 1px 0px #aaa',\n  border: '1px solid #fff'\n};\n\nclass Tweet extends React.Component {\n  handleImageClick() {\n    const { tweet, onImageClick } = this.props;\n\n    if (onImageClick) {\n      onImageClick(tweet);\n    }\n  }\n\n  render() {\n    const { tweet } = this.props;\n    const tweetMediaUrl = tweet.media[0].url;\n\n    return (\n      <div style={tweetStyle}>\n        <img\n          src={tweetMediaUrl}\n          onClick={this.handleImageClick}\n          style={imageStyle}\n        />\n      </div>\n    );\n  }\n}\n\nTweet.propTypes = {\n  tweet: (properties, propertyName, componentName) => {\n    const tweet = properties[propertyName];\n\n    if (! tweet) {\n      return new Error('Tweet must be set.');\n    }\n\n    if (! tweet.media) {\n      return new Error('Tweet must have an image.');\n    }\n  },\n  onImageClick: PropTypes.func\n};\n\nexport default Tweet;\n```", "```jsx\nhandleImageClick() {\n  const { tweet, onImageClick } = this.props;\n\n  if (onImageClick) {\n    onImageClick(tweet);\n  }\n}\n```", "```jsx\nComponent.propTypes = {\n  propertyName: validator\n};\n```", "```jsx\nComponent.propTypes = {\n  propertyName: PropTypes.number.isRequired\n};\n```", "```jsx\nComponent.propTypes = {\n  propertyName(properties, propertyName, componentName) {\n    // ... validation failed\n    return new Error('A property is not valid.');\n  }\n};\n```", "```jsx\nTweet.propTypes = {\n  tweet(properties, propertyName, componentName) {\n    const tweet = properties[propertyName];\n\n    if (!tweet) {\n      return new Error('Tweet must be set.');\n    }\n\n    if (!tweet.media) {\n      return new Error('Tweet must have an image.');\n    }\n  },\n  onImageClick: PropTypes.func\n};\n```", "```jsx\nconst tweet = properties[propertyName];\n\nif (!tweet) {\n  return new Error('Tweet must be set.');\n}\n```", "```jsx\nif (!tweet.media) {\n  return new Error('Tweet must have an image.');\n}\n```", "```jsx\nonImageClick: PropTypes.func\n```", "```jsx\nimport React, { Component } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport CollectionControls from './CollectionControls';\nimport TweetList from './TweetList';\nimport Header from './Header';\n\nclass Collection extends Component {\n  createHtmlMarkupStringOfTweetList = () => {\n    const { tweets } = this.props;\n\n    const htmlString = ReactDOMServer.renderToStaticMarkup(\n      <TweetList tweets={tweets} />\n    );\n\n    const htmlMarkup = {\n      html: htmlString\n    };\n\n    return JSON.stringify(htmlMarkup);\n  }\n\n  getListOfTweetIds = () =>\n    Object.keys(this.props.tweets)\n\n  getNumberOfTweetsInCollection = () =>\n    this.getListOfTweetIds().length\n\n  render() {\n    const numberOfTweetsInCollection = this.getNumberOfTweetsInCollection();\n\n    if (numberOfTweetsInCollection > 0) {\n      const {\n        tweets,\n        onRemoveAllTweetsFromCollection,\n        onRemoveTweetFromCollection\n      } = this.props;\n\n      const htmlMarkup = this.createHtmlMarkupStringOfTweetList();\n\n      return (\n        <div>\n          <CollectionControls\n            numberOfTweetsInCollection={numberOfTweetsInCollection}\n            htmlMarkup={htmlMarkup}\n            onRemoveAllTweetsFromCollection={onRemoveAllTweetsFromCollection}\n          />\n\n          <TweetList\n            tweets={tweets}\n            onRemoveTweetFromCollection={onRemoveTweetFromCollection}\n          />\n\n        </div>\n      );\n    }\n\n    return <Header text=\"Your collection is empty\"/>;\n  }\n}\n\nexport default Collection;\n```", "```jsx\nrender() {\n  const numberOfTweetsInCollection = this.getNumberOfTweetsInCollection();\n\n  if (numberOfTweetsInCollection > 0) {\n    const {\n      tweets,\n      onRemoveAllTweetsFromCollection,\n      onRemoveTweetFromCollection\n    } = this.props;\n\n    const htmlMarkup = this.createHtmlMarkupStringOfTweetList();\n\n    return (\n      <div>\n        <CollectionControls\n          numberOfTweetsInCollection={numberOfTweetsInCollection}\n          htmlMarkup={htmlMarkup}\n          onRemoveAllTweetsFromCollection={onRemoveAllTweetsFromCollection}\n        />\n\n        <TweetList\n          tweets={tweets}\n          onRemoveTweetFromCollection={onRemoveTweetFromCollection}\n        />\n\n      </div>\n    );\n  }\n\n  return <Header text=\"Your collection is empty\"/>;\n}\n```", "```jsx\ngetNumberOfTweetsInCollection = () =>this.getListOfTweetIds().length\n```", "```jsx\ngetListOfTweetIds = () => Object.keys(this.props.tweets);\n```", "```jsx\nconst {\n  tweets,\n  onRemoveAllTweetsFromCollection,\n  onRemoveTweetFromCollection\n} = this.props;\n\nconst htmlMarkup = this.createHtmlMarkupStringOfTweetList();\n```", "```jsx\ncreateHtmlMarkupStringOfTweetList = () => {\n  const { tweets } = this.props;\n\n  const htmlString = ReactDOMServer.renderToStaticMarkup(\n    <TweetList tweets={tweets}/>\n  );\n\n  const htmlMarkup = {\n    html: htmlString\n  };\n\n  return JSON.stringify(htmlMarkup);\n}\n```", "```jsx\nconst htmlString = ReactDOMServer.renderToStaticMarkup(\n  <TweetList tweets={tweets} />\n);\n```", "```jsx\nreturn (\n  <div>\n    <CollectionControls\n      numberOfTweetsInCollection={numberOfTweetsInCollection}\n      htmlMarkup={htmlMarkup}\n      onRemoveAllTweetsFromCollection={onRemoveAllTweetsFromCollection}\n    />\n\n    <TweetList\n      tweets={tweets}\n      onRemoveTweetFromCollection={onRemoveTweetFromCollection}\n    />\n\n  </div>\n);\n```"]