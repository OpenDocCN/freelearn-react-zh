["```jsx\nfunction getListOfTweetIds(tweets) {\n  return Object.keys(tweets);\n}\n\nexport default { getListOfTweetIds };\n```", "```jsx\nimport TweetUtils from './TweetUtils';\n\ndescribe('TweetUtils', () => {\n  test('getListOfTweetIds returns an array of tweet ids', () => {\n    const tweetsMock = {\n      tweet1: {},\n      tweet2: {},\n      tweet3: {}\n    };\n    const expectedListOfTweetIds = [\n      'tweet1',\n      'tweet2',\n      'tweet3'\n    ];\n    const actualListOfTweetIds = TweetUtils.getListOfTweetIds(\n      tweetsMock\n    );\n\n    expect(actualListOfTweetIds)\n      .toEqual(expectedListOfTweetIds);\n  });\n});\n```", "```jsx\nimport TweetUtils from './TweetUtils';\n```", "```jsx\ndescribe('TweetUtils', () => {\n  // Test suite implementation goes here\n});\n```", "```jsx\ntest('getListOfTweetIds returns an array of tweet ids', () => {\n  // Test implementation goes here... });\n```", "```jsx\nconst tweetsMock = {\n  tweet1: {},\n  tweet2: {},\n  tweet3: {}\n};\nconst expectedListOfTweetIds = [\n  'tweet1',\n  'tweet2',\n  'tweet3'\n];\nconst actualListOfTweetIds = TweetUtils.getListOfTweetIds(\n  tweetsMock\n);\n\nexpect(actualListOfTweetIds)\n  .toEqual(expectedListOfTweetIds);\n```", "```jsx\nconst tweetsMock = {\n  tweet1: {},\n  tweet2: {},\n  tweet3: {}\n};\n```", "```jsx\nconst expectedListOfTweetIds = [\n  'tweet1',\n  'tweet2',\n  'tweet3'\n];\n```", "```jsx\nconst actualListOfTweetIds = TweetUtils.getListOfTweetIds(\n  tweetsMock\n);\n```", "```jsx\nexpect(actualListOfTweetIds)\n  .toEqual(expectedListOfTweetIds);\n```", "```jsx\nconst tweetsMock = {\n  tweet1: {},\n  tweet2: {},\n  tweet3: {}\n};\n```", "```jsx\n[ 'tweet1', 'tweet2', 'tweet3' ]\n```", "```jsx\nexpect(actualListOfTweetIds)\n  .toEqual(expectedListOfTweetIds);\n```", "```jsx\n**npm install --save-dev jest**\n\n```", "```jsx\n**npm install --save-dev babel-jest**\n\n```", "```jsx\n{\n  \"presets\": [\"es2015\", \"react\"]\n```", "```jsx\n\"scripts\": {\n  \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n},\n```", "```jsx\n\"scripts\": {\n  \"test\": \"jest\"\n},\n```", "```jsx\n**npm test**\n\n```", "```jsx\n**PASS  source/utils/TweetUtils.test.js**\n\n```", "```jsx\nimport TweetUtils from './TweetUtils';\n\nfunction getNumberOfTweetsInCollection(collection) {\n  const listOfCollectionTweetIds = TweetUtils\n    .getListOfTweetIds(collection);\n\n  return listOfCollectionTweetIds.length;\n}\n\nfunction isEmptyCollection(collection) {\n  return getNumberOfTweetsInCollection(collection) === 0;\n}\n\nexport default {\n  getNumberOfTweetsInCollection,\n  isEmptyCollection\n};\n```", "```jsx\nfunction getNumberOfTweetsInCollection(collection) {\n  const listOfCollectionTweetIds = TweetUtils\n    .getListOfTweetIds(collection);\n\n  return listOfCollectionTweetIds.length;\n}\n```", "```jsx\nfunction isEmptyCollection(collection) {\n  return getNumberOfTweetsInCollection(collection) === 0;\n}\n```", "```jsx\nexport default {\n  getNumberOfTweetsInCollection,\n  isEmptyCollection\n};\n```", "```jsx\nimport CollectionUtils from './CollectionUtils';\n\ndescribe('CollectionUtils', () => {\n  const collectionTweetsMock = {\n    collectionTweet7: {},\n    collectionTweet8: {},\n    collectionTweet9: {}\n  };\n\n  test('getNumberOfTweetsInCollection returns a number of tweets in collection', () => {\n    const actualNumberOfTweetsInCollection = CollectionUtils\n    .getNumberOfTweetsInCollection(collectionTweetsMock);\n    const expectedNumberOfTweetsInCollection = 3;\n\n    expect(actualNumberOfTweetsInCollection)\n    .toBe(expectedNumberOfTweetsInCollection);\n    });\n\n  test('isEmptyCollection checks if collection is not empty', () => {\n    const actualIsEmptyCollectionValue = CollectionUtils\n      .isEmptyCollection(collectionTweetsMock);\n\n    expect(actualIsEmptyCollectionValue).toBeDefined();\n    expect(actualIsEmptyCollectionValue).toBe(false);\n    expect(actualIsEmptyCollectionValue).not.toBe(true);\n  });\n});\n```", "```jsx\ndescribe('CollectionUtils', () => {\n  const collectionTweetsMock = {\n    collectionTweet7: {},\n    collectionTweet8: {},\n    collectionTweet9: {}\n  };\n\n// Tests go here... });\n```", "```jsx\ntest('getNumberOfTweetsInCollection returns a numberof tweets in collection', () => {\n  const actualNumberOfTweetsInCollection = CollectionUtils\n    .getNumberOfTweetsInCollection(collectionTweetsMock);\n  const expectedNumberOfTweetsInCollection = 3;\n\n  expect(actualNumberOfTweetsInCollection)\n    .toBe(expectedNumberOfTweetsInCollection);\n});\n```", "```jsx\nconst actualNumberOfTweetsInCollection = CollectionUtils\n  .getNumberOfTweetsInCollection(collectionTweetsMock);\n```", "```jsx\nconst expectedNumberOfTweetsInCollection = 3;\n```", "```jsx\nexpect(actualNumberOfTweetsInCollection)\n  .toBe(expectedNumberOfTweetsInCollection);\n```", "```jsx\n**PASS  source/utils/CollectionUtils.test.js**\n**PASS  source/utils/TweetUtils.test.js**\n\n```", "```jsx\nreturn listOfCollectionTweetIds.length;\n```", "```jsx\nreturn listOfCollectionTweetIds.length + 1;\n```", "```jsx\n**FAIL  source/utils/CollectionUtils.test.js**\n **CollectionUtils \u203a getNumberOfTweetsInCollection returns a number of tweets in collection**\n\n **expect(received).toBe(expected)**\n\n **Expected value to be (using ===):**\n **3**\n **Received:**\n **4**\n\n **at Object.<anonymous> (source/utils/CollectionUtils.test.js:14:46)**\n\n```", "```jsx\n**FAIL  source/utils/CollectionUtils.test.js**\n\n```", "```jsx\n **CollectionUtils \u203a getNumberOfTweetsInCollection returns a number of tweets in collection**\n\n```", "```jsx\n**expect(received).toBe(expected)** \n **Expected value to be (using ===):**\n **3**\n **Received:**\n **4**\n\n```", "```jsx\n**at Object.<anonymous> (source/utils/CollectionUtils.test.js:14:46)**\n\n```", "```jsx\nreturn listOfCollectionTweetIds.length;\n```", "```jsx\ntest('isEmptyCollection checks if collection is not empty', () => {\n  const actualIsEmptyCollectionValue = CollectionUtils\n    .isEmptyCollection(collectionTweetsMock);\n\n  expect(actualIsEmptyCollectionValue).toBeDefined();\n  expect(actualIsEmptyCollectionValue).toBe(false);\n  expect(actualIsEmptyCollectionValue).not.toBe(true);\n});\n```", "```jsx\nexpect(actualIsEmptyCollectionValue).toBeDefined();\nexpect(actualIsEmptyCollectionValue).toBe(false);\nexpect(actualIsEmptyCollectionValue).not.toBe(true);\n```", "```jsx\nexpect(actualIsEmptyCollectionValue).toBeDefined();\n```", "```jsx\nexpect(actualIsEmptyCollectionValue).toBe(false);\n```", "```jsx\nexpect(actualIsEmptyCollectionValue).not.toBe(true);\n```", "```jsx\n<h1>Testing</h1>\n```", "```jsx\n{\n  type: 'h1',\n  children: 'Testing'\n}\n```", "```jsx\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport Header, { DEFAULT_HEADER_TEXT } from './Header';\n\ndescribe('Header', () => {\n  test('renders default header text', () => {\n    const component = renderer.create(\n      <Header/>\n    );\n\n    const tree = component.toJSON();\n    const firstChild = tree.children[0];\n\n    expect(firstChild).toBe(DEFAULT_HEADER_TEXT);\n  });\n\n  test('renders provided header text', () => {\n    const headerText = 'Testing';\n\n    const component = renderer.create(\n      <Header text={headerText} />\n    );\n\n    const tree = component.toJSON();\n    const firstChild = tree.children[0];\n\n    expect(firstChild).toBe(headerText);\n  });\n});\n```", "```jsx\nimport React from 'react';\n```", "```jsx\nimport renderer from 'react-test-renderer';\n```", "```jsx\n**npm install --save-dev react-test-renderer**\n\n```", "```jsx\nimport Header, { DEFAULT_HEADER_TEXT } from './Header';\n```", "```jsx\nconst component = renderer.create(\n  <Header/>\n);\n```", "```jsx\nconst tree = component.toJSON();\n```", "```jsx\n{ type: 'h2', props: {}, children: [ 'Default header' ] }\n```", "```jsx\nconsole.log(component);\nconsole.log(tree);\n```", "```jsx\nconst firstChild = tree.children[0];\n```", "```jsx\nexpect(firstChild).toBe(DEFAULT_HEADER_TEXT);\n```", "```jsx\ntest('renders provided header text', () => {\n  const headerText = 'Testing';\n\n  const component = renderer.create(\n    <Header text={headerText}/>\n  );\n\n  const tree = component.toJSON();\n  const firstChild = tree.children[0];\n\n  expect(firstChild).toBe(headerText);\n});\n```", "```jsx\n**npm install --save-dev enzyme jest-enzyme react-addons-test-utils**\n\n```", "```jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport Header, { DEFAULT_HEADER_TEXT } from './Header';\n\ndescribe('Header', () => {\n  test('renders default header text', () => {\n    const wrapper = shallow(\n      <Header/>\n    );\n\n    expect(wrapper.find('h2')).toHaveLength(1);\n    expect(wrapper.contains(DEFAULT_HEADER_TEXT)).toBe(true);\n  });\n\n  test('renders provided header text', () => {\n    const headerText = 'Testing';\n\n    const wrapper = shallow(\n      <Header text={headerText} />\n    );\n\n    expect(wrapper.find('h2')).toHaveLength(1);\n    expect(wrapper.contains(headerText)).toBe(true);\n  });\n});\n```", "```jsx\nimport { shallow } from 'enzyme';\n```", "```jsx\nconst wrapper = shallow(\n  <Header/>\n);\n```", "```jsx\nexpect(wrapper.find('h2')).toHaveLength(1);\n```", "```jsx\n**expect(wrapper.contains(DEFAULT_HEADER_TEXT)).toBe(true);**\n\n```", "```jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport Button from './Button';\n\ndescribe('Button', () => {\n  test('calls click handler function on click', () => {\n    const handleClickMock = jest.fn();\n\n    const wrapper = shallow(\n      <Button handleClick={handleClickMock}/>\n    );\n\n    wrapper.find('button').simulate('click');\n\n    expect(handleClickMock.mock.calls.length).toBe(1);\n  });\n});\n```", "```jsx\nconst handleClickMock = jest.fn();\n\nconst wrapper = shallow(\n  <Button handleClick={handleClickMock} />\n);\n\nwrapper.find('button').simulate('click');\n\nexpect(handleClickMock.mock.calls.length).toBe(1);\n```", "```jsx\nconst handleClickMock = jest.fn();\n```", "```jsx\nconst wrapper = shallow(\n  <Button handleClick={handleClickMock}/>\n);\n```", "```jsx\nwrapper.find('button').simulate('click');\n```", "```jsx\nexpect(handleClickMock.mock.calls.length).toBe(1);\n```", "```jsx\nhandleClickMock.mock.calls.length\n```", "```jsx\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport Header from './Header';\n\ndescribe('Header', () => {\n  test('renders default header text', () => {\n    const component = renderer.create(\n      <Header/>\n    );\n\n    const tree = component.toJSON();\n\n    expect(tree).toMatchSnapshot();\n  });\n\n  test('renders provided header text', () => {\n    const headerText = 'Testing';\n\n    const component = renderer.create(\n      <Header text={headerText} />\n    );\n\n    const tree = component.toJSON();\n\n    expect(tree).toMatchSnapshot();\n  });\n});\n```", "```jsx\nconst component = renderer.create(\n  <Header/>\n);\n\nconst tree = component.toJSON();\n```", "```jsx\nexpect(tree).toMatchSnapshot();\n```", "```jsx\n**npm test**\n\n```", "```jsx\n**Snapshot Summary**\n **\u203a 2 snapshots written in 1 test suite.**\n\n```", "```jsx\n// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`Header renders default header text 1`] = `\n<h2\n  style={\n    Object {\n      \"display\": \"inline-block\",\n      \"fontSize\": \"16px\",\n      \"fontWeight\": \"300\",\n      \"margin\": \"20px 10px\",\n    }\n  }\n>\n  Default header\n</h2>\n`;\n\nexports[`Header renders provided header text 1`] = `\n<h2\n  style={\n    Object {\n      \"display\": \"inline-block\",\n      \"fontSize\": \"16px\",\n      \"fontWeight\": \"300\",\n      \"margin\": \"20px 10px\",\n    }\n  }\n>\n  Testing\n</h2>\n`;\n```", "```jsx\n**npm test**\n\n```", "```jsx\n**PASS  source/components/Button.test.js** \n**PASS  source/components/Header.test.js** \n**PASS  source/utils/CollectionUtils.test.js** \n**PASS  source/utils/TweetUtils.test.js** \n\n**Snapshot Summary**\n **\u203a 2 snapshots written in 1 test suite.** \n\n**Test Suites: 4 passed, 4 total** \n**Tests:       6 passed, 6 total** \n**Snapshots:   2 added, 2 total** \n**Time:        2.461s** \n**Ran all test suites.**\n\n```"]