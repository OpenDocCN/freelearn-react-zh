["```jsx\n    <Stream \n      onAddTweetToCollection={this.addTweetToCollection}\n    />\n    ```", "```jsx\n    <Collection\n      tweets={collectionTweets}\n      onRemoveTweetFromCollection={this.removeTweetFromCollection} onRemoveAllTweetsFromCollection={this.removeAllTweetsFromCollection}\n    />\n    ```", "```jsx\nApplication > Stream > StreamTweet > Tweet\n```", "```jsx\nApplication > ComponentA > ComponentB > ComponentC > ComponentD > ComponentE > ComponentF > ComponentG > Tweet\n```", "```jsx\nconst action = {\n  type: 'receive_tweet',\n  tweet\n};\n```", "```jsx\nActions > Dispatcher > Stores\n```", "```jsx\n    **npm install --save flux**\n\n    ```", "```jsx\n    import { Dispatcher } from 'flux';\n    export default new Dispatcher();\n    ```", "```jsx\nimport AppDispatcher from '../dispatcher/AppDispatcher';\n\nfunction receiveTweet(tweet) {\n  const action = {\n    type: 'receive_tweet',\n    tweet\n  };\n\n  AppDispatcher.dispatch(action);\n}\n\nexport { receiveTweet };\n```", "```jsx\nimport AppDispatcher from '../dispatcher/AppDispatcher';\n```", "```jsx\nfunction receiveTweet(tweet) {\n  const action = {\n    type: 'receive_tweet',\n    tweet\n  };\n\n  AppDispatcher.dispatch(action);\n}\n```", "```jsx\nAppDispatcher.dispatch(action);\n```", "```jsx\nexport { receiveTweet };\n```", "```jsx\nimport AppDispatcher from '../dispatcher/AppDispatcher';\nimport EventEmitter from 'events';\n\nlet tweet = null;\n\nfunction setTweet(receivedTweet) {\n  tweet = receivedTweet;\n}\n\nfunction emitChange() {\n  TweetStore.emit('change');\n}\n\nconst TweetStore = Object.assign({}, EventEmitter.prototype, {\n  addChangeListener(callback) {\n    this.on('change', callback);\n  },\n\n  removeChangeListener(callback) {\n    this.removeListener('change', callback);\n  },\n\n  getTweet() {\n    return tweet;\n  }\n});\n\nfunction handleAction(action) {\n  if (action.type === 'receive_tweet') {\n    setTweet(action.tweet);\n    emitChange();\n  }\n}\n\nTweetStore.dispatchToken = AppDispatcher.register(handleAction);\n\nexport default TweetStore;\n```", "```jsx\nimport AppDispatcher from '../dispatcher/AppDispatcher';\nimport EventEmitter from 'events';\n```", "```jsx\nimport EventEmitter from 'events';\n```", "```jsx\nlet tweet = null;\n```", "```jsx\nfunction setTweet(receivedTweet) {\n  tweet = receivedTweet;\n}\n\nfunction emitChange() {\n  TweetStore.emit('change');\n}\n```", "```jsx\nconst TweetStore = Object.assign({}, EventEmitter.prototype, {\n  addChangeListener(callback) {\n    this.on('change', callback);\n  },\n\n  removeChangeListener(callback) {\n    this.removeListener('change', callback);\n  },\n\n  getTweet() {\n    return tweet;\n  }\n});\n```", "```jsx\ntargetObject = Object.assign(\n  targetObject, \n  sourceObject1,\n  sourceObject2\n);\n```", "```jsx\n{\n  addChangeListener(callback) {\n    this.on('change', callback);\n  },\n\n  removeChangeListener(callback) {\n    this.removeListener('change', callback);\n  },\n\n  getTweet() {\n    return tweet;\n  }\n}\n```", "```jsx\nfunction handleAction(action) {\n  if (action.type === 'receive_tweet') {\n    setTweet(action.tweet);\n    emitChange();\n  }\n}\n```", "```jsx\nTweetStore.dispatchToken = AppDispatcher.register(handleAction);\n```", "```jsx\nexport default TweetStore;\n```"]