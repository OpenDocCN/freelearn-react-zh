- en: Chapter 5. Making Your React Components Reactive
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使您的React组件具有反应性
- en: Now that you know how to create React components with and without state, we
    can start composing React components together and build more complex user interfaces.
    In fact, it's time for us to start building our web application called **Snapterest**
    that we discussed in [Chapter 2](ch02.html "Chapter 2. Installing Powerful Tools
    for Your Project"), *Installing Powerful Tools for Your Project*. While doing
    this, you'll learn how to plan your React application and create composable React
    components. Let's begin.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道如何创建具有状态和无状态的React组件，我们可以开始组合React组件并构建更复杂的用户界面。实际上，是时候开始构建我们在[第2章](ch02.html
    "第2章。为您的项目安装强大的工具")中讨论的名为**Snapterest**的Web应用程序，*为您的项目安装强大的工具*。在此过程中，您将学习如何规划您的React应用程序并创建可组合的React组件。让我们开始吧。
- en: Solving a problem using React
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React解决问题
- en: Before you start writing code for your web application, you need to think about
    the problems that your web application is going to solve. It's very important
    to understand that to define the problem as clearly and as early as possible is
    the most important step toward a successful solution—a useful web application.
    If you failed to define your problem earlier in your development process, or you
    defined it inaccurately, then later on you'll have to stop, rethink what you're
    doing, throw away a piece of the code that you have already written, and write
    a new one. This is a wasteful approach, and as a professional software developer,
    your time is very valuable not only to you but also to your organization, so it's
    in your best interest to invest it wisely. Earlier in this book, I stressed the
    fact that one of the benefits of using React is code reuse, which means that you'll
    be able to do more in less time. However, before we take a look at the React code,
    let's first discuss the problem, keeping React in mind.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写您的Web应用程序代码之前，您需要考虑您的Web应用程序将解决的问题。清晰地定义问题并尽早理解问题是通往成功解决方案——一个有用的Web应用程序的最重要步骤。如果您在开发过程中未能早期定义问题，或者定义不准确，那么以后您将不得不停下来，重新思考您正在做的事情，放弃您已经编写的一部分代码，并编写新的代码。这是一种浪费的方法，作为专业软件开发人员，您的时间对您和您的组织都非常宝贵，因此明智地投资时间符合您的最佳利益。在本书的前面，我强调了使用React的好处之一是代码重用，这意味着您将能够在更短的时间内做更多的事情。然而，在我们查看React代码之前，让我们首先讨论问题，牢记React。
- en: We'll be building Snapterest—a web application that receives tweets from a Snapkite
    Engine server in a real-time manner and displays them one at a time to a user.
    We don't actually know when Snapterest will receive a new tweet, but when it does,
    it will display that new tweet for at least 1.5 seconds so that the user has enough
    time to take a look at it, and click on it. Clicking on a tweet will add it to
    an existing collection of tweets or create a new one. Finally, users will be able
    to export their collection to HTML markup code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建Snapterest——一个Web应用程序，以实时方式从Snapkite Engine服务器接收推文，并将它们一次显示给用户。实际上，我们并不知道Snapterest何时会收到新的推文，但是当它收到时，它将至少显示该新推文1.5秒，以便用户有足够的时间查看并单击它。单击推文将将其添加到现有推文集合中或创建一个新的推文集合。最后，用户将能够将其集合导出为HTML标记代码。
- en: 'This is a very high-level description of what we''re going to build. Let''s
    break it down into a list of smaller tasks:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将要构建的内容的一个非常高层次的描述。让我们将其分解为一系列较小的任务列表：
- en: '![Solving a problem using React](graphics/B05915_05_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![使用React解决问题](graphics/B05915_05_01.jpg)'
- en: 'The following are the steps:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是步骤：
- en: Receive tweets from the Snapkite Engine server in real time.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实时从Snapkite Engine服务器接收推文。
- en: Display one tweet at a time for at least 1.5 seconds.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一次显示一条推文，持续至少1.5秒。
- en: Add tweets to a collection on a user click event.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户点击事件发生时，将推文添加到集合中。
- en: Display a list of tweets in a collection.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在集合中显示推文列表。
- en: Create HTML markup code for a collection and export it.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为集合创建HTML标记代码并导出它。
- en: Remove tweets from a collection, on a user click event.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从集合中删除推文，当用户点击事件发生时。
- en: Can you identify which tasks can be solved using React? Remember that React
    is a user interface library, so anything that describes the user interface and
    interactions with that user interface can be addressed with React. In the preceding
    list, React can take care of all the tasks, except for the first one because it
    describes data fetching and not the user interface. Step 1 will be solved with
    another library that we'll discuss in the next chapter. Steps 2 and 4 describe
    something that needs to be displayed. They are perfect candidates for React components.
    Steps 3 and 6 describe the user events, and as we've seen in [Chapter 4](ch04.html
    "Chapter 4. Creating Your First React Component"), *Creating Your First React
    Component*, the handling of user events handling can be encapsulated in React
    components as well. Can you think of how step 5 can be solved with React? Remember
    in [Chapter 3](ch03.html "Chapter 3. Creating Your First React Element"), *Creating
    Your First React Element*, we discussed the `ReactDOMServer.renderToStaticMarkup()`
    method that renders the React element to a static HTML markup string. This is
    exactly what we need in order to solve step 5.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您能否确定哪些任务可以使用React解决？请记住，React是一个用户界面库，因此任何描述用户界面和与用户界面交互的内容都可以用React解决。在前面的列表中，React可以处理除第一个任务之外的所有任务，因为它描述的是数据获取而不是用户界面。第一步将使用我们将在下一章讨论的另一个库来解决。第2步和第4步描述了需要显示的内容。它们是React组件的完美候选者。第3步和第6步描述了用户事件，正如我们在[第4章](ch04.html
    "第4章。创建您的第一个React组件")中所看到的，用户事件处理也可以封装在React组件中。您能想到如何使用React解决第5步吗？请记住，在[第3章](ch03.html
    "第3章。创建您的第一个React元素")中，我们讨论了`ReactDOMServer.renderToStaticMarkup()`方法，该方法将React元素呈现为静态HTML标记字符串。这正是我们需要解决第5步的方法。
- en: Now when we've identified a potential solution for each individual task, let's
    think about how we are going to put them together and create a fully functional
    web application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们已经为每个单独的任务确定了潜在的解决方案时，让我们考虑如何将它们组合在一起，创建一个完全功能的Web应用程序。
- en: 'There are two ways to build composable React applications:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 构建可组合的React应用程序有两种方法：
- en: First, you can start by building individual React components, and then compose
    them together into higher-level React components, moving up the component hierarchy
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，您可以开始构建单独的React组件，然后将它们组合成更高级别的React组件，沿着组件层次结构向上移动
- en: You can start from the topmost React element and then implement its child components,
    moving down the component hierarchy
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以从最顶层的React元素开始，然后实现其子组件，沿着组件层次结构向下移动
- en: The second strategy has an advantage of seeing and understanding the big picture
    of your application's architecture, and I think it's important to understand how
    everything fits together before we can think of how individual pieces of functionality
    are implemented.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种策略有一个优势，可以看到和理解应用程序架构的整体情况，我认为在我们考虑如何实现各个功能部分之前，了解一切是如何组合在一起的很重要。
- en: Planning your React application
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划您的React应用程序
- en: 'There are two simple guidelines we need to follow when planning your React
    application:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划您的React应用程序时，有两个简单的准则需要遵循：
- en: Each React component should represent a single user interface element in your
    web application. It should encapsulate the smallest element possible that can
    potentially be reused.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个React组件应该代表Web应用程序中的单个用户界面元素。它应该封装可能被重用的最小元素。
- en: Multiple React components should be composed into a single React component.
    Ultimately, your entire user interface should be encapsulated in one React component.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个React组件应该组合成一个单独的React组件。最终，您的整个用户界面应该封装在一个React组件中。
- en: '![Planning your React application](graphics/B05915_05_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![规划您的React应用程序](graphics/B05915_05_02.jpg)'
- en: Diagram of our React components hierarchy
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的React组件层次结构图
- en: 'We''ll begin with our topmost React component, **Application**. It will encapsulate
    our entire React application, and it will have two child components: the **Stream**
    and **Collection** components. The **Stream** component will be responsible for
    connecting to a stream of tweets, receiving, and displaying the latest tweet.
    The **Stream** component will have two child components: **StreamTweet** and **Header**.
    The **StreamTweet** component will be responsible for displaying the latest tweet.
    It will be composed of the **Header** and **Tweet** components. A **Header** component
    will render a header. It will have no child components. A **Tweet** component
    will render an image from a tweet. Notice how we''re planning to reuse the **Header**
    component twice already.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从我们最顶层的React组件**Application**开始。它将封装我们整个的React应用程序，并且它将有两个子组件：**Stream**和**Collection**组件。**Stream**组件将负责连接到一系列tweets，接收并显示最新的tweet。**Stream**组件将有两个子组件：**StreamTweet**和**Header**。**StreamTweet**组件将负责显示最新的tweet。它将由**Header**和**Tweet**组件组成。**Header**组件将渲染一个标题。它将没有子组件。**Tweet**组件将渲染一条tweet的图片。请注意我们计划重复使用**Header**组件两次。
- en: 'The **Collection** component will be responsible for displaying the collection
    controls and a list of tweets. It will have two child components: **CollectionControls**
    and **TweetList**. The **CollectionControls** component will have two child components:
    the **CollectionRenameForm** component that will render a form to rename a collection,
    and the **CollectionExportForm** component that will render a form to export a
    collection to a service called **CodePen**, which is an HTML, CSS, and JavaScript
    playground website. You can learn more about CodePen at [http://codepen.io](http://codepen.io).
    As you might have noticed, we''ll reuse the **Header** and **Button** components
    in the **CollectionRenameForm** and **CollectionControls** components. Our **TweetList**
    component will render a list of tweets. Each tweet will be rendered by a **Tweet**
    component. We''ll be reusing the **Header** component once again in our **Collection**
    component. In fact, in total, we''ll be reusing the **Header** component five
    times. That''s a win for us. As we discussed in the previous chapter, we should
    keep as many React components stateless as possible. So only 5 out of 11 components
    will store the state, which are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**Collection**组件将负责显示集合控件和一系列tweets。它将有两个子组件：**CollectionControls**和**TweetList**。**CollectionControls**组件将有两个子组件：**CollectionRenameForm**组件，它将渲染一个重命名集合的表单，以及**CollectionExportForm**组件，它将渲染一个将集合导出到名为**CodePen**的服务的表单，这是一个HTML、CSS和JavaScript的游乐场网站。您可以在[http://codepen.io](http://codepen.io)了解更多关于CodePen的信息。正如您可能已经注意到的，我们将在**CollectionRenameForm**和**CollectionControls**组件中重用**Header**和**Button**组件。我们的**TweetList**组件将渲染一系列tweets。每条tweet将由一个**Tweet**组件渲染。事实上，总共我们将在**Collection**组件中再次重用**Header**组件。事实上，总共我们将在**Collection**组件中再次重用**Header**组件五次。这对我们来说是一个胜利。正如我们在前一章讨论的那样，我们应该尽可能地保持尽可能多的React组件无状态。因此，只有11个组件中的5个将存储状态，它们分别是：'
- en: '**Application**'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Application**'
- en: '**CollectionControls**'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CollectionControls**'
- en: '**CollectionRenameForm**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CollectionRenameForm**'
- en: '**Stream**'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流**'
- en: '**StreamTweet**'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**StreamTweet**'
- en: Now when we have a plan, we can start implementing it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个计划，我们可以开始实施它。
- en: Creating a container React component
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个容器React组件
- en: 'Let''s start by editing our application''s main JavaScript file. Replace the
    content of the `~/snapterest/source/app.js` file with the following code snippet:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从编辑我们应用的主JavaScript文件开始。用以下代码片段替换`~/snapterest/source/app.js`文件的内容：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are only four lines of code in this file, and as you can guess, they provide
    `document.getElementById('react-application')` as a deployment target for the
    `<Application/>` component and render `<Application/>` to the DOM. The whole user
    interface for our web application will be encapsulated in one React component,
    `Application`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件只有四行代码，你可以猜到，它们提供了`document.getElementById('react-application')`作为`<Application/>`组件的部署目标，并将`<Application/>`渲染到DOM中。我们的Web应用程序的整个用户界面将被封装在一个React组件`Application`中。
- en: 'Next, navigate to `~/snapterest/source/components/` and create the `Application.js`
    file inside this directory:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，导航到`~/snapterest/source/components/`并在这个目录中创建`Application.js`文件：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This component has significantly more code than our `app.js` file, but this
    code can be easily divided into three logical parts:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件的代码比我们的`app.js`文件要多得多，但这段代码可以很容易地分成三个逻辑部分：
- en: Importing dependency modules
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入依赖模块
- en: Defining a React component class
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个React组件类
- en: Exporting a React component class as a module
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将React组件类作为模块导出
- en: 'In our first logical part of the `Application.js` file, we''re importing the
    dependency modules using the `require()` function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Application.js`文件的第一个逻辑部分中，我们使用`require()`函数导入了依赖模块：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Our `Application` component will have two child components that we need to
    import:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Application`组件将有两个子组件，我们需要导入它们：
- en: The `Stream` component will render a stream section of our user interface
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stream`组件将渲染我们用户界面的流部分'
- en: The `Collection` component will render a collection section of our user interface
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collection`组件将渲染我们用户界面的收藏部分'
- en: We also need to import the `React` library as another module.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将`React`库作为另一个模块导入。
- en: 'The second logical part of the `Application.js` file creates the React `Application`
    component class with the following methods:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`Application.js`文件的第二个逻辑部分创建了React`Application`组件类，并包含以下方法：'
- en: '`addTweetToCollection()`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addTweetToCollection()`'
- en: '`removeTweetFromCollection()`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeTweetFromCollection()`'
- en: '`removeAllTweetsFromCollection()`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeAllTweetsFromCollection()`'
- en: '`render()`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render()`'
- en: 'Only the `render()` method is part of the React API. All the other methods
    are part of our application logic that this component encapsulates. We''ll take
    a closer look at each of them right after we discuss what this component renders
    inside its `render()` method:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 只有`render()`方法是React API的一部分。所有其他方法都是我们应用逻辑的一部分，这个组件封装了这些方法。我们将在讨论这个组件在`render()`方法中渲染的内容之后更仔细地看一下每一个方法：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see, it defines the layout of our web page using the Bootstrap framework.
    If you''re not familiar with Bootstrap, I strongly recommend that you visit [http://getbootstrap.com](http://getbootstrap.com)
    and read the documentation. Learning this framework will empower you to prototype
    user interfaces quickly and easily. Even if you don''t know Bootstrap, it''s quite
    easy to understand what''s going on. We''re dividing our web page into two columns:
    a smaller one and a larger one. The smaller one contains our `Stream` React component,
    and the larger one contains our `Collection` component. You can imagine that our
    web page is divided into two unequal parts, and both of them contain the React
    components.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它使用Bootstrap框架定义了我们网页的布局。如果你不熟悉Bootstrap，我强烈建议你访问[http://getbootstrap.com](http://getbootstrap.com)并阅读文档。学习这个框架将使你能够快速轻松地原型化用户界面。即使你不懂Bootstrap，也很容易理解发生了什么。我们将网页分成两列：一个较小的列和一个较大的列。较小的列包含我们的`Stream`
    React组件，较大的列包含我们的`Collection`组件。你可以想象我们的网页被分成了两个不等的部分，它们都包含了React组件。
- en: 'This is how we''re using our `Stream` component:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们如何使用我们的`Stream`组件：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `Stream` component has an `onAddTweetToCollection` property and our `Application`
    component passes its own `addTweetToCollection()` method as a value for this property.
    The `addTweetToCollection()` method adds a tweet to a collection. It's one of
    the custom methods that we define in our `Application` component. We don't need
    the `this` keyword because the method was defined as an arrow function, so the
    scope of the function is automatically our component.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Stream`组件有一个`onAddTweetToCollection`属性，我们的`Application`组件将自己的`addTweetToCollection()`方法作为这个属性的值传递。`addTweetToCollection()`方法将一条推文添加到集合中。这是我们在`Application`组件中定义的自定义方法之一。我们不需要使用`this`关键字，因为该方法被定义为箭头函数，所以函数的作用域自动成为我们的组件。'
- en: 'Let''s take a look at what the `addTweetToCollection()` method does:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`addTweetToCollection()`方法做了什么：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This method references collection tweets that are stored in the current state,
    adds a new tweet to a `collectionTweets` object, and updates the state by calling
    the `setState()` method. A new tweet is passed as an argument when the `addTweetToCollection()`
    method is called inside a `Stream` component. This is an example of how a child
    component can update its parent component's state.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法引用存储在当前状态中的集合推文，将新推文添加到`collectionTweets`对象，并通过调用`setState()`方法更新状态。当在`Stream`组件内部调用`addTweetToCollection()`方法时，会传递一个新推文作为参数。这是子组件如何更新其父组件状态的一个例子。
- en: 'This an important mechanism in React and it works as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是React中的一个重要机制，它的工作方式如下：
- en: A parent component passes a callback function as a property to its child component.
    A child component can access this callback function via the `this.props` reference.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 父组件将回调函数作为属性传递给其子组件。子组件可以通过`this.props`引用访问这个回调函数。
- en: Whenever a child component wants to update the parent component's state, it
    calls that callback function and passes all the necessary data to a new parent
    component's state.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每当子组件想要更新父组件的状态时，它调用该回调函数并将所有必要的数据传递给新的父组件状态。
- en: A parent component updates its state, and as you already know that this state
    updates and triggers the `render()` method that re-renders all the child components
    as necessary.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 父组件更新其状态，正如你已经知道的，这个状态更新并触发`render()`方法，根据需要重新渲染所有子组件。
- en: 'This is how a child component interacts with a parent component. This interaction
    allows a child component to delegate the application''s state management to its
    parent component, and it is only concerned with how to render itself. Now when
    you''ve learned this pattern, you will be using it again and again because most
    of your React components should stay stateless. Only a few parent components should
    store and manage your application''s state. This best practice allows us to logically
    group React components by two different concerns that they address:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是子组件与父组件交互的方式。这种交互允许子组件将应用程序的状态管理委托给其父组件，并且只关注如何渲染自身。现在当你学会了这种模式，你会一遍又一遍地使用它，因为大多数React组件应该保持无状态。只有少数父组件应该存储和管理应用程序的状态。这种最佳实践允许我们通过两种不同的关注点逻辑地对React组件进行分组：
- en: Managing the application's state and rendering it
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理应用程序的状态并渲染它
- en: Only rendering and delegating the application's state management to a parent
    component
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只渲染并将应用程序的状态管理委托给父组件
- en: 'Our `Application` component has a second child component, `Collection`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Application`组件有一个第二个子组件，`Collection`：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This component has a number of properties:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件有一些属性：
- en: '`tweets`: This refers to our current collection of tweets'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tweets`：这指的是我们当前的推文集合'
- en: '`onRemoveTweetFromCollection`: This refers to a function that removes a particular
    tweet from our collection'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRemoveTweetFromCollection`：这是指从我们的收藏中删除特定推文的函数'
- en: '`onRemoveAllTweetsFromCollection`: This refers to a function that removes all
    the tweets from our collection'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRemoveAllTweetsFromCollection`：这是指从我们的收藏中删除所有推文的函数'
- en: 'You can see that the `Collection` component''s properties are only concerned
    about how to do the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到 `Collection` 组件的属性只关心如何执行以下操作：
- en: Access the application's state
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问应用程序的状态
- en: Mutate the application's state
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变应用程序的状态
- en: As you can guess, the `onRemoveTweetFromCollection` and `onRemoveAllTweetsFromCollection`
    functions allow the `Collection` component to mutate the `Application` component's
    state. On the other hand, the `tweets` property propagates the `Application` component's
    state to the `Collection` component so that it can gain read-only access to that
    state.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 可以猜到，`onRemoveTweetFromCollection` 和 `onRemoveAllTweetsFromCollection` 函数允许
    `Collection` 组件改变 `Application` 组件的状态。另一方面，`tweets` 属性将 `Application` 组件的状态传播到
    `Collection` 组件，以便它可以以只读方式访问该状态。
- en: 'Can you recognize the single direction of data flow between the `Application`
    and `Collection` components? Here''s how it works:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你能认识到 `Application` 和 `Collection` 组件之间数据流的单向性吗？它是如何工作的：
- en: The `collectionTweets` data is initialized in the `Application` component's
    `constructor()` method.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`collectionTweets` 数据在 `Application` 组件的 `constructor()` 方法中初始化。'
- en: The `collectionTweets` data is passed to the `Collection` component as the `tweets`
    property.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`collectionTweets` 数据作为 `tweets` 属性传递给 `Collection` 组件。'
- en: The `Collection` component calls the `removeTweetFromCollection` and `removeAllTweetsFromCollection`
    functions that update the `collectionTweets` data in the `Application` component,
    and the cycle starts again.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Collection` 组件调用 `removeTweetFromCollection` 和 `removeAllTweetsFromCollection`
    函数来更新 `Application` 组件中的 `collectionTweets` 数据，然后循环再次开始。'
- en: Notice that the `Collection` component cannot directly mutate the `Application`
    component's state. The `Collection` component has read-only access to that state
    via a `this.props` object, and the only way to update the parent component's state
    is to call the callback functions that are passed by a parent component. In the
    `Collection` component, these callback functions are `this.props.onRemoveTweetFromCollection`
    and `this.props.onRemoveAllTweetsFromCollection`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Collection` 组件不能直接改变 `Application` 组件的状态。`Collection` 组件通过 `this.props`
    对象只能以只读方式访问该状态，并且更新父组件状态的唯一方法是调用父组件传递的回调函数。在 `Collection` 组件中，这些回调函数是 `this.props.onRemoveTweetFromCollection`
    和 `this.props.onRemoveAllTweetsFromCollection`。
- en: 'This simple mental model of how data flows in our React component hierarchy
    will help us increase the number of components we use, without increasing the
    complexity of how our user interface works. For example, it can have upto 10 levels
    of nested React components, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们 React 组件层次结构中数据流的简单心智模型将帮助我们增加所使用的组件数量，而不增加用户界面工作方式的复杂性。例如，它可以有多达 10 层嵌套的
    React 组件，如下所示：
- en: '![Creating a container React component](graphics/B05915_05_03.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个容器 React 组件](graphics/B05915_05_03.jpg)'
- en: If `Component G` wants to mutate the state of root `Component A`, it would do
    it in exactly the same way as `Component B` or `Component F`, or as any other
    component in this hierarchy would. However, in React, you shouldn't pass data
    from `Component A` directly to `Component G`. Instead, you should first pass it
    to `Component B`, then to `Component C`, then to `Component D`, and so on, until
    you finally reach `Component G`. `Component B` to `Component F` will have to carry
    some "transit" properties that are actually only meant for `Component G`. This
    might look like a waste of time, but this design makes it easy for us to debug
    our application and reason out how it works. There are always strategies to optimize
    your application's architecture. One of them is to use **Flux design pattern**.
    Another one is to use **Redux** library. We'll discuss both later in this book.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`Component G`想要改变根`Component A`的状态，它会以与`Component B`或`Component F`或此层次结构中的任何其他组件完全相同的方式来做。但是，在React中，您不应该直接将数据从`Component
    A`传递给`Component G`。相反，您应该首先将其传递给`Component B`，然后传递给`Component C`，然后传递给`Component
    D`，依此类推，直到最终到达`Component G`。`Component B`到`Component F`将不得不携带一些实际上只是为`Component
    G`准备的“中转”属性。这可能看起来像是浪费时间，但这种设计使我们能够轻松调试我们的应用程序并推理出其工作原理。始终有优化应用程序架构的策略。其中之一是使用**Flux设计模式**。另一个是使用**Redux**库。我们将在本书的后面讨论这两种方法。
- en: 'Before we finish discussing our `Application` component, let''s take a look
    at the two methods that mutate its state:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束讨论`Application`组件之前，让我们看一下改变其状态的两种方法：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `removeTweetFromCollection()` method removes a tweet from a collection of
    tweets that we store in the `Application` component's state. It takes the current
    `collectionTweets` object from the component's state, deletes a tweet with a given
    `id` from that object, and updates the component's state with an updated `collectionTweets`
    object.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeTweetFromCollection（）`方法从我们存储在`Application`组件状态中的tweet集合中删除一个tweet。它从组件状态中获取当前的`collectionTweets`对象，从该对象中删除具有给定`id`的tweet，并使用更新后的`collectionTweets`对象更新组件状态。'
- en: 'On the other hand, the `removeAllTweetsFromCollection()` method removes all
    the tweets from the component''s state:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`removeAllTweetsFromCollection（）`方法从组件状态中删除所有tweet：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Both of these methods are called from a child's `Collection` component because
    that component has no other way to mutate the `Application` component's state.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都是从子`Collection`组件中调用的，因为该组件没有其他方法可以改变`Application`组件的状态。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to solve a problem with React. We started by
    breaking down the problem into smaller individual problems and then discussing
    how we can address them using React. Then, we created a list of React components
    that we will need to implement. Finally, we created our first composable React
    component and learned about how a parent component interacts with its child components.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何使用React解决问题。我们首先将问题分解为较小的单独问题，然后讨论如何使用React来解决这些问题。然后，我们创建了一个需要实现的React组件列表。最后，我们创建了我们的第一个可组合的React组件，并了解了父组件如何与其子组件交互。
- en: In the next chapter, we'll implement our child components and learn about React's
    life cycle methods.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将实现我们的子组件，并了解React的生命周期方法。
