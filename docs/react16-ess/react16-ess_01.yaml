- en: Chapter 1. What's New in React 16
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 React 16的新特性
- en: 'The release of React 16 includes enough important changes to devote a chapter
    to them. This particular release took a comparatively long time to deliver. This
    is because the reconciliation internals—the part of React that figures out how
    to efficiently render component changes—was rewritten from the ground up. Compatibility
    was another factor: this rewrite has no major breaking API changes.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React 16的发布包含了足够重要的变化，值得专门撰写一章来讨论。这个特定的发布花了相对较长的时间来完成。这是因为协调内部——React中负责高效渲染组件变化的部分——是从头开始重写的。兼容性是另一个因素：这次重写没有主要的破坏性API变化。
- en: 'In this chapter, you''ll learn about the major changes introduced in React
    16:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解React 16中引入的重大变化：
- en: The major changes made to the reconciliation internals, and what they mean for
    React projects, going forward
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对协调内部所做的重大变化，以及对React项目的意义，未来的发展
- en: Confining errors to the sections of your application by setting error boundaries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过设置错误边界将错误限制在应用程序的各个部分
- en: Creating components that render more than one element and components that render
    strings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建渲染多个元素和渲染字符串的组件
- en: Rendering to portals
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染到门户
- en: Rethinking rendering
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新思考渲染
- en: You do not need a deep understanding of how the reconciliation internals of
    React work. This would defeat the purpose of React and how it encapsulates all
    of this work for us. However, understanding the motivation for the major internal
    changes that have happened in React 16 and how they work at a higher level will
    help you think about how to best design your components today and for the future
    React applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要深入了解React协调内部的工作原理。这样会违背React的初衷，以及它如何为我们封装所有这些工作。然而，了解React 16中发生的重大内部变化的动机以及它们在更高层次上的工作方式，将有助于您思考如何最好地设计您的组件，无论是今天还是未来的React应用。
- en: The status quo
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现状
- en: React has established itself as one of the standards when it comes to choosing
    a library to help build user interfaces. The two key factors for this are its
    simplicity and its performance. React is simple because it has a small API surface
    that's easy to pick up and experiment with. React is performant because it minimizes
    the number of DOM operations it has to invoke by reconciling changes in a render
    tree.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: React已经确立自己作为选择帮助构建用户界面的库的标准之一。这其中的两个关键因素是它的简单性和性能。React之所以简单，是因为它有一个小的API表面，易于上手和实验。React之所以高性能，是因为它通过协调渲染树中的变化，最小化了需要调用的DOM操作数量。
- en: There's an interplay between these two factors that has contributed to React's
    skyrocketing popularity. The good performance provided by React wouldn't be valuable
    if the API were difficult to use. The overarching value of React is that it's
    simple to use and performs well out of the box.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个因素之间存在相互作用，这导致了React的飞速流行。如果API难以使用，React提供的良好性能就不会有价值。React的最大价值在于它简单易用，并且开箱即用性能良好。
- en: 'With the widespread adoption of React came the realization that its internal
    reconciliation mechanics could be improved. For example, some React applications
    update the component state faster than rendering can complete. Consider another
    example: changes to part of the render tree that aren''t visible on the screen
    should have a lower priority than elements that the user can see. Issues like
    these are enough to degrade the user experience so that it doesn''t feel as fluid
    as it could be.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着React的广泛采用，人们意识到它的内部协调机制可以得到改进。例如，一些React应用程序更新组件状态的速度比渲染完成的速度更快。再举一个例子：对于渲染树的一部分的更改，如果在屏幕上看不到，那么它们的优先级应该比用户可以看到的元素低。这些问题足以降低用户体验，使其感觉不如可能的那样流畅。
- en: How do you address these issues without disrupting the API and render tree reconciliation
    that work so well?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在不破坏API和渲染树协调的情况下解决这些问题呢？
- en: Running to completion
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行到完成
- en: JavaScript is single-threaded and run-to-completion. This means that by default,
    any JavaScript code that you run will block any other browser tasks from running,
    such as painting the screen. This is why it's especially important that JavaScript
    code be fast. However, in some cases, even the performance of the React reconciliation
    code isn't enough to mask bottlenecks from the user. When presented with a new
    tree, React has no choice but to block the DOM updates and event listeners while
    it computes the new render tree.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是单线程的，并且运行到完成。这意味着默认情况下，你运行的任何JavaScript代码都会阻止浏览器运行其他任务，比如绘制屏幕。这就是为什么JavaScript代码特别重要的原因。然而，在某些情况下，即使React协调代码的性能也无法掩盖用户的瓶颈。当面对一个新的树时，React别无选择，只能阻止DOM更新和事件监听器，同时计算新的渲染树。
- en: One possible solution is to break the reconciliation work into smaller chunks,
    and arrange them in such a way that prevents the JavaScript run-to-completion
    thread from blocking important DOM updates. This would mean that the reconciler
    wouldn't have to render a complete tree, and then have to do it all over again
    because an event took place while the first render was taking place.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的解决方案是将协调工作分成更小的块，并安排它们以防止JavaScript运行到完成线程阻塞重要的DOM更新。这意味着协调器不必渲染完整的树，然后再次进行渲染，因为在第一次渲染时发生了事件。
- en: 'Let''s look at a visual example of this problem:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个这个问题的视觉示例：
- en: '![Running to completion](graphics/B05915_01_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![运行到完成](graphics/B05915_01_01.jpg)'
- en: This figure demonstrates that any time state changes in a React component, nothing
    else can happen until rendering has completed. As you can see, reconciling entire
    trees can get expensive as the state changes pile up, and, all the while, the
    DOM is blocked from doing anything.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表表明，当React组件中的状态发生变化时，直到渲染完成之前都不会发生其他任何事情。正如你所看到的，随着状态变化的不断堆积，协调整个树的成本会变得很高，与此同时，DOM被阻止做任何事情。
- en: 'Reconciling the render tree is in lock-step with the run-to-completion semantics
    of JavaScript. In other words, React cannot pause what it''s doing to let the
    DOM update. Let''s now look at how React 16 is trying to change the preceding
    figure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 协调渲染树与JavaScript的运行到完成语义是一致的。换句话说，React不能暂停正在进行的工作来让DOM更新。现在让我们看看React 16如何试图改变前面的图表：
- en: '![Running to completion](graphics/B05915_01_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![运行到完成](graphics/B05915_01_02.jpg)'
- en: This version of the React render/reconciliation process looks similar to the
    previous version. In fact, nothing about the component on the left has changed—this
    is reflective of the unchanging API in React 16\. There are some subtle but important
    differences though.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的React渲染/协调过程看起来与之前的版本相似。实际上，左侧组件的任何内容都没有改变——这反映了React 16中不变的API。不过，有一些微妙但重要的区别。
- en: Let's start by looking at the reconciler. Instead of building a new render tree
    every time the component changes state, it renders a partial tree. Putting it
    another way, it performs a chunk of work that results in the creation of part
    of a render tree. The reason it doesn't complete the entire tree is so that the
    reconciliation process can pause and allow any DOM updates to run—you can see
    the difference in the DOM on the right-hand side of the image.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看协调器。它不是在每次组件状态改变时构建一个新的渲染树，而是渲染一个部分树。换句话说，它执行一部分工作，导致部分渲染树的创建。它不完成整个树的原因是为了让协调过程暂停，让任何DOM更新运行——你可以在图像的右侧看到DOM的差异。
- en: When the reconciler resumes building the render tree, it first checks to see
    if new state changes have taken place since it paused. If so, it takes the partially
    completed render tree and reuses what it can, based on the new state changes.
    Then, it keeps going until the next pause. Eventually, reconciliation completes.
    During reconciliation, the DOM has been given a chance to respond to events and
    to render any outstanding changes. Prior to React 16, this wasn't possible—you
    would have to wait until the entire tree was rendered before anything in the DOM
    could happen.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当协调器恢复构建渲染树时，它首先检查是否自暂停以来发生了新的状态变化。如果是这样，它会获取部分完成的渲染树，并根据新的状态变化重复使用它可以的部分。然后，它继续进行，直到下一次暂停。最终，协调完成。在协调过程中，DOM有机会响应事件并渲染任何未完成的更改。在React
    16之前，这是不可能的——在整个树被渲染之前，DOM中的任何事情都不会发生。
- en: What are fibers?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是fiber？
- en: In order to separate the job of rendering components into smaller units of work,
    React has created an abstraction called a **fiber**. A fiber represents a unit
    of rendering work that can be paused and resumed. It has other low-level properties
    such as priority and where the output of the fiber should be returned to when
    completed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将组件的渲染工作分解为更小的工作单元，React创建了一个名为**fiber**的抽象。Fiber代表可以暂停和恢复的渲染工作单元。它还具有其他低级属性，如优先级以及完成后应该返回到的fiber的输出位置。
- en: The code name of React 16 during development was React Fiber, because of this
    fundamental abstraction that enables scheduling pieces of the overall rendering
    work to provide a better user experience. React 16 marks the initial release of
    this new reconciliation architecture, but it's not done yet. For example, everything
    is still synchronous.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: React 16在开发过程中的代号是React Fiber，因为这个基本抽象使得调度整体渲染工作的片段，以提供更好的用户体验。React 16标志着这种新的协调架构的初始发布，但它还没有完成。例如，一切仍然是同步的。
- en: Async and the road ahead
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步和未来
- en: React 16 lays the groundwork for the ultimate goal of asynchronous rendering
    in the next major release. The main reason that this functionality isn't included
    in React 16 is because the team wanted to get the fundamental reconciliation changes
    out into the wild. There are a few other new features that needed to be released
    too, which we'll go over in the following sections.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'React 16为下一个主要版本的异步渲染奠定了基础。这个功能没有包含在React 16中的主要原因是因为团队希望将基本的协调变化发布到公众中。还有一些其他需要发布的新功能，我们将在接下来的部分中介绍。 '
- en: Once asynchronous rendering capabilities are introduced into React, you shouldn't
    have to modify any code. Instead, you might notice improved performance in certain
    areas of your application that would benefit from prioritized and scheduled rendering.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦异步渲染功能引入到React中，您不应该修改任何代码。相反，您可能会注意到应用程序中某些区域的性能得到改善，这些区域将受益于优先和计划的渲染。
- en: Better component error handling
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更好的组件错误处理
- en: React 16 introduces better error-handling capabilities for components. The concept
    is called an **error boundary**, and it's implemented as a lifecycle method that
    is called when any child components throw an exception. The parent class that
    implements `componentDidCatch()` is the error boundary. You could have different
    boundaries throughout your application, depending on how your features are organized.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: React 16为组件引入了更好的错误处理能力。这个概念被称为**错误边界**，它被实现为一个生命周期方法，当任何子组件抛出异常时被调用。实现`componentDidCatch()`的父类就是错误边界。根据您的功能组织方式，您可以在应用程序中有不同的边界。
- en: The motivation for this functionality is to give the application an opportunity
    to recover from certain errors. Prior to React 16, if a component threw an error,
    the entire app would stop. This might not be ideal, especially if an issue with
    a minor component stops critical components from working.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种功能的动机是为应用程序提供从某些错误中恢复的机会。在React 16之前，如果组件抛出错误，整个应用程序将停止。这可能并不理想，特别是如果一个次要组件的问题导致关键组件停止工作。
- en: 'Let''s create an `App` component with an error boundary:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个带有错误边界的`App`组件：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `App` component does nothing but render `MyError`—a component that intentionally
    throws an error. When this happens, the `componentDidCatch()` method is called
    with the error as an argument. You can then use this value to change the state
    of the component. In this example, it sets the error message in the `err` state.
    Then, `App` will attempt to re-render.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`App`组件除了渲染`MyError`之外什么也不做——一个故意抛出错误的组件。当这种情况发生时，`componentDidCatch()`方法将被调用，并将错误作为参数传递。然后，您可以使用这个值来改变组件的状态。在这个例子中，它将错误消息设置为`err`状态。然后，`App`将尝试重新渲染。'
- en: 'As you can see, `this.state.err` is passed to `MyError` as a property. During
    the first render, this value is undefined. When `App` catches the error thrown
    by `MyError`, the error is passed back to the component. Let''s look at `MyError`
    now:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`this.state.err`被传递给`MyError`作为属性。在第一次渲染期间，这个值是未定义的。当`App`捕获到`MyError`抛出的错误时，错误将被传递回组件。现在让我们看看`MyError`：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This component throws an error with the message `'epic fail'`. When `App` catches
    this error, it renders `MyError` with an `err` prop. When this happens, it simply
    renders the error string in red. This just happens to be the strategy I've chosen
    for this app; always check for an error state before invoking the errant behavior
    again. In `MyError`, the application as a whole is recovered by not executing
    `throw new Error('epic fail')` for a second time.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件抛出一个带有消息'epic fail'的错误。当`App`捕获到这个错误时，它会使用一个`err`属性来渲染`MyError`。当这种情况发生时，它只是以红色呈现错误字符串。这恰好是我为这个应用程序选择的策略；在再次调用错误行为之前，始终检查错误状态。在`MyError`中，通过不执行`throw
    new Error('epic fail')`来第二次恢复整个应用程序。
- en: With `componentDidCatch()`, you're free; set any strategy you like for error
    recovery. Usually, you can't recover a specific component that fails.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`componentDidCatch()`，您可以自由地设置任何您喜欢的错误恢复策略。通常，您无法恢复失败的特定组件。
- en: Rendering multiple elements and strings
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染多个元素和字符串
- en: Since React was first released, the rule was that components could only render
    one element. This has changed in two important ways in React 16\. First, you can
    now return a collection of elements from your component. This simplifies cases
    where rendering sibling elements would drastically simplify things. Second, you
    can now render plain text content.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 自React首次发布以来，规则是组件只能渲染一个元素。在React 16中有两个重要的变化。首先，您现在可以从组件返回一组元素。这简化了渲染兄弟元素会极大简化事情的情况。其次，您现在可以渲染纯文本内容。
- en: Both of these changes result in fewer elements on the page. By allowing sibling
    elements to be rendered by components, you don't have to wrap them with an element
    for the sake of returning a single element. By rendering strings, you can render
    test content as the child or another component, without having to wrap it in an
    element.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个变化都导致页面上的元素减少。通过允许组件渲染兄弟元素，您不必为了返回单个元素而将它们包装起来。通过渲染字符串，您可以将测试内容作为子元素或另一个组件进行渲染，而无需将其包装在元素中。
- en: 'Here''s what rendering multiple elements looks like:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是渲染多个元素的样子：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that you have to provide a `key` property for elements in a collection.
    Now let''s add an element that returns a string value:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须为集合中的元素提供一个`key`属性。现在让我们添加一个返回字符串值的元素：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `Label` component simply returns a string as its rendered content. The `p`
    element renders `Label` as a child, adjacent to the `{v}` value. When components
    can return strings, you have more options for composing the elements that make
    up your UI.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`Label`组件只是将一个字符串作为其渲染内容返回。`p`元素将`Label`作为子元素呈现，与`{v}`值相邻。当组件可以返回字符串时，您有更多选项来组合构成UI的元素。'
- en: Rendering to portals
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 呈现到门户
- en: The final new feature of React 16 that I want to introduce is the notion of
    portals. Normally, the rendered output of a component is placed where the JSX
    element is located within the tree. However, there are times when we have greater
    control over where the rendered output of our components ends up. For example,
    what if you wanted to render a component outside of the root React element?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我想介绍的React 16的最终新功能是门户的概念。通常，组件的呈现输出放置在树中JSX元素所在的位置。然而，有时我们需要更大的控制权来决定组件的呈现输出最终放在哪里。例如，如果您想要在根React元素之外呈现组件怎么办？
- en: 'Portals allow components to specify their container element at render time.
    Imagine that you want to display notifications in your application. Several components
    at different locations on the screen need the ability to render notifications
    at one specific spot on the screen. Let''s take a look at how you can target elements
    using portals:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 门户允许组件在渲染时指定其容器元素。想象一下，您想在应用程序中显示通知。屏幕上不同位置的几个组件需要能够在屏幕上的一个特定位置呈现通知。让我们看看如何使用门户来定位元素：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the constructor of this component, the target element is created and stored
    in the `el` property. Then, in `componentWillMount()`, the element is appended
    to the document body. You don't actually need to create the target element in
    your component—you can use an existing element instead. The `componentWillUnmount()`
    method removes this element.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个组件的构造函数中，目标元素被创建并存储在`el`属性中。然后，在`componentWillMount()`中，该元素被附加到文档主体。实际上，您不需要在组件中创建目标元素——您可以使用现有元素。`componentWillUnmount()`方法会删除此元素。
- en: 'In the `render()` method, the `createPortal()` function is used to create the
    portal. It takes two arguments—the content to render and the target DOM element.
    In this case, it''s passing its child properties. Let''s take a look at how `MyPortal`
    is used:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在`render()`方法中，使用`createPortal()`函数创建门户。它接受两个参数——要呈现的内容和目标DOM元素。在这种情况下，它传递了其子属性。让我们看看`MyPortal`是如何使用的：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The end result is that the text that's passed to `MyPortal` is rendered as a
    strong element outside of the root React element. Before portals, you would have
    to resort to some kind of imperative workaround in order for something like this
    to work. Now, we can just render the notification in the same context that it's
    needed in—it just happens to be inserted somewhere else in the DOM in order to
    display correctly.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的结果是传递给`MyPortal`的文本作为一个强元素呈现在根React元素之外。在使用门户之前，您必须采取某种命令式的解决方法才能使这样的事情起作用。现在，我们可以在需要的上下文中呈现通知——它只是碰巧被插入到DOM的其他位置以正确显示。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The goal of this chapter was to introduce you to the substantial changes in
    React 16\. Remarkably, there are almost no compatibility issues with the prior
    React release. This is because most of the changes were internal and didn't require
    changes in the API. A couple of new features were added as well.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是向您介绍React 16的重大变化。值得注意的是，与之前的React版本几乎没有兼容性问题。这是因为大部分变化是内部的，不需要更改API。还添加了一些新功能。
- en: The headline of React 16 is its new reconciliation internals. Rather than trying
    to reconcile everything any time a component changes state, the reconciliation
    work is now broken into smaller units. These units can be prioritized, scheduled,
    paused, and resumed. In the near future, React will take full advantage of this
    new architecture and start rendering units of work asynchronously.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: React 16的头条是它的新协调内部。现在，协调工作被分解成更小的单元，而不是在组件改变状态时尝试协调所有内容。这些单元可以被优先处理、调度、暂停和恢复。在不久的将来，React将充分利用这种新架构，并开始异步地渲染工作单元。
- en: You also learned how to use the new error boundary functionality in React components.
    Using error boundaries allows you to recover from component errors without taking
    down the entire application. Then, you learned that React components can now return
    collections of components. This is just like when you render a collection of components.
    Now you can do this directly from components. Finally, you learned how to render
    components to nonstandard locations using portals.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您还学会了如何在React组件中使用新的错误边界功能。使用错误边界可以让您从组件错误中恢复，而不会使整个应用程序崩溃。然后，您了解到React组件现在可以返回组件集合。就像渲染一组组件一样。现在您可以直接从组件中执行此操作。最后，您学会了如何使用门户将组件渲染到非标准位置。
- en: In the next chapter, you'll learn how to build reactive components.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何构建响应式组件。
