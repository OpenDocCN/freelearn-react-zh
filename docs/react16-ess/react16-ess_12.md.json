["```jsx\nconst collectionReducer = (\n  state = initialState,\n  action\n) => {\n  let tweet;\n  let collectionTweets;\n\n  switch (action.type) {\n    case 'add_tweet_to_collection':\n      tweet = {};\n      tweet[action.tweet.id] = action.tweet;\n\n      return {\n        ...state,\n        collectionTweets: {\n          ...state.collectionTweets,\n          ...tweet\n        }\n      };\n\n    case 'remove_tweet_from_collection':\n      collectionTweets = { ...state.collectionTweets };\n      delete collectionTweets[action.tweetId];\n\n      return {\n        ...state,\n        collectionTweets\n      };\n\n    case 'remove_all_tweets_from_collection':\n      collectionTweets = {};\n\n      return {\n        ...state,\n        collectionTweets\n      };\n\n    case 'set_collection_name':\n      return {\n        ...state,\n        collectionName: state.editingName,\n        isEditingName: false\n      };\n\n    case 'toggle_is_editing_name':\n      return {\n        ...state,\n        isEditingName: !state.isEditingName\n      };\n\n    case 'set_editing_name':\n      return {\n        ...state,\n        editingName: action.editingName\n      };\n\n    default:\n      return state;\n  }\n};\n```", "```jsx\ncase 'add_tweet_to_collection':\n  tweet = {};\n  tweet[action.tweet.id] = action.tweet;\n\n  return {\n    ...state,\n    collectionTweets: {\n      ...state.collectionTweets,\n      ...tweet\n    }\n  };\n```", "```jsx\ncase 'remove_tweet_from_collection':\n  collectionTweets = { ...state.collectionTweets };\n  delete collectionTweets[action.tweetId];\n\n  return {\n    ...state,\n    collectionTweets\n  };\n```", "```jsx\ncase 'remove_all_tweets_from_collection':\n  collectionTweets = {};\n\n  return {\n    ...state,\n    collectionTweets\n  };\n```", "```jsx\ncase 'set_collection_name':\n  return {\n    ...state,\n    collectionName: state.editingName,\n    isEditingName: false\n  };\n```", "```jsx\ncase 'toggle_is_editing_name':\n  return {\n    ...state,\n    isEditingName: !state.isEditingName\n  };\n```", "```jsx\ncase 'set_editing_name':\n  return {\n    ...state,\n    editingName: action.editingName\n  };\n```", "```jsx\nconst tweetReducer = (state = null, action) => {\n  switch(action.type) {\n    case 'receive_tweet':\n      return action.tweet;\n    default:\n      return state;\n  }\n};\n```", "```jsx\nexport const addTweetToCollection = tweet => ({\n  type: 'add_tweet_to_collection',\n  tweet\n});\n\nexport const removeTweetFromCollection = tweetId => ({\n  type: 'remove_tweet_from_collection',\n  tweetId\n});\n\nexport const removeAllTweetsFromCollection = () => ({\n  type: 'remove_all_tweets_from_collection'\n});\n\nexport const setCollectionName = collectionName => ({\n  type: 'set_collection_name',\n  collectionName\n});\n\nexport const toggleIsEditingName = () => ({\n  type: 'toggle_is_editing_name'\n});\n\nexport const setEditingName = editingName => ({\n  type: 'set_editing_name',\n  editingName\n});\n\nexport const receiveTweet = tweet => ({\n  type: 'receive_tweet',\n  tweet\n});\n```", "```jsx\nconnect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Component);\n```", "```jsx\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport StreamTweet from './StreamTweet';\nimport Header from './Header';\nimport TweetStore from '../stores/TweetStore';\n\nclass Stream extends Component {\n  render() {\n    const { tweet } = this.props;\n    const { onAddTweetToCollection } = this.props;\n    const headerText = 'Waiting for public photos from Twitter...';\n\n    if (tweet) {\n      return (<StreamTweet tweet={tweet}/>);\n    }\n\n    return (<Header text={headerText}/>);\n  }\n}\n\nconst mapStateToProps = ({ tweet }) => ({ tweet });\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Stream);\n```", "```jsx\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport ReactDOM from 'react-dom';\nimport Header from './Header';\nimport Tweet from './Tweet';\nimport store from '../stores';\nimport { addTweetToCollection } from '../actions';\n\nclass StreamTweet extends Component {\n  render() {\n    const { tweet, onImageClick } = this.props;\n\n    return (\n      <section>\n        <Header text=\"Latest public photo from Twitter\"/>\n        <Tweet\n          tweet={tweet}\n          onImageClick={onImageClick}\n        />\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onImageClick: () => {\n    dispatch(addTweetToCollection(ownProps.tweet));\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StreamTweet);\n```", "```jsx\nimport React, { Component } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { connect } from 'react-redux';\n\nimport CollectionControls from './CollectionControls';\nimport TweetList from './TweetList';\nimport Header from './Header';\nimport CollectionUtils from '../utils/CollectionUtils';\n\nclass Collection extends Component {\n  createHtmlMarkupStringOfTweetList() {\n    const { collectionTweets } = this.props;\n    const htmlString = ReactDOMServer.renderToStaticMarkup(\n      <TweetList tweets={collectionTweets}/>\n    );\n\n    const htmlMarkup = {\n      html: htmlString\n    };\n\n    return JSON.stringify(htmlMarkup);\n  }\n\n  render() {\n    const { collectionTweets } = this.props;\n    const numberOfTweetsInCollection = CollectionUtils\n      .getNumberOfTweetsInCollection(collectionTweets);\n    let htmlMarkup;\n\n    if (numberOfTweetsInCollection > 0) {\n      htmlMarkup = this.createHtmlMarkupStringOfTweetList();\n\n      return (\n        <div>\n          <CollectionControls\n            numberOfTweetsInCollection={numberOfTweetsInCollection}\n            htmlMarkup={htmlMarkup}\n          />\n\n          <TweetList tweets={collectionTweets} />\n        </div>\n      );\n    }\n\n    return (<Header text=\"Your collection is empty\"/>);\n  }\n}\n\nconst mapStateToProps = state => state.collection;\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Collection);\n```", "```jsx\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Header from './Header';\nimport Button from './Button';\nimport CollectionRenameForm from './CollectionRenameForm';\nimport CollectionExportForm from './CollectionExportForm';\nimport {\n  toggleIsEditingName,\n  removeAllTweetsFromCollection\n} from '../actions';\n\nclass CollectionControls extends Component {\n  getHeaderText = () => {\n    const { numberOfTweetsInCollection } = this.props;\n    const { collectionName } = this.props;\n    let text = numberOfTweetsInCollection;\n\n    if (numberOfTweetsInCollection === 1) {\n      text = `${text} tweet in your`;\n    } else {\n      text = `${text} tweets in your`;\n    }\n\n    return (\n      <span>\n        {text} <strong>{collectionName}</strong> collection\n      </span>\n    );\n  }\n\n  render() {\n    const {\n      collectionName,\n      isEditingName,\n      htmlMarkup,\n      onRenameCollection,\n      onEmptyCollection\n    } = this.props;\n\n    if (isEditingName) {\n      return (\n        <CollectionRenameForm name={collectionName}/>\n      );\n    }\n\n    return (\n      <div>\n        <Header text={this.getHeaderText()}/>\n\n        <Button\n          label=\"Rename collection\"\n          handleClick={onRenameCollection}\n        />\n\n        <Button\n          label=\"Empty collection\"\n          handleClick={onEmptyCollection}\n        />\n\n        <CollectionExportForm\n          html={htmlMarkup}\n          title={collectionName}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => state.collection;\n\nconst mapDispatchToProps = dispatch => ({\n  onRenameCollection: () => {\n    dispatch(toggleIsEditingName());\n  },\n  onEmptyCollection: () => {\n    dispatch(removeAllTweetsFromCollection());\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CollectionControls);\n```", "```jsx\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Tweet from './Tweet';\nimport { removeTweetFromCollection } from '../actions';\n\nconst listStyle = {\n  padding: '0'\n};\n\nconst listItemStyle = {\n  display: 'inline-block',\n  listStyle: 'none'\n};\n\nclass TweetList extends Component {\n  getListOfTweetIds = () =>\n    Object.keys(this.props.tweets);\n\n  getTweetElement = (tweetId) => {\n    const {\n      tweets,\n      onRemoveTweetFromCollection\n    } = this.props;\n    const tweet = tweets[tweetId];\n\n    return (\n      <li style={listItemStyle} key={tweet.id}>\n        <Tweet\n          tweet={tweet}\n          onImageClick={onRemoveTweetFromCollection}\n        />\n      </li>\n    );\n  }\n\n  render() {\n    const tweetElements = this\n      .getListOfTweetIds()\n      .map(this.getTweetElement);\n\n    return (\n      <ul style={listStyle}>\n        {tweetElements}\n      </ul>\n    );\n  }\n}\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemoveTweetFromCollection: ({ id }) => {\n    dispatch(removeTweetFromCollection(id));\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TweetList);\n```", "```jsx\nimport { combineReducers } from 'redux'\nimport collection from './collection';\nimport tweet from './tweet';\n\nconst reducers = combineReducers({\n  collection,\n  tweet\n})\n\nexport default reducers;\n```", "```jsx\nimport { createStore } from 'redux';\nimport reducers from '../reducers';\n\nexport default createStore(reducers);\n```", "```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport Application from './components/Application';\nimport { initializeStreamOfTweets } from './utils/WebAPIUtils';\nimport store from './stores';\n\ninitializeStreamOfTweets(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Application/>\n  </Provider>,\n  document.getElementById('react-application')\n);\n```"]