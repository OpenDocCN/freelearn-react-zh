- en: Chapter 3. Creating Your First React Element
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章。创建你的第一个React元素
- en: 'Creating a simple web application today involves writing HTML, CSS, and JavaScript
    code. The reason we use three different technologies is that we want to separate
    three different concerns:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 今天创建一个简单的网页应用程序涉及编写HTML、CSS和JavaScript代码。我们使用三种不同的技术的原因是我们想要分离三种不同的关注点：
- en: Content (HTML)
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容（HTML）
- en: Styling (CSS)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样式（CSS）
- en: Logic (JavaScript)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑（JavaScript）
- en: 'This separation works great for creating a web page because traditionally,
    we had different people working on different parts of our web page: one person
    structured the content using HTML and styled it using CSS, and then another person
    implemented the dynamic behavior of various elements on that web page using JavaScript.
    It was a content-centric approach.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分离对于创建网页非常有效，因为传统上，我们有不同的人在网页的不同部分工作：一个人使用HTML结构化内容并使用CSS进行样式设置，然后另一个人使用JavaScript实现网页上各种元素的动态行为。这是一种以内容为中心的方法。
- en: Today, we mostly don't think of a website as a collection of web pages anymore.
    Instead, we build web applications that might have only one web page and that
    web page does not represent the layout for our content—it represents a container
    for our web application. Such a web application with a single web page is called
    (unsurprisingly) a **Single Page Application** (**SPA**). You might be wondering
    how do we represent the rest of the content in a SPA? Surely, we need to create
    an additional layout using HTML tags. Otherwise, how does a web browser know what
    to render?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们大多数时候不再把网站看作是一组网页了。相反，我们构建的是可能只有一个网页的网页应用程序，而这个网页并不代表我们内容的布局，而是代表我们网页应用程序的容器。这样一个只有一个网页的网页应用程序称为（不出所料的）**单页应用程序**（**SPA**）。你可能会想知道在SPA中如何表示其余的内容？当然，我们需要使用HTML标签创建额外的布局。否则，浏览器怎么知道要渲染什么呢？
- en: These are all valid questions. Let's take a look at how it works. Once you load
    your web page in a web browser, it creates a **Document Object Model** (**DOM**)
    of that web page. A DOM represents your web page in a tree structure, and at this
    point, it reflects the structure of the layout that you created with HTML tags
    only. This is what happens regardless of whether you're building a traditional
    web page or a SPA. The difference between the two is what happens next. If you
    are building a traditional web page, then you would finish creating your web page's
    layout. On the other hand, if you are building a SPA, then you would need to start
    creating additional elements by manipulating the DOM with JavaScript. A web browser
    provides you with the **JavaScript DOM API** to do this. You can learn more about
    it at [https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是合理的问题。让我们看看它是如何工作的。一旦你在浏览器中加载你的网页，它会创建该网页的**文档对象模型**（**DOM**）。DOM以树结构表示你的网页，此时它反映了你仅使用HTML标签创建的布局结构。无论你是在构建传统网页还是SPA，这都是发生的事情。两者之间的区别在于接下来会发生什么。如果你正在构建传统网页，那么你会完成创建网页的布局。另一方面，如果你正在构建SPA，那么你需要开始通过JavaScript操纵DOM来创建额外的元素。浏览器提供了**JavaScript
    DOM API**来做到这一点。你可以在[https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)了解更多信息。
- en: 'However, manipulating (or mutating) the DOM with JavaScript has two issues:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，用JavaScript操纵（或改变）DOM有两个问题：
- en: Your programming style will be imperative if you decide to use the JavaScript
    DOM API directly. As we discussed in the previous chapter, this programming style
    leads to a code base that is harder to maintain.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你决定直接使用JavaScript DOM API，你的编程风格将是命令式的。正如我们在上一章讨论的那样，这种编程风格会导致更难维护的代码库。
- en: DOM mutations are slow because they cannot be optimized for speed unlike other
    JavaScript code.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM突变很慢，因为它们无法像其他JavaScript代码那样进行速度优化。
- en: Luckily, React solves both these problems for us.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，React为我们解决了这两个问题。
- en: Understanding the virtual DOM
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解虚拟DOM
- en: 'Why do we need to manipulate the DOM in the first place? It is because our
    web applications are not static. They have a state represented by a **user interface**
    (**UI)** that a web browser renders, and that state can be changed when an event
    occurs. What kind of events are we talking about? There are two types of events
    that we''re interested in:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么需要首先操作DOM呢？因为我们的Web应用程序不是静态的。它们有一个由**用户界面**（**UI**）表示的状态，Web浏览器呈现，并且当事件发生时，该状态可以改变。我们在谈论什么样的事件？我们感兴趣的有两种类型的事件：
- en: '**User events**: When a user types, clicks, scrolls, resizes, and so on'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户事件**：当用户输入、点击、滚动、调整大小等时'
- en: '**Server events**: When an application receives data or an error from a server,
    among others'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器事件**：当应用程序从服务器接收数据或错误时，等等'
- en: 'What happens while handling these events? Usually, we update the data that
    our application depends on and that data represents a state of our data model.
    In turn, when a state of our data model changes, we might want to reflect this
    change by updating a state of our UI. Looks like what we want is a way of syncing
    two different states: the UI state and data model state. We want one to react
    to the changes in the other and vice versa. How can we achieve this?'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这些事件时会发生什么？通常情况下，我们会更新应用程序依赖的数据，并且这些数据代表我们数据模型的状态。反过来，当我们的数据模型状态发生变化时，我们可能希望通过更新UI状态来反映这种变化。看起来我们想要的是一种同步两种不同状态的方法：UI状态和数据模型状态。我们希望其中一种对另一种的变化做出反应，反之亦然。我们如何才能实现这一点？
- en: One of the ways to sync your application's UI state with an underlying data
    model's state is a two-way data binding. There are different types of two-way
    data binding. One of them is **Key-Value Observation** (**KVO**), which is used
    in `Ember.js`, Knockout, Backbone, and iOS, among others. Another one is dirty
    checking, which is used in Angular.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序的UI状态与基础数据模型状态同步的一种方法是双向数据绑定。有不同类型的双向数据绑定。其中之一是**键值观察**（**KVO**），它在`Ember.js`、Knockout、Backbone和iOS等中使用。另一个是脏检查，它在Angular中使用。
- en: 'Instead of a two-way data binding, React offers a different solution called
    the **virtual DOM**. The virtual DOM is a fast in-memory representation of the
    real DOM, and it''s an abstraction that allows us to treat JavaScript and DOM
    as if they were reactive. Let''s take a look at how it works:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: React提供了一种名为**虚拟DOM**的不同解决方案，而不是双向数据绑定。虚拟DOM是真实DOM的快速内存表示，它是一种抽象，允许我们将JavaScript和DOM视为响应式的。让我们看看它是如何工作的：
- en: Whenever a state of your data model changes, the virtual DOM and React will
    re-render your UI to a virtual DOM representation.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每当数据模型的状态发生变化时，虚拟DOM和React将重新渲染您的UI以获得虚拟DOM表示。
- en: 'It then calculates the difference between the two virtual DOM representations:
    the previous virtual DOM representation that was computed before the data was
    changed and the current virtual DOM representation that was computed after the
    data was changed. This difference between the two virtual DOM representations
    is what actually needs to be changed in the real DOM.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后计算两个虚拟DOM表示之间的差异：在数据改变之前计算的先前虚拟DOM表示和在数据改变之后计算的当前虚拟DOM表示。这两个虚拟DOM表示之间的差异实际上是真实DOM中需要改变的部分。
- en: Update only what needs to be updated in the real DOM.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只更新真实DOM中需要更新的部分。
- en: The process of finding a difference between the two representations of the virtual
    DOM and re-rendering only the updated patches in a real DOM is fast. Also, the
    best part is—as a React developer—that you don't need to worry about what actually
    needs to be re-rendered. React allows you to write your code as if you were re-rendering
    the entire DOM every time your application's state changes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实DOM中查找虚拟DOM的两个表示之间的差异，并且只重新渲染更新的补丁是很快的。而且，最好的部分是——作为React开发人员——您不需要担心实际需要重新渲染什么。React允许您编写代码，就好像每次应用程序状态发生变化时都重新渲染整个DOM一样。
- en: If you would like to learn more about the virtual DOM, the rationale behind
    it, and how it can be compared to data binding, then I would strongly recommend
    that you watch this very informative talk by Pete Hunt from Facebook at [https://www.youtube.com/watch?v=-DX3vJiqxm4](https://www.youtube.com/watch?v=-DX3vJiqxm4).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于虚拟DOM、其背后的原理以及如何与数据绑定进行比较，那么我强烈建议您观看Facebook的Pete Hunt在[https://www.youtube.com/watch?v=-DX3vJiqxm4](https://www.youtube.com/watch?v=-DX3vJiqxm4)上的这个非常信息丰富的讲座。
- en: Now that you've learned about the virtual DOM, let's mutate a real DOM by installing
    React and creating our first React element.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了虚拟DOM，让我们通过安装React并创建我们的第一个React元素来改变真实DOM。
- en: Installing React
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装React
- en: To start using the React library, we need to first install it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用React库，我们首先需要安装它。
- en: At the time of writing, the latest version of React library is 16.0.0\. Over
    time, React gets updated, so make sure that you use the latest version that is
    available to you, unless it introduces breaking changes that are incompatible
    with the code samples provided in this book. Visit [https://github.com/PacktPublishing/React-Essentials-Second-Edition](https://github.com/PacktPublishing/React-Essentials-Second-Edition)
    to learn about any compatibility issues between the code samples and the latest
    version of React.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，React库的最新版本是16.0.0。随着时间的推移，React会得到更新，因此请确保您使用的是最新版本，除非它引入了与本书提供的代码示例不兼容的破坏性更改。访问[https://github.com/PacktPublishing/React-Essentials-Second-Edition](https://github.com/PacktPublishing/React-Essentials-Second-Edition)了解代码示例与React最新版本之间的任何兼容性问题。
- en: 'In [Chapter 2](ch02.html "Chapter 2. Installing Powerful Tools for Your Project"),
    *Installing Powerful Tools for Your Project*, I introduced you to **Webpack**,
    which allows us to import all the dependency modules for our application using
    the `import` function. We''ll be using `import` to import the React library as
    well, which means that instead of adding a `<script>` tag to our `index.html`
    file, we''ll be using the `npm install` command to install React:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。为您的项目安装强大的工具")中，*为您的项目安装强大的工具*，我向您介绍了**Webpack**，它允许我们使用`import`函数导入应用程序的所有依赖模块。我们将使用`import`来导入React库，这意味着我们不再需要向`index.html`文件添加`<script>`标签，而是使用`npm
    install`命令来安装React：
- en: 'Navigate to the `~/snapterest/` directory and run this command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`~/snapterest/`目录并运行此命令：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, open the `~/snapterest/source/app.js` file in your text editor, and import
    the React and ReactDOM libraries to the `React` and `ReactDOM` variables, respectively:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开您的文本编辑器中的`~/snapterest/source/app.js`文件，并将React和ReactDOM库分别导入到`React`和`ReactDOM`变量中：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `react` package contains methods that are concerned with the key idea behind
    React, that is, describing what you want to render in a declarative way. On the
    other hand, the `react-dom` package offers methods that are responsible for rendering
    to the DOM. You can read more about why developers at Facebook think it's a good
    idea to separate the React library into two packages at [https://facebook.github.io/react/blog/2015/07/03/react-v0.14-beta-1.html#two-packages](https://facebook.github.io/react/blog/2015/07/03/react-v0.14-beta-1.html#two-packages).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`react`包含了与React背后的关键思想有关的方法，即以声明方式描述您想要渲染的内容。另一方面，`react-dom`包含了负责渲染到DOM的方法。您可以在[https://facebook.github.io/react/blog/2015/07/03/react-v0.14-beta-1.html#two-packages](https://facebook.github.io/react/blog/2015/07/03/react-v0.14-beta-1.html#two-packages)上阅读更多关于为什么Facebook的开发人员认为将React库分成两个包是一个好主意的内容。'
- en: Now we're ready to start using the React library in our project. Next, let's
    create our first React element!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备在我们的项目中开始使用React库。接下来，让我们创建我们的第一个React元素！
- en: Creating React elements with JavaScript
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript创建React元素
- en: We'll start by familiarizing ourselves with fundamental React terminology. It
    will help us build a clear picture of what the React library is made of. This
    terminology will most likely update over time, so keep an eye on the official
    documentation at [https://facebook.github.io/react/docs/react-api.html](https://facebook.github.io/react/docs/react-api.html).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先熟悉基本的React术语。这将帮助我们清晰地了解React库的组成。这些术语很可能会随着时间的推移而更新，因此请密切关注官方文档[https://facebook.github.io/react/docs/react-api.html](https://facebook.github.io/react/docs/react-api.html)。
- en: 'Just like the DOM is a tree of nodes, React''s virtual DOM is a tree of React
    nodes. One of the core types in React is called `ReactNode`. It''s a building
    block for a virtual DOM and it can be any one of these core types:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 就像DOM是节点树一样，React的虚拟DOM是React节点树。React中的核心类型之一称为`ReactNode`。它是虚拟DOM的构建块，可以是以下任何一种核心类型之一：
- en: '`ReactElement`: This is the primary type in React. It''s a light, stateless,
    immutable, virtual representation of a `DOMElement`.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReactElement`：这是React中的主要类型。它是一个轻量级的、无状态的、不可变的、虚拟表示的`DOMElement`。'
- en: '`ReactText`: This is a string or a number. It represents textual content and
    it''s a virtual representation of a text node in the DOM.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReactText`：这是一个字符串或数字。它表示文本内容，是DOM中文本节点的虚拟表示。'
- en: '`ReactElement` and `ReactText` are `ReactNode`. An array of `ReactNode` is
    called a `ReactFragment`. You will see examples of all of these in this chapter.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReactElement`和`ReactText`都是`ReactNode`。`ReactNode`的数组称为`ReactFragment`。您将在本章中看到所有这些的示例。'
- en: 'Let''s start with an example of `ReactElement`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`ReactElement`的示例开始：
- en: 'Add the following code to your `~/snapterest/source/app.js` file:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的`~/snapterest/source/app.js`文件中：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now your `app.js` file should look exactly like this:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的`app.js`文件应该完全像这样：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Navigate to the `~/snapterest/` directory and run this command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`~/snapterest/`目录并运行此命令：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will see the following output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Navigate to the `~/snapterest/build/` directory, and open `index.html` in a
    web browser. You will see a blank web page. Open **Developer tools** in your web
    browser and inspect the HTML markup for your blank web page. You should see this
    line, among others:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`~/snapterest/build/`目录，并在Web浏览器中打开`index.html`。您将看到一个空白的网页。在Web浏览器中打开**开发者工具**，并检查空白网页的HTML标记。您应该在其他内容中看到这一行：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Well done! We've just rendered your first React element. Let's see exactly how
    we did it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们刚刚渲染了您的第一个React元素。让我们看看我们是如何做到的。
- en: 'The entry point to the React library is the `React` object. This object has
    a method called `createElement()` that takes three parameters: `type`, `props`,
    and `children`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: React库的入口点是`React`对象。该对象有一个名为`createElement()`的方法，它接受三个参数：`type`、`props`和`children`：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's take a look at each parameter in more detail.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看每个参数。
- en: The type parameter
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: type参数
- en: 'The `type` parameter can be either a string or `ReactClass`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`type`参数可以是字符串或`ReactClass`：'
- en: A string could be an HTML tag name, such as `'div'`, `'p'`, and `'h1'`. React
    supports all the common HTML tags and attributes. For a complete list of HTML
    tags and attributes supported by React, you can refer to [https://facebook.github.io/react/docs/dom-elements.html](https://facebook.github.io/react/docs/dom-elements.html).
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串可以是HTML标记名称，例如`'div'`，`'p'`和`'h1'`。React支持所有常见的HTML标记和属性。有关React支持的所有HTML标记和属性的完整列表，您可以参考[https://facebook.github.io/react/docs/dom-elements.html](https://facebook.github.io/react/docs/dom-elements.html)。
- en: A `ReactClass` class is created via the `React.createClass()` method. I'll introduce
    this in more detail in [Chapter 4](ch04.html "Chapter 4. Creating Your First React
    Component"), *Creating Your First React Component*.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`React.createClass()`方法创建了一个`ReactClass`类。我将在[第4章](ch04.html "第4章。创建您的第一个React组件")中更详细地介绍这个问题，*创建您的第一个React组件*。
- en: The `type` argument describes how an HTML tag or a `ReactClass` class is going
    to be rendered. In our example, we're rendering the `h1` HTML tag.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`type`参数描述了HTML标记或`ReactClass`类将如何呈现。在我们的例子中，我们正在呈现`h1` HTML标记。'
- en: The props parameter
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: props参数
- en: The `props` parameter is a JavaScript object passed from a parent element to
    a child element (and not the other way around) with some properties that are considered
    immutable, that is, those that should not be changed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`props`参数是从父元素传递给子元素（而不是反过来）的JavaScript对象，具有一些被视为不可变的属性，即不应更改的属性。'
- en: 'While creating DOM elements with React, we can pass the `props` object with
    properties that represent the HTML attributes such as `class` and `style`. For
    example, run the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用React创建DOM元素时，我们可以传递`props`对象，其中包含代表HTML属性的属性，例如`class`和`style`。例如，运行以下代码：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding code will create an `h1` HTML element with a `class` attribute
    set to `header`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将创建一个`class`属性设置为`header`的`h1` HTML元素：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Notice that we name our property `className` rather than `class`. The reason
    for this is that the `class` keyword is reserved in JavaScript. If you use `class`
    as a property name, it will be ignored by React, and a helpful warning message
    will be printed on the web browser''s console:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将属性命名为`className`而不是`class`。这样做的原因是`class`关键字在JavaScript中是保留的。如果您将`class`用作属性名称，React将忽略它，并在Web浏览器的控制台上打印有用的警告消息：
- en: '**Warning: Unknown DOM property class. Did you mean className?**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告：未知的DOM属性类。您是指className吗？**'
- en: '**Use className instead.**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**请改用className。**'
- en: You might be wondering what this `data-reactroot` attribute is doing in our
    `h1` tag? We didn't pass it to our `props` object, so where did it come from?
    It is added and used by React to track the DOM nodes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道我们的`h1`标签中的`data-reactroot`属性是做什么的？我们没有将其传递给我们的`props`对象，那它是从哪里来的？它是由React添加并使用的，用于跟踪DOM节点。
- en: The children parameter
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: children参数
- en: 'The `children` parameter describes what child elements this html element should
    have, if any. A child element can be any type of `ReactNode`: a virtual DOM element
    represented by `ReactElement`, a string or a number represented by `ReactText`,
    or an array of other `ReactNode` nodes, which is also called `ReactFragment`.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`children`参数描述了此HTML元素应具有哪些子元素（如果有）。子元素可以是任何类型的`ReactNode`：由`ReactElement`表示的虚拟DOM元素，由`ReactText`表示的字符串或数字，或者其他`ReactNode`节点的数组，也称为`ReactFragment`。'
- en: 'Let''s take a look at this example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个例子：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding code will create an `h1` HTML element with a `class` attribute
    and a text node, `This is React`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将创建一个带有`class`属性和文本节点`This is React`的`h1` HTML元素：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `h1` tag is represented by `ReactElement`, while the `This is React` string
    is represented by `ReactText`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`h1`标签由`ReactElement`表示，而`This is React`字符串由`ReactText`表示。'
- en: 'Next, let''s create a React element with a number of other React elements as
    its children:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个React元素，它的子元素是一些其他的React元素：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We''ve created three React elements: `h1`, `p`, and `section`. The `h1` and
    `p` both have child text nodes, `''This is React''` and `''And that is how it
    works.''`, respectively. The `section` tag has a child that is an array of two
    `ReactElement` types, `h1` and `p`, called `reactFragment`. This is also an array
    of `ReactNode`. Each `ReactElement` type in the `reactFragment` array must have
    a `key` property that helps React to identify that `ReactElement` type. As a result,
    we get the following HTML markup:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了三个React元素：`h1`，`p`和`section`。`h1`和`p`都有子文本节点，分别是`'This is React'`和`'And
    that is how it works.'`。`section`标签有一个子元素，是两个`ReactElement`类型的数组，`h1`和`p`，称为`reactFragment`。这也是一个`ReactNode`数组。`reactFragment`数组中的每个`ReactElement`类型都必须有一个`key`属性，帮助React识别该`ReactElement`类型。结果，我们得到以下HTML标记：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we understand how to create React elements. What if we want to create a
    number of React elements of the same type? Does it mean that we need to call `React.createElement(''type'')`
    over and over again for each element of the same type? We can, but we don''t need
    to because React provides us with a factory function called `React.createFactory()`.
    A factory function is a function that creates other functions. This is exactly
    what `React.createFactory(type)` does: it creates a function that produces `ReactElement`
    of a given type.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们明白了如何创建React元素。如果我们想要创建多个相同类型的React元素呢？这意味着我们需要为每个相同类型的元素一遍又一遍地调用`React.createElement('type')`吗？我们可以，但我们不需要，因为React为我们提供了一个名为`React.createFactory()`的工厂函数。工厂函数是一个创建其他函数的函数。这正是`React.createFactory(type)`所做的：它创建一个产生给定类型的`ReactElement`的函数。
- en: 'Consider the following example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding example produces this HTML:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子产生了这个HTML：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can simplify it by first creating a factory function:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过首先创建一个工厂函数来简化它：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding example, we're first calling the `React.createFactory()` function
    and passing a `li` HTML tag name as a type parameter. Then, the `React.createFactory()`
    function returns a new function that we can use as a convenient shorthand to create
    elements of the `li` type. We store a reference to this function in a variable
    called `createListItemElement`. Then, we call this function three times, and each
    time we only pass the `props` and `children` parameters, which are unique for
    each element. Notice that `React.createElement()` and `React.createFactory()`
    both expect an HTML tag name string (such as `li`) or the `ReactClass` object
    as a type parameter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们首先调用了`React.createFactory()`函数，并将`li` HTML标签名称作为类型参数传递。然后，`React.createFactory()`函数返回一个新的函数，我们可以将其用作创建`li`类型元素的便捷缩写。我们将这个函数的引用存储在一个名为`createListItemElement`的变量中。然后，我们调用这个函数三次，每次只传递`props`和`children`参数，这些参数对于每个元素都是唯一的。请注意，`React.createElement()`和`React.createFactory()`都期望一个HTML标签名称字符串（如`li`）或`ReactClass`对象作为类型参数。
- en: 'React provides us with a number of built-in factory functions to create common
    HTML tags. You can call them from the `React.DOM` object; for example, `React.DOM.ul()`,
    `React.DOM.li()`, and `React.DOM.div()`. Using them, we can simplify our previous
    example even further:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: React为我们提供了许多内置的工厂函数来创建常见的HTML标签。您可以从`React.DOM`对象中调用它们；例如，`React.DOM.ul()`，`React.DOM.li()`和`React.DOM.div()`。使用它们，我们甚至可以进一步简化我们之前的例子：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, we know how to create a tree of `ReactNode`. However, there is one important
    line of code that we need to discuss before we can progress further:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道如何创建`ReactNode`的树。然而，在我们继续之前，有一行重要的代码需要讨论：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you might have already guessed, it renders our `ReactNode` tree to the DOM.
    Let's take a closer look at how it works.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经猜到了，它将我们的 `ReactNode` 树呈现到 DOM。让我们更仔细地看看它是如何工作的。
- en: Rendering React elements
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染 React 元素
- en: 'The `ReactDOM.render()` method takes three parameters: `ReactElement`, a regular
    `DOMElement` container, and a `callback` function:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReactDOM.render()` 方法接受三个参数：`ReactElement`、一个常规的 `DOMElement` 容器和一个 `callback`
    函数：'
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: A `ReactElement` type is a root element in the tree of `ReactNode` that you've
    created. A regular `DOMElement` parameter is a container DOM node for that tree.
    The `callback` parameter is a function executed after the tree is rendered or
    updated. It's important to note that if this `ReactElement` type was previously
    rendered to a parent `DOMElement` container, then `ReactDOM.render()` will perform
    an update on the already rendered DOM tree and only mutate the DOM, as it is necessary
    to reflect the latest version of the `ReactElement` type. This is why a virtual
    DOM requires fewer DOM mutations.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReactElement` 类型是您创建的 `ReactNode` 树中的根元素。常规的 `DOMElement` 参数是该树的容器 DOM 节点。`callback`
    参数是在树被渲染或更新后执行的函数。重要的是要注意，如果此 `ReactElement` 类型先前已呈现到父 `DOMElement` 容器，则 `ReactDOM.render()`
    将对已呈现的 DOM 树执行更新，并且仅会改变 DOM，因为需要反映 `ReactElement` 类型的最新版本。这就是为什么虚拟 DOM 需要较少的 DOM
    变化。'
- en: So far, we've assumed that we're always creating our virtual DOM in a web browser.
    This is understandable because, after all, React is a user interface library,
    and all user interfaces are rendered in a web browser. Can you think of a case
    when rendering a user interface on a client would be slow? Some of you might have
    already guessed that I am talking about the initial page load. The problem with
    the initial page load is the one I mentioned at the beginning of this chapter—we're
    not creating static web pages anymore. Instead, when a web browser loads our web
    application, it receives only the bare minimum HTML markup that is usually used
    as a container or a parent element for our web application. Then, our JavaScript
    code creates the rest of the DOM, but in order for it to do so, it often needs
    to request extra data from the server. However, getting this data takes time.
    Once this data is received, our JavaScript code starts to mutate the DOM. We know
    that DOM mutations are slow. How can we solve this problem?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们假设我们总是在 web 浏览器中创建我们的虚拟 DOM。这是可以理解的，因为毕竟 React 是一个用户界面库，所有用户界面都是在 web
    浏览器中呈现的。您能想到在客户端渲染用户界面会很慢的情况吗？你们中的一些人可能已经猜到了，我说的是初始页面加载。初始页面加载的问题是我在本章开头提到的一个问题——我们不再创建静态网页了。相反，当
    web 浏览器加载我们的 web 应用程序时，它只会收到通常用作我们的 web 应用程序的容器或父元素的最少 HTML 标记。然后，我们的 JavaScript
    代码创建其余的 DOM，但为了这样做，它通常需要从服务器请求额外的数据。然而，获取这些数据需要时间。一旦收到这些数据，我们的 JavaScript 代码开始改变
    DOM。我们知道 DOM 变化很慢。我们如何解决这个问题？
- en: The solution is somewhat unexpected. Instead of mutating the DOM in a web browser,
    we mutate it on a server, just like we would with our static web pages. A web
    browser will then receive an HTML that fully represents a user interface of our
    web application at the time of the initial page load. Sounds simple, but we can't
    mutate the DOM on a server because it doesn't exist outside a web browser. Or
    can we?
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案有些出乎意料。我们不是在 web 浏览器中改变 DOM，而是在服务器上改变它，就像我们在静态网页上做的那样。然后，web 浏览器将接收一个 HTML，它完全代表了我们的
    web 应用程序在初始页面加载时的用户界面。听起来很简单，但我们不能在服务器上改变 DOM，因为它在 web 浏览器之外不存在。或者我们可以吗？
- en: We have a virtual DOM that is just JavaScript, and using Node.js, we can run
    JavaScript on a server. So, technically, we can use the React library on a server,
    and we can create our `ReactNode` tree on a server. The question is how can we
    render it to a string that we can send to a client?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个只是JavaScript的虚拟DOM，并且使用Node.js，我们可以在服务器上运行JavaScript。因此，从技术上讲，我们可以在服务器上使用React库，并且可以在服务器上创建我们的`ReactNode`树。问题是我们如何将其渲染为一个可以发送给客户端的字符串？
- en: 'React has a method called `ReactDOMServer.renderToString()` just to do this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: React有一个名为`ReactDOMServer.renderToString()`的方法来做到这一点：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `ReactDOMServer.renderToString()` method takes `ReactElement` as a parameter
    and renders it to its initial HTML. Not only is this faster than mutating a DOM
    on a client, but it also improves the **Search Engine Optimization** (**SEO**)
    of your web application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReactDOMServer.renderToString()`方法以`ReactElement`作为参数，并将其渲染为初始HTML。这不仅比在客户端上改变DOM更快，而且还提高了您的Web应用的搜索引擎优化（SEO）。'
- en: 'Speaking of generating static web pages, we can do this too with React:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 说到生成静态网页，我们也可以用React来做到这一点：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Similar to `ReactDOMServer.renderToString()`, this method also takes `ReactElement`
    as a parameter and outputs an HTML string. However, it doesn't create extra DOM
    attributes that React uses internally, producing shorter HTML strings that we
    can transfer to the wire quickly.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ReactDOMServer.renderToString()`类似，这个方法也以`ReactElement`作为参数，并输出一个HTML字符串。然而，它不会创建React在内部使用的额外DOM属性，从而产生较短的HTML字符串，我们可以快速传输到网络。
- en: Now you know not only how to create a virtual DOM tree using React elements,
    but you also know how to render it to a client and server. Our next question is
    whether we can do it quickly and in a more visual manner.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你不仅知道如何使用React元素创建虚拟DOM树，还知道如何将其渲染到客户端和服务器。我们接下来的问题是是否可以快速且更直观地完成这个过程。
- en: Creating React elements with JSX
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSX创建React元素
- en: When we build our virtual DOM by constantly calling the `React.createElement()`
    method, it becomes quite hard to translate these multiple function calls visually
    into a hierarchy of HTML tags. Don't forget that even though we're working with
    a virtual DOM, we're still creating a structure layout for our content and user
    interface. Wouldn't it be great to be able to visualize that layout easily by
    simply looking at our React code?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过不断调用`React.createElement()`方法来构建我们的虚拟DOM时，将这些多个函数调用视觉上转换为HTML标签的层次结构变得非常困难。不要忘记，即使我们正在使用虚拟DOM，我们仍然在为我们的内容和用户界面创建一个结构布局。通过简单地查看我们的React代码，能够轻松地可视化该布局，这不是很好吗？
- en: '**JSX** is an optional HTML-like syntax that allows us to create a virtual
    DOM tree, without using the `React.createElement()` method.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSX**是一种可选的类似HTML的语法，允许我们创建虚拟DOM树，而不使用`React.createElement()`方法。'
- en: 'Let''s take a look at the previous example that we created without JSX:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们之前创建的不使用JSX的示例：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Translate this into the one with JSX:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 将此转换为JSX：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, JSX allows us to write HTML-like syntax in our JavaScript code.
    More importantly, we can now clearly see what our HTML layout will look like once
    it's rendered. JSX is a convenience tool and it comes with a price in the form
    of an additional transformation step. A transformation of JSX syntax into a valid
    JavaScript syntax must happen before our "invalid" JavaScript code is interpreted.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，JSX允许我们在JavaScript代码中编写类似HTML的语法。更重要的是，我们现在可以清楚地看到我们的HTML布局在渲染后会是什么样子。JSX是一个方便的工具，但它也有一个额外的转换步骤的代价。在我们的“无效”JavaScript代码被解释之前，必须将JSX语法转换为有效的JavaScript语法。
- en: 'In our previous chapter, we installed the `babel-preset-react` module that
    transforms our JSX syntax into valid JavaScript. This transformation happens every
    time we run Webpack. Navigate to `~/snapterest/` and run this command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们安装了`babel-preset-react`模块，将我们的JSX语法转换为有效的JavaScript。这种转换发生在我们运行Webpack时。转到`~/snapterest/`并运行以下命令：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To understand JSX syntax better, I recommend that you play with the Babel REPL
    tool: [https://babeljs.io/repl/](https://babeljs.io/repl/)—it converts your JSX
    syntax to plain JavaScript on the fly.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解JSX语法，我建议您使用Babel REPL工具进行实验：[https://babeljs.io/repl/](https://babeljs.io/repl/)——它可以将您的JSX语法即时转换为普通的JavaScript。
- en: Using JSX, you might feel very unusual in the beginning, but it can become a
    very intuitive and convenient tool to use. The best part is that you can choose
    whether to use it or not. I found that JSX saves me development time, so I chose
    to use it in this project that we're building.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JSX，起初可能会感到非常不同寻常，但它可以成为一个非常直观和方便的工具。最好的部分是您可以选择是否使用它。我发现JSX可以节省我的开发时间，所以我选择在我们正在构建的项目中使用它。
- en: If you have a question about what we discussed in this chapter, then you can
    refer to [https://github.com/fedosejev/react-essentials](https://github.com/fedosejev/react-essentials)
    and create a new issue.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对我们在本章讨论的内容有疑问，那么您可以参考[https://github.com/fedosejev/react-essentials](https://github.com/fedosejev/react-essentials)并创建一个新的问题。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started this chapter by discussing the issues with single web page applications
    and how they can be addressed. Then, you learned what a virtual DOM is and how
    React allows us to build one. We also installed React and created our first React
    element using only JavaScript. Then, you also learned how to render React elements
    in a web browser and on a server. Finally, we looked at a simpler way of creating
    React elements with JSX.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从讨论单页面应用程序的问题以及如何解决它们开始了本章。然后，您了解了虚拟DOM是什么，以及React如何允许我们构建一个虚拟DOM。我们还安装了React，并且仅使用JavaScript创建了我们的第一个React元素。然后，您还学会了如何在Web浏览器和服务器上渲染React元素。最后，我们看了一种更简单的使用JSX创建React元素的方法。
- en: In the next chapter, we'll dive deeper into the world of React components.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地了解React组件的世界。
