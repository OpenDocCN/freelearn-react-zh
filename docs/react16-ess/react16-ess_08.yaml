- en: Chapter 8. Building Complex React Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。构建复杂的React组件
- en: In this chapter, we'll put everything you learned so far about React components
    in action by building the most complex components in our application, that is,
    the child components of our `Collection` component. Our aim in this chapter is
    to gain solid React experience and grow our React muscle. Let's get started!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过构建应用程序中最复杂的组件，也就是我们`Collection`组件的子组件，将你到目前为止学到的关于React组件的一切付诸实践。我们在本章的目标是获得扎实的React经验并增强我们的React能力。让我们开始吧！
- en: Creating the TweetList component
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建TweetList组件
- en: 'As you know, our `Collection` component has two child components: `CollectionControls`
    and `TweetList`.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，我们的`Collection`组件有两个子组件：`CollectionControls`和`TweetList`。
- en: 'We''ll first build the `TweetList` component. Create the following `~/snapterest/source/components/TweetList.js`
    file:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先构建`TweetList`组件。创建以下`~/snapterest/source/components/TweetList.js`文件：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `TweetList` component renders a list of tweets:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`TweetList`组件渲染推文列表：'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'First, we create a list of `Tweet` elements:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个`Tweet`元素列表：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `TweetUtils.getListOfTweetIds()` method returns an array of tweet IDs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`TweetUtils.getListOfTweetIds()`方法返回一个推文ID数组。'
- en: 'Then, for each tweet ID in that array, we create a `Tweet` component. For this,
    we will call the `map()` method on our array of tweet IDs and pass the `this.getTweetElement`
    method as an argument:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于数组中的每个推文ID，我们创建一个`Tweet`组件。为此，我们将在推文ID数组上调用`map()`方法，并将`this.getTweetElement`方法作为参数传递：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `getTweetElement()` method returns a `Tweet` element wrapped in the `<li>`
    element. As we already know, the `Tweet` component has an optional `onImageClick`
    property. When do we want to provide this optional property and when don't we?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`getTweetElement()`方法返回一个包裹在`<li>`元素中的`Tweet`元素。正如我们已经知道的，`Tweet`组件有一个可选的`onImageClick`属性。我们何时想要提供这个可选属性，何时不想要呢？'
- en: There are two scenarios. In the first scenario, the user will click on a tweet
    image to remove it from a collection of tweets. In this scenario, our `Tweet`
    component will react to a `click` event, so we need to provide the `onImageClick`
    property. In the second scenario, the user will export a static collection of
    tweets that has no user interaction. In this scenario, we don't need to provide
    the `onImageClick` property.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种情况。在第一种情况下，用户将点击推文图像以将其从推文集合中移除。在这种情况下，我们的`Tweet`组件将对`click`事件做出反应，因此我们需要提供`onImageClick`属性。在第二种情况下，用户将导出一个没有用户交互的静态推文集合。在这种情况下，我们不需要提供`onImageClick`属性。
- en: 'This is exactly what we do in our `getTweetElement()` method:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们在`getTweetElement()`方法中所做的：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We create a `tweet` constant that stores a tweet with an ID that is provided
    by the `tweetId` argument. Then, we create a constant that stores the `this.props.onRemoveTweetFromCollection`
    property that is passed by a parent `Collection` component.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个`tweet`常量，其中存储了一个由`tweetId`参数提供的推文。然后，我们创建一个常量，其中存储了由父`Collection`组件传递的`this.props.onRemoveTweetFromCollection`属性。
- en: 'Next, we check whether the `this.props.onRemoveTweetFromCollection` property
    is provided by a `Collection` component. If it is, then we create a `Tweet` element
    with an `onImageClick` property:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们检查`this.props.onRemoveTweetFromCollection`属性是否由`Collection`组件提供。如果是，则我们创建一个带有`onImageClick`属性的`Tweet`元素：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If it isn''t provided, then we create a `Tweet` element without a `handleImageClick`
    property:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有提供，则创建一个没有`handleImageClick`属性的`Tweet`元素：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We use the `TweetList` component in the following two cases:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在以下两种情况下使用`TweetList`组件：
- en: This component is used when rendering a collection of tweets in the `Collection`
    component. In this case, the `onRemoveTweetFromCollection` property *is* provided.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该组件用于在`Collection`组件中呈现推文集合。在这种情况下，提供了`onRemoveTweetFromCollection`属性。
- en: This component is used when rendering a string of HTML markup that represents
    a collection of tweets in the `Collection` component. In this case, the `onRemoveTweetFromCollection`
    property *is not* provided.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当渲染代表`Collection`组件中一系列推文的HTML标记字符串时，将使用这个组件。在这种情况下，`onRemoveTweetFromCollection`属性*不会*被提供。
- en: 'Once we create our `Tweet` element, and put it into the `tweetElement` variable,
    we return the `<li>` element with an inline style:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了我们的`Tweet`元素，并将其放入`tweetElement`变量中，我们就返回带有内联样式的`<li>`元素：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Besides the `style` property, our `<li>` element has a `key` property. It is
    used by React to identify each child element that is created dynamically. I recommend
    that you read more about Dynamic Children at [https://facebook.github.io/react/docs/lists-and-keys.html](https://facebook.github.io/react/docs/lists-and-keys.html).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`style`属性，我们的`<li>`元素还有一个`key`属性。它被React用来标识动态创建的每个子元素。我建议你阅读更多关于动态子元素的内容，网址是[https://facebook.github.io/react/docs/lists-and-keys.html](https://facebook.github.io/react/docs/lists-and-keys.html)。
- en: 'This is how the `getTweetElement()` method works. As a result, the `TweetList`
    component returns an unordered list of `Tweet` elements:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`getTweetElement()`方法的工作原理。因此，`TweetList`组件返回一个`Tweet`元素的无序列表：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating the CollectionControls component
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`CollectionControls`组件
- en: 'Now, since you understand what the `Collection` component renders, let''s discuss
    its child components. We''ll start with `CollectionControls`. Create the following
    `~/snapterest/source/components/CollectionControls.js` file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然你了解了`Collection`组件渲染的内容，让我们讨论它的子组件。我们将从`CollectionControls`开始。创建以下`~/snapterest/source/components/CollectionControls.js`文件：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `CollectionControls` component, as the name suggests, renders a user interface
    to control a collection. These controls allow the user to do the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`CollectionControls`组件，顾名思义，渲染一个用户界面来控制一个集合。这些控件允许用户执行以下操作：'
- en: Rename a collection
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名一个集合
- en: Empty a collection
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清空一个集合
- en: Export a collection
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出一个集合
- en: 'A collection has a name. By default, this name is `new` and users can change
    it. A collection name is displayed in a header that is rendered by the `CollectionControls`
    component. This component is a perfect candidate for storing the collection''s
    name, and since changing a name will require a component re-render, we''ll store
    that name in the component''s state object:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个集合有一个名称。默认情况下，这个名称是`new`，用户可以更改它。集合名称显示在由`CollectionControls`组件渲染的标题中。这个组件是存储集合名称的完美候选者，由于更改名称将需要组件重新渲染，我们将把那个名称存储在组件的状态对象中：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `CollectionControls` component can render either collection control elements
    or a form to change the collection name. A user can switch between the two. We
    need a way to represent these two states—we''ll use the `isEditingName` property
    for that purpose. By default, `isEditingName` is set to `false`; therefore, users
    won''t see a form to change the collection name, when the `CollectionControls`
    component is mounted. Let''s take a look at its `render()` method:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`CollectionControls`组件可以渲染集合控制元素，也可以渲染一个改变集合名称的表单。用户可以在两者之间切换。我们需要一种方式来表示这两种状态——我们将使用`isEditingName`属性来实现这个目的。默认情况下，`isEditingName`被设置为`false`；因此，当`CollectionControls`组件被挂载时，用户将看不到改变集合名称的表单。让我们来看一下它的`render()`方法：'
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'First, we check whether the component state''s `this.state.isEditingName` property
    is set to `true`. If it is, then the `CollectionControls` component returns the
    `CollectionRenameForm` component that renders a form to change the collection
    name:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们检查组件状态的`this.state.isEditingName`属性是否设置为`true`。如果是，那么`CollectionControls`组件将返回`CollectionRenameForm`组件，它渲染一个改变集合名称的表单：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `CollectionRenameForm` component renders a form to change the collection
    name. It receives three properties:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`CollectionRenameForm`组件渲染一个改变集合名称的表单。它接收三个属性：'
- en: The `name` property, which references the current collection name
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用当前集合名称的`name`属性
- en: The `onChangeCollectionName` and `onCancelCollectionNameChange` properties,
    which reference the component's methods
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用组件方法的`onChangeCollectionName`和`onCancelCollectionNameChange`属性
- en: 'We''ll implement the `CollectionRenameForm` component later in this chapter.
    Now let''s take a closer look at the `setCollectionName` method:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面实现`CollectionRenameForm`组件。现在让我们更仔细地看看`setCollectionName`方法：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `setCollectionName()` method updates the collection's name and hides a form
    to edit the collection name by updating the component's state. We'll call this
    method when the user submits a new collection name.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`setCollectionName()`方法更新集合的名称，并通过更新组件的状态来隐藏编辑集合名称的表单。当用户提交新的集合名称时，我们将调用此方法。'
- en: 'Now, let''s take a look at the `toggleEditCollectionName()` method:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下`toggleEditCollectionName()`方法：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This method shows or hides the collection's name editing form by setting the
    `isEditingName` property to the opposite of its current Boolean value using the
    `!` operator. We'll call this method when the user clicks on the **Rename collection**
    or **Cancel** buttons, that is, show or hide the collection name change form.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`!`运算符将`isEditingName`属性设置为其当前布尔值的相反值，此方法显示或隐藏集合名称编辑表单。当用户单击**重命名集合**或**取消**按钮时，我们将调用此方法，即显示或隐藏集合名称更改表单。
- en: 'If the `CollectionControls` component state''s `this.state.isEditingName` property
    is set to `false`, then it returns collection controls:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`CollectionControls`组件状态的`this.state.isEditingName`属性设置为`false`，那么它将返回集合控件：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We wrap the `Header` component, two `Button` components, and the `CollectionExportForm`
    component in a `div` element. You''re already familiar with the `Header` component
    from the previous chapter. It receives a `text` property that references a string.
    However, in this case, we do not directly pass a string, but rather a call to
    the `this.getHeaderText()` function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`Header`组件、两个`Button`组件和`CollectionExportForm`组件包装在一个`div`元素中。您已经在上一章中熟悉了`Header`组件。它接收一个引用字符串的`text`属性。但是，在这种情况下，我们不直接传递一个字符串，而是调用`this.getHeaderText()`函数：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In turn, `this.getHeaderText()` returns a string. Let''s take a closer look
    at the `getHeaderText()` method:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 反过来，`this.getHeaderText()`返回一个字符串。让我们更仔细地看看`getHeaderText()`方法：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This method generates a string for our header based on the number of tweets
    in our collection. The important feature of this method is that it returns not
    only a string, but rather a tree of React elements that encapsulate that string.
    First, we create the `numberOfTweetsInCollection` constant. It stores the number
    of tweets in a collection. We then create a `text` variable and assign it a number
    of tweets in a collection. At this point, the `text` variable stores an integer
    value. Our next task is to concatenate the right string to it based on what that
    integer value is:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法根据集合中的推文数量生成标题字符串。该方法的重要特点是它不仅返回一个字符串，而是封装该字符串的React元素树。首先，我们创建`numberOfTweetsInCollection`常量。它存储了集合中的推文数量。然后，我们创建一个`text`变量，并将其赋值为集合中的推文数量。此时，`text`变量存储一个整数值。我们的下一个任务是根据该整数值的内容将正确的字符串连接到它上：
- en: If `numberOfTweetsInCollection` is `1`, then we need to concatenate `' tweet
    in your'`
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`numberOfTweetsInCollection`为`1`，那么我们需要连接`' tweet in your'`
- en: Otherwise, we need to concatenate `' tweets in your'`
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，我们需要连接`' tweets in your'`
- en: 'Once the header string is created, we then return the following elements:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建标题字符串后，我们将返回以下元素：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The final string encapsulated inside a `<span>` element consists of a value
    of a `text` variable, a collection name, and the `collection` keyword; consider
    this example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最终字符串封装在`<span>`元素内，包括`text`变量的值、集合名称和`collection`关键字；考虑以下示例：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once this string is returned by the `getHeaderText()` method, it is then passed
    as a property to a `Header` component. Our next collection control element in
    the `CollectionControls` components `render()` method is `Button`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`getHeaderText()`方法返回这个字符串，它就作为一个属性传递给`Header`组件。我们在`CollectionControls`组件的`render()`方法中的下一个收藏控制元素是`Button`：
- en: '[PRE20]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We pass the `Rename collection` string to its `label` property and the `this.toggleEditCollectionName`
    method to its `handleClick` property. As a result, this button will have the `Rename
    collection` label, and it will toggle a form to change the collection name.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`Rename collection`字符串传递给它的`label`属性，将`this.toggleEditCollectionName`方法传递给它的`handleClick`属性。因此，这个按钮将有`Rename
    collection`标签，并且它将切换一个表单来改变收藏的名称。
- en: 'The next collection control element is our second `Button` component:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个收藏控制元素是我们的第二个`Button`组件：
- en: '[PRE21]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you can guess, it will have an `Empty collection` label, and it will remove
    all the tweets from a collection.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以猜到，它将有一个`Empty collection`标签，并且它将从收藏中删除所有的推文。
- en: 'Our final collection control element is `CollectionExportForm`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最终收藏控制元素是`CollectionExportForm`：
- en: '[PRE22]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This element receives an HTML markup string that represents our collection,
    and it will render a button. We'll create this component later in this chapter.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素接收一个表示我们收藏的HTML标记字符串，并且它将渲染一个按钮。我们将在本章后面创建这个组件。
- en: Now, since you understand what the `CollectionControls` component will render,
    let's take a closer look at its child components. We'll start with the `CollectionRenameForm`
    component.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然你了解了`CollectionControls`组件将渲染什么，让我们更仔细地看一下它的子组件。我们将从`CollectionRenameForm`组件开始。
- en: Creating the CollectionRenameForm component
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`CollectionRenameForm`组件
- en: 'First, let''s create the `~/snapterest/source/components/CollectionRenameForm.js`
    file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建`~/snapterest/source/components/CollectionRenameForm.js`文件：
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This component renders a form to change the collection name:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件渲染一个表单来改变收藏的名称：
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Our `<form>` element wraps four elements, which are as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`<form>`元素包裹着四个元素，它们分别是：
- en: One `Header` component
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Header`组件
- en: One `<input>` element
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`<input>`元素
- en: Two `Button` components
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个`Button`组件
- en: The `Header` component renders the `"Collection name:"` string. The `<input>`
    element is wrapped inside a `<div>` element with a `className` property set to
    `form-group`. This name is part of the Bootstrap framework that we discussed in
    [Chapter 5](ch05.html "Chapter 5. Making Your React Components Reactive"), *Making
    Your React Components Reactive*. It's used for layout and styling, and it's not
    part of our React application's logic.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`Header`组件渲染`"Collection name:"`字符串。`<input>`元素包裹在一个`<div>`元素内，该元素的`className`属性设置为`form-group`。这个名称是我们在[第5章](ch05.html
    "第5章。使你的React组件具有响应性")中讨论的Bootstrap框架的一部分。它用于布局和样式，并不是我们React应用程序逻辑的一部分。'
- en: 'The `<input>` element has quite a few properties. Let''s take a closer look
    at it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`<input>`元素有相当多的属性。让我们仔细看一下它：'
- en: '[PRE25]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following is the description of the properties used in the preceding code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码中使用的属性的描述：
- en: The `className` property is set to `form-control`. It is another class name,
    which is part of the Bootstrap framework. We will use this for styling purposes.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`className`属性设置为`form-control`。这是Bootstrap框架的一部分，我们将用它来进行样式设置。'
- en: In addition, we apply our own style to this `input` element using the `style`
    property that references the `inputStyle` object with a single style rule, that
    is, `marginRight`.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，我们使用`style`属性将我们自己的样式应用到这个`input`元素，该属性引用了一个包含单个样式规则的`inputStyle`对象，即`marginRight`。
- en: The `value` property is set to the current value stored in the component's state,
    `this.state.inputValue`.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`属性设置为组件状态中存储的当前值，`this.state.inputValue`。'
- en: The `onChange` property references a `handleInputValueChange` method that is
    an `onchange` event handler.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onChange`属性引用了一个`handleInputValueChange`方法，这是一个`onchange`事件处理程序。'
- en: The `ref` property is a special React property that you can attach to any component.
    It takes a callback function, which React will execute immediately after the component
    is mounted and unmounted. It allows us to access the DOM `input` element that
    our React component renders.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ref`属性是一个特殊的React属性，你可以附加到任何组件上。它接受一个回调函数，React会在组件被挂载和卸载后立即执行。它允许我们访问我们的React组件渲染的DOM
    `input`元素。'
- en: 'I would like you to focus on the last three properties: `value`, `onChange`,
    and `ref`. The `value` property is set to the component state''s property, and
    the only way to change that value is to update its state. On the other hand, we
    know that a user can interact with an input field and change its value. Will this
    behavior apply to our component? No. Whenever a user types, our input field''s
    value won''t change. This is because a component is in control of `<input>`, not
    the user. In our `CollectionRenameForm` component, the value of the `<input>`
    always reflects the value of the `this.state.inputValue` property, regardless
    of what the user types. The user is not in control, but the `CollectionRenameForm`
    component is.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你关注最后三个属性：`value`、`onChange`和`ref`。`value`属性设置为组件状态的属性，改变该值的唯一方法是更新其状态。另一方面，我们知道用户可以与输入字段交互并改变其值。这种行为会应用到我们的组件吗？不会。每当用户键入时，我们的输入字段的值不会改变。这是因为组件控制着`<input>`，而不是用户。在我们的`CollectionRenameForm`组件中，`<input>`的值始终反映`this.state.inputValue`属性的值，而不管用户键入了什么。用户没有控制权，而是`CollectionRenameForm`组件有。
- en: Then, how can we make sure that our input field reacts to the user input? We
    need to listen to the user input, and update the state of the `CollectionRenameForm`
    component, which in turn will re-render the input field with an updated value.
    Doing so on every input's `change` event will make our input look like it works
    as usual, and the user can freely change its value.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何确保我们的输入字段对用户输入做出反应？我们需要监听用户输入，并更新`CollectionRenameForm`组件的状态，这将重新渲染带有更新值的输入字段。在每个输入的`change`事件上这样做将使我们的输入看起来像是正常工作的，用户可以自由地改变其值。
- en: 'For this, we provide our `<input>` element with the `onChange` property that
    references the component''s `this.handleInputValueChange` method:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们为我们的`<input>`元素提供了引用组件的`this.handleInputValueChange`方法的`onChange`属性：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As we discussed in [Chapter 4](ch04.html "Chapter 4. Creating Your First React
    Component"), *Creating Your First React Component*, React passes instances of
    `SyntheticEvent` to event handlers. The `handleInputValueChange()` method receives
    an `event` object with a `target` property that has a `value` property. This `value`
    property stores a string that a user has typed in our input field. We pass that
    string into our `this.setInputValue()` method:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第4章](ch04.html "第4章。创建你的第一个React组件")中讨论的那样，*创建你的第一个React组件*，React将`SyntheticEvent`的实例传递给事件处理程序。`handleInputValueChange()`方法接收一个带有`target`属性的`event`对象，该属性具有一个`value`属性。这个`value`属性存储了用户在输入字段中键入的字符串。我们将这个字符串传递给我们的`this.setInputValue()`方法：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `setInputValue()` method is a convenient method that updates the component's
    state with a new input value. In turn, this update will re-render the `<input>`
    element with an updated value.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`setInputValue()`方法是一个方便的方法，它使用新的输入值更新组件的状态。反过来，这个更新将重新渲染带有更新值的`<input>`元素。'
- en: 'What''s the initial input''s value when the `CollectionRenameForm` component
    is mounted? Let''s take a look at this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当`CollectionRenameForm`组件被挂载时，初始输入的值是多少？让我们来看一下：
- en: '[PRE28]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you can see, we pass the collection's name from a parent component, and we
    use it to set the component's initial state.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们从父组件传递了集合的名称，并且我们用它来设置组件的初始状态。
- en: 'After we mount this component, we want to set focus on the input field so that
    the user can start editing the collection''s name straightaway. We know that once
    a component is inserted into the DOM, React calls its `componentDidMount()` method.
    This method is our best opportunity to set `focus`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在挂载此组件后，我们希望将焦点设置在输入字段上，以便用户可以立即开始编辑集合的名称。我们知道一旦组件插入到DOM中，React就会调用它的`componentDidMount()`方法。这个方法是我们设置`focus`的最佳机会：
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: To do this, we get our input element by referencing `this.collectionNameInput`
    and call the `focus()` function on it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们通过引用`this.collectionNameInput`获取我们的输入元素，并在其上调用`focus()`函数。
- en: How can we reference a DOM element inside the `componentDidMount()` method?
    Remember that we provided the `ref` property to our `input` element. Then we passed
    a callback function to that `ref` property, which in turn assigned a reference
    to the DOM input element to `this.collectionNameInput`. So now we can get that
    reference by accessing the `this.collectionNameInput` property.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何在`componentDidMount()`方法中引用DOM元素？记住，我们为我们的`input`元素提供了`ref`属性。然后我们将一个回调函数传递给该`ref`属性，该回调函数反过来将DOM输入元素的引用分配给`this.collectionNameInput`。所以现在我们可以通过访问`this.collectionNameInput`属性来获取该引用。
- en: 'Finally, let''s discuss our two form buttons:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们讨论一下我们的两个表单按钮：
- en: The `Change` button submits the form and changes the collection name
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Change`按钮提交表单并更改集合名称'
- en: The `Cancel` button submits the form, but doesn't change the collection name
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cancel`按钮提交表单，但不会更改集合名称'
- en: 'We''ll start with a `Change` button:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先从一个`Change`按钮开始：
- en: '[PRE30]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When a user clicks on it, the `this.handleFormSubmit` method is called:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击它时，将调用`this.handleFormSubmit`方法：
- en: '[PRE31]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We cancel the `submit` event, then get the collection name from the component's
    state, and pass it to the `this.props.onChangeCollectionName()` function call.
    The `onChangeCollectionName` function is passed by a parent `CollectionControls`
    component. Calling this function will change our collection's name.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取消了`submit`事件，然后从组件的状态中获取集合名称，并将其传递给`this.props.onChangeCollectionName()`函数调用。`onChangeCollectionName`函数是由父`CollectionControls`组件传递的。调用此函数将更改我们的集合名称。
- en: 'Now let''s discuss our second form button:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们讨论一下我们的第二个表单按钮：
- en: '[PRE32]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When a user clicks on it, the `this.handleFormCancel` method is called:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击它时，将调用`this.handleFormCancel`方法：
- en: '[PRE33]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Once again, we cancel a `submit` event, then get the original collection name
    that is passed as a property by a parent `CollectionControls` component, and pass
    it to our `this.setInputValue()` function. Then, we call the `this.props.onCancelCollectionNameChange()`
    function that hides the collection controls.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 再一次，我们取消了一个`submit`事件，然后获取由父`CollectionControls`组件作为属性传递的原始集合名称，并将其传递给我们的`this.setInputValue()`函数。然后，我们调用`this.props.onCancelCollectionNameChange()`函数，隐藏集合控件。
- en: That's our `CollectionRenameForm` component. Next, let's create our `Button`
    component that we reused twice in our `CollectionRenameForm` component.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的`CollectionRenameForm`组件。接下来，让我们创建我们的`Button`组件，我们在`CollectionRenameForm`组件中重复使用了两次。
- en: Creating the Button component
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Button组件
- en: 'Create the following `~/snapterest/source/components/Button.js` file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 创建以下`~/snapterest/source/components/Button.js`文件：
- en: '[PRE34]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `Button` component renders a button.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`Button`组件渲染一个按钮。'
- en: Notice that we didn't declare a class, but rather defined a simple function
    called `Button`. This is the functional way of creating React components. In fact,
    when the purpose of your component is purely to render some user interface elements
    with or without any props, then it's recommended that you use this approach.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们没有声明一个类，而是定义了一个简单的名为`Button`的函数。这是创建React组件的功能性方式。实际上，当您的组件的目的纯粹是渲染一些用户界面元素，有或没有任何props时，建议您使用这种方法。
- en: You can think of this simple React component as a "pure" function which takes
    an input in the form of the `props` object and returns JSX as output—consistently,
    no matter how many times you call this function.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将这个简单的React组件看作是一个“纯”函数，它以`props`对象的形式作为输入，并以JSX作为输出——无论您调用这个函数多少次，输出都是一致的。
- en: Ideally, most of your components should be created that way—as "pure" JavaScript
    functions. Of course, this is not possible when your component has state, but
    for all stateless components—there's a chance! Now take a look at all the components
    that we've created so far and see if you can rewrite them as "pure" functions
    instead of using classes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，大多数组件都应该以这种方式创建——作为“纯”JavaScript函数。当然，当您的组件具有状态时，这是不可能的，但对于所有无状态组件——有机会！现在看看我们迄今为止创建的所有组件，看看您是否可以将它们重写为“纯”函数，而不是使用类。
- en: 'I recommend that you read more about functional versus class components at:
    [https://facebook.github.io/r](https://facebook.github.io/r)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您阅读有关功能性与类组件的更多信息：[https://facebook.github.io/r](https://facebook.github.io/r)
- en: 'You might be wondering what''s the benefit of creating a dedicated component
    for a button if you could just use the `<button>` element? Think of a component
    as a wrapper for a `<button>` element and something else that comes with it. In
    our case, most `<button>` elements come with the same style, so it makes sense
    to encapsulate both the `<button>` and style objects inside a component, and reuse
    that component. Hence, the dedicated `Button` component. It expects to receive
    two properties from a parent component:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道为什么为按钮创建一个专用组件的好处，如果您可以直接使用`<button>`元素？将组件视为`<button>`元素和其他内容的包装器。在我们的情况下，大多数`<button>`元素都具有相同的样式，因此将`<button>`和样式对象封装在组件中，并重用该组件是有意义的。因此，有了专用的`Button`组件。它期望从父组件接收两个属性：
- en: The `label` property is a label for a button
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`属性是按钮的标签'
- en: The `handleClick` property is a callback function that is called when a user
    clicks on this button
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handleClick`属性是一个回调函数，当用户点击此按钮时调用'
- en: Now, it's time to create our `CollectionExportForm` component.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候创建我们的`CollectionExportForm`组件了。
- en: Creating the CollectionExportForm component
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`CollectionExportForm`组件
- en: The `CollectionExportForm` component is responsible for exporting a collection
    to a third-party website ([http://codepen.io](http://codepen.io)). Once your collection
    is on CodePen, you can save it and share it with your friends. Let's take a look
    at how this can be done.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`CollectionExportForm`组件负责将集合导出到第三方网站（[http://codepen.io](http://codepen.io)）。一旦您的集合在CodePen上，您可以保存它并与朋友分享。让我们看看如何做到这一点。'
- en: 'Create the `~/snapterest/source/components/CollectionExportForm.js` file:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`~/snapterest/source/components/CollectionExportForm.js`文件：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `CollectionExportForm` component renders a form with the `<input>` and `<button>`
    elements. The `<input>` element is hidden, and its value is set to an HTML markup
    string that is passed by a parent component as `htmlMarkup` property. The `<button>`
    element is the only element in this form that is visible to the user. When the
    user clicks on the **Export as HTML** button, a collection is submitted to CodePen
    that is opened in a new window. A user can then modify and share that collection.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`CollectionExportForm`组件呈现一个带有`<input>`和`<button>`元素的表单。`<input>`元素是隐藏的，其值设置为由父组件作为`htmlMarkup`属性传递的HTML标记字符串。`<button>`元素是此表单中唯一对用户可见的元素。当用户单击**导出为HTML**按钮时，将提交一个集合到CodePen，该集合将在新窗口中打开。然后用户可以修改和共享该集合。'
- en: Congratulations! At this point, you've built a fully functional web application
    with React. Let's see how it works.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！到目前为止，您已经使用React构建了一个完全功能的Web应用程序。让我们看看它是如何工作的。
- en: 'First, make sure that Snapkite Engine that we installed and configured in [Chapter
    2](ch02.html "Chapter 2. Installing Powerful Tools for Your Project"), *Installing
    Powerful Tools for Your Project*, is running. Navigate to `~/snapkite-engine/`
    and run the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请确保我们在[第2章](ch02.html "第2章。为您的项目安装强大的工具")中安装和配置的Snapkite Engine正在运行。导航到`~/snapkite-engine/`并运行以下命令：
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then, open a new Terminal window, navigate to `~/snapterest/`, and run this
    command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开一个新的终端窗口，导航到`~/snapterest/`，并运行以下命令：
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now open `~/snapterest/build/index.html` in your web browser. You will see new
    tweets appear. Click on them to add them to your collection. Click on them again
    to remove individual tweets from the collection. Click on the **Empty collection**
    button to remove all the tweets from your collection. Click on the **Rename collection**
    button, type a new collection name, and click on the **Change** button. Finally,
    click on the **Export as HTML** button to export your collection to [CodePen.io](http://CodePen.io).
    If you have any trouble with this chapter or previous chapters, then go to [https://github.com/fedosejev/react-essentials](https://github.com/fedosejev/react-essentials)
    and create a new issue.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在您的Web浏览器中打开`~/snapterest/build/index.html`。您将看到新的推文出现。单击它们将其添加到您的收藏中。再次单击它们将单个推文从收藏中删除。单击**清空收藏**按钮可从收藏中删除所有推文。单击**重命名收藏**按钮，输入新的收藏名称，然后单击**更改**按钮。最后，单击**导出为HTML**按钮将您的收藏导出到[CodePen.io](http://CodePen.io)。如果您在本章或之前的章节中遇到任何问题，请转到[https://github.com/fedosejev/react-essentials](https://github.com/fedosejev/react-essentials)并创建一个新问题。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you created the `TweetList`, `CollectionControls`, `CollectionRenameForm`,
    `CollectionExportForm`, and `Button` components. You completed building a fully
    functional React application.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您创建了`TweetList`，`CollectionControls`，`CollectionRenameForm`，`CollectionExportForm`和`Button`组件。您完成了构建一个完全功能的React应用程序。
- en: In our next chapters, we'll test this application with Jest, and enhance it
    with Flux and Redux.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用Jest测试这个应用程序，并使用Flux和Redux进行增强。
