["```jsx\ncomponentDidMount() {\n  SnapkiteStreamClient.initializeStream(this.handleNewTweet);\n}\n```", "```jsx\nimport SnapkiteStreamClient from \u2018snapkite-stream-client\u2019;\nimport { receiveTweet } from \u2018../actions/TweetActionCreators\u2019;\n\nfunction initializeStreamOfTweets() {\n  SnapkiteStreamClient.initializeStream(receiveTweet);\n}\n\nexport { initializeStreamOfTweets };\n```", "```jsx\nSnapkiteStreamClient.initializeStream(receiveTweet);\n```", "```jsx\nfunction receiveTweet(tweet) {\n  // ... create and dispatch \u2018receive_tweet\u2019 action\n}\n```", "```jsx\nimport React from \u2018react\u2019;\nimport ReactDOM from \u2018react-dom\u2019;\nimport Application from \u2018./components/Application\u2019;\nimport { initializeStreamOfTweets } from \u2018./utils/WebAPIUtils\u2019;\n\ninitializeStreamOfTweets();\n\nReactDOM.render(\n  <Application/>,\n  document.getElementById(\u2018react-application\u2019)\n);\n```", "```jsx\nimport { initializeStreamOfTweets } from \u2018./utils/WebAPIUtils\u2019;\n\ninitializeStreamOfTweets();\n```", "```jsx\nReactDOM.render(\n  <Application/>,\n  document.getElementById(\u2018react-application\u2019)\n);\n```", "```jsx\nfunction receiveTweet(tweet) {\n\n  console.log(\"I\u2019ve received a new tweet and now will dispatch it together with a new action.\");\n\n  const action = {\n    type: \u2018receive_tweet\u2019,\n    tweet\n  };\n\n  AppDispatcher.dispatch(action);\n}\n```", "```jsx\n**[Snapkite Stream Client] Socket connected**\n**I\u2019ve received a new tweet and now will dispatch it together with a new action.**\n\n```", "```jsx\nimport React from \u2018react\u2019;\nimport SnapkiteStreamClient from \u2018snapkite-stream-client\u2019;\nimport StreamTweet from \u2018./StreamTweet\u2019;\nimport Header from \u2018./Header\u2019;\n\nclass Stream extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      tweet: null\n    };\n  }\n\n  componentDidMount() {\n    SnapkiteStreamClient.initializeStream(this.handleNewTweet);\n  }\n\n  componentWillUnmount() {\n    SnapkiteStreamClient.destroyStream();\n  }\n\n  handleNewTweet = tweet => {\n    this.setState({\n      tweet\n    });\n  }\n\n  render() {\n    const { tweet } = this.state;\n    const { onAddTweetToCollection } = this.props;\n    const headerText = \"Waiting for public photos from Twitter...\";\n\n    if (tweet) {\n      return (\n        <StreamTweet\n          tweet={tweet}\n          onAddTweetToCollection={onAddTweetToCollection}\n        />\n      );\n    }\n\n    return (\n      <Header text={headerText} />\n    );\n  }\n}\n\nexport default Stream;\n```", "```jsx\nimport React from \u2018react\u2019;\nimport SnapkiteStreamClient from \u2018snapkite-stream-client\u2019;\nimport StreamTweet from \u2018./StreamTweet\u2019;\nimport Header from \u2018./Header\u2019;\nimport TweetStore from \u2018../stores/TweetStore\u2019;\n\nclass Stream extends React.Component {\n  state = {\n    tweet: null\n  }\n\n  render() {\n    const { tweet } = this.state;\n    const { onAddTweetToCollection } = this.props;\n    const headerText = \"Waiting for public photos from Twitter...\";\n\n    if (tweet) {\n      return (\n        <StreamTweet\n          tweet={tweet}\n          onAddTweetToCollection={onAddTweetToCollection}\n        />\n      );\n    }\n\n    return (\n      <Header text={headerText} />\n    );\n  }\n}\n\nexport default Stream;\n```", "```jsx\nstate = {\n  tweet: TweetStore.getTweet()\n}\n```", "```jsx\naddChangeListener(callback) {\n  this.on(\u2018change\u2019, callback);\n}\n```", "```jsx\nremoveChangeListener(callback) {\n  this.removeListener(\u2018change\u2019, callback);\n}\n```", "```jsx\ncomponentDidMount() {\n  TweetStore.addChangeListener(this.onTweetChange);\n}\n```", "```jsx\ncomponentWillUnmount() {\n  TweetStore.removeChangeListener(this.onTweetChange);\n}\n```", "```jsx\nonTweetChange = () => {\n  this.setState({\n    tweet: TweetStore.getTweet()\n  });\n}\n```", "```jsx\nreturn (\n  <StreamTweet\n    tweet={tweet}\n    onAddTweetToCollection={onAddTweetToCollection}\n  />\n);\n```", "```jsx\nreturn (<StreamTweet tweet={tweet} />);\n```", "```jsx\nimport React from \u2018react\u2019;\nimport StreamTweet from \u2018./StreamTweet\u2019;\nimport Header from \u2018./Header\u2019;\nimport TweetStore from \u2018../stores/TweetStore\u2019;\n\nclass Stream extends React.Component {\n  state = {\n    tweet: TweetStore.getTweet()\n  }\n\n  componentDidMount() {\n    TweetStore.addChangeListener(this.onTweetChange);\n  }\n\n  componentWillUnmount() {\n    TweetStore.removeChangeListener(this.onTweetChange);\n  }\n\n  onTweetChange = () => {\n    this.setState({\n      tweet: TweetStore.getTweet()\n    });\n  }\n\n  render() {\n    const { tweet } = this.state;\n    const { onAddTweetToCollection } = this.props;\n    const headerText = \"Waiting for public photos from Twitter...\";\n\n    if (tweet) {\n      return (<StreamTweet tweet={tweet}/>);\n    }\n\n    return (<Header text={headerText}/>);\n  }\n}\n\nexport default Stream;\n```", "```jsx\nimport AppDispatcher from \u2018../dispatcher/AppDispatcher\u2019;\nimport { EventEmitter } from \u2018events\u2019;\n\nconst CHANGE_EVENT = \u2018change\u2019;\n\nlet collectionTweets = {};\nlet collectionName = \u2018new\u2019;\n\nfunction addTweetToCollection(tweet) {\n  collectionTweets[tweet.id] = tweet;\n}\n\nfunction removeTweetFromCollection(tweetId) {\n  delete collectionTweets[tweetId];\n}\n\nfunction removeAllTweetsFromCollection() {\n  collectionTweets = {};\n}\n\nfunction setCollectionName(name) {\n  collectionName = name;\n}\n\nfunction emitChange() {\n  CollectionStore.emit(CHANGE_EVENT);\n}\n\nconst CollectionStore = Object.assign(\n  {}, EventEmitter.prototype, {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  },\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  },\n\n  getCollectionTweets() {\n    return collectionTweets;\n  },\n\n  getCollectionName() {\n    return collectionName;\n  }\n}\n);\n\nfunction handleAction(action) {\n\n  switch (action.type) {\n    case \u2018add_tweet_to_collection\u2019:\n      addTweetToCollection(action.tweet);\n      emitChange();\n      break;\n\n    case \u2018remove_tweet_from_collection\u2019:\n      removeTweetFromCollection(action.tweetId);\n      emitChange();\n      break;\n\n    case \u2018remove_all_tweets_from_collection\u2019:\n      removeAllTweetsFromCollection();\n      emitChange();\n      break;\n\n    case \u2018set_collection_name\u2019:\n      setCollectionName(action.collectionName);\n      emitChange();\n      break;\n\n    default: // ... do nothing\n\n  }\n}\n\nCollectionStore.dispatchToken = AppDispatcher.register(handleAction);\n\nexport default CollectionStore;\n```", "```jsx\nimport AppDispatcher from \u2018../dispatcher/AppDispatcher\u2019;\nimport { EventEmitter } from \u2018events\u2019;\n\nconst CHANGE_EVENT = \u2018change\u2019;\n```", "```jsx\nlet collectionTweets = {};\nlet collectionName = \u2018new\u2019;\n\nfunction addTweetToCollection(tweet) {\n  collectionTweets[tweet.id] = tweet;\n}\n\nfunction removeTweetFromCollection(tweetId) {\n  delete collectionTweets[tweetId];\n}\n\nfunction removeAllTweetsFromCollection() {\n  collectionTweets = {};\n}\n\nfunction setCollectionName(name) {\n  collectionName = name;\n}\n```", "```jsx\nCollectionStore.setCollectionName(\u2018impossible\u2019);\n```", "```jsx\nconst CollectionStore = Object.assign(\n  {}, EventEmitter.prototype, {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  },\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  },\n\n  getCollectionTweets() {\n    return collectionTweets;\n  },\n\n  getCollectionName() {\n    return collectionName;\n  }\n});\n```", "```jsx\nfunction handleAction(action) {\n  switch (action.type) {\n\n    case \u2018add_tweet_to_collection\u2019:\n      addTweetToCollection(action.tweet);\n      emitChange();\n      break;\n\n    case \u2018remove_tweet_from_collection\u2019:\n      removeTweetFromCollection(action.tweetId);\n      emitChange();\n      break;\n\n    case \u2018remove_all_tweets_from_collection\u2019:\n      removeAllTweetsFromCollection();\n      emitChange();\n      break;\n\n    case \u2018set_collection_name\u2019:\n      setCollectionName(action.collectionName);\n      emitChange();\n      break;\n\n    default: // ... do nothing\n\n  }\n}\n```", "```jsx\nCollectionStore.dispatchToken = AppDispatcher.register(handleAction);\n```", "```jsx\nexport default CollectionStore;\n```", "```jsx\nimport AppDispatcher from \u2018../dispatcher/AppDispatcher\u2019;\n\nfunction addTweetToCollection(tweet) {\n  const action = {\n    type: \u2018add_tweet_to_collection\u2019,\n    tweet\n  };\n\n  AppDispatcher.dispatch(action);\n}\n\nfunction removeTweetFromCollection(tweetId) {\n  const action = {\n    type: \u2018remove_tweet_from_collection\u2019,\n    tweetId\n  };\n\n  AppDispatcher.dispatch(action);\n}\n\nfunction removeAllTweetsFromCollection() {\n  const action = {\n    type: \u2018remove_all_tweets_from_collection\u2019\n  };\n\n  AppDispatcher.dispatch(action);\n}\n\nfunction setCollectionName(collectionName) {\n  const action = {\n    type: \u2018set_collection_name\u2019,\n    collectionName\n  };\n\n  AppDispatcher.dispatch(action);\n}\n\nexport default {\n  addTweetToCollection,\n  removeTweetFromCollection,\n  removeAllTweetsFromCollection,\n  setCollectionName\n};\n```", "```jsx\nimport React from \u2018react\u2019;\nimport Stream from \u2018./Stream\u2019;\nimport Collection from \u2018./Collection\u2019;\n\nclass Application extends React.Component {\n  render() {\n    const {\n      collectionTweets\n    } = this.state;\n\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-4 text-center\">\n            <Stream onAddTweetToCollection={this.addTweetToCollection}/>\n\n          </div>\n          <div className=\"col-md-8\">\n            <Collection\n              tweets={collectionTweets}\n              onRemoveTweetFromCollection={this.removeTweetFromCollection}\n              onRemoveAllTweetsFromCollection={this.removeAllTweetsFromCollection}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Application;\n```", "```jsx\nrender() {\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-md-4 text-center\">\n          <Stream/>\n        </div>\n        <div className=\"col-md-8\">\n          <Collection/>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n```", "```jsx\nimport React from \u2018react\u2019;\nimport Stream from \u2018./Stream\u2019;\nimport Collection from \u2018./Collection\u2019;\n\nconst Application = () =>(\n  <div className=\"container-fluid\">\n    <div className=\"row\">\n      <div className=\"col-md-4 text-center\">\n        <Stream />\n      </div>\n      <div className=\"col-md-8\">\n        <Collection />\n      </div>\n    </div>\n  </div>\n);\n\nexport default Application;\n```", "```jsx\nimport React, { Component } from \u2018react\u2019;\nimport ReactDOMServer from \u2018react-dom/server\u2019;\nimport CollectionControls from \u2018./CollectionControls\u2019;\nimport TweetList from \u2018./TweetList\u2019;\nimport Header from \u2018./Header\u2019;\nimport CollectionUtils from \u2018../utils/CollectionUtils\u2019;\nimport CollectionStore from \u2018../stores/CollectionStore\u2019;\n\nclass Collection extends Component {\n  state = {\n    collectionTweets: CollectionStore.getCollectionTweets()\n  }\n\n  componentDidMount() {\n    CollectionStore.addChangeListener(this.onCollectionChange);\n  }\n\n  componentWillUnmount() {\n    CollectionStore.removeChangeListener(this.onCollectionChange);\n  }\n\n  onCollectionChange = () => {\n    this.setState({\n      collectionTweets: CollectionStore.getCollectionTweets()\n    });\n  }\n\n  createHtmlMarkupStringOfTweetList() {\n    const htmlString = ReactDOMServer.renderToStaticMarkup(\n      <TweetList tweets={this.state.collectionTweets}/>\n    );\n\n    const htmlMarkup = {\n      html: htmlString\n    };\n\n    return JSON.stringify(htmlMarkup);\n  }\n\n  render() {\n    const { collectionTweets } = this.state;\n    const numberOfTweetsInCollection = CollectionUtils\n      .getNumberOfTweetsInCollection(collectionTweets);\n    let htmlMarkup;\n\n    if (numberOfTweetsInCollection > 0) {\n      htmlMarkup = this.createHtmlMarkupStringOfTweetList();\n\n      return (\n        <div>\n          <CollectionControls\n            numberOfTweetsInCollection={numberOfTweetsInCollection}\n            htmlMarkup={htmlMarkup}\n          />\n\n          <TweetList tweets={collectionTweets} />\n        </div>\n      );\n    }\n\n    return (<Header text=\"Your collection is empty\" />);\n  }\n}\n\nexport default Collection;\n```", "```jsx\nimport CollectionUtils from \u2018../utils/CollectionUtils\u2019;\nimport CollectionStore from \u2018../stores/CollectionStore\u2019;\n```", "```jsx\nrender() {\n  const { collectionTweets } = this.state;\n  const numberOfTweetsInCollection = CollectionUtils\n    .getNumberOfTweetsInCollection(collectionTweets);\n  let htmlMarkup;\n\n  if (numberOfTweetsInCollection > 0) {\n    htmlMarkup = this.createHtmlMarkupStringOfTweetList();\n\n    return (\n      <div>\n        <CollectionControls\n          numberOfTweetsInCollection={numberOfTweetsInCollection}\n          htmlMarkup={htmlMarkup}\n        />\n\n        <TweetList tweets={collectionTweets}/>\n      </div>\n    );\n  }\n\n  return (<Header text=\"Your collection is empty\"/>);\n}\n```", "```jsx\nimport React, { Component } from \u2018react\u2019;\nimport Header from \u2018./Header\u2019;\nimport Button from \u2018./Button\u2019;\nimport CollectionRenameForm from \u2018./CollectionRenameForm\u2019;\nimport CollectionExportForm from \u2018./CollectionExportForm\u2019;\nimport CollectionActionCreators from \u2018../actions/CollectionActionCreators\u2019;\nimport CollectionStore from \u2018../stores/CollectionStore\u2019;\n\nclass CollectionControls extends Component {\n  state = {\n    isEditingName: false\n  }\n\n  getHeaderText = () => {\n    const { numberOfTweetsInCollection } = this.props;\n    let text = numberOfTweetsInCollection;\n    const name = CollectionStore.getCollectionName();\n\n    if (numberOfTweetsInCollection === 1) {\n      text = `${text} tweet in your`;\n    } else {\n      text = `${text} tweets in your`;\n    }\n\n    return (\n      <span>\n        {text} <strong>{name}</strong> collection\n      </span>\n    );\n  }\n\n  toggleEditCollectionName = () => {\n    this.setState(prevState => ({\n      isEditingName: !prevState.isEditingName\n    }));\n  }\n\n  removeAllTweetsFromCollection = () => {\n    CollectionActionCreators.removeAllTweetsFromCollection();\n  }\n\n  render() {\n    const { name, isEditingName } = this.state;\n    const onRemoveAllTweetsFromCollection = this.removeAllTweetsFromCollection;\n    const { htmlMarkup } = this.props;\n\n    if (isEditingName) {\n      return (\n        <CollectionRenameForm\n          name={name}\n          onCancelCollectionNameChange={this.toggleEditCollectionName}\n        />\n      );\n    }\n\n    return (\n      <div>\n        <Header text={this.getHeaderText()} />\n\n        <Button\n          label=\"Rename collection\"\n          handleClick={this.toggleEditCollectionName}\n        />\n\n        <Button\n          label=\"Empty collection\"\n          handleClick={onRemoveAllTweetsFromCollection}\n        />\n\n        <CollectionExportForm htmlMarkup={htmlMarkup} />\n      </div>\n    );\n  }\n}\n\nexport default CollectionControls;\n```", "```jsx\nimport CollectionActionCreators from \u2018../actions/CollectionActionCreators\u2019;\nimport CollectionStore from \u2018../stores/CollectionStore\u2019;\n```", "```jsx\nconst name = CollectionStore.getCollectionName();\n```", "```jsx\nremoveAllTweetsFromCollection = () => {\n  CollectionActionCreators.removeAllTweetsFromCollection();\n}\n```", "```jsx\nimport CollectionActionCreators from \u2018../actions/CollectionActionCreators\u2019;\nimport CollectionStore from \u2018../stores/CollectionStore\u2019;\n```", "```jsx\nconstructor(props) {\n  super(props);\n\n  const { name } = props;\n\n  this.state = {\n    inputValue: name\n  };\n}\n```", "```jsx\nstate = {\n  inputValue: CollectionStore.getCollectionName()\n}\n```", "```jsx\nhandleFormSubmit = event => {\n  event.preventDefault();\n\n  const { onChangeCollectionName } = this.props;\n  const { inputValue: collectionName } = this.state;\n\n  onChangeCollectionName(collectionName);\n}\n```", "```jsx\nhandleFormSubmit = event => {\n  event.preventDefault();\n\n  const { onCancelCollectionNameChange } = this.props;\n  const { inputValue: collectionName } = this.state;\n\n  CollectionActionCreators.setCollectionName(collectionName);\n\n  onCancelCollectionNameChange();\n}\n```", "```jsx\nCollectionActionCreators.setCollectionName(collectionName);\n```", "```jsx\nhandleFormCancel = event => {\n  event.preventDefault();\n\n  const {\n    name: collectionName,\n    onCancelCollectionNameChange\n  } = this.props;\n\n  this.setInputValue(collectionName);\n  onCancelCollectionNameChange();\n}\n```", "```jsx\nhandleFormCancel = event => {\n  event.preventDefault();\n\n  const {\n    onCancelCollectionNameChange\n  } = this.props;\n\n  const collectionName = CollectionStore.getCollectionName();\n\n  this.setInputValue(collectionName);\n  onCancelCollectionNameChange();\n}\n```", "```jsx\nconst collectionName = CollectionStore.getCollectionName();\n```", "```jsx\nimport CollectionActionCreators from \u2018../actions/CollectionActionCreators\u2019;\n```", "```jsx\nremoveTweetFromCollection = tweet => {\n  CollectionActionCreators.removeTweetFromCollection(tweet.id);\n}\n```", "```jsx\nconst { tweets, onRemoveTweetFromCollection } = this.props;\n```", "```jsx\nconst { tweets } = this.props;\nconst onRemoveTweetFromCollection = this.removeTweetFromCollection;\n```", "```jsx\nimport CollectionActionCreators from \u2018../actions/CollectionActionCreators\u2019;\n```", "```jsx\naddTweetToCollection = tweet => {\n  CollectionActionCreators.addTweetToCollection(tweet);\n}\n```", "```jsx\n<Tweet\n  tweet={tweet}\n  onImageClick={onAddTweetToCollection}\n/>\n```", "```jsx\n<Tweet\n  tweet={tweet}\n  onImageClick={this.addTweetToCollection}\n/>\n```", "```jsx\nconst { tweet, onAddTweetToCollection } = this.props; \n```", "```jsx\nconst { tweet } = this.props;\n```", "```jsx\n**npm start**\n\n```"]