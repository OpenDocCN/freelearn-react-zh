["```jsx\nimport React, { Component } from 'react';\nimport Tweet from './Tweet'; \nimport TweetUtils from '../utils/TweetUtils';\n\nconst listStyle = {\n  padding: '0'\n};\n\nconst listItemStyle = {\n  display: 'inline-block',\n  listStyle: 'none'\n};\n\nclass TweetList extends Component {\n\n  getTweetElement = (tweetId) => {\n    const { tweets, onRemoveTweetFromCollection } = this.props;\n    const tweet = tweets[tweetId];\n    let tweetElement;\n\n    if (onRemoveTweetFromCollection) {\n      tweetElement = (\n        <Tweet\n          tweet={tweet}\n          onImageClick={onRemoveTweetFromCollection}\n        />\n      );\n    } else {\n      tweetElement = <Tweet tweet={tweet}/>;\n    }\n\n    return (\n      <li style={listItemStyle} key={tweet.id}>\n        {tweetElement}\n      </li>\n    );\n  }\n\n  render() {\n    const tweetElements = TweetUtils\n      .getListOfTweetIds()\n      .map(this.getTweetElement);\n\n    return (\n      <ul style={listStyle}>\n        {tweetElements}\n      </ul>\n    );\n  }\n}\n\nexport default TweetList;\n```", "```jsx\nrender() {\n  const tweetElements = TweetUtils\n    .getListOfTweetIds()\n    .map(this.getTweetElement);\n\n  return (\n    <ul style={listStyle}>\n      {tweetElements}\n    </ul>\n  );\n}\n```", "```jsx\nconst tweetElements = TweetUtils\n  .getListOfTweetIds()\n  .map(this.getTweetElement);\n```", "```jsx\ngetTweetElement = (tweetId) => {\n  const { tweets, onRemoveTweetFromCollection } = this.props;\n  const tweet = tweets[tweetId];\n  let tweetElement;\n\n  if (onRemoveTweetFromCollection) {\n    tweetElement = (\n      <Tweet\n        tweet={tweet}\n        onImageClick={onRemoveTweetFromCollection}\n      />\n    );\n  } else {\n    tweetElement = <Tweet tweet={tweet} />;\n  }\n\n  return (\n    <li style={listItemStyle} key={tweet.id}>\n      {tweetElement}\n    </li>\n  );\n}\n```", "```jsx\nconst { tweets, onRemoveTweetFromCollection } = this.props;\nconst tweet = tweets[tweetId];\nlet tweetElement;\n\nif (onRemoveTweetFromCollection) {\n  tweetElement = (\n    <Tweet\n      tweet={tweet}\n      onImageClick={onRemoveTweetFromCollection}\n    />\n  );\n} else {\n  tweetElement = <Tweet tweet={tweet}/>;\n}\n```", "```jsx\ntweetElement = (\n  <Tweet\n    tweet={tweet}\n    onImageClick={onRemoveTweetFromCollection}\n  />\n);\n```", "```jsx\ntweetElement = <Tweet tweet={tweet} />;\n```", "```jsx\nreturn (\n  <li style={listItemStyle} key={tweet.id}>\n    {tweetElement}\n  </li>\n);\n```", "```jsx\nreturn (\n  <ul style={listStyle}>\n    {tweetElements}\n  </ul>\n);\n```", "```jsx\nimport React, { Component } from 'react';\nimport Header from './Header';\nimport Button from './Button';\nimport CollectionRenameForm from './CollectionRenameForm';\nimport CollectionExportForm from './CollectionExportForm';\n\nclass CollectionControls extends Component {\n  state = {\n    name: 'new',\n    isEditingName: false\n  };\n\n  getHeaderText = () => {\n    const { name } = this.state;\n    const { numberOfTweetsInCollection } = this.props;\n    let text = numberOfTweetsInCollection;\n\n    if (numberOfTweetsInCollection === 1) {\n      text = `${text} tweet in your`;\n    } else {\n      text = `${text} tweets in your`;\n    }\n\n    return (\n      <span>\n        {text} <strong>{name}</strong> collection\n      </span>\n    );\n  }\n\n  toggleEditCollectionName = () => {\n    this.setState(prevState => ({\n      isEditingName: !prevState.isEditingName\n    }));\n  }\n\n  setCollectionName = (name) => {\n    this.setState({\n      name,\n      isEditingName: false\n    });\n  }\n\n  render() {\n    const { name, isEditingName } = this.state;\n    const {\n      onRemoveAllTweetsFromCollection,\n      htmlMarkup\n    } = this.props;\n\n    if (isEditingName) {\n      return (\n        <CollectionRenameForm\n          name={name}\n          onChangeCollectionName={this.setCollectionName}\n          onCancelCollectionNameChange={this.toggleEditCollectionName}\n        />\n      );\n    }\n\n    return (\n      <div>\n        <Header text={this.getHeaderText()}/>\n\n        <Button\n          label=\"Rename collection\"\n          handleClick={this.toggleEditCollectionName}\n        />\n\n        <Button\n          label=\"Empty collection\"\n          handleClick={onRemoveAllTweetsFromCollection}\n        />\n\n        <CollectionExportForm htmlMarkup={htmlMarkup} />\n      </div>\n    );\n  }\n}\n\nexport default CollectionControls;\n```", "```jsx\nstate = {\n  name: 'new',\n  isEditingName: false\n};\n```", "```jsx\nrender() {\n  const { name, isEditingName } = this.state;\n  const {\n    onRemoveAllTweetsFromCollection,\n    htmlMarkup\n  } = this.props;\n\n  if (isEditingName) {\n    return (\n      <CollectionRenameForm\n        name={name}\n        onChangeCollectionName={this.setCollectionName}\n        onCancelCollectionNameChange={this.toggleEditCollectionName}\n      />\n    );\n  }\n\n  return (\n    <div>\n      <Header text={this.getHeaderText()}/>\n\n      <Button\n        label=\"Rename collection\"\n        handleClick={this.toggleEditCollectionName}\n      />\n\n      <Button\n        label=\"Empty collection\"\n        handleClick={onRemoveAllTweetsFromCollection}\n      />\n\n      <CollectionExportForm htmlMarkup={htmlMarkup}/>\n    </div>\n  );\n}\n```", "```jsx\n<CollectionRenameForm\n  name={name}\n  onChangeCollectionName={this.setCollectionName}\n  onCancelCollectionNameChange={this.toggleEditCollectionName}\n/>\n```", "```jsx\nsetCollectionName = (name) => {\n  this.setState({\n    name,\n    isEditingName: false\n  });\n}\n```", "```jsx\ntoggleEditCollectionName = () => {\n  this.setState(prevState => ({\n    isEditingName: !prevState.isEditingName\n  }));\n}\n```", "```jsx\nreturn (\n  <div>\n    <Header text={this.getHeaderText()}/>\n\n    <Button\n      label=\"Rename collection\"\n      handleClick={this.toggleEditCollectionName}\n    />\n\n    <Button\n      label=\"Empty collection\"\n      handleClick={onRemoveAllTweetsFromCollection}\n    />\n\n    <CollectionExportForm htmlMarkup={htmlMarkup}/>\n  </div>\n);\n```", "```jsx\n<Header text={this.getHeaderText()} />\n```", "```jsx\ngetHeaderText = () => {\n  const { name } = this.state;\n  const { numberOfTweetsInCollection } = this.props;\n  let text = numberOfTweetsInCollection;\n\n  if (numberOfTweetsInCollection === 1) {\n    text = `${text} tweet in your`;\n  } else {\n    text = `${text} tweets in your`;\n  }\n\n  return (\n    <span>\n      {text} <strong>{name}</strong> collection\n    </span>\n  );\n}\n```", "```jsx\nreturn (\n  <span>\n    {text} <strong>{name}</strong> collection\n  </span>\n);\n```", "```jsx\n1 tweet in your new collection.\n```", "```jsx\n<Button\n  label=\"Rename collection\"\n  handleClick={this.toggleEditCollectionName}\n/>\n```", "```jsx\n<Button\n  label=\"Empty collection\"\n  handleClick={onRemoveAllTweetsFromCollection}\n/>\n```", "```jsx\n<CollectionExportForm htmlMarkup={htmlMarkup} />\n```", "```jsx\nimport React, { Component } from 'react';\nimport Header from './Header';\nimport Button from './Button';\n\nconst inputStyle = {\n  marginRight: '5px'\n};\n\nclass CollectionRenameForm extends Component {\n  constructor(props) {\n    super(props);\n\n    const { name } = props;\n\n    this.state = {\n      inputValue: name\n    };\n  }\n\n  setInputValue = (inputValue) => {\n    this.setState({\n      inputValue\n    });\n  }\n\n  handleInputValueChange = (event) => {\n    const inputValue = event.target.value;\n    this.setInputValue(inputValue);\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    const { onChangeCollectionName } = this.props;\n    const { inputValue: collectionName } = this.state;\n\n    onChangeCollectionName(collectionName);\n  }\n\n  handleFormCancel = (event) => {\n    event.preventDefault();\n\n    const {\n      name: collectionName,\n      onCancelCollectionNameChange\n    } = this.props;\n\n    this.setInputValue(collectionName);\n    onCancelCollectionNameChange();\n  }\n\n  componentDidMount() {\n    this.collectionNameInput.focus();\n  }\n\n  render() {\n    const { inputValue } = this.state;\n\n    return (\n      <form className=\"form-inline\" onSubmit={this.handleSubmit}>\n\n        <Header text=\"Collection name:\"/>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control\"\n            style={inputStyle}\n            onChange={this.handleInputValueChange}\n            value={inputValue}\n            ref={input => { this.collectionNameInput = input; }}\n          />\n        </div>\n\n        <Button\n          label=\"Change\"\n          handleClick={this.handleFormSubmit}\n        />\n        <Button\n          label=\"Cancel\"\n          handleClick={this.handleFormCancel}\n        />\n      </form>\n    );\n  }\n}\n\nexport default CollectionRenameForm;\n```", "```jsx\nrender() {\n  const { inputValue } = this.state;\n\n  return (\n    <form className=\"form-inline\" onSubmit={this.handleSubmit}>\n\n      <Header text=\"Collection name:\"/>\n      <div className=\"form-group\">\n        <input\n          className=\"form-control\"\n          style={inputStyle}\n          onChange={this.handleInputValueChange}\n          value={inputValue}\n          ref={input => this.collectionNameInput = input}\n        />\n      </div>\n\n      <Button\n        label=\"Change\"\n        handleClick={this.handleFormSubmit}\n      />\n      <Button\n        label=\"Cancel\"\n        handleClick={this.handleFormCancel}\n      />\n    </form>\n  );\n}\n```", "```jsx\n<input\n  className=\"form-control\"\n  style={inputStyle}\n  onChange={this.handleInputValueChange}\n  value={inputValue}\n  ref={input => { this.collectionNameInput = input; }}\n/>\n```", "```jsx\nhandleInputValueChange = (event) => {\n  const inputValue = event.target.value;\n  this.setInputValue(inputValue);\n}\n```", "```jsx\nsetInputValue = (inputValue) => {\n  this.setState({\n    inputValue\n  });\n}\n```", "```jsx\nconstructor(props) {\n  super(props);\n\n  const { name } = props;\n\n  this.state = {\n    inputValue: name\n  };\n}\n```", "```jsx\ncomponentDidMount() {\n  this.collectionNameInput.focus();\n}\n```", "```jsx\n<Button\n  label=\"Change\"\n  handleClick={this.handleFormSubmit}\n/>\n```", "```jsx\nhandleFormSubmit = (event) => {\n  event.preventDefault();\n\n  const { onChangeCollectionName } = this.props;\n  const { inputValue: collectionName } = this.state;\n\n  onChangeCollectionName(collectionName);\n}\n```", "```jsx\n<Button\n  label=\"Cancel\"\n  handleClick={this.handleFormCancel}\n/>\n```", "```jsx\nhandleFormCancel = (event) => {\n  event.preventDefault();\n\n  const {\n    name: collectionName,\n    onCancelCollectionNameChange\n  } = this.props;\n\n  this.setInputValue(collectionName);\n  onCancelCollectionNameChange();\n}\n```", "```jsx\nimport React from 'react';\n\nconst buttonStyle = {\n  margin: '10px 0'\n};\n\nconst Button = ({ label, handleClick }) => (\n  <button\n    className=\"btn btn-default\"\n    style={buttonStyle}\n    onClick={handleClick}\n  >\n    {label}\n  </button>\n);\n\nexport default Button;\n```", "```jsx\nimport React from 'react';\n\nconst formStyle = {\n  display: 'inline-block'\n};\n\nconst CollectionExportForm = ({ htmlMarkup }) => (\n  <form\n      action=\"http://codepen.io/pen/define\"\n      method=\"POST\"\n      target=\"_blank\"\n      style={formStyle}\n    >\n      <input type=\"hidden\" name=\"data\" value={htmlMarkup}/>\n      <button type=\"submit\" className=\"btn btn-default\">\n        Export as HTML\n      </button>\n    </form>\n);\n\nexport default CollectionExportForm;\n```", "```jsx\n**npm start**\n\n```", "```jsx\n**npm start**\n\n```"]