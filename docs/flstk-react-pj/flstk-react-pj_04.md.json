["```jsx\n| mern_skeleton/\n   | -- client/\n      | --- assets/\n         | ---- images/\n      | --- auth/\n         | ---- api-auth.js\n         | ---- auth-helper.js\n         | ---- PrivateRoute.js\n         | ---- Signin.js\n      | --- core/\n         | ---- Home.js\n         | ---- Menu.js\n      | --- user/\n         | ---- api-user.js\n         | ---- DeleteUser.js\n         | ---- EditProfile.js\n         | ---- Profile.js\n         | ---- Signup.js\n         | ---- Users.js\n      | --- App.js\n      | --- main.js\n      | --- MainRouter.js\n  | -- server/\n      | --- devBundle.js\n  | -- webpack.config.client.js\n  | -- webpack.config.client.production.js\n```", "```jsx\nnpm install babel-preset-react --save-dev\n```", "```jsx\n{\n    \"presets\": [\n      \"env\",\n      \"stage-2\",\n      \"react\"\n    ],\n    \"plugins\": [\n \"react-hot-loader/babel\"\n ]\n}\n```", "```jsx\nnpm install --save-dev webpack-dev-middleware webpack-hot-middleware file-loader\nnpm install --save react-hot-loader\n```", "```jsx\nimport config from './../config/config'\nimport webpack from 'webpack'\nimport webpackMiddleware from 'webpack-dev-middleware'\nimport webpackHotMiddleware from 'webpack-hot-middleware'\nimport webpackConfig from './../webpack.config.client.js'\n\nconst compile = (app) => {\n  if(config.env === \"development\"){\n    const compiler = webpack(webpackConfig)\n    const middleware = webpackMiddleware(compiler, {\n      publicPath: webpackConfig.output.publicPath\n    })\n    app.use(middleware)\n    app.use(webpackHotMiddleware(compiler))\n  }\n}\n\nexport default {\n  compile\n}\n```", "```jsx\n**import devBundle from './devBundle'**\nconst app = express()\n**devBundle.compile(app)** \n```", "```jsx\nimport path from 'path'\nconst CURRENT_WORKING_DIR = process.cwd()\napp.use('/dist', express.static(path.join(CURRENT_WORKING_DIR, 'dist')))\n```", "```jsx\n...\n<body>\n    <div id=\"root\"></div>\n    **<script type=\"text/javascript\" src=\"/dist/bundle.js\"></script>**\n</body>\n```", "```jsx\nnpm install --save react react-dom\n```", "```jsx\nnpm install --save react-router react-router-dom\n```", "```jsx\nnpm install --save material-ui@1.0.0-beta.43 material-ui-icons\n```", "```jsx\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:100,300,400\">\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n```", "```jsx\nimport React from 'react'\nimport { render } from 'react-dom'\nimport App from './App'\n\nrender(<App/>, document.getElementById('root'))\n```", "```jsx\nimport {MuiThemeProvider, createMuiTheme} from 'material-ui/styles'\nimport {indigo, pink} from 'material-ui/colors'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n    light: '#757de8',\n    main: '#3f51b5',\n    dark: '#002984',\n    contrastText: '#fff',\n  },\n  secondary: {\n    light: '#ff79b0',\n    main: '#ff4081',\n    dark: '#c60055',\n    contrastText: '#000',\n  },\n    openTitle: indigo['400'],\n    protectedTitle: pink['400'],\n    type: 'light'\n  }\n}) \n```", "```jsx\nimport React from 'react'\nimport MainRouter from './MainRouter'\nimport {BrowserRouter} from 'react-router-dom'\n\nconst App = () => (\n  <BrowserRouter>\n    <MuiThemeProvider theme={theme}>\n      <MainRouter/>\n    </MuiThemeProvider>\n  </BrowserRouter>\n)\n```", "```jsx\nimport { hot } from 'react-hot-loader'\n...\nexport default hot(module)(App)\n```", "```jsx\nimport React, {Component} from 'react'\nimport {Route, Switch} from 'react-router-dom'\nimport Home from './core/Home'\nclass MainRouter extends Component {\n  render() {\n    return (<div>\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n      </Switch>\n    </div>)\n  }\n}\nexport default MainRouter\n```", "```jsx\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {withStyles} from 'material-ui/styles'\nimport Card, {CardContent, CardMedia} from 'material-ui/Card'\nimport Typography from 'material-ui/Typography'\nimport seashellImg from './../assets/images/seashell.jpg'\n```", "```jsx\nconst styles = theme => ({\n  card: {\n    maxWidth: 600,\n    margin: 'auto',\n    marginTop: theme.spacing.unit * 5\n  },\n  title: {\n    padding:`${theme.spacing.unit * 3}px ${theme.spacing.unit * 2.5}px \n    ${theme.spacing.unit * 2}px`,\n    color: theme.palette.text.secondary\n  },\n  media: {\n    minHeight: 330\n  }\n}) \n```", "```jsx\nclass Home extends Component {\n  render() {\n    const {classes} = this.props \n    return (\n      <div>\n        <Card className={classes.card}>\n          <Typography type=\"headline\" component=\"h2\" className=\n          {classes.title}>\n            Home Page\n          </Typography>\n          <CardMedia className={classes.media} image={seashellImg} \n          title=\"Unicorn Shells\"/>\n          <CardContent>\n            <Typography type=\"body1\" component=\"p\">\n              Welcome to the Mern Skeleton home page\n            </Typography>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n}\n```", "```jsx\nHome.propTypes = {\n  classes: PropTypes.object.isRequired\n}\n```", "```jsx\nexport default withStyles(styles)(Home)\n```", "```jsx\n[ \u2026\n    {\n       test: /\\.(ttf|eot|svg|gif|jpg|png)(\\?[\\s\\S]+)?$/,\n       use: 'file-loader'\n    }\n]\n```", "```jsx\nnpm install --save-dev file-loader\n```", "```jsx\nnpm run development\n```", "```jsx\nconst create = (user) => {\n  return fetch('/api/users/', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    })\n    .then((response) => {\n      return response.json()\n    }).catch((err) => console.log(err))\n}\n```", "```jsx\nconst list = () => {\n  return fetch('/api/users/', {\n    method: 'GET',\n  }).then(response => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n```", "```jsx\nconst read = (params, credentials) => {\n  return fetch('/api/users/' + params.userId, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n```", "```jsx\nconst update = (params, credentials, user) => {\n  return fetch('/api/users/' + params.userId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify(user)\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n```", "```jsx\nconst remove = (params, credentials) => {\n  return fetch('/api/users/' + params.userId, {\n    method: 'DELETE',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  }) \n}\n```", "```jsx\nexport { create, list, read, update, remove }\n```", "```jsx\nconst signin = (user) => {\n  return fetch('/auth/signin/', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify(user)\n    })\n    .then((response) => {\n      return response.json()\n    }).catch((err) => console.log(err))\n}\n```", "```jsx\nconst signout = () => {\n  return fetch('/auth/signout/', {\n    method: 'GET',\n  }).then(response => {\n      return response.json()\n  }).catch((err) => console.log(err))\n}\n```", "```jsx\nexport { signin, signout }\n```", "```jsx\nauthenticate(jwt, cb) {\n    if(typeof window !== \"undefined\")\n        sessionStorage.setItem('jwt', JSON.stringify(jwt))\n    cb()\n}\n```", "```jsx\nisAuthenticated() {\n    if (typeof window == \"undefined\")\n      return false\n\n    if (sessionStorage.getItem('jwt'))\n      return JSON.parse(sessionStorage.getItem('jwt'))\n    else\n      return false\n}\n```", "```jsx\nsignout(cb) {\n      if(typeof window !== \"undefined\")\n        sessionStorage.removeItem('jwt')\n      cb()\n      signout().then((data) => {\n          document.cookie = \"t=; expires=Thu, 01 Jan 1970 00:00:00 \n          UTC; path=/;\"\n      })\n}\n```", "```jsx\nimport React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport auth from './auth-helper'\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route {...rest} render={props => (\n    auth.isAuthenticated() ? (\n      <Component {...props}/>\n    ) : (\n      <Redirect to={{\n        pathname: '/signin',\n        state: { from: props.location }\n      }}/>\n    )\n  )}/>\n)\n\nexport default PrivateRoute\n```", "```jsx\nclass Users extends Component {\n  state = { users: [] }\n...\n```", "```jsx\n  componentDidMount = () => {\n    list().then((data) => {\n      if (data.error)\n        console.log(data.error)\n      else\n        this.setState({users: data})\n    })\n  }\n```", "```jsx\nrender() {\n    const {classes} = this.props\n    return (\n      <Paper className={classes.root} elevation={4}>\n        <Typography type=\"title\" className={classes.title}>\n          All Users\n        </Typography>\n        <List dense>\n          {this.state.users.map(function(item, i) {\n              return <Link to={\"/user/\" + item._id} key={i}>\n                <ListItem button=\"button\">\n                  <ListItemAvatar>\n                    <Avatar>\n                      <Person/>\n                    </Avatar>\n                  </ListItemAvatar>\n                  <ListItemText primary={item.name}/>\n                  <ListItemSecondaryAction>\n                    <IconButton>\n                      <ArrowForward/>\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              </Link>\n            })}\n        </List>\n      </Paper>\n    )\n  }\n```", "```jsx\n<Route path=\"/users\" component={Users}/>\n```", "```jsx\n<Link to=\"/users\">Users</Link>\n```", "```jsx\n  constructor() {\n    state = { name: '', password: '', email: '', open: false, error: '' }\n  ...\n```", "```jsx\nhandleChange = name => event => {\n    this.setState({[name]: event.target.value})\n}\n```", "```jsx\n  clickSubmit = () => {\n    const user = {\n      name: this.state.name || undefined,\n      email: this.state.email || undefined,\n      password: this.state.password || undefined\n    } \n    create(user).then((data) => {\n      if (data.error)\n        this.setState({error: data.error})\n      else\n        this.setState({error: '', open: true})\n    })\n  }\n```", "```jsx\n  render() {\n    const {classes} = this.props\n    return (<div>\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography type=\"headline\" component=\"h2\" \n                      className={classes.title}>\n            Sign Up\n          </Typography>\n          <TextField id=\"name\" label=\"Name\" \n          className={classes.textField} \n                     value={this.state.name} \n                     onChange={this.handleChange('name')} \n                     margin=\"normal\"/> <br/>\n          <TextField id=\"email\" type=\"email\" label=\"Email\" \n                     className={classes.textField} value=\n                     {this.state.email} \n                     onChange={this.handleChange('email')}\n                     margin=\"normal\"/><br/>\n          <TextField id=\"password\" type=\"password\"\n          label=\"Password\" className={classes.textField} \n                     value={this.state.password} \n                     onChange={this.handleChange('password')} \n                     margin=\"normal\"/><br/> \n          {this.state.error && ( <Typography component=\"p\" \n           color=\"error\">\n              <Icon color=\"error\" \n              className={classes.error}>error</Icon>\n              {this.state.error}</Typography>)}\n        </CardContent>\n        <CardActions>\n          <Button color=\"primary\" raised=\"raised\"\n                  onClick={this.clickSubmit} \n           className={classes.submit}>Submit</Button>\n        </CardActions>\n      </Card>\n      <Dialog> ... </Dialog>\n    </div>)\n  }\n```", "```jsx\n<Dialog open={this.state.open} disableBackdropClick={true}>\n   <DialogTitle>New Account</DialogTitle>\n   <DialogContent>\n      <DialogContentText>\n         New account successfully created.\n      </DialogContentText>\n   </DialogContent>\n   <DialogActions>\n      <Link to=\"/signin\">\n         <Button color=\"primary\" autoFocus=\"autoFocus\" variant=\"raised\">\n            Sign In\n```", "```jsx\n         </Button>\n      </Link>\n   </DialogActions>\n</Dialog>\n```", "```jsx\n<Route path=\"/signup\" component={Signup}/>\n```", "```jsx\nclass Signin extends Component {\n  state = { email: '', password: '', error: '', redirectToReferrer: false } \n...\n```", "```jsx\nclickSubmit = () => {\n    const user = {\n      email: this.state.email || undefined,\n      password: this.state.password || undefined\n    }\n    signin(user).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        auth.authenticate(data, () => {\n this.setState({redirectToReferrer: true})\n })\n      }\n    })\n}\n```", "```jsx\nrender() {\n    const {classes} = this.props\n    const {from} = this.props.location.state || {\n from: {pathname: '/' }\n } \n const {redirectToReferrer} = this.state\n if (redirectToReferrer)\n return (<Redirect to={from}/>)\n    return (...)\n  }\n}\n```", "```jsx\n<Route path=\"/signin\" component={Signin}/>\n```", "```jsx\nclass Profile extends Component {\n  constructor({match}) {\n    super()\n    this.state = { user: '', redirectToSignin: false }\n    this.match = match \n  } ...\n```", "```jsx\ninit = (userId) => {\n    const jwt = auth.isAuthenticated()\n    read({\n      userId: userId\n    }, {t: jwt.token}).then((data) => {\n      if (data.error)\n        this.setState({redirectToSignin: true})\n      else\n        this.setState({user: data})\n    })\n}\n```", "```jsx\ncomponentDidMount = () => {\n  this.init(this.match.params.userId)\n}\ncomponentWillReceiveProps = (props) => {\n  this.init(props.match.params.userId)\n}\n```", "```jsx\nrender() {\n   const {classes} = this.props\n   const redirectToSignin = this.state.redirectToSignin\n   if (redirectToSignin)\n     return <Redirect to='/signin'/>\n   return (...)\n }\n```", "```jsx\n<div>\n  <Paper className={classes.root} elevation={4}>\n    <Typography type=\"title\" className={classes.title}> Profile </Typography>\n      <List dense>\n        <ListItem>\n          <ListItemAvatar>\n             <Avatar>\n               <Person/>\n             </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={this.state.user.name} \n                       secondary={this.state.user.email}/>\n        </ListItem>\n        <Divider/>\n        <ListItem>\n          <ListItemText primary={\"Joined: \" + \n              (new Date(this.state.user.created)).toDateString()}/>\n        </ListItem>\n      </List>\n  </Paper>\n</div>\n```", "```jsx\n{ auth.isAuthenticated().user && auth.isAuthenticated().user._id == this.state.user._id &&\n    (<ListItemSecondaryAction>\n       <Link to={\"/user/edit/\" + this.state.user._id}>\n         <IconButton color=\"primary\">\n           <Edit/>\n         </IconButton>\n       </Link>\n       <DeleteUser userId={this.state.user._id}/>\n    </ListItemSecondaryAction>)}\n```", "```jsx\n<Route path=\"/user/:userId\" component={Profile}/>\n```", "```jsx\nclickSubmit = () => {\n    const jwt = auth.isAuthenticated()\n    const user = {\n      name: this.state.name || undefined,\n      email: this.state.email || undefined,\n      password: this.state.password || undefined\n    }\n    update({\n      userId: this.match.params.userId\n    }, {\n      t: jwt.token\n    }, user).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        this.setState({'userId': data._id, 'redirectToProfile': true})\n      }\n    })\n}\n```", "```jsx\nif (this.state.redirectToProfile)\n   return (<Redirect to={'/user/' + this.state.userId}/>)\n```", "```jsx\n<Switch>\n  ... <PrivateRoute path=\"/user/edit/:userId\" component={EditProfile}/><>\n  <Route path=\"/user/:userId\" component={Profile}/>\n</Switch>\n```", "```jsx\nclass DeleteUser extends Component {\n  state = { redirect: false, open: false } \n...\n```", "```jsx\nclickButton = () => {\n    this.setState({open: true})\n}\n```", "```jsx\n  handleRequestClose = () => {\n    this.setState({open: false})\n  }\n```", "```jsx\ndeleteAccount = () => {\n    const jwt = auth.isAuthenticated() \n    remove({\n      userId: this.props.userId\n    }, {t: jwt.token}).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        auth.signout(() => console.log('deleted'))\n this.setState({redirect: true})\n      }\n    }) \n  }\n```", "```jsx\nrender() {\n    const redirect = this.state.redirect\n    if (redirect) {\n      return <Redirect to='/'/>\n    }\n    return (<span>\n      <IconButton aria-label=\"Delete\" onClick={this.clickButton} \n      color=\"secondary\">\n        <DeleteIcon/>\n      </IconButton>\n      <Dialog open={this.state.open} onClose={this.handleRequestClose}>\n        <DialogTitle>{\"Delete Account\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Confirm to delete your account.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.handleRequestClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={this.deleteAccount} color=\"secondary\" \n          autoFocus=\"autoFocus\">\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </span>)\n}\n```", "```jsx\nDeleteUser.propTypes = {\n  userId: PropTypes.string.isRequired\n}\n```", "```jsx\nconst Menu = withRouter(({history}) => (<div>\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography type=\"title\" color=\"inherit\">\n        MERN Skeleton\n      </Typography>\n      <Link to=\"/\">\n        <IconButton aria-label=\"Home\" style={isActive(history, \"/\")}>\n          <HomeIcon/>\n        </IconButton>\n      </Link>\n      <Link to=\"/users\">\n        <Button style={isActive(history, \"/users\")}>Users</Button>\n      </Link>\n    </Toolbar>\n  </AppBar>\n</div>))\n```", "```jsx\nconst isActive = (history, path) => {\n  if (history.location.pathname == path)\n    return {color: '#ff4081'}\n  else\n    return {color: '#ffffff'}\n}\n```", "```jsx\nstyle={isActive(history, \"/users\")}\n```", "```jsx\n{!auth.isAuthenticated() && (<span>\n    <Link to=\"/signup\">\n       <Button style={isActive(history, \"/signup\")}> Sign Up </Button>\n    </Link>\n    <Link to=\"/signin\">\n       <Button style={isActive(history, \"/signin\")}> Sign In </Button>\n    </Link>\n</span>)}\n```", "```jsx\n{auth.isAuthenticated() && (<span>\n   <Link to={\"/user/\" + auth.isAuthenticated().user._id}>\n      <Button style={isActive(history, \"/user/\" + auth.isAuthenticated().user._id)}>\n           My Profile \n      </Button>\n   </Link>\n   <Button color=\"inherit\" \n           onClick={() => { auth.signout(() => history.push('/')) }}>\n        Sign out\n   </Button>\n </span>)}\n```", "```jsx\n <Menu/>\n    <Switch>\n    \u2026\n    </Switch>\n```", "```jsx\napp.get('*', (req, res) => {\n     // 1\\. Prepare Material-UI styles\n     // 2\\. Generate markup with renderToString\n     // 3\\. Return template with markup and CSS styles in the response\n})\n```", "```jsx\nimport React from 'react'\nimport ReactDOMServer from 'react-dom/server'\n```", "```jsx\nimport StaticRouter from 'react-router-dom/StaticRouter'\nimport MainRouter from './../client/MainRouter'\n```", "```jsx\nimport { SheetsRegistry } from 'react-jss/lib/jss'\nimport JssProvider from 'react-jss/lib/JssProvider'\nimport { MuiThemeProvider, createMuiTheme, createGenerateClassName } from 'material-ui/styles'\nimport { indigo, pink } from 'material-ui/colors'\n```", "```jsx\nconst sheetsRegistry = new SheetsRegistry()\nconst theme = createMuiTheme({\n    palette: {\n      primary: {\n      light: '#757de8',\n      main: '#3f51b5',\n      dark: '#002984',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff79b0',\n      main: '#ff4081',\n      dark: '#c60055',\n      contrastText: '#000',\n    },\n      openTitle: indigo['400'],\n      protectedTitle: pink['400'],\n      type: 'light'\n    },\n})\nconst generateClassName = createGenerateClassName()\n```", "```jsx\nconst context = {} \nconst markup = ReactDOMServer.renderToString(\n      <StaticRouter location={req.url} context={context}>\n        <JssProvider registry={sheetsRegistry} generateClassName=\n {generateClassName}>\n          <MuiThemeProvider theme={theme} sheetsManager={new Map()}>\n            <MainRouter/>\n          </MuiThemeProvider>\n        </JssProvider>\n      </StaticRouter>\n) \n```", "```jsx\nif (context.url) {\n   return res.redirect(303, context.url)\n}\nconst css = sheetsRegistry.toString()\nres.status(200).send(Template({\n   markup: markup,\n   css: css\n}))\n```", "```jsx\nexport default ({markup, css}) => {\n    return `...\n           <div id=\"root\">${markup}</div>\n           <style id=\"jss-server-side\">${css}</style> \n           ...`\n}\n```", "```jsx\ncomponentDidMount() {\n   const jssStyles = document.getElementById('jss-server-side')\n   if (jssStyles && jssStyles.parentNode)\n      jssStyles.parentNode.removeChild(jssStyles)\n}\n```", "```jsx\nimport React from 'react'\nimport { hydrate } from 'react-dom'\nimport App from './App'\n\nhydrate(<App/>, document.getElementById('root'))\n```"]