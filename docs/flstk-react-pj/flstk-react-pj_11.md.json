["```jsx\nconst GameSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    trim: true,\n    required: 'Name is required'\n  },\n  world: {\n    type: String, trim: true,\n    required: 'World image is required'\n  },\n  clue: {\n    type: String,\n    trim: true\n  },\n  answerObjects: [VRObjectSchema],\n  wrongObjects: [VRObjectSchema],\n  updated: Date,\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  maker: {type: mongoose.Schema.ObjectId, ref: 'User'}\n})\n```", "```jsx\nconst VRObjectSchema = new mongoose.Schema({\n  objUrl: {\n    type: String, trim: true,\n    required: 'ObJ file is required'\n  },\n  mtlUrl: {\n    type: String, trim: true,\n    required: 'MTL file is required'\n  },\n  translateX: {type: Number, default: 0},\n  translateY: {type: Number, default: 0},\n  translateZ: {type: Number, default: 0},\n  rotateX: {type: Number, default: 0},\n  rotateY: {type: Number, default: 0},\n  rotateZ: {type: Number, default: 0},\n  scale: {type: Number, default: 1},\n  color: {type: String, default: 'white'}\n}) \n```", "```jsx\nGameSchema.path('answerObjects').validate(function(v) {\n  if (v.length == 0) {\n    this.invalidate('answerObjects',\n   'Must add alteast one VR object to collect')\n  }\n}, null) \n```", "```jsx\nGameSchema.path('wrongObjects').validate(function(v) {\n  if (v.length == 0) {\n    this.invalidate('wrongObjects', \n    'Must add alteast one other VR object') \n  }\n}, null) \n```", "```jsx\nrouter.route('/api/games/by/:userId')\n    .post(authCtrl.requireSignin,authCtrl.hasAuthorization, gameCtrl.create)\n```", "```jsx\nrouter.param('userId', userCtrl.userByID)\n```", "```jsx\napp.use('/', gameRoutes)\n```", "```jsx\nconst create = (req, res, next) => {\n  const game = new Game(req.body)\n  game.maker= req.profile\n  game.save((err, result) => {\n    if(err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.status(200).json(result)\n  })\n}\n```", "```jsx\nconst create = (params, credentials, game) => {\n  return fetch('/api/games/by/'+ params.userId, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify(game)\n    })\n    .then((response) => {\n      return response.json();\n    }).catch((err) => console.log(err)) \n}\n```", "```jsx\nrouter.route('/api/games')\n    .get(gameCtrl.list)\n```", "```jsx\nconst list = (req, res) => {\n  Game.find({}).populate('maker', '_id name')\n .sort('-created').exec((err, games) => {\n    if(err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(games)\n\n  })\n}\n```", "```jsx\nconst list = () => {\n  return fetch('/api/games', {\n    method: 'GET',\n  }).then(response => {\n    return response.json() \n  }).catch((err) => console.log(err)) \n}\n```", "```jsx\nrouter.route('/api/games/by/:userId')\n    .get(gameCtrl.listByMaker)\n```", "```jsx\nconst listByMaker = (req, res) => {\n  Game.find({maker: req.profile._id}, (err, games) => {\n    if(err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(games)\n  }).populate('maker', '_id name')\n}\n```", "```jsx\nconst listByMaker = (params) => {\n  return fetch('/api/games/by/'+params.userId, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json'\n    }\n  }).then((response) => {\n    return response.json() \n  }).catch((err) => {\n    console.log(err) \n  }) \n}\n```", "```jsx\nrouter.route('/api/game/:gameId')\n    .get(gameCtrl.read)\n```", "```jsx\nrouter.param('gameId', gameCtrl.gameByID)\n```", "```jsx\nconst gameByID = (req, res, next, id) => {\n  Game.findById(id).populate('maker', '_id name').exec((err, game) => {\n    if (err || !game)\n      return res.status('400').json({\n        error: \"Game not found\"\n      })\n    req.game = game\n    next()\n  })\n}\n```", "```jsx\nconst read = (req, res) => {\n  return res.json(req.game)\n}\n```", "```jsx\nconst read = (params, credentials) => {\n  return fetch('/api/game/' + params.gameId, {\n    method: 'GET'\n  }).then((response) => {\n    return response.json() \n  }).catch((err) => console.log(err)) \n}\n```", "```jsx\nrouter.route('/api/games/:gameId')\n    .put(authCtrl.requireSignin, gameCtrl.isMaker, gameCtrl.update)\n```", "```jsx\nconst isMaker = (req, res, next) => {\n  let isMaker = req.game && req.auth && req.game.maker._id == req.auth._id\n  if(!isMaker){\n    return res.status('403').json({\n      error: \"User is not authorized\"\n    })\n  }\n  next()\n}\n```", "```jsx\nconst update = (req, res) => {\n  let game = req.game\n  game = _.extend(game, req.body)\n  game.updated = Date.now()\n  game.save((err) => {\n    if(err) {\n      return res.status(400).send({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(game)\n  })\n}\n```", "```jsx\nconst update = (params, credentials, game) => {\n  return fetch('/api/games/' + params.gameId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify(game)\n  }).then((response) => {\n    return response.json() \n  }).catch((err) => {\n    console.log(err) \n  }) \n}\n```", "```jsx\nrouter.route('/api/games/:gameId')\n    .delete(authCtrl.requireSignin, gameCtrl.isMaker, gameCtrl.remove)\n```", "```jsx\nconst remove = (req, res) => {\n  let game = req.game\n  game.remove((err, deletedGame) => {\n    if(err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(deletedGame)\n  })\n}\n```", "```jsx\nconst remove = (params, credentials) => {\n  return fetch('/api/games/' + params.gameId, {\n    method: 'DELETE',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then((response) => {\n    return response.json() \n  }).catch((err) => {\n    console.log(err) \n  }) \n}\n```", "```jsx\n<Link to=\"/game/new\">\n   <Button style={isActive(history, \"/game/new\")}>\n       <AddBoxIcon color=\"secondary\"/> Make Game\n   </Button>\n</Link>\n```", "```jsx\n<GameForm onSubmit={this.clickSubmit} errorMsg={this.state.error}/>\n```", "```jsx\n  clickSubmit = game => event => {\n    const jwt = auth.isAuthenticated() \n    create({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, game).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error}) \n      } else {\n        this.setState({error: '', redirect: true}) \n      }\n    }) \n  }\n```", "```jsx\n<PrivateRoute path=\"/game/new\" component={NewGame}/>\n```", "```jsx\n<GameForm gameId={this.match.params.gameId} onSubmit={this.clickSubmit} errorMsg={this.state.error}/>\n```", "```jsx\nclickSubmit = game => event => {\n    const jwt = auth.isAuthenticated() \n    update({\n      gameId: this.match.params.gameId\n    }, {\n      t: jwt.token\n    }, game).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error}) \n      } else {\n        this.setState({error: '', redirect: true}) \n      }\n    }) \n  }\n```", "```jsx\n<PrivateRoute path=\"/game/edit/:gameId\" component={EditGame}/>\n```", "```jsx\nstate = {\n    game: {name: '', clue:'', world:'', answerObjects:[], wrongObjects:[]},\n    redirect: false,\n    readError: ''\n  }\n```", "```jsx\ncomponentDidMount = () => {\n    if(this.props.gameId){\n      read({gameId: this.props.gameId}).then((data) => {\n        if (data.error) {\n          this.setState({readError: data.error}) \n        } else {\n          this.setState({game: data}) \n        }\n      }) \n    }\n}\n```", "```jsx\n<Typography type=\"headline\" component=\"h2\">\n    {this.props.gameId? 'Edit': 'New'} Game\n</Typography>\n```", "```jsx\n<img src={this.state.game.world}/>\n<TextField id=\"world\" label=\"Game World Equirectangular Image (URL)\" \nvalue={this.state.game.world} onChange={this.handleChange('world')}/>\n```", "```jsx\n<TextField id=\"name\" label=\"Name\" value={this.state.game.name} onChange={this.handleChange('name')}/>\n```", "```jsx\n<TextField id=\"multiline-flexible\" label=\"Clue Text\" multiline rows=\"2\" value={this.state.game.clue} onChange={this.handleChange('clue')}/>\n```", "```jsx\nhandleChange = name => event => {\n    const newGame = this.state.game \n    newGame[name] = event.target.value \n    this.setState({game: newGame}) \n}\n```", "```jsx\n<ExpansionPanel>\n   <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n      <Typography>VR Objects to collect</Typography>\n   </ExpansionPanelSummary>\n   <ExpansionPanelDetails>{\n      this.state.game.answerObjects.map((item, i) => {\n return <div key={i}>\n                  <VRObjectForm index={i} type={'answerObjects'}\n vrObject={item}\n handleUpdate={this.handleObjectChange} \n removeObject={this.removeObject}/>\n               </div> })}\n      <Button color=\"primary\" variant=\"raised\" onClick={this.addObject('answerObjects')}>\n          <AddBoxIcon color=\"secondary\"/> Add Object\n      </Button>\n   </ExpansionPanelDetails>\n</ExpansionPanel>\n```", "```jsx\naddObject = name => event => {\n    const newGame = this.state.game \n    newGame[name].push({}) \n    this.setState({game: newGame}) \n} \n```", "```jsx\nremoveObject = (type, index) => event => {\n    const newGame = this.state.game \n    newGame[type].splice(index, 1) \n    this.setState({game: newGame}) \n}\n```", "```jsx\nhandleObjectChange = (index, type, name, val) => {\n    var newGame = this.state.game \n    newGame[type][index][name] = val \n    this.setState({game: newGame}) \n}\n```", "```jsx\nstate = {\n      objUrl: '', mtlUrl: '',\n      translateX: 0, translateY: 0, translateZ: 0, \n      rotateX: 0, rotateY: 0, rotateZ: 0,\n      scale: 1, color:'white'\n} \n```", "```jsx\ncomponentDidMount = () => {\n    if(this.props.vrObject && \n    Object.keys(this.props.vrObject).length != 0){\n        const vrObject = this.props.vrObject \n        this.setState({\n          objUrl: vrObject.objUrl,\n          mtlUrl: vrObject.mtlUrl,\n          translateX: Number(vrObject.translateX),\n          translateY: Number(vrObject.translateY),\n          translateZ: Number(vrObject.translateZ),\n          rotateX: Number(vrObject.rotateX),\n          rotateY: Number(vrObject.rotateY),\n          rotateZ: Number(vrObject.rotateZ),\n          scale: Number(vrObject.scale),\n          color:vrObject.color\n        }) \n    }\n}\n```", "```jsx\n<TextField\n    id=\"obj\"\n    label=\".obj url\"\n    value={this.state.objUrl}\n    onChange={this.handleChange('objUrl')}\n/><br/>\n<TextField\n    id=\"mtl\"\n    label=\".mtl url\"\n    value={this.state.mtlUrl}\n    onChange={this.handleChange('mtlUrl')}\n/>\n```", "```jsx\n<TextField\n    value={this.state.translateX}\n    label=\"TranslateX\"\n    onChange={this.handleChange('translateX')}\n    type=\"number\"\n/>\n<TextField\n    value={this.state.translateY}\n    label=\"TranslateY\"\n    onChange={this.handleChange( 'translateY')}\n    type=\"number\"\n/>\n<TextField\n    value={this.state.translateZ}\n    label=\"TranslateZ\"\n    onChange={this.handleChange('translateZ')}\n    type=\"number\"\n/>\n```", "```jsx\n<TextField\n    value={this.state.rotateX}\n    label=\"RotateX\"\n    onChange={this.handleChange('rotateX')}\n    type=\"number\"\n/>\n<TextField\n    value={this.state.rotateY}\n    label=\"RotateY\"\n    onChange={this.handleChange('rotateY')}\n    type=\"number\"\n/>\n<TextField\n    value={this.state.rotateZ}\n    label=\"RotateZ\"\n    onChange={this.handleChange('rotateZ')}\n    type=\"number\"\n/>\n```", "```jsx\n<TextField\n    value={this.state.scale}\n    label=\"Scale\"\n    onChange={this.handleChange('scale')}\n    type=\"number\"\n/>\n```", "```jsx\n<TextField\n    value={this.state.color}\n    label=\"Color\"\n    onChange={this.handleChange('color')}\n/>\n```", "```jsx\n<Button onClick={this.props.removeObject(this.props.type, this.props.index)}>\n     <Icon>cancel</Icon> Delete\n</Button>\n```", "```jsx\nhandleChange = name => event => {\n    this.setState({[name]: event.target.value}) \n    this.props.handleUpdate(this.props.index, \n                            this.props.type, \n                            name, \n                            event.target.value) \n}\n```", "```jsx\ncomponentDidMount = () => {\n    list().then((data) => {\n      if (data.error) {\n        console.log(data.error) \n      } else {\n        this.setState({games: data}) \n      }\n    })\n}\n```", "```jsx\n{this.state.games.map((game, i) => {\n     return <GameDetail key={i} game={game} updateGames={this.updateGames}/>\n})}\n```", "```jsx\nupdateGames = (game) => {\n    const updatedGames = this.state.games \n    const index = updatedGames.indexOf(game) \n    updatedGames.splice(index, 1) \n    this.setState({games: updatedGames}) \n}\n```", "```jsx\n  init = (userId) => {\n    const jwt = auth.isAuthenticated() \n    read({\n      userId: userId\n    }, {t: jwt.token}).then((data) => {\n      if (data.error) {\n        this.setState({redirectToSignin: true}) \n      } else {\n        this.setState({user: data}) \n listByMaker({userId: data._id}).then((data) => {\n if (data.error) {\n console.log(data.error) \n } else {\n this.setState({games: data}) \n }\n })\n      }\n    }) \n  }\n```", "```jsx\n{this.state.games.map((game, i) => {\n    return <GameDetail key={i} game={game} updateGames={this.updateGames}/>\n})}\n```", "```jsx\n<Typography type=\"headline\" component=\"h2\">\n     {this.props.game.name}\n</Typography>\n<CardMedia image={this.props.game.world} \n           title={this.props.game.name}/>\n<Typography type=\"subheading\" component=\"h4\">\n     <em>by</em>\n     {this.props.game.maker.name}\n</Typography>\n<CardContent>\n     <Typography type=\"body1\" component=\"p\">\n          {this.props.game.clue}\n     </Typography>\n</CardContent>\n```", "```jsx\n<Link to={\"/game/play?id=\" + this.props.game._id} target='_self'>\n   <Button variant=\"raised\" color=\"secondary\">\n      Play Game\n   </Button>\n</Link>\n```", "```jsx\n{auth.isAuthenticated().user \n    && auth.isAuthenticated().user._id == this.props.game.maker._id && \n    (<div>\n       <Link to={\"/game/edit/\" + this.props.game._id}>\n          <Button variant=\"raised\" color=\"primary\" \n         className={classes.editbutton}>\n              Edit\n          </Button>\n       </Link>\n       <DeleteGame game={this.props.game} \n       removeGame={this.props.updateGames}/>\n    </div>)}\n```", "```jsx\n<DeleteGame game={this.props.game} removeGame={this.props.updateGames}/>\n```", "```jsx\n<Button variant=\"raised\" onClick={this.clickButton}>\n   Delete\n</Button>\n<Dialog open={this.state.open} onClose={this.handleRequestClose}>\n   <DialogTitle>{\"Delete \"+this.props.game.name}</DialogTitle>\n   <DialogContent>\n      <DialogContentText>\n         Confirm to delete your game {this.props.game.name}.\n      </DialogContentText>\n   </DialogContent>\n   <DialogActions>\n      <Button onClick={this.handleRequestClose} color=\"primary\">\n         Cancel\n      </Button>\n      <Button onClick={this.deleteGame} color=\"secondary\" \n      autoFocus=\"autoFocus\">\n         Confirm\n      </Button>\n   </DialogActions>\n</Dialog>\n```", "```jsx\ndeleteGame = () => {\n    const jwt = auth.isAuthenticated() \n    remove({\n      gameId: this.props.game._id\n    }, {t: jwt.token}).then((data) => {\n      if (data.error) {\n        console.log(data.error) \n      } else {\n        this.props.removeGame(this.props.game) \n        this.setState({open: false}) \n      }\n    }) \n  }\n```", "```jsx\n/game/play?id=<game ID>\n```", "```jsx\nrouter.route('/game/play')\n  .get(gameCtrl.playGame)\n```", "```jsx\nconst playGame = (req, res) => {\n  res.sendFile(process.cwd()+'/server/vr/index.html')\n}\n```", "```jsx\ncomponentDidMount = () => {\n    let gameId = Location.search.split('?id=')[1]\n    read({\n          gameId: gameId\n      }).then((data) => {\n        if (data.error) {\n          this.setState({error: data.error});\n        } else {\n          this.setState({\n            vrObjects: data.answerObjects.concat(data.wrongObjects),\n            game: data\n          });\n          Environment.setBackgroundImage(\n            {uri: data.world}\n          )\n        }\n    })\n}\n```", "```jsx\nconst read = (params) => {\n  return fetch('/api/game/' + params.gameId, {\n    method: 'GET'\n  }).then((response) => {\n    return response.json() \n  }).catch((err) => console.log(err)) \n}\nexport {\n  read\n} \n```", "```jsx\nnpm run bundle\n```"]