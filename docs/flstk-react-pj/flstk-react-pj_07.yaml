- en: Extending the Marketplace for Orders and Payments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展市场以支持订单和付款
- en: 'Processing payments from customers when they place orders and allowing sellers
    to manage these orders are key aspects of e-commerce applications. In this chapter,
    we''ll extend the online marketplace built in the previous chapter by introducing
    the following capabilities:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 处理顾客下订单时的付款，并允许卖家管理这些订单是电子商务应用的关键方面。在本章中，我们将通过引入以下功能来扩展上一章中构建的在线市场：
- en: Shopping cart
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购物车
- en: Payment processing with Stripe
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Stripe进行付款处理
- en: Order management
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单管理
- en: The MERN Marketplace with a cart, payments, and orders
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有购物车、付款和订单的MERN市场
- en: The MERN Marketplace application developed in [Chapter 6](aadad9b8-c30c-4e0a-8ebd-2ea6635d43bb.xhtml), *Exercising
    New MERN Skills with an Online Marketplace* will be extended to include a shopping
    cart feature, Stripe integration for processing credit card payments, and a basic
    order-management flow. The implementations that follow are kept simple to serve
    as starting points for developing more complex versions of these features.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](aadad9b8-c30c-4e0a-8ebd-2ea6635d43bb.xhtml)中开发的MERN市场应用程序，*通过在线市场锻炼新的MERN技能*
    将扩展到包括购物车功能、Stripe集成以处理信用卡付款，以及基本的订单管理流程。以下的实现保持简单，以便作为开发这些功能更复杂版本的起点。
- en: 'The following component-tree diagram shows all the custom components that make
    up the MERN Marketplace frontend. The features discussed in this chapter modify
    some of the existing components, such as `Profile`, `MyShops`, `Products`, and
    `Suggestions`, and also add new components, such as `AddToCart`, `MyOrders`, `Cart`,
    and `ShopOrders`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的组件树图显示了构成MERN市场前端的所有自定义组件。本章讨论的功能修改了一些现有的组件，如`Profile`、`MyShops`、`Products`和`Suggestions`，还添加了新的组件，如`AddToCart`、`MyOrders`、`Cart`和`ShopOrders`：
- en: '![](assets/2c82bf96-7c16-481d-8ab8-4b86c7dc266c.jpg)The code for the complete
    MERN Marketplace application is available on GitHub [github.com/shamahoque/mern-marketplace](https://github.com/shamahoque/mern-marketplace).
    You can clone this code and run the application as you go through the code explanations
    in the rest of this chapter. To get the code for Stripe payments working, you
    will need to create your own Stripe account and update the `config/config.js`
    file with your testing values for the Stripe API key, secret key, and Stripe Connect
    client ID.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/2c82bf96-7c16-481d-8ab8-4b86c7dc266c.jpg)完整的MERN市场应用程序的代码可在GitHub上找到[github.com/shamahoque/mern-marketplace](https://github.com/shamahoque/mern-marketplace)。您可以在阅读本章其余部分的代码解释时，克隆此代码并运行应用程序。要使Stripe付款的代码工作，您需要创建自己的Stripe账户，并在`config/config.js`文件中更新您的测试值，包括Stripe
    API密钥、秘密密钥和Stripe Connect客户端ID。'
- en: Shopping cart
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购物车
- en: Visitors to the MERN Marketplace can add products they wish to buy to a shopping
    cart by clicking the `add to cart` button on each product. A cart icon in the
    menu will indicate the number of products already added to their cart as the user
    continues to browse through the marketplace. They can also update the cart contents
    and begin the checkout by opening the cart view. But to complete checkout and
    place an order, users will be required to sign in.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 访问MERN市场的访客可以通过点击每个产品上的“加入购物车”按钮将他们想要购买的产品添加到购物车中。菜单中的购物车图标将指示已添加到购物车中的产品数量，当用户继续浏览市场时。他们还可以更新购物车内容，并通过打开购物车视图开始结账。但是，要完成结账并下订单，用户将需要登录。
- en: The shopping cart is mainly a frontend feature, so the cart details will be
    stored locally on the client side until the user places the order at checkout.
    To implement the shopping cart features, we will set up helper methods in `client/cart/cart-helper.js`
    to help manipulate the cart details with relevant React components.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车主要是一个前端功能，因此购物车详情将在客户端本地存储，直到用户在结账时下订单。为了实现购物车功能，我们将在`client/cart/cart-helper.js`中设置辅助方法，以帮助使用相关的React组件操纵购物车详情。
- en: Adding to cart
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加到购物车
- en: 'The `AddToCart` component in `client/Cart/AddToCart.js` takes a `product` object
    and a CSS styles object as props from the parent component it is added to. For
    example, in MERN Marketplace, it is added to a Product view as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`client/Cart/AddToCart.js`中的`AddToCart`组件从父组件中获取`product`对象和CSS样式对象作为props。例如，在MERN
    Marketplace中，它被添加到产品视图中，如下所示：'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `AddToCart` component itself displays a cart icon button depending on whether
    the passed item is in stock or not:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddToCart`组件本身根据传递的项目是否有库存显示购物车图标按钮：'
- en: '![](assets/068f6b31-5b72-4764-b4e7-3ed9e6e2a194.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/068f6b31-5b72-4764-b4e7-3ed9e6e2a194.png)'
- en: For example, if the item quantity is more than `0`, the `AddCartIcon` is displayed,
    otherwise the `DisabledCartIcon` is rendered.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果项目数量大于`0`，则显示`AddCartIcon`，否则呈现`DisabledCartIcon`。
- en: '`mern-marketplace/client/cart/AddToCart.js`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/AddToCart.js`：'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `AddCartIcon` button calls an `addToCart` method when clicked.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击`AddCartIcon`按钮时，将调用`addToCart`方法。
- en: '`mern-marketplace/client/cart/AddToCart.js`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/AddToCart.js`：'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `addItem` helper method defined in `cart-helper.js`, takes the `product`
    item and the state-updating `callback` function as parameters, then stores the
    updated cart details in `localStorage` and executes the callback passed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在`cart-helper.js`中定义的`addItem`辅助方法，以`product`项目和更新状态的`callback`函数作为参数，然后将更新后的购物车详情存储在`localStorage`中并执行传递的回调。
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/cart-helper.js`：'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The cart data stored in `localStorage` contains an array of cart item objects,
    each containing product details, the quantity of the product added to cart (which
    is set to `1` by default), and the ID of the shop the product belongs to.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在`localStorage`中的购物车数据包含一个购物车项目对象数组，每个对象包含产品详情，添加到购物车的产品数量（默认为`1`），以及产品所属商店的ID。
- en: Cart icon on the menu
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 菜单上的购物车图标
- en: 'In the menu, we will add a link to the Cart view, and also add a badge that
    displays the length of the cart array stored in `localStorage`, in order to visually
    inform the user of how many items are currently in their cart:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜单中，我们将添加一个链接到购物车视图，并添加一个徽章，显示存储在`localStorage`中的购物车数组的长度，以便直观地通知用户当前购物车中有多少商品：
- en: '![](assets/6785911f-d5df-4b43-b833-8b329fd4f2d8.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6785911f-d5df-4b43-b833-8b329fd4f2d8.png)'
- en: The link for the cart will be similar to the other links in the Menu, with the
    exception of the Material-UI `Badge` component that displays the cart length.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车的链接将类似于菜单中的其他链接，唯一的区别是Material-UI的`Badge`组件显示购物车长度。
- en: '`mern-marketplace/client/core/Menu.js`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/core/Menu.js`：'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The cart length is returned by the `itemTotal` helper method in `cart-helper.js`,
    which reads the cart array stored in `localStorage` and returns the length of
    the array.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`itemTotal`辅助方法在`cart-helper.js`中返回购物车长度，它读取存储在`localStorage`中的购物车数组并返回数组的长度。'
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/cart-helper.js`：'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Cart view
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购物车视图
- en: The Cart view will contain the cart items and checkout details, but initially
    only the cart details will be displayed until the user is ready to check out.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车视图将包含购物车项目和结账详情，但最初只会显示购物车详情，直到用户准备结账。
- en: '`mern-marketplace/client/cart/Cart.js`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Cart.js`：'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `CartItems` component is passed a `checkout` Boolean value, and a state
    update method for this checkout value, so that the `Checkout` component and options
    can be rendered based on user interaction.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`CartItems`组件被传递了一个`checkout`布尔值，以及一个用于更新此结账值的状态更新方法，以便基于用户交互来呈现`Checkout`组件和选项。'
- en: '`mern-marketplace/client/cart/Cart.js`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Cart.js`：'
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `Cart` component will be accessed at the `/cart` route, so we need to add
    a `Route` to the `MainRouter` component as follows.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cart`组件将在`/cart`路由处访问，因此我们需要在`MainRouter`组件中添加一个`Route`，如下所示。'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`：'
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The CartItems component
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CartItems组件
- en: 'The `CartItems` component will allow the user to view and update the items
    currently in their cart. It will also give them the option to start the checkout
    process if they are signed in:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`CartItems`组件将允许用户查看和更新其购物车中当前的物品。如果用户已登录，还将为他们提供开始结账流程的选项：'
- en: '![](assets/1a9d8699-72ed-420e-9358-b4a009b4d2b2.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1a9d8699-72ed-420e-9358-b4a009b4d2b2.png)'
- en: If the cart contains items, the `CartItems` component iterates over the items
    and renders the products in the cart. It there are no items added, the cart view
    just displays a message that the cart is empty.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果购物车中包含物品，`CartItems`组件将遍历物品并呈现购物车中的产品。如果没有添加物品，则购物车视图只显示一条消息，说明购物车是空的。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`：'
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Each product item shows the details of the product and an editable quantity
    text field, along with a remove item option. Finally, it shows the total price
    of the items in the cart and the option to start checkout.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每个产品项目显示产品的详细信息和可编辑的数量文本字段，以及删除项目选项。最后，它显示购物车中物品的总价和开始结账的选项。
- en: Retrieving cart details
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索购物车详细信息
- en: The `getCart` helper method in `cart-helper.js` retrieves and returns the cart
    details from `localStorage`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`cart-helper.js`中的`getCart`辅助方法从`localStorage`中检索并返回购物车详细信息。'
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/cart-helper.js`：'
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the `CartItems` component, we will retrieve the cart items using the `getCart`
    helper method in `componentDidMount` and set it to state.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CartItems`组件中，我们将使用`componentDidMount`中的`getCart`辅助方法检索购物车项目并将其设置为状态。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`：'
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then the `cartItems` array retrieved from `localStorage` is iterated over using
    the `map` function to render the details of each item.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`map`函数迭代从`localStorage`中检索的`cartItems`数组，以呈现每个项目的详细信息。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`：'
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Modifying quantity
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改数量
- en: The editable quantity `TextField` rendered for each cart item allows the user
    to update the quantity for each product they are buying, and sets a minimum allowed
    value of `1`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个购物车项目呈现的可编辑数量`TextField`允许用户更新他们购买的每种产品的数量，并设置最小允许值为`1`。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`：'
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When the user updates this value, the `handleChange` method is called to enforce
    the minimum value validation, update the `cartItems` in state, and update the
    cart in `localStorage` using the helper method.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户更新此值时，将调用`handleChange`方法来强制执行最小值验证，更新状态中的`cartItems`，并使用辅助方法更新`localStorage`中的购物车。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`：'
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `updateCart` helper method takes the index of the product being updated
    in the cart array and the new quantity value as parameters, and updates the details
    stored in `localStorage`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateCart`辅助方法接受要在购物车数组中更新的产品的索引和新的数量值作为参数，并更新`localStorage`中存储的详细信息。'
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/cart-helper.js`：'
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Removing item
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除项目
- en: The remove item option rendered for each item in the cart is a button, which,
    when clicked, passes the array index of the item to the `removeItem` method so
    that it can be removed from the array.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在购物车中为每个物品呈现的删除选项是一个按钮，当点击时，它将物品的数组索引传递给`removeItem`方法，以便从数组中删除它。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`：'
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `removeItem` click handler method uses the `removeItem` helper method to
    remove the item from the cart in `localStorage`, then updates the `cartItems`
    in state. This method also checks whether the cart has been emptied, so checkout
    can be hidden by using the `setCheckout` function passed as a prop from the `Cart`
    component.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeItem`点击处理程序方法使用`removeItem`辅助方法从`localStorage`中删除购物车中的物品，然后更新状态中的`cartItems`。该方法还检查购物车是否已清空，因此可以使用从`Cart`组件传递的`setCheckout`函数来隐藏结账。'
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`：'
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `removeItem` helper method in `cart-helper.js` takes the index of the product
    to be removed from the array, then splices it out, and updates the `localStorage`
    before returning the updated `cart` array.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`cart-helper.js`中的`removeItem`辅助方法获取要从数组中删除的产品的索引，然后将其切出，并在返回更新后的`cart`数组之前更新`localStorage`。'
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/cart-helper.js`：'
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Showing total price
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示总价
- en: At the bottom of the `CartItems` component, we will display the total price
    of the items in the cart.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CartItems`组件的底部，我们将显示购物车中物品的总价。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`：'
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `getTotal` method will calculate the total price taking into consideration
    the unit price and quantity of each item in the `cartItems` array.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`getTotal`方法将计算总价，考虑到`cartItems`数组中每个物品的单价和数量。'
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`：'
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Option to check out
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结账选项
- en: The user will see the option to perform the checkout depending on whether they
    are signed in and whether the checkout has already been opened.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将看到执行结账的选项，这取决于他们是否已登录以及结账是否已经打开。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`：'
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When the checkout button is clicked, the `openCheckout` method will use the
    `setCheckout` method passed as a prop to set the checkout value to `true` in the
    `Cart` component:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当单击结账按钮时，`openCheckout`方法将使用作为属性传递的`setCheckout`方法在`Cart`组件中将结账值设置为`true`：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once the checkout value is set to `true` in the Cart view, the `Checkout` component
    will be rendered to allow the user to enter the checkout details and place an
    order.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在购物车视图中将结账值设置为`true`，`Checkout`组件将被呈现，允许用户输入结账详情并下订单。
- en: Using Stripe for payments
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用条纹进行支付
- en: Payment processing is required across implementations of the checkout, order
    creation, and order management processes. It also involves updates to both the
    buyer's and seller's user data. Before we delve into the implementations of the
    checkout and order features, we will briefly discuss payment processing options
    and considerations using Stripe, and see how it is to be integrated in MERN Marketplace.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 支付处理需要跨结账、订单创建和订单管理流程的实现。它还涉及对买家和卖家用户数据的更新。在我们深入讨论结账和订单功能的实现之前，我们将简要讨论使用条纹的支付处理选项和考虑事项，以及它在MERN
    Marketplace中的集成方式。
- en: Stripe
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条纹
- en: Stripe provides an extensive set of tools necessary to integrate payments in
    any web application. These tools can be selected and used in different ways depending
    on the specific type of the application and the payment use case being implemented.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 条纹提供了一套必要的工具，可以在任何Web应用程序中集成支付。这些工具可以根据应用程序的特定类型和正在实施的支付用例以不同的方式选择和使用。
- en: In case of the MERN Marketplace setup, the application itself will have a platform
    on Stripe and will expect sellers to have connected Stripe accounts on the platform,
    so the application can charge users who enter their credit card details at checkout
    on behalf of the sellers. In MERN Marketplace, a user can add products from different
    shops to their shopping cart, so charges on their cards will only be created by
    the application for the specific product ordered when it is processed by the seller.
    Additionally, sellers will have complete control over the charges created on their
    behalf from their own Stripe dashboards. We will demonstrate how to use the tools
    provided by Stripe to get this payment setup working.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Marketplace设置的情况下，应用程序本身将在Stripe上拥有一个平台，并且希望卖家在平台上连接Stripe账户，以便应用程序可以代表卖家对在结账时输入其信用卡详细信息的用户进行收费。在MERN
    Marketplace中，用户可以从不同商店添加产品到其购物车，因此他们的卡上的费用只会由应用程序为特定订购的产品创建，当卖家处理时。此外，卖家将完全控制从其Stripe仪表板上代表他们创建的费用。我们将演示如何使用Stripe提供的工具来使此付款设置工作。
- en: Stripe provides a complete set of documentations and guidelines for each tool,
    and also exposes testing data for accounts and platforms set up on Stripe. For
    the purpose of implementing payments in MERN Marketplace, we will be using testing
    keys and leave it up to you to extend the implementation for live payments.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Stripe为每个工具提供了完整的文档和指南，并公开了在Stripe上设置的账户和平台的测试数据。为了在MERN Marketplace中实现付款，我们将使用测试密钥，并让您扩展实现以进行实时付款。
- en: Stripe-connected account for each seller
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每个卖家的Stripe连接账户
- en: In order to create charges on behalf of sellers, the application will let a
    user, who is a seller, connect their Stripe account to their MERN Marketplace
    user account.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了代表卖家创建费用，应用程序将允许作为卖家的用户将其Stripe账户连接到其MERN Marketplace用户账户。
- en: Updating user model
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户模型
- en: To store the Stripe OAuth credentials after a user's Stripe account is successfully
    connected, we will update the user model with the following field.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功连接用户的Stripe账户后，我们将使用以下字段更新用户模型以存储Stripe OAuth凭据。
- en: '`mern-marketplace/server/models/user.model.js`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/models/user.model.js`：'
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `stripe_seller` field will store the seller's Stripe account credential,
    and this will be used when a charge needs to be processed via Stripe for a product
    they sold from their shop.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`stripe_seller`字段将存储卖家的Stripe账户凭据，并且在需要通过Stripe处理他们从商店出售的产品的收费时将使用此字段。'
- en: Button to connect with Stripe
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接Stripe的按钮
- en: 'In the user profile page of a seller, if the user has not connected their Stripe
    account yet, we will show a button that will take the user to Stripe to authenticate
    and connect their Stripe account:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在卖家的用户资料页面上，如果用户尚未连接其Stripe账户，我们将显示一个按钮，该按钮将带用户前往Stripe进行身份验证并连接其Stripe账户：
- en: '![](assets/c26a53b2-2032-4685-ad5f-b14fd59ef2ad.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c26a53b2-2032-4685-ad5f-b14fd59ef2ad.png)'
- en: 'If the user has successfully connected their Stripe account already, we will
    show a disabled STRIPE CONNECTED button instead:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已成功连接其Stripe账户，我们将显示一个禁用的STRIPE CONNECTED按钮：
- en: '![](assets/1618ca16-5f33-4815-8829-a2816ba2e80c.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1618ca16-5f33-4815-8829-a2816ba2e80c.png)'
- en: The code added to the `Profile` component will first check whether the user
    is a seller before rendering any `STRIPE CONNECTED` button. Then, a second check
    will confirm whether Stripe credentials already exist in the `stripe_seller` field
    for the given user. If Stripe credentials already exist for the user, then the
    disabled `STRIPE CONNECTED` button is shown, otherwise a link to connect to Stripe
    using their OAuth link is displayed instead.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Profile`组件中添加的代码将首先检查用户是否是卖家，然后再渲染任何`STRIPE CONNECTED`按钮。然后，第二个检查将确认给定用户的`stripe_seller`字段中是否已经存在Stripe凭据。如果用户已经存在Stripe凭据，则显示禁用的`STRIPE
    CONNECTED`按钮，否则显示一个连接到Stripe的OAuth链接的链接。
- en: '`mern-marketplace/client/user/Profile.js`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/user/Profile.js`：'
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The OAuth link takes the platform's client ID, which we will set in a `config`
    variable, and other option values as query parameters. This link takes the user
    to Stripe and allows the user to connect an existing Stripe account or create
    a new one. Then once Stripe's auth process completes, it returns to our application
    using a Redirect URL set in the Platform's Connect settings in the dashboard on
    Stripe. Stripe attaches either an auth code or error message as query parameters
    to the Redirect URL.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth链接获取平台的客户端ID，我们将在`config`变量中设置，并将其他选项值作为查询参数。此链接将用户带到Stripe，并允许用户连接现有的Stripe账户或创建新账户。然后一旦Stripe的认证过程完成，它会使用在Stripe仪表板上设置的重定向URL返回到我们的应用程序的平台连接设置。Stripe将认证代码或错误消息作为查询参数附加到重定向URL上。
- en: The MERN Marketplace redirect URI is set at `/seller/stripe/connect`, which
    will render the `StripeConnect` component.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Marketplace重定向URI设置为`/seller/stripe/connect`，将呈现`StripeConnect`组件。
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`：'
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The StripeConnect component
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`StripeConnect`组件'
- en: 'The `StripeConnect` component will basically complete the remaining auth process
    steps with Stripe, and render relevant messages based on whether the Stripe connection
    was successful:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`StripeConnect`组件将基本上完成与Stripe的剩余认证过程步骤，并根据Stripe连接是否成功呈现相关消息：'
- en: '![](assets/c0f9a30b-0a63-4f36-80f3-6ef632bbf11e.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c0f9a30b-0a63-4f36-80f3-6ef632bbf11e.png)'
- en: When the `StripeConnect` component loads, in `componentDidMount`, we will first
    parse the query parameters attached to the URL from the Stripe redirect. For parsing,
    we use the same `query-string` npm module that we used previously for the product
    search. Then, if the URL `query` parameter contains an auth code, we make an API
    call necessary to complete the Stripe OAuth from our server.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当`StripeConnect`组件加载时，在`componentDidMount`中，我们将首先解析附加到来自Stripe重定向的URL的查询参数。对于解析，我们使用了之前用于产品搜索的相同`query-string`
    npm模块。然后，如果URL的`query`参数包含认证代码，我们将在服务器上进行必要的API调用，以完成来自Stripe的OAuth。
- en: '`mern-marketplace/client/user/StripeConnect.js`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/user/StripeConnect.js`：'
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `stripeUpdate` fetch method is defined in `api-user.js`, and it passes the
    auth code retrieved from Stripe to an API we will set up in our server at `'/api/stripe_auth/:userId'`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`stripeUpdate` fetch方法在`api-user.js`中定义，并将从Stripe检索的认证代码传递给我们将在服务器上设置的API`''/api/stripe_auth/:userId''`。'
- en: '`mern-marketplace/client/user/api-user.js`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/user/api-user.js`：'
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Stripe auth update API
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stripe认证更新API
- en: Once the Stripe account connection is successful, in order to complete the OAuth
    process, we need to use the retrieved auth code to make a POST API call to Stripe
    OAuth from our server and retrieve the credentials to be stored in the seller's
    user account for processing charges. The Stripe auth update API receives a request
    at `/api/stripe_auth/:userId` and initiates the POST API call to retrieve the
    credentials from Stripe.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Stripe账户连接成功，为了完成OAuth过程，我们需要使用检索到的授权码从我们的服务器向Stripe OAuth发出POST API调用，并检索凭据以存储在卖家的用户账户中以处理收费。Stripe授权更新API在`/api/stripe_auth/:userId`接收请求，并启动向Stripe发出POST
    API调用以检索凭据。
- en: The route for this Stripe auth update API will be declared on the server in
    user routes as follows.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此Stripe授权更新API的路由将在用户路由中声明如下。
- en: '`mern-marketplace/server/routes/user.routes.js`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/user.routes.js`：'
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: A request to this route uses the `stripe_auth` controller method to retrieve
    the credentials from Stripe and passes it to the existing user update method to
    be stored in the database.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个路由的请求使用`stripe_auth`控制器方法从Stripe检索凭据，并将其传递给现有的用户更新方法以存储在数据库中。
- en: 'In order to make a POST request to the Stripe API from our server, we will
    use the `request` npm module:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从我们的服务器向Stripe API发出POST请求，我们将使用`request` npm模块：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `stripe_auth` controller method in the user controller will be as follows.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 用户控制器中的`stripe_auth`控制器方法将如下所示。
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/user.controller.js`：'
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The POST API call to Stripe takes the platform's secret key and the retrieved
    auth code to complete the authorization and returns the credentials for the connected
    account, which is then appended to the request body so the user can be updated
    in the `next()` method.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 向Stripe发出的POST API调用需要平台的秘钥和检索到的授权码来完成授权，并返回连接账户的凭据，然后将其附加到请求体中，以便用户可以在`next()`方法中更新。
- en: With these credentials, the application can create charges on customer credit
    cards on behalf of the seller.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些凭据，应用程序可以代表卖家在客户信用卡上创建收费。
- en: Stripe Card Elements for checkout
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于结账的Stripe Card Elements
- en: 'During checkout, to collect credit card details from the user, we will use
    Stripe''s `Card` `Elements` to add the credit card field in the checkout form.
    To integrate the `Card` `Elements` with our React interface, we will utilize the
    `react-stripe-elements` npm module:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在结账过程中，为了从用户那里收集信用卡详细信息，我们将使用Stripe的`Card` `Elements`来在结账表单中添加信用卡字段。为了将`Card`
    `Elements`与我们的React界面集成，我们将利用`react-stripe-elements` npm模块：
- en: '[PRE31]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We will also need to inject the `Stripe.js` code in `template.js` to access
    Stripe in the frontend code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在`template.js`中注入`Stripe.js`代码，以便在前端代码中访问Stripe：
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: For MERN Marketplace, Stripe will only be required in the Cart view, where the
    `Checkout` component needs it to render the `Card` `Elements` and process card
    detail input. Hence, we will initialize the Stripe instance with the application's
    Stripe API key, after the `Cart` component mounts, in its `componentDidMount`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于MERN Marketplace，Stripe仅在购物车视图中需要，在那里`Checkout`组件需要它来渲染`Card` `Elements`并处理卡片详细信息。因此，在`Cart`组件挂载后，我们将使用应用程序的Stripe
    API密钥初始化Stripe实例，在其`componentDidMount`中。
- en: '`mern-marketplace/client/cart/Cart.js`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Cart.js`：'
- en: '[PRE33]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `Checkout` component added in `Cart.js` should be wrapped with the `StripeProvider`
    component from `react-stripe-elements`, so the `Elements` in `Checkout` have access
    to the Stripe instance.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Cart.js`中添加的`Checkout`组件应该使用`react-stripe-elements`中的`StripeProvider`组件进行包装，以便`Checkout`中的`Elements`可以访问Stripe实例。
- en: '`mern-marketplace/client/cart/Cart.js`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Cart.js`：'
- en: '[PRE34]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Then, within the `Checkout` component, we will use Stripe's `Elements` components.
    Using Stripe's `Card Elements` will enable the application to collect the user's
    credit card details and use the Stripe instance to tokenize card information rather
    than handling it on our own servers. Implementation for this part of collecting
    the card details and generating the card token during the checkout process will
    be discussed in the *Checkout* and *Creating new order* sections.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`Checkout`组件中，我们将使用Stripe的`Elements`组件。使用Stripe的`Card Elements`将使应用程序能够收集用户的信用卡详细信息，并使用Stripe实例对卡片信息进行标记，而不是在我们自己的服务器上处理。关于在结账流程中收集卡片详细信息和生成卡片令牌的实现将在*结账*和*创建新订单*部分讨论。
- en: Stripe Customer to record card details
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stripe客户记录卡片详细信息
- en: When an order is being placed at the end of the checkout process, the generated
    card token will be used to create or update a Stripe Customer ([https://stripe.com/docs/api#customers](https://stripe.com/docs/api#customers))
    representing our user, which is a good way to store credit card information ([https://stripe.com/docs/saving-cards](https://stripe.com/docs/saving-cards))
    with Stripe for further usage, such as creating charges for specific products
    in the cart only when a seller processes the ordered product from their shop.
    This eliminates the complications of having to store user credit card details
    securely on your own server.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在结账流程结束时下订单时，生成的卡片令牌将被用来创建或更新代表我们用户的Stripe客户（[https://stripe.com/docs/api#customers](https://stripe.com/docs/api#customers)），这是一个存储信用卡信息的好方法（[https://stripe.com/docs/saving-cards](https://stripe.com/docs/saving-cards)），以便进一步使用，比如在卖家从他们的商店处理已订购的产品时，仅为购物车中的特定产品创建收费。这消除了在自己的服务器上安全存储用户信用卡详细信息的复杂性。
- en: Updating user model
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户模型
- en: 'To keep track of the corresponding Stripe `Customer` information for a user
    in our database, we will update the user model with the following field:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的数据库中跟踪用户对应的Stripe`Customer`信息，我们将使用以下字段更新用户模型：
- en: '[PRE35]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Updating user controller
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户控制器
- en: We will create a new, or update an existing, Stripe Customer when the user places
    an order after entering their credit card details. To implement this, we will
    update the user controllers with a `stripeCustomer` method that will be called
    before the order is created when our server receives a request to the create order
    API (discussed in the *Creating new order* section).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在输入信用卡详细信息后下订单时，我们将创建一个新的或更新现有的Stripe客户。为了实现这一点，我们将更新用户控制器，添加一个`stripeCustomer`方法，该方法将在我们的服务器收到请求创建订单API（在*创建新订单*部分讨论）时，在创建订单之前被调用。
- en: 'In the `stripeCustomer` controller method, we will need to use the `stripe`
    npm module:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在`stripeCustomer`控制器方法中，我们将需要使用`stripe` npm模块：
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: After installing the `stripe` module, it needs to be imported into the user
    controller file and the `stripe` instance initialized with the application's Stripe
    secret key.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`stripe`模块后，需要将其导入到用户控制器文件中，并使用应用程序的Stripe秘钥初始化`stripe`实例。
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/user.controller.js`：'
- en: '[PRE37]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `stripeCustomer` controller method will first check whether the current
    user already has a corresponding Stripe Customer stored in the database, and then
    use the card token received from the frontend to either create a new Stripe Customer
    or update the existing one.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`stripeCustomer`控制器方法将首先检查当前用户是否已在数据库中存储了相应的Stripe客户，然后使用从前端收到的卡片令牌来创建一个新的Stripe客户或更新现有的客户。'
- en: Creating a new Stripe Customer
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的Stripe客户
- en: If the current user does not have a corresponding Stripe `Customer`, in other
    words, a value is not stored for the `stripe_customer` field, we will use the
    create a Customer API ([https://stripe.com/docs/api#create_customer](https://stripe.com/docs/api#create_customer))
    from Stripe.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前用户没有相应的Stripe`客户`，换句话说，`stripe_customer`字段没有存储值，我们将使用Stripe的创建客户API（[https://stripe.com/docs/api#create_customer](https://stripe.com/docs/api#create_customer)）。
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/user.controller.js`:'
- en: '[PRE38]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If the Stripe Customer is successfully created, we will update the current user's
    data by storing the Stripe Customer ID reference in the `stripe_customer` field.
    We will also add this Customer ID to the order being placed, so it is simpler
    to create a charge related to the order.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Stripe客户成功创建，我们将通过将Stripe客户ID引用存储在`stripe_customer`字段中来更新当前用户的数据。我们还将将此客户ID添加到正在下订单的订单中，以便更简单地创建与订单相关的收费。
- en: Updating an existing Stripe Customer
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新现有的Stripe客户
- en: For an existing Stripe Customer, in other words, the current user has a value
    stored for the `stripe_customer` field, we will use the Stripe API to update a
    Stripe Customer.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对于现有的Stripe客户，换句话说，当前用户在`stripe_customer`字段中存储了一个值，我们将使用Stripe API来更新Stripe客户。
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/user.controller.js`:'
- en: '[PRE39]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Once the Stripe Customer is successfully updated, we will add the Customer ID
    to the order being created in the `next()` call.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Stripe客户成功更新，我们将在`next()`调用中将客户ID添加到正在创建的订单中。
- en: Though not covered here, the Stripe Customer feature can be used further to
    allow users to store and update their credit card information from the application.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这里没有涉及，但Stripe客户功能可以进一步用于允许用户从应用程序中存储和更新他们的信用卡信息。
- en: Creating a charge for each product processed
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为每个处理的产品创建一个收费
- en: When a seller updates an order by processing the product ordered in their shop,
    the application will create a charge on behalf of the seller on the Customer's
    credit card for the cost of the product ordered. To implement this, we will update
    the `user.controller.js` file, with a `createCharge` controller method that will
    use Stripe's create a charge API, and need the seller's Stripe account ID along
    with the buyer's Stripe Customer ID.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当卖家通过处理其商店中订购的产品更新订单时，应用程序将代表卖家在客户的信用卡上为产品的成本创建一个收费。为了实现这一点，我们将更新`user.controller.js`文件，使用`createCharge`控制器方法来使用Stripe的创建收费API，并需要卖家的Stripe账户ID以及买家的Stripe客户ID。
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/user.controller.js`:'
- en: '[PRE40]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If the seller has not connected their Stripe account yet, the `createCharge`
    method will return a 400 error response to indicate that a connected Stripe account
    is required.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果卖家尚未连接他们的Stripe账户，`createCharge`方法将返回400错误响应，以指示需要连接Stripe账户。
- en: To be able to charge the Stripe Customer on behalf of the seller's Stripe account,
    we first need to generate a Stripe token with the Customer ID and the seller's
    Stripe account ID, and then use that token to create a charge.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够代表卖家的Stripe账户向Stripe客户收费，我们首先需要使用客户ID和卖家的Stripe账户ID生成一个Stripe令牌，然后使用该令牌创建一个收费。
- en: The `createCharge` controller method will be called when the server receives
    a request to update an order with a product status change to **Processing** (the
    API implementation for this order update request will be discussed in the *Orders
    by shop* section).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器收到请求将产品状态更改为**处理中**的订单更新请求时，将调用`createCharge`控制器方法（关于此订单更新请求的API实现将在*按商店排序的订单*部分讨论）。
- en: This covers all the Stripe-related concepts relevant to the implementation of
    payments processing for the specific use cases of MERN Marketplace. Now we will
    move on to allowing a user to complete checkout and place their order.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了与MERN Marketplace特定用例的支付处理实现相关的所有Stripe相关概念。现在我们将继续允许用户完成结账并下订单。
- en: Checkout
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结账
- en: 'Users who are signed in and have added items to the cart will be able to start
    the checkout process. The Checkout form will collect customer details, delivery
    address information, and credit card information:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 已登录并且已将商品添加到购物车的用户将能够开始结账流程。结账表单将收集客户详细信息、送货地址信息和信用卡信息：
- en: '![](assets/82230cf9-ee29-41e7-835e-b9c00f4f5a63.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/82230cf9-ee29-41e7-835e-b9c00f4f5a63.png)'
- en: Initializing checkout details
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化结账详细信息
- en: In the `Checkout` component, we will initialize the `checkoutDetails` object
    in state before collecting the details from the form.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Checkout`组件中，我们将在收集表单详细信息之前，在状态中初始化`checkoutDetails`对象。
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Checkout.js`：'
- en: '[PRE41]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: After the component mounts, we will prepopulate the customer details based on
    the current user's details and also add the current cart items to `checkoutDetails`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 组件挂载后，我们将根据当前用户的详细信息预填充客户详细信息，并将当前购物车商品添加到`checkoutDetails`中。
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Checkout.js`：'
- en: '[PRE42]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Customer information
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户信息
- en: In the checkout form, we will add text fields to collect the customer name and
    email.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在结账表单中，我们将添加文本字段以收集客户姓名和电子邮件。
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Checkout.js`：'
- en: '[PRE43]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'When the user updates the values, the `handleCustomerChange` method will update
    the relevant details in the state:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户更新值时，`handleCustomerChange`方法将更新状态中的相关详细信息：
- en: '[PRE44]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Delivery address
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 送货地址
- en: To collect the delivery address from the user, we will add the following text
    fields to the checkout form to collect street address, city, zip code, state,
    and country.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从用户那里收集送货地址，我们将在结账表单中添加以下文本字段以收集街道地址、城市、邮政编码、州和国家。
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Checkout.js`：'
- en: '[PRE45]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: When the user updates these address fields, the `handleAddressChange` method
    will update the relevant details in the state.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户更新这些地址字段时，`handleAddressChange`方法将更新状态中的相关详细信息。
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Checkout.js`：'
- en: '[PRE46]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The PlaceOrder component
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PlaceOrder组件
- en: The credit card field will be added to the checkout form using Stripe's `CardElement`
    component from `react-stripe-elements`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用来自`react-stripe-elements`的Stripe的`CardElement`组件将信用卡字段添加到结账表单中。
- en: The `CardElement` component must be part of a payment form component that is
    built with the `injectStripe` **higher-order component** (**HOC**) and wrapped
    with the `Elements` component. So we will create a component called `PlaceOrder`
    with `injectStripe`, and it will contain Stripe's `CardElement` and the `PlaceOrder`
    button.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardElement`组件必须是使用`injectStripe` **higher-order component** (**HOC**)构建的支付表单组件的一部分，并且使用`Elements`组件进行包装。因此，我们将创建一个名为`PlaceOrder`的组件，其中包含`injectStripe`，它将包含Stripe的`CardElement`和`PlaceOrder`按钮。'
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/PlaceOrder.js`：'
- en: '[PRE47]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Then we will add this `PlaceOrder` component in the Checkout form, pass it the
    `checkoutDetails` object as a prop, and wrap it with the `Elements` component
    from `react-stripe-elements`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将在结账表单中添加`PlaceOrder`组件，将`checkoutDetails`对象作为prop传递给它，并使用来自`react-stripe-elements`的`Elements`组件进行包装。
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Checkout.js`：'
- en: '[PRE48]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The `injectStripe` HOC provides the `this.props.stripe` property that manages
    the `Elements` groups. This will allow us to call `this.props.stripe.createToken`
    within `PlaceOrder` to submit card details to Stripe and get back the card token.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`injectStripe` HOC提供了`this.props.stripe`属性，用于管理`Elements`组。这将允许我们在`PlaceOrder`中调用`this.props.stripe.createToken`来提交卡片详情到Stripe并获取卡片令牌。'
- en: Stripe CardElement component
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stripe CardElement组件
- en: Stripe's `CardElement` is self-contained, so we can just add it to the `PlaceOrder`
    component, then add styles as desired, and the card detail input is taken care
    of.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Stripe的`CardElement`是自包含的，因此我们只需将其添加到`PlaceOrder`组件中，然后根据需要添加样式，卡片详情输入就会被处理。
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/PlaceOrder.js`：'
- en: '[PRE49]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Placing an order
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下订单
- en: The Place Order button is also placed in the `PlaceOrder` component after the
    `CardElement`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PlaceOrder`组件中的`CardElement`之后，也放置了“下订单”按钮。
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/PlaceOrder.js`：'
- en: '[PRE50]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Clicking on the Place Order button will call the `placeOrder` method, which
    will attempt to tokenize the card details using `stripe.createToken`. If unsuccessful,
    the user will be informed of the error, but if successful, then the checkout details
    and generated card token will be sent to our server's create order API (covered
    in the next section).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下订单”按钮将调用`placeOrder`方法，该方法将尝试使用`stripe.createToken`对卡片详情进行标记。如果失败，用户将被告知错误，但如果成功，结账详情和生成的卡片令牌将被发送到我们服务器的创建订单API（在下一节中介绍）。
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/PlaceOrder.js`：'
- en: '[PRE51]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The `create` fetch method that makes a POST request to the create order API
    in the backend is defined in `client/order/api-order.js`. It takes the checkout
    details, the card token, and user credentials as parameters and sends it to the
    API at `/api/orders/:userId`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在`client/order/api-order.js`中定义了`create` fetch方法，该方法向后端的创建订单API发出POST请求。它将结账详情、卡片令牌和用户凭据作为参数，并将其发送到`/api/orders/:userId`的API。
- en: '`mern-marketplace/client/order/api-order.js`:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/api-order.js`：'
- en: '[PRE52]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Empty cart
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购物车为空
- en: If the create order API is successful, we will empty the cart using an `emptyCart`
    helper method in `cart-helper.js`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果创建订单API成功，我们将使用`cart-helper.js`中的`emptyCart`辅助方法清空购物车。
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/cart-helper.js`：'
- en: '[PRE53]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The `emptyCart` method removes the cart object from `localStorage`, and updates
    the state of the view by executing the callback passed.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`emptyCart`方法从`localStorage`中移除购物车对象，并通过执行传递的回调来更新视图的状态。'
- en: Redirecting to Order view
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向到订单视图
- en: With the order placed and the cart emptied, the user is redirected to the order
    view that will show them the details of the order just placed.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 下订单并清空购物车后，用户将被重定向到订单视图，该视图将显示刚刚下的订单的详细信息。
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/PlaceOrder.js`：'
- en: '[PRE54]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This will indicate that the checkout process has been completed with a successful
    call to the create order API that we will set up in the server to create and store
    orders in the database.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这将表明结账过程已经完成，并成功调用了我们在服务器端设置的创建订单API，用于在数据库中创建和存储订单。
- en: Creating new order
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新订单
- en: When a user places an order, the details of the order confirmed at checkout
    will be used to create a new order record in the database, update or create a
    Stripe Customer for the user, and decrease the stock quantities of products ordered.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户下订单时，将使用在结账时确认的订单详情来在数据库中创建新的订单记录，更新或创建用户的Stripe客户端，并减少已订购产品的库存数量。
- en: Order model
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 订单模型
- en: To store the orders, we will define a Mongoose Schema for the order model that
    will record the customer details along with user account reference, delivery address
    information, payment reference, created and updated-at timestamps, and an array
    of ordered products where the structure of each product will be defined in a separate
    subschema called `CartItemSchema`.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储订单，我们将为订单模型定义一个Mongoose模式，记录客户详细信息以及用户帐户引用，交货地址信息，付款参考，创建和更新时间戳，以及一个订购产品的数组，其中每个产品的结构将在名为`CartItemSchema`的单独子模式中定义。
- en: Ordered by and for customer
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下订单者和客户
- en: To record the details of the customer who the order is meant for, we will add
    `customer_name` and `customer_email` fields to the `Order` schema.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 为了记录订单面向的客户的详细信息，我们将在`Order`模式中添加`customer_name`和`customer_email`字段。
- en: '`mern-marketplace/server/models/order.model.js`:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/models/order.model.js`：'
- en: '[PRE55]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: To reference the signed-in user who placed the order, we will add an `ordered_by`
    field.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引用下订单的已登录用户，我们将添加一个`ordered_by`字段。
- en: '`mern-marketplace/server/models/order.model.js`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/models/order.model.js`：'
- en: '[PRE56]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Delivery address
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交货地址
- en: The delivery address information for the order will be stored in the delivery
    address subdocument with `street`, `city`, `state`, `zipcode`, and `country` fields.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 订单的交货地址信息将存储在交货地址子文档中，其中包括`street`，`city`，`state`，`zipcode`和`country`字段。
- en: '`mern-marketplace/server/models/order.model.js`:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/models/order.model.js`：'
- en: '[PRE57]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Payment reference
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 付款参考
- en: The payment information will be relevant when the order is updated and a charge
    needs to be created after an ordered product is processed by the seller. We will
    record the Stripe Customer ID relevant to the credit card details in a `payment_id`
    field in the `Order` schema.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 付款信息将在订单更新时相关，卖家处理订购产品后需要创建费用时。我们将在`Order`模式的`payment_id`字段中记录与信用卡详细信息相关的Stripe客户ID。
- en: '`mern-marketplace/server/models/order.model.js`:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/models/order.model.js`：'
- en: '[PRE58]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Products ordered
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 订购的产品
- en: The main content of the order will be the list of products ordered along with
    details, such as quantity of each. We will record this list in a field called
    `products` in the `Order` schema. The structure of each product will be defined
    separately in `CartItemSchema`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 订单的主要内容将是订购产品的列表以及每个产品的数量等详细信息。我们将在`Order`模式的一个名为`products`的字段中记录此列表。每个产品的结构将在`CartItemSchema`中单独定义。
- en: '`mern-marketplace/server/models/order.model.js`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/models/order.model.js`：'
- en: '[PRE59]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The CartItem schema
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购物车项目模式
- en: The `CartItem` schema will represent each product ordered. It will contain a
    reference to the product, the quantity of the product ordered by the user, a reference
    to the shop the product belongs to, and a status.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`CartItem`模式将代表每个订购的产品。它将包含对产品的引用，用户订购的产品数量，产品所属商店的引用以及状态。'
- en: '`mern-marketplace/server/models/order.model.js`:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/models/order.model.js`：'
- en: '[PRE60]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The `status` of the product can only have the values as defined in the enums,
    representing the current state of the product ordered as updated by the seller.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 产品的`status`只能具有枚举中定义的值，表示卖家更新的产品订购的当前状态。
- en: The `Order` schema defined here will record details required for the customer
    and seller to complete the purchase steps for the ordered products.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里定义的`Order`模式将记录客户和卖家完成订购产品的购买步骤所需的详细信息。
- en: Create order API
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建订单API
- en: The create order API route is declared in `server/routes/order.routes.js`. The order
    routes will be very similar to the user routes. To load the order routes in the
    Express app, we need to mount the routes in `express.js`, like we did for the
    auth and user routes.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 创建订单API路由在`server/routes/order.routes.js`中声明。订单路由将与用户路由非常相似。要在Express应用程序中加载订单路由，我们需要在`express.js`中挂载路由，就像我们为auth和user路由所做的那样。
- en: '`mern-marketplace/server/express.js`:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/express.js`：'
- en: '[PRE61]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'A number of actions, in the following sequence, take place when the create
    order API receives a POST request at `/api/orders/:userId`:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建订单API在`/api/orders/:userId`接收到POST请求时，将按以下顺序执行一系列操作。
- en: It is ensured that the user is signed in
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保用户已登录
- en: A Stripe `Customer` is either created or updated using the `stripeCustomer`
    user controller method discussed earlier
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用之前讨论过的`stripeCustomer`用户控制器方法，创建或更新Stripe`Customer`
- en: The stock quantities are updated for all the ordered products using the `decreaseQuanity`
    product controller method
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`decreaseQuanity`产品控制器方法，更新所有订购产品的库存数量
- en: The order is created in the Order collection with the `create` order controller
    method
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`create`订单控制器方法在订单集合中创建订单
- en: The route will be defined as follows.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 路由将被定义如下。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`：'
- en: '[PRE62]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: To retrieve the user associated with the `:userId` parameter in the route, we
    will use the `userByID` user controller method, which gets the user from the User
    collection and attaches it to the request object to be accessed by the next methods.
    We will add it with the order routes as follows.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索与路由中的`:userId`参数相关联的用户，我们将使用`userByID`用户控制器方法，该方法从用户集合中获取用户，并将其附加到请求对象中，以便下一个方法访问。我们将在订单路由中添加它。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`：'
- en: '[PRE63]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Decrease product stock quantity
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少产品库存数量
- en: We will update the product controller file to add the `decreaseQuantity` controller
    method, which will update the stock quantities of all the products purchased in
    the new order.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新产品控制器文件，添加`decreaseQuantity`控制器方法，该方法将更新新订单中购买的所有产品的库存数量。
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`：'
- en: '[PRE64]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Since the update operation in this case involves a bulk update of multiple products
    in the collection after matching with an array of products ordered, we will use
    the `bulkWrite` method in MongoDB to send multiple `updateOne` operations to the
    MongoDB server with one command. The multiple `updateOne` operations required
    are first listed in `bulkOps` using the `map` function. This will be faster than
    sending multiple independent save or update operations because with `bulkWrite()`
    there is only one round trip to MongoDB.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，更新操作涉及在与产品数组匹配后对集合中的多个产品进行批量更新，我们将使用MongoDB中的`bulkWrite`方法，以便一次性向MongoDB服务器发送多个`updateOne`操作。首先使用`map`函数将需要的多个`updateOne`操作列在`bulkOps`中。这将比发送多个独立的保存或更新操作更快，因为使用`bulkWrite()`只需要一次往返到MongoDB。
- en: Create order controller method
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建订单控制器方法
- en: The `create` controller method, defined in order controllers, takes the order
    details, creates a new order, and saves it to the Order collection in MongoDB.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在订单控制器中定义的`create`控制器方法接收订单详情，创建新订单，并将其保存到MongoDB的订单集合中。
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/order.controller.js`：'
- en: '[PRE65]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: With this implemented, orders can be created and stored in the backend by any
    signed-in user on the MERN Marketplace. Now we can set up APIs to fetch lists
    of orders by user, orders by shop, or read an individual order and display the
    fetched data to views in the frontend.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样的实现，任何在MERN Marketplace上登录的用户都可以创建并将订单存储在后端。现在我们可以设置API来获取用户的订单列表、商店的订单列表，或者读取单个订单并将获取的数据显示在前端视图中。
- en: Orders by shop
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商店的订单
- en: An important feature of the marketplace is allowing sellers to see and update
    the status of orders they've received for products in their shops. To implement
    this, we will first set up APIs to list orders by shop, and then update an order
    as a seller changes the status of a purchased product.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 市场的一个重要特性是允许卖家查看和更新他们在商店中收到的订单的状态。为了实现这一点，我们首先将设置API来按商店列出订单，然后在卖家更改已购买产品的状态时更新订单。
- en: List by shop API
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按商店列出API
- en: We will implement an API to get orders for a specific shop, so authenticated
    sellers can view orders for each of their shops. The request for this API will
    be received at `'/api/orders/shop/:shopId`, with the route defined in `order.routes.js`
    as follows.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个API来获取特定商店的订单，这样经过身份验证的卖家可以查看他们每个商店的订单。对于这个API的请求将在`'/api/orders/shop/:shopId`接收，路由在`order.routes.js`中定义如下。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`：'
- en: '[PRE66]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: To retrieve the shop associated with the `:shopId` parameter in the route, we
    will use the `shopByID` shop controller method, which gets the shop from the Shop
    collection and attaches it to the request object to be accessed by the next methods.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索与路由中的`:shopId`参数相关联的商店，我们将使用`shopByID`商店控制器方法，该方法从商店集合中获取商店并将其附加到请求对象中，以便下一个方法访问。
- en: The `listByShop` controller method will retrieve the orders that have products
    purchased with the matching shop ID, then populate the ID, name, and price fields
    for each product, with orders sorted by date from most recent to oldest.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`listByShop`控制器方法将检索具有与匹配商店ID购买的产品的订单，然后按日期从最近到最旧的顺序填充每个产品的ID、名称和价格字段。'
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/order.controller.js`：'
- en: '[PRE67]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: To fetch this API in the frontend, we will add a corresponding `listByShop`
    method in `api-order.js`, to be used in the `ShopOrders` component to show the
    orders for each shop.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端获取这个API，我们将在`api-order.js`中添加一个相应的`listByShop`方法，用于在`ShopOrders`组件中显示每个商店的订单。
- en: '`mern-marketplace/client/order/api-order.js`:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/api-order.js`：'
- en: '[PRE68]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The ShopOrders component
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ShopOrders组件
- en: 'Sellers will view their list of orders in the `ShopOrders` component, with
    each order showing only the purchased products relevant to the shop, and allowing
    the seller to change the status of the product with a dropdown of possible status
    values:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 卖家将在“ShopOrders”组件中查看他们的订单列表，每个订单只显示与商店相关的已购买产品，并允许卖家使用可能状态值的下拉菜单更改产品的状态：
- en: '![](assets/76b773d7-1bb1-429b-b10b-20933f551b19.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/76b773d7-1bb1-429b-b10b-20933f551b19.png)'
- en: We will update `MainRouter` with a `PrivateRoute`, to load the `ShopOrders`
    component at the `/seller/orders/:shop/:shopId` route.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`MainRouter`中更新一个`PrivateRoute`，以在`/seller/orders/:shop/:shopId`路由处加载`ShopOrders`组件。
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`：'
- en: '[PRE69]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: List orders
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出订单
- en: When the `ShopOrders` component mounts, we will load the relevant orders by
    using the `listByShop` fetch method and set the retrieved orders to state.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 当“ShopOrders”组件挂载时，我们将使用“listByShop”获取方法加载相关订单，并将检索到的订单设置为状态。
- en: '`mern-marketplace/client/order/ShopOrders.js`:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ShopOrders.js`：'
- en: '[PRE70]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: In the view, we will iterate through the list of orders and render each order
    in a collapsible list from `Material-UI`, which will expand on click.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中，我们将遍历订单列表，并在`Material-UI`的可折叠列表中呈现每个订单，点击时会展开。
- en: '`mern-marketplace/client/order/ShopOrders.js`:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ShopOrders.js`：'
- en: '[PRE71]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Each expanded order will show the order details and the `ProductOrderEdit` component.
    The `ProductOrderEdit` component will display the purchased products and allow
    the seller to edit the status of each product. The `updateOrders` method is passed
    as a prop to the `ProductOrderEdit` component so the status can be updated when
    a product status is changed.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 每个展开的订单将显示订单详情和`ProductOrderEdit`组件。`ProductOrderEdit`组件将显示已购买的产品，并允许卖家编辑每个产品的状态。`updateOrders`方法作为属性传递给`ProductOrderEdit`组件，以便在更改产品状态时可以更新状态。
- en: '`mern-marketplace/client/order/ShopOrders.js`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ShopOrders.js`：'
- en: '[PRE72]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The ProductOrderEdit component
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品订单编辑组件
- en: The `ProductOrderEdit` component takes an order object as a prop, and iterates
    through the order's products array to display only the products purchased from
    the current shop, along with a dropdown to change the status value of each product.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProductOrderEdit`组件将订单对象作为属性，并遍历订单的产品数组，仅显示从当前商店购买的产品，以及更改每个产品状态值的下拉菜单。'
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ProductOrderEdit.js`：'
- en: '[PRE73]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The possible list of status values is fetched from the server when the `ProductOrderEdit`
    component loads and set to state in `statusValues` to be rendered in the dropdown
    as a `MenuItem`.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载`ProductOrderEdit`组件时，从服务器获取可能的状态值列表，并设置为`statusValues`状态，以在下拉菜单中呈现为`MenuItem`。
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ProductOrderEdit.js`：'
- en: '[PRE74]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: When an option is selected from the possible status values, the `handleStatusChange`
    method is called to update the orders in state, and also to send a request to
    the appropriate backend API based on the value of the status selected.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 当从可能的状态值中选择一个选项时，将调用`handleStatusChange`方法来更新状态中的订单，并根据所选状态的值发送请求到适当的后端API。
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ProductOrderEdit.js`：'
- en: '[PRE75]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The `cancelProduct`, `processCharge`, and `update` fetch methods are defined
    in `api-order.js` to call corresponding APIs in the backend to update a cancelled
    product's stock quantity, to create a charge on the customer's credit card when
    a product is processing, and to update the order with the product status change.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在`api-order.js`中定义了`cancelProduct`、`processCharge`和`update`获取方法，以调用后端对应的API来更新取消产品的库存数量，在处理产品时在客户的信用卡上创建一个费用，并更新订单以更改产品状态。
- en: APIs for products ordered
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已订购产品的API
- en: Allowing sellers to update the status of a product will require the setup of
    four different APIs, including an API to retrieve possible status values. Then
    actual status updates will need APIs to handle updates to the order itself as
    the status is changed, to initiate related actions such as increasing stock quantity
    of a cancelled product, and to create a charge on the customer's credit card when
    a product is being processed.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 允许卖家更新产品状态将需要设置四个不同的API，包括一个用于检索可能状态值的API。然后实际状态更新将需要处理订单本身的更新API，因为状态已更改，以启动相关操作，例如增加取消产品的库存数量，并在处理产品时在客户的信用卡上创建一个费用。
- en: Get status values
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取状态值
- en: The possible status values of an ordered product are set as enums in the `CartItem`
    schema, and to show these values as options in the dropdown view, we will set
    up a GET API route at `/api/order/status_values` that retrieves these values.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 已订购产品的可能状态值在`CartItem`模式中设置为枚举，并且为了在下拉视图中显示这些值作为选项，我们将在`/api/order/status_values`设置一个GET
    API路由，以检索这些值。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`：'
- en: '[PRE76]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The `getStatusValues` controller method will return the enum values for the
    `status` field from the `CartItem` schema.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`getStatusValues`控制器方法将从`CartItem`模式的`status`字段返回枚举值。'
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/order.controller.js`：'
- en: '[PRE77]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: We will also set up a `fetch` method in `api-order.js`, this is used in the
    view to make a request to the API route.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在`api-order.js`中设置一个`fetch`方法，这在视图中用于向API路由发出请求。
- en: '`mern-marketplace/client/order/api-order.js`:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/api-order.js`：'
- en: '[PRE78]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Update order status
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新订单状态
- en: When a product's status is changed to any value other than **Processing** and
    **Cancelled**, a PUT request to `'/api/order/status/:shopId'` will directly update
    the order in the database given the current user is the verified owner of the
    shop with the ordered product.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 当产品的状态更改为除**处理中**和**已取消**之外的任何值时，将直接向`'/api/order/status/:shopId'`发送PUT请求，以更新数据库中的订单，假设当前用户是已验证的拥有订购产品的商店的所有者。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`：'
- en: '[PRE79]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: The `update` controller method will query the Order collection and find the
    order with the `CartItem` object that matches the updated product, and set the
    `status` value of this matched `CartItem` in the `products` array of the order.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`update`控制器方法将查询订单集合，并找到与更新产品匹配的`CartItem`对象的订单，并设置订单中`products`数组中匹配的`CartItem`的`status`值。'
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/order.controller.js`：'
- en: '[PRE80]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: In `api-order.js`, we will add an `update` fetch method to make a call to this
    update API with the required parameters passed from the view.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在`api-order.js`中，我们将添加一个`update` fetch方法，以使用从视图传递的必需参数调用此更新API。
- en: '`mern-marketplace/client/order/api-order.js`:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/api-order.js`：'
- en: '[PRE81]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Cancel product order
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消产品订单
- en: When a seller decides to cancel the order for a product, a PUT request will
    be sent to `/api/order/:shopId/cancel/:productId` so the product stock quantity
    can be increased, and the order updated in the database.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 当卖家决定取消产品的订单时，将发送一个PUT请求到`/api/order/:shopId/cancel/:productId`，以便增加产品库存数量，并在数据库中更新订单。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`：'
- en: '[PRE82]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: To retrieve the product associated with the `productId` parameter in the route,
    we will use the `productByID` product controller method.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索与路由中的`productId`参数相关联的产品，我们将使用`productByID`产品控制器方法。
- en: The `increaseQuantity` controller method is added to `product.controller.js`.
    It finds the product by the matching ID in the Product collection and increases
    the quantity value by the quantity that was ordered by the customer, now that
    the order for this product has been cancelled.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 增加数量的控制器方法被添加到`product.controller.js`中。它在产品集合中通过匹配的ID找到产品，并将数量值增加到客户订购的数量，现在该产品的订单已被取消。
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`：'
- en: '[PRE83]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: From the view, we will use a corresponding fetch method, added in `api-order.js`,
    to call the cancel product order API.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 从视图中，我们将使用在`api-order.js`中添加的相应fetch方法来调用取消产品订单API。
- en: '`mern-marketplace/client/order/api-order.js`:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/api-order.js`：'
- en: '[PRE84]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Process charge for product
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为产品处理收费
- en: When a seller changes the status of a product to **Processing**, we will set
    up a backend API to not only update the order but to also create a charge on the
    customer's credit card for the price of the product multiplied by the quantity
    ordered.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 当卖家将产品的状态更改为**处理中**时，我们将建立一个后端API，不仅更新订单，还会为产品的价格乘以订购数量在客户的信用卡上创建一个收费。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`：'
- en: '[PRE85]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: To retrieve the order associated with the `orderId` parameter in the route,
    we will use the `orderByID` order controller method, which gets the order from
    the Order collection and attaches it to the request object to be accessed by the
    `next` methods, shown as follows.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索与路由中的`orderId`参数相关联的订单，我们将使用`orderByID`订单控制器方法，该方法从订单集合中获取订单并将其附加到请求对象中，以便由`next`方法访问，如下所示。
- en: '`mern-marketplace/server/controllers/order.controller.js:`'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/order.controller.js:`'
- en: '[PRE86]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: This process charge API will receive a PUT request at `/api/order/:orderId/charge/:userId/:shopId`,
    and after successfully authenticating the user will create the charge by calling
    the `createCharge` user controller as discussed earlier in the *Using Stripe for
    payments* section, and then finally update the order with the `update` method.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程收费API将在`/api/order/:orderId/charge/:userId/:shopId`接收PUT请求，并在成功验证用户后，通过调用`createCharge`用户控制器来创建收费，如前面的*使用Stripe进行付款*部分所讨论的，最后使用`update`方法更新订单。
- en: From the view, we will use the `processCharge` fetch method in `api-order.js`,
    and provide the required route parameter values, credentials, and product details,
    including the amount to charge.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 从视图中，我们将在`api-order.js`中使用`processCharge` fetch方法，并提供所需的路由参数值、凭据和产品详情，包括要收费的金额。
- en: '`mern-marketplace/client/order/api-order.js`:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/api-order.js`：'
- en: '[PRE87]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Sellers can view orders received for their products in each of their shops,
    and they can easily update the status of each product ordered, while the application
    takes care of additional tasks, such as updating stock quantity and initiating
    payment. This covers the basic order management features for the MERN Marketplace
    application, which can be extended further as required.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 卖家可以查看其店铺中收到的产品订单，并可以轻松更新每个产品订单的状态，而应用程序会处理其他任务，例如更新库存数量和发起付款。这涵盖了MERN Marketplace应用程序的基本订单管理功能，可以根据需要进一步扩展。
- en: View order details
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看订单详情
- en: 'With Order collection and the database access all set up, moving forward it
    is easy to add the features of listing orders for each user, and showing details
    of a single order in a separate view where the user can track the status of each
    ordered product:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 随着订单集合和数据库访问的设置完成，向前推进很容易添加每个用户的订单列表功能，并在单独的视图中显示单个订单的详细信息，用户可以在该视图中跟踪每个已订购产品的状态。
- en: '![](assets/4af78ad1-eb61-4c8b-a32b-a56d7ba0b649.png)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4af78ad1-eb61-4c8b-a32b-a56d7ba0b649.png)'
- en: 'Following the steps repeated throughout this book, for setting up backend APIs
    to retrieve data and using it in the frontend to construct frontend views, you
    can develop order-related views as desired, taking inspiration from the snapshots
    of these sample views in the MERN Marketplace application code:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循本书中反复出现的步骤，设置后端API以检索数据并在前端使用它来构建前端视图，您可以根据需要开发与订单相关的视图，并从MERN Marketplace应用程序代码中的这些示例视图的快照中获得灵感：
- en: '![](assets/c1282af6-a2af-41c2-8909-5f176615778d.png)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c1282af6-a2af-41c2-8909-5f176615778d.png)'
- en: The MERN Marketplace application developed in this and [Chapter 6](aadad9b8-c30c-4e0a-8ebd-2ea6635d43bb.xhtml), *Exercising
    New MERN Skills with an Online Marketplace*, by building on the MERN skeleton
    application, covered the crucial features for a standard online marketplace application.
    This, in turn, demonstrated how the MERN stack can be extended to incorporate
    complex features.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章和[第6章](aadad9b8-c30c-4e0a-8ebd-2ea6635d43bb.xhtml)中开发的MERN Marketplace应用程序，通过在MERN骨架应用程序的基础上构建，涵盖了标准在线市场应用程序的关键功能。这反过来展示了MERN堆栈如何扩展以包含复杂功能。
- en: Summary
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we extended the MERN Marketplace application, and explored
    how to add a shopping cart for buyers, a checkout process with credit card payments,
    and order management for the sellers in an online marketplace application.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们扩展了MERN Marketplace应用程序，并探讨了如何为买家添加购物车，使用信用卡付款的结账流程，以及在线市场应用程序中卖家的订单管理。
- en: We discovered how the MERN stack technologies can work well with third-party
    integrations, as we implemented the cart checkout flow, and processed credit card
    charges on ordered products using the tools provided by Stripe for managing online
    payments.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现MERN堆栈技术如何与第三方集成良好，因为我们实现了购物车结账流程，并使用Stripe提供的工具处理已订购产品的信用卡付款，用于管理在线付款。
- en: We also unlocked more of what is possible with MERN, such as optimized bulk
    write operations in MongoDB for updating multiple documents in response to a single
    API call. This allowed us to decrease the stock quantities of multiple products
    in one go, such as when a user placed an order for multiple products from different
    stores.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还解锁了MERN的更多可能性，例如在MongoDB中进行优化的批量写操作，以响应单个API调用更新多个文档。这使我们能够一次性减少多个产品的库存数量，例如当用户从不同商店订购多个产品时。
- en: The marketplace features developed in the MERN Marketplace application revealed
    how this stack and structure can be utilized to design and build growing applications
    by adding features that may be simple or more complex in nature.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Marketplace应用程序中开发的市场功能揭示了这种堆栈和结构如何被利用来设计和构建不断增长的应用程序，通过添加可能是简单或更复杂的特性。
- en: In the next chapter, we will take the lessons learned so far in this book, and
    explore more advanced possibilities with MERN as we build a media streaming application
    by extending the MERN skeleton.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将借鉴本书迄今为止所学到的经验，通过扩展MERN骨架构建媒体流应用程序，探索更高级的可能性。
