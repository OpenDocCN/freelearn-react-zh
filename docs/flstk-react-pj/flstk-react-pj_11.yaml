- en: Making the VR Game Dynamic Using MERN
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MERN使VR游戏动态化
- en: In this chapter, we will extend the MERN skeleton application to build the MERN
    VR game application, and use it to make the static React 360 game developed in
    the previous chapter dynamic by replacing the sample game data with game details
    fetched directly from the MERN server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将扩展MERN骨架应用程序，构建MERN VR游戏应用程序，并使用它来使上一章中开发的静态React 360游戏动态化，通过直接从MERN服务器获取游戏细节来替换示例游戏数据。
- en: 'To make MERN VR Game a complete and dynamic game application, we will implement
    the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使MERN VR游戏成为一个完整和动态的游戏应用程序，我们将实现以下内容：
- en: A game model schema to store game details in MongoDB
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MongoDB中存储游戏细节的游戏模型模式
- en: APIs for game CRUD operations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏CRUD操作的API
- en: React views for game create, edit, list, and delete
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于游戏创建、编辑、列表和删除的React视图
- en: Updating the React 360 game to fetch data from API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新React 360游戏以从API获取数据
- en: Loading the VR game with dynamic game data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载具有动态游戏数据的VR游戏
- en: Dynamic MERN VR Game
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态MERN VR游戏
- en: 'Registered users on MERN VR Game will be able to make and modify their own
    games by providing an equirectangular image for the game world, and the VR object
    resources, including transform property values for each object to be placed in
    the game world. Any visitor to the application will be able to browse through
    all the games added by the makers, and play any game to find and collect the 3D
    objects in the game world that are relevant to the clue or description of each
    game:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN VR游戏上注册的用户将能够通过提供游戏世界的等距图像和VR对象资源（包括要放置在游戏世界中的每个对象的变换属性值）来制作和修改自己的游戏。任何访问应用程序的访客都可以浏览制作者添加的所有游戏，并玩任何游戏以找到并收集与每个游戏的线索或描述相关的游戏世界中的3D对象：
- en: '![](assets/7805f18a-fdd7-43b7-acd5-6651f78976de.png)The code for the complete
    MERN VR Game application is available on GitHub at [github.com/shamahoque/mern-vrgame](https://github.com/shamahoque/mern-vrgame). You
    can clone this code and run the application as you go through the code explanations
    in the rest of this chapter.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7805f18a-fdd7-43b7-acd5-6651f78976de.png)完整的MERN VR游戏应用程序的代码可在GitHub上找到：[github.com/shamahoque/mern-vrgame](https://github.com/shamahoque/mern-vrgame)。您可以克隆此代码，并在阅读本章其余部分的代码解释时运行该应用程序。'
- en: 'The views needed for the features related to creating, editing, and listing
    VR games will be developed by extending and modifying the existing React components in
    the MERN skeleton application. The component-tree pictured next shows all the
    custom React components that make up the MERN VR Game frontend developed in this
    chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现与创建、编辑和列出VR游戏相关的功能所需的视图，我们将通过扩展和修改MERN骨架应用程序中的现有React组件来开发。下图显示了构成本章中开发的MERN
    VR游戏前端的所有自定义React组件的组件树：
- en: '![](assets/a646f3f9-7903-4376-8e5f-69707ef64ea7.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a646f3f9-7903-4376-8e5f-69707ef64ea7.jpg)'
- en: Game model
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏模型
- en: In [Chapter 10](b9ae6b12-d545-4832-9d0a-9fb4a84a033e.xhtml), *Developing a Web-Based
    VR Game*, the *Game data structure* section laid out the details needed for each
    game in order to implement the scavenger hunt features defined for the gameplay.
    We will design the game schema based on these specific details about the game,
    its VR objects, and also a reference to the game maker.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](b9ae6b12-d545-4832-9d0a-9fb4a84a033e.xhtml)中，《开发基于Web的VR游戏》，*游戏数据结构*部分详细介绍了为了实现游戏中定义的寻宝功能所需的每个游戏的细节。我们将根据游戏的具体细节、其VR对象以及游戏制作者的参考设计游戏模式。
- en: Game schema
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏模式
- en: In the Mongoose schema for the game model defined in `game.model.js`, we will
    add fields for the
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在`game.model.js`中为游戏模型定义的Mongoose模式中，我们将添加以下字段：
- en: Game's name
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏的名称
- en: World image URL
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 世界图像URL
- en: Clue text
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线索文本
- en: An array containing details of the VR objects to be added as collectable answer
    objects
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含要添加为可收集答案对象的VR对象详细信息的数组
- en: An array containing details of the VR objects that are wrong objects and cannot
    be collected
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含无效对象详细信息的数组，无法收集
- en: Timestamps indicating when a game is created and updated
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指示游戏创建和更新的时间戳
- en: A reference to the user who made the game
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作游戏的用户的引用
- en: The `GameSchema` will be defined as follows.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameSchema`将定义如下。'
- en: '`mern-vrgame/server/models/game.model.js`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/models/game.model.js`：'
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: VRObject schema
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VRObject模式
- en: The `answerObjects` and `wrongObjects` fields in the game schema will both be
    arrays of VRObject documents, and the VRObject Mongoose schema will be defined
    separately with fields for storing the URLs of the OBJ file and MTL file, along
    with the React 360 `transform` values for each VR object, the `scale` value, and
    `color` value.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏模式中的`answerObjects`和`wrongObjects`字段都将是VRObject文档的数组，VRObject Mongoose模式将单独定义，包括存储OBJ文件和MTL文件的URL字段，以及每个VR对象的React
    360 `transform`值，`scale`值和`color`值。
- en: '`mern-vrgame/server/models/game.model.js`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/models/game.model.js`：'
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When a new game document is saved to the database, the `answerObjects` and `wrongObjects`
    arrays will be populated with VRObject documents that adhere to this schema definition.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当新的游戏文档保存到数据库时，`answerObjects`和`wrongObjects`数组将填充符合此模式定义的VRObject文档。
- en: Array length validation in the game schema
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏模式中的数组长度验证
- en: The `answerObjects` and `wrongObjects` arrays in a game document must contain
    at least one VRObject document in each array when being saved in the game collection.
    To add validation for a minimum array length to the game schema, we will add the
    following custom validation checks to the `answerObjects` and `wrongObjects` paths
    in `GameSchema`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存到游戏集合中时，游戏文档中的`answerObjects`和`wrongObjects`数组必须至少包含一个VRObject文档。为了为游戏模式添加最小数组长度的验证，我们将在`GameSchema`中的`answerObjects`和`wrongObjects`路径中添加以下自定义验证检查。
- en: '`mern-vrgame/server/models/game.model.js`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/models/game.model.js`：'
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These schema definitions will cater to all the requirements for developing a
    dynamic VR game according to the specifications of the MERN VR Game.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式定义将满足根据MERN VR游戏规范开发动态VR游戏的所有要求。
- en: Game APIs
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏API
- en: The backend in the MERN VR Game will expose a set of CRUD APIs for creating,
    editing, reading, listing, and deleting games from the database, which can be
    used in the frontend of the application, including in the React 360 game implementation,
    with fetch calls.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: MERN VR游戏中的后端将公开一组CRUD API，用于在前端应用程序中使用，包括在React 360游戏实现中使用fetch调用创建、编辑、读取、列出和删除游戏。
- en: The create API
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建API
- en: A user who is signed in to the application will be able to create new games
    in the database using the `create` API.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 已登录应用程序的用户将能够使用`create`API在数据库中创建新游戏。
- en: Route
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: In the backend, we will add a `POST` route in `game.routes.js`, that verifies
    that the current user is signed in and authorized, and then creates a new game
    with the game data passed in the request.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将在`game.routes.js`中添加一个`POST`路由，验证当前用户是否已登录并获得授权，然后使用请求中传递的游戏数据创建新游戏。
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`：'
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To process the `:userId` param and retrieve the associated user from the database,
    we will utilize the `userByID` method from the user controller. We will also add
    the following to the game routes, so the user is available in the `request` object
    as `profile`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理`:userId`参数并从数据库中检索相关联的用户，我们将利用用户控制器中的`userByID`方法。我们还将在游戏路由中添加以下内容，以便用户在`request`对象中作为`profile`可用。
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`：'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `game.routes.js` file will be very similar to the `user.routes` file, and
    to load these new routes in the Express app, we need to mount the game routes
    in `express.js`, just as we did for the auth and user routes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`game.routes.js`文件将与`user.routes`文件非常相似，并且为了在Express应用程序中加载这些新路由，我们需要在`express.js`中挂载游戏路由，就像我们为auth和user路由所做的那样。'
- en: '`mern-vrgame/server/express.js`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/express.js`：'
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Controller
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: The `create` controller method is executed when a POST request is received at
    `'/api/games/by/:userId'` with the request body containing the new game data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当收到`'/api/games/by/:userId'`的POST请求并且请求体包含新游戏数据时，将执行`create`控制器方法。
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`：'
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this `create` method, a new game document is created using the game schema
    and the data passed in the request body from the client side. Then this document
    is saved in the `Game` collection after the user reference is set as the game
    maker.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`create`方法中，使用游戏模式创建一个新的游戏文档，并使用从客户端传递的请求体中的数据。然后在将用户引用设置为游戏制造商后，将此文档保存在`Game`集合中。
- en: Fetch
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取
- en: On the frontend, we will add a corresponding `fetch` method in `api-game.js`
    to make a `POST` request to the `create` API by passing the form data collected
    from the signed-in user.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，我们将在`api-game.js`中添加相应的`fetch`方法，通过传递从已登录用户收集的表单数据来向`create`API发起`POST`请求。
- en: '`mern-vrgame/client/game/api-game.js`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/api-game.js`：'
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: List API
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表API
- en: It will be possible to fetch a list of all the games in the `Game` collection
    from the backend using the list API.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用列表API从后端获取`Game`集合中所有游戏的列表。
- en: Route
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: We will add a GET route to the game routes to retrieve all the games stored
    in the database.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在游戏路由中添加一个GET路由，以检索存储在数据库中的所有游戏。
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`：'
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A `GET` request to `/api/games` will execute the `list` controller method.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对`/api/games`的`GET`请求将执行`list`控制器方法。
- en: Controller
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: The `list` controller method will query the `Game` collection in the database
    to return all the games in the response to the client.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`控制器方法将查询数据库中的`Game`集合，以返回响应给客户端的所有游戏。'
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`：'
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Fetch
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取
- en: In the frontend, to fetch the games using this list API, we will set up a `fetch`
    method in `api-game.js`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，为了使用这个列表API获取游戏，我们将在`api-game.js`中设置一个`fetch`方法。
- en: '`mern-vrgame/client/game/api-game.js`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/api-game.js`：'
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: List by maker API
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按制造商列表API
- en: The application will also allow us to fetch the games made by a specific user
    with the list by maker API.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序还将允许我们使用制造商列表API获取特定用户制作的游戏。
- en: Route
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: In the game routes, we will add a `GET` route to retrieve the games made by
    a specific user.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏路由中，我们将添加一个`GET`路由，以检索特定用户制作的游戏。
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`：'
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: A `GET` request to this route will execute the `listByMaker` method in the game
    controller.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个路由的`GET`请求将执行游戏控制器中的`listByMaker`方法。
- en: Controller
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: The `listByMaker` controller method will query the Game collection in the database
    to get the matching games.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`listByMaker`控制器方法将查询数据库中的Game集合，以获取匹配的游戏。'
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`：'
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the query to the Game collection, we find all the games where the `maker`
    field matches the user specified in `req.profile`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在对Game集合的查询中，我们找到所有制造商字段与`req.profile`中指定的用户匹配的游戏。
- en: Fetch
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取
- en: In the frontend, to fetch the games for a specific user with this list by the
    maker API, we will add a `fetch` method in `api-game.js`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，为了使用制造商列表API获取特定用户的游戏，我们将在`api-game.js`中添加一个`fetch`方法。
- en: '`mern-vrgame/client/game/api-game.js`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/api-game.js`：'
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Read API
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取API
- en: Individual game data will be retrieved from the database using the `read` API
    at `'/api/game/:gameId'`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用`'/api/game/:gameId'`的`read` API从数据库中检索单个游戏数据。
- en: Route
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: In the backend, we will add a `GET` route that queries the `Game` collection
    with an ID and returns the game in the response.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将添加一个`GET`路由，查询带有ID的`Game`集合，并在响应中返回游戏。
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`：'
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `:gameId` param in the route URL will be processed first to retrieve the
    individual game from the database. So we will also add the following to the game
    routes:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 路由URL中的`:gameId`参数将首先被处理，以从数据库中检索单个游戏。因此，我们还将在游戏路由中添加以下内容：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Controller
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: The `:gameId` param in the request to the read API will call the `gameByID`
    controller method, which is similar to the `userByID` controller method. It will
    retrieve the game from the database and attach it to the `request` object to be
    used in the `next` method.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对read API的请求中的`:gameId`参数将调用`gameByID`控制器方法，该方法类似于`userByID`控制器方法。它将从数据库中检索游戏并将其附加到`request`对象中，以在`next`方法中使用。
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`：'
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `next` method, in this case the `read` controller method, simply returns
    this `game` object in the response to the client.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`next`方法，即`read`控制器方法，简单地将这个`game`对象返回给客户端的响应。
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`：'
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Fetch
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取
- en: In the frontend code, we will add a `fetch` method to utilize this read API
    to retrieve the details of an individual game according to its ID.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端代码中，我们将添加一个`fetch`方法来利用这个read API根据其ID检索单个游戏的详细信息。
- en: '`mern-vrgame/client/game/api-game.js`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/api-game.js`：'
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This `read` API will be used for the React views fetching a game detail and
    also the React 360 game view, which will render the game interface.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`read` API将用于React视图获取游戏详情，还将用于React 360游戏视图，该视图将呈现游戏界面。
- en: Edit API
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑API
- en: Authorized users who are signed in and also the maker of a specific game will
    be able to edit the details of that game using the `edit` API.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 已登录并且也是特定游戏的制作者的授权用户将能够使用`edit` API编辑该游戏的详细信息。
- en: Route
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: In the backend, we will add a `PUT` route that allows an authorized user to
    edit one of their games.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将添加一个`PUT`路由，允许授权用户编辑他们的游戏之一。
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`：'
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A PUT request to `'/api/games/:gameId'` will first execute the `gameByID` controller
    method to retrieve the specific game’s details. The `requireSignin` auth controller
    method will also be called to ensure the current user is signed in. Then the `isMaker`
    controller method will determine whether the current user is the maker of this
    specific game before finally running the game `update` controller method to modify
    the game in the database.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 向`'/api/games/:gameId'`发送PUT请求将首先执行`gameByID`控制器方法，以检索特定游戏的详细信息。还将调用`requireSignin`身份验证控制器方法，以确保当前用户已登录。然后`isMaker`控制器方法将确定当前用户是否是该特定游戏的制作者，最后运行游戏`update`控制器方法来修改数据库中的游戏。
- en: Controller
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: The `isMaker` controller method ensures that the signed-in user is actually
    the maker of the game being edited.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`isMaker`控制器方法确保已登录用户实际上是正在编辑的游戏的制作者。'
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`：'
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `update` method in the game controller will take the existing game details
    and the form data received in the request body to merge the changes, and save
    the updated game to the Game collection in the database.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏控制器中的`update`方法将获取现有的游戏详情和请求体中接收到的表单数据，合并更改，并将更新后的游戏保存到数据库中的Game集合中。
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`：'
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Fetch
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取
- en: The `edit` API is called in the view using a `fetch` method that takes the form
    data and sends it with the request to the backend along with user credentials.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中调用`edit` API时，使用`fetch`方法获取表单数据，并将其与用户凭据一起发送到后端。
- en: '`mern-vrgame/client/game/api-game.js`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/api-game.js`：'
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Delete API
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除API
- en: An authenticated and authorised user will be able to delete any of the games
    they made on the application using the `delete` game API.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 经过身份验证和授权的用户将能够使用`delete`游戏API删除他们在应用程序中制作的任何游戏。
- en: Route
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: In the backend, we will add a `DELETE` route that allows an authorized maker
    to delete one of their own games.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将添加一个`DELETE`路由，允许授权的制作者删除他们自己的游戏之一。
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`：'
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The flow of the controller method execution on the server after receiving the
    DELETE request at `'api/games/:gameId'` will be similar to the edit API, with
    the final call made to the `remove` controller method instead of `update`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在收到`'api/games/:gameId'`的DELETE请求后，控制器方法在服务器上的执行流程将类似于编辑API，最终调用`remove`控制器方法而不是`update`。
- en: Controller
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: The `remove` controller method deletes the specified game from the database,
    when a DELETE request is received at `'/api/games/:gameId'` and it has been verified
    that the current user is the original maker of the given game.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当收到`'/api/games/:gameId'`的DELETE请求并验证当前用户是给定游戏的原始制作者时，`remove`控制器方法将从数据库中删除指定的游戏。
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`：'
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Fetch
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取
- en: We will add a corresponding `remove` method in `api-game.js` to make a `delete`
    fetch request to the delete API.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`api-game.js`中添加相应的`remove`方法，以便向删除API发出`delete`请求。
- en: '`mern-vrgame/client/game/api-game.js`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/api-game.js`：'
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: With these game APIs in place, we can build out the React views for the application
    and also update the React 360 game view code to fetch and render dynamic game
    details.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些游戏API，我们可以构建应用程序的React视图，并更新React 360游戏视图代码以获取和呈现动态游戏详情。
- en: Creating and editing games
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和编辑游戏
- en: Users registered on MERN VR Game will be able to make new games and modify these
    games from within the application. We will add React components that allow users
    to modify game details and VR object details for each game.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN VR Game上注册的用户将能够在应用程序内制作新游戏并修改这些游戏。我们将添加React组件，允许用户修改每个游戏的游戏详情和VR对象详情。
- en: Making a new game
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新游戏
- en: When a user signs into the application, they will see a MAKE GAME link on the
    menu that will navigate them to the `NewGame` component containing a form to create
    a new game.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录应用程序时，他们将在菜单中看到一个MAKE GAME链接，该链接将引导他们到包含创建新游戏表单的`NewGame`组件。
- en: Updating the menu
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新菜单
- en: 'We will update the navigation menu to add the MAKE GAME button, as shown in
    the following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新导航菜单，添加MAKE GAME按钮，如下截图所示：
- en: '![](assets/c554d5ac-420f-4762-8084-6a88044afb1f.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c554d5ac-420f-4762-8084-6a88044afb1f.png)'
- en: In the `Menu` component, we will add the `Link` to the route for the `NewGame`
    component, right before the MY PROFILE Link, in the section that renders only
    when the user is authenticated.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Menu`组件中，我们将在用户经过身份验证时渲染的部分中，在MY PROFILE链接之前，为`NewGame`组件的路由添加`Link`。
- en: '`mern-vrgame/client/core/Menu.js`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/core/Menu.js`：'
- en: '[PRE27]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: NewGame component
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NewGame组件
- en: 'The `NewGame` component uses the `GameForm` component to render the form elements
    the user will fill out to create a new game:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewGame`组件使用`GameForm`组件来渲染用户将填写以创建新游戏的表单元素：'
- en: '![](assets/a825261e-e98e-497a-b21e-17a07727bdfd.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a825261e-e98e-497a-b21e-17a07727bdfd.png)'
- en: The `GameForm` contains all the form fields, and it takes the `onSubmit` method
    that should be executed when the user submits the form, as a prop from the `NewGame`
    component along with any server-returned error messages.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameForm`包含所有表单字段，并从`NewGame`组件中获取`onSubmit`方法（用户提交表单时应执行的方法），以及任何服务器返回的错误消息。'
- en: '`mern-vrgame/client/game/NewGame.js`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/NewGame.js`：'
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `clickSubmit` method uses the create `fetch` method from `api-game.js` to
    make a POST request to the `create` API with the game form data and user details.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`clickSubmit`方法使用`api-game.js`中的创建`fetch`方法，向`create`API发出POST请求，携带游戏表单数据和用户详情。'
- en: '`mern-vrgame/client/game/NewGame.js`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/NewGame.js`：'
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We will add a `PrivateRoute` in `MainRouter`, so the `NewGame` component loads
    in the browser at the `/game/new` path.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`MainRouter`中添加一个`PrivateRoute`，以便`NewGame`组件在浏览器中加载，路径为`/game/new`。
- en: '`mern-vrgame/client/MainRouter.js`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/MainRouter.js`：'
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Editing the game
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑游戏
- en: Users will be able to edit the games they made using the `EditGame` component,
    which will render the game form fields pre-populated with the existing game's
    details.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将能够使用`EditGame`组件编辑他们创建的游戏，该组件将呈现预填充现有游戏详情的游戏表单字段。
- en: EditGame component
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EditGame组件
- en: 'Just like in the `NewGame` component, the `EditGame` component will also use
    the `GameForm` component to render the form elements, but this time the fields
    will show the current values of the game fields, and users will be able to update
    these values:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在`NewGame`组件中一样，`EditGame`组件也将使用`GameForm`组件来呈现表单元素，但这次字段将显示游戏字段的当前值，并且用户将能够更新这些值：
- en: '![](assets/2742c2b7-045f-4230-8734-f6eb3b5fc639.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2742c2b7-045f-4230-8734-f6eb3b5fc639.png)'
- en: In the case of the `EditGame` component, `GameForm` will take the given game's
    ID as a prop so it can fetch the game details, in addition to the `onSubmit` method
    and server-generated error message, if any.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在`EditGame`组件的情况下，`GameForm`将接受给定游戏的ID作为属性，以便获取游戏详情，以及`onSubmit`方法和服务器生成的错误消息（如果有）。
- en: '`mern-vrgame/client/game/EditGame.js`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/EditGame.js`：'
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `clickSubmit` method for the edit form will use the `update` fetch method
    in `api-game.js` to make a PUT request to the edit API with the form data and
    user details.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑表单的`clickSubmit`方法将使用`api-game.js`中的`update`获取方法，向编辑API发出PUT请求，携带表单数据和用户详情。
- en: '`mern-vrgame/client/game/EditGame.js`:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/EditGame.js`：'
- en: '[PRE32]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `EditGame` component will load in the browser at the `/game/edit/:gameId` path,
    declared in a `PrivateRoute` in `MainRouter`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditGame`组件将在浏览器中加载，路径为`/game/edit/:gameId`，在`MainRouter`中声明为`PrivateRoute`。'
- en: '`mern-vrgame/client/MainRouter.js`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/MainRouter.js`：'
- en: '[PRE33]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The GameForm component
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GameForm组件
- en: The `GameForm` component used in both the `NewGame` and `EditGame` components
    contains the elements that allow users to enter game details and VR object details
    for a single game. It may start with a blank game object or load an existing game
    in `componentDidMount`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameForm`组件在`NewGame`和`EditGame`组件中都使用，包含允许用户输入游戏详情和单个游戏的VR对象详情的元素。它可以从空白游戏对象开始，或在`componentDidMount`中加载现有游戏。'
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`：'
- en: '[PRE34]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If the `GameForm` component receives a `gameId` prop from the parent component,
    such as from the `EditGame` component, then it will use the read API to retrieve
    the game's details and set it to state to be rendered in the form view.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`GameForm`组件从父组件（如`EditGame`组件）接收到`gameId`属性，则它将使用读取API来检索游戏的详情并将其设置为状态以在表单视图中呈现。
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`：'
- en: '[PRE35]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The form view in the `GameForm` component will essentially have two parts, one
    part that takes simple game details, such as name, world image link, and clue
    text as input, and a second part that allows users to add a variable number of
    VR objects to either the answer objects array or wrong objects array.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameForm`组件中的表单视图基本上分为两部分，一部分是接受简单的游戏细节，比如名称、世界图片链接和线索文本作为输入，另一部分允许用户向答案对象数组或错误对象数组中添加可变数量的VR对象。'
- en: Inputing simple game details
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入简单的游戏细节
- en: The simple game details section will mostly be text input added using the Material-UI
    `TextField` component, with a change handling method passed to `onChange`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的游戏细节部分将主要是使用Material-UI的`TextField`组件添加的文本输入，并传递给`onChange`的更改处理方法。
- en: Form title
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单标题
- en: The form title will either be `New Game` or `Edit Game`, depending on whether
    an existing game ID is passed as a prop to `GameForm`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 表单标题将是“新游戏”或“编辑游戏”，具体取决于是否将现有游戏ID作为prop传递给`GameForm`。
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`：'
- en: '[PRE36]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Game world image
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏世界图片
- en: We will render the background image URL in an `img` element at the very top
    to show users the image they added as the game world image URL.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在顶部的`img`元素中渲染背景图片URL，以显示用户添加的游戏世界图片URL。
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`：'
- en: '[PRE37]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Game name
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏名称
- en: The game name will be added in a single `TextField` of default type `text`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏名称将添加在一个默认类型为`text`的单个`TextField`中。
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`：'
- en: '[PRE38]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Clue text
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线索文本
- en: The clue text will be added to a multiline `TextField` component.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 线索文本将添加到多行`TextField`组件中。
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`：'
- en: '[PRE39]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Handle input
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理输入
- en: All the input changes will be handled by the `handleChange` method that will
    update the game values in state with the user input.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 所有输入更改将由`handleChange`方法处理，该方法将使用用户输入更新状态中的游戏数值。
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`：'
- en: '[PRE40]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Modifying arrays of VR objects
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改VR对象数组
- en: 'In order to allow users to modify the arrays of `answerObjects` and `wrongObjects`
    that they wish to add to their VR game, `GameForm` will iterate through each array
    and render a `VRObjectForm` component for each object. With this, it will become
    possible to add, remove, and modify VR objects from the `GameForm` component:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许用户修改他们希望添加到他们的VR游戏中的`answerObjects`和`wrongObjects`数组，`GameForm`将遍历每个数组，并为每个对象渲染一个`VRObjectForm`组件。通过这样做，将可以从`GameForm`组件中添加、删除和修改VR对象：
- en: '![](assets/c9d59097-561d-4b45-97e0-aab65d9c09f7.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c9d59097-561d-4b45-97e0-aab65d9c09f7.png)'
- en: Iterating and rendering the object details form
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代和渲染对象细节表单
- en: Using the Material-UI `ExpansionPanel` components, we will add the form interface
    seen previously to create a modifiable array of VR object details for each type
    of VR object array in the given game.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Material-UI的`ExpansionPanel`组件，我们将添加先前看到的表单界面，以为给定游戏中的每种类型的VR对象数组创建一个可修改的数组。
- en: Inside the `ExpansionPanelDetails` component, we will iterate through the `answerObjects`
    array or the `wrongObjects` array to render a `VRObjectForm` component for each
    VR object.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ExpansionPanelDetails`组件中，我们将迭代`answerObjects`数组或`wrongObjects`数组，为每个VR对象渲染一个`VRObjectForm`组件。
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`：'
- en: '[PRE41]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Each `VRObjectForm` will take as props the `vrObject` itself, the current `index`
    in the array, the type of object array, and two methods for updating the state
    in `GameForm` when the array details are modified by changing details or deleting
    an object from within the `VRObjectForm` component.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`VRObjectForm`将作为props接受`vrObject`本身，数组中的当前`index`，对象数组的类型，以及在`VRObjectForm`组件内部通过更改细节或删除对象时更新`GameForm`状态的两种方法。
- en: Adding a new object to the array
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向数组中添加一个新对象
- en: The button to add an object will allow users to add a new `VRObjectForm` component
    to take the details of a new VR object.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 添加对象的按钮将允许用户添加一个新的`VRObjectForm`组件，以获取新的VR对象的细节。
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`：'
- en: '[PRE42]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This will basically just add an empty object to the array being iterated with
    a call to the `addObject` method with the array type specified in the name value.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上只会向正在迭代的数组中添加一个空对象，并使用名称值中指定的数组类型调用`addObject`方法。
- en: Removing an object from the array
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数组中移除对象
- en: Each `VRObjectForm` component can also be deleted to remove the object from
    the given array. `GameForm` will pass a `removeObject` method to the `VRObjectForm`
    component as a prop so the array can be updated in state when a user clicks `delete`
    on a specific `VRObjectForm`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`VRObjectForm`组件也可以被删除，以从给定数组中移除对象。`GameForm`将会传递一个`removeObject`方法给`VRObjectForm`组件作为属性，这样当用户点击特定`VRObjectForm`上的`delete`时，数组就可以在状态中更新。
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`：'
- en: '[PRE43]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The object will be removed from the array by slicing at the given `index` from
    the array of the specified array type in name.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 对象将通过在指定名称的数组中的给定`index`处进行切片来从数组中移除。
- en: Handling the object detail change
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理对象细节变化
- en: The VR object details will update in the `GameForm` component state when the
    user changes input values in any of the `VRObjectForm` fields. To register this
    update, the `GameForm` passes the `handleObjectChange` method to the `VRObjectForm`
    component.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户更改任何`VRObjectForm`字段中的输入值时，`VR`对象的细节将在`GameForm`组件状态中更新。为了注册这个更新，`GameForm`将`handleObjectChange`方法传递给`VRObjectForm`组件。
- en: '`mern-vrgame/client/game/GameForm.js`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameForm.js`：'
- en: '[PRE44]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The `handleObjectChange` method updates the field value of the specific object
    at the `index` in the array with the given `type`, so it is reflected in the game
    object stored in the state in `GameForm`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleObjectChange`方法会更新数组中特定对象的字段值，使用给定的`type`和`index`，因此它会在`GameForm`中存储的游戏对象状态中反映出来。'
- en: VRObjectForm component
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VRObjectForm组件
- en: 'The `VRObjectForm` component will render the input fields to modify an individual
    VR object''s details, which is added to the `answerObjects` and `wrongObjects`
    arrays of the game in the `GameForm` component:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`VRObjectForm`组件将渲染输入字段，以修改单个VR对象的细节，该对象被添加到`GameForm`组件中的`answerObjects`和`wrongObjects`数组中：'
- en: '![](assets/101c7142-c187-4ade-a62b-416575acbfef.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/101c7142-c187-4ade-a62b-416575acbfef.png)'
- en: It may start with a blank VR object or load an existing VR object's details
    in `componentDidMount`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以从一个空的VR对象开始，或者在`componentDidMount`中加载现有的VR对象的细节。
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`：'
- en: '[PRE45]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In `componentDidMount`, the state will be set with details of the `vrObject`
    passed as a prop from the `GameForm` component.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在`componentDidMount`中，状态将被设置为从`GameForm`组件传递的`vrObject`的细节。
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`：'
- en: '[PRE46]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The input fields to modify these values will be added using Material-UI `TextField`
    components.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Material-UI的`TextField`组件来添加修改这些值的输入字段。
- en: 3D object file input
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D对象文件输入
- en: The OBJ and MTL file links will be added for each VR object as text input using
    the `TextField` components.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: OBJ和MTL文件链接将作为文本输入添加到每个VR对象中，使用`TextField`组件。
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`：'
- en: '[PRE47]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Translate value input
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 翻译值输入
- en: The translate values of the VR object across the X, Y, and Z axes will be input
    in the `TextField` components of the `number` type.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: VR对象在X、Y和Z轴上的翻译值将在`number`类型的`TextField`组件中输入。
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`：'
- en: '[PRE48]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Rotate value input
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旋转值输入
- en: The `rotate` values of the VR object around the X, Y, and Z axes will be input
    in the `TextField` components of the `number` type.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: VR对象围绕X、Y和Z轴的“旋转”值将在“数字”类型的TextField组件中输入。
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`：'
- en: '[PRE49]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Scale value input
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比例值输入
- en: The `scale` value for the VR object will be input in a `TextField` component
    of the `number` type.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: VR对象的“比例”值将在“数字”类型的TextField组件中输入。
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`：'
- en: '[PRE50]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Object color input
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象颜色输入
- en: 'The color value for the VR object will be input in a `TextField` component
    of the `text` type:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: VR对象的颜色值将在“文本”类型的TextField组件中输入：
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`：'
- en: '[PRE51]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Delete object button
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除对象按钮
- en: 'The `VRObjectForm` will contain a `Delete` button that will execute the `removeObject`
    method received in the `GameForm` props form:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`VRObjectForm`将包含一个“删除”按钮，该按钮将执行从`GameForm`props表单中接收到的`removeObject`方法：'
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`：'
- en: '[PRE52]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The `removeObject` method will take the value of the object array type and the
    array index position to remove the given object from the relevant VR objects array
    in the `GameForm` state.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: “removeObject”方法将获取对象数组类型的值和要删除的数组索引位置，从“GameForm”状态中删除相关VR对象数组中的给定对象。
- en: Handling the input change
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理输入更改
- en: When any of the VR object details are changed in the input fields, the `handleChange`
    method will update the state of the `VRObjectForm` component, and use the `handleUpdate`
    method passed as a prop from `GameForm` to update the VR object in the `GameForm` state
    with the changed value for the object detail.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入字段中的任何VR对象细节发生更改时，“handleChange”方法将更新“VRObjectForm”组件的状态，并使用从“GameForm”传递的“handleUpdate”方法来更新“GameForm”状态中的VR对象的更改值。
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/VRObjectForm.js`：'
- en: '[PRE53]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: With this implementation, the create and edit game forms are in place, complete
    with VR object input forms for arrays of varying sizes. Any registered user can
    use these forms to add and edit games on the MERN VR Game application.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种实现，创建和编辑游戏表单已经就位，包括用于不同大小数组的VR对象输入表单。任何注册用户都可以使用这些表单在MERN VR游戏应用程序上添加和编辑游戏。
- en: Game list views
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏列表视图
- en: Visitors to MERN VR Game will access the games on the application from lists
    rendered on the home page and individual user profiles. The home page will list
    all the games on the application, and the games by a specific maker will be listed
    on their user profile page. The list views will iterate through game data fetched
    using the `list` APIs and render details of each game in the `GameDetail` component.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 访问MERN VR游戏的访问者将从主页和个人用户资料页面上呈现的列表中访问应用程序中的游戏。主页将列出应用程序中的所有游戏，特定制作者的游戏将列在其用户资料页面上。列表视图将通过使用“列表”API获取的游戏数据进行迭代，并在“GameDetail”组件中呈现每个游戏的详细信息。
- en: All games
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有游戏
- en: The `Home` component will fetch the list of all the games in the game collection
    using the list API when the component mounts.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`Home`组件将在组件挂载时使用列表API获取游戏集合中所有游戏的列表。'
- en: '`mern-vrgame/client/core/Home.js`:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/core/Home.js`：'
- en: '[PRE54]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The list of games retrieved from the server will be set to state and iterated
    over to render a `GameDetail` component with each game in the list.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务器检索到的游戏列表将设置为状态，并进行迭代以呈现每个列表中的“GameDetail”组件。
- en: '`mern-vrgame/client/core/Home.js`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/core/Home.js`：'
- en: '[PRE55]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The `GameDetail` component will be passed the game details and an `updateGames`
    method.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: “GameDetail”组件将传递游戏详情和“updateGames”方法。
- en: '`mern-vrgame/client/core/Home.js`:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/core/Home.js`：'
- en: '[PRE56]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The `updateGames` method will update the list in the `Home` component when
    a user deletes their game from the `GameDetail` component that renders with an
    `edit` and `delete` option for the maker of the game:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateGames`方法将在用户从`GameDetail`组件中删除他们的游戏时更新`Home`组件中的列表，该组件呈现了游戏制作者的`edit`和`delete`选项：'
- en: '![](assets/f7fa0681-c359-45f1-98a2-7b5fb4dc9256.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f7fa0681-c359-45f1-98a2-7b5fb4dc9256.png)'
- en: Games by a maker
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作者的游戏
- en: The user `Profile` component will fetch the list of just the games made by the
    given user with the list by the maker API. We will update the `init` method in
    the `Profile` component to call the `listByMaker` fetch method after the user
    details are retrieved.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 用户`Profile`组件将使用制作者API获取给定用户制作的游戏列表。我们将更新`Profile`组件中的`init`方法，在检索到用户详细信息后调用`listByMaker`获取方法。
- en: '`mern-vrgame/client/user/Profile.js`:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/user/Profile.js`：'
- en: '[PRE57]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Similar to how the game list is rendered in the `Home` component, we will set
    the list of games retrieved from the server to state in the `Profile` component, and
    iterate over it in the view to render the `GameDetail` components, which will
    be passed the individual game details and an `updateGames` method.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于在`Home`组件中呈现游戏列表的方式，我们将在`Profile`组件中将从服务器检索到的游戏列表设置为状态，并在视图中对其进行迭代以呈现`GameDetail`组件，该组件将传递个别游戏详情和`updateGames`方法。
- en: '`mern-vrgame/client/user/Profile.js`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/user/Profile.js`：'
- en: '[PRE58]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'This will render a `GameDetail` component for each game made by the specific
    user:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为特定用户制作的每个游戏呈现一个`GameDetail`组件：
- en: '![](assets/e63a7011-94eb-420a-bd20-13ad86f97746.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e63a7011-94eb-420a-bd20-13ad86f97746.png)'
- en: GameDetail component
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏详情组件
- en: 'The `GameDetail` component takes a game object as a prop, and renders the details
    of the game, along with a PLAY GAME button that links to the VR game view. It
    also shows `edit` and `delete` buttons if the current user is the maker of the
    game:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameDetail`组件以游戏对象作为属性，并呈现游戏的详细信息，以及一个链接到VR游戏视图的PLAY GAME按钮。如果当前用户是游戏制作者，则还会显示`edit`和`delete`按钮：'
- en: '![](assets/1bc66f95-a3b4-48e3-af8b-7f82d69f4381.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1bc66f95-a3b4-48e3-af8b-7f82d69f4381.png)'
- en: Game details
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏详情
- en: The game details, such as the name, world image, clue text, and maker name,
    are rendered to give the user an overview of the game.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏详情，如名称、世界图片、线索文本和制作者名称，都会被呈现，以便用户对游戏有一个概览。
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameDetail.js`：'
- en: '[PRE59]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Play Game button
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Play Game按钮
- en: The `Play Game` button in the `GameDetail` component will simply be a `Link`
    component that points to the route that opens the React 360-generated `index.html`
    (implementation for this route on the server is discussed in the *Playing the
    VR game* section).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameDetail`组件中的`Play Game`按钮将简单地是一个指向打开React 360生成的`index.html`路由的`Link`组件（服务器上此路由的实现在*玩VR游戏*部分讨论）。'
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameDetail.js`：'
- en: '[PRE60]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The route to the game view takes the game ID as a `query` parameter. We set
    `target='_self'` on the `Link` so React Router skips transitioning to the next
    state and lets the browser handle this link. What this will do is allow the browser
    to directly make the request at this route, and render the `index.html` file sent
    by the server in response to this request.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏视图的路由将以游戏ID作为`query`参数。我们在`Link`上设置`target='_self'`，这样React Router就会跳过转换到下一个状态，让浏览器处理这个链接。这样做的效果是允许浏览器直接在此路由发出请求，并在响应此请求时渲染服务器发送的`index.html`文件。
- en: Edit and delete buttons
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑和删除按钮
- en: The `GameDetail` component will show the `edit` and `delete` options only if
    the currently signed-in user is also the maker of the game being rendered.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameDetail`组件只会在当前登录用户也是正在呈现的游戏的制作者时显示`edit`和`delete`选项。'
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameDetail.js`：'
- en: '[PRE61]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: If the user ID of the signed-in user matches the maker ID in the game, the `edit`
    button linking to the edit form view and the `DeleteGame` component are shown
    in the view.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已登录用户的用户ID与游戏中的制作者ID匹配，则在视图中显示链接到编辑表单视图的`edit`按钮和`DeleteGame`组件。
- en: Deleting a game
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除游戏
- en: A signed-in user will be able to delete a specific game they made by clicking
    on the `delete` button visible to makers in the `GameDetail` component. The `GameDetail`
    component adds this `delete` option using a `DeleteGame` component.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 已登录用户将能够通过点击`GameDetail`组件中制作者可见的`delete`按钮来删除他们制作的特定游戏。`GameDetail`组件使用`DeleteGame`组件添加了这个`delete`选项。
- en: DeleteGame component
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DeleteGame组件
- en: The `DeleteGame` component added to the `GameDetail` component for each game
    takes the game details, and a `removeGame` method, as props from `GameDetail`
    that updates the parent component that `GameDetail` is a part of.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeleteGame`组件添加到每个游戏的`GameDetail`组件中，从`GameDetail`中获取游戏详情和`removeGame`方法作为props，该方法更新了`GameDetail`所属的父组件。'
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/GameDetail.js`：'
- en: '[PRE62]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This `DeleteGame` component is basically a button that, when clicked, opens
    a confirm dialog to ask the user whether they are sure they want to delete their
    game:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`DeleteGame`组件基本上是一个按钮，当点击时，会打开一个确认对话框，询问用户是否确定要删除他们的游戏：
- en: '![](assets/7d45088a-0e4c-4071-bbb9-a143748b71c8.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7d45088a-0e4c-4071-bbb9-a143748b71c8.png)'
- en: The dialog is implemented using the `Dialog` component from Material-UI.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框是使用Material-UI的`Dialog`组件实现的。
- en: '`mern-vrgame/client/game/DeleteGame.js`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/DeleteGame.js`：'
- en: '[PRE63]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Upon successful deletion, the dialog is closed and the parent component containing
    the `GameDetail` component is updated by calling the `removeGame` method passed
    in as a prop.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 成功删除后，对话框将关闭，并通过调用作为prop传递的`removeGame`方法更新包含`GameDetail`组件的父组件。
- en: '`mern-vrgame/client/game/DeleteGame.js`:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/client/game/DeleteGame.js`：'
- en: '[PRE64]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The `removeGame` method called in this `deleteGame` handler method updates the
    state of the parent, which could be the `Home` component or the user `Profile`
    component, so the deleted game is no longer shown in the view.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`deleteGame`处理程序方法中调用的`removeGame`方法更新了父组件的状态，这可能是`Home`组件或用户`Profile`组件，因此已删除的游戏不再显示在视图中。
- en: Playing the VR game
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩VR游戏
- en: 'Users on MERN VR Game will be able to open and play any of the games from within
    the application. To enable this, we will set up a route on the server that renders `index.html`,
    which was generated with React 360, in the response to a GET request at the following
    path:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: MERN VR游戏上的用户将能够在应用程序内打开和玩任何游戏。为了实现这一点，我们将在服务器上设置一个路由，以在以下路径对GET请求的响应中呈现使用React
    360生成的`index.html`：
- en: '[PRE65]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The path takes a game ID value as a `query` parameter, which is used in the
    React 360 code to fetch the game details with the read API.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 路径以`query`参数作为游戏ID值，该值在React 360代码中用于使用读取API获取游戏详情。
- en: API to render the VR game view
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API来渲染VR游戏视图
- en: The GET request to open the React 360 `index.html` page will be declared in
    `game.routes.js`, as follows.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 打开React 360 `index.html`页面的GET请求将在`game.routes.js`中声明，如下所示。
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/routes/game.routes.js`：'
- en: '[PRE66]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: This will execute the `playGame` controller method to return the `index.html`
    page in response to the incoming request.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行`playGame`控制器方法，以响应传入请求返回`index.html`页面。
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-vrgame/server/controllers/game.controller.js`：'
- en: '[PRE67]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The `playGame` controller method will send the `index.html` placed in the `/server/vr/`
    folder to the requesting client.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`playGame`控制器方法将`/server/vr/`文件夹中放置的`index.html`发送给请求的客户端。'
- en: In the browser, this will render the React 360 game code, which will fetch the
    game details from the database using the read API, and render the game world along
    with the VR objects that the user can interact with.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，这将呈现React 360游戏代码，它将使用读取API从数据库中获取游戏详情，并呈现游戏世界以及用户可以与之交互的VR对象。
- en: Updating the game code in React 360
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新React 360中的游戏代码
- en: With the game backend all set up in the MERN application, we can update the
    React 360 project code we developed in [Chapter 10](b9ae6b12-d545-4832-9d0a-9fb4a84a033e.xhtml), *Developing
    a Web-Based VR Game*, to make it render games directly from the game collection
    in the database.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN应用程序中设置了游戏后端之后，我们可以更新在[第10章](b9ae6b12-d545-4832-9d0a-9fb4a84a033e.xhtml)中开发的React
    360项目代码，使其直接从数据库中的游戏集合中呈现游戏。
- en: We will use the game ID in the link that opens the React 360 application to
    fetch game details with the read API from within the React 360 code, and then
    set the data to state so the game loads details retrieved from the database instead
    of the static sample data we used in [Chapter 10](b9ae6b12-d545-4832-9d0a-9fb4a84a033e.xhtml), *Developing
    a Web-Based VR Game*.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在打开React 360应用程序的链接中使用游戏ID，以在React 360代码内部使用读取API获取游戏详情，然后将数据设置为状态，以便游戏加载从数据库中检索的详情，而不是我们在[第10章](b9ae6b12-d545-4832-9d0a-9fb4a84a033e.xhtml)中使用的静态示例数据，*开发基于Web的VR游戏*。
- en: Once the code is updated, we can bundle it again and place the compiled files
    in the MERN application.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 代码更新后，我们可以再次对其进行打包，并将编译后的文件放在MERN应用程序中。
- en: Getting the game ID from a link
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从链接中获取游戏ID
- en: In the `index.js` file of the React 360 project folder, update the `componentDidMount`
    method to retrieve the game ID from the incoming URL and make a fetch call to
    the read game API.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在React 360项目文件夹的`index.js`文件中，更新`componentDidMount`方法，从传入的URL中检索游戏ID，并调用读取游戏API进行获取。
- en: '`/MERNVR/index.js`:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE68]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '`Location.search` gives us access to the query string in the incoming URL that
    loads `index.html`. The retrieved query string is `split` to get the game ID value
    from the `id` query parameter attached in the URL. We need this game ID value
    to fetch the game details with the read API from the server, and set it to state
    for the game and `vrObjects` values.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`Location.search`让我们可以访问加载`index.html`的传入URL中的查询字符串。检索到的查询字符串被`split`以从URL中附加的`id`查询参数中获取游戏ID值。我们需要这个游戏ID值来使用读取API从服务器获取游戏详情，并将其设置为游戏和`vrObjects`值的状态。'
- en: Fetching the game data with the read API
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用读取API获取游戏数据
- en: In the React 360 project folder, we will add an `api-game.js` file that will
    contain a read `fetch` method that makes a call to the read game API on the server
    using the provided game ID.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在React 360项目文件夹中，我们将添加一个`api-game.js`文件，其中包含一个读取`fetch`方法，用于使用提供的游戏ID调用服务器上的读取游戏API。
- en: '`/MERNVR/api-game.js`:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/api-game.js`：'
- en: '[PRE69]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: This fetch method is used in `componentDidMount` of the React 360 entry component
    to retrieve the game details.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 这个fetch方法在React 360入口组件的`componentDidMount`中用于检索游戏详情。
- en: This updated React 360 code is available in the branch named 'dynamic-game'
    on the GitHub repository at: [github.com/shamahoque/MERNVR](https://github.com/shamahoque/MERNVR).
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更新的React 360代码可以在GitHub仓库的名为'dynamic-game'的分支中找到：[github.com/shamahoque/MERNVR](https://github.com/shamahoque/MERNVR)。
- en: Bundling and integrating the updated code
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包和集成更新的代码
- en: With the React 360 code updated to fetch and render game details dynamically
    from the server, we can bundle this code using the provided bundle script and
    place the newly compiled files in the `dist` folder of the MERN VR Game project
    directory.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 将React 360代码更新为从服务器动态获取和呈现游戏详情后，我们可以使用提供的打包脚本对此代码进行打包，并将新编译的文件放在MERN VR游戏项目目录的`dist`文件夹中。
- en: 'To bundle the React 360 code from the command line, go to the React 360 `MERNVR`
    project folder and run:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行打包React 360代码，请转到React 360 `MERNVR`项目文件夹并运行：
- en: '[PRE70]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: This will generate the `client.bundle.js` and `index.bundle.js` bundle files
    in the `build/` folder with the updated React 360 code. These files, along with
    the `index.html` and `static_assets` folders, need to be added to the MERN VR
    Game application code as discussed in [Chapter 10](b9ae6b12-d545-4832-9d0a-9fb4a84a033e.xhtml), *Developing
    a Web-Based VR Game*, to integrate the latest VR game code.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`build/`文件夹中生成`client.bundle.js`和`index.bundle.js`捆绑文件，其中包含更新的React 360代码。这些文件以及`index.html`和`static_assets`文件夹需要根据[第10章](b9ae6b12-d545-4832-9d0a-9fb4a84a033e.xhtml)中讨论的内容添加到MERN
    VR游戏应用程序代码中，*开发基于Web的VR游戏*，以集成最新的VR游戏代码。
- en: With this integration completed, if we run the MERN VR Game application, and
    click the Play Game link on any of the games, it should open up the game view
    with the details of the specific game rendered in the VR scene, and allow interaction
    with the VR objects as specified in the gameplay.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了这个集成后，如果我们运行MERN VR游戏应用程序，并在任何游戏的“播放游戏”链接上点击，它应该会打开游戏视图，并显示特定游戏的详细信息，允许按照游戏玩法规定与VR对象进行交互。
- en: Summary
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we integrated the capabilities of the MERN stack technologies
    with React 360 to develop a dynamic VR game application for the web.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将MERN堆栈技术的功能与React 360集成，开发了一个用于Web的动态VR游戏应用程序。
- en: We extended the MERN skeleton application to build a working backend that stores
    VR game details. And allows us to make API calls to manipulate these details.
    We added React views that let users modify games and browse through the games
    with the option to launch and play the VR game at a specified route rendered directly
    by the server.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展了MERN骨架应用程序，以构建一个工作的后端，用于存储VR游戏的详细信息，并允许我们进行API调用来操作这些详细信息。我们添加了React视图，让用户可以修改游戏并浏览游戏，还可以选择在特定路由上启动和玩VR游戏，由服务器直接呈现。
- en: Finally, we updated the React 360 project code to pass data between the MERN
    application and the VR game view, by retrieving query parameters from the incoming
    URL, and using fetch to retrieve data with the game API.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们更新了React 360项目代码，通过从传入URL检索查询参数，并使用fetch来检索游戏API的数据，在MERN应用程序和VR游戏视图之间传递数据。
- en: This integration of the React 360 code with the MERN stack application produced
    a fully functioning and dynamic web-based VR game application, demonstrating how
    MERN stack technologies can be used and extended to create unique user experiences.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: React 360代码与MERN堆栈应用程序的集成产生了一个完全功能且动态的基于Web的VR游戏应用程序，展示了MERN堆栈技术如何被使用和扩展以创建独特的用户体验。
- en: In the next chapter, we will reflect on the MERN applications built in this
    book, discussing not just the best practices the were followed, but also the scope
    for improvements and further development.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将反思本书中构建的MERN应用程序，讨论不仅是遵循的最佳实践，还有改进和进一步发展的空间。
