["```jsx\nseller: {\n    type: Boolean,\n    default: false\n}\n```", "```jsx\n<Typography type=\"subheading\" component=\"h4\" className={classes.subheading}>\n    Seller Account\n</Typography>\n<FormControlLabel\n    control = { <Switch classes={{ checked: classes.checked, bar: classes.bar}}\n                  checked={this.state.seller}\n                  onChange={this.handleCheck}\n                /> }\n    label={this.state.seller? 'Active' : 'Inactive'}\n/>\n```", "```jsx\nhandleCheck = (event, checked) => {\n    this.setState({'seller': checked})\n} \n```", "```jsx\nclickSubmit = () => {\n    const jwt = auth.isAuthenticated() \n    const user = {\n      name: this.state.name || undefined,\n      email: this.state.email || undefined,\n      password: this.state.password || undefined,\n      seller: this.state.seller\n    }\n    update({\n      userId: this.match.params.userId\n    }, {\n      t: jwt.token\n    }, user).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        auth.updateUser(data, ()=> {\n this.setState({'userId':data._id,'redirectToProfile':true})\n })\n      }\n    })\n  }\n```", "```jsx\nupdateUser(user, cb) {\n  if(typeof window !== \"undefined\"){\n    if(sessionStorage.getItem('jwt')){\n       let auth = JSON.parse(sessionStorage.getItem('jwt'))\n       auth.user = user\n       sessionStorage.setItem('jwt', JSON.stringify(auth))\n       cb()\n     }\n  }\n}\n```", "```jsx\n{auth.isAuthenticated().user.seller && \n  (<Link to=\"/seller/shops\">\n  <Button color = {isPartActive(history, \"/seller/\")}> My Shops </Button>\n   </Link>)\n}\n```", "```jsx\nname: { \n    type: String, \n    trim: true, \n    required: 'Name is required' \n},\ndescription: { \n    type: String, \n    trim: true \n},\n```", "```jsx\nimage: { \n    data: Buffer, \n    contentType: String \n},\n```", "```jsx\nowner: {\n    type: mongoose.Schema.ObjectId, \n    ref: 'User'\n}\n```", "```jsx\nupdated: Date,\ncreated: { \n    type: Date, \n    default: Date.now \n},\n```", "```jsx\nrouter.route('/api/shops/by/:userId')\n    .post(authCtrl.requireSignin,authCtrl.hasAuthorization, \n           userCtrl.isSeller, shopCtrl.create)\n```", "```jsx\napp.use('/', shopRoutes)\n```", "```jsx\nconst isSeller = (req, res, next) => {\n  const isSeller = req.profile && req.profile.seller\n  if (!isSeller) {\n    return res.status('403').json({\n      error: \"User is not a seller\"\n    })\n  }\n  next()\n}\n```", "```jsx\nconst create = (req, res, next) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      res.status(400).json({\n        message: \"Image could not be uploaded\"\n      })\n    }\n    let shop = new Shop(fields)\n    shop.owner= req.profile\n    if(files.image){\n      shop.image.data = fs.readFileSync(files.image.path)\n      shop.image.contentType = files.image.type\n    }\n    shop.save((err, result) => {\n      if (err) {\n        return res.status(400).json({\n          error: errorHandler.getErrorMessage(err)\n        })\n      }\n      res.status(200).json(result)\n    })\n  })\n}\n```", "```jsx\nconst create = (params, credentials, shop) => {\n  return fetch('/api/shops/by/'+ params.userId, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: shop\n    })\n    .then((response) => {\n      return response.json()\n    }).catch((err) => console.log(err))\n}\n```", "```jsx\n<input accept=\"image/*\" onChange={this.handleChange('image')} \n       style={display:'none'} id=\"icon-button-file\" type=\"file\" />\n<label htmlFor=\"icon-button-file\">\n   <Button raised color=\"secondary\" component=\"span\">\n      Upload Logo <FileUpload/>\n   </Button>\n</label> \n<span> {this.state.image ? this.state.image.name : ''} </span>\n```", "```jsx\n<TextField \n    id=\"name\" \n    label=\"Name\" \n    value={this.state.name} \n    onChange={this.handleChange('name')}/> <br/>\n<TextField \n    id=\"multiline-flexible\" \n    label=\"Description\"\n    multiline rows=\"2\" \n    value={this.state.description}\n    onChange={this.handleChange('description')}/>\n```", "```jsx\nhandleChange = name => event => {\n    const value = name === 'image'\n      ? event.target.files[0]\n      : event.target.value\n    this.shopData.set(name, value)\n    this.setState({ [name]: value })\n}\n```", "```jsx\ncomponentDidMount = () => {\n  this.shopData = new FormData()\n}\n```", "```jsx\n  clickSubmit = () => {\n    const jwt = auth.isAuthenticated()\n    create({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, this.shopData).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        this.setState({error: '', redirect: true})\n      }\n    })\n }\n```", "```jsx\nif (this.state.redirect) {\n      return (<Redirect to={'/seller/shops'}/>)\n}\n```", "```jsx\n<PrivateRoute path=\"/seller/shop/new\" component={NewShop}/>\n```", "```jsx\nrouter.route('/api/shops')\n    .get(shopCtrl.list)\n```", "```jsx\nconst list = (req, res) => {\n  Shop.find((err, shops) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(shops)\n  })\n}\n```", "```jsx\nconst list = () => {\n  return fetch('/api/shops', {\n    method: 'GET',\n  }).then(response => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n```", "```jsx\ncomponentDidMount = () => {\n    this.loadShops()\n}\n```", "```jsx\nloadShops = () => {\n    list().then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        this.setState({shops: data})\n      }\n    })\n }\n```", "```jsx\n{this.state.shops.map((shop, i) => {\n  return <Link to={\"/shops/\"+shop._id} key={i}>\n          <Divider/>\n          <ListItem button>\n            <ListItemAvatar>\n            <Avatar src={'/api/shops/logo/'+shop._id+\"?\" + new \n            Date().getTime()}/>\n            </ListItemAvatar>\n            <div>\n              <Typography type=\"headline\" component=\"h2\" \n             color=\"primary\">\n                {shop.name}\n              </Typography>\n              <Typography type=\"subheading\" component=\"h4\">\n                {shop.description}\n              </Typography>\n            </div>\n           </ListItem><Divider/>\n         </Link>})}\n```", "```jsx\n <Route path=\"/shops/all\" component={Shops}/>\n```", "```jsx\nrouter.route('/api/shops/by/:userId')\n    .get(authCtrl.requireSignin, authCtrl.hasAuthorization, shopCtrl.listByOwner)\n```", "```jsx\nrouter.param('userId', userCtrl.userByID) \n```", "```jsx\nconst listByOwner = (req, res) => {\n  Shop.find({owner: req.profile._id}, (err, shops) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(shops)\n  }).populate('owner', '_id name')\n}\n```", "```jsx\nconst listByOwner = (params, credentials) => {\n  return fetch('/api/shops/by/'+params.userId, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n```", "```jsx\n<ListItemSecondaryAction>\n   <Link to={\"/seller/shop/edit/\" + shop._id}>\n       <IconButton aria-label=\"Edit\" color=\"primary\">\n             <Edit/>\n       </IconButton>\n   </Link>\n   <DeleteShop shop={shop} onRemove={this.removeShop}/>\n</ListItemSecondaryAction>\n```", "```jsx\nremoveShop = (shop) => {\n    const updatedShops = this.state.shops\n    const index = updatedShops.indexOf(shop)\n    updatedShops.splice(index, 1)\n    this.setState({shops: updatedShops})\n}\n```", "```jsx\n<PrivateRoute path=\"/seller/shops\" component={MyShops}/>\n```", "```jsx\nrouter.route('/api/shop/:shopId')\n    .get(shopCtrl.read)\nrouter.param('shopId', shopCtrl.shopByID)\n```", "```jsx\nconst shopByID = (req, res, next, id) => {\n  Shop.findById(id).populate('owner', '_id name').exec((err, shop) => {\n    if (err || !shop)\n      return res.status('400').json({\n        error: \"Shop not found\"\n      })\n    req.shop = shop\n    next()\n  })\n}\n```", "```jsx\nconst read = (req, res) => {\n  return res.json(req.shop)\n}\n```", "```jsx\nconst read = (params, credentials) => {\n  return fetch('/api/shop/' + params.shopId, {\n    method: 'GET'\n  }).then((response) => {\n    return response.json()\n  }).catch((err)  => console.log(err) )\n}\n```", "```jsx\n<Route path=\"/shops/:shopId\" component={Shop}/>\n```", "```jsx\ncomponentDidMount = () => {\n    read({\n      shopId: this.match.params.shopId\n    }).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        this.setState({shop: data})\n      }\n    })\n}\n```", "```jsx\n<CardContent>\n   <Typography type=\"headline\" component=\"h2\">\n       {this.state.shop.name}\n   </Typography><br/>\n   <Avatar src={logoUrl}/><br/>\n   <Typography type=\"subheading\" component=\"h2\">\n       {this.state.shop.description}\n   </Typography><br/>\n</CardContent>\n```", "```jsx\nconst logoUrl = this.state.shop._id\n ? `/api/shops/logo/${this.state.shop._id}?${new Date().getTime()}`\n : '/api/shops/defaultphoto'\n```", "```jsx\nrouter.route('/api/shops/:shopId')\n    .put(authCtrl.requireSignin, shopCtrl.isOwner, shopCtrl.update)\n```", "```jsx\nconst isOwner = (req, res, next) => {\n  const isOwner = req.shop && req.auth && req.shop.owner._id == \n   req.auth._id\n  if(!isOwner){\n    return res.status('403').json({\n      error: \"User is not authorized\"\n    })\n  }\n  next()\n}\n```", "```jsx\nconst update = (req, res, next) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      res.status(400).json({\n        message: \"Photo could not be uploaded\"\n      })\n    }\n    let shop = req.shop\n    shop = _.extend(shop, fields)\n    shop.updated = Date.now()\n    if(files.image){\n      shop.image.data = fs.readFileSync(files.image.path)\n      shop.image.contentType = files.image.type\n    }\n    shop.save((err) => {\n      if (err) {\n        return res.status(400).send({\n          error: errorHandler.getErrorMessage(err)\n        })\n      }\n      res.json(shop)\n    })\n  })\n}\n```", "```jsx\nconst update = (params, credentials, shop) => {\n  return fetch('/api/shops/' + params.shopId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: shop\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n```", "```jsx\n<PrivateRoute path=\"/seller/shop/edit/:shopId\" component={EditShop}/>\n```", "```jsx\nrouter.route('/api/shops/:shopId')\n    .delete(authCtrl.requireSignin, shopCtrl.isOwner, shopCtrl.remove)\n```", "```jsx\nconst remove = (req, res, next) => {\n  let shop = req.shop\n  shop.remove((err, deletedShop) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n```", "```jsx\n      })\n    }\n    res.json(deletedShop)\n  })\n}\n```", "```jsx\nconst remove = (params, credentials) => {\n  return fetch('/api/shops/' + params.shopId, {\n    method: 'DELETE',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n```", "```jsx\n<IconButton aria-label=\"Delete\" onClick={this.clickButton} color=\"secondary\">\n   <DeleteIcon/>\n</IconButton>\n<Dialog open={this.state.open} onRequestClose={this.handleRequestClose}>\n   <DialogTitle>{\"Delete \"+this.props.shop.name}</DialogTitle>\n      <DialogContent>\n         <DialogContentText>\n            Confirm to delete your shop {this.props.shop.name}.\n         </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n         <Button onClick={this.handleRequestClose} color=\"primary\">\n            Cancel\n         </Button>\n         <Button onClick={this.deleteShop} color=\"secondary\" \n          autoFocus=\"autoFocus\">\n            Confirm\n         </Button>\n      </DialogActions>\n</Dialog>\n```", "```jsx\n  deleteShop = () => {\n    const jwt = auth.isAuthenticated()\n    remove({\n      shopId: this.props.shop._id\n    }, {t: jwt.token}).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        this.setState({open: false}, () => {\n          this.props.onRemove(this.props.shop)\n        })\n      }\n    })\n }\n```", "```jsx\nname: { \n    type: String, \n    trim: true, \n    required: 'Name is required' \n},\ndescription: { \n    type: String, \n    trim: true \n},\n```", "```jsx\nimage: { \n    data: Buffer, \n    contentType: String \n},\n```", "```jsx\ncategory: { \n    type: String \n},\n```", "```jsx\nquantity: { \n    type: Number, \n    required: \"Quantity is required\" \n},\n```", "```jsx\nprice: { \n    type: Number, \n    required: \"Price is required\" \n},\n```", "```jsx\nshop: {\n    type: mongoose.Schema.ObjectId, \n    ref: 'Shop'\n}\n```", "```jsx\nupdated: Date,\ncreated: { \n    type: Date, \n    default: Date.now \n},\n```", "```jsx\nrouter.route('/api/products/by/:shopId')\n  .post(authCtrl.requireSignin, \n            shopCtrl.isOwner, \n                productCtrl.create)\nrouter.param('shopId', shopCtrl.shopByID)\n```", "```jsx\napp.use('/', productRoutes)\n```", "```jsx\nconst create = (req, res, next) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      return res.status(400).json({\n        message: \"Image could not be uploaded\"\n      })\n    }\n    let product = new Product(fields)\n    product.shop= req.shop\n    if(files.image){\n      product.image.data = fs.readFileSync(files.image.path)\n      product.image.contentType = files.image.type\n    }\n    product.save((err, result) => {\n      if (err) {\n        return res.status(400).json({\n          error: errorHandler.getErrorMessage(err)\n        })\n      }\n      res.json(result)\n    })\n  })\n}\n```", "```jsx\nconst create = (params, credentials, product) => {\n  return fetch('/api/products/by/'+ params.shopId, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: product\n    })\n    .then((response) => {\n      return response.json()\n    }).catch((err) => console.log(err))\n}\n```", "```jsx\n<PrivateRoute path=\"/seller/:shopId/products/new\" component={NewProduct}/>\n```", "```jsx\nrouter.route('/api/products/by/:shopId')\n    .get(productCtrl.listByShop)\n```", "```jsx\nconst listByShop = (req, res) => {\n  Product.find({shop: req.shop._id}, (err, products) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(products)\n  }).populate('shop', '_id name').select('-image')\n}\n```", "```jsx\nconst listByShop = (params) => {\n  return fetch('/api/products/by/'+params.shopId, {\n    method: 'GET'\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  }) \n}\n```", "```jsx\n<Products products={this.state.products} searched={false}/></Card>\n```", "```jsx\nlistByShop({\n      shopId: this.match.params.shopId\n    }).then((data)=>{\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        this.setState({products: data})\n      }\n}) \n```", "```jsx\n{this.props.products.length > 0 ?\n   (<div><GridList cellHeight={200} cols={3}>\n       {this.props.products.map((product, i) => (\n          <GridListTile key={i}>\n            <Link to={\"/product/\"+product._id}>\n              <img src={'/api/product/image/'+product._id}\n           alt= {product.name} />\n            </Link>\n            <GridListTileBar\n              title={<Link to={\"/product/\"+product._id}>{product.name}\n           </Link>}\n              subtitle={<span>$ {product.price}</span>}\n              actionIcon={<AddToCart item={tile}/>}\n             />\n          </GridListTile>\n       ))}\n    </GridList></div>) : this.props.searched && \n      (<Typography type=\"subheading\" component=\"h4\">\n                         No products found! :(</Typography>)}\n```", "```jsx\n<MyProducts shopId={this.match.params.shopId}/>\n```", "```jsx\ncomponentDidMount = () => {\n   this.loadProducts()\n}\n```", "```jsx\nloadProducts = () => {\n    listByShop({\n      shopId: this.props.shopId\n    }).then((data)=>{\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        this.setState({products: data})\n      }\n    })\n}\n```", "```jsx\n**removeProduct** = (product) => {\n    const updatedProducts = this.state.products\n    const index = updatedProducts.indexOf(product)\n    updatedProducts.splice(index, 1)\n    this.setState({shops: updatedProducts})\n}   \n...\n<DeleteProduct\n       product={product}\n       shopId={this.props.shopId}\n       **onRemove={this.removeProduct}**/> \n```", "```jsx\nrouter.route('/api/products/latest')\n      .get(productCtrl.listLatest)\n```", "```jsx\nconst listLatest = (req, res) => {\n  Product.find({}).sort('-created').limit(5).populate('shop', '_id   \n  name').exec((err, products) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(products)\n  })\n}\n```", "```jsx\nrouter.route('/api/products/related/:productId')\n              .get(productCtrl.listRelated)\nrouter.param('productId', productCtrl.productByID)\n```", "```jsx\nconst productByID = (req, res, next, id) => {\n  Product.findById(id).populate('shop', '_id name').exec((err, product) => {\n    if (err || !product)\n      return res.status('400').json({\n        error: \"Product not found\"\n      })\n    req.product = product\n    next()\n  })\n}\n```", "```jsx\nconst listRelated = (req, res) => {\n  Product.find({ \"_id\": { \"$ne\": req.product }, \n                \"category\": req.product.category}).limit(5)\n         .populate('shop', '_id name')\n         .exec((err, products) => {\n            if (err) {\n              return res.status(400).json({\n              error: errorHandler.getErrorMessage(err)\n            })\n         }\n    res.json(products)\n  })\n}\n```", "```jsx\n<Suggestions  products={this.state.suggestions} title={this.state.suggestionTitle}/>\n```", "```jsx\n<Typography type=\"title\"> {this.props.title} </Typography>\n{this.props.products.map((item, i) => { \n  return <span key={i}> \n           <Card>\n             <CardMedia image={'/api/product/image/'+item._id} \n                        title={item.name}/>\n                <CardContent>\n                   <Link to={'/product/'+item._id}>\n                     <Typography type=\"title\" component=\"h3\">\n                    {item.name}</Typography>\n                   </Link>\n                   <Link to={'/shops/'+item.shop._id}>\n                     <Typography type=\"subheading\">\n                        <Icon>shopping_basket</Icon> {item.shop.name}\n                     </Typography>\n                   </Link>\n                   <Typography component=\"p\">\n                      Added on {(new \n                     Date(item.created)).toDateString()}\n                   </Typography>\n                </CardContent>\n                <Typography type=\"subheading\" component=\"h3\">$ \n                 {item.price}</Typography>\n <Link to={'/product/'+item._id}>\n                  <IconButton color=\"secondary\" dense=\"dense\">\n                    <ViewIcon className={classes.iconButton}/>\n                  </IconButton>\n                </Link>\n                <AddToCart item={item}/>\n           </Card>\n         </span>})}\n```", "```jsx\nrouter.route('/api/products/:productId')\n      .get(productCtrl.read) \n```", "```jsx\nconst read = (req, res) => {\n  req.product.image = undefined\n  return res.json(req.product)\n}\n```", "```jsx\nconst read = (params) => {\n  return fetch('/api/products/' + params.productId, {\n    method: 'GET'\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n```", "```jsx\n<Route path=\"/product/:productId\" component={Product}/>\n```", "```jsx\n  componentDidMount = () => {\n    this.loadProduct(this.match.params.productId)\n  }\n  componentWillReceiveProps = (props) => {\n    this.loadProduct(props.match.params.productId)\n  }\n```", "```jsx\nloadProduct = (productId) => {\n    read({productId: productId}).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        this.setState({product: data})\n        listRelated({\n          productId: data._id}).then((data) => {\n          if (data.error) {\n            console.log(data.error)\n          } else {\n            this.setState({suggestions: data})\n          }\n        }) \n      }\n    }) \n}\n```", "```jsx\n<Card>\n  <CardHeader\n action={<AddToCart cartStyle={classes.addCart} \n    item= {this.state.product}/>}\n    title={this.state.product.name}\n    subheader={this.state.product.quantity > 0? 'In Stock': 'Out of   \n   Stock'}\n  />\n  <CardMedia image={imageUrl} title={this.state.product.name}/>\n  <Typography component=\"p\" type=\"subheading\">\n    {this.state.product.description}<br/>\n $ {this.state.product.price}\n    <Link to={'/shops/'+this.state.product.shop._id}>\n      <Icon>shopping_basket</Icon> {this.state.product.shop.name}\n    </Link>\n  </Typography>\n</Card>\n...\n<Suggestions  products={this.state.suggestions} title='Related Products'/>\n```", "```jsx\n<PrivateRoute path=\"/seller/:shopId/:productId/edit\" component={EditProduct}/>\n```", "```jsx\nrouter.route('/api/product/:shopId/:productId')\n      .put(authCtrl.requireSignin, shopCtrl.isOwner, productCtrl.update)\n```", "```jsx\nrouter.route('/api/product/:shopId/:productId')\n      .delete(authCtrl.requireSignin, shopCtrl.isOwner, productCtrl.remove)\n```", "```jsx\nrouter.route('/api/products/categories')\n      .get(productCtrl.listCategories)\n```", "```jsx\nconst listCategories = (req, res) => {\n  Product.distinct('category',{},(err, products) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(products)\n  })\n}\n```", "```jsx\nrouter.route('/api/products')\n      .get(productCtrl.list)\n```", "```jsx\nconst list = (req, res) => {\n  const query = {}\n  if(req.query.search)\n    query.name = {'$regex': req.query.search, '$options': \"i\"}\n  if(req.query.category && req.query.category != 'All')\n    query.category = req.query.category\n  Product.find(query, (err, products) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(products)\n  }).populate('shop', '_id name').select('-image')\n}\n```", "```jsx\nimport queryString from 'query-string'\nconst list = (params) => {\n  const query = queryString.stringify(params)\n  return fetch('/api/products?'+query, {\n    method: 'GET',\n  }).then(response => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n```", "```jsx\n<TextField id=\"select-category\" select label=\"Select category\" value={this.state.category}\n     onChange={this.handleChange('category')}\n     SelectProps={{ MenuProps: { className: classes.menu, } }}>\n  <MenuItem value=\"All\"> All </MenuItem>\n  {this.props.categories.map(option => (\n    <MenuItem key={option} value={option}> {option} </MenuItem>\n        ))}\n</TextField>\n<TextField id=\"search\" label=\"Search products\" type=\"search\" onKeyDown={this.enterKey}\n     onChange={this.handleChange('search')}\n/>\n<Button raised onClick={this.search}> Search </Button>\n<Products products={this.state.results} searched={this.state.searched}/>\n\n```", "```jsx\nsearch = () => {\n    if(this.state.search){\n      list({\n        search: this.state.search || undefined, category: \n      this.state.category\n      }).then((data) => {\n        if (data.error) {\n          console.log(data.error) \n        } else {\n          this.setState({results: data, searched:true}) \n        }\n      }) \n    }\n  }\n```"]