- en: Starting with a Simple Social Media Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从一个简单的社交媒体应用程序开始
- en: Social media is an integral part of the web these days, and many of the user-centric
    web applications we build end up requiring a social component down the line to
    drive user engagement.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 社交媒体是当今网络的一个重要组成部分，我们构建的许多以用户为中心的网络应用程序最终都需要社交组件来推动用户参与。
- en: For our first real-world MERN application, we will modify and extend the MERN
    skeleton application developed in the previous chapter to build a simple social
    media application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个真实世界MERN应用程序，我们将修改和扩展上一章开发的MERN骨架应用程序，以构建一个简单的社交媒体应用程序。
- en: 'In this chapter, we will go over the implementation of the following social
    media-flavored features:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下社交媒体风格功能的实现：
- en: User profile with a description and a photo
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有描述和照片的用户个人资料
- en: Users following each other
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户互相关注
- en: Who to follow suggestions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关注建议
- en: Posting messages with photos
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布带有照片的消息
- en: News feed with posts from followed users
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自关注用户的帖子的新闻订阅
- en: Listing posts by user
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按用户列出帖子
- en: Liking posts
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点赞帖子
- en: Commenting on posts
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评论帖子
- en: MERN Social
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MERN Social
- en: 'MERN Social is a social media application with rudimentary features inspired
    by existing social media platforms such as Facebook and Twitter. The main purpose
    of this application is to demonstrate how to use the MERN stack technologies to
    implement features that allow users to connect and interact over content.You can
    extend these implementations further, as desired, for more complex features:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Social是一个受现有社交媒体平台（如Facebook和Twitter）启发的具有基本功能的社交媒体应用程序。该应用程序的主要目的是演示如何使用MERN堆栈技术来实现允许用户在内容上连接和互动的功能。您可以根据需要进一步扩展这些实现，以实现更复杂的功能：
- en: '![](assets/677fef10-8bc2-489d-bccd-c58aa24901af.png)Code for the complete MERN
    Social application is available on GitHub in the repository at [github.com/shamahoque/mern-social](https://github.com/shamahoque/mern-social). You
    can clone this code and run the application as you go through the code explanations
    in the rest of this chapter.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/677fef10-8bc2-489d-bccd-c58aa24901af.png)完整的MERN Social应用程序代码可在GitHub的[github.com/shamahoque/mern-social](https://github.com/shamahoque/mern-social)存储库中找到。您可以在阅读本章其余部分的代码解释时，克隆此代码并运行应用程序。'
- en: 'The views needed for the MERN Social application will be developed by extending
    and modifying the existing React components in the MERN skeleton application.
    We will also add new custom components to compose views, including a Newsfeed
    view where the user can create a new post and also browse a list of all the posts
    from people they follow on MERN Social. The following component tree shows all
    the custom React components that make up the MERN Social frontend and also exposes
    the composition structure we will use to build out the views in the rest of the
    chapter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Social应用程序所需的视图将通过扩展和修改MERN骨架应用程序中的现有React组件来开发。我们还将添加新的自定义组件来组成视图，包括一个新闻订阅视图，用户可以在其中创建新帖子，并浏览MERN
    Social上关注的所有人的帖子列表。以下组件树显示了构成MERN Social前端的所有自定义React组件，还公开了我们将用于构建本章其余部分视图的组合结构：
- en: '![](assets/e782c1f5-ce25-46b7-a015-256e6c5017e8.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e782c1f5-ce25-46b7-a015-256e6c5017e8.jpg)'
- en: Updating the user profile
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户个人资料
- en: 'The skeleton application only has support for a user''s name, email, and password.
    But in MERN Social we will allow users to add a description about themselves,
    and also upload a profile photo while editing the profile after signing up:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 骨架应用程序只支持用户的姓名、电子邮件和密码。但在MERN Social中，我们将允许用户在注册后编辑个人资料时添加关于自己的描述，并上传个人资料照片：
- en: '![](assets/d14f75f1-492f-4e8f-aa1c-2d42644348bc.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d14f75f1-492f-4e8f-aa1c-2d42644348bc.png)'
- en: Adding an about description
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加关于描述
- en: 'In order to store the description entered in the `about` field by a user, we
    need to add an `about` field to the user model in `server/models/user.model.js`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储用户在“关于”字段中输入的描述，我们需要在`server/models/user.model.js`中的用户模型中添加一个“about”字段：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then, to get the description as input from the user, we add a multiline `TextField`
    to the `EditProfile` form and handle the value change the same way we did for
    the user's name input.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了从用户那里获取描述作为输入，我们在“EditProfile”表单中添加一个多行的“TextField”，并且处理值的变化方式与我们为用户的名称输入所做的方式相同。
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`：'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Finally, to show the description text added to the `about` field on the user
    profile page, we can add it to the existing profile view.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了显示添加到用户个人资料页面的“关于”字段的描述文本，我们可以将其添加到现有的个人资料视图中。
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`：'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With this modification to the user feature in the MERN skeleton code, users
    can now add and update a description about themselves to be displayed on their
    profiles.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对MERN骨架代码中用户功能的修改，用户现在可以添加和更新有关自己的描述，以便在其个人资料上显示。
- en: Uploading a profile photo
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传个人资料照片
- en: 'Allowing a user to upload a profile photo will require that we store the uploaded
    image file, and retrieve it on request to load in the view. There are multiple
    ways of implementing this upload feature considering the different file storage
    options:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 允许用户上传个人资料照片将需要我们存储上传的图像文件，并在请求时检索它以在视图中加载。考虑到不同的文件存储选项，有多种实现此上传功能的方法：
- en: '**Server filesystem**: Upload and save files to a server filesystem and store
    the URL to MongoDB'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器文件系统**：上传并将文件保存到服务器文件系统，并将URL存储到MongoDB中'
- en: '**External file storage**: Save files to external storage such as Amazon S3
    and store the URL in MongoDB'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部文件存储**：将文件保存到外部存储（如Amazon S3），并将URL存储在MongoDB中'
- en: '**Store as data in MongoDB**: Save files of a small size (less than 16 MB)
    to MongoDB as data of type Buffer'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将数据存储在MongoDB中**：将小型文件（小于16 MB）保存到MongoDB中作为缓冲区类型的数据'
- en: For MERN Social, we will assume that the photo files uploaded by the user will
    be of small sizes, and demonstrate how to store these files in MongoDB for the
    profile photo upload feature. In [Chapter 8](b24d9630-844d-4c36-b703-5acd3613ac6d.xhtml),
    *Building a Media Streaming Application*, we will discuss how to store larger
    files in MongoDB using GridFS.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于MERN Social，我们将假设用户上传的照片文件将是小型的，并演示如何将这些文件存储在MongoDB中以实现个人资料照片上传功能。在[第8章](b24d9630-844d-4c36-b703-5acd3613ac6d.xhtml)中，*构建媒体流应用程序*，我们将讨论如何使用GridFS在MongoDB中存储较大的文件。
- en: Updating the user model to store a photo in MongoDB
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户模型以在MongoDB中存储照片
- en: In order to store the uploaded profile photo directly in the database, we will
    update the user model to add a `photo` field that stores the file as `data` of
    type `Buffer`, along with its `contentType`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了直接将上传的个人资料照片存储在数据库中，我们将更新用户模型以添加一个“photo”字段，该字段将文件作为“Buffer”类型的“data”存储，并附带其“contentType”。
- en: '`mern-social/server/models/user.model.js`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/models/user.model.js`：'
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Uploading a photo from the edit form
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从编辑表单上传照片
- en: Users will be able to upload an image file from their local files when editing
    the profile. We will update the `EditProfile` component in `client/user/EditProfile.js`
    with an upload photo option, then attach the user selected file in the form data
    submitted to the server.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将能够在编辑个人资料时从其本地文件中上传图像文件。我们将在`client/user/EditProfile.js`中更新“EditProfile”组件，添加一个上传照片选项，然后将用户选择的文件附加到提交给服务器的表单数据中。
- en: File input with Material-UI
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Material-UI的文件输入
- en: We will utilize the HTML5 file input type to let the user select an image from
    their local files. The file input will return the filename in the change event
    when the user selects a file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用HTML5文件输入类型，让用户从其本地文件中选择图像。当用户选择文件时，文件输入将在更改事件中返回文件名。
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`：'
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To integrate this file `input` with Material-UI components, we apply `display:none`
    to hide the `input` element from view, then add a Material-UI button inside the
    label for this file input. This way, the view displays the Material-UI button
    instead of the HTML5 file input element.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将此文件`input`与Material-UI组件集成，我们将`display:none`应用于隐藏`input`元素，然后在此文件输入的标签中添加一个Material-UI按钮。这样，视图将显示Material-UI按钮，而不是HTML5文件输入元素。
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`：'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With the `Button`'s component prop set to `span`, the `Button` component renders
    as a `span` element inside the `label` element. A click on the `Upload` span or
    label is registered by the file input with the same ID as the label, and as a
    result, the file select dialog is opened. Once the user selects a file, we can
    set it to state in the call to `handleChange(...)` and display the name in the
    view.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Button`的组件属性设置为`span`，`Button`组件将呈现为`label`元素内的`span`元素。单击`Upload` span或label将由具有与label相同ID的文件输入注册，因此将打开文件选择对话框。用户选择文件后，我们可以在调用`handleChange(...)`中将其设置为状态，并在视图中显示名称。
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`：'
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Form submission with the file attached
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有附加文件的表单提交
- en: Uploading files to the server with a form requires a multipart form submission
    in contrast to the `stringed` object sent in the previous implementation. We will
    modify the `EditProfile` component to use the `FormData` API to store the form
    data in the format needed for encoding type `multipart/form-data`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过表单将文件上传到服务器需要一个多部分表单提交，与之前的实现中发送的`stringed`对象形成对比。我们将修改`EditProfile`组件，使用`FormData`
    API将表单数据存储在编码类型`multipart/form-data`所需的格式中。
- en: First, we need to initialize `FormData` in `componentDidMount()`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在`componentDidMount()`中初始化`FormData`。
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`：'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, we will update the input `handleChange` function to store input values
    for both the text fields and the file input in `FormData`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更新输入`handleChange`函数，以存储文本字段和文件输入的输入值在`FormData`中。
- en: '`mern-social/client/user/EditProfile.js`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/EditProfile.js`：'
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then on submit, `this.userData` is sent with the fetch API call to update the
    user. As the content type of the data sent to the server is no longer `'application/json'`,
    we also need to modify the `update` fetch method in `api-user.js` to remove `Content-Type`
    from the headers in the `fetch` call.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在提交时，`this.userData`将与fetch API调用一起发送到更新用户。由于发送到服务器的数据的内容类型不再是`'application/json'`，因此我们还需要修改`api-user.js`中的`update`
    fetch方法，以在`fetch`调用中从标头中删除`Content-Type`。
- en: '`mern-social/client/user/api-user.js`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/api-user.js`：'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now if the user chooses to upload a profile photo when editing profile, the
    server will receive a request with the file attached along with the other field
    values.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果用户选择在编辑配置文件时上传个人资料照片，服务器将收到附加文件的请求以及其他字段值。
- en: Learn more about the FormData API at [developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在[developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)上了解有关FormData
    API的更多信息。
- en: Processing a request containing a file upload
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理包含文件上传的请求
- en: 'On the server, to process the request to the update API that may now contain
    a file, we will use the `formidable` npm module:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上，为了处理可能包含文件的更新API的请求，我们将使用`formidable` npm模块：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Formidable will allow us to read the `multipart` form data, giving access to
    the fields and the file, if any. If there is a file, `formidable` will store it
    temporarily in the filesystem. We will read it from the filesystem, using the
    `fs` module to retrieve the file type and data, and store it to the photo field
    in the user model. The `formidable` code will go in the `update` controller in `user.controller.js` as
    follows.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Formidable将允许我们读取`multipart`表单数据，从而访问字段和文件（如果有）。如果有文件，`formidable`将在文件系统中临时存储它。我们将从文件系统中读取它，使用`fs`模块检索文件类型和数据，并将其存储到用户模型中的照片字段中。`formidable`代码将放在`user.controller.js`中的`update`控制器中。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`：'
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will store the uploaded file as data in the database. Next, we will set
    up file retrieval to be able to access and display the photo uploaded by the user
    in the frontend views.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把上传的文件存储为数据库中的数据。接下来，我们将设置文件检索以能够在前端视图中访问和显示用户上传的照片。
- en: Retrieving a profile photo
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索个人资料照片
- en: The simplest option to retrieve the file stored in the database and show it
    in a view is to set up a route that will fetch the data and return it as an image
    file to the requesting client.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库中检索文件并在视图中显示的最简单选项是设置一个路由，该路由将获取数据并将其作为图像文件返回给请求的客户端。
- en: Profile photo URL
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 个人资料照片URL
- en: We will set up a route to the photo stored in the database for each user, and
    also add another route that will fetch a default photo if the given user has not
    uploaded a profile photo.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为每个用户在数据库中存储的照片设置一个路由，并添加另一个路由，如果给定用户没有上传个人资料照片，则将获取默认照片。
- en: '`mern-social/server/routes/user.routes.js`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/user.routes.js`：'
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We will look for the photo in the `photo` controller method and if found, send
    it in the response to the request at the photo route, otherwise we call `next()`
    to return the default photo.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`photo`控制器方法中查找照片，如果找到，就将其发送到照片路由的请求中作为响应，否则我们调用`next()`来返回默认照片。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`：'
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The default photo is retrieved and sent from the server's file system.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认照片是从服务器的文件系统中检索并发送的。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`：'
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Showing a photo in a view
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中显示照片
- en: With the photo URL routes set up to retrieve the photo, we can simply use these
    in the `img` element's `src` attribute to load the photo in the view. For example,
    in the `Profile` component, we get the user ID from state and use it to construct
    the photo URL.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 设置照片URL路由以检索照片后，我们可以简单地在`img`元素的`src`属性中使用这些路由来加载视图中的照片。例如，在`Profile`组件中，我们从状态中获取用户ID并使用它来构建照片URL。
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`：'
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To ensure the `img` element reloads in the `Profile` view after the photo is
    updated in the edit, we also add a time value to the photo URL to bypass the browser's
    default image caching behavior.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保在编辑中更新照片后`Profile`视图中的`img`元素重新加载，我们还向照片URL添加了一个时间值，以绕过浏览器的默认图像缓存行为。
- en: 'Then, we can set the `photoUrl` to the Material-UI `Avatar` component, which
    renders the linked image in the view:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将`photoUrl`设置为Material-UI的`Avatar`组件，该组件在视图中呈现链接的图像：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The updated user profile in MERN Social can now display a user uploaded profile
    photo and an `about` description:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Social中更新的用户个人资料现在可以显示用户上传的个人资料照片和`about`描述：
- en: '![](assets/8e568b24-3f3c-4d32-aabb-f2eaabbeca3a.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/8e568b24-3f3c-4d32-aabb-f2eaabbeca3a.png)
- en: Following users in MERN Social
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MERN Social中关注用户
- en: In MERN Social, the users will be able to follow each other. Each user will
    have a list of followers and a list of people they follow. Users will also be
    able to see a list of users they can follow; in other words, the users in MERN
    Social they are not already following.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Social中，用户将能够互相关注。每个用户将拥有一个关注者列表和一个他们关注的人的列表。用户还将能够看到他们可以关注的用户列表；换句话说，MERN
    Social中他们尚未关注的用户。
- en: Follow and unfollow
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关注和取消关注
- en: In order to keep track of which user is following which other users, we will
    have to maintain two lists for each user. When one user follows or unfollows another
    user, we will update one's `following` list and the other's `followers` list.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟踪哪个用户正在关注哪些其他用户，我们将不得不为每个用户维护两个列表。当一个用户关注或取消关注另一个用户时，我们将更新一个用户的`following`列表和另一个用户的`followers`列表。
- en: Updating the user model
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户模型
- en: To store the list of `following` and `followers` in the database, we will update
    the user model with two arrays of user references.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在数据库中存储`following`和`followers`列表，我们将使用两个用户引用数组更新用户模型。
- en: '`mern-social/server/models/user.model.js`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/models/user.model.js`:'
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These references will point to the users in the collection being followed by
    or following the given user.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这些引用将指向正在被关注或正在关注给定用户的集合中的用户。
- en: Updating the userByID controller method
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新`userByID`控制器方法
- en: When a single user is retrieved from the backend, we want the `user` object
    to include the names and IDs of the users referenced in the `following` and `followers`
    arrays. To retrieve these details, we need to update the `userByID` controller
    method to populate the returned user object.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当从后端检索到单个用户时，我们希望`user`对象包括`following`和`followers`数组中引用的用户的名称和ID。为了检索这些详细信息，我们需要更新`userByID`控制器方法以填充返回的用户对象。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We use the Mongoose `populate` method to specify that the user object returned
    from the query should contain the name and ID of the users referenced in the `following`
    and `followers` lists. This will give us the names and IDs of the user references
    in the `followers` and `following` lists when we fetch the user with the read
    API call.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Mongoose的`populate`方法来指定从查询返回的用户对象应包含`following`和`followers`列表中引用的用户的名称和ID。这将在我们使用读取API调用获取用户时，给我们`followers`和`following`列表中的用户引用的名称和ID。
- en: API to follow and unfollow
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关注和取消关注的API
- en: When a user follows or unfollows another user from the view, both users' records
    in the database will be updated in response to the `follow` or `unfollow` requests.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户从视图中关注或取消关注另一个用户时，数据库中的两个用户记录将响应`follow`或`unfollow`请求而更新。
- en: We will set up `follow` and `unfollow` routes in `user.routes.js` as follows.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`user.routes.js`中设置`follow`和`unfollow`路由如下。
- en: '`mern-social/server/routes/user.routes.js`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/user.routes.js`:'
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `addFollowing` controller method in the user controller will update the
    `'following'` array for the current user by pushing the followed user's reference
    into the array.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 用户控制器中的`addFollowing`控制器方法将通过将被关注用户的引用推入数组来更新当前用户的`'following'`数组。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: On successful update of the following array, the `addFollower` method is executed
    to add the current user's reference to the followed user's `'followers'` array.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`following`数组成功更新后，将执行`addFollower`方法，将当前用户的引用添加到被关注用户的`'followers'`数组中。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: For unfollowing, the implementation is similar. The `removeFollowing` and `removeFollower`
    controller methods update the respective `'following'` and `'followers'` arrays
    by removing the user references with `$pull` instead of `$push`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于取消关注，实现方式类似。`removeFollowing`和`removeFollower`控制器方法通过使用`$pull`而不是`$push`从相应的`'following'`和`'followers'`数组中删除用户引用。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Accessing follow and unfollow APIs in views
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中访问关注和取消关注的API
- en: In order to access these API calls in the views, we will update `api-user.js`
    with `follow` and `unfollow` fetch methods. The `follow` and `unfollow` methods
    will be similar, making calls to the respective routes with the current user's
    ID and credentials, and the followed or unfollowed user's ID. The `follow` method
    will be as follows.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在视图中访问这些API调用，我们将使用`api-user.js`更新`follow`和`unfollow` fetch方法。`follow`和`unfollow`方法将类似，使用当前用户的ID和凭据以及被关注或取消关注的用户的ID调用相应的路由。`follow`方法将如下所示。
- en: '`mern-social/client/user/api-user.js`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/api-user.js`:'
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `unfollow` fetch method is similar, it takes the unfollowed user's ID and
    calls the `unfollow` API.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`unfollow`的fetch方法类似，它获取取消关注的用户ID，并调用`unfollow` API。'
- en: '`mern-social/client/user/api-user.js`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/api-user.js`:'
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Follow and unfollow buttons
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关注和取消关注按钮
- en: 'The button that will allow a user to `follow` or `unfollow` another user will
    appear conditionally depending on whether the user is already followed or not
    by the current user:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 该按钮将允许用户有条件地关注或取消关注另一个用户，具体取决于当前用户是否已关注该用户：
- en: '![](assets/57d66ca2-131d-4717-8bae-2c74b263fbb7.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/57d66ca2-131d-4717-8bae-2c74b263fbb7.png)'
- en: FollowProfileButton component
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FollowProfileButton组件
- en: We will create a separate component for the follow button called `FollowProfileButton`,
    which will be added to the `Profile` component. This component will show either
    `Follow` or `Unfollow` buttons depending on whether the current user is already
    a follower of the user in the profile. The `FollowProfileButton` component will
    be as follows.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为关注按钮创建一个单独的组件，称为`FollowProfileButton`，它将添加到`Profile`组件中。该组件将根据当前用户是否已关注个人资料中的用户来显示`Follow`或`Unfollow`按钮。`FollowProfileButton`组件将如下所示。
- en: '`mern-social/client/user/FollowProfileButton.js`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/FollowProfileButton.js`:'
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When the `FollowProfileButton` is added to the profile, the `''following''` value
    will be determined and sent from the `Profile` component as a prop to the `FollowProfileButton`,
    along with the click handler that takes the specific `follow` or `unfollow` fetch
    API to be called as a parameter:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当`FollowProfileButton`添加到个人资料时，`'following'`值将从`Profile`组件确定并作为prop发送到`FollowProfileButton`，同时还会发送点击处理程序，该处理程序将特定的`follow`或`unfollow`
    fetch API作为参数调用：
- en: '![](assets/4854d95a-4432-44cf-9139-809cafb413dd.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4854d95a-4432-44cf-9139-809cafb413dd.png)'
- en: Update Profile component
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新个人资料组件
- en: 'In the `Profile` view, the `FollowProfileButton` should only be shown when
    the user views the profile of other users, so we need to modify the condition
    for showing `Edit` and `Delete` buttons when viewing a profile as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Profile`视图中，只有在用户查看其他用户的个人资料时才应显示`FollowProfileButton`，因此我们需要修改在查看个人资料时显示`Edit`和`Delete`按钮的条件如下：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the `Profile` component, after the user data is successfully fetched on `componentDidMount`,
    we will check if the signed in user is already following the user in the profile
    or not, and set the `following` value to the state.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Profile`组件中，在`componentDidMount`成功获取用户数据后，我们将检查已登录用户是否已关注个人资料中的用户，并将`following`值设置为状态。
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`:'
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To determine the value to set in `following`, the `checkFollow` method will
    check if the signed-in user exists in the fetched user's followers list, then
    return the `match` if found, otherwise return `undefined` if a match is not found.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定在`following`中设置的值，`checkFollow`方法将检查登录用户是否存在于获取的用户的关注者列表中，如果找到，则返回`match`，否则如果找不到匹配，则返回`undefined`。
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`：'
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `Profile` component will also define the click handler for `FollowProfileButton`,
    so the state of the `Profile` can be updated when the follow or unfollow action
    completes.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`Profile`组件还将为`FollowProfileButton`定义点击处理程序，因此当关注或取消关注操作完成时，可以更新`Profile`的状态。'
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`：'
- en: '[PRE29]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The click handler definition takes the fetch API call as a parameter and is
    passed as a prop to the `FollowProfileButton` along with the `following` value
    when it is added to the `Profile` view.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 点击处理程序定义将获取API调用作为参数，并在将其添加到`Profile`视图时，将其与`following`值一起作为prop传递给`FollowProfileButton`。
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`：'
- en: '[PRE30]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Listing followings and followers
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出关注者和粉丝
- en: 'In each user''s profile, we will add a list of their followers and the people
    they are following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个用户的个人资料中，我们将添加一个关注者列表和他们正在关注的人的列表：
- en: '![](assets/5efeb7d7-ccdc-418b-942f-790be8a838b3.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5efeb7d7-ccdc-418b-942f-790be8a838b3.png)'
- en: The details of the users referenced in the `following` and `followers` lists
    are already in the user object fetched using the `read` API when the profile is
    loaded. In order to render these separate lists of followers and followings, we
    will create a new component called `FollowGrid`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`read` API加载个人资料时，`following`和`followers`列表中引用的用户的详细信息已经在用户对象中。为了呈现这些单独的关注者和正在关注的人列表，我们将创建一个名为`FollowGrid`的新组件。
- en: FollowGrid component
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FollowGrid组件
- en: The `FollowGrid` component will take a list of users as props, display the avatars
    of the users with their names, and link to each user's profile. We can add this
    component as desired to the `Profile` view to display `followings` or `followers`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`FollowGrid`组件将接受用户列表作为props，显示用户的头像和名称，并链接到每个用户的个人资料。我们可以根据需要将此组件添加到`Profile`视图中，以显示`followings`或`followers`。'
- en: '`mern-social/client/user/FollowGrid.js`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/FollowGrid.js`：'
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To add the `FollowGrid` component to the `Profile` view, we can place it as
    desired in the view and pass the list of `followers` or `followings` as the `people`
    prop:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`FollowGrid`组件添加到`Profile`视图中，我们可以根据需要将其放置在视图中，并将`followers`或`followings`列表作为`people`
    prop传递：
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As pictured previously, in MERN Social we chose to display the `FollowGrid`
    components in tabs within the `Profile` component. We created a separate `ProfileTabs`
    component using Material-UI tab components and added that to the `Profile` component.
    This `ProfileTabs` component contains the two `FollowGrid` components with following
    and followers lists, along with a `PostList` component that shows the posts by
    the user. This will be discussed later in the chapter.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在MERN社交中，我们选择在`Profile`组件内的选项卡中显示`FollowGrid`组件。我们使用Material-UI选项卡组件创建了一个单独的`ProfileTabs`组件，并将其添加到`Profile`组件中。这个`ProfileTabs`组件包含两个`FollowGrid`组件，其中包含关注者和粉丝列表，以及一个`PostList`组件，显示用户的帖子。这将在本章后面讨论。
- en: Finding people to follow
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找要关注的人
- en: 'The Who to follow feature will show the signed in user a list of people in
    MERN Social that they are not currently following, giving the option to follow
    them or view their profiles:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: “谁来关注”功能将向登录用户显示MERN社交中他们当前未关注的人的列表，提供关注他们或查看他们的个人资料的选项：
- en: '![](assets/efd564df-5075-4d35-abfe-a7eff7add251.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/efd564df-5075-4d35-abfe-a7eff7add251.png)'
- en: Fetching users not followed
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取未关注的用户
- en: We will implement a new API on the server to query the database and fetch this
    list of users the current user is not following.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在服务器上实现一个新的API来查询数据库并获取当前用户未关注的用户列表。
- en: '`mern-social/server/routes/user.routes.js`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/user.routes.js`:'
- en: '[PRE33]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the `findPeople` controller method, we will query the User collection in
    the database to find the users not in the current user's `following` list.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在`findPeople`控制器方法中，我们将查询数据库中的用户集合，以查找当前用户`following`列表中没有的用户。
- en: '`mern-social/server/controllers/user.controller.js`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/user.controller.js`:'
- en: '[PRE34]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: To use this list of users in the frontend, we will update the `api-user.js`
    to add a fetch for this find people API.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端使用这个用户列表，我们将更新`api-user.js`以添加对这个查找用户API的获取。
- en: '`mern-social/client/user/api-user.js`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/api-user.js`:'
- en: '[PRE35]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: FindPeople component
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FindPeople组件
- en: To display the *who to follow* feature, we will create a component called `FindPeople`,
    which can be added to any of the views or rendered on its own. In this component,
    we will first fetch the users not followed by calling the `findPeople` method
    in `componentDidMount`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示*谁来关注*功能，我们将创建一个名为`FindPeople`的组件，可以添加到任何视图中或单独呈现。在这个组件中，我们将首先通过调用`componentDidMount`中的`findPeople`方法来获取未关注的用户。
- en: '`mern-social/client/user/FindPeople.js`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/FindPeople.js`:'
- en: '[PRE36]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The fetched list of users will be iterated over and rendered in a Material-UI `List`
    component, with each list item containing the user's avatar, name, a link to the
    profile page, and a `Follow` button.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 获取的用户列表将被迭代并呈现在Material-UI的`List`组件中，每个列表项包含用户的头像、名称、到个人资料页面的链接和`Follow`按钮。
- en: '`mern-social/client/user/FindPeople.js`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/FindPeople.js`:'
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Clicking the `Follow` button will make a call to the follow API, and update
    the list of users to follow by splicing out the newly followed user.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`Follow`按钮将调用关注API，并通过删除新关注的用户来更新要关注的用户列表。
- en: '`mern-social/client/user/FindPeople.js`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/FindPeople.js`:'
- en: '[PRE38]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We will also add a Material-UI `Snackbar` component that will open temporarily
    when the user is successfully followed, to tell the user that they started following
    this new user.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将添加一个Material-UI的`Snackbar`组件，当用户成功关注时会临时打开，告诉用户他们开始关注这个新用户。
- en: '`mern-social/client/user/FindPeople.js`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/FindPeople.js`:'
- en: '[PRE39]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `Snackbar` will display the message in the bottom-right corner of the page,
    and auto-hide after the set duration:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`Snackbar`将在页面的右下角显示消息，并在设置的持续时间后自动隐藏：'
- en: '![](assets/104ce6be-98c8-49ef-a7dd-0864653e8fbd.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/104ce6be-98c8-49ef-a7dd-0864653e8fbd.png)'
- en: MERN Social users can now follow each other, view lists of followings and followers
    for each user, and also see a list of people they can follow. The main purpose
    of following another user in MERN Social is to track their social posts, so next
    we will look at the implementation of the post feature.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Social用户现在可以互相关注，查看每个用户的关注和粉丝列表，还可以看到他们可以关注的人的列表。在MERN Social中关注另一个用户的主要目的是跟踪他们的社交帖子，所以下一步我们将看一下帖子功能的实现。
- en: Posts
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帖子
- en: 'The posting feature in MERN Social will allow users to share content on the
    MERN Social application platform and also interact with each other over the content
    by commenting on or liking a post:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Social中的发布功能将允许用户在MERN Social应用平台上分享内容，并通过评论或点赞帖子与其他用户互动：
- en: '![](assets/fcf7142d-c1e5-42a2-9201-6718b4ac6735.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fcf7142d-c1e5-42a2-9201-6718b4ac6735.png)'
- en: Mongoose schema model for Post
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于Post的Mongoose模式模型
- en: 'To store each post, we will first define the Mongoose Schema in `server/models/post.model.js`.
    The Post schema will store a post''s text content, a photo, a reference to the
    user who posted, time of creation, likes on the post from users, and comments
    on the post by users:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储每个帖子，我们将首先在`server/models/post.model.js`中定义Mongoose模式。帖子模式将存储帖子的文本内容、照片、发布者的引用、创建时间、用户对帖子的喜欢以及用户对帖子的评论：
- en: '**Post text**: The `text` will be a required field to be provided by the user
    on new post creation from the view:'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帖子文本**：`文本`将是用户在新帖子创建视图中提供的必填字段：'
- en: '[PRE40]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '**Post photo**: The `photo` will be uploaded from the user''s local files during
    post creation, and stored in MongoDB similar to the user profile photo upload
    feature. The photo will be optional for each post:'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帖子照片**：`照片`将在帖子创建时从用户的本地文件上传，并类似于用户个人资料照片上传功能存储在MongoDB中。每个帖子的照片将是可选的：'
- en: '[PRE41]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**Post by**: Creating a post will require a user to be signed in first, so
    we can store a reference to the user who is posting in the `postedBy` field:'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布者**：创建帖子将需要用户首先登录，因此我们可以在`postedBy`字段中存储发布帖子的用户的引用：'
- en: '[PRE42]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '**Created time**: The `created` time will be generated automatically at the
    time of post creation in the database:'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建时间**：`创建`时间将在帖子创建时自动生成在数据库中：'
- en: '[PRE43]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '**Likes**: References to the users who liked a specific post will be stored
    in a `likes` array:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**喜欢**：喜欢特定帖子的用户的引用将存储在`likes`数组中：'
- en: '[PRE44]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**Comments**: Each comment on a post will contain text content, the time of
    creation, and a reference to the user who posted the comment. Each post will have
    an array of `comments`:'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评论**：每条帖子上的评论将包含文本内容、创建时间和发布评论的用户的引用。每个帖子将有一个`comments`数组：'
- en: '[PRE45]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This schema definition will enable us to implement all the post-related features
    in MERN Social.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模式定义将使我们能够在MERN Social中实现所有与帖子相关的功能。
- en: Newsfeed component
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新闻订阅组件
- en: 'Before delving further into the implementations of the posting features in
    MERN Social, we will look at the composition of the Newsfeed view to showcase
    a basic example of how to design nested UI components that share state. The `Newsfeed`
    component will contain two main child components—a new post form and a list of
    posts from followed users:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步深入MERN Social中的发布功能实现之前，我们将查看Newsfeed视图的组成，以展示如何设计共享状态的嵌套UI组件的基本示例。`Newsfeed`组件将包含两个主要的子组件——一个新帖子表单和来自关注用户的帖子列表：
- en: '![](assets/478879e6-50a8-4123-9269-1c037eee5f2e.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/478879e6-50a8-4123-9269-1c037eee5f2e.jpg)'
- en: The basic structure of the `Newsfeed` component will be as follows, with the
    `NewPost` component and the `PostList` component.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`Newsfeed`组件的基本结构将如下所示，包括`NewPost`组件和`PostList`组件。'
- en: '`mern-social/client/post/Newsfeed.js`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Newsfeed.js`：'
- en: '[PRE46]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: As the parent component, `Newsfeed` will control the state of the posts' data
    rendered in the child components. It will provide a way to update the state of
    posts across the components when the post data is modified within the child components,
    such as the addition of a new post in the `NewPost` component, or removal of a
    post from the `PostList` component.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 作为父组件，`Newsfeed`将控制在子组件中呈现的帖子数据的状态。当在子组件中修改帖子数据时，例如在`NewPost`组件中添加新帖子或在`PostList`组件中删除帖子时，它将提供一种更新跨组件的帖子状态的方法。
- en: Here specifically, a `loadPosts` function in `Newsfeed` makes the call to the
    server initially to fetch a list of posts from people the currently signed in
    user follows and sets it to the state to be rendered in the `PostList` component.
    The `Newsfeed` component provides the `addPost` and `removePost` functions to
    `NewPost` and `PostList`, which will be used when a new post is created or an
    existing post is deleted to update the list of posts in `Newsfeed`'s state and
    ultimately reflect it in the `PostList`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Newsfeed中的“loadPosts”函数首先调用服务器以从当前登录用户关注的人那里获取帖子列表，并将其设置为状态以在“PostList”组件中呈现。
    “Newsfeed”组件提供了“addPost”和“removePost”函数给“NewPost”和“PostList”，当创建新帖子或删除现有帖子时，将用于更新“Newsfeed”状态中的帖子列表，并最终在“PostList”中反映出来。
- en: The `addPost` function defined in the `Newsfeed` component will take the new
    post created in the `NewPost` component and add it to the posts in the state.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Newsfeed”组件中定义的“addPost”函数将获取“NewPost”组件中创建的新帖子，并将其添加到状态中的帖子中。
- en: '`mern-social/client/post/Newsfeed.js`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Newsfeed.js`：'
- en: '[PRE47]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `removePost` function defined in the `Newsfeed` component will take the
    deleted post from the `Post` component in `PostList`, and remove it from the posts
    in the state.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Newsfeed”组件中定义的“removePost”函数将从“PostList”中的“Post”组件中获取已删除的帖子，并从状态中删除它。
- en: '`mern-social/client/post/Newsfeed.js`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Newsfeed.js`：'
- en: '[PRE48]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: As the posts are updated in `Newsfeed`'s state this way, the `PostList` will
    render the changed list of posts to the viewer. This mechanism of relaying state
    updates from parent to child components and back will be applied across other
    features, such as comment updates in a post and also when a `PostList` is rendered
    for an individual user in the `Profile` component.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 由于帖子是通过这种方式在“Newsfeed”的状态中更新的，“PostList”将向观众呈现已更改的帖子列表。这种从父组件到子组件再到父组件的状态更新机制将应用于其他功能，例如帖子中的评论更新，以及在“Profile”组件中为单个用户呈现“PostList”时。
- en: Listing posts
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出帖子
- en: In MERN Social, we will list posts in the `Newsfeed` and in the profile of each
    user. We will create a generic `PostList` component that will render any list
    of posts provided to it, and we can use it in both the `Newsfeed` and the `Profile`
    component.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Social中，我们将在“Newsfeed”和每个用户的个人资料中列出帖子。我们将创建一个通用的“PostList”组件，该组件将呈现提供给它的任何帖子列表，并且我们可以在“Newsfeed”和“Profile”组件中都使用它。
- en: '`mern-social/client/post/PostList.js`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/PostList.js`：'
- en: '[PRE49]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The `PostList` component will iterate through the list of posts passed to it
    as props from the `Newsfeed` or the `Profile`, and pass the data of each post
    to a `Post` component that will render details of the post. The `PostList` will
    also pass the `removeUpdate` function that was sent as a prop from the parent
    component to the `Post` component, so the state can be updated when a single post
    is deleted.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: “PostList”组件将遍历从“Newsfeed”或“Profile”传递给它的帖子列表，并将每个帖子的数据传递给“Post”组件，该组件将呈现帖子的详细信息。
    “PostList”还将传递从父组件作为prop发送到“Post”组件的“removeUpdate”函数，以便在删除单个帖子时更新状态。
- en: List in Newsfeed
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Newsfeed中列出
- en: We will set up an API on the server that queries the Post collection, and returns
    posts from the people a specified user is following. So these posts may be displayed
    in the `PostList` in `Newsfeed`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在服务器上设置一个API，该API查询帖子集合，并从指定用户关注的人那里返回帖子。因此，这些帖子可能会在“Newsfeed”的“PostList”中显示。
- en: Newsfeed API for posts
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帖子的Newsfeed API
- en: 'This Newsfeed-specific API will receive a request at the following route to
    be defined in `server/routes/post.routes.js`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定于Newsfeed的API将在以下路由接收请求，该路由将在“server/routes/post.routes.js”中定义：
- en: '[PRE50]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We are using the `:userID` param in this route to specify the currently signed-in
    user, and we will utilize the `userByID` controller method in the `user.controller`
    to fetch the user details as we did before and append them to the request object
    that is accessed in the `listNewsFeed` post controller method. So, also add the
    following to the `mern-social/server/routes/post.routes.js`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这条路线中使用`:userID`参数来指定当前登录的用户，并且我们将利用`user.controller`中的`userByID`控制器方法来获取用户详细信息，就像之前一样，并将它们附加到在`listNewsFeed`中访问的请求对象中。因此，还要将以下内容添加到`mern-social/server/routes/post.routes.js`中：
- en: '[PRE51]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The `post.routes.js` file will be very similar to the `user.routes.js` file,
    and to load these new routes in the Express app we need to mount the post routes
    in `express.js` like we did for the auth and user routes.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`post.routes.js`文件将与`user.routes.js`文件非常相似，为了在Express应用程序中加载这些新路线，我们需要像对auth和user路线一样在`express.js`中挂载post路线。'
- en: '`mern-social/server/express.js`:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/express.js`：'
- en: '[PRE52]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The `listNewsFeed` controller method in `post.controller.js` will query the
    Post collection in the database to get the matching posts.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`post.controller.js`中的`listNewsFeed`控制器方法将查询数据库中的Post集合以获取匹配的帖子。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`：'
- en: '[PRE53]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In the query to the Post collection, we find all the posts that have `postedBy`
    user references that match the current user's followings and the current user.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在对Post集合的查询中，我们找到所有具有与当前用户的关注和当前用户匹配的`postedBy`用户引用的帖子。
- en: Fetching Newsfeed posts in the view
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取Newsfeed帖子
- en: 'To use this API in the frontend, we will add a fetch method to `client/post/api-post.js`:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端使用此API，我们将在`client/post/api-post.js`中添加一个获取方法：
- en: '[PRE54]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This is the fetch method that will load the posts rendered in the `PostList`,
    which is added as a child component to the `Newsfeed` component. So this fetch
    needs to be called in the `loadPosts` method in the `Newsfeed` component.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将加载在`PostList`中呈现的帖子的获取方法，它作为`Newsfeed`组件的子组件添加。因此，需要在`Newsfeed`组件的`loadPosts`方法中调用此获取方法。
- en: '`mern-social/client/post/Newsfeed.js`:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Newsfeed.js`：'
- en: '[PRE55]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The `loadPosts` method will be called in the `componentDidMount` of the `Newsfeed`
    component to initially load the state with posts that are rendered in the `PostList`
    component:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadPosts`方法将在`Newsfeed`组件的`componentDidMount`中调用，以最初加载呈现在`PostList`组件中的帖子的状态：'
- en: '![](assets/c75625f8-f71b-4493-b7f1-421d636be764.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/c75625f8-f71b-4493-b7f1-421d636be764.png)
- en: Listing by user in Profile
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Profile中按用户列出
- en: The implementation for getting a list of posts created by a specific user and
    showing it in the `Profile` will be similar to the discussion in the previous
    section. We will set up an API on the server that queries the Post collection,
    and returns posts from a specific user to the `Profile` view.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 获取特定用户创建的帖子列表并在`Profile`中显示的实现将类似于前一部分中的讨论。我们将在服务器上设置一个API，该API查询Post集合，并将特定用户的帖子返回到`Profile`视图。
- en: API for posts by a user
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户的帖子API
- en: 'The route that will receive a query to return posts by a specific user will
    be added in `mern-social/server/routes/post.routes.js`:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 将接收查询以返回特定用户发布的帖子的路线添加到`mern-social/server/routes/post.routes.js`中：
- en: '[PRE56]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The `listByUser` controller method in `post.controller.js` will query the Post
    collection to find posts that have a matching reference in the `postedBy` field
    to the user specified in the `userId` param in the route.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`post.controller.js`中的`listByUser`控制器方法将查询Post集合，以查找在路线中指定的用户的`userId`参数与`postedBy`字段中的匹配引用的帖子。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`：'
- en: '[PRE57]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Fetching user posts in the view
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取用户帖子
- en: 'To use this API in the frontend, we will add a fetch method to `mern-social/client/post/api-post.js`:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端使用此API，我们将在`mern-social/client/post/api-post.js`中添加一个获取方法：
- en: '[PRE58]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This `fetch` method will load the required posts for the `PostList` that is
    added to the `Profile` view. We will update the `Profile` component to define
    a `loadPosts` method that calls the `listByUser` fetch method.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`fetch`方法将加载添加到`Profile`视图的`PostList`所需的帖子。我们将更新`Profile`组件以定义一个`loadPosts`方法，该方法调用`listByUser`获取方法。
- en: '`mern-social/client/user/Profile.js`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/user/Profile.js`：'
- en: '[PRE59]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'In the `Profile` component, the `loadPosts` method will be called with the
    user ID of the user whose profile is being loaded, after the user details have
    been fetched from the server in the `init()` function. The posts loaded for the
    specific user are set to state and rendered in the `PostList` component that is
    added to the `Profile` component. The `Profile` component also provides a `removePost`
    function, similar to the `Newsfeed` component, as a prop to the `PostList` component,
    so the list of posts can be updated if a post is removed:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Profile`组件中，当从服务器中的`init()`函数中获取用户详细信息后，将调用`loadPosts`方法，并传入正在加载的用户的用户ID。为特定用户加载的帖子将设置为状态，并在添加到`Profile`组件的`PostList`组件中呈现。`Profile`组件还提供了一个`removePost`函数，类似于`Newsfeed`组件，作为`PostList`组件的属性，以便在删除帖子时更新帖子列表。
- en: '![](assets/2a98e73d-8d6a-4305-a3ec-d5060cb8db04.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2a98e73d-8d6a-4305-a3ec-d5060cb8db04.png)'
- en: Creating a new post
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新帖子
- en: The create new post feature will allow a signed in user to post a message and
    optionally add an image to the post by uploading it from their local files.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新帖子功能将允许已登录用户发布消息，并可选择从本地文件上传图片到帖子中。
- en: Creating post API
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建帖子API
- en: 'On the server, we will define an API to create the post in the database, starting
    with declaring a route to accept a POST request at `/api/posts/new/:userId` in `mern-social/server/routes/post.routes.js`:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上，我们将定义一个API来在数据库中创建帖子，首先声明一个路由，以接受`/api/posts/new/:userId`的POST请求，位于`mern-social/server/routes/post.routes.js`中。
- en: '[PRE60]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The `create` method in the `post.controller.js` will use the `formidable` module
    to access the fields and the image file, if any, as we did for the user profile
    photo update.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`post.controller.js`中的`create`方法将使用`formidable`模块来访问字段和图像文件（如果有），就像我们为用户配置文件照片更新一样。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`：'
- en: '[PRE61]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Retrieving a post's photo
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索帖子的照片
- en: To retrieve the uploaded photo, we will also set up a `photo` route URL that
    returns the photo with a specific post.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索上传的照片，我们还将设置一个`photo`路由URL，以返回具有特定帖子的照片。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`：'
- en: '[PRE62]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The `photo` controller will return the `photo` data stored in MongoDB as an
    image file.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`photo`控制器将返回存储在MongoDB中的`photo`数据作为图像文件。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`：'
- en: '[PRE63]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: As the photo route uses the `:postID` parameter, we will set up a `postByID`
    controller method to fetch the specific post by its ID before returning to the
    photo request. We will add the param call to `post.routes.js`.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 由于照片路由使用`:postID`参数，我们将设置一个`postByID`控制器方法来通过其ID获取特定帖子，然后返回给照片请求。我们将在`post.routes.js`中添加param调用。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`：'
- en: '[PRE64]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The `postByID` will be similar to the `userByID` method, and it will attach
    the post retrieved from the database to the request object, to be accessed by
    the `next` method. The attached post data in this implementation will also contain
    the ID and name of the `postedBy` user reference.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`postByID`将类似于`userByID`方法，并且它将把从数据库中检索到的帖子附加到请求对象中，以便由`next`方法访问。在此实现中附加的帖子数据还将包含`postedBy`用户引用的ID和名称。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`：'
- en: '[PRE65]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Fetching the create post API in the view
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取创建帖子的API
- en: We will update the `api-post.js` to add a `create` method to make a `fetch`
    call to the create API.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新`api-post.js`，添加一个`create`方法来调用创建API的`fetch`请求。
- en: '`mern-social/client/post/api-post.js`:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/api-post.js`:'
- en: '[PRE66]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: This method, like the user `edit` fetch, will send a multipart form submission
    using a `FormData` object that can contain the text field and the image file.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法，就像用户`edit` fetch一样，将使用一个`FormData`对象发送一个多部分表单提交，其中可以包含文本字段和图像文件。
- en: NewPost component
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NewPost组件
- en: 'The `NewPost` component added in the `Newsfeed` component will allow users
    to write a new post containing a text message and optionally an image:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Newsfeed`组件中添加的`NewPost`组件将允许用户撰写包含文本消息和可选图像的新帖子：
- en: '![](assets/6380d9cd-a320-45c7-817d-14bd5eb04018.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6380d9cd-a320-45c7-817d-14bd5eb04018.png)'
- en: The `NewPost` component will be a standard form with a Material-UI `TextField`
    and a file upload button as implemented in `EditProfile`, that takes the values
    and sets them in a `FormData` object to be passed in the call to the `create`
    fetch method on post submission.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewPost`组件将是一个标准表单，其中包括一个Material-UI的`TextField`和一个文件上传按钮，就像在`EditProfile`中实现的那样，它会获取这些值并将它们设置在一个`FormData`对象中，以便在提交帖子时传递给`create`
    fetch方法。'
- en: '`mern-social/client/post/NewPost.js`:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/NewPost.js`:'
- en: '[PRE67]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The `NewPost` component is added as a child component in the `Newsfeed`, and
    given the `addUpdate` method as a prop. On successful post creation, the form
    view is emptied and `addUpdate` is executed so the post list in the `Newsfeed`
    is updated with the new post.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewPost`组件被添加为`Newsfeed`中的子组件，并且作为一个prop给予`addUpdate`方法。在成功创建帖子后，表单视图将被清空，并且将执行`addUpdate`，以便在`Newsfeed`中更新帖子列表。'
- en: Post component
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帖子组件
- en: Post details in each post will be rendered in the `Post` component, which will
    receive the post data as props from the `PostList` component, as well as the `onRemove`
    prop to be applied if a post is deleted.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 每个帖子中的帖子详细信息将在`Post`组件中呈现，该组件将从`PostList`组件中接收帖子数据作为props，以及`onRemove` prop，以便在删除帖子时应用。
- en: Layout
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局
- en: 'The `Post` component layout will have a header showing details of the poster,
    content of the post, an actions bar with likes and comment count, and the *Comments*
    section:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`Post`组件布局将包括一个显示发帖人详细信息的标题，帖子内容，带有赞和评论计数的操作栏，以及*评论*部分：'
- en: '![](assets/069a0ac2-e7cf-4192-99b0-15f8656ddd9d.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/069a0ac2-e7cf-4192-99b0-15f8656ddd9d.png)'
- en: Header
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标题
- en: The header will contain information such as the name, avatar, link to the profile
    of the user who posted, and the date the post was created.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 标题将包含诸如姓名、头像、指向发帖用户个人资料的链接以及帖子创建日期等信息。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE68]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The header will also conditionally show a `delete` button if the signed-in user
    is viewing their own post.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 标题还将有条件地显示一个“删除”按钮，如果已登录用户正在查看自己的帖子。
- en: Content
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容
- en: The content section will show the text of the post and the image if the post
    contains a photo.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 内容部分将显示帖子的文本内容以及帖子包含照片的情况。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE69]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Actions
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作
- en: The actions section will contain an interactive `"like"` option with the total
    number of likes on the post and a comment icon with the total number of comments
    on the post.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 操作部分将包含一个交互式的“喜欢”选项，显示帖子上的总赞数，以及一个评论图标，显示帖子上的总评论数。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE70]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Comments
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论
- en: The comments section will contain all the comment related elements in the `Comments`
    component and will get `props` such as the `postId`, and the `comments` data,
    along with a `state` updating method that can be called when a comment is added
    or deleted in the `Comments` component.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 评论部分将包含`Comments`组件中的所有与评论相关的元素，并将获得诸如`postId`和`comments`数据等`props`，以及一个`state`更新方法，当在`Comments`组件中添加或删除评论时可以调用。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE71]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Deleting a post
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除帖子
- en: The `delete` button is only visible if the signed-in user and `postedBy` user
    are the same for the specific post being rendered. For the post to be deleted
    from the database, we will have to set up a delete post API that will also have
    a fetch method in the frontend to be applied when `delete` is clicked.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在登录用户和`postedBy`用户对于正在呈现的特定帖子是相同时，`delete`按钮才可见。为了从数据库中删除帖子，我们将不得不设置一个删除帖子API，该API在单击`delete`时也将在前端应用中有一个fetch方法。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`:'
- en: '[PRE72]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The delete route will check for authorization before calling `remove` on the
    post, by ensuring the authenticated user and `postedBy` user are the same users. The
    `isPoster` method checks if the signed-in user is the original creator of the
    post before executing the `next` method.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 删除路由将在调用帖子上的`remove`之前检查授权，通过确保经过身份验证的用户和`postedBy`用户是相同的用户。`isPoster`方法在执行`next`方法之前检查登录用户是否是帖子的原始创建者。
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE73]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The rest of the implementation for the delete API with a `remove` controller
    method and fetch method for the frontend are the same as other API implementations.
    The important difference here, in the delete post feature, is the call to the
    `onRemove` update method in the `Post` component when delete succeeds. The `onRemove`
    method is sent as a prop from either `Newsfeed` or `Profile`, to update the list
    of posts in the state when the delete is successful.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 删除API的其余实现与其他API实现相同，具有`remove`控制器方法和用于前端的fetch方法。在删除帖子功能中的重要区别在于，在成功删除时在`Post`组件中调用`onRemove`更新方法。`onRemove`方法作为prop从`Newsfeed`或`Profile`发送，以在成功删除时更新状态中的帖子列表。
- en: The following `deletePost` method defined in the `Post` component is called
    when the `delete` button is clicked on a post.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Post`组件中定义的以下`deletePost`方法在单击帖子上的`delete`按钮时被调用。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`:'
- en: '[PRE74]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: This method makes a fetch call to the delete post API, and on success updates
    the list of posts in the state by executing the `onRemove` method received as
    a prop from the parent component.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法调用删除帖子API的fetch调用，并在成功时通过执行从父组件接收的`onRemove`方法更新状态中的帖子列表。
- en: Likes
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 喜欢
- en: The like option in the `Post` component's action bar section will allow the
    user to like or unlike a post, and also show the total number of likes for the
    post. To record a like, we will have to set up like and unlike APIs that can be
    called in the view.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`Post`组件操作栏部分的喜欢选项将允许用户喜欢或取消喜欢帖子，并显示帖子的总喜欢数。为了记录喜欢，我们将不得不设置可以在视图中调用的喜欢和取消喜欢API。'
- en: Like API
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 喜欢API
- en: The like API will be a PUT request to update the `likes` array in the `Post`
    document. The request will be received at the route `api/posts/like`.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢的API将是一个PUT请求，用于更新`Post`文档中的`likes`数组。请求将在路由`api/posts/like`接收。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`:'
- en: '[PRE75]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: In the `like` controller method, the post ID received in the request body will
    be used to find the Post document and update it by pushing the current user's
    ID to the `likes` array.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在`like`控制器方法中，将使用请求体中接收的帖子ID来查找帖子文档，并通过将当前用户的ID推送到`likes`数组来更新它。
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE76]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: To use this API, a fetch method called `like` will be added to `api-post.js`,
    which will be used when the user clicks the `like` button.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用此API，将在`api-post.js`中添加一个名为`like`的fetch方法，当用户点击`like`按钮时将使用该方法。
- en: '`mern-social/client/post/api-post.js`:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/api-post.js`:'
- en: '[PRE77]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Unlike API
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消喜欢API
- en: 'The `unlike` API will be implemented similar to the like API, with its own
    route at `mern-social/server/routes/post.routes.js`:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: “不喜欢”API将类似于喜欢API进行实现，其自己的路由在`mern-social/server/routes/post.routes.js`中：
- en: '[PRE78]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The `unlike` method in the controller will find the post by its ID and update
    the `likes` array by removing the current user's ID using `$pull` instead of `$push`.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器中的“不喜欢”方法将通过其ID找到帖子，并使用`$pull`而不是`$push`更新`likes`数组，从而删除当前用户的ID。
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`：'
- en: '[PRE79]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: The unlike API will also have a corresponding fetch method similar to the `like`
    method in `api-post.js`.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 不喜欢API还将有一个类似于`api-post.js`中的`like`方法的对应获取方法。
- en: Checking if liked and counting likes
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查是否喜欢并计算喜欢的数量
- en: When the `Post` component is rendered, we need to check if the currently signed
    in user has liked the post or not, so the appropriate `like` option can be shown.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 当渲染“Post”组件时，我们需要检查当前登录的用户是否喜欢帖子，以便显示适当的“like”选项。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`：'
- en: '[PRE80]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The `checkLike` function can be called during `componentDidMount` and `componentWillReceiveProps`
    of the `Post` component, to set the `like` state for the post after checking if
    the current user is referenced in the post''s `likes` array:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: “checkLike”函数可以在“Post”组件的“componentDidMount”和“componentWillReceiveProps”期间调用，以在检查当前用户是否在帖子的“likes”数组中引用后为帖子设置“like”状态：
- en: '![](assets/93a0e91b-5080-41d1-8d30-777ca5e05b08.png)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/93a0e91b-5080-41d1-8d30-777ca5e05b08.png)
- en: The `like` value set in the state using the `checkLike` method can be used to
    render a heart outline button or a full heart button. A heart outline button will
    render if the user has not liked the post, and clicking which will make a call
    to the `like` API, show the full heart button, and increment the `likes` count.
    The full heart button will indicate the current user has already liked this post,
    and clicking this will call the `unlike` API, render the heart outline button,
    and decrement the `likes` count.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“checkLike”方法在状态中设置的“like”值可以用于渲染心形轮廓按钮或完整的心形按钮。如果用户尚未喜欢帖子，将呈现心形轮廓按钮，点击后将调用“like”API，显示完整的心形按钮，并增加“likes”计数。完整的心形按钮将指示当前用户已经喜欢了这篇帖子，点击这将调用“unlike”API，呈现心形轮廓按钮，并减少“likes”计数。
- en: The `likes` count is also set initially when the `Post` component mounts and
    props are received by setting the `likes` value to state with `this.props.post.likes.length`.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 当“Post”组件挂载并且通过设置`this.props.post.likes.length`将`likes`值设置为状态时，“likes”计数也会最初设置。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`：'
- en: '[PRE81]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: The `likes` related values are updated again when a like or unlike action takes
    place, and the updated post data is returned from the API call.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 当喜欢或不喜欢操作发生时，更新帖子数据并从API调用返回时，`likes`相关的值也会再次更新。
- en: Handling like clicks
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理类似点击
- en: To handle clicks on the `like` and `unlike` buttons, we will set up a `like`
    method that will call the appropriate fetch method based on whether it is a like
    or unlike action, and update the state of `like` and `likes` count for the post.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理对“喜欢”和“不喜欢”按钮的点击，我们将设置一个“喜欢”方法，该方法将根据是喜欢还是不喜欢操作调用适当的获取方法，并更新帖子的“喜欢”和“喜欢”计数的状态。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`：'
- en: '[PRE82]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Comments
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论
- en: 'The Comments section in each post will allow signed in users to add comments,
    see the list of comments, and delete their own comments. Any changes to the comment
    list, such as a new addition or a removal, will update the comments and also the
    comment count in the action bar section of the `Post` component:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 每篇帖子中的评论部分将允许已登录用户添加评论，查看评论列表，并删除自己的评论。评论列表的任何更改，例如新添加或删除，都将更新评论，以及“Post”组件的操作栏部分中的评论计数：
- en: '![](assets/84e0c3cf-868d-4c90-ae59-2579d1cd8956.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/84e0c3cf-868d-4c90-ae59-2579d1cd8956.png)'
- en: Adding a comment
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加评论
- en: When a user adds a comment, the post document will be updated in the database
    with the new comment.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户添加评论时，帖子文档将在数据库中更新为新评论。
- en: Comment API
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论API
- en: To implement the add comment API, we will set up a `PUT` route as follows to
    update the post.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现添加评论API，我们将设置一个`PUT`路由如下以更新帖子。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`:'
- en: '[PRE83]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The `comment` controller method will find the relevant post to be updated by
    its ID, and push the comment object received in the request body to the `comments`
    array of the post.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`comment`控制器方法将通过其ID找到要更新的相关帖子，并将收到的评论对象推送到帖子的`comments`数组中。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`:'
- en: '[PRE84]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: In the response, the updated post object will be sent back with details of the
    `postedBy` users populated in the post and in the comments.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应中，更新后的帖子对象将与帖子和评论中的`postedBy`用户的详细信息一起发送回来。
- en: To use this API in the view, we will set up a fetch method in `api-post.js`
    that takes the current user's ID, the post ID, and the `comment` object from the
    view, to send with the add comment request.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 要在视图中使用此API，我们将在`api-post.js`中设置一个fetch方法，该方法获取当前用户的ID、帖子ID和视图中的`comment`对象，以便与添加评论请求一起发送。
- en: '`mern-social/client/post/api-post.js`:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/api-post.js`:'
- en: '[PRE85]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Writing something in the view
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中写一些东西
- en: 'The *add comment* section in the `Comments` component will allow the signed-in
    user to type in the comment text:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comments`组件中的*添加评论*部分将允许已登录用户输入评论文本：'
- en: '![](assets/8a7002b9-893f-45ee-a3f0-abea084f1896.png)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8a7002b9-893f-45ee-a3f0-abea084f1896.png)'
- en: It will contain an avatar with the user's photo and a text field, which will
    add the comment when the user presses the *Enter* key.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 它将包含一个带有用户照片的头像和一个文本字段，当用户按下*Enter*键时，将添加评论。
- en: '`mern-social/client/post/Comments.js`:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Comments.js`:'
- en: '[PRE86]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The text will be stored in state when the value changes, and on the `onKeyDown`
    event the `addComment` method will call the `comment` fetch method if the *Enter*
    key is pressed.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 当值改变时，文本将存储在状态中，并且在`onKeyDown`事件上，如果按下*Enter*键，`addComment`方法将调用`comment` fetch方法。
- en: '`mern-social/client/post/Comments.js`:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Comments.js`:'
- en: '[PRE87]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The `Comments` component receives the `updateComments` method (discussed in
    the last section) as a prop from the `Post` component. This will be executed when
    the new comment is added, in order to update the comments and the comment count
    in the Post view.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comments`组件从`Post`组件中作为prop接收`updateComments`方法（在上一节中讨论）。当添加新评论时，将执行此方法，以更新帖子视图中的评论和评论计数。'
- en: Listing comments
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出评论
- en: The `Comments` component receives the list of comments for the specific post
    as props from the `Post` component, then iterates over the individual comments
    to render the details of the commenter and the comment content.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comments`组件从`Post`组件中作为prop接收特定帖子的评论列表，然后迭代每个评论以呈现评论者的详细信息和评论内容。'
- en: '`mern-social/client/post/Comments.js`:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Comments.js`:'
- en: '[PRE88]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: The `commentBody` renders the content including the name of the commenter linked
    to their profile, the comment text, and the date of comment creation.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`commentBody`呈现内容，包括评论者的姓名链接到其个人资料、评论文本和评论创建日期。'
- en: '`mern-social/client/post/Comments.js`:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Comments.js`:'
- en: '[PRE89]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: The `commentBody` will also render a delete option for the comment if the `postedBy`
    reference of the comment matches the currently signed-in user.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 如果评论的`postedBy`引用与当前已登录用户匹配，`commentBody`还将呈现评论的删除选项。
- en: Deleting a comment
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除评论
- en: 'Clicking the delete button in a comment will update the post in the database
    by removing the comment from the `comments` array:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在评论中点击删除按钮将通过从数据库中的`comments`数组中移除评论来更新帖子：
- en: '![](assets/e20462d0-c78b-4d57-bb3a-52796e7f29f3.png)'
  id: totrans-405
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e20462d0-c78b-4d57-bb3a-52796e7f29f3.png)'
- en: Uncomment API
  id: totrans-406
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消评论API
- en: We will implement an `uncomment` API at the following PUT route.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下PUT路由上实现一个`uncomment` API。
- en: '`mern-social/server/routes/post.routes.js`:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/routes/post.routes.js`：'
- en: '[PRE90]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The `uncomment` controller method will find the relevant post by ID, then pull
    the comment with the deleted comment's ID from the `comments` array in the post.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '`uncomment`控制器方法将通过ID找到相关的帖子，然后从帖子的`comments`数组中拉取具有已删除评论ID的评论。'
- en: '`mern-social/server/controllers/post.controller.js`:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/controllers/post.controller.js`：'
- en: '[PRE91]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: The updated post will be returned in the response as in the comment API.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的帖子将像评论API中一样在响应中返回。
- en: To use this API in the view, we will also set up a fetch method in `api-post.js`,
    similar to the add `comment` fetch method, that takes the current user's ID, the
    post ID, and the deleted `comment` object to send with the `uncomment` request.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在视图中使用这个API，我们还将在`api-post.js`中设置一个fetch方法，类似于添加`comment`的fetch方法，该方法需要当前用户的ID、帖子ID和已删除的`comment`对象，以发送`uncomment`请求。
- en: Removing a comment from view
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从视图中移除评论
- en: When a comment's delete button is clicked by the commenter, the `Comments` component
    will call the `deleteComment` method to fetch the `uncomment` API, and update
    the comments along with the comment count when the comment is successfully removed
    from the server.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 当评论者点击评论的删除按钮时，`Comments`组件将调用`deleteComment`方法来获取`uncomment` API，并在评论成功从服务器中移除时更新评论以及评论计数。
- en: '`mern-social/client/post/Comments.js`:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Comments.js`：'
- en: '[PRE92]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Comment count update
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论计数更新
- en: The `updateComments` method, which will enable the `comments` and comment count
    to be updated when a comment is added or deleted, is defined in the `Post` component
    and passed as a prop to the `Comments` component.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateComments`方法用于在`Post`组件中定义，并作为prop传递给`Comments`组件，以便在添加或删除评论时更新`comments`和评论计数。'
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`：'
- en: '[PRE93]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: This method takes the updated list of comments as a parameter and updates the
    state that holds the list of comments rendered in the view. The initial state
    of comments in the Post component is set when the `Post` component mounts, and
    receives the post data as props.  The comments set here are sent as props to the
    `Comments` component, and also used to render the comment count next to the likes
    action in the action bar of the Post layout, as follows.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法将更新后的评论列表作为参数，并更新保存在视图中的评论列表的状态。当`Post`组件挂载时，评论的初始状态在`Post`组件中设置，并作为props接收帖子数据。这里设置的评论作为props发送到`Comments`组件，并用于在帖子布局的操作栏中渲染评论计数旁边的点赞操作。
- en: '`mern-social/client/post/Post.js`:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/client/post/Post.js`：'
- en: '[PRE94]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: This relation between the comment count in the `Post` component, and the comments
    rendered and updated in the `Comments` component, once again gives a simple demonstration
    of how changing data is shared among nested components in React to create dynamic
    and interactive user interfaces.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`Post`组件中评论计数与`Comments`组件中渲染和更新的评论之间的关系，再次简单演示了在React中如何在嵌套组件之间共享更改的数据，以创建动态和交互式用户界面。'
- en: The MERN Social application is complete with the set of features we defined
    earlier for the application. Users are able to update their profiles with a photo
    and description, follow each other on the application, and create posts with photos
    and text, as well as like and comment on posts. The implementations shown here
    can be tuned and extended further to add more features, utilizing the revealed
    mechanisms of working with the MERN stack.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: MERN社交应用程序已经完整地具备了我们之前为应用程序定义的功能集。用户可以更新其个人资料，上传照片和描述，在应用程序上互相关注，并创建带有照片和文字的帖子，以及对帖子点赞和评论。这里展示的实现可以进一步调整和扩展，以添加更多功能，利用MERN堆栈的工作机制。
- en: Summary
  id: totrans-428
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The MERN Social application developed in this chapter demonstrated how the MERN
    stack technologies can be used together to build out a fully-featured and functioning
    web application with social media features.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开发的MERN社交应用程序演示了如何将MERN堆栈技术一起使用，构建出具有社交媒体功能的功能齐全的网络应用程序。
- en: We began by updating the user feature in the skeleton application to allow anyone
    with an account on MERN Social to add a description about themselves, and also
    to upload a profile picture from their local files. In the implementation of uploading
    a profile picture, we explored how to upload multipart form data from the client,
    then receive it on the server to store the file data directly in the MongoDB database,
    and then be able to retrieve it back for viewing.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先更新了骨架应用程序中的用户功能，允许在MERN社交上拥有账户的任何人添加关于自己的描述，并从本地文件上传个人资料图片。在上传个人资料图片的实现中，我们探讨了如何从客户端上传多部分表单数据，然后在服务器上接收它，直接将文件数据存储在MongoDB数据库中，然后能够检索回来进行查看。
- en: Next, we updated the user feature further, to allow users to follow each other
    on the MERN Social platform. In the user model, we added the capability to maintain
    arrays of user references to represent lists of followers and followings for each
    user. Extending this capability, we incorporated follow and unfollow options in
    the view, and displayed lists of followers, followings, and even lists of users
    not followed yet.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们进一步更新了用户功能，允许用户在MERN社交平台上互相关注。在用户模型中，我们添加了维护用户引用数组的功能，以表示每个用户的关注者和关注者列表。扩展了这一功能，我们在视图中加入了关注和取消关注选项，并显示了关注者、被关注者甚至尚未关注的用户列表。
- en: Then, we added the ability to allow users to post content and interact over
    the content by liking or commenting on the post. On the backend, we set up the
    Post model and corresponding APIs, capable of storing the post content that may
    or may not include an image, and maintaining records of likes and comments incurred
    on a post by any user.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加了允许用户发布内容并通过点赞或评论进行互动的功能。在后端，我们设置了帖子模型和相应的API，能够存储可能包含或不包含图像的帖子内容，并记录任何用户在帖子上产生的点赞和评论。
- en: Finally, while implementing the views for posting, liking, and commenting features,
    we explored how to use component composition and share changing state values across
    the components to create complex and interactive views.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在实现发布、点赞和评论功能的视图时，我们探讨了如何使用组件组合和共享组件之间的状态值来创建复杂和交互式视图。
- en: In the next chapter, we will expand further on these abilities in the MERN stack, and
    unlock new possibilities as we develop an online marketplace application by extending
    the MERN skeleton application.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进一步扩展MERN堆栈的这些能力，并在扩展MERN骨架应用程序的同时，开启新的可能性，开发一个在线市场应用程序。
