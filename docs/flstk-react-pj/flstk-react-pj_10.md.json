["```jsx\nnpm install -g react-360-cli\n```", "```jsx\nreact-360 init MERNVR\n```", "```jsx\nnpm start\n```", "```jsx\nimport React from 'react'\nimport { AppRegistry, StyleSheet, Text, View } from 'react-360'\n\nexport default class MERNVR extends React.Component {\n  render() {\n    return (\n      <View style={styles.panel}>\n        <View style={styles.greetingBox}>\n          <Text style={styles.greeting}>\n            Welcome to React 360\n          </Text>\n        </View>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  panel: {\n    // Fill the entire surface\n    width: 1000,\n    height: 600,\n    backgroundColor: 'rgba(255, 255, 255, 0.4)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  greetingBox: {\n    padding: 20,\n    backgroundColor: '#000000',\n    borderColor: '#639dda',\n    borderWidth: 2,\n  },\n  greeting: {\n    fontSize: 30,\n  }\n})\n\nAppRegistry.registerComponent('MERNVR', () => MERNVR)\n```", "```jsx\nimport {ReactInstance} from 'react-360-web'\n\nfunction init(bundle, parent, options = {}) {\n  const r360 = new ReactInstance(bundle, parent, {\n    // Add custom options here\n    fullScreen: true,\n    ...options,\n  })\n\n  // Render your app content to the default cylinder surface\n  r360.renderToSurface(\n    r360.createRoot('MERNVR', { /* initial props */ }),\n    r360.getDefaultSurface()\n  )\n\n  // Load the initial environment\n  r360.compositor.setBackground(r360.getAssetURL('360_world.jpg'))\n}\n\nwindow.React360 = {init}\n```", "```jsx\nstyle={{ ...\n          transform: [ \n            {TRANSFORM_COMMAND: TRANSFORM_VALUE},\n         ...\n    ] \n... }}\n```", "```jsx\n<View>\n  <Text>Hello</Text>\n</View>\n```", "```jsx\n<View>\n      <Text>Welcome to the MERN VR Game</Text>\n</View>\n```", "```jsx\n<Entity\n  source={{\n           obj: {uri: \"http://linktoOBJfile.obj \"},\n           mtl: {uri: \"http://linktoMTLfile.obj \"}\n        }}\n/>\n```", "```jsx\n<VrButton onClick={this.clickHandler}>\n        <View>\n            <Text>Click me to make something happen!</Text>\n        </View>\n </VrButton>\n```", "```jsx\nEnvironment.setBackgroundImage( {uri: 'http://linktopanoramaimage.jpg' } )\n```", "```jsx\nimport {\n    ...\n  NativeModules\n} from 'react-360'\n\nconst { AudioModule, Location } = NativeModules\n```", "```jsx\nAudioModule.playEnvironmental({\n    source: asset('happy-bot.mp3'),\n    loop: true\n})\n```", "```jsx\nAudioModule.playOneShot({\n    source: asset('clog-up.mp3'),\n})\n```", "```jsx\nLocation.replace(url)\n```", "```jsx\ncomponentDidMount = () => {\n   let queryString = Location.search\n   let gameId = queryString.split('?id=')[1]\n}\n```", "```jsx\nconst styles = StyleSheet.create({\n  subView: {\n    width: 10,\n    borderColor: '#d6d7da',\n  },\n  text: {\n    fontSize: '1em',\n    fontWeight: 'bold',\n  }\n})\n```", "```jsx\n<View style={styles.subView}>\n  <Text style={styles.text}>hello</Text>\n</View>\n```", "```jsx\nAudioModule.playOneShot({\n    source: asset('collect.mp3'),\n})\n```", "```jsx\ngame: {\n  name: 'Space Exploration',\n  world: 'https://s3.amazonaws.com/mernbook/vrGame/milkyway.jpg',\n  answerObjects: [\n    { \n      objUrl: 'https://s3.amazonaws.com/mernbook/vrGame/planet.obj',\n      mtlUrl: 'https://s3.amazonaws.com/mernbook/vrGame/planet.mtl',\n      translateX: -50,\n      translateY: 0,\n      translateZ: 30,\n      rotateX: 0,\n      rotateY: 0,\n      rotateZ: 0,\n      scale: 7,\n      color: 'white'\n    }\n  ],\n  wrongObjects: [\n    { \n      objUrl: 'https://s3.amazonaws.com/mernbook/vrGame/tardis.obj',\n      mtlUrl: 'https://s3.amazonaws.com/mernbook/vrGame/tardis.mtl',\n      translateX: 0,\n      translateY: 0,\n      translateZ: 90,\n      rotateX: 0,\n      rotateY: 20,\n      rotateZ: 0,\n      scale: 1,\n      color: 'white'\n    }\n  ]\n}\n```", "```jsx\nexport default class MERNVR extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n                game: sampleGameData\n                ...\n            }\n    }\n\n...\n}\n```", "```jsx\n  r360.renderToLocation(\n    r360.createRoot('MERNVR', { /* initial props */ }),\n    r360.getDefaultLocation()\n  )\n```", "```jsx\nconst styles = StyleSheet.create({\n                 completeMessage: {\n                      margin: 0.1,\n                      height: 1.5,\n                      backgroundColor: 'green',\n                      transform: [ {translate: [0, 0, -5] } ]\n                 },\n                 congratsText: {\n                      fontSize: 0.5,\n                      textAlign: 'center',\n                      marginTop: 0.2\n                 },\n                 collectedText: {\n                      fontSize: 0.2,\n                      textAlign: 'center'\n                 },\n                 button: {\n                      margin: 0.1,\n                      height: 0.5,\n                      backgroundColor: 'blue',\n                      transform: [ { translate: [0, 0, -5] } ]\n                 },\n                 buttonText: {\n                      fontSize: 0.3,\n                      textAlign: 'center'\n                 }\n              }) \n```", "```jsx\ncomponentDidMount = () => {\n    Environment.setBackgroundImage(\n      {uri: this.state.game.world}\n    )\n}\n```", "```jsx\ncomponentDidMount = () => {\n  let vrObjects = this.state.game.answerObjects.concat(this.state.game.wrongObjects)\n  this.setState({vrObjects: vrObjects}) \n    ...\n}\n```", "```jsx\n{this.state.vrObjects.map((vrObject, i) => {\n     return (\n                <Entity key={i} style={this.setModelStyles(vrObject, i)}\n                  source={{\n                    obj: {uri: vrObject.objUrl},\n                    mtl: {uri: vrObject.mtlUrl}\n                  }}\n                 />\n            )\n    })\n}\n```", "```jsx\nsetModelStyles = (vrObject, index) => {\n    return {\n        display: this.state.collectedList[index] ? 'none' : 'flex',\n        color: vrObject.color,\n        transform: [\n          {\n            translateX: vrObject.translateX\n          }, { \n            translateY: vrObject.translateY\n          }, {\n            translateZ: vrObject.translateZ\n          }, {\n            scale: vrObject.scale\n          }, {\n            rotateY: vrObject.rotateY\n          }, {\n            rotateX: vrObject.rotateX\n          }, {\n            rotateZ: vrObject.rotateZ\n          }\n        ]\n      }\n  }\n```", "```jsx\n<Entity \n     ... \n    onEnter={this.rotate(i)}\n    onExit={this.stopRotate}\n/>\n```", "```jsx\nthis.lastUpdate = Date.now() \nrotate = index => event => {\n    const now = Date.now()\n    const diff = now - this.lastUpdate\n    const vrObjects = this.state.vrObjects\n    vrObjects[index].rotateY = vrObjects[index].rotateY + diff / 200\n    this.lastUpdate = now\n    this.setState({vrObjects: vrObjects})\n    this.requestID = requestAnimationFrame(this.rotate(index)) \n}\n```", "```jsx\nstopRotate = () => {\n  if (this.requestID) {\n    cancelAnimationFrame(this.requestID) \n    this.requestID = null \n  }\n}\n```", "```jsx\n<VrButton onClick={this.collectItem(vrObject)} key={i}>\n    <Entity \u2026 />\n</VrButton>\n```", "```jsx\ncollectItem = vrObject => event => {\n  if (vrObject is an answerObject) {\n     ... update collected list ...\n     ... play sound for correct object collected ...\n     if (all answer objects collected) {\n         ... show game completed message in front of user ...\n         ... play sound for game completed ...\n     }\n  } else {\n     ... play sound for wrong object clicked ...\n  }\n}\n```", "```jsx\nlet match = this.state.game.answerObjects.indexOf(vrObject) \n```", "```jsx\nlet updateCollectedList = this.state.collectedList \nlet updateCollectedNum = this.state.collectedNum + 1 \nupdateCollectedList[match] = true \nthis.setState({collectedList: updateCollectedList, \n                collectedNum: updateCollectedNum}) \n```", "```jsx\ndisplay: this.state.collectedList[index] ? 'none' : 'flex'\n```", "```jsx\nAudioModule.playOneShot({\n    source: asset('collect.mp3'),\n}) \n```", "```jsx\nAudioModule.playOneShot({\n     source: asset('clog-up.mp3'),\n})\n```", "```jsx\n  collectItem = vrObject => event => {\n    let match = this.state.game.answerObjects.indexOf(vrObject)\n    if (match != -1) {\n      let updateCollectedList = this.state.collectedList\n      let updateCollectedNum = this.state.collectedNum + 1\n      updateCollectedList[match] = true\n      this.checkGameCompleteStatus(updateCollectedNum)\n          AudioModule.playOneShot({\n            source: asset('collect.mp3'),\n          })\n      this.setState({collectedList: updateCollectedList, collectedNum: updateCollectedNum})\n    } else {\n      AudioModule.playOneShot({\n        source: asset('clog-up.mp3'),\n      })\n    }\n  }\n```", "```jsx\n if (collectedTotal == this.state.game.answerObjects.length) {\n    AudioModule.playEnvironmental({\n       source: asset('happy-bot.mp3'),\n       loop: true\n    })\n    this.setState({hide: 'flex', hmMatrix: VrHeadModel.getHeadMatrix()})\n }\n```", "```jsx\n<View style={this.setGameCompletedStyle}>\n   <View style={this.styles.completeMessage}>\n      <Text style={this.styles.congratsText}>Congratulations!</Text>\n      <Text style={this.styles.collectedText}>\n            You have collected all items in {this.state.game.name}\n      </Text>\n   </View>\n   <VrButton onClick={this.exitGame}>\n      <View style={this.styles.button}>\n          <Text style={this.styles.buttonText}>Play another game</Text>\n      </View>\n   </VrButton>\n</View>\n```", "```jsx\nsetGameCompletedStyle = () => {\n    return {\n        position: 'absolute',\n        display: this.state.hide,\n        layoutOrigin: [0.5, 0.5],\n        width: 6,\n        transform: [{translate: [0, 0, 0]}, {matrix: this.state.hmMatrix}]\n      }\n}\n```", "```jsx\nexitGame = () => {\n    Location.replace('/') \n}\n```", "```jsx\nnpm run bundle\n```", "```jsx\n-- static_assets/\n\n-- index.html\n\n-- index.bundle.js\n\n-- client.bundle.js\n```", "```jsx\n-- ... \n-- client/\n-- dist/\n     --- static_assets/\n     --- ...\n     --- client.bundle.js\n     --- index.bundle.js\n-- ...\n-- server/\n     --- ...\n     --- vr/\n          ---- index.html\n-- ...\n```", "```jsx\n<html>\n  <head>\n    <title>MERNVR</title>\n    <style>body { margin: 0 }</style>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\">\n  </head>\n  <body>\n    <!-- Attachment point for your app -->\n    <div id=\"container\"></div>\n    <script src=\"./client.bundle.js\"></script>\n    <script>\n      // Initialize the React 360 application\n      React360.init(\n        'index.bundle.js',\n        document.getElementById('container'),\n        {\n          assetRoot: 'static_assets/',\n        }\n      ) \n    </script>\n  </body>\n</html>\n```", "```jsx\n<script src=\"/dist/client.bundle.js\" type=\"text/javascript\"></script>\n```", "```jsx\nReact360.init(\n './../dist/index.bundle.js',\n        document.getElementById('container'),\n { assetRoot: '/dist/static_assets/' }\n    ) \n```", "```jsx\nrouter.route('/game/play')\n   .get((req, res) => {\n      res.sendFile(process.cwd()+'/server/vr/index.html') \n}) \n```"]