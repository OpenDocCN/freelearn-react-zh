["```jsx\nAuthorization: Bearer <JSON Web Token>\n```", "```jsx\n| mern_skeleton/\n   | -- config/\n      | --- config.js\n   | -- server/\n      | --- controllers/\n         | ---- auth.controller.js\n         | ---- user.controller.js\n      | --- helpers/\n         | ---- dbErrorHandler.js\n      | --- models/\n         | ---- user.model.js\n      | --- routes/\n         | ---- auth.routes.js\n         | ---- user.routes.js\n      | --- express.js\n      | --- server.js\n  | -- .babelrc\n  | -- nodemon.json\n  | -- package.json\n  | -- template.js\n  | -- webpack.config.server.js\n```", "```jsx\n{\n    \"presets\": [\n      \"env\",\n      \"stage-2\"\n    ]\n}\n```", "```jsx\nnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-stage-2\n```", "```jsx\nnpm install --save-dev webpack webpack-cli webpack-node-externals\n```", "```jsx\nconst config = {\n  env: process.env.NODE_ENV || 'development',\n  port: process.env.PORT || 3000,\n  jwtSecret: process.env.JWT_SECRET || \"YOUR_secret_key\",\n  mongoUri: process.env.MONGODB_URI ||\n    process.env.MONGO_HOST ||\n    'mongodb://' + (process.env.IP || 'localhost') + ':' +\n    (process.env.MONGO_PORT || '27017') +\n    '/mernproject'\n}\n\nexport default config\n```", "```jsx\n\"scripts\": {\n    \"development\": \"nodemon\"\n }\n```", "```jsx\nnpm install express --save\n```", "```jsx\nimport express from 'express'\nconst app = express()\n  /*... configure express ... */\nexport default app\n```", "```jsx\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport cookieParser from 'cookie-parser'\nimport compress from 'compression'\nimport cors from 'cors'\nimport helmet from 'helmet'\n\nconst app = express()\n\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\n```", "```jsx\napp.use(cookieParser())\napp.use(compress())\napp.use(helmet())\napp.use(cors())\n\nexport default app\n```", "```jsx\nimport config from './../config/config'\nimport app from './express'\n\napp.listen(config.port, (err) => {\n  if (err) {\n    console.log(err)\n  }\n  console.info('Server started on port %s.', config.port)\n})\n```", "```jsx\nnpm install mongoose --save\n```", "```jsx\nimport mongoose from 'mongoose'\n\nmongoose.Promise = global.Promise\nmongoose.connect(config.mongoUri)\n\nmongoose.connection.on('error', () => {\n  throw new Error(`unable to connect to database: ${mongoUri}`)\n})\n```", "```jsx\nexport default () => {\n    return `<!doctype html>\n      <html lang=\"en\">\n          <head>\n             <meta charset=\"utf-8\">\n             <title>MERN Skeleton</title>\n          </head>\n          <body>\n            <div id=\"root\">Hello World</div>\n          </body>\n      </html>`\n}\n```", "```jsx\nimport Template from './../template'\n...\napp.get('/', (req, res) => {\n  res.status(200).send(Template())\n})\n...\n```", "```jsx\nimport mongoose from 'mongoose'\n\nconst UserSchema = new mongoose.Schema({ \u2026 })\n```", "```jsx\nname: {\n   type: String,\n   trim: true,\n   required: 'Name is required'\n },\n```", "```jsx\nemail: {\n  type: String,\n  trim: true,\n  unique: 'Email already exists',\n  match: [/.+\\@.+\\..+/, 'Please fill a valid email address'],\n  required: 'Email is required'\n},\n```", "```jsx\ncreated: {\n  type: Date,\n  default: Date.now\n},\nupdated: Date,\n```", "```jsx\nhashed_password: {\n    type: String,\n    required: \"Password is required\"\n},\nsalt: String\n```", "```jsx\nUserSchema\n  .virtual('password')\n  .set(function(password) {\n    this._password = password\n    this.salt = this.makeSalt()\n    this.hashed_password = this.encryptPassword(password)\n  })\n  .get(function() {\n    return this._password\n  })\n```", "```jsx\nUserSchema.methods = {\n  authenticate: function(plainText) {\n    return this.encryptPassword(plainText) === this.hashed_password\n  },\n  encryptPassword: function(password) {\n    if (!password) return ''\n    try {\n      return crypto\n        .createHmac('sha1', this.salt)\n        .update(password)\n        .digest('hex')\n    } catch (err) {\n      return ''\n    }\n  },\n  makeSalt: function() {\n    return Math.round((new Date().valueOf() * Math.random())) + ''\n  }\n}\n```", "```jsx\nUserSchema.path('hashed_password').validate(function(v) {\n  if (this._password && this._password.length < 6) {\n    this.invalidate('password', 'Password must be at least 6 characters.')\n  }\n  if (this.isNew && !this._password) {\n    this.invalidate('password', 'Password is required')\n  }\n}, null)\n```", "```jsx\nexport default mongoose.model('User', UserSchema) \n```", "```jsx\nconst getErrorMessage = (err) => {\n  let message = ''\n  if (err.code) {\n      switch (err.code) {\n          case 11000:\n          case 11001:\n              message = getUniqueErrorMessage(err)\n              break\n          default:\n              message = 'Something went wrong'\n      }\n  } else {\n      for (let errName in err.errors) {\n          if (err.errors[errName].message)\n          message = err.errors[errName].message\n      }\n  }\n  return message\n}\n\nexport default {getErrorMessage}\n```", "```jsx\nconst getUniqueErrorMessage = (err) => {\n  let output\n  try {\n      let fieldName =   \n      err.message.substring(err.message.lastIndexOf('.$') + 2,                                             \n      err.message.lastIndexOf('_1'))\n      output = fieldName.charAt(0).toUpperCase() + fieldName.slice(1) +   \n      ' already exists'\n  } catch (ex) {\n      output = 'Unique field already exists'\n  }\n  return output\n}\n```", "```jsx\nimport userRoutes from './routes/user.routes'\n...\napp.use('/', userRoutes)\n...\n```", "```jsx\nimport express from 'express'\nimport userCtrl from '../controllers/user.controller'\n\nconst router = express.Router()\n\nrouter.route('/api/users')\n  .get(userCtrl.list)\n  .post(userCtrl.create)\n\nrouter.route('/api/users/:userId')\n  .get(userCtrl.read)\n  .put(userCtrl.update)\n  .delete(userCtrl.remove)\n\nrouter.param('userId', userCtrl.userByID)\n\nexport default router\n```", "```jsx\nimport User from '../models/user.model'\nimport _ from 'lodash'\nimport errorHandler from './error.controller'\n\nconst create = (req, res, next) => { \u2026 }\nconst list = (req, res) => { \u2026 }\nconst userByID = (req, res, next, id) => { \u2026 }\nconst read = (req, res) => { \u2026 }\nconst update = (req, res, next) => { \u2026 }\nconst remove = (req, res, next) => { \u2026 }\n\nexport default { create, userByID, read, list, remove, update }\n```", "```jsx\nrouter.route('/api/users').post(userCtrl.create)\n```", "```jsx\nconst create = (req, res, next) => {\n  const user = new User(req.body)\n  user.save((err, result) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.status(200).json({\n      message: \"Successfully signed up!\"\n    })\n  })\n}\n```", "```jsx\nrouter.route('/api/users').get(userCtrl.list)\n```", "```jsx\nconst list = (req, res) => {\n  User.find((err, users) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(users)\n  }).select('name email updated created')\n}\n```", "```jsx\nrouter.param('userId', userCtrl.userByID)\n```", "```jsx\nconst userByID = (req, res, next, id) => {\n  User.findById(id).exec((err, user) => {\n    if (err || !user)\n      return res.status('400').json({\n        error: \"User not found\"\n      })\n    req.profile = user\n    next()\n  })\n}\n```", "```jsx\nrouter.route('/api/users/:userId').get(userCtrl.read)\n```", "```jsx\nconst read = (req, res) => {\n  req.profile.hashed_password = undefined\n  req.profile.salt = undefined\n  return res.json(req.profile)\n}\n```", "```jsx\nrouter.route('/api/users/:userId').put(userCtrl.update)\n```", "```jsx\nconst update = (req, res, next) => {\n  let user = req.profile\n  user = _.extend(user, req.body)\n  user.updated = Date.now()\n  user.save((err) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    user.hashed_password = undefined\n    user.salt = undefined\n    res.json(user)\n  })\n}\n```", "```jsx\nrouter.route('/api/users/:userId').delete(userCtrl.remove)\n```", "```jsx\nconst remove = (req, res, next) => {\n  let user = req.profile\n  user.remove((err, deletedUser) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    deletedUser.hashed_password = undefined\n    deletedUser.salt = undefined\n    res.json(deletedUser)\n  })\n}\n```", "```jsx\nimport authRoutes from './routes/auth.routes'\n  ...\n  app.use('/', authRoutes)\n  ...\n```", "```jsx\nimport express from 'express'\nimport authCtrl from '../controllers/auth.controller'\n\nconst router = express.Router()\n\nrouter.route('/auth/signin')\n  .post(authCtrl.signin)\nrouter.route('/auth/signout')\n  .get(authCtrl.signout)\n\nexport default router\n```", "```jsx\nimport User from '../models/user.model'\nimport jwt from 'jsonwebtoken'\nimport expressJwt from 'express-jwt'\nimport config from './../../config/config'\n\nconst signin = (req, res) => { \u2026 }\nconst signout = (req, res) => { \u2026 }\nconst requireSignin = \u2026 \nconst hasAuthorization = (req, res) => { \u2026 }\n\nexport default { signin, signout, requireSignin, hasAuthorization }\n```", "```jsx\nrouter.route('/auth/signin').post(authCtrl.signin)\n```", "```jsx\nconst signin = (req, res) => {\n  User.findOne({\n    \"email\": req.body.email\n  }, (err, user) => {\n    if (err || !user)\n      return res.status('401').json({\n        error: \"User not found\"\n      })\n\n    if (!user.authenticate(req.body.password)) {\n      return res.status('401').send({\n        error: \"Email and password don't match.\"\n      })\n    }\n\n    const token = jwt.sign({\n      _id: user._id\n    }, config.jwtSecret)\n\n    res.cookie(\"t\", token, {\n      expire: new Date() + 9999\n    })\n\n    return res.json({\n      token,\n      user: {_id: user._id, name: user.name, email: user.email}\n    })\n  })\n}\n```", "```jsx\nrouter.route('/auth/signout').get(authCtrl.signout)\n```", "```jsx\nconst signout = (req, res) => {\n  res.clearCookie(\"t\")\n  return res.status('200').json({\n    message: \"signed out\"\n  })\n}\n```", "```jsx\nconst requireSignin = expressJwt({\n  secret: config.jwtSecret,\n  userProperty: 'auth'\n})\n```", "```jsx\nconst hasAuthorization = (req, res, next) => {\n  const authorized = req.profile && req.auth && req.profile._id == \n  req.auth._id\n  if (!(authorized)) {\n    return res.status('403').json({\n      error: \"User is not authorized\"\n    })\n  }\n  next()\n}\n```", "```jsx\nimport authCtrl from '../controllers/auth.controller'\n...\nrouter.route('/api/users/:userId')\n    .get(authCtrl.requireSignin, userCtrl.read)\n    .put(authCtrl.requireSignin, authCtrl.hasAuthorization, \n     userCtrl.update)\n    .delete(authCtrl.requireSignin, authCtrl.hasAuthorization, \n     userCtrl.remove)\n...\n```", "```jsx\napp.use((err, req, res, next) => {\n  if (err.name === 'UnauthorizedError') {\n    res.status(401).json({\"error\" : err.name + \": \" + err.message})\n  }\n})\n```"]