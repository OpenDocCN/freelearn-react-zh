- en: Customizing the Media Player and Improving SEO
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义媒体播放器和改善SEO
- en: Users visit a media-streaming application mainly to play the media and explore
    other related media. This makes the media player, and the view that renders the
    related media details, crucial to a streaming application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用户主要是为了播放媒体和探索其他相关媒体而访问媒体流应用程序。这使得媒体播放器和呈现相关媒体详情的视图对于流媒体应用程序至关重要。
- en: 'In this chapter, we will focus on developing the play media page for the MERN
    Mediastream application that we started building in the previous chapter. We will
    address the following topics to bolster the media-playing functionalities, and
    to help boost the presence of the media content across the web so that it reaches
    more users:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于为我们在上一章开始构建的MERN Mediastream应用程序开发播放媒体页面。我们将讨论以下主题，以加强媒体播放功能，并帮助增加媒体内容在网络上的存在，以便能够触达更多用户：
- en: Customize controls on `ReactPlayer`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义`ReactPlayer`上的控件
- en: Play next from a list of related videos
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从相关视频列表中播放下一个视频
- en: Autoplay a list of related media
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动播放相关媒体列表
- en: Server-side render the Media view with data to improve SEO
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端渲染媒体视图以改善SEO
- en: MERN Mediastream with a custom media player
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义媒体播放器的MERN Mediastream
- en: 'The MERN Mediastream application developed in the previous chapter implemented
    a simple media player with default browser controls that played one video at a
    time. In this chapter, we will update the view that plays the media with a customized
    `ReactPlayer` and a related media list that can be set to play automatically when
    the current video ends. The updated view with the custom player and related playlist
    will look as pictured in this screenshot:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中开发的MERN Mediastream应用程序实现了一个简单的媒体播放器，具有默认的浏览器控件，一次只能播放一个视频。在本章中，我们将使用自定义的`ReactPlayer`和相关媒体列表更新播放媒体的视图，可以在当前视频结束时自动播放。更新后的具有自定义播放器和相关播放列表的视图如下图所示：
- en: '![](assets/2f2b187f-d816-4640-a728-d3627fbf0a39.png)The code for the complete
    MERN Mediastream application is available on GitHub at [github.com/shamahoque/mern-mediastream](https://github.com/shamahoque/mern-mediastream). You
    can clone this code and run the application as you go through the code explanations
    in the rest of this chapter.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/2f2b187f-d816-4640-a728-d3627fbf0a39.png)完整的MERN Mediastream应用程序的代码可在GitHub上找到，网址为[github.com/shamahoque/mern-mediastream](https://github.com/shamahoque/mern-mediastream)。您可以在阅读本章其余部分的代码解释时，克隆此代码并运行应用程序。'
- en: 'The following component tree diagram shows all the custom components that make
    up the MERN Mediastream frontend, highlighting the components that will be improved
    or added in this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下组件树图显示了构成MERN Mediastream前端的所有自定义组件，突出显示了本章中将改进或添加的组件。
- en: '![](assets/48f71397-98ac-4e74-92de-dfb7d6758f4c.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/48f71397-98ac-4e74-92de-dfb7d6758f4c.jpg)'
- en: New components added in this chapter include the `MediaPlayer` component, which
    adds a `ReactPlayer` with custom controls, and a `RelatedMedia` component, which
    contains a list of related videos.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中新增的组件包括`MediaPlayer`组件，它添加了带有自定义控件的`ReactPlayer`，以及`RelatedMedia`组件，其中包含相关视频列表。
- en: The play media page
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放媒体页面
- en: When visitors want to view specific media on MERN Mediastream, they will be
    taken to the play media page, which will contain the media details, a media player
    to stream the video, and a list of related media that can be played next.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问者想要在MERN Mediastream上观看特定媒体时，他们将被带到播放媒体页面，其中包含媒体详情、用于流媒体视频的媒体播放器，以及可以接下来播放的相关媒体列表。
- en: Component structure
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件结构
- en: 'We will compose the component structure in the play media page in a way that
    allows the media data to trickle down to the inner components from the parent
    component. In this case, the `PlayMedia` component will be the parent component,
    containing the `RelatedMedia` component, and the `Media` component with a nested
    `MediaPlayer` component:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以一种允许媒体数据从父组件向内部组件传递的方式构成播放媒体页面的组件结构。在这种情况下，`PlayMedia`组件将是父组件，包含`RelatedMedia`组件和带有嵌套的`MediaPlayer`组件的`Media`组件：
- en: '![](assets/c3e134b6-0f5f-4e9b-93cb-cce0c5a316b5.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3e134b6-0f5f-4e9b-93cb-cce0c5a316b5.png)'
- en: When individual media links are accessed, the `PlayMedia` component will mount
    and retrieve the media data and related media list from the server. Then, the
    relevant data will be passed as props to the `Media` and `RelatedMedia` child
    components.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问单个媒体链接时，`PlayMedia`组件将挂载并从服务器检索媒体数据和相关媒体列表。然后，相关数据将作为props传递给`Media`和`RelatedMedia`子组件。
- en: The `RelatedMedia` component will link to a list of other related media, and
    clicking each will re-render the `PlayMedia` component and inner components with
    the new data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`RelatedMedia`组件将链接到其他相关媒体的列表，点击每个将重新渲染`PlayMedia`组件和内部组件以显示新数据。'
- en: We will update the `Media` component we developed in [Chapter 8](b24d9630-844d-4c36-b703-5acd3613ac6d.xhtml), *Building
    a Media-Streaming Application*, to add a customized media player as a child component.
    This customized `MediaPlayer` component will also utilize the data passed from
    `PlayMedia` to stream the current video and link to the next video in the related
    media list.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新我们在[第8章](b24d9630-844d-4c36-b703-5acd3613ac6d.xhtml)中开发的`Media`组件，*构建媒体流应用程序*，以添加一个定制的媒体播放器作为子组件。这个定制的`MediaPlayer`组件还将利用从`PlayMedia`传递的数据来播放当前视频并链接到相关媒体列表中的下一个视频。
- en: In the `PlayMedia` component, we will add an autoplay toggle that will let users
    choose to autoplay the videos in the related media list, one after the other.
    The autoplay state will be managed from the `PlayMedia` component but this feature
    will require the data in state to re-render when a video ends in the `MediaPlayer`,
    which is a nested child component, so the next video can start playing automatically
    while keeping track of the related list.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PlayMedia`组件中，我们将添加一个自动播放切换按钮，让用户选择自动播放相关媒体列表中的视频，一个接着一个。自动播放状态将从`PlayMedia`组件管理，但此功能将需要在`MediaPlayer`中视频结束时重新渲染状态中的数据，这是一个嵌套的子组件，所以下一个视频可以在保持相关列表跟踪的同时自动开始播放。
- en: To achieve this, the `PlayMedia` component will need to provide a state updating
    method as a prop, which will be used in the `MediaPlayer` component to update
    the shared and interdependent state values across these components.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，`PlayMedia`组件将需要提供一个状态更新方法作为prop，该方法将在`MediaPlayer`组件中使用，以更新这些组件之间共享和相互依赖的状态值。
- en: Taking this component structure into consideration, we will extend and update
    the MERN Mediastream application to implement a functional play media page.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这种组件结构，我们将扩展和更新MERN Mediastream应用程序，以实现一个功能性的播放媒体页面。
- en: Related media list
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关媒体列表
- en: The related media list will consist of other media records that belong to the
    same genre as the given video and is sorted by the highest number of views.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 相关媒体列表将包括属于与给定视频相同流派的其他媒体记录，并按观看次数最多的顺序排序。
- en: Related list API
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关列表API
- en: In order to retrieve the list of related media from the database, we will set
    up an API on the server that will receive a GET request at `'/api/media/related/:mediaId'`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从数据库中检索相关媒体列表，我们将在服务器上设置一个API，该API将在`'/api/media/related/:mediaId'`接收GET请求。
- en: '`mern-mediastream/server/routes/media.routes.js`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/routes/media.routes.js`：'
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `listRelated` controller method will query the Media collection to find
    records with the same genre as the media provided, and also exclude this media
    record from the results returned. The results returned will be sorted by the highest
    number of views and limited to the top four media records. Each `media` object
    in the returned results will also contain the name and ID of the user who posted
    the media.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`listRelated`控制器方法将查询媒体集合，以找到与提供的媒体具有相同流派的记录，并从返回的结果中排除此媒体记录。返回的结果将按照最高的观看次数进行排序，并限制为前四个媒体记录。返回的结果中的每个`media`对象还将包含发布媒体的用户的名称和ID。'
- en: '`mern-mediastream/server/controllers/media.controller.js`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/controllers/media.controller.js`：'
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: On the client side, we will set up a corresponding `fetch` method that will
    be used in the `PlayMedia` component to retrieve the related list of media using
    this API.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，我们将设置一个相应的`fetch`方法，该方法将在`PlayMedia`组件中用于使用此API检索相关媒体列表。
- en: '`mern-mediastream/client/media/api-media.js`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/api-media.js`：'
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The RelatedMedia component
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关媒体组件
- en: The `RelatedMedia` component takes the list of related media as a prop from
    the `PlayMedia` component, and renders the details along with a video snapshot
    of each video in the list.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`RelatedMedia`组件从`PlayMedia`组件中以prop的形式获取相关媒体列表，并呈现每个视频的详细信息以及视频快照。'
- en: We iterate through the media list using the `map` function to render each media
    item.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`map`函数遍历媒体列表，以呈现每个媒体项。
- en: '`mern-mediastream/client/media/RelatedMedia.js`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/RelatedMedia.js`：'
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To show the video snapshot, we will use a basic `ReactPlayer` without the controls.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示视频快照，我们将使用一个基本的`ReactPlayer`，没有控件。
- en: '`mern-mediastream/client/media/RelatedMedia.js`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/RelatedMedia.js`：'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Clicking on the snapshot will re-render the PlayMedia view to load the linked
    media details:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 单击快照将重新呈现PlayMedia视图，以加载链接的媒体详细信息。
- en: '![](assets/087a88c8-0ee4-46c9-a3c7-0e0942fe6fb7.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/087a88c8-0ee4-46c9-a3c7-0e0942fe6fb7.png)'
- en: Beside the snapshot, we will display the details of each video including title,
    genre, created date, and number of views.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除了快照之外，我们还将显示每个视频的详细信息，包括标题、流派、创建日期和观看次数。
- en: '`mern-mediastream/client/media/RelatedMedia.js`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/RelatedMedia.js`：'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To use this `RelatedMedia` component in the view, we will add it in the `PlayMedia`
    component.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在视图中使用`RelatedMedia`组件，我们将在`PlayMedia`组件中添加它。
- en: The PlayMedia component
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放媒体组件
- en: The `PlayMedia` component consists of the `Media` and `RelatedMedia` child components
    along with an autoplay toggle, and it provides data to these components when it
    loads in the view. To render the `PlayMedia` component when individual media links
    are accessed by the user, we will add a `Route` in `MainRouter` to mount `PlayMedia`
    at `'/media/:mediaId'`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`PlayMedia`组件由`Media`和`RelatedMedia`子组件以及自动播放切换按钮组成，并在视图加载时向这些组件提供数据。为了在用户访问单个媒体链接时呈现`PlayMedia`组件，我们将在`MainRouter`中添加一个`Route`来在`''/media/:mediaId''`处挂载`PlayMedia`。'
- en: '`mern-mediastream/client/MainRouter.js`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/MainRouter.js`：'
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When the `PlayMedia` component mounts, it will fetch the media data and the
    related media list from the server using the `loadMedia` function based on the
    `media ID` parameter in the route link.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当`PlayMedia`组件挂载时，它将使用`loadMedia`函数基于路由链接中的`媒体ID`参数从服务器获取媒体数据和相关媒体列表。
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/PlayMedia.js`：'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `loadMedia` function uses the media ID and the `read` API `fetch` method
    to retrieve the media details from the server. Then, it uses the `listRelated`
    API fetch method to retrieve the related media list from the server and sets the
    values to state.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadMedia`函数使用媒体ID和`read`API的`fetch`方法从服务器检索媒体详细信息。然后，它使用`listRelated`API的fetch方法从服务器检索相关媒体列表，并将值设置为状态。'
- en: The `loadMedia` function is called with the `mediaId` value when the component
    mounts and also when it will receive props.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当组件挂载时，将使用`mediaId`值调用`loadMedia`函数，也会在接收到props时调用。
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/PlayMedia.js`：'
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To access the `mediaId` parameter in the route URL when the component mounts,
    we need to access the react-router `match` object in the component's constructor.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在组件挂载时访问路由URL中的`mediaId`参数，我们需要在组件的构造函数中访问react-router的`match`对象。
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/PlayMedia.js`：'
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The media and related media list values stored in the component's state are
    used to pass relevant props to the child components that are added in the view. For
    example, the `RelatedMedia` component is only rendered if the list of related
    media contains any items, and passed to the list as a prop.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在组件状态中的媒体和相关媒体列表值用于将相关的props传递给视图中添加的子组件。例如，只有在相关媒体列表包含任何项目时，才会渲染`RelatedMedia`组件，并将其作为prop传递给列表。
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/PlayMedia.js`：'
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Later in the chapter, in the *Autoplaying related media* section, we will add
    the autoplay toggle component above the `RelatedMedia` component only if the length
    of the related media list is greater than zero. We will also discuss the implementation
    of the `handleAutoPlay` method that will be passed as a prop to the `Media` component,
    along with the media detail object, and the video URL for the first media in the
    related media list as the next URL to play.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的*自动播放相关媒体*部分，如果相关媒体列表的长度大于零，我们将在`RelatedMedia`组件上方添加自动播放切换组件。我们还将讨论`handleAutoPlay`方法的实现，该方法将作为prop传递给`Media`组件，以及媒体详情对象和相关媒体列表中第一个媒体的视频URL作为下一个要播放的URL。
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/PlayMedia.js`：'
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `Media` component renders the media details, and also a media player that
    allows viewers to control the streaming of the video.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`Media`组件渲染媒体详情，还有一个媒体播放器，允许观众控制视频的流媒体。'
- en: Media player
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体播放器
- en: 'We will customize the player controls on `ReactPlayer` to replace the default
    browser controls with a custom look and functionality, as seen in this screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将自定义`ReactPlayer`上的播放器控件，以替换默认的浏览器控件，具有自定义外观和功能，如屏幕截图所示：
- en: '![](assets/2c97a393-aea9-4d2b-ad38-f61da596bf40.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2c97a393-aea9-4d2b-ad38-f61da596bf40.png)'
- en: The controls will be added below the video and will include the progress seekbar,
    the play, pause, next, volume, loop, and fullscreen options, and also display
    the played-duration time.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 控件将添加在视频下方，并包括进度查找栏、播放、暂停、下一个、音量、循环和全屏选项，还会显示已播放的持续时间。
- en: Updating the Media component
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新媒体组件
- en: We will create a new `MediaPlayer` component that will contain the customized
    `ReactPlayer`. In the `Media` component, we will replace the previously used `ReactPlayer`
    with the new `MediaPlayer` component, and pass on the video source URL, the next
    video's URL and the `handleAutoPlay` method, which are received as `props` from
    the `PlayMedia` component.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的`MediaPlayer`组件，其中包含自定义的`ReactPlayer`。在`Media`组件中，我们将用新的`MediaPlayer`组件替换先前使用的`ReactPlayer`，并将视频源URL、下一个视频的URL和`handleAutoPlay`方法作为props从`PlayMedia`组件接收。
- en: '`mern-mediastream/client/media/Media.js`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/Media.js`：'
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Initializing the media player
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化媒体播放器
- en: The `MediaPlayer` component will contain the `ReactPlayer` component, starting
    with the initial control values before we add the custom controls and handling
    code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`MediaPlayer`组件将包含`ReactPlayer`组件，首先使用初始控制值，然后添加自定义控件和处理代码。'
- en: First, we will set the initial control values to `state`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将将初始控制值设置为`state`。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the view, we will add `ReactPlayer` with the control values and source URL,
    using the prop sent from the `Media` component.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中，我们将使用从`Media`组件发送的prop来添加带有控制值和源URL的`ReactPlayer`。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We will get a reference to this player, so it can be used in the change-handling
    code for the custom controls.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获取对此播放器的引用，以便在自定义控件的更改处理代码中使用它。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If the source video cannot be loaded, we will catch the error.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法加载源视频，我们将捕获错误。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Then we will conditionally show an error message in the view.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将在视图中有条件地显示错误消息。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Custom media controls
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义媒体控件
- en: We will add custom player control elements below the video and manipulate their
    functionality using the options and events provided by the `ReactPlayer` API.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在视频下方添加自定义播放器控件元素，并使用`ReactPlayer` API提供的选项和事件来操纵它们的功能。
- en: Play, pause, and replay
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放、暂停和重播
- en: 'Users will be able to play, pause, and replay the current video, and we will
    implement these three options using `Material-UI` components bound to `ReactPlayer`
    attributes and events:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将能够播放、暂停和重播当前视频，我们将使用`Material-UI`组件绑定到`ReactPlayer`属性和事件来实现这三个选项：
- en: '![](assets/52a12bc4-9e39-4efc-bfba-c5d77ff41219.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/52a12bc4-9e39-4efc-bfba-c5d77ff41219.png)'
- en: To implement the play, pause, and replay functionality, we will add a play,
    pause, or replay icon button conditionally depending on whether the video is playing,
    paused, or has ended.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现播放、暂停和重播功能，我们将有条件地添加一个播放、暂停或重播图标按钮，具体取决于视频是正在播放、暂停还是已结束。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When the user clicks the button, we will update the playing value in state,
    so that `ReactPlayer` is updated.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击按钮时，我们将更新状态中的playing值，以便更新`ReactPlayer`。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Play next
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放下一个
- en: 'Users will be able to play the next video in the related media list using the
    next button:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将能够使用下一个按钮播放相关媒体列表中的下一个视频：
- en: '![](assets/26dd9561-6f17-4f76-b118-a5755e88fef7.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/26dd9561-6f17-4f76-b118-a5755e88fef7.png)'
- en: The next button will be disabled if the related list does not contain any media.
    The play next icon will basically link to the next URL value passed in as a prop
    from `PlayMedia`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果相关列表不包含任何媒体，下一个按钮将被禁用。播放下一个图标基本上将链接到从`PlayMedia`传递的下一个URL值。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Clicking on this `next` button will reload the `PlayMedia` component with the
    new media details and start playing the video.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 点击此“下一个”按钮将重新加载带有新媒体详情的`PlayMedia`组件并开始播放视频。
- en: Loop on ended
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束时循环
- en: 'Users will also be able to set the current video to keep playing in a loop
    using the loop button:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以使用循环按钮将当前视频设置为保持循环播放：
- en: '![](assets/bd40c922-9269-4e12-abb0-13d1cc516a7c.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bd40c922-9269-4e12-abb0-13d1cc516a7c.png)'
- en: We will set up a loop icon button that will render in a different color to indicate
    whether it is set or unset.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置一个循环图标按钮，以显示不同的颜色，以指示它是设置还是未设置。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When the loop icon button is clicked, it updates the `loop` value in state.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当循环图标按钮被点击时，它会更新状态中的`loop`值。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We will need to catch the `onEnded` event, to check whether `loop` has been
    set to true, so the `playing` value can be updated accordingly.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要捕获`onEnded`事件，以检查`loop`是否被设置为true，这样`playing`值可以相应地更新。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`:'
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: So if the `loop` is set to true, when the video ends, it will start playing
    again, otherwise it will stop playing and render the replay button.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果`loop`设置为true，当视频结束时，它将重新开始播放，否则它将停止播放并渲染重播按钮。
- en: Volume control
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音量控制
- en: 'In order to control the volume on the video being played, users will have the
    option to increase or decrease the volume, as well as to mute or un-mute. The
    rendered volume controls will be updated based on the user action and current
    value of the volume:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制正在播放的视频的音量，用户可以选择增加或减少音量，以及静音或取消静音。渲染的音量控件将根据用户操作和音量的当前值进行更新：
- en: 'A volume up icon will be rendered if the volume is raised:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果音量提高，将呈现一个音量增加图标：
- en: '![](assets/74ba3641-fea7-48d8-8b15-8a36ad7f0df4.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/74ba3641-fea7-48d8-8b15-8a36ad7f0df4.png)'
- en: 'A volume off icon will be rendered if the user decreases the volume to zero:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户将音量减少到零，将呈现一个音量关闭图标：
- en: '![](assets/cef09c93-73fe-48bc-a36b-d97965b28e14.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cef09c93-73fe-48bc-a36b-d97965b28e14.png)'
- en: 'A volume mute icon button will be shown if the user clicks the icon to mute
    the volume:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户点击图标静音音量时，将显示一个音量静音图标按钮：
- en: '![](assets/b34a64a7-d26b-487d-9783-48b66f54b040.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b34a64a7-d26b-487d-9783-48b66f54b040.png)'
- en: 'To implement this, we will conditionally render the different icons in an `IconButton`,
    based on the `volume`, `muted`, `volume_up`, and `volume_off` values:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将有条件地在`IconButton`中渲染不同的图标，根据`volume`、`muted`、`volume_up`和`volume_off`的值：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When this volume button is clicked, it will either mute or unmute the volume.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击音量按钮时，它将静音或取消静音。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`:'
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: To allow users to increase or decrease the volume, we will add an `input range`
    that will allow users to set a volume value between `0` and `1`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许用户增加或减少音量，我们将添加一个`input range`，允许用户设置音量值在`0`和`1`之间。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`:'
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Changing the `value` on the input range will set the `volume` value accordingly.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 更改输入范围上的`value`将相应地设置`volume`值。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`:'
- en: '[PRE27]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Progress control
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进度控制
- en: 'We will use a Material-UI `LinearProgress` component to indicate how much of
    the video has been buffered, and how much has been played. Then we''ll combine
    this component with a `range input` to give users the ability to move the time
    slider to a different part of the video and play from there:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Material-UI的`LinearProgress`组件来指示视频已缓冲的部分和已播放的部分。然后我们将把这个组件与`range input`结合起来，让用户能够移动时间滑块到视频的不同部分并从那里播放：
- en: '![](assets/3406e0dd-b022-472d-aec1-16d1f4697a25.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3406e0dd-b022-472d-aec1-16d1f4697a25.png)'
- en: 'The `LinearProgress` component will take the `played` and `loaded` values to
    show each in a different color:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`LinearProgress`组件将采用`played`和`loaded`值来显示不同的颜色：'
- en: '[PRE28]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: To update the `LinearProgress` component when the video is playing or loading,
    we will use the `onProgress` event listener to set the current values for `played`
    and `loaded`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在视频播放或加载时更新`LinearProgress`组件，我们将使用`onProgress`事件监听器来设置`played`和`loaded`的当前值。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`:'
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: For time-sliding control, we will add the `range input` element and use CSS
    styles to place it over the `LinearProgress` component. The current value of the
    range will update as the `played` value changes, so the range value seems to be
    moving with the progression of the video.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于时间滑动控制，我们将添加`range input`元素，并使用CSS样式将其放置在`LinearProgress`组件上。随着`played`值的变化，范围的当前值将更新，因此范围值似乎随着视频的进展而移动。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`:'
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the case where the user drags and sets the range picker on their own, we
    will add code to handle the `onMouseDown`, `onMouseUp`, and `onChange` events
    to start the video from the desired position.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户自行拖动并设置范围选择器的情况下，我们将添加代码来处理“onMouseDown”、“onMouseUp”和“onChange”事件，以从所需位置开始播放视频。
- en: When the user starts dragging by holding the mouse down, we will set seeking
    to true, so that the progress values are not set to `played` and `loaded`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按住鼠标开始拖动时，我们将把seeking设置为true，以便进度值不设置为“played”和“loaded”。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE31]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As the range value change occurs, we will set the `played` value and also the
    `ended` value, after checking whether the user dragged the time slider to the
    end of the video.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 随着范围值的变化，我们将设置“played”值和“ended”值，并检查用户是否将时间滑块拖到视频的末尾。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE32]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When the user is done dragging and lifts their click on the mouse, we will set
    `seeking` to `false`, and set the `seekTo` value for the player to the current
    value in the `range input`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户完成拖动并松开鼠标点击时，我们将把“seeking”设置为“false”，并将播放器的“seekTo”值设置为“range input”中的当前值。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE33]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This way, the user will be able to select any part of the video and also get
    visual information of the time progress of the video being streamed.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，用户将能够选择视频的任何部分，并获得视频流的时间进度的视觉信息。
- en: Fullscreen
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全屏
- en: 'Users will be able to view the video in fullscreen by clicking the fullscreen
    button in the controls:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以通过单击控件中的全屏按钮在全屏模式下观看视频：
- en: '![](assets/94d9b7b1-191f-48ae-87bf-ad155addb093.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/94d9b7b1-191f-48ae-87bf-ad155addb093.png)'
- en: In order to implement a fullscreen option for the video, we will use the `screenfull`
    npm module to track when the view is in fullscreen, and `findDOMNode` from `react-dom`
    to specify which DOM element will be made fullscreen with `screenfull`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为视频实现全屏选项，我们将使用“screenfull” npm模块来跟踪视图是否处于全屏状态，并使用“react-dom”中的“findDOMNode”来指定哪个DOM元素将与“screenfull”一起全屏显示。
- en: 'To set up the `fullscreen` code, we first install `screenfull`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置“全屏”代码，我们首先安装“screenfull”：
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Then import `screenfull` and `findDOMNode` into the `MediaPlayer` component.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将“screenfull”和“findDOMNode”导入到“MediaPlayer”组件中。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE35]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: When the `MediaPlayer` component mounts, we will add a `screenfull` change event
    listener that will update the `fullscreen` value in state to indicate whether
    the screen is in fullscreen or not.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当“MediaPlayer”组件挂载时，我们将添加一个“screenfull”更改事件侦听器，以更新状态中的“全屏”值，以指示屏幕是否处于全屏状态。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE36]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In the view, we will add an `icon` button for `fullscreen` with the other control
    buttons.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中，我们将在其他控制按钮中添加一个“全屏”图标按钮。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: When the user clicks this button, we will use `screenfull` and `findDOMNode`
    to make the video player fullscreen.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击此按钮时，我们将使用“screenfull”和“findDOMNode”使视频播放器全屏。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE38]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The user can then watch the video in fullscreen, where they can press *Esc* at
    any time to exit fullscreen and get back to the PlayMedia view.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然后用户可以在全屏模式下观看视频，可以随时按*Esc*退出全屏并返回到PlayMedia视图。
- en: Played duration
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放持续时间
- en: 'In the custom media controls section of the media player, we want to show the
    time that has already passed, and the total duration of the video in a readable
    time format:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在媒体播放器的自定义媒体控件部分，我们希望以可读的时间格式显示已经过去的时间和视频的总持续时间：
- en: '![](assets/bc1f8bcf-a2d9-4303-9243-5ec1f87e922d.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bc1f8bcf-a2d9-4303-9243-5ec1f87e922d.png)'
- en: To show the time, we can utilize the HTML `time` element.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示时间，我们可以利用HTML的`time`元素。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`:'
- en: '[PRE39]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We will get the `duration` value for a video by using the `onDuration` event
    and then set it to state, so it can be rendered in the time element.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用`onDuration`事件获取视频的`duration`值，然后将其设置为状态，以便在时间元素中渲染。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`:'
- en: '[PRE40]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: To make the duration value readable, we will use the following `format` function.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使持续时间值可读，我们将使用以下的`format`函数。
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`:'
- en: '[PRE41]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `format` function takes the duration value in seconds, and converts it to
    the `hh/mm/ss` format.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`format`函数接受以秒为单位的持续时间值，并将其转换为`hh/mm/ss`格式。'
- en: The controls added to the custom media player are all mostly based on some of
    the available functionality in the `ReactPlayer` module, and its examples provided
    as documentation. There are more options available for further customizations
    and extensions, which may be explored more depending on specific feature requirements.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到自定义媒体播放器的控件大多基于`ReactPlayer`模块中的一些可用功能，以及其提供的示例作为文档。还有更多选项可用于进一步定制和扩展，具体取决于特定的功能需求。
- en: Autoplaying related media
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动播放相关媒体
- en: We will complete the autoplay functionality discussed earlier by adding a toggle
    in `PlayMedia`, and implementing the `handleAutoplay` method, which needs to be
    called when a video ends, in the `MediaPlayer` component.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过在`PlayMedia`中添加一个切换并实现`handleAutoplay`方法来完成之前讨论的自动播放功能，当相关媒体列表中有媒体时，需要在`MediaPlayer`组件中调用该方法。
- en: Toggling autoplay
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换自动播放
- en: 'Besides letting the user set autoplay, the toggle will also indicate whether
    it is currently set or not:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 除了允许用户设置自动播放外，切换还将指示当前是否已设置自动播放：
- en: '![](assets/cc0fa409-f523-44c3-9234-d5ebe695c302.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cc0fa409-f523-44c3-9234-d5ebe695c302.png)'
- en: For the autoplay toggle, we will use a `Material-UI` `Switch` component along
    with a `FormControlLabel`, and add it to the `PlayMedia` component over the `RelatedMedia`
    component to be rendered only when there are media in the related media list.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自动播放切换，我们将使用`Material-UI`的`Switch`组件以及`FormControlLabel`，并将其添加到`PlayMedia`组件中，仅在相关媒体列表中有媒体时进行渲染。
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/PlayMedia.js`:'
- en: '[PRE42]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: To handle the change to the toggle and reflect it in the state's `autoplay`
    value, we will use the following `onChange` handler function.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 处理切换并在状态的`autoplay`值中反映这一变化，我们将使用以下的`onChange`处理函数。
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/PlayMedia.js`:'
- en: '[PRE43]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Handle autoplay across components
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨组件处理自动播放
- en: '`PlayMedia` passes the `handleAutoPlay` method to the `Media` component as
    a prop to be used by the `MediaPlayer` component when a video ends.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`PlayMedia`将`handleAutoPlay`方法作为属性传递给`Media`组件，以便在视频结束时由`MediaPlayer`组件使用。'
- en: The functionality desired here is that when a video ends, if autoplay is set
    to true and the current related list of media is not empty, `PlayMedia` should
    load the media details of the first video in the related list. In turn, the `Media`
    and `MediaPlayer` components should update with the new media details, start playing
    the new video and render the controls on the player appropriately. The list in
    the `RelatedMedia` component should also update with the current media removed
    from the list, so only the remaining playlist items are visible.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这里期望的功能是，当视频结束时，如果自动播放设置为true并且当前相关媒体列表不为空，则`PlayMedia`应加载相关列表中第一个视频的媒体详情。反过来，`Media`和`MediaPlayer`组件应更新为新的媒体详情，开始播放新视频，并适当地渲染播放器上的控件。`RelatedMedia`组件中的列表也应更新，从列表中移除当前媒体，因此只有剩余的播放列表项可见。
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/PlayMedia.js`：'
- en: '[PRE44]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The `handleAutoplay` method takes care of the following when a video ends in
    the `MediaPlayer` component:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleAutoplay`方法在`MediaPlayer`组件中视频结束时处理以下内容：'
- en: It takes a callback function from the `onEnded` event listener in the `MediaPlayer`
    component. This callback will be executed if autoplay is not set or the related
    media list is empty, so that the controls on the `MediaPlayer` are rendered to
    show that the video has ended.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它从`MediaPlayer`组件的`onEnded`事件监听器中获取回调函数。如果未设置自动播放或相关媒体列表为空，则将执行此回调，以便在`MediaPlayer`上呈现视频已结束的控件。
- en: 'If autoplay is set and there is more than one related media in the list, then:'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设置了自动播放并且列表中有多个相关媒体，则：
- en: The first item in the related media list is set as the current media object
    in state so it can be rendered
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将相关媒体列表中的第一项设置为状态中的当前媒体对象，以便进行渲染
- en: The related media list is updated by removing this first item that will now
    start playing in the view
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过删除将在视图中开始播放的第一个项目来更新相关媒体列表
- en: If autoplay is set and there is only one item in the related media list, this
    last item is set to media so it can start playing, and the `listRelated` fetch
    method is called to repopulate the RelatedMedia view with the related media of
    this last item.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设置了自动播放并且相关媒体列表中只有一个项目，则将此最后一个项目设置为媒体，以便开始播放，并调用`listRelated`获取方法来重新填充RelatedMedia视图与此最后一个项目的相关媒体。
- en: Update state when video ends in MediaPlayer
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MediaPlayer中视频结束时更新状态
- en: The `MediaPlayer` receives the `handleAutoplay` method as a prop from `PlayMedia`.
    We will update the listener code for the `onEnded` event to execute this method
    only when the `loop` is set to `false` for the current video.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`MediaPlayer`从`PlayMedia`中接收`handleAutoplay`方法作为属性。我们将更新`onEnded`事件的监听器代码，仅当`loop`设置为当前视频的`false`时才执行此方法。'
- en: '`mern-mediastream/client/media/MediaPlayer.js`:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/MediaPlayer.js`：'
- en: '[PRE45]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: A callback function is passed to the `handleAutoplay` method, in order to set
    playing to false and render the replay icon button instead of the play or pause
    icon button, after it is determined in `PlayMedia` that the autoplay has not been
    set or that the related media list is empty.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数被传递给`handleAutoplay`方法，以便在`PlayMedia`中确定自动播放未设置或相关媒体列表为空后，将播放设置为false，并渲染重播图标按钮而不是播放或暂停图标按钮。
- en: The autoplay functionality will continue playing the related videos one after
    the other with this implementation. This implementation demonstrates another way
    to update state across the components when the values are interdependent.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种实现，自动播放功能将继续播放相关视频。这种实现演示了在值相互依赖时跨组件更新状态的另一种方式。
- en: Server-side rendering with data
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据进行服务器端渲染
- en: Search engine optimization is important for any web application that delivers
    content to its users, and wants to make the content easy to find. Generally, content
    on any webpage will have a better chance of getting more viewers if the content
    is easily readable to search engines. When a search engine bot accesses a web
    URL, it will get the server-side rendered output. Hence to make the content discoverable,
    the content should be part of the server-side rendered output.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索引擎优化对于向用户提供内容并希望使内容易于查找的任何Web应用程序都很重要。通常，如果网页上的内容对搜索引擎易于阅读，那么该网页上的内容就有更多的机会获得更多的观众。当搜索引擎爬虫访问网址时，它将获取服务器端渲染的输出。因此，为了使内容可发现，内容应该是服务器端渲染输出的一部分。
- en: In MERN Mediastream, we will use the case of making media details popular across
    search engine results, to demonstrate how to inject data into a server-side rendered
    view in a MERN application. We will focus on implementing server-side rendering
    with data injected for the `PlayMedia` component that is returned at the `'/media/:mediaId'` path.
    The general steps outlined here can be used to implement SSR with data for other
    views.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Mediastream中，我们将使用使媒体详情在搜索引擎结果中受欢迎的案例，以演示如何在MERN应用程序中将数据注入到服务器端渲染的视图中。我们将专注于为在`'/media/:mediaId'`路径返回的`PlayMedia`组件实现服务器端渲染并注入数据。这里概述的一般步骤可以用于为其他视图实现带有数据的SSR。
- en: Route config
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由配置
- en: 'In order to load data for the React views when these are rendered on the server,
    we will use the React Router Config npm module, which provides static route configuration
    helpers for React Router:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在服务器上渲染React视图时加载数据，我们将使用React Router Config npm模块，该模块为React Router提供了静态路由配置助手：
- en: '[PRE46]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We will create a route configuration file that will be used to match routes
    with incoming request URLs on the server to check whether data must be injected
    before the server returns the rendered markup.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个路由配置文件，用于在服务器上匹配路由和传入的请求URL，以检查在服务器返回渲染标记之前是否必须注入数据。
- en: For the route configuration in MERN Mediastream, we will only list the route
    that renders the `PlayMedia` component.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Mediastream中的路由配置中，我们只会列出渲染`PlayMedia`组件的路由。
- en: '`mern-mediastream/client/routeConfig.js`:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/routeConfig.js`：'
- en: '[PRE47]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: For this route and component, we will specify the `read` fetch method from `api-media.js`
    as the load data method. Then it will be used to retrieve and inject the data
    into the PlayMedia view when the server generates the markup.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个路由和组件，我们将指定来自`api-media.js`的`read`获取方法作为加载数据的方法。然后它将用于在服务器生成标记时检索并注入数据到PlayMedia视图中。
- en: Updating SSR code for the Express server
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Express服务器的SSR代码
- en: We will update the existing basic server-side rendering code in `server/express.js`
    to add the data-loading functionality for the React views that will get rendered
    server side.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新`server/express.js`中现有的基本服务器端渲染代码，以添加用于在服务器端呈现的React视图的数据加载功能。
- en: Using route config to load data
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路由配置加载数据
- en: We will define `loadBranchData` to use `matchRoutes` from `react-router-config`,
    and the routes defined in the route configuration file to look for a route matching
    the incoming request URL.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义`loadBranchData`来使用`react-router-config`中的`matchRoutes`，以及路由配置文件中定义的路由，以查找与传入请求URL匹配的路由。
- en: '`mern-mediastream/server/express.js`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/express.js`：'
- en: '[PRE48]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: If a matching route is found, then any associated `loadData` method will be
    executed to return a `Promise` containing the fetched data or `null` if there
    were no `loadData` methods.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找到匹配的路由，则将执行任何相关的`loadData`方法，以返回包含获取的数据的`Promise`，或者如果没有`loadData`方法，则返回`null`。
- en: The `loadBranchData` defined here will need to be called whenever the server
    receives a request, so if any matching route is found, we can fetch the relevant
    data and inject it into the React components while rendering server side.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里定义的`loadBranchData`需要在服务器接收到请求时调用，因此如果找到任何匹配的路由，我们可以获取相关数据并在服务器端渲染时将其注入到React组件中。
- en: Isomorphic-fetch
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同构抓取
- en: We will also import isomorphic-fetch in `express.js` so that the `read` fetch
    method, or any other fetch that we defined for the client, can now be used on
    the server.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在`express.js`中导入同构抓取，以便可以在服务器上使用`read`抓取方法，或者我们为客户端定义的任何其他抓取。
- en: '`mern-mediastream/server/express.js`:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/express.js`：'
- en: '[PRE49]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Absolute URL
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绝对URL
- en: One issue with using `isomorphic-fetch` is that it currently requires the fetch
    URLs to be absolute. So we need to update the URL used in the `read` fetch method,
    defined in `api-media.js`, into an absolute URL.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`同构抓取`的一个问题是它当前要求抓取URL是绝对的。因此，我们需要将在`api-media.js`中定义的`read`抓取方法中使用的URL更新为绝对URL。
- en: Instead of hardcoding a server address in the code, we will set a `config` variable
    in `config.js`.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`config.js`中设置一个`config`变量，而不是在代码中硬编码服务器地址。
- en: '`mern-mediastream/config/config.js`:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/config/config.js`：'
- en: '[PRE50]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Then we will update the `read` method in `api-media.js` to make it use an absolute
    URL to call the read API on the server.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将更新`api-media.js`中的`read`方法，使其使用绝对URL来调用服务器上的读取API。
- en: '`mern-mediastream/client/media/api-media.js:`'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/api-media.js`：'
- en: '[PRE51]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This will make the `read` fetch call compatible with `isomorphic-fetch` so it
    can be used without a problem on the server.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使`read`抓取调用与`同构抓取`兼容，因此在服务器上可以无问题地使用它。
- en: Injecting data into React app
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据注入到React应用程序中
- en: In the existing server-side render code in the backend, we use `ReactDOMServer`
    to convert the React app to markup. We will update this code in `express.js` to
    inject data as a prop into `MainRouter` after it is fetched using the `loadBranchData`
    method.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端现有的服务器端渲染代码中，我们使用`ReactDOMServer`将React应用程序转换为标记。我们将在`express.js`中更新此代码，以在使用`loadBranchData`方法获取数据后将数据作为属性注入到`MainRouter`中。
- en: '`mern-mediastream/server/express.js`:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/server/express.js`：'
- en: '[PRE52]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: For this data to be added in the rendered `PlayMedia` component when the server
    generates the markup, we need to update the client-side code to consider server
    injected data.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在服务器生成标记时将这些数据添加到渲染的`PlayMedia`组件中，我们需要更新客户端代码以考虑服务器注入的数据。
- en: Applying server-injected data in client code
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在客户端代码中应用服务器注入的数据
- en: On the client side, we will access the data passed from the server and add it
    to the PlayMedia view.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，我们将访问从服务器传递的数据，并将其添加到PlayMedia视图中。
- en: Passing data props to PlayMedia from MainRouter
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从MainRouter向PlayMedia传递数据属性
- en: While generating markup with `ReactDOMServer.renderToString`, we pass the preloaded
    data to `MainRouter` as a prop. We can access that data prop in the constructor
    for `MainRouter`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`ReactDOMServer.renderToString`生成标记时，我们将预加载的数据传递给`MainRouter`作为属性。我们可以在`MainRouter`的构造函数中访问该数据属性。
- en: '`mern-mediastream/client/MainRouter.js`:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/MainRouter.js`：'
- en: '[PRE53]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: To give `PlayMedia` access to this data, we will change the `Route` component
    for `PlayMedia` to pass this data as a prop.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让`PlayMedia`访问这些数据，我们将更改`PlayMedia`的`Route`组件，以将这些数据作为属性传递。
- en: '`mern-mediastream/client/MainRouter.js`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/MainRouter.js`：'
- en: '[PRE54]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Rendering received data in PlayMedia
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在PlayMedia中呈现接收到的数据
- en: In the `PlayMedia` component, we will check for data passed from the server
    and set the values to state so the media details are rendered in the view.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PlayMedia`组件中，我们将检查从服务器传递的数据并将值设置为状态，以便在视图中呈现媒体详细信息。
- en: '`mern-mediastream/client/media/PlayMedia.js`:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-mediastream/client/media/PlayMedia.js`：'
- en: '[PRE55]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This will produce server-generated markup with media data injected in the PlayMedia
    view.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成带有媒体数据注入PlayMedia视图的服务器生成标记。
- en: Checking the implementation of SSR with data
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查带有数据的SSR实现
- en: For MERN Mediastream, any of the links that render PlayMedia should now generate
    markup on the server side with media details preloaded. We can verify that the
    implementation for server-side rendering with data is working properly by opening
    the app URL in a browser with JavaScript turned off. We will look into how to
    achieve this in the Chrome browser and what the resulting view should show to
    the user and to the search engine.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 对于MERN Mediastream，任何呈现PlayMedia的链接现在应该在服务器端生成预加载媒体详情的标记。我们可以通过在关闭JavaScript的浏览器中打开应用程序URL来验证服务器端渲染数据的实现是否正常工作。我们将研究如何在Chrome浏览器中实现这一点，以及结果视图应该向用户和搜索引擎显示什么。
- en: Test in Chrome
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Chrome中进行测试
- en: Testing this implementation in Chrome just requires updating the Chrome settings
    and loading the application in a tab with JS blocked.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在Chrome中测试这个实现只需要更新Chrome设置，并在禁用JS的标签中加载应用程序。
- en: Loading a page with JS enabled
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载启用JS的页面
- en: First, open the application in Chrome, then browse to any media link and let
    it render normally with JavaScript enabled. This should show the implemented PlayMedia
    view with the functioning media player and the related media list.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在Chrome中打开应用程序，然后浏览到任何媒体链接，并让它以启用JavaScript的正常方式呈现。这应该显示已实现的PlayMedia视图，其中包括功能齐全的媒体播放器和相关的媒体列表。
- en: Disabling JS from settings
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从设置中禁用JS
- en: 'Next, disable JavaScript on Chrome. For this you can go to advanced settings
    at `chrome://settings/content/javascript`, and use the toggle to block JavaScript:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在Chrome上禁用JavaScript。您可以转到`chrome://settings/content/javascript`的高级设置，并使用切换按钮来阻止JavaScript：
- en: '![](assets/7b2d5eb9-1018-48e8-9041-05b34aa960dc.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7b2d5eb9-1018-48e8-9041-05b34aa960dc.png)'
- en: 'Now, refresh the media link in the MERN Mediastream tab, and there will be
    an icon next to the address URL showing that JavaScript is indeed disabled:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，刷新MERN Mediastream标签中的媒体链接，地址URL旁边将会显示一个图标，表明JavaScript确实已禁用：
- en: '![](assets/5d31d57c-a0f6-42de-b110-195cba56852b.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5d31d57c-a0f6-42de-b110-195cba56852b.png)'
- en: PlayMedia view with JS blocked
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有JS阻止的PlayMedia视图
- en: 'The PlayMedia view should render similar to the following picture, with only
    the media details populated. But the user interface is no longer interactive as
    JavaScript is blocked and only the default browser controls are operational:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: PlayMedia视图应该呈现类似于以下图片，只有媒体详情被填充。但是由于JavaScript被阻止，用户界面不再具有交互性，只有默认的浏览器控件是可操作的。
- en: '![](assets/f4559f8f-6d44-4ccd-a87a-6ab9e218e3b1.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f4559f8f-6d44-4ccd-a87a-6ab9e218e3b1.png)'
- en: This is what a search engine bot will read for media content and what a user
    will see when no JavaScript loads on the browser.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这是搜索引擎机器人将读取的媒体内容，以及当浏览器未加载JavaScript时用户将看到的内容。
- en: MERN Mediastream now has fully operational media-playing tools that will allow
    users to browse and play videos with ease. In addition, the media views that display
    individual media content are now search-engine optimized because of server-side
    rendering with preloaded data.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Mediastream现在拥有完全操作的媒体播放工具，这将允许用户轻松浏览和播放视频。此外，显示单个媒体内容的媒体视图现在经过了服务器端渲染预加载数据的优化，以便搜索引擎优化。
- en: Summary
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we completely upgraded the play media page on MERN Mediastream
    by adding custom media player controls using options available with `ReactPlayer`
    enabling the autoplay functionality for a related media playlist after retrieving
    the related media from the database and making the media details search engine
    readable by injecting data from the server when the view is rendered on the server.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过使用`ReactPlayer`提供的选项，完全升级了MERN Mediastream上的播放媒体页面，实现了自定义媒体播放器控件，使相关媒体从数据库中检索后，能够启用自动播放功能，并且在服务器渲染视图时，通过从服务器注入数据，使媒体详细信息对搜索引擎可读。
- en: Now that we have explored advanced capabilities, such as streaming and SEO,
    with the MERN stack technologies, in the upcoming chapters, we will test the potential
    of this stack further by incorporating virtual reality elements into a web application.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经探索了MERN堆栈技术的高级功能，比如流媒体和SEO，在接下来的章节中，我们将通过将虚拟现实元素融入到Web应用程序中，进一步测试这个堆栈的潜力。
