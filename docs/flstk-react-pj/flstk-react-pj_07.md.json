["```jsx\n<AddToCart cartStyle={classes.addCart} item={this.state.product}/>\n```", "```jsx\n{this.props.item.quantity >= 0 ? \n    <IconButton color=\"accent\" dense=\"dense\" onClick={this.addToCart}>\n      <AddCartIcon className={this.props.cartStyle || \n     classes.iconButton}/>\n    </IconButton> : \n    <IconButton disabled={true} color=\"accent\" dense=\"dense\"\n      <DisabledCartIcon className={this.props.cartStyle || \n     classes.disabledIconButton}/>\n    </IconButton>}\n```", "```jsx\naddToCart = () => {\n    cart.addItem(this.props.item, () => {\n      this.setState({redirect:true})\n    })\n}\n```", "```jsx\naddItem(item, cb) {\n    let cart = []\n    if (typeof window !== \"undefined\") {\n      if (localStorage.getItem('cart')) {\n        cart = JSON.parse(localStorage.getItem('cart'))\n      }\n      cart.push({\n        product: item,\n        quantity: 1,\n        shop: item.shop._id\n      })\n      localStorage.setItem('cart', JSON.stringify(cart))\n      cb()\n    }\n}\n```", "```jsx\n<Link to=\"/cart\">\n    <Button color={isActive(history, \"/cart\")}>\n       Cart\n       <Badge color=\"accent\" badgeContent={cart.itemTotal()} >\n           <CartIcon />\n       </Badge>\n    </Button>\n</Link>\n```", "```jsx\nitemTotal() {\n    if (typeof window !== \"undefined\") {\n      if (localStorage.getItem('cart')) {\n        return JSON.parse(localStorage.getItem('cart')).length\n      }\n    }\n    return 0\n}\n```", "```jsx\n<Grid container spacing={24}>\n      <Grid item xs={6} sm={6}>\n            <CartItems checkout={this.state.checkout}\n setCheckout={this.setCheckout}/>\n      </Grid>\n {this.state.checkout && \n      <Grid item xs={6} sm={6}>\n        <Checkout/>\n      </Grid>}\n</Grid>\n```", "```jsx\nsetCheckout = val =>{\n    this.setState({checkout: val})\n}\n```", "```jsx\n<Route path=\"/cart\" component={Cart}/>\n```", "```jsx\n{this.state.cartItems.length > 0 ? <span>\n      {this.state.cartItems.map((item, i) => {\n          ...          \n            \u2026 Product details\n              \u2026 Edit quantity\n              \u2026 Remove product option\n          ...\n        })\n      }\n     \u2026 Show total price and Checkout options \u2026 \n    </span> : \n    <Typography type=\"subheading\" component=\"h3\" color=\"primary\">\n        No items added to your cart.    \n    </Typography>\n}\n```", "```jsx\ngetCart() {\n    if (typeof window !== \"undefined\") {\n      if (localStorage.getItem('cart')) {\n        return JSON.parse(localStorage.getItem('cart'))\n      }\n    }\n    return []\n}\n```", "```jsx\ncomponentDidMount = () => {\n    this.setState({cartItems: cart.getCart()})\n}\n```", "```jsx\n<span key={i}>\n  <Card>\n    <CardMedia image={'/api/product/image/'+item.product._id}\n         title={item.product.name}/>\n         <CardContent>\n                <Link to={'/product/'+item.product._id}>\n                    <Typography type=\"title\" component=\"h3\" \n                    color=\"primary\">\n                      {item.product.name}</Typography>\n                </Link>\n                <Typography type=\"subheading\" component=\"h3\" \n               color=\"primary\">\n                      $ {item.product.price}\n                </Typography>\n                <span>${item.product.price * item.quantity}</span>\n                <span>Shop: {item.product.shop.name}</span>\n         </CardContent>\n         <div>\n          \u2026 Editable quantity \u2026\n          \u2026 Remove item option ...\n         </div>\n </Card>\n  <Divider/>\n</span> \n```", "```jsx\nQuantity: <TextField\n          value={item.quantity}\n          onChange={this.handleChange(i)}\n          type=\"number\"\n          inputProps={{ min:1 }}\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n```", "```jsx\nhandleChange = index => event => {\n    let cartItems = this.state.cartItems \n    if(event.target.value == 0){\n      cartItems[index].quantity = 1 \n    }else{\n      cartItems[index].quantity = event.target.value \n    }\n    this.setState({cartItems: cartItems}) \n    cart.updateCart(index, event.target.value) \n  } \n```", "```jsx\nupdateCart(itemIndex, quantity) {\n    let cart = []\n    if (typeof window !== \"undefined\") {\n      if (localStorage.getItem('cart')) {\n        cart = JSON.parse(localStorage.getItem('cart'))\n      }\n      cart[itemIndex].quantity = quantity\n      localStorage.setItem('cart', JSON.stringify(cart))\n    }\n}\n```", "```jsx\n<Button color=\"primary\" onClick={this.removeItem(i)}>x Remove</Button>\n```", "```jsx\nremoveItem = index => event =>{\n    let cartItems = cart.removeItem(index)\n    if(cartItems.length == 0){\n      this.props.setCheckout(false)\n    }\n    this.setState({cartItems: cartItems})\n}\n```", "```jsx\nremoveItem(itemIndex) {\n    let cart = []\n    if (typeof window !== \"undefined\") {\n      if (localStorage.getItem('cart')) {\n        cart = JSON.parse(localStorage.getItem('cart'))\n      }\n      cart.splice(itemIndex, 1)\n      localStorage.setItem('cart', JSON.stringify(cart))\n    }\n    return cart\n}\n```", "```jsx\n<span className={classes.total}>Total: ${this.getTotal()}</span>\n```", "```jsx\ngetTotal(){\n    return this.state.cartItems.reduce( function(a, b){\n        return a + (b.quantity*b.product.price)\n    }, 0)\n}\n```", "```jsx\n{!this.props.checkout && (auth.isAuthenticated() ? \n    <Button onClick={this.openCheckout}>\n        Checkout\n    </Button> : \n    <Link to=\"/signin\">\n        <Button>Sign in to checkout</Button>\n    </Link>)\n}\n```", "```jsx\nopenCheckout = () => {\n    this.props.setCheckout(true)\n}\n```", "```jsx\nstripe_seller: {}\n```", "```jsx\n{this.state.user.seller &&\n   (this.state.user.stripe_seller ?\n       (<Button variant=\"raised\" disabled>\n            Stripe connected\n        </Button>) :\n       (<a href={\"https://connect.stripe.com/oauth/authorize?response_type=code&client_id=\"+config.stripe_connect_test_client_id+\"&scope=read_write\"}}>\n           <img src={stripeButton}/>\n        </a>)\n)}\n```", "```jsx\n<Route path=\"/seller/stripe/connect\" component={StripeConnect}/>\n```", "```jsx\n  componentDidMount = () => {\n    const parsed = queryString.parse(this.props.location.search)\n    if(parsed.error){\n      this.setState({error: true})\n    }\n    if(parsed.code){\n      this.setState({connecting: true, error: false})\n      const jwt = auth.isAuthenticated()\n      stripeUpdate({\n        userId: jwt.user._id\n      }, {\n        t: jwt.token\n      }, parsed.code).then((data) => {\n        if (data.error) {\n          this.setState({error: true, connected: false,\n          connecting:false})\n        } else {\n          this.setState({connected: true, connecting: false, \n          error:false})\n        }\n      })\n    }\n }\n```", "```jsx\nconst stripeUpdate = (params, credentials, auth_code) => {\n  return fetch('/api/stripe_auth/'+params.userId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify({stripe: auth_code})\n  }).then((response)=> {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n```", "```jsx\nrouter.route('/api/stripe_auth/:userId')\n   .put(authCtrl.requireSignin, authCtrl.hasAuthorization,   \n    userCtrl.stripe_auth, userCtrl.update)\n```", "```jsx\nnpm install request --save\n```", "```jsx\nconst stripe_auth = (req, res, next) => {\n  request({\n    url: \"https://connect.stripe.com/oauth/token\",\n    method: \"POST\",\n    json: true,\n    body:  \n  {client_secret:config.stripe_test_secret_key,code:req.body.stripe, \n  grant_type:'authorization_code'}\n  }, (error, response, body) => {\n    if(body.error){\n      return res.status('400').json({\n        error: body.error_description\n      })\n    }\n    req.body.stripe_seller = body\n    next()\n  })\n}\n```", "```jsx\nnpm install --save react-stripe-elements\n```", "```jsx\n<script id=\"stripe-js\" src=\"https://js.stripe.com/v3/\" async></script>\n```", "```jsx\ncomponentDidMount = () => {\n    if (window.Stripe) {\n      this.setState({stripe: \n     window.Stripe(config.stripe_test_api_key)})\n    } else {\n      document.querySelector('#stripe-js')\n     .addEventListener('load', () \n     => {\n        this.setState({stripe: \n     window.Stripe(config.stripe_test_api_key)})\n      })\n    }\n }\n```", "```jsx\n<StripeProvider stripe={this.state.stripe}> \n     <Checkout/>\n</StripeProvider>\n```", "```jsx\nstripe_customer: {},\n```", "```jsx\nnpm install stripe --save\n```", "```jsx\nimport stripe from 'stripe'\nconst myStripe = stripe(config.stripe_test_secret_key)\n```", "```jsx\nmyStripe.customers.create({\n            email: req.profile.email,\n            source: req.body.token\n      }).then((customer) => {\n          User.update({'_id':req.profile._id},\n            {'$set': { 'stripe_customer': customer.id }},\n            (err, order) => {\n              if (err) {\n                return res.status(400).send({\n                  error: errorHandler.getErrorMessage(err)\n                })\n              }\n              req.body.order.payment_id = customer.id\n              next()\n        })\n})\n```", "```jsx\n myStripe.customers.update(req.profile.stripe_customer, {\n       source: req.body.token\n     }, \n       (err, customer) => {\n         if(err){\n           return res.status(400).send({\n             error: \"Could not update charge details\"\n           })\n         }\n         req.body.order.payment_id = customer.id\n         next()\n       })\n```", "```jsx\nconst createCharge = (req, res, next) => {\n  if(!req.profile.stripe_seller){\n    return res.status('400').json({\n      error: \"Please connect your Stripe account\"\n    })\n  }\n  myStripe.tokens.create({\n    customer: req.order.payment_id,\n  }, {\n    stripe_account: req.profile.stripe_seller.stripe_user_id,\n  }).then((token) => {\n      myStripe.charges.create({\n        amount: req.body.amount * 100, //amount in cents\n        currency: \"usd\",\n        source: token.id,\n      }, {\n        stripe_account: req.profile.stripe_seller.stripe_user_id,\n      }).then((charge) => {\n        next()\n      })\n  })\n}\n```", "```jsx\nstate = {\n    checkoutDetails: {customer_name: '', customer_email:'', \n                      delivery_address: {street: '', city: '', state: \n                        '', zipcode: '', country:''}},\n  }\n```", "```jsx\ncomponentDidMount = () => {\n    let user = auth.isAuthenticated().user\n    let checkoutDetails = this.state.checkoutDetails\n    checkoutDetails.products = cart.getCart()\n    checkoutDetails.customer_name = user.name\n    checkoutDetails.customer_email = user.email\n    this.setState({checkoutDetails: checkoutDetails})\n}\n```", "```jsx\n<TextField id=\"name\" label=\"Name\" value={this.state.checkoutDetails.customer_name} onChange={this.handleCustomerChange('customer_name')}/>\n<TextField id=\"email\" type=\"email\" label=\"Email\" value={this.state.checkoutDetails.customer_email} onChange={this.handleCustomerChange('customer_email')}/><br/>\n\n```", "```jsx\nhandleCustomerChange = name => event => {\n    let checkoutDetails = this.state.checkoutDetails\n    checkoutDetails[name] = event.target.value || undefined\n    this.setState({checkoutDetails: checkoutDetails})\n}\n```", "```jsx\n<TextField id=\"street\" label=\"Street Address\" value={this.state.checkoutDetails.delivery_address.street} onChange={this.handleAddressChange('street')}/>\n<TextField id=\"city\" label=\"City\" value={this.state.checkoutDetails.delivery_address.city} onChange={this.handleAddressChange('city')}/>\n<TextField id=\"state\" label=\"State\" value={this.state.checkoutDetails.delivery_address.state} onChange={this.handleAddressChange('state')}/>\n<TextField id=\"zipcode\" label=\"Zip Code\" value={this.state.checkoutDetails.delivery_address.zipcode} onChange={this.handleAddressChange('zipcode')}/>\n<TextField id=\"country\" label=\"Country\" value={this.state.checkoutDetails.delivery_address.country} onChange={this.handleAddressChange('country')}/>\n```", "```jsx\nhandleAddressChange = name => event => {\n    let checkoutDetails = this.state.checkoutDetails\n    checkoutDetails.delivery_address[name] = event.target.value || \n    undefined\n    this.setState({checkoutDetails: checkoutDetails})\n}\n```", "```jsx\nclass **PlaceOrder** extends Component { \u2026 } export default **injectStripe**(withStyles(styles)(PlaceOrder))\n```", "```jsx\n<Elements> <PlaceOrder checkoutDetails={this.state.checkoutDetails} /> </Elements>\n```", "```jsx\n<CardElement className={classes.StripeElement}\n      {...{style: {\n      base: {\n        color: '#424770',\n        letterSpacing: '0.025em',\n        '::placeholder': {\n          color: '#aab7c4',\n        },\n      },\n      invalid: {\n        color: '#9e2146',\n      },\n    }}}/>\n```", "```jsx\n<Button color=\"secondary\" variant=\"raised\" onClick={this.placeOrder}>Place Order</Button>\n```", "```jsx\nplaceOrder = ()=>{\n  this.props.stripe.createToken().then(payload => {\n      if(payload.error){\n        this.setState({error: payload.error.message})\n      }else{\n        const jwt = auth.isAuthenticated()\n        create({userId:jwt.user._id}, {\n          t: jwt.token\n        }, this.props.checkoutDetails, payload.token.id).then((data) => \n        {\n          if (data.error) {\n            this.setState({error: data.error})\n          } else {\n            cart.emptyCart(()=> {\n              this.setState({'orderId':data._id,'redirect': true})\n            })\n          }\n        })\n      }\n  })\n}\n```", "```jsx\nconst create = (params, credentials, order, token) => {\n  return fetch('/api/orders/'+params.userId, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify({order: order, token:token})\n    })\n    .then((response) => {\n      return response.json()\n    }).catch((err) => console.log(err))\n}\n```", "```jsx\nemptyCart(cb) {\n  if(typeof window !== \"undefined\"){\n     localStorage.removeItem('cart')\n     cb()\n  }\n}\n```", "```jsx\nif (this.state.redirect) {\n      return (<Redirect to={'/order/' + this.state.orderId}/>)\n}\n```", "```jsx\ncustomer_name: { type: String, trim: true, required: 'Name is required' },\ncustomer_email: { type: String, trim: true,\n    match: [/.+\\@.+\\..+/, 'Please fill a valid email address'],\n    required: 'Email is required' }\n```", "```jsx\nordered_by: {type: mongoose.Schema.ObjectId, ref: 'User'}\n```", "```jsx\ndelivery_address: {\n    street: {type: String, required: 'Street is required'},\n    city: {type: String, required: 'City is required'},\n    state: {type: String},\n    zipcode: {type: String, required: 'Zip Code is required'},\n    country: {type: String, required: 'Country is required'}\n  },\n```", "```jsx\npayment_id: {},\n```", "```jsx\nproducts: [CartItemSchema],\n```", "```jsx\nconst CartItemSchema = new mongoose.Schema({\n  product: {type: mongoose.Schema.ObjectId, ref: 'Product'},\n  quantity: Number,\n  shop: {type: mongoose.Schema.ObjectId, ref: 'Shop'},\n  status: {type: String,\n    default: 'Not processed',\n    enum: ['Not processed' , 'Processing', 'Shipped', 'Delivered', \n   'Cancelled']}\n}) \nconst CartItem = mongoose.model('CartItem', CartItemSchema)\n```", "```jsx\napp.use('/', orderRoutes)\n```", "```jsx\nrouter.route('/api/orders/:userId') \n    .post(authCtrl.requireSignin, userCtrl.stripeCustomer, \n          productCtrl.decreaseQuantity, orderCtrl.create)\n```", "```jsx\nrouter.param('userId', userCtrl.userByID)\n```", "```jsx\nconst decreaseQuantity = (req, res, next) => {\n  let bulkOps = req.body.order.products.map((item) => {\n    return {\n        \"updateOne\": {\n            \"filter\": { \"_id\": item.product._id } ,\n            \"update\": { \"$inc\": {\"quantity\": -item.quantity} }\n        }\n    }\n   })\n   Product.bulkWrite(bulkOps, {}, (err, products) => {\n     if(err){\n       return res.status(400).json({\n         error: \"Could not update product\"\n       })\n     }\n     next()\n   })\n}\n```", "```jsx\nconst create = (req, res) => {\n  req.body.order.user = req.profile\n  const order = new Order(req.body.order)\n  order.save((err, result) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.status(200).json(result)\n  })\n}\n```", "```jsx\nrouter.route('/api/orders/shop/:shopId') \n    .get(authCtrl.requireSignin, shopCtrl.isOwner, orderCtrl.listByShop)\nrouter.param('shopId', shopCtrl.shopByID)\n```", "```jsx\nconst listByShop = (req, res) => {\n  Order.find({\"products.shop\": req.shop._id})\n  .populate({path: 'products.product', select: '_id name price'})\n  .sort('-created')\n  .exec((err, orders) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(orders)\n  })\n}\n```", "```jsx\nconst listByShop = (params, credentials) => {\n  return fetch('/api/orders/shop/'+params.shopId, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n```", "```jsx\n<PrivateRoute path=\"/seller/orders/:shop/:shopId\" component={ShopOrders}/>\n```", "```jsx\n loadOrders = () => {\n    const jwt = auth.isAuthenticated()\n    listByShop({\n      shopId: this.match.params.shopId\n    }, {t: jwt.token}).then((data) => {\n      if (data.error) {\n        console.log(data)\n      } else {\n        this.setState({orders: data})\n      }\n    })\n }\n```", "```jsx\n<Typography type=\"title\"> Orders in {this.match.params.shop} </Typography>\n<List dense> {this.state.orders.map((order, index) => { return \n    <span key={index}>\n        <ListItem button onClick={this.handleClick(index)}>\n           <ListItemText primary={'Order # '+order._id} \n                 secondary={(new Date(order.created)).toDateString()}/>\n           {this.state.open == index ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse component=\"li\" in={this.state.open == index} \n       timeout=\"auto\" unmountOnExit>\n           <ProductOrderEdit shopId={this.match.params.shopId} \n           order={order} orderIndex={index} \n           updateOrders={this.updateOrders}/>\n           <Typography type=\"subheading\"> Deliver to:</Typography>\n           <Typography type=\"subheading\" color=\"primary\">\n               {order.customer_name} ({order.customer_email})\n          </Typography>\n           <Typography type=\"subheading\" color=\"primary\">\n               {order.delivery_address.street}</Typography>\n           <Typography type=\"subheading\" color=\"primary\">\n               {order.delivery_address.city}, \n           {order.delivery_address.state}\n               {order.delivery_address.zipcode}</Typography>\n           <Typography type=\"subheading\" color=\"primary\">\n               {order.delivery_address.country}</Typography>\n        </Collapse>\n    </span>})}\n</List>\n```", "```jsx\nupdateOrders = (index, updatedOrder) => {\n    let orders = this.state.orders \n    orders[index] = updatedOrder \n    this.setState({orders: orders}) \n}\n```", "```jsx\n{this.props.order.products.map((item, index) => { return <span key={index}> \n     { item.shop == this.props.shopId && \n          <ListItem button>\n              <ListItemText primary={ <div>\n                     <img src=\n                    {'/api/product/image/'+item.product._id}/> \n                     {item.product.name}\n                     <p>{\"Quantity: \"+item.quantity}</p>\n              </div>}/>\n              <TextField id=\"select-status\" select\n                   label=\"Update Status\" value={item.status}\n                   onChange={this.handleStatusChange(index)}\n                   SelectProps={{\n                       MenuProps: { className: classes.menu },\n                   }}>\n                      {this.state.statusValues.map(option => (\n                          <MenuItem key={option} value={option}>\n                            {option}\n                          </MenuItem>\n                      ))}\n              </TextField>\n          </ListItem>}\n```", "```jsx\nloadStatusValues = () => {\n    getStatusValues().then((data) => {\n      if (data.error) {\n        this.setState({error: \"Could not get status\"})\n      } else {\n        this.setState({statusValues: data, error: ''})\n      }\n    })\n}\n```", "```jsx\nhandleStatusChange = productIndex => event => {\n    let order = this.props.order \n    order.products[productIndex].status = event.target.value \n    let product = order.products[productIndex] \n    const jwt = auth.isAuthenticated() \n    if(event.target.value == \"Cancelled\"){\n       cancelProduct({ shopId: this.props.shopId, \n       productId: product.product._id }, \n       {t: jwt.token}, \n       {cartItemId: product._id, status: \n       event.target.value, \n       quantity: product.quantity\n       }).then((data) => { \n       if (data.error) {\n       this.setState({error: \"Status not updated, \n       try again\"})\n       } else {\n this.props.updateOrders(this.props.orderIndex, order)      this.setState(error: '') \n       } \n       }) \n       } else if(event.target.value == \"Processing\"){\n       processCharge({ userId: jwt.user._id, shopId: \n       this.props.shopId, orderId: order._id }, \n       { t: jwt.token}, \n       { cartItemId: product._id, \n       amount: (product.quantity *\n       product.product.price)\n       status: event.target.value }).then((data) => { ... \n       })\n       } else {\n       update({ shopId: this.props.shopId }, {t: \n       jwt.token}, \n       { cartItemId: product._id, \n       status: event.target.value}).then((data) => { ... })\n      }\n}\n```", "```jsx\nrouter.route('/api/order/status_values')\n    .get(orderCtrl.getStatusValues)\n```", "```jsx\nconst getStatusValues = (req, res) => {\n  res.json(CartItem.schema.path('status').enumValues)\n}\n```", "```jsx\nconst getStatusValues = () => {\n  return fetch('/api/order/status_values', {\n    method: 'GET'\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n```", "```jsx\nrouter.route('/api/order/status/:shopId')\n    .put(authCtrl.requireSignin, shopCtrl.isOwner, orderCtrl.update)\n```", "```jsx\nconst update = (req, res) => {\n  Order.update({'products._id':req.body.cartItemId}, {'$set': {\n        'products.$.status': req.body.status\n    }}, (err, order) => {\n      if (err) {\n        return res.status(400).send({\n          error: errorHandler.getErrorMessage(err)\n        })\n      }\n      res.json(order)\n    })\n}\n```", "```jsx\nconst update = (params, credentials, product) => {\n  return fetch('/api/order/status/' + params.shopId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify(product)\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  }) \n}\n```", "```jsx\nrouter.route('/api/order/:shopId/cancel/:productId')\n       .put(authCtrl.requireSignin, shopCtrl.isOwner,\n       productCtrl.increaseQuantity, orderCtrl.update)\n       router.param('productId', productCtrl.productByID)\n```", "```jsx\nconst increaseQuantity = (req, res, next) => {\n  Product.findByIdAndUpdate(req.product._id, {$inc: \n  {\"quantity\": req.body.quantity}}, {new: true})\n    .exec((err, result) => {\n      if (err) {\n        return res.status(400).json({\n          error: errorHandler.getErrorMessage(err)\n        })\n      }\n      next()\n    })\n}\n```", "```jsx\nconst cancelProduct = (params, credentials, product) => {\n  return fetch('/api/order/'+params.shopId+'/cancel/'+params.productId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify(product)\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n```", "```jsx\nrouter.route('/api/order/:orderId/charge/:userId/:shopId')\n            .put(authCtrl.requireSignin, shopCtrl.isOwner,     \n            userCtrl.createCharge, orderCtrl.update)\nrouter.param('orderId', orderCtrl.orderByID)\n```", "```jsx\nconst orderByID = (req, res, next, id) => {\n  Order.findById(id).populate('products.product', 'name price')\n       .populate('products.shop', 'name')\n       .exec((err, order) => {\n          if (err || !order)\n            return res.status('400').json({\n              error: \"Order not found\"\n            })\n          req.order = order\n          next()\n       })\n}\n```", "```jsx\nconst processCharge = (params, credentials, product) => {\n  return fetch('/api/order/'+params.orderId+'/charge/'+params.userId+'/'\n    +params.shopId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify(product)\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n```"]