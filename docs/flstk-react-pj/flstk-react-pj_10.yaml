- en: Developing a Web-Based VR Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发基于Web的VR游戏
- en: The advent of **virtual reality** (**VR**) and **augmented reality** (**AR**)
    technologies are transforming how users interact with software and, in turn, the
    world around them. The possible applications of VR and AR are innumerable, and
    though the game industry has been an early adopter, these rapidly developing technologies
    have the potential to shift paradigms across multiple disciplines and industries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟现实**（**VR**）和**增强现实**（**AR**）技术的出现正在改变用户与软件以及周围世界的互动方式。VR和AR的可能应用数不胜数，尽管游戏行业是早期采用者，但这些快速发展的技术有潜力在多个学科和行业中改变范式。'
- en: In order to demonstrate how the MERN stack paired with React 360 can easily
    add VR capabilities to any web application, we will discuss and develop a dynamic,
    web-based VR game in this and the next chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示MERN堆栈与React 360如何轻松地为任何Web应用程序添加VR功能，我们将在本章和下一章中讨论和开发一个动态的基于Web的VR游戏。
- en: 'By covering the following topics, this chapter will focus on defining the features
    of the VR game and developing the game view using React 360:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过涵盖以下主题，本章将重点定义VR游戏的特性，并使用React 360开发游戏视图：
- en: VR game specifications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VR游戏规格
- en: Key concepts for developing 3D VR applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发3D VR应用的关键概念
- en: Getting started with React 360
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用React 360
- en: Defining game data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义游戏数据
- en: Implementing the game view
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现游戏视图
- en: Bundling the React 360 code for integration with the MERN skeleton
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将React 360代码捆绑以与MERN骨架集成
- en: MERN VR Game
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MERN VR游戏
- en: 'The MERN VR Game web application will be developed by extending the MERN skeleton
    and integrating VR capabilities using React 360\. It will be a dynamic, web-based
    VR game application, in which registered users can make their own games, and any
    visitor to the application can play these games:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MERN VR游戏Web应用程序将通过扩展MERN骨架并使用React 360集成VR功能来开发。这将是一个动态的、基于Web的VR游戏应用程序，注册用户可以制作自己的游戏，任何访问应用程序的访客都可以玩这些游戏。
- en: '![](assets/7e939bf7-7e64-4628-851e-1699529a9d3e.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7e939bf7-7e64-4628-851e-1699529a9d3e.png)'
- en: The features of the game itself will be simple enough to expose the capabilities
    of introducing VR into a MERN-based application, without delving too deeply into
    advanced concepts of React 360 that may be used to implement more complex VR features.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏本身的特性将足够简单，以展示将VR引入基于MERN的应用程序的能力，而不深入探讨React 360的高级概念，这些概念可能用于实现更复杂的VR功能。
- en: The code to implement features of the VR game using React 360 is available on
    GitHub at [github.com/shamahoque/MERNVR](https://github.com/shamahoque/MERNVR). You
    can clone this code and run the application as you go through the code explanations
    in the rest of this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React 360实现VR游戏功能的代码可在GitHub上找到，网址为[github.com/shamahoque/MERNVR](https://github.com/shamahoque/MERNVR)。您可以克隆此代码，并在本章的其余部分中阅读代码解释时运行应用程序。
- en: Game features
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏特性
- en: Each game in MERN VR Game will basically be a different VR world, where users
    can interact with 3D objects placed at different locations in the 360 degree panoramic
    world.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: MERN VR游戏中的每个游戏基本上都是一个不同的VR世界，用户可以在360度全景世界中的不同位置与3D对象进行交互。
- en: The gameplay will be similar to that of a scavenger hunt, and to complete each
    game, users will have to find and collect the 3D objects that are relevant to
    the clue or description for each game. This means the game world will contain
    some VR objects that can be collected by the player, and some VR objects that
    cannot be collected, but that may be placed by makers of the game as props or
    hints.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏玩法将类似于寻宝游戏，为了完成每个游戏，用户必须找到并收集与每个游戏的线索或描述相关的3D对象。这意味着游戏世界将包含一些可以被玩家收集的VR对象，以及一些无法被收集的VR对象，但可能被游戏制作者放置为道具或提示。
- en: Focus of this chapter
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章重点
- en: In this chapter, we will build out the game features using React 360, focusing
    primarily on concepts that will be relevant to implement the features defined
    earlier. Once the game features are ready, we will discuss how the React 360 code
    can be bundled and prepared to be integrated with the MERN application code developed
    in [Chapter 11](f9761c7c-dfc5-4247-9cfc-aaebc78b93da.xhtml), *Making the VR Game
    Dynamic Using MERN*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用React 360构建游戏功能，重点关注实现之前定义的功能的相关概念。一旦游戏功能准备就绪，我们将讨论如何捆绑和准备React 360代码，以便与[第11章](f9761c7c-dfc5-4247-9cfc-aaebc78b93da.xhtml)中开发的MERN应用程序代码集成，*使用MERN使VR游戏动态化*。
- en: React 360
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 360
- en: React 360 makes it possible to build VR experiences using the same declarative
    and component-based approach in React. The underlying technology of React 360
    makes use of the Three.js JavaScript 3D engine to render 3D graphics with WebGL
    within any compatible web browser, and also provides access to VR headsets with
    the Web VR API.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: React 360使得可以使用React中相同的声明式和基于组件的方法构建VR体验。React 360的底层技术利用了Three.js JavaScript
    3D引擎，在任何兼容的Web浏览器中使用WebGL渲染3D图形，并且还可以通过Web VR API访问VR头显。
- en: Though React 360 builds on top of React and the apps run in the browser, React
    360 has a lot in common with React Native, thus making React 360 apps cross-platform.
    This also means concepts from React Native are also applicable for React 360\.
    Covering all the React 360 concepts is outside the scope of this book, hence we
    will focus on concepts required to build the game and integrate it with the MERN
    stack web application.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管React 360是建立在React和应用程序在浏览器中运行的基础上，但React 360与React Native有很多共同之处，因此使得React
    360应用程序可以跨平台。这也意味着React Native的概念也适用于React 360。涵盖所有React 360的概念超出了本书的范围，因此我们将专注于构建游戏和将其与MERN堆栈Web应用程序集成所需的概念。
- en: Getting started with React 360
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用React 360
- en: React 360 provides developer tools that make it easy to start developing a new
    React 360 project. The steps to get started are detailed in the React 360 docs,
    so we will only summarize the steps, and point out the files relevant to developing
    the game.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: React 360提供了开发工具，可以轻松开始开发新的React 360项目。开始的步骤在React 360文档中有详细说明，因此我们只会总结这些步骤，并指出与开发游戏相关的文件。
- en: 'Since we already have Node installed for the MERN applications, we can start
    by installing the React 360 CLI tool:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经安装了用于MERN应用程序的Node，我们可以开始安装React 360 CLI工具：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Use this React 360 CLI tool to create a new application and install the required
    dependencies:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个React 360 CLI工具创建一个新的应用程序并安装所需的依赖。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will add the application with all the necessary files in a folder named
    `MERNVR` in the current directory. Finally, we can go into this folder from the
    command line, and run the application:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前目录中的一个名为`MERNVR`的文件夹中添加所有必要的文件。最后，我们可以在命令行中进入这个文件夹，并运行应用程序：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `start` command will initialize the local development server, and the default
    React 360 application can be viewed in the browser at `http://localhost:8081/index.html`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`start`命令将初始化本地开发服务器，并且默认的React 360应用程序可以在浏览器中查看，网址为`http://localhost:8081/index.html`。'
- en: To update the starter application and implement our game features, we will modify
    code mainly in the `index.js` file with some minor updates in the `client.js`
    file found in the `MERNVR` project folder.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新起始应用程序并实现我们的游戏功能，我们将主要修改`index.js`文件中的代码，并在`MERNVR`项目文件夹中的`client.js`文件中进行一些小的更新。
- en: 'The default code in `index.js` for the starter application should be as follows,
    and it renders a Welcome to React 360 text in a 360 world in the browser:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 起始应用程序中`index.js`中的默认代码应该如下，它在浏览器中的360世界中呈现了一个“欢迎来到React 360”的文本：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This `index.js` file contains the application''s content and the main code.
    The code in `client.js` contains the boilerplate that connects the browser to
    the React application in `index.js`. The default `client.js` in the starter project
    folder should look as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`index.js`文件包含了应用的内容和主要代码。`client.js`中的代码包含了将浏览器连接到`index.js`中的React应用程序的样板。在起始项目文件夹中的默认`client.js`应该如下所示：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code basically executes the React code defined in `index.js`, essentially
    creating a new instance of React 360 and loading the React code by attaching it
    to the DOM.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码基本上执行了`index.js`中定义的React代码，实质上创建了React 360的一个新实例，并通过将其附加到DOM来加载React代码。
- en: With the default React 360 project set up, and before modifying the code to
    implement the game, we will first look at some of the key concepts related to
    developing 3D VR experiences in the context of how these concepts are applied
    with React 360.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认的React 360项目设置完成之后，在修改代码以实现游戏之前，我们将首先了解一些与开发3D VR体验相关的关键概念，以及这些概念如何在React
    360中应用。
- en: Key concepts for developing the VR game
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发VR游戏的关键概念
- en: Before creating VR content and an interactive 360 degree experience for the
    game, it is important to first understand some key aspects of the virtual world
    and how React 360 components can be used to work with these VR concepts.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在为游戏创建VR内容和交互式360度体验之前，首先要了解虚拟世界的一些关键方面，以及React 360组件如何与这些VR概念一起使用。
- en: Equirectangular panoramic images
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 等距矩形全景图像
- en: The VR world for the game will be composed of a panoramic image which is added
    to the React 360 Environment as a background image.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的VR世界将由一个全景图像组成，该图像将被添加到React 360环境中作为背景图像。
- en: Panorama images are generally 360 degree images or spherical panoramas projected
    onto a sphere that completely surrounds the viewer. A common and popular format
    for 360 degree panorama images is the equirectangular format. React 360 degree
    currently supports mono and stereo formats for equirectangular images.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 全景图像通常是投影到完全环绕观众的球体上的360度图像或球形全景图像。360度全景图像的常见和流行格式是等距矩形格式。React 360目前支持等距矩形图像的单眼和立体格式。
- en: To learn more about the 360 image and video support in React 360, refer to the
    React 360 docs at [facebook.github.io/react-360/docs/setup.html](https://facebook.github.io/react-360/docs/setup.html).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关React 360中360度图像和视频支持的更多信息，请参考React 360文档，网址为[facebook.github.io/react-360/docs/setup.html](https://facebook.github.io/react-360/docs/setup.html)。
- en: 'The image shown here is an example of an equirectangular, 360 degree panoramic
    image. To set the world background for a game in MERN VR Game, we will use this
    kind of image:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的图像是一个等距矩形的360度全景图像的示例。为了在MERN VR游戏中设置游戏的世界背景，我们将使用这种类型的图像。
- en: '![](assets/20b36d83-b289-48a3-9f24-a939524e8067.png)An equirectangular panoramic
    image consists of a single image with an aspect ratio of 2:1, where the width
    is twice the height. These images are created with a special 360 degree camera.
    An excellent source of equirectangular images is Flickr, you just need to search
    for the `equirectangular` tag.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 等距矩形全景图像由一个宽高比为2:1的单个图像组成，其中宽度是高度的两倍。这些图像是用特殊的360度相机创建的。等距矩形图像的一个很好的来源是Flickr，您只需要搜索“等距矩形”标签。
- en: Creating the game world by setting the background scene using a equirectangular
    image in a React 360 Environment will make the VR experience immersive and transport
    the user to a virtual location. To enhance this experience and add 3D objects
    in this VR world effectively, we need to learn more about the layout and coordinate
    system relevant to the 3D space.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在React 360环境中使用等距投影图像来设置背景场景，可以使VR体验更加沉浸，将用户带到虚拟位置。为了增强这种体验并有效地在这个VR世界中添加3D对象，我们需要更多地了解与3D空间相关的布局和坐标系统。
- en: 3D position – coordinates and transforms
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D位置 - 坐标和变换
- en: We need to understand positions and orientation in the VR world space, in order
    to place 3D objects at desired locations, and to make the VR experience feel more
    real.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要了解VR世界空间中的位置和方向，以便将3D对象放置在所需位置，并使VR体验更加真实。
- en: 3D coordinate system
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D坐标系统
- en: For mapping in a 3D space, React 360 uses a three-dimensional meter based coordinate
    system similar to the OpenGL® 3D Coordinate System, allowing individual components
    to be transformed, moved, or rotated in 3D relative to the layout in their parent
    component.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在3D空间中进行映射，React 360使用了类似于OpenGL® 3D坐标系统的三维米制坐标系统，允许单独的组件相对于其父组件的布局进行变换、移动或旋转。
- en: The 3D coordinate system used in React 360 is a right-handed system. This means
    the positive x-axis is to the right, the positive y-axis is up, and the positive
    z-axis is backwards. This provides a better mapping with common coordinate systems
    of the world space in assets and 3D world modeling.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: React 360中使用的3D坐标系统是右手坐标系。这意味着正x轴在右侧，正y轴向上，正z轴向后。这与世界空间中常见的坐标系统有更好的映射。
- en: If we try to visualize the 3D space, the user starts out at the center of the
    **X-Y-Z** axes pictured in the next image. The **Z**-axis points forward toward
    the user and the user is looking out at the **-Z**-axis direction. The **Y**-axis
    runs up and down, whereas the **X**-axis runs from side to side.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们试图可视化3D空间，用户从下一张图中所示的**X-Y-Z**轴的中心开始。**Z**轴指向用户前方，用户朝着**-Z**轴方向观看。**Y**轴上下运行，而**X**轴从一侧到另一侧运行。
- en: 'The curved arrow in the image shows the direction of positive rotation values:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图像中的弯曲箭头显示了正旋转值的方向：
- en: '![](assets/df215bc6-9a8f-4dfa-8e14-65b6d6f120d0.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/df215bc6-9a8f-4dfa-8e14-65b6d6f120d0.png)'
- en: Transform
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变换
- en: 'In the following two images, the 3D book object is placed in two different
    positions and orientations by changing the `transform` properties in the style
    attribute of the React 360 `Entity` component that is rendering the 3D object.
    The transform here is based on the transform style of React, which React 360 extends
    to be fully 3D, considering the X-Y-Z axes:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下两个图像中，通过改变渲染3D对象的React 360 `Entity`组件的样式属性中的`transform`属性，将3D书籍对象放置在两个不同的位置和方向。这里的变换是基于React的变换样式，React
    360将其扩展为完全的3D，考虑X-Y-Z轴：
- en: '![](assets/c060ac74-3a84-4efe-8860-83ea3c525d15.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c060ac74-3a84-4efe-8860-83ea3c525d15.png)'
- en: 'The `transform` properties are added to components in the `style` attribute
    as an array of keys and values in the following form:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform`属性被添加到`style`属性中的组件中，形式如下的键和值数组：'
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The transform commands and values relevant to the 3D objects to be placed in
    our games are `translate [x, y, z]`, with values in meters, `rotate [x, y, z]`,
    with values in degrees, and `scale`, to determine the size of the object across
    all axes. We will also utilize the matrix command, which accepts a value as an
    array of 16 numbers representing the translation, rotation, and scale values.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们游戏中放置的3D对象相关的变换命令和值是`translate [x, y, z]`，单位为米，`rotate [x, y, z]`，单位为度，以及`scale`，用于确定对象在所有轴上的大小。我们还将利用矩阵命令，它接受一个由表示平移、旋转和缩放值的16个数字组成的数组作为值。
- en: To learn more about the React 360 3D coordinates and transforms, take a look
    at the React 360 docs at [facebook.github.io/react-360/docs/setup.html](https://facebook.github.io/react-360/docs/setup.html).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于React 360 3D坐标和变换的信息，请查看React 360文档[facebook.github.io/react-360/docs/setup.html](https://facebook.github.io/react-360/docs/setup.html)。
- en: React 360 components
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 360组件
- en: React 360 provides a range of components that can be used out of the box to
    create the VR user interface for the game. Next, we will summarize the specific
    components that will be used to build out the game features.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: React 360提供了一系列组件，可以直接用来创建游戏的VR用户界面。接下来，我们将总结将用于构建游戏功能的特定组件。
- en: Core components
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心组件
- en: 'The core components in React 360 include React Native''s built-in components:
    `Text` and `View`. In the game, we will use these two components to add content
    in the game world.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: React 360的核心组件包括React Native内置的组件：`Text`和`View`。在游戏中，我们将使用这两个组件来添加游戏世界中的内容。
- en: View
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图
- en: 'The `View` component is the most fundamental component for building a user
    interface in React Native, and it maps directly to the native view equivalent
    on whatever platform React Native is running on. In our case, it will be `<div>`
    on the browser:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`View`组件是在React Native中构建用户界面最基本的组件，它直接映射到React Native运行平台上的本地视图等效物。在我们的情况下，在浏览器上将是`<div>`：'
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `View` component is typically used as a container for other components,
    it can be nested inside other views and can have zero to many children of any
    type.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`View`组件通常用作其他组件的容器，它可以嵌套在其他视图中，并且可以有零到多个任何类型的子元素。'
- en: We will use `View` components to hold the game world view, and to add 3D object
    entities and text to the game.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`View`组件来容纳游戏世界的视图，并向游戏中添加3D对象实体和文本。
- en: Text
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本
- en: 'The `Text` component is a React Native component for displaying text and we
    will use it to render strings in a 3D space, by placing `Text` components in `View`
    components:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`Text`组件是一个用于显示文本的React Native组件，我们将使用它在3D空间中呈现字符串，通过将`Text`组件放置在`View`组件中：'
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Components for 3D VR experience
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于3D VR体验的组件
- en: React 360 provides a set of its own components to create the VR experience.
    Specifically, we will use the `Entity` component to add 3D objects and a `VrButton`
    component to capture clicks from the user.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: React 360提供了一组自己的组件来创建VR体验。具体来说，我们将使用`Entity`组件来添加3D对象，使用`VrButton`组件来捕获用户的点击。
- en: Entity
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体
- en: 'In order to add 3D objects to the game world, we will use the `Entity` component,
    which allows us to render 3D objects in React 360:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将3D对象添加到游戏世界中，我们将使用`Entity`组件，它允许我们在React 360中渲染3D对象：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Files containing the specific 3D object''s information are added to the `Entity`
    component using a `source` attribute. The source attribute takes an object of
    key-value pairs to map resource file types to their locations. React 360 supports
    the Wavefront OBJ file format, a common representation for 3D models. So in the
    source attribute, the `Entity` component supports the following keys:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 包含特定3D对象信息的文件被添加到`Entity`组件中，使用`source`属性。源属性接受一个键值对对象，将资源文件类型映射到它们的位置。React
    360支持Wavefront OBJ文件格式，这是一种常见的3D模型表示。因此，在源属性中，`Entity`组件支持以下键：
- en: '`obj`: Location of an OBJ-formatted model'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj`：OBJ格式模型的位置'
- en: '`mtl`: Location of an MTL-formatted material (the companion to OBJ)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mtl`：MTL格式材质的位置（OBJ的伴侣）'
- en: The values for the `obj` and `mtl` properties point to the location of these
    files and can be static strings, `asset()` calls, `require()` statements, or URI
    strings.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`obj`和`mtl`属性的值指向这些文件的位置，可以是静态字符串，`asset()`调用，`require()`语句或URI字符串。'
- en: OBJ (or .OBJ) is a geometry definition file format first developed by Wavefront
    Technologies. It is a simple data format that represents 3D geometry as a list
    of vertices and texture vertices. OBJ coordinates have no units, but OBJ files
    can contain scale information in a human-readable comment line. Learn more about
    this format at [paulbourke.net/dataformats/obj/](http://paulbourke.net/dataformats/obj/).MTL
    (or .MTL) are material library files that contain one or more material definitions,
    each of which includes the color, texture, and reflection map of individual materials.
    These are applied to the surfaces and vertices of objects. Learn more about this
    format at [paulbourke.net/dataformats/mtl/](http://paulbourke.net/dataformats/mtl/).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: OBJ（或.OBJ）是由Wavefront Technologies首次开发的几何定义文件格式。它是一种简单的数据格式，将3D几何表示为顶点和纹理顶点的列表。OBJ坐标没有单位，但OBJ文件可以包含人类可读的注释行中的比例信息。在[paulbourke.net/dataformats/obj/](http://paulbourke.net/dataformats/obj/)了解更多关于这种格式的信息。MTL（或.MTL）是包含一个或多个材质定义的材质库文件，每个材质定义都包括单个材质的颜色、纹理和反射贴图。这些应用于对象的表面和顶点。在[paulbourke.net/dataformats/mtl/](http://paulbourke.net/dataformats/mtl/)了解更多关于这种格式的信息。
- en: The `Entity` component also takes `transform` property values in the `style`
    attribute, so the objects can be placed at the desired positions and orientations
    in the 3D world space. In our MERN VR Game application, makers will add URLs pointing
    to the VR object files (both `.obj` and `.mtl`) for each of their `Entity` objects
    in a game, and also specify the `transform` property values to indicate where
    and how the 3D objects should be placed in the game world.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`Entity`组件还在`style`属性中接受`transform`属性值，因此可以将对象放置在所需的位置和方向上的3D世界空间中。在我们的MERN
    VR游戏应用中，制作者将为游戏中的每个`Entity`对象添加指向VR对象文件（`.obj`和`.mtl`）的URL，并指定`transform`属性值，以指示3D对象应该在游戏世界中放置在何处以及如何放置。'
- en: A good source of 3D objects is [https://clara.io/](https://clara.io/), with
    multiple file formats available for download and use.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 3D对象的一个很好的来源是[https://clara.io/](https://clara.io/)，提供多种文件格式可供下载和使用。
- en: VrButton
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VrButton
- en: 'The `VrButton` component in React 360 will help to implement a simple, button-style,
    `onClick` behavior for the objects and `Text` buttons that will be added to the
    game. A `VrButton` is not visible in the view by default and will only act as
    a wrapper to capture events, but it can be styled in the same ways as a `View`
    component:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在React 360中，`VrButton`组件将帮助实现简单的、按钮样式的`onClick`行为，这些按钮将被添加到游戏中。`VrButton`默认情况下在视图中不可见，只会作为一个包装器来捕获事件，但它可以以与`View`组件相同的方式进行样式设置：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This component is a helper for managing click-type interactions from the user
    across different input devices. Input events that will trigger the click event
    include a space button press on the keyboard, a left-click on the mouse, and a
    touch on the screen.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件是一个辅助工具，用于管理用户在不同输入设备上的点击类型交互。将触发点击事件的输入事件包括键盘上的空格键按下，鼠标上的左键单击以及屏幕上的触摸。
- en: React 360 API
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 360 API
- en: Besides the React 360 components discussed previously, we will utilize the APIs
    provided by React 360 to implement functionality such as setting the background
    scene, playing audio, dealing with external links, adding styles, capturing the
    current orientation of the user’s view, and using static asset files.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前讨论的React 360组件，我们还将利用React 360提供的API来实现功能，比如设置背景场景、播放音频、处理外部链接、添加样式、捕捉用户视图的当前方向，以及使用静态资源文件。
- en: Environment
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境
- en: 'We will use the `Environment` API to change the background scene from the React
    code using its `setBackgroundImage` method:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`Environment` API来从React代码中改变背景场景，使用它的`setBackgroundImage`方法：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This method sets the current background image with the resource at the specified
    URL. When we integrate the React 360 game code with the MERN stack containing
    the game application backend, we can use this to set the game world image dynamically
    using image links provided by the user.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法使用指定URL的资源来设置当前背景图像。当我们将React 360游戏代码与包含游戏应用后端的MERN堆栈集成时，我们可以使用这个方法来动态设置游戏世界图像，使用用户提供的图像链接。
- en: Native Modules
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地模块
- en: 'Native Modules in React 360 give the ability to access functionality only available
    in the main browser environment. In the game, we will use the `AudioModule` in
    Native Modules to play sounds in response to user activity, and the `Location`
    module that gives access to `window.location` in the browser to handle external
    links. These modules can be accessed in `index.js` as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: React 360中的本地模块提供了访问主浏览器环境中可用功能的能力。在游戏中，我们将使用本地模块中的`AudioModule`来响应用户活动播放声音，以及`Location`模块来处理浏览器中的`window.location`以处理外部链接。这些模块可以在`index.js`中如下访问：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: AudioModule
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AudioModule
- en: When the user interacts with the 3D objects, we will play sounds based on whether
    the object can be collected or not, and also whether the game has been completed.
    The `AudioModule` in Native Modules allows adding sound to the VR world as background
    environmental audio, one-off sound effects, and spatialized audio. In our game,
    we will use environmental audio and one-off sound effects.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户与3D对象交互时，我们将根据对象是否可以收集以及游戏是否已经完成来播放声音。本地模块中的`AudioModule`允许将声音添加到VR世界中，作为背景环境音频、一次性音效和空间音频。在我们的游戏中，我们将使用环境音频和一次性音效。
- en: '**Environmental audio**: To play an audio on loop and set the mood when the
    game is successfully completed, we will use the `playEnvironmental` method that
    takes an audio file path as the `source` and `loop` option as a `playback` parameter:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境音频**：为了在游戏成功完成时循环播放音频并设置心情，我们将使用`playEnvironmental`方法，它需要一个音频文件路径作为`source`，并且`loop`选项作为`playback`参数：'
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Sound effects**: To play a single sound once when the user clicks on 3D objects,
    we will use the `playOneShot` method that takes an audio file path as the `source`:'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音效**：为了在用户点击3D对象时播放一次单一声音，我们将使用`playOneShot`方法，它需要一个音频文件路径作为`source`：'
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `source` attribute in the options passed to `playEnvironmental` and `playOneShot`
    takes a resource file location to load the audio. It can be an `asset()` statement,
    or a resource URL declaration in the form of `{uri: ''PATH''}`.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '传递给`playEnvironmental`和`playOneShot`的选项中的`source`属性需要一个资源文件位置来加载音频。它可以是一个`asset()`语句，或者是一个资源URL声明，形式为`{uri:
    ''PATH''}`。'
- en: Location
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Location
- en: After we integrate the React 360 code with the MERN stack containing the game
    application backend, the VR game will be launched from the MERN server at a declared
    route containing the specific game's ID. Then, once a user completes a game, they
    will also have the option to leave the VR space, and go to a URL containing a
    list of other games. To handle these incoming and outgoing app links in the React
    360 code, we will utilize the `Location` module in Native Modules.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将React 360代码与包含游戏应用后端的MERN堆栈集成后，VR游戏将从MERN服务器在包含特定游戏ID的声明路由上启动。然后，一旦用户完成游戏，他们还可以选择离开VR空间，转到包含其他游戏列表的URL。为了处理React
    360代码中的这些传入和传出应用链接，我们将利用本地模块中的`Location`模块。
- en: The `Location` module is essentially the `Location` object returned by the read-only `window.location` property
    in the browser. We will use the `replace` method and `search` property in the
    `Location` object to implement features related to external links.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`Location`模块本质上是浏览器中只读的`window.location`属性返回的`Location`对象。我们将使用`Location`对象中的`replace`方法和`search`属性来实现与外部链接相关的功能。'
- en: '**Handling outgoing links**: When we want to direct the user out of the VR
    application to another link, we can use the `replace` method in `Location`:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理传出链接**：当我们想要将用户从VR应用程序引导到另一个链接时，我们可以在`Location`中使用`replace`方法：'
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Handling incoming links**: When the React 360 app is launched from an external
    URL and after the registered component mounts, we can access the URL and retrieve
    its query string part using the `search` property in `Location`:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理传入链接**：当React 360应用从外部URL启动并在注册的组件挂载后，我们可以访问URL并使用`Location`中的`search`属性检索其查询字符串部分：'
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For the purpose of integrating this React 360 component with MERN VR Game, and
    dynamically loading game details, we will capture this initial URL to parse the
    game ID from a query parameter and then use it to make a read API call to the
    MERN application server. This implementation is elaborated upon in [Chapter 11](f9761c7c-dfc5-4247-9cfc-aaebc78b93da.xhtml),
    *Making the VR Game Dynamic Using MERN*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这个React 360组件与MERN VR游戏集成，并动态加载游戏详情，我们将捕获这个初始URL，从查询参数中解析游戏ID，然后使用它来调用MERN应用服务器的读取API。这个实现在[第11章](f9761c7c-dfc5-4247-9cfc-aaebc78b93da.xhtml)中有详细说明，*使用MERN使VR游戏动态化*。
- en: StyleSheet
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StyleSheet
- en: 'The StyleSheet API from React Native can also be used in React 360 to define
    several styles in one place rather than adding styles to individual components:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: React Native中的StyleSheet API也可以在React 360中使用，以便在一个地方定义多个样式，而不是将样式添加到单个组件中：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The defined styles can be added to components as required:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 定义的样式可以根据需要添加到组件中：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The default distance units for CSS properties, such as width and height, are
    in meters when mapping to 3D space in React 360, whereas the default distance
    units are in pixels for 2D interfaces, as in React Native.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在React 360中，用于CSS属性（如宽度和高度）的默认距离单位是米，而在2D界面中（如React Native中），默认距离单位是像素。
- en: VrHeadModel
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VrHeadModel
- en: '`VrHeadModel` is a utility module in React 360 that simplifies obtaining the
    current orientation of the headset. Since the user is moving around in a VR space,
    when a desired feature requires that an object or text should be placed in front
    of or with respect to the user''s current orientation, it becomes necessary to
    know where exactly the user is currently gazing.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`VrHeadModel`是React 360中的一个实用模块，它简化了获取头盔当前方向的操作。由于用户在VR空间中移动，当所需功能需要将对象或文本放置在用户当前方向的前面或相对于用户当前方向时，有必要知道用户当前凝视的确切位置。'
- en: In MERN VR Game, we will use this to show the game completed message to the
    user in front of their view, no matter where they end up turning to from the initial
    position.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN VR游戏中，我们将使用它在用户的视野前显示游戏完成消息，无论他们从初始位置转向何处。
- en: For example, the user may be looking up or down when collecting the final object,
    and the completed message should pop up wherever the user is gazing. To implement
    this, we will retrieve the current head matrix as an array of numbers using `getHeadMatrix()`
    from `VrHeadModel`, and set it as a value for the `transform` property in the
    style attribute of the `View` containing the game completed message.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，用户可能在收集最终对象时向上或向下看，完成消息应该在用户注视的位置弹出。为了实现这一点，我们将使用`VrHeadModel`中的`getHeadMatrix()`将当前头部矩阵作为数字数组检索出来，并将其设置为包含游戏完成消息的`View`的样式属性中的`transform`属性的值。
- en: Assets
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产
- en: 'The `asset()` functionality in React 360 allows us to retrieve external resource
    files, such as audio and image files. We will place the sound audio files for
    the game in the `static_assets` folder, to be retrieved using `asset()` for each
    audio added to the game:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在React 360中，`asset()`功能允许我们检索外部资源文件，如音频和图像文件。我们将把游戏的声音音频文件放在`static_assets`文件夹中，以便使用`asset()`检索每个添加到游戏中的音频：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: React 360 input events
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 360输入事件
- en: In order to make the game interface interactive, we will utilize some of the
    input event handlers exposed in React 360\. Input events are collected from mouse,
    keyboard, touch, and gamepad interactions, and also with the `gaze` button click
    on a VR headset. The specific input events we will work with are the `onEnter`,
    `onExit`, and `onClick` events.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使游戏界面具有交互性，我们将利用React 360中暴露的一些输入事件处理程序。输入事件来自鼠标、键盘、触摸和游戏手柄交互，还有VR头盔上的`凝视`按钮点击。我们将处理的具体输入事件是`onEnter`、`onExit`和`onClick`事件。
- en: '**onEnter**: This event is fired whenever the platform cursor begins intersecting
    with a component. We will capture this event for the VR objects in the game, so
    the objects can start rotating around the Y-axis when the platform cursor enters
    the specific object.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**onEnter**：每当平台光标开始与组件相交时，就会触发此事件。我们将捕获此事件用于游戏中的VR对象，这样当平台光标进入特定对象时，对象就可以开始围绕Y轴旋转。'
- en: '**onExit**: This event is fired whenever the platform cursor stops intersecting
    with a component. It has the same properties as the `onEnter` event and we will
    use it to stop rotating the VR object just exited.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**onExit**：每当平台光标停止与组件相交时，就会触发此事件。它具有与`onEnter`事件相同的属性，我们将使用它来停止旋转刚刚退出的VR对象。'
- en: '**onClick**: The `onClick` event is used with the `VrButton` component, and
    is fired when there is click interaction with `VrButton`. We will use this to
    set click event handlers on the VR objects, and also on the game complete message
    to redirect the user out of the VR application to a link containing a list of
    games.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**onClick**：`onClick`事件与`VrButton`组件一起使用，当与`VrButton`进行点击交互时触发。我们将使用它在VR对象上设置点击事件处理程序，还有在游戏完成消息上，以将用户重定向到包含游戏列表的链接，从而退出VR应用程序。'
- en: With the VR-related concepts and React 360 components discussed in this section,
    we are ready to define the game data details and start implementing the complete
    VR game.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本节讨论的与VR相关的概念和React 360组件，我们已经准备好定义游戏数据细节并开始实现完整的VR游戏。
- en: Game details
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏详情
- en: Each game in MERN VR Game will be defined in a common data structure that the
    React 360 application will also adhere to when rendering the individual game details.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: MERN VR游戏中的每个游戏都将在一个通用数据结构中定义，当渲染各个游戏细节时，React 360应用程序也将遵循这一结构。
- en: Game data structure
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏数据结构
- en: 'The game data structure will hold details such as the game''s name, a URL pointing
    to the location of the equirectangular image for the game world, and two arrays
    containing details for each VR object to be added to the game world:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏数据结构将保存游戏名称、指向游戏世界等距投影图像位置的URL，以及包含每个VR对象的详细信息的两个数组：
- en: '**name**: A string representing the name of the game'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**name**：表示游戏名称的字符串'
- en: '**world**: A string with the URL pointing to the equirectangular image either
    hosted on cloud storage, CDNS, or stored on MongoDB'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**world**：一个字符串，其中包含指向等距投影图像的URL，可以是存储在云存储、CDN上的文件，或存储在MongoDB上的文件'
- en: '**answerObjects**: An array of objects containing details of the VR objects
    that can be collected by the player'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**answerObjects**：包含可以被玩家收集的VR对象详细信息的对象数组'
- en: '**wrongObjects**: An array of objects containing details of the other VR objects
    to be placed in the VR world that cannot be collected by the player'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**wrongObjects**：包含其他VR对象详细信息的对象数组，这些对象将放置在VR世界中，玩家无法收集'
- en: Details of VR objects
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VR对象的详细信息
- en: The `answerObjects` array will contain details of the 3D objects that can be
    collected, and the `wrongObjects` array will contain details of 3D objects that
    cannot be collected. Each object will contain links to the 3D data resource files
    and `transform` style property values.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`answerObjects`数组将包含可以被收集的3D对象的详细信息，`wrongObjects`数组将包含无法被收集的3D对象的详细信息。每个对象将包含到3D数据资源文件和`transform`样式属性值的链接。'
- en: OBJ and MTL links
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OBJ和MTL链接
- en: 'The 3D data information resources for the VR objects will be added in the `objUrl`
    and `mtlUrl` keys:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: VR对象的3D数据信息资源将添加在`objUrl`和`mtlUrl`键中：
- en: '**objUrl**: Link to the `.obj` file for the 3D object'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**objUrl**：3D对象的`.obj`文件的链接'
- en: '**mtlUrl**: Link to the accompanying `.mtl` file'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mtlUrl**：附带的`.mtl`文件的链接'
- en: The `objUrl` and `mtlUrl` links may point to files either hosted on cloud storage,
    CDNS, or stored on MongoDB. For MERN VR Game, we will assume makers will add URLs
    to their own hosted OBJ, MTL, and equirectangular image files.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`objUrl`和`mtlUrl`链接可能指向存储在云存储、CDN上的文件，或存储在MongoDB上的文件。对于MERN VR游戏，我们将假设制作者将向他们自己托管的OBJ、MTL和等距投影图像文件添加URL。'
- en: Translation values
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平移数值
- en: 'The position of the VR object in the 3D space will be defined with the `translate`
    values in the following keys:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: VR对象在3D空间中的位置将由以下键中的`translate`值定义：
- en: '**translateX**: Translation value of the object along the X-axis'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**translateX**：对象沿X轴的平移值'
- en: '**translateY**: Translation value of the object along the Y-axis'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**translateY**：对象沿Y轴的平移值'
- en: '**translateZ**: Translation value of the object along the Z-axis'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**translateZ**：对象沿Z轴的平移值'
- en: All translation values are numbers in meters.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 所有平移数值都是以米为单位的数字。
- en: Rotation values
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旋转数值
- en: 'The orientation of the 3D object will be defined with the `rotate` values in
    the following keys:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 3D对象的方向将由以下键中的`rotate`值定义：
- en: '**rotateX**: Rotation value of the object around the X-axis, in other words,
    turning the object up or down'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**rotateX**：绕X轴的旋转值，换句话说，将对象向上或向下旋转'
- en: '**rotateY**: Rotation value of the object around the Y-axis that would turn
    the object left or right'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**rotateY**：绕Y轴的旋转值，将对象向左或向右旋转'
- en: '**rotateZ**: Rotation value of the object around the Z-axis, making the object
    tilt forward or backward'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**rotateZ**：绕Z轴的旋转值，使对象向前或向后倾斜'
- en: All rotation values are in numbers or string representations of a number in
    degrees.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 所有旋转数值都以度数的数字或字符串表示。
- en: Scale value
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比例值
- en: 'The `scale` value will define the relative size appearance of the 3D object:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`scale`值将定义3D对象的相对大小外观：'
- en: '**scale**: A number value that defines uniform scale across all axes'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**scale**：定义所有轴上的均匀比例的数字值'
- en: Color
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 颜色
- en: If the 3D object's material texture is not provided in an MTL file, the color
    value can define the default color of the object.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果3D对象的材质纹理没有在MTL文件中提供，颜色值可以定义对象的默认颜色。
- en: '**color**: A string value representing color values allowed in CSS'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**color**：表示CSS中允许的颜色值的字符串值'
- en: With this game data structure capable of holding details of the game and its
    VR objects, we can implement the game in React 360 accordingly with sample data
    values.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个游戏数据结构，能够保存游戏及其VR对象的详细信息，我们可以相应地使用示例数据值在React 360中实现游戏。
- en: Static data versus dynamic data
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态数据与动态数据
- en: In the next chapter, we will update the React 360 code to fetch game data dynamically
    from the backend database. For now, we will start developing the game features
    here with dummy game data set to `state` with the defined game data structure.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更新React 360代码，以动态从后端数据库获取游戏数据。目前，我们将从定义的游戏数据结构中设置虚拟游戏数据到`state`中开始在这里开发游戏功能。
- en: Sample data
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例数据
- en: 'For initial development purposes, the following sample game data can be set
    to state to be rendered in the game view:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了初始开发目的，以下示例游戏数据可以设置为状态以在游戏视图中呈现：
- en: '[PRE19]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Building the game view in React 360
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在React 360中构建游戏视图
- en: We will apply the React 360 concepts, and use the game data structure to implement
    the game features by updating the code in `index.js` and `client.js`. For a working
    version, we will start with the state initialized using the sample game data from
    the previous section.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将应用React 360的概念，并使用游戏数据结构来通过更新`index.js`和`client.js`中的代码来实现游戏功能。为了获得一个可工作的版本，我们将从上一节中使用示例游戏数据初始化状态开始。
- en: '`/MERNVR/index.js`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE20]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Update client.js and mount to Location
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新client.js并挂载到Location
- en: The default code in `client.js` attaches the mount point declared in `index.js`
    to the Default Surface in the React 360 app, where the Surface is a cylindrical
    layer for placing 2D UI. In order to use the 3D meter-based coordinate system
    for a layout in 3D space, we need to mount to a `Location` instead of a Surface.
    So update `client.js` to replace the `renderToSurface` with a `renderToLocation`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`client.js`中的默认代码将在React 360应用中将在`index.js`中声明的挂载点附加到默认表面上，其中表面是用于放置2D UI的圆柱形图层。为了在3D空间中使用基于3D米的坐标系进行布局，我们需要挂载到`Location`而不是表面。因此，更新`client.js`以用`renderToLocation`替换`renderToSurface`。'
- en: '`/MERNVR/client.js`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/client.js`：'
- en: '[PRE21]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can also customize the initial background scene by updating the code `r360.compositor.setBackground(**r360.getAssetURL('360_world.jpg')**)` in
    `client.js` to use your desired image.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过更新`client.js`中的代码`r360.compositor.setBackground(**r360.getAssetURL('360_world.jpg')**)`来使用您想要的图像来自定义初始背景场景。
- en: Defining styles with StyleSheet
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用StyleSheet定义样式
- en: In `index.js`, we will update the default styles created using `StyleSheet.create`
    with our own CSS rules, to be used with the components in the game.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`中，我们将使用我们自己的CSS规则更新使用`StyleSheet.create`创建的默认样式，以用于游戏中的组件。
- en: '`/MERNVR/index.js`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE22]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: World background
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 世界背景
- en: In order to set the the game's 360 degree world background, we will update the
    current background scene using the `setBackgroundImage` method from the `Environment`
    API inside `componentDidMount`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置游戏的360度世界背景，我们将使用`componentDidMount`中的`Environment` API的`setBackgroundImage`方法来更新当前背景场景。
- en: '`/MERNVR/index.js`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE23]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This will replace the default 360 background in the starter React 360 project
    with our sample game''s world image fetched from cloud storage. If you are editing
    the default React 360 application and have it running, refreshing the `http://localhost:8081/index.html` link
    on the browser should show an outer space background, that can be panned around
    using the mouse:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这将用我们从云存储中获取的示例游戏世界图像替换起始React 360项目中的默认360背景。如果您正在编辑默认的React 360应用程序并且它正在运行，刷新浏览器上的`http://localhost:8081/index.html`链接应该显示一个外太空背景，可以使用鼠标在周围移动：
- en: '![](assets/84ae5823-42b5-4dae-b5d9-9cfb878804ee.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/84ae5823-42b5-4dae-b5d9-9cfb878804ee.png)'
- en: To generate the preceding screenshot, the `View` and `Text` components in the
    default code were also updated with custom CSS rules to show this hello text on
    the screen.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成上述截图，还更新了默认代码中的`View`和`Text`组件，使用自定义CSS规则在屏幕上显示这个hello文本。
- en: Adding 3D VR objects
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加3D VR对象
- en: We will add 3D objects to the game world using `Entity` components and the sample
    object details in the `answerObjects` and `wrongObjects` arrays.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`Entity`组件和`answerObjects`和`wrongObjects`数组中的示例对象详细信息向游戏世界添加3D对象。
- en: First, we will concatenate the `answerObjects` and `wrongObjects` arrays in
    `componentDidMount` to form a single array containing all the VR objects.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在`componentDidMount`中连接`answerObjects`和`wrongObjects`数组，形成一个包含所有VR对象的单个数组。
- en: '`/MERNVR/index.js`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE24]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Then in the main view, we will iterate over the `vrObjects` array to add the
    `Entity` components with details of each object.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在主视图中，我们将遍历`vrObjects`数组，添加每个对象的`Entity`组件详细信息。
- en: '`/MERNVR/index.js`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE25]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `obj` and `mtl` file links are added to `source` and the `transform` style
    details are applied in the `Entity` component's styles with `setModelStyles(vrObject,
    index)`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`obj`和`mtl`文件链接被添加到`source`中，并且`transform`样式细节在`Entity`组件的样式中应用`setModelStyles(vrObject,
    index)`。'
- en: '`/MERNVR/index.js`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE26]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `display` property will allow us to show or hide an object based on whether
    it has been already collected by the player or not.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`display`属性将允许我们根据玩家是否已经收集了对象来显示或隐藏对象。'
- en: The `translate` and `rotate` values will render the 3D objects in the desired
    positions and orientations across the VR world.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`translate`和`rotate`值将在VR世界中呈现所需位置和方向的3D对象。'
- en: Next, we will update the `Entity` code further to enable user interactions with
    the 3D objects.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将进一步更新`Entity`代码，以使用户可以与3D对象进行交互。
- en: Interacting with VR objects
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与VR对象交互
- en: In order to make the VR game objects interactive, we will use the React 360
    event handlers, such as `onEnter` and `onExit` with `Entity`, and `onClick` with
    `VrButton`, to add rotation animation and gameplay behavior.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使VR游戏对象具有交互性，我们将使用React 360事件处理程序，如`onEnter`和`onExit`与`Entity`，以及`VrButton`的`onClick`，添加旋转动画和游戏行为。
- en: Rotation
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旋转
- en: We want to add a feature that starts rotating a 3D object around its Y-axis
    whenever a player focuses on the 3D object, that is, the platform cursor begins
    intersecting with the `Entity` rendering the specific 3D object.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望添加一个功能，当玩家关注3D对象时，即平台光标开始与渲染特定3D对象的`Entity`相交时，开始围绕其Y轴旋转3D对象。
- en: We will update the `Entity` component from the previous section to add the `onEnter`
    and `onExit` handlers.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新上一节中的`Entity`组件，添加`onEnter`和`onExit`处理程序。
- en: '`/MERNVR/index.js`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE27]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The object will start rotating on enter, and stop when the platform cursor exits
    the object and it is no longer in the player's focus.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当进入对象时，对象将开始旋转，并且当平台光标退出对象并且不再处于玩家的焦点时，对象将停止旋转。
- en: Animation with requestAnimationFrame
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用requestAnimationFrame进行动画
- en: In the `rotate(index)` and `stopRotate()` methods, we will implement rotation
    animation behavior using `requestAnimationFrame` for smooth animations on the
    browser.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在`rotate(index)`和`stopRotate()`方法中，我们将使用`requestAnimationFrame`实现旋转动画行为，以实现浏览器上的流畅动画。
- en: The `window.requestAnimationFrame()` method asks the browser to call a specified
    callback function to update an animation before the next repaint. With `requestAnimationFrame`,
    the browser optimizes the animations to make them smoother and more resource-efficient.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`window.requestAnimationFrame()`方法要求浏览器在下一次重绘之前调用指定的回调函数来更新动画。使用`requestAnimationFrame`，浏览器优化动画，使其更流畅和更节省资源。'
- en: Using the `rotate` method, we will update the `rotateY` transform value of the
    given object at a steady rate on a set time interval with `requestionAnimationFrame`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`rotate`方法，我们将使用`requestAnimationFrame`在一定的时间间隔内以稳定的速率更新给定对象的`rotateY`变换值。
- en: '`/MERNVR/index.js`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE28]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `requestAnimationFrame` will take the `rotate` method as a recursive callback
    function, then execute it to redraw each frame of the rotation animation with
    the new values, and in turn update the animation on the screen.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`requestAnimationFrame`将以`rotate`方法作为递归回调函数，然后执行它以重新绘制旋转动画的每一帧，并依次更新屏幕上的动画。'
- en: The `requestAnimateFrame` method returns a `requestID`, which we will use in
    `stopRotate` to cancel the animation in the `stopRotate` method.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`requestAnimateFrame`方法返回一个`requestID`，我们将在`stopRotate`中使用它来取消`stopRotate`方法中的动画。'
- en: '`/MERNVR/index.js`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE29]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This will implement the functionality of animating the 3D object only when
    it is in the viewer''s focus. As seen in the following image, the 3D Rubik''s
    cube rotates clockwise around its Y-axis while it is in focus:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这将实现仅当3D对象处于观看者焦点时才对其进行动画处理。如下图所示，3D魔方在焦点时沿其Y轴顺时针旋转：
- en: '![](assets/964de90f-5066-4af4-a817-058f9b65989a.png)Though not covered here,
    it is also worth exploring the React 360 Animated library, which can be used to
    compose different types of animations. Core components can be animated natively
    with this library, and it is possible to make other components animatable using
    `createAnimatedComponent()`. This library was originally implemented from React
    Native, and to learn more you can refer to the React Native documentation.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/964de90f-5066-4af4-a817-058f9b65989a.png)虽然这里没有涉及，但值得探索的是React 360动画库，它可以用于组合不同类型的动画。核心组件可以使用此库本地进行动画处理，并且可以使用`createAnimatedComponent()`使其他组件可动画化。该库最初是从React
    Native实现的，要了解更多信息，可以参考React Native文档。'
- en: Clicking the 3D objects
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点击3D对象
- en: In order to register the click behavior on each 3D object added to the game,
    we need to wrap the `Entity` component with a `VrButton` component that can call
    the `onClick` handler.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在游戏中注册对添加到游戏中的每个3D对象的点击行为，我们需要用`VrButton`组件包装`Entity`组件，以便调用`onClick`处理程序。
- en: We will update the `Entity` component added inside the `vrObjects` array iteration
    code, to wrap it with the `VrButton` component. The `VrButton` will call the `collectItem`
    method when clicked, and pass it the current object's details.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新`vrObjects`数组迭代代码中添加的`Entity`组件，以用`VrButton`组件包装它。当单击时，`VrButton`将调用`collectItem`方法，并传递当前对象的详细信息。
- en: '`/MERNVR/index.js`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE30]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When a 3D object is clicked, the `collectItem` method needs to perform the
    following actions with respect to the game features:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当单击3D对象时，`collectItem`方法需要执行以下与游戏功能相关的操作：
- en: Check whether the clicked object is an `answerObject` or a `wrongObject`
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查单击的对象是`answerObject`还是`wrongObject`
- en: Based on the object type, play the associated sound
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据对象类型播放相关的声音
- en: If the object is an `answerObject`, it should be collected and disappear from
    view
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果对象是`answerObject`，则应收集并从视图中消失
- en: Update collected objects list
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新收集的对象列表
- en: Check whether all instances of `answerObject` were successfully collected with
    this click
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查是否成功收集了所有`answerObject`的实例
- en: If yes, show the game completed message to the player and play the sound for game
    completed
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是，向玩家显示游戏完成消息，并播放游戏完成的声音
- en: 'Hence, the `collectItem` method will have the following structure and steps:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`collectItem`方法将具有以下结构和步骤：
- en: '[PRE31]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Next, we will look at the implementation for these steps.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下这些步骤的实现。
- en: Collecting the correct object on click
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点击收集正确的对象
- en: When a user clicks on a 3D object, we need to first check whether the clicked
    object is an answer object. If it is, this *collected* object will be hidden from
    view and a list of collected objects will be updated along with the total number
    to keep track of the user's progress in the game.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击3D对象时，我们首先需要检查点击的对象是否是一个答案对象。如果是，这个*收集*对象将从视图中隐藏，并且收集对象的列表将被更新，以及用于跟踪用户在游戏中进度的总数。
- en: 'To check whether the clicked VR object is an `answerObject`, we will use the
    `indexOf` method to find a match in the `answerObjects` array:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查点击的VR对象是否是`answerObject`，我们将使用`indexOf`方法在`answerObjects`数组中查找匹配项：
- en: '[PRE32]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If the `vrObject` is an `answerObject`, `indexOf` will return the array index
    of the matched object, otherwise it will return `-1` if no match is found.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`vrObject`是`answerObject`，`indexOf`将返回匹配对象的数组索引，否则如果找不到匹配项，则返回`-1`。
- en: 'To keep track of collected objects in the game, we will also maintain an array
    of Boolean values in `collectedList`, and the total number of objects collected
    so far in `collectedNum`:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟踪游戏中收集的对象，我们还将在`collectedList`中维护一个布尔值数组，并在`collectedNum`中记录到目前为止收集的对象总数：
- en: '[PRE33]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Using the `collectedList` array, we will also determine which `Entity` component
    should be hidden from the view because the associated object was collected. The
    `display` style property of the relevant `Entity` will be set based on the Boolean
    value of the corresponding index in the `collectedList` array, while setting the
    style for the `Entity` component using the `setModelStyles` method, as shown earlier
    in the *Adding 3D VR objects* section:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`collectedList`数组，我们还将确定哪个`Entity`组件应该从视图中隐藏，因为相关的对象已被收集。`Entity`的`display`样式属性将根据`collectedList`数组中相应索引的布尔值进行设置，同时使用`setModelStyles`方法设置`Entity`组件的样式，就像在*添加3D
    VR对象*部分中所示的那样：
- en: '[PRE34]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the following image, the treasure chest can be clicked to be collected as
    it is an `answerObject`, whereas the flower pot cannot be collected because it
    is a `wrongObject`:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，宝箱可以被点击收集，因为它是一个`answerObject`，而花盆不能被收集，因为它是一个`wrongObject`：
- en: '![](assets/a24e207b-ab10-4470-a0e4-4aa47c33fc0a.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a24e207b-ab10-4470-a0e4-4aa47c33fc0a.png)'
- en: 'When the treasure chest is clicked, it disappears from the view as the `collectedList`
    is updated, and we also play the sound effect for collection using `AudioModule.playOneShot`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击宝箱时，宝箱从视图中消失，因为`collectedList`被更新，我们还使用`AudioModule.playOneShot`播放收集的声音效果：
- en: '[PRE35]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'But when the flower pot is clicked, and it is identified as a wrong object,
    we play another sound effect indicating it cannot be collected:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当花盆被点击，并且被确定为错误对象时，我们会播放另一个声音效果，指示它不能被收集：
- en: '[PRE36]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'As the flower pot was identified to be a wrong object, the `collectedList`
    was not updated and it remains on the screen as seen in the following screenshot:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 由于花盆被确定为错误对象，`collectedList`没有被更新，它仍然显示在屏幕上，如下截图所示：
- en: '![](assets/c8f40ddb-babd-44cf-8270-3966e0440f1d.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c8f40ddb-babd-44cf-8270-3966e0440f1d.png)'
- en: The complete code in the `collectItem` method that executes all these steps
    when an object is clicked will be as follows.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击对象时，`collectItem`方法中执行所有这些步骤的完整代码将如下所示。
- en: '`/MERNVR/index.js`:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE37]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: After a clicked object is collected, we will also check whether all the `answerObjects`
    have been collected, and the game is complete with the `checkGameCompleteStatus`
    method, as discussed in the next section.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在收集了一个点击的对象之后，我们还将检查是否已收集了所有的“answerObjects”，并且游戏是否已经完成了“checkGameCompleteStatus”方法，如下一节所讨论的那样。
- en: Game completed state
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏完成状态
- en: Every time an `answerObject` is collected, we will check whether the total number
    of collected items is equal to the total number of objects in the `answerObjects`
    array to determine whether the game is complete by calling `checkGameCompleteStatus`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 每次收集一个“answerObject”时，我们将检查收集的物品总数是否等于“answerObjects”数组中的物品总数，以确定是否通过调用“checkGameCompleteStatus”完成游戏。
- en: '`/MERNVR/index.js`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE38]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If the game is indeed complete, we will perform the following actions:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果游戏确实已经完成，我们将执行以下操作：
- en: Play the audio for game completed, using `AudioModule.playEnvironmental`
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放游戏完成的音频，使用“AudioModule.playEnvironmental”
- en: Fetch the current `headMatrix` value using `VrHeadModel` so it can be set as
    the transform matrix value for the `View` component containing the game completion
    message
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“VrHeadModel”获取当前的“headMatrix”值，以便将其设置为包含游戏完成消息的“View”组件的变换矩阵值
- en: Set the `display` style property of the message `View` to `flex`, so the message
    renders to the viewer
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将消息“View”的“display”样式属性设置为“flex”，以便消息呈现给观众
- en: The `View` component containing the message congratulating the player for completing
    the game will be added to the parent `View` component as follows.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 包含祝贺玩家完成游戏的“View”组件将被添加到父“View”组件中，如下所示。
- en: '`/MERNVR/index.js`:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE39]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The call to the `setGameCompletedStyle()` method will set the styles for the
    message `View` with the updated `display` value and `transform` matrix value.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 调用“setGameCompletedStyle（）”方法将为带有更新的“display”值和“transform”矩阵值的消息“View”设置样式。
- en: '`/MERNVR/index.js`:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE40]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This will render the `View` with the completion message at the center of the
    user''s current view, regardless of whether they are looking up, down, behind,
    or forward in the 360 degree VR world:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在用户当前视图的中心呈现带有完成消息的“View”，无论他们是向上、向下、向后还是向前在360度VR世界中看：
- en: '![](assets/895c5e99-6682-46fc-8b56-062dfd0f2fbf.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/895c5e99-6682-46fc-8b56-062dfd0f2fbf.png)'
- en: The final text in the `View` message will act as a button, as we wrapped this
    `View` in a `VrButton` component that calls the `exitGame` method when clicked.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: “View”消息中的最终文本将作为按钮，因为我们将这个“View”包装在一个“VrButton”组件中，当点击时调用“exitGame”方法。
- en: '`/MERNVR/index.js`:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`/MERNVR/index.js`：'
- en: '[PRE41]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `exitGame` method will use the `Location.replace` method to redirect the
    user to an external URL that may contain a list of games.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: “exitGame”方法将使用“Location.replace”方法将用户重定向到可能包含游戏列表的外部URL。
- en: The `replace` method can be passed any valid URL, and once this React 360 game
    code is integrated with the MERN VR Game application in [Chapter 11](f9761c7c-dfc5-4247-9cfc-aaebc78b93da.xhtml),
    *Making the VR Game Dynamic Using MERN*, `replace('/')` will take the user to
    the home page of the application.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: “replace”方法可以传递任何有效的URL，一旦这个React 360游戏代码与[第11章](f9761c7c-dfc5-4247-9cfc-aaebc78b93da.xhtml)中的MERN
    VR游戏应用集成，`replace('/')`将把用户带到应用程序的主页。
- en: Bundling for production and integration with MERN
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产捆绑和与MERN集成
- en: Now that we have features of the VR game implemented and functional with sample
    game data, we can prepare it for production and add it to our MERN base application
    to see how VR can be added to an existing web application.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实现了VR游戏的功能，并且使用了示例游戏数据，我们可以为生产做准备，并将其添加到我们的MERN基础应用程序中，以查看VR如何添加到现有的Web应用程序中。
- en: React 360 tools provide a script to bundle all the React 360 application code
    into a few files that we can just place on the MERN web server and serve as content
    at a specified route.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: React 360工具提供了一个脚本，将所有React 360应用程序代码捆绑成几个文件，我们可以将其放在MERN web服务器上，并在指定路由上作为内容提供。
- en: Bundling React 360 files
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捆绑React 360文件
- en: 'To create the bundled files, we can run the following command from the React
    360 project directory:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建捆绑文件，我们可以从React 360项目目录中运行以下命令：
- en: '[PRE42]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This generates compiled versions of the React 360 application files in a folder
    called `build`. The compiled bundle files are `client.bundle.js` and `index.bundle.js`.
    These two files, in addition to `index.html` and the `static-assets/` folder,
    make up the production version of the whole React 360 application that was developed:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在名为`build`的文件夹中生成React 360应用程序文件的编译版本。编译的捆绑文件是`client.bundle.js`和`index.bundle.js`。这两个文件，加上`index.html`和`static-assets/`文件夹，构成了整个React
    360应用程序的生产版本：
- en: '[PRE43]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Integrating with MERN application
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与MERN应用程序集成
- en: We will need to add these three files and the `static_assets` folder to our
    MERN application, then make sure the bundle file references are accurate in `index.html`,
    and finally load the `index.html` at a specified route in the Express app.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将这三个文件和`static_assets`文件夹添加到我们的MERN应用程序中，然后确保`index.html`中的捆绑文件引用准确，并最终在Express应用程序中的指定路由加载`index.html`。
- en: Add the React 360 production files
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加React 360生产文件
- en: 'With consideration to the folder structure in the MERN skeleton application,
    we will add the `static_assets` folder and the bundle files to the `dist/` folder
    to keep our MERN code organized and have all the bundles in the same location.
    The `index.html` file will be placed in a new folder, named `vr`, in the `server`
    folder:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到MERN骨架应用程序中的文件夹结构，我们将把`static_assets`文件夹和捆绑文件添加到`dist/`文件夹中，以保持我们的MERN代码有序，并将所有捆绑文件放在同一个位置。`index.html`文件将放在`server`文件夹中的一个名为`vr`的新文件夹中：
- en: '[PRE44]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Updating references in index.html
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在index.html中更新引用
- en: 'The generated `index.html` file, as shown here, references the bundle files,
    expecting these files to be in the same folder:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`index.html`文件如下所示，引用捆绑文件，期望这些文件在同一个文件夹中：
- en: '[PRE45]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We need to update `index.html` to refer to the correct location of the `client.bundle.js`, `index.bundle.js`,
    and `static_assets` folders.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更新`index.html`，以便引用`client.bundle.js`、`index.bundle.js`和`static_assets`文件夹的正确位置。
- en: 'First, update the reference to `client.bundle.js` as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，更新对`client.bundle.js`的引用如下：
- en: '[PRE46]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then, update `React360.init` with the correct reference to `index.bundle.js`,
    and `assetRoot` set to the correct location of the `static_assets` folder:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，更新`React360.init`，正确引用`index.bundle.js`和将`assetRoot`设置为`static_assets`文件夹的正确位置：
- en: '[PRE47]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `assetRoot` will tell React 360 where to look for asset files when we use
    `asset()` to set resources in the components.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`assetRoot`将告诉React 360在使用`asset()`设置组件资源时从哪里查找资源文件。'
- en: Now,  if we set up an Express route in the MERN application to return the `index.html`
    file in the response, then visiting the route in the browser will render the React
    360 game.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们在MERN应用程序中设置一个Express路由来返回响应中的`index.html`文件，那么在浏览器中访问该路由将呈现React 360游戏。
- en: Trying out the integration
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试集成
- en: 'To test out this integration, we can set up an example route, as follows:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试这个集成，我们可以设置一个示例路由，如下所示：
- en: '[PRE48]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Then run the MERN server, and open the route in the browser at `localhost:3000/game/play`.
    This should render the React 360 game implemented in this chapter from within
    our MERN application.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行MERN服务器，并在浏览器中打开`localhost:3000/game/play`路由。这应该在我们的MERN应用程序中呈现本章中实现的React
    360游戏。
- en: Summary
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we used React 360 to develop a web-based VR game that can be
    easily integrated into MERN applications.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用React 360开发了一个基于Web的VR游戏，可以轻松集成到MERN应用程序中。
- en: We began by defining simple VR features for the gameplay, then set up React
    360 for development, and looked at key VR concepts such as equirectangular panoramic
    images, 3D positions, and coordinate systems in the 360-degree VR world. We explored
    the React 360 components and API required to implement the game features, including
    components such as `View`, `Text`, `Entity`, and `VrButton`, along with the `Environment`, `VrHeadModel` and
    `NativeModules` APIs.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为游戏定义了简单的VR功能，然后设置了React 360进行开发，并研究了360度VR世界中的关键VR概念，如等距全景图像、3D位置和坐标系统。我们探索了React
    360组件和API，以实现游戏功能，包括诸如“View”、“Text”、“Entity”和“VrButton”等组件，以及“Environment”、“VrHeadModel”和“NativeModules”API。
- en: Finally, we updated the code in the starter React 360 project to implement the
    game with sample game data, then bundled the code files and discussed how to add
    these compiled files to an existing MERN application.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们更新了起始的React 360项目中的代码，以使用示例游戏数据实现游戏，然后捆绑了代码文件，并讨论了如何将这些编译后的文件添加到现有的MERN应用程序中。
- en: In the next chapter, we will develop the MERN VR Game application, complete
    with a game database and APIs so we can make the game developed in this chapter
    dynamic by fetching data from the game collection in MongoDB.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开发MERN VR游戏应用程序，包括游戏数据库和API，以便我们可以通过从MongoDB中的游戏集合中获取数据，使本章开发的游戏动态化。
