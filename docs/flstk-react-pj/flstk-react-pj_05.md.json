["```jsx\nabout: {\n    type: String,\n    trim: true\n  }\n```", "```jsx\n  <TextField\n      id=\"multiline-flexible\"\n      label=\"About\"\n      multiline\n      rows=\"2\"\n      value={this.state.about}\n      onChange={this.handleChange('about')}\n   />\n```", "```jsx\n<ListItem> <ListItemText primary={this.state.user.about}/> </ListItem>\n```", "```jsx\nphoto: {\n    data: Buffer,\n    contentType: String\n}\n```", "```jsx\n<input accept=\"image/*\" type=\"file\"\n       onChange={this.handleChange('photo')} \n       style={{display:'none'}} \n       id=\"icon-button-file\" />\n```", "```jsx\n<label htmlFor=\"icon-button-file\">\n   <Button variant=\"raised\" color=\"default\" component=\"span\">\n      Upload <FileUpload/>\n   </Button>\n</label>\n```", "```jsx\n<span className={classes.filename}>\n    {this.state.photo ? this.state.photo.name : ''}\n</span>\n```", "```jsx\nthis.userData = new FormData() \n```", "```jsx\nhandleChange = name => event => {\n  const value = name === 'photo'\n    ? event.target.files[0]\n    : event.target.value\n  this.userData.set(name, value)\n  this.setState({ [name]: value })\n}\n```", "```jsx\nconst update = (params, credentials, user) => {\n  return fetch('/api/users/' + params.userId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: user\n  }).then((response) => {\n    return response.json()\n  }).catch((e) => {\n    console.log(e)\n  })\n}\n```", "```jsx\nnpm install --save formidable\n```", "```jsx\nimport formidable from 'formidable'\nimport fs from 'fs'\nconst update = (req, res, next) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"Photo could not be uploaded\"\n      })\n    }\n    let user = req.profile\n    user = _.extend(user, fields)\n    user.updated = Date.now()\n    if(files.photo){\n      user.photo.data = fs.readFileSync(files.photo.path)\n      user.photo.contentType = files.photo.type\n    }\n    user.save((err, result) => {\n      if (err) {\n        return res.status(400).json({\n          error: errorHandler.getErrorMessage(err)\n        })\n      }\n      user.hashed_password = undefined\n      user.salt = undefined\n      res.json(user)\n    })\n  })\n}\n```", "```jsx\nrouter.route('/api/users/photo/:userId')\n  .get(userCtrl.photo, userCtrl.defaultPhoto)\nrouter.route('/api/users/defaultphoto')\n  .get(userCtrl.defaultPhoto)\n```", "```jsx\nconst photo = (req, res, next) => {\n  if(req.profile.photo.data){\n    res.set(\"Content-Type\", req.profile.photo.contentType)\n    return res.send(req.profile.photo.data)\n  }\n  next()\n}\n```", "```jsx\nimport profileImage from './../../client/assets/images/profile-pic.png'\nconst defaultPhoto = (req, res) => {\n  return res.sendFile(process.cwd()+profileImage)\n}\n```", "```jsx\nconst photoUrl = this.state.user._id\n          ? `/api/users/photo/${this.state.user._id}?${new Date().getTime()}`\n          : '/api/users/defaultphoto'\n```", "```jsx\n  <Avatar src={photoUrl}/>\n```", "```jsx\nfollowing: [{type: mongoose.Schema.ObjectId, ref: 'User'}],\nfollowers: [{type: mongoose.Schema.ObjectId, ref: 'User'}]\n```", "```jsx\nconst userByID = (req, res, next, id) => {\n  User.findById(id)\n    .populate('following', '_id name')\n    .populate('followers', '_id name')\n    .exec((err, user) => {\n    if (err || !user) return res.status('400').json({\n      error: \"User not found\"\n    })\n    req.profile = user\n    next()\n  })\n}\n```", "```jsx\nrouter.route('/api/users/follow')\n  .put(authCtrl.requireSignin, userCtrl.addFollowing, userCtrl.addFollower)\nrouter.route('/api/users/unfollow')\n  .put(authCtrl.requireSignin, userCtrl.removeFollowing, userCtrl.removeFollower)\n```", "```jsx\nconst addFollowing = (req, res, next) => {\n  User.findByIdAndUpdate(req.body.userId, {$push: {following: req.body.followId}}, (err, result) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    next()\n  })\n}\n```", "```jsx\nconst addFollower = (req, res) => {\n  User.findByIdAndUpdate(req.body.followId, {$push: {followers: req.body.userId}}, {new: true})\n  .populate('following', '_id name')\n  .populate('followers', '_id name')\n  .exec((err, result) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    result.hashed_password = undefined\n    result.salt = undefined\n    res.json(result)\n  })\n}\n```", "```jsx\nconst removeFollowing = (req, res, next) => {\n  User.findByIdAndUpdate(req.body.userId, {$pull: {following: req.body.unfollowId}}, (err, result) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    next()\n  })\n}\nconst removeFollower = (req, res) => {\n  User.findByIdAndUpdate(req.body.unfollowId, {$pull: {followers: req.body.userId}}, {new: true})\n  .populate('following', '_id name')\n  .populate('followers', '_id name')\n  .exec((err, result) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    result.hashed_password = undefined\n    result.salt = undefined\n    res.json(result)\n  })\n}\n```", "```jsx\nconst follow = (params, credentials, followId) => {\n  return fetch('/api/users/follow/', {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify({userId:params.userId, followId: followId})\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  }) \n}\n```", "```jsx\nconst unfollow = (params, credentials, unfollowId) => {\n  return fetch('/api/users/unfollow/', {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify({userId:params.userId, unfollowId: unfollowId})\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n```", "```jsx\nclass FollowProfileButton extends Component {\n  followClick = () => {\n    this.props.onButtonClick(follow)\n  }\n  unfollowClick = () => {\n    this.props.onButtonClick(unfollow)\n  }\n  render() {\n    return (<div>\n      { this.props.following\n        ? (<Button variant=\"raised\" color=\"secondary\" onClick=\n       {this.unfollowClick}>Unfollow</Button>)\n        : (<Button variant=\"raised\" color=\"primary\" onClick=\n       {this.followClick}>Follow</Button>)\n      }\n    </div>)\n  }\n}\nFollowProfileButton.propTypes = {\n  following: PropTypes.bool.isRequired,\n  onButtonClick: PropTypes.func.isRequired\n}\n```", "```jsx\n{auth.isAuthenticated().user && auth.isAuthenticated().user._id == this.state.user._id \n    ? (edit and delete buttons) \n    : (follow button)\n}\n```", "```jsx\nlet following = this.checkFollow(data) \nthis.setState({user: data, following: following}) \n```", "```jsx\ncheckFollow = (user) => {\n    const jwt = auth.isAuthenticated()\n    const match = user.followers.find((follower)=> {\n      return follower._id == jwt.user._id\n    })\n    return match\n}\n```", "```jsx\nclickFollowButton = (callApi) => {\n    const jwt = auth.isAuthenticated()\n    callApi({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, this.state.user._id).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        this.setState({user: data, following: !this.state.following})\n      }\n    })\n}\n```", "```jsx\n<FollowProfileButton following={this.state.following} onButtonClick={this.clickFollowButton}/>\n```", "```jsx\nclass FollowGrid extends Component {\n  render() {\n    const {classes} = this.props\n    return (<div className={classes.root}>\n      <GridList cellHeight={160} className={classes.gridList} cols={4}>\n        {this.props.people.map((person, i) => {\n           return <GridListTile style={{'height':120}} key={i}>\n              <Link to={\"/user/\" + person._id}>\n                <Avatar src={'/api/users/photo/'+person._id} className=\n               {classes.bigAvatar}/>\n                <Typography className={classes.tileText}>{person.name}\n               </Typography>\n              </Link>\n            </GridListTile>\n        })}\n      </GridList>\n    </div>)\n  }\n}\n\nFollowGrid.propTypes = {\n  classes: PropTypes.object.isRequired,\n  people: PropTypes.array.isRequired\n}\n```", "```jsx\n<FollowGrid people={this.state.user.followers}/>\n<FollowGrid people={this.state.user.following}/>\n```", "```jsx\nrouter.route('/api/users/findpeople/:userId')\n   .get(authCtrl.requireSignin, userCtrl.findPeople)\n```", "```jsx\nconst findPeople = (req, res) => {\n  let following = req.profile.following\n  following.push(req.profile._id)\n  User.find({ _id: { $nin : following } }, (err, users) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(users)\n  }).select('name')\n}\n```", "```jsx\nconst findPeople = (params, credentials) => {\n  return fetch('/api/users/findpeople/' + params.userId, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n```", "```jsx\ncomponentDidMount = () => {\n   const jwt = auth.isAuthenticated()\n   findPeople({\n     userId: jwt.user._id\n   }, {\n     t: jwt.token\n   }).then((data) => {\n     if (data.error) {\n       console.log(data.error)\n     } else {\n       this.setState({users: data})\n     }\n   })\n}\n```", "```jsx\n<List>{this.state.users.map((item, i) => {\n          return <span key={i}>\n             <ListItem>\n                <ListItemAvatar className={classes.avatar}>\n                   <Avatar src={'/api/users/photo/'+item._id}/>\n                </ListItemAvatar>\n                <ListItemText primary={item.name}/>\n                <ListItemSecondaryAction className={classes.follow}>\n                  <Link to={\"/user/\" + item._id}>\n                    <IconButton variant=\"raised\" color=\"secondary\" \n                     className={classes.viewButton}>\n                      <ViewIcon/>\n                    </IconButton>\n                  </Link>\n                  <Button aria-label=\"Follow\" variant=\"raised\" \n                    color=\"primary\" \n                    onClick={this.clickFollow.bind(this, item, i)}>\n                    Follow\n                  </Button>\n                </ListItemSecondaryAction>\n             </ListItem>\n          </span>\n        })\n      }\n</List>\n```", "```jsx\nclickFollow = (user, index) => {\n    const jwt = auth.isAuthenticated()\n    follow({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, user._id).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        let toFollow = this.state.users\n toFollow.splice(index, 1)\n this.setState({users: toFollow, open: true, followMessage: \n       `Following ${user.name}!`})\n      }\n    })\n}\n```", "```jsx\n<Snackbar\n  anchorOrigin={{ vertical: 'bottom', horizontal: 'right'}}\n  open={this.state.open}\n  onClose={this.handleRequestClose}\n  autoHideDuration={6000}\n  message={<span className={classes.snack}>{this.state.followMessage}</span>}\n/>\n```", "```jsx\ntext: {\n  type: String,\n  required: 'Name is required'\n}\n```", "```jsx\nphoto: {\n  data: Buffer,\n  contentType: String\n}\n```", "```jsx\npostedBy: {type: mongoose.Schema.ObjectId, ref: 'User'}\n```", "```jsx\ncreated: { type: Date, default: Date.now }\n```", "```jsx\nlikes: [{type: mongoose.Schema.ObjectId, ref: 'User'}]\n```", "```jsx\ncomments: [{\n    text: String,\n    created: { type: Date, default: Date.now },\n    postedBy: { type: mongoose.Schema.ObjectId, ref: 'User'}\n  }]\n```", "```jsx\n<Card>\n   <Typography type=\"title\"> Newsfeed </Typography>\n   <Divider/>\n   <NewPost addUpdate={this.addPost}/>\n   <Divider/>\n   <PostList removeUpdate={this.removePost} posts={this.state.posts}/>\n</Card>\n```", "```jsx\naddPost = (post) => {\n    const updatedPosts = this.state.posts\n    updatedPosts.unshift(post)\n    this.setState({posts: updatedPosts})\n}\n```", "```jsx\nremovePost = (post) => {\n    const updatedPosts = this.state.posts\n    const index = updatedPosts.indexOf(post)\n    updatedPosts.splice(index, 1)\n    this.setState({posts: updatedPosts})\n}\n```", "```jsx\nclass PostList extends Component {\n  render() {\n    return (\n      <div style={{marginTop: '24px'}}>\n        {this.props.posts.map((item, i) => {\n            return <Post post={item} key={i} \n                         onRemove={this.props.removeUpdate}/>\n          })\n        }\n      </div>\n    )\n  }\n}\nPostList.propTypes = {\n  posts: PropTypes.array.isRequired,\n  removeUpdate: PropTypes.func.isRequired\n}\n```", "```jsx\nrouter.route('/api/posts/feed/:userId')\n  .get(authCtrl.requireSignin, postCtrl.listNewsFeed)\n```", "```jsx\nrouter.param('userId', userCtrl.userByID)\n```", "```jsx\napp.use('/', postRoutes)\n```", "```jsx\nconst listNewsFeed = (req, res) => {\n  let following = req.profile.following\n  following.push(req.profile._id)\n  Post.find({postedBy: { $in : req.profile.following } })\n   .populate('comments', 'text created')\n   .populate('comments.postedBy', '_id name')\n   .populate('postedBy', '_id name')\n   .sort('-created')\n   .exec((err, posts) => {\n     if (err) {\n       return res.status(400).json({\n         error: errorHandler.getErrorMessage(err)\n       })\n     }\n     res.json(posts)\n   })\n}\n```", "```jsx\nconst listNewsFeed = (params, credentials) => {\n  return fetch('/api/posts/feed/'+ params.userId, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then(response => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n```", "```jsx\n loadPosts = () => {\n    const jwt = auth.isAuthenticated()\n    listNewsFeed({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        this.setState({posts: data})\n      }\n    })\n }\n```", "```jsx\nrouter.route('/api/posts/by/:userId')\n    .get(authCtrl.requireSignin, postCtrl.listByUser)\n```", "```jsx\nconst listByUser = (req, res) => {\n  Post.find({postedBy: req.profile._id})\n  .populate('comments', 'text created')\n  .populate('comments.postedBy', '_id name')\n  .populate('postedBy', '_id name')\n  .sort('-created')\n  .exec((err, posts) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(posts)\n  })\n}\n```", "```jsx\nconst listByUser = (params, credentials) => {\n  return fetch('/api/posts/by/'+ params.userId, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then(response => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n```", "```jsx\nloadPosts = (user) => {\n    const jwt = auth.isAuthenticated()\n    listByUser({\n      userId: user\n    }, {\n      t: jwt.token\n    }).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        this.setState({posts: data})\n      }\n    })\n}\n```", "```jsx\nrouter.route('/api/posts/new/:userId')\n  .post(authCtrl.requireSignin, postCtrl.create)\n```", "```jsx\nconst create = (req, res, next) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"Image could not be uploaded\"\n      })\n    }\n    let post = new Post(fields)\n    post.postedBy= req.profile\n    if(files.photo){\n      post.photo.data = fs.readFileSync(files.photo.path)\n      post.photo.contentType = files.photo.type\n    }\n    post.save((err, result) => {\n      if (err) {\n        return res.status(400).json({\n          error: errorHandler.getErrorMessage(err)\n        })\n      }\n      res.json(result)\n    })\n  })\n}\n```", "```jsx\nrouter.route('/api/posts/photo/:postId').get(postCtrl.photo)\n```", "```jsx\nconst photo = (req, res, next) => {\n    res.set(\"Content-Type\", req.post.photo.contentType)\n    return res.send(req.post.photo.data)\n}\n```", "```jsx\n  router.param('postId', postCtrl.postByID)\n```", "```jsx\nconst postByID = (req, res, next, id) => {\n  Post.findById(id).populate('postedBy', '_id name').exec((err, post) => {\n    if (err || !post)\n      return res.status('400').json({\n        error: \"Post not found\"\n      })\n    req.post = post\n    next()\n  })\n}\n```", "```jsx\nconst create = (params, credentials, post) => {\n  return fetch('/api/posts/new/'+ params.userId, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: post\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n```", "```jsx\nclickPost = () => {\n    const jwt = auth.isAuthenticated()\n    create({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, this.postData).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        this.setState({text:'', photo: ''})\n        this.props.addUpdate(data)\n      }\n    })\n}\n```", "```jsx\n<CardHeader\n  avatar={<Avatar src={'/api/users/photo/'+this.props.post.postedBy._id}/>}\n       action={this.props.post.postedBy._id ===   \n           auth.isAuthenticated().user._id &&\n           <IconButton onClick={this.deletePost}>\n             <DeleteIcon />\n           </IconButton>\n          }\n         title={<Link to={\"/user/\" + this.props.post.postedBy._id}>\n            {this.props.post.postedBy.name}\n         </Link>}\n    subheader={(new Date(this.props.post.created)).toDateString()}\n  className={classes.cardHeader}\n/>\n```", "```jsx\n<CardContent className={classes.cardContent}>\n  <Typography component=\"p\" className={classes.text}> \n    {this.props.post.text} \n  </Typography>\n  {this.props.post.photo && \n    (<div className={classes.photo}>\n       <img className={classes.media}\n            src={'/api/posts/photo/'+this.props.post._id}/>\n    </div>)\n  }\n</CardContent>\n```", "```jsx\n<CardActions>\n  { this.state.like\n    ? <IconButton onClick={this.like} className={classes.button}\n     aria-label=\"Like\" color=\"secondary\">\n        <FavoriteIcon />\n      </IconButton>\n    :<IconButton onClick={this.like} className={classes.button}\n     aria-label=\"Unlike\" color=\"secondary\">\n        <FavoriteBorderIcon />\n      </IconButton> \n  } <span> {this.state.likes} </span>\n  <IconButton className={classes.button}\n   aria-label=\"Comment\" color=\"secondary\">\n     <CommentIcon/>\n  </IconButton> <span>{this.state.comments.length}</span>\n</CardActions>\n```", "```jsx\n<Comments postId={this.props.post._id} \n          comments={this.state.comments} \n          updateComments={this.updateComments}/>\n```", "```jsx\nrouter.route('/api/posts/:postId')\n    .delete(authCtrl.requireSignin, \n              postCtrl.isPoster, \n                  postCtrl.remove)\n```", "```jsx\nconst isPoster = (req, res, next) => {\n  let isPoster = req.post && req.auth &&\n  req.post.postedBy._id == req.auth._id\n  if(!isPoster){\n    return res.status('403').json({\n      error: \"User is not authorized\"\n    })\n  }\n  next()\n}\n```", "```jsx\ndeletePost = () => {\n    const jwt = auth.isAuthenticated()\n    remove({\n      postId: this.props.post._id\n    }, {\n      t: jwt.token\n    }).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        this.props.onRemove(this.props.post)\n      }\n    })\n}\n```", "```jsx\n  router.route('/api/posts/like')\n    .put(authCtrl.requireSignin, postCtrl.like)\n```", "```jsx\nconst like = (req, res) => {\n  Post.findByIdAndUpdate(req.body.postId,\n {$push: {likes: req.body.userId}}, {new: true})\n  .exec((err, result) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(result)\n  })\n}\n```", "```jsx\nconst like = (params, credentials, postId) => {\n  return fetch('/api/posts/like/', {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify({userId:params.userId, postId: postId})\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n```", "```jsx\n  router.route('/api/posts/unlike')\n    .put(authCtrl.requireSignin, postCtrl.unlike)\n```", "```jsx\nconst unlike = (req, res) => {\n  Post.findByIdAndUpdate(req.body.postId, {$pull: {likes: req.body.userId}}, {new: true})\n  .exec((err, result) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(result)\n  })\n}\n```", "```jsx\ncheckLike = (likes) => {\n    const jwt = auth.isAuthenticated()\n    let match = likes.indexOf(jwt.user._id) !== -1\n    return match\n}\n```", "```jsx\ncomponentDidMount = () => {\n    this.setState({like:this.checkLike(this.props.post.likes), \n                   likes: this.props.post.likes.length, \n                   comments: this.props.post.comments})\n}\ncomponentWillReceiveProps = (props) => {\n    this.setState({like:this.checkLike(props.post.likes), \n                   likes: props.post.likes.length, \n                   comments: props.post.comments})\n}\n```", "```jsx\nlike = () => {\n    let callApi = this.state.like ? unlike : like \n    const jwt = auth.isAuthenticated()\n    callApi({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, this.props.post._id).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        this.setState({like: !this.state.like, likes: \n       data.likes.length})\n      }\n    }) \n  }\n```", "```jsx\nrouter.route('/api/posts/comment')\n    .put(authCtrl.requireSignin, postCtrl.comment)\n```", "```jsx\nconst comment = (req, res) => {\n  let comment = req.body.comment\n  comment.postedBy = req.body.userId\n  Post.findByIdAndUpdate(req.body.postId,\n {$push: {comments: comment}}, {new: true})\n  .populate('comments.postedBy', '_id name')\n  .populate('postedBy', '_id name')\n  .exec((err, result) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(result)\n  })\n}\n```", "```jsx\nconst comment = (params, credentials, postId, comment) => {\n  return fetch('/api/posts/comment/', {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify({userId:params.userId, postId: postId, \n    comment: comment})\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n```", "```jsx\n<CardHeader\n   avatar={<Avatar className={classes.smallAvatar} \n              src={'/api/users/photo/'+auth.isAuthenticated().user._id}/>}\n   title={<TextField\n             onKeyDown={this.addComment}\n             multiline\n             value={this.state.text}\n             onChange={this.handleChange('text')}\n             placeholder=\"Write something ...\"\n             className={classes.commentField}\n             margin=\"normal\"/>}\n   className={classes.cardHeader}\n/>\n```", "```jsx\naddComment = (event) => {\n    if(event.keyCode == 13 && event.target.value){\n      event.preventDefault()\n      const jwt = auth.isAuthenticated()\n      comment({\n        userId: jwt.user._id\n      }, {\n        t: jwt.token\n      }, this.props.postId, {text: this.state.text}).then((data) => {\n        if (data.error) {\n          console.log(data.error)\n        } else {\n          this.setState({text: ''})\n          this.props.updateComments(data.comments)\n        }\n      })\n    }\n}\n```", "```jsx\n{this.props.comments.map((item, i) => {\n                return <CardHeader\n                      avatar={\n                        <Avatar src=  \n                     {'/api/users/photo/'+item.postedBy._id}/>\n                      }\n                      title={commentBody(item)}\n                      className={classes.cardHeader}\n                      key={i}/>\n              })\n}\n```", "```jsx\nconst commentBody = item => {\n  return (\n     <p className={classes.commentText}>\n        <Link to={\"/user/\" + item.postedBy._id}>{item.postedBy.name}\n        </Link><br/>\n        {item.text}\n        <span className={classes.commentDate}>\n          {(new Date(item.created)).toDateString()} |\n          {auth.isAuthenticated().user._id === item.postedBy._id &&\n            <Icon onClick={this.deleteComment(item)} \n                  className={classes.commentDelete}>delete</Icon> }\n        </span>\n     </p>\n   )\n}\n```", "```jsx\nrouter.route('/api/posts/uncomment')\n    .put(authCtrl.requireSignin, postCtrl.uncomment)\n```", "```jsx\nconst uncomment = (req, res) => {\n  let comment = req.body.comment\n  Post.findByIdAndUpdate(req.body.postId, {$pull: {comments: {_id: comment._id}}}, {new: true})\n  .populate('comments.postedBy', '_id name')\n  .populate('postedBy', '_id name')\n  .exec((err, result) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(result)\n  })\n}\n```", "```jsx\ndeleteComment = comment => event => {\n    const jwt = auth.isAuthenticated()\n    uncomment({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, this.props.postId, comment).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        this.props.updateComments(data.comments)\n      }\n    })\n  }\n```", "```jsx\nupdateComments = (comments) => {\n    this.setState({comments: comments})\n}\n```", "```jsx\n<IconButton aria-label=\"Comment\" color=\"secondary\">\n  <CommentIcon/>\n</IconButton> <span>{this.state.comments.length}</span>\n```"]