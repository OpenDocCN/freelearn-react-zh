["```jsx\nimport mongoose from 'mongoose'\nimport crypto from 'crypto'\nconst MediaSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: 'title is required'\n  },\n  description: String,\n  genre: String,\n  views: {type: Number, default: 0},\n  postedBy: {type: mongoose.Schema.ObjectId, ref: 'User'},\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  updated: {\n    type: Date\n  }\n})\n\nexport default mongoose.model('Media', MediaSchema)\n```", "```jsx\nnpm install gridfs-stream --save\n```", "```jsx\nimport mongoose from 'mongoose'\nimport Grid from 'gridfs-stream'\nGrid.mongo = mongoose.mongo\nlet gridfs = null\nmongoose.connection.on('connected', () => {\n  gridfs = Grid(mongoose.connection.db)\n})\n```", "```jsx\nrouter.route('/api/media/new/:userId')\n        .post(authCtrl.requireSignin, mediaCtrl.create)\nrouter.param('userId', userCtrl.userByID)\n```", "```jsx\napp.use('/', mediaRoutes)\n```", "```jsx\nnpm install formidable --save\n```", "```jsx\nconst create = (req, res, next) => {\n  let form = new formidable.IncomingForm()\n    form.keepExtensions = true\n    form.parse(req, (err, fields, files) => {\n      if (err) {\n        return res.status(400).json({\n          error: \"Video could not be uploaded\"\n        })\n      }\n      let media = new Media(fields)\n      media.postedBy= req.profile\n      if(files.video){\n        let writestream = gridfs.createWriteStream({_id: media._id})\n        fs.createReadStream(files.video.path).pipe(writestream)\n      }\n      media.save((err, result) => {\n        if (err) {\n          return res.status(400).json({\n            error: errorHandler.getErrorMessage(err)\n          })\n        }\n        res.json(result)\n      })\n    })\n}\n```", "```jsx\nconst create = (params, credentials, media) => {\n  return fetch('/api/media/new/'+ params.userId, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: media\n  }).then((response) => {\n    return response.json() \n  }).catch((err) => {\n    console.log(err) \n  }) \n}\n```", "```jsx\n<Link to=\"/media/new\">\n     <Button style={isActive(history, \"/media/new\")}>\n        <AddBoxIcon style={{marginRight: '8px'}}/> Add Media\n     </Button>\n</Link>\n```", "```jsx\n<PrivateRoute path=\"/media/new\" component={NewMedia}/>\n```", "```jsx\n<input accept=\"video/*\" \n       onChange={this.handleChange('video')} \n       id=\"icon-button-file\" \n       type=\"file\"\n       style={{display: none}}/>\n<label htmlFor=\"icon-button-file\">\n    <Button color=\"secondary\" variant=\"raised\" component=\"span\">\n       Upload <FileUpload/>\n    </Button>\n</label> \n<span>{this.state.video ? this.state.video.name : ''}</span>\n\n```", "```jsx\n<TextField id=\"title\" label=\"Title\" value={this.state.title} \n           onChange={this.handleChange('title')} margin=\"normal\"/><br/>\n<TextField id=\"multiline-flexible\" label=\"Description\"\n           multiline rows=\"2\"\n           value={this.state.description}\n           onChange={this.handleChange('description')}/><br/>\n<TextField id=\"genre\" label=\"Genre\" value={this.state.genre} \n           onChange={this.handleChange('genre')}/><br/>\n```", "```jsx\nhandleChange = name => event => {\n    const value = name === 'video'\n      ? event.target.files[0]\n      : event.target.value\n    this.mediaData.set(name, value)\n    this.setState({ [name]: value })\n}\n```", "```jsx\ncomponentDidMount = () => {\n    this.mediaData = new FormData()\n}\n```", "```jsx\n clickSubmit = () => {\n    const jwt = auth.isAuthenticated()\n    create({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, this.mediaData).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        this.setState({redirect: true, mediaId: data._id})\n      }\n    })\n }\n```", "```jsx\nif (this.state.redirect) {\n      return (<Redirect to={'/media/' + this.state.mediaId}/>)\n}\n```", "```jsx\nrouter.route('/api/medias/video/:mediaId')\n        .get(mediaCtrl.video)\nrouter.param('mediaId', mediaCtrl.mediaByID)\n```", "```jsx\nconst mediaByID = (req, res, next, id) => {\n  Media.findById(id).populate('postedBy', '_id name').exec((err, media) => {\n    if (err || !media)\n      return res.status('400').json({\n        error: \"Media not found\"\n      })\n    req.media = media\n    next()\n  })\n}\n```", "```jsx\nconst video = (req, res) => {\n  gridfs.findOne({\n        _id: req.media._id\n    }, (err, file) => {\n        if (err) {\n            return res.status(400).send({\n                error: errorHandler.getErrorMessage(err)\n            })\n        }\n        if (!file) {\n            return res.status(404).send({\n                error: 'No video found'\n            })\n        }\n\n        if (req.headers['range']) {\n            ...\n            ... consider range headers and send only relevant chunks in \n           response ...\n            ...\n        } else {\n            res.header('Content-Length', file.length)\n            res.header('Content-Type', file.contentType)\n\n            gridfs.createReadStream({\n                _id: file._id\n            }).pipe(res)\n        }\n    })\n}\n```", "```jsx\nlet parts = req.headers['range'].replace(/bytes=/, \"\").split(\"-\")\nlet partialstart = parts[0]\nlet partialend = parts[1]\n\nlet start = parseInt(partialstart, 10)\nlet end = partialend ? parseInt(partialend, 10) : file.length - 1\nlet chunksize = (end - start) + 1\n\nres.writeHead(206, {\n    'Accept-Ranges': 'bytes',\n 'Content-Length': chunksize,\n 'Content-Range': 'bytes ' + start + '-' + end + '/' + file.length,\n 'Content-Type': file.contentType\n})\n\ngridfs.createReadStream({\n        _id: file._id,\n        range: {\n                 startPos: start,\n                 endPos: end\n                }\n}).pipe(res)\n```", "```jsx\nnpm install react-player --save\n```", "```jsx\n<ReactPlayer url={'/api/media/video/'+media._id} controls/>\n```", "```jsx\n<GridList cols={3}>\n   {this.props.media.map((tile, i) => (\n        <GridListTile key={i}>\n          <Link to={\"/media/\"+tile._id}>\n            <ReactPlayer url={'/api/media/video/'+tile._id} \n                         width='100%' height='inherit'/>\n          </Link>\n          <GridListTileBar \n            title={<Link to={\"/media/\"+tile._id}>{tile.title}</Link>}\n            subtitle={<span>{tile.views} views \n                  <span style={{float: 'right'}}>{tile.genre}</span>}/>\n        </GridListTile>\n    ))}\n</GridList>\n```", "```jsx\n router.route('/api/media/popular')\n          .get(mediaCtrl.listPopular)\n```", "```jsx\nconst listPopular = (req, res) => {\n  Media.find({}).limit(10)\n  .populate('postedBy', '_id name')\n  .sort('-views')\n  .exec((err, posts) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(posts)\n  })\n}\n```", "```jsx\nconst listPopular = (params) => {\n  return fetch('/api/media/popular', {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    return response.json() \n  }).catch((err) => console.log(err)) \n}\n```", "```jsx\ncomponentDidMount = () => {\n    listPopular().then((data) => {\n      if (data.error) {\n        console.log(data.error) \n      } else {\n        this.setState({media: data}) \n      }\n    })\n  }\n```", "```jsx\n<MediaList media={this.state.media}/>\n```", "```jsx\nrouter.route('/api/media/by/:userId')\n         .get(mediaCtrl.listByUser) \n```", "```jsx\nconst listByUser = (req, res) => {\n  Media.find({postedBy: req.profile._id})\n  .populate('postedBy', '_id name')\n  .sort('-created')\n  .exec((err, posts) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(posts)\n  })\n}\n```", "```jsx\nconst listByUser = (params) => {\n  return fetch('/api/media/by/'+ params.userId, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    return response.json() \n  }).catch((err) => console.log(err)) \n}\n```", "```jsx\nrouter.route('/api/media/:mediaId')\n    .get( mediaCtrl.incrementViews, mediaCtrl.read)\n```", "```jsx\nconst read = (req, res) => {\n  return res.json(req.media)\n}\n```", "```jsx\nconst incrementViews = (req, res, next) => {\n  Media.findByIdAndUpdate(req.media._id, {$inc: {\"views\": 1}}, {new: true})\n      .exec((err, result) => {\n        if (err) {\n          return res.status(400).json({\n            error: errorHandler.getErrorMessage(err)\n          })\n        }\n        next()\n      })\n}\n```", "```jsx\nconst read = (params) => {\n  return fetch(config.serverUrl+'/api/media/' + params.mediaId, {\n    method: 'GET'\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n```", "```jsx\n<Media media={this.state.media}/>\n```", "```jsx\n<CardHeader \n   title={this.props.media.title}\n   action={<span>\n                {this.props.media.views + ' views'}\n           </span>}\n   subheader={this.props.media.genre}\n/>\n```", "```jsx\nconst mediaUrl = this.props.media._id\n          ? `/api/media/video/${this.props.media._id}`\n          : null\n            \u2026 \n<ReactPlayer url={mediaUrl} \n             controls\n             width={'inherit'}\n             height={'inherit'}\n             style={{maxHeight: '500px'}}\n             config={{ attributes: \n                        { style: { height: '100%', width: '100%'} } \n}}/>\n```", "```jsx\n<ListItem>\n    <ListItemAvatar>\n      <Avatar>\n        {this.props.media.postedBy.name && \n                        this.props.media.postedBy.name[0]}\n      </Avatar>\n    </ListItemAvatar>\n    <ListItemText primary={this.props.media.postedBy.name} \n              secondary={\"Published on \" + \n                        (new Date(this.props.media.created))\n                        .toDateString()}/>\n</ListItem>\n<ListItem>\n    <ListItemText primary={this.props.media.description}/>\n</ListItem>\n```", "```jsx\n{(auth.isAuthenticated().user && auth.isAuthenticated().user._id) \n    == this.props.media.postedBy._id && (<ListItemSecondaryAction>\n        <Link to={\"/media/edit/\" + this.props.media._id}>\n          <IconButton aria-label=\"Edit\" color=\"secondary\">\n            <Edit/>\n          </IconButton>\n        </Link>\n        <DeleteMedia mediaId={this.props.media._id} mediaTitle=\n       {this.props.media.title}/>\n      </ListItemSecondaryAction>)}\n```", "```jsx\nrouter.route('/api/media/:mediaId')\n        .put(authCtrl.requireSignin, \n                mediaCtrl.isPoster, \n                    mediaCtrl.update)\n```", "```jsx\nconst isPoster = (req, res, next) => {\n  let isPoster = req.media && req.auth \n  && req.media.postedBy._id == req.auth._id\n  if(!isPoster){\n    return res.status('403').json({\n      error: \"User is not authorized\"\n    })\n  }\n  next()\n}\n```", "```jsx\nconst update = (req, res, next) => {\n  let media = req.media\n  media = _.extend(media, req.body)\n  media.updated = Date.now()\n  media.save((err) => {\n    if (err) {\n      return res.status(400).send({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(media)\n  })\n}\n```", "```jsx\nconst update = (params, credentials, media) => {\n  return fetch('/api/media/' + params.mediaId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify(media)\n  }).then((response) => {\n    return response.json() \n  }).catch((err) => {\n    console.log(err) \n  }) \n}\n```", "```jsx\n<PrivateRoute path=\"/media/edit/:mediaId\" component={EditMedia}/>\n```", "```jsx\n  componentDidMount = () => {\n    read({mediaId: this.match.params.mediaId}).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error}) \n      } else {\n        this.setState({media: data}) \n      }\n    }) \n  }\n```", "```jsx\nhandleChange = name => event => {\n    let updatedMedia = this.state.media\n    updatedMedia[name] = event.target.value\n    this.setState({media: updatedMedia})\n}\n```", "```jsx\n  clickSubmit = () => {\n    const jwt = auth.isAuthenticated() \n    update({\n      mediaId: this.state.media._id\n    }, {\n      t: jwt.token\n    }, this.state.media).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error}) \n      } else {\n        this.setState({error: '', redirect: true, media: data}) \n      }\n    }) \n}\n```", "```jsx\nrouter.route('/api/media/:mediaId')\n        .delete(authCtrl.requireSignin, \n                    mediaCtrl.isPoster, \n                        mediaCtrl.remove)\n```", "```jsx\nconst remove = (req, res, next) => {\n  let media = req.media\n    media.remove((err, deletedMedia) => {\n      if (err) {\n        return res.status(400).json({\n          error: errorHandler.getErrorMessage(err)\n        })\n      }\n      gridfs.remove({ _id: req.media._id })\n      res.json(deletedMedia)\n    })\n}\n```", "```jsx\nconst remove = (params, credentials) => {\n  return fetch('/api/media/' + params.mediaId, {\n    method: 'DELETE',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then((response) => {\n    return response.json() \n  }).catch((err) => {\n    console.log(err) \n  }) \n}\n```", "```jsx\n<IconButton aria-label=\"Delete\" onClick={this.clickButton} color=\"secondary\">\n    <DeleteIcon/>\n</IconButton>\n<Dialog open={this.state.open} onClose={this.handleRequestClose}>\n  <DialogTitle>{\"Delete \"+this.props.mediaTitle}</DialogTitle>\n  <DialogContent>\n     <DialogContentText>\n         Confirm to delete {this.props.mediaTitle} from your account.\n     </DialogContentText>\n  </DialogContent>\n  <DialogActions>\n     <Button onClick={this.handleRequestClose} color=\"primary\">\n        Cancel\n     </Button>\n     <Button onClick={this.deleteMedia} \n              color=\"secondary\" \n              autoFocus=\"autoFocus\"\n              variant=\"raised\">\n        Confirm\n     </Button>\n  </DialogActions>\n</Dialog>\n```", "```jsx\ndeleteMedia = () => {\n    const jwt = auth.isAuthenticated() \n    remove({\n      mediaId: this.props.mediaId\n    }, {t: jwt.token}).then((data) => {\n      if (data.error) {\n        console.log(data.error) \n      } else {\n        this.setState({redirect: true}) \n      }\n    }) \n}\n```", "```jsx\nif (this.state.redirect) {\n   return <Redirect to='/'/> \n}\n```"]