["```jsx\n// lifecycle.json\n{\n  \"lifecycle\": {\n    \"rule\":\n    [\n      {\n        \"action\": {\"type\": \"Delete\"},\n        \"condition\": {\"age\": 365}  \n      }\n    ]\n  }\n}\n```", "```jsx\n\nimport firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyDO1VEnd5VmWd2OWQ9NQkkkkh-ehNXcoPTy-w\",\n    authDomain: \"demoproject-7cc0d.firebaseapp.com\",\n    databaseURL: \"https://demoproject-7cc0d.firebaseio.com\",\n    projectId: \"demoproject-7cc0d\",\n    storageBucket: \"gs://demoproject-7cc0d.appspot.com\",\n    messagingSenderId: \"41428255555\"\n};\n\nexport const firebaseApp = firebase.initializeApp(config);\n\n// Get a reference to the storage service,\nvar storage = firebase.storage();\n```", "```jsx\nvar storage = firebase.storage();\n```", "```jsx\nvar homepageRef = storageRef.child('images/homepage.jpg');\n```", "```jsx\n// move to the parent of a reference - refers to images  var imagesRef = homepageRef.parent;\n\n//move to highest parent or top of the bucket\nvar rootRef = homepageRef.root;\n\n//chaining can be done for root, parent and child for multiple times\nhomepageRef.parent.child('test.jpg'); \n```", "```jsx\n// File path is 'images/homepage.jpg'\nvar path = homepageRef.fullPath\n\n// File name is 'homepage.jpg'\nvar name = homepageRef.name\n\n// Points to 'images'\nvar imagesRef = homepageRef.parent;\n```", "```jsx\nimport React, { Component } from 'react';\nimport firebase from '../firebase/firebase-config';\nimport { ToastSuccess, ToastDanger } from 'react-toastr-basic';\n\nclass AddTicketForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleSubmitEvent = this.handleSubmitEvent.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.onChange = this.onChange.bind(this);\n    console.log(props.userInfo);\n\n    this.state = {\n      uId: props.userId,\n      email: props.userInfo[0].email,\n      issueType: \"\",\n      department: \"\",\n      comment: \"\",\n      snapshot: null\n    }\n  }\n\n  handleChange(event) {\n    console.log(event.target.value);\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n\n  //handle onchange - set the snapshot value to the file selected\n  onChange(e) {\n console.log(\"ff \",e.target.files[0] );\n this.setState({snapshot:e.target.files[0]})\n }\n\n  handleSubmitEvent(e) {\n    e.preventDefault();\n    var storageRef = firebase.storage().ref();\n\n // Create a reference to 'image'\n var snapshotRef = storageRef.child('ticket_snapshots/'+this.state.snapshot.name);\n\n //get a reference to 'this' in a variable since in callback this will point to different object\n var _this = this;\n snapshotRef.put(this.state.snapshot).then(function(res) {\n console.log('Uploaded a blob or file!');\n console.log(res.metadata);\n\n const userId = _this.state.uId;\n var data = {\n date: Date(),\n email: _this.state.email,\n issueType: _this.state.issueType,\n department: _this.state.department,\n comments: _this.state.comment,\n status: \"progress\",\n snapshotURL: res.metadata.downloadURLs[0]  //save url in db to use it for download\n }\n\n console.log(data);\n\n var newTicketKey = firebase.database().ref('/helpdesk').child('tickets').push().key;\n // Write the new ticket data simultaneously in the tickets list and the user's ticket list.\n var updates = {};\n updates['/helpdesk/tickets/' + userId + '/' + newTicketKey] = data;\n updates['/helpdesk/tickets/all/' + newTicketKey] = data;\n\n return firebase.database().ref().update(updates).then(() => {\n ToastSuccess(\"Saved Successfully!!\");\n this.setState({\n issueType: \"\",\n department: \"\",\n comment: \"\",\n snapshot: _this.state.snapshot\n });\n }).catch((error) => {\n ToastDanger(error.message);\n });\n\n });\n\n    //React form data object\n\n  }\n //render() method - snippet given below\n}\nexport default AddTicketForm;\n```", "```jsx\n render() {\n    var style = { color: \"#ffaaaa\" };\n    return (\n      <form onSubmit={this.handleSubmitEvent} >\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email <span style={style}>*</span></label>\n          <input type=\"text\" id=\"email\" className=\"form-control\"\n            placeholder=\"Enter email\" value={this.state.email} disabled  \n            required onChange={this.handleChange} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"issueType\">Issue Type <span style={style}> *</span></label>\n          <select className=\"form-control\" value={this.state.issueType} \n          id=\"issueType\" required onChange={this.handleChange}>\n            <option value=\"\">Select</option>\n            <option value=\"Access Related Issue\">Access Related \n            Issue</option>\n            <option value=\"Email Related Issues\">Email Related \n             Issues</option>\n            <option value=\"Hardware Request\">Hardware Request</option>\n            <option value=\"Health & Safety\">Health & Safety</option>\n            <option value=\"Network\">Network</option>\n            <option value=\"Intranet\">Intranet</option>\n            <option value=\"Other\">Other</option>\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"department\">Assign Department\n        <span style={style}> *</span></label>\n          <select className=\"form-control\" value={this.state.department} id=\"department\" required onChange={this.handleChange}>\n            <option value=\"\">Select</option>\n            <option value=\"Admin\">Admin</option>\n            <option value=\"HR\">HR</option>\n            <option value=\"IT\">IT</option>\n            <option value=\"Development\">Development</option>\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"comments\">Comments <span style={style}> *</span></label>\n          (<span id=\"maxlength\"> 200 </span> characters left)\n            <textarea className=\"form-control\" rows=\"3\" id=\"comment\" value={this.state.comment} onChange={this.handleChange} required></textarea>\n        </div>\n        <div className=\"form-group\">\n <label htmlFor=\"fileUpload\">Snapshot</label>\n <input id=\"snapshot\" type=\"file\" onChange={this.onChange} />\n </div>\n        <div className=\"btn-group\">\n          <button type=\"submit\" className=\"btn btn-\n          primary\">Submit</button>\n          <button type=\"reset\" className=\"btn btn-\n          default\">cancel</button>\n        </div>\n      </form>\n    );\n  }\n```", "```jsx\n// Create file metadata including the content type  var metadata =  { contentType:  'image/jpeg',\n customMetadata: {\n      'ticketNo':'12345'\n  } };  // Upload the file and metadata  var uploadTask = storageRef.child('folder/file.jpg').put(file, metadata);\n```", "```jsx\n// Upload the file and metadata  var uploadTask = storageRef.child('folder/file.jpg').put(file);  // Pause the upload - state changes to pause uploadTask.pause();  // Resume the upload - state changes to running uploadTask.resume();  // Cancel the upload - returns an error indicating file upload is cancelled uploadTask.cancel();\n```", "```jsx\n// File\nvar file = this.state.snapshot;\n\n// Create the file metadata\nvar metadata = {\n  contentType: 'image/jpeg'\n};\n\n// Upload file and metadata to the object 'images/mountains.jpg'\nvar uploadTask = storageRef.child('ticket_snapshots/' + file.name).put(file, metadata);\n\n// Listen for state changes, errors, and completion of the upload.\nuploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n  function(snapshot) {\n    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n    var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n    console.log('Upload is ' + progress + '% done');\n    switch (snapshot.state) {\n      case firebase.storage.TaskState.PAUSED: // or 'paused'\n        console.log('Upload is paused');\n        break;\n      case firebase.storage.TaskState.RUNNING: // or 'running'\n        console.log('Upload is running');\n        break;\n    }\n  }, function(error) {\n\n  // A full list of error codes is available at\n  // https://firebase.google.com/docs/storage/web/handle-errors\n  switch (error.code) {\n    case 'storage/unauthorized':\n      // User doesn't have permission to access the object\n      break;\n\n    case 'storage/canceled':\n      // User canceled the upload\n      break;\n\n    case 'storage/unknown':\n      // Unknown error occurred, inspect error.serverResponse\n      break;\n  }\n}, function() {\n  // Upload completed successfully, now we can get the download URL\n  var downloadURL = uploadTask.snapshot.downloadURL;\n});\n```", "```jsx\nvar storage = firebase.storage();  var pathReference = storage.ref('images/stars.jpg');  // Create a reference from a Google Cloud Storage URI  var gsReference = storage.refFromURL('gs://bucket/folder/file.jpg')  // Create a reference from an HTTPS URL  // Note that in the URL, characters are URL escaped!  var httpsReference = storage.refFromURL('https://firebasestorage..../file.jpg')\n```", "```jsx\n componentDidMount() {\n    const itemsRef = firebase.database().ref('/helpdesk/tickets/'+this.props.userId);\n\n    itemsRef.on('value', (snapshot) => {\n      let tickets = snapshot.val();\n      if(tickets != null){\n        let ticketKeys = Object.keys(tickets);\n        let newState = [];\n        for (let ticket in tickets) {\n          newState.push({\n            id:ticketKeys,\n            email:tickets[ticket].email,\n            issueType:tickets[ticket].issueType,\n            department:tickets[ticket].department,\n            comments:tickets[ticket].comments,\n            status:tickets[ticket].status,\n            date:tickets[ticket].date,\n            snapshotURL: tickets[ticket].snapshotURL\n        });\n      }\n        this.setState({\n          tickets: newState\n        });\n      }\n    });\n}\n\nrender() {\n    return (\n        <table className=\"table\">\n        <thead>\n        <tr> \n            <th>Email</th>\n            <th>Issue Type</th> \n            <th>Department</th> \n            <th>Comments</th>\n            <th>Status</th> \n            <th>Date</th> \n            <th>Snapshot</th> \n        </tr>\n        </thead>\n        <tbody>\n              {\n\n                this.state.tickets.length > 0 ?\n                this.state.tickets.map((item,index) => {\n                return (\n\n                  <tr key={item.id[index]}>\n                    <td>{item.email}</td>\n                    <td>{item.issueType}</td> \n                    <td>{item.department}</td> \n                    <td>{item.comments}</td>\n                    <td>{item.status === 'progress'?'In Progress':''}</td> \n                    <td>{item.date}</td> \n                    <th><a target=\"_blank\" href={item.snapshotURL}>View</a></th> \n                  </tr>\n                )\n              }) :\n              <tr>\n                <td colSpan=\"5\" className=\"text-center\">No tickets found.</td>\n              </tr>\n            }\n        </tbody>\n        </table>\n    );\n```", "```jsx\n// Create a reference to the file to delete  var fileRef = storageRef.child('folder/file.jpg');  // Delete the file desertRef.delete().then(function()  {  // File deleted successfully  }).catch(function(error)  {  // an error occurred!  });\n```", "```jsx\ngsutil -m acl ch -r -u firebase-storage@system.gserviceaccount.com:O gs://<your-cloud-storage-bucket>\n```", "```jsx\nnpm install -g firebase-tools\n```", "```jsx\nfirebase init\n```", "```jsx\n{\n  \"database\": {\n    \"rules\": \"database.rules.json\"\n  },\n  \"hosting\": {\n    \"public\": \"build\",\n    \"ignore\": [\n      \"firebase.json\",\n      \"**/.*\",\n      \"**/node_modules/**\"\n    ],\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }\n}\n```", "```jsx\nfirebase deploy\n```", "```jsx\nfirebase login --reauth\n```"]