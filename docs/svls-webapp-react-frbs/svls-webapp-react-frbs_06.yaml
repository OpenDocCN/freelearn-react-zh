- en: Firebase Security and Rules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase安全和规则
- en: In the previous chapter, we saw how we can incorporate access management in
    an application to secure it from unauthorized access, which is essentially the
    application level security. However, what if we don't have our database secured?
    Well, in that case, data can be misused by unauthorized users or even authorized
    users, such as database administrators, which leads to business loss or sometimes
    legal actions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了如何在应用程序中整合访问管理以保护它免受未经授权的访问，这实质上是应用程序级别的安全性。然而，如果我们的数据库没有得到保护呢？嗯，在这种情况下，数据可能会被未经授权的用户或甚至经过授权的用户（如数据库管理员）滥用，这会导致业务损失，有时甚至会引发法律诉讼。
- en: Data security is always a major concern, especially when it is hosted on Cloud
    Server. We have to protect our data against the compromises of integrity, availability,
    and confidentiality. It doesn't matter whether you are using RDBMS, such as MySQL
    or MSSQL, or NoSQL, such as MongoDB or Firebase Realtime Database; all these databases
    have to be secured by restricting access to the data. In this chapter, we will
    briefly look at the common database security risks and the checklist to prevent
    such threats. We will also see the security part of Firebase Realtime Database
    and the Firebase Realtime Database Rules language.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据安全始终是一个主要关注点，特别是当它托管在云服务器上时。我们必须保护我们的数据免受完整性、可用性和机密性的妥协。无论您使用的是关系型数据库管理系统，如MySQL或MSSQL，还是NoSQL，如MongoDB或Firebase实时数据库；所有这些数据库都必须通过限制对数据的访问来进行保护。在本章中，我们将简要介绍常见的数据库安全风险以及预防此类威胁的清单。我们还将看到Firebase实时数据库的安全部分和Firebase实时数据库规则语言。
- en: 'Here''s a list of the topics we will discuss in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将讨论的主题列表：
- en: Overview of common Database Security Risks and Preventive measures
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见数据库安全风险和预防措施概述
- en: Overview of Firebase Security
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase安全概述
- en: Overview of Firebase Realtime Database Rules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase实时数据库规则概述
- en: Structure and Definition of Firebase Realtime Database Rules
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase实时数据库规则的结构和定义
- en: Introduction to Data Indexing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据索引简介
- en: Database Backups and Restore
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库备份和恢复
- en: Let's start with Security Risks and Prevention of the threats.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从威胁的安全风险和预防开始。
- en: Security risks and prevention
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全风险和预防
- en: 'The databases are at the heart of any organization since they contain customers''
    data and confidential business data and hence they are targeted by hackers very
    often. There are some common threats identified over the last few years and they
    include these:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库是任何组织的核心，因为它们包含客户数据和机密业务数据，因此它们经常成为黑客的目标。在过去几年中已经确定了一些常见的威胁，包括以下内容：
- en: Unauthorized or unintended activity
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未经授权或意外活动
- en: Malware Infections
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意软件感染
- en: Physical damage to database servers
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库服务器的物理损坏
- en: Data corruption due to invalid data
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于无效数据而导致数据损坏
- en: Performance Degradation
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能下降
- en: 'To prevent such risks, there are many protocols or security standards that
    need to be followed:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这些风险，需要遵循许多协议或安全标准：
- en: '**Access Control**: It includes Authentication and Authorization. All the database
    systems provide access control mechanisms such as authentication with username
    and password for authentication. At the same time, in some of the databases, it
    is not mandatory to set it and hence sometimes people don''t enable it, leaving
    the database insecure. Similarly, in all databases, authorization mechanisms such
    as role-based security is provided to restrict the users to certain data or database.
    However, people sometimes give root or admin access to all the users, leaving
    the data open to all the users.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问控制：包括身份验证和授权。所有数据库系统都提供访问控制机制，例如使用用户名和密码进行身份验证。同时，在某些数据库中，设置它并不是强制性的，因此有时人们不启用它，使数据库不安全。同样，在所有数据库中，提供了基于角色的安全授权机制，以限制用户对某些数据或数据库的访问。然而，有时人们会给予所有用户根或管理员访问权限，使数据对所有用户开放。
- en: '**Auditing**: Auditing involves monitoring of database activities performed
    by all users for enhanced security and protection of data. Many of the database
    platforms include inbuilt auditing capabilities, which allow you to trace the
    data creation, deletion, or modification activities and database usage to detect
    any suspicious activities at an early stage.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审计：审计涉及监控所有用户执行的数据库活动，以增强安全性并保护数据。许多数据库平台包括内置的审计功能，允许您跟踪数据创建、删除或修改活动以及数据库使用情况，以便在早期检测到任何可疑活动。
- en: '**Backups**: Backups are meant to recover data from an earlier time and to
    recover data in case of data deletion or data corruption. Depending on the requirement,
    the backup process can be automated or manual. Ideally, it should be automated
    so that regular backups can be taken. While it is worth to have at least a few
    backups, the data storage space can be significant, depending on the size of your
    data/backup. To reduce the size of backups, backup files should be compressed
    before persisting them.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 备份：备份旨在从较早的时间恢复数据，并在数据删除或数据损坏的情况下恢复数据。根据要求，备份过程可以是自动化的或手动的。理想情况下，应该是自动化的，以便可以定期进行备份。虽然至少应该有一些备份，但数据存储空间可能很大，这取决于数据/备份的大小。为了减小备份的大小，应在持久化之前对备份文件进行压缩。
- en: '**Data Integrity Controls**: Data Integrity refers to the consistency and accuracy
    of the data stored in the database. Data validation is prerequisite for data integrity.
    Many Relational Databases (RDBMS) enforce data integrity through constraints like
    a Primary key and Foreign Key constraints. In case of NoSQL, data validation at
    the database level, and also at the application level, is required for data integrity.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据完整性控制：数据完整性是指数据库中存储的数据的一致性和准确性。数据验证是数据完整性的先决条件。许多关系数据库（RDBMS）通过约束（如主键和外键约束）强制数据完整性。在NoSQL的情况下，需要在数据库级别和应用程序级别进行数据验证，以确保数据完整性。
- en: '**Application level security**: Application level security is also required
    to prevent any inappropriate data from being saved on the database. Generally,
    developers have validations at form level and also at the business, to ensure
    that they save valid data in the database.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序级安全性：还需要应用程序级安全性，以防止任何不当的数据保存在数据库中。通常，开发人员在表单级别和业务级别进行验证，以确保他们在数据库中保存有效的数据。
- en: '**Encryption**: It is very important to encrypt personal data such as SSN or
    financial data such as Credit card information to prevent its misuse. Usually,
    SSL encryption is used to encrypt the connection between client and server, which
    is essentially network level security, to prevent any malicious attacker from
    reading this information.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加密：加密个人数据（如社会安全号码）或金融数据（如信用卡信息）非常重要，以防止其被滥用。通常，使用SSL加密来加密客户端和服务器之间的连接，这实质上是网络级别的安全，以防止任何恶意攻击者阅读这些信息。
- en: Now, let's check how secure our data is in Firebase.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来检查Firebase中我们的数据有多安全。
- en: How secure is your Firebase?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的Firebase有多安全？
- en: Firebase is on cloud storage, so obviously, people think whether it is secure
    enough. However, there's nothing to worry, as Firebase provides a secured architecture
    and a set of tools to manage the security of your app. Firebase is hosted on SSL
    (Secure Sockets Layer), which typically encrypts the connection between client
    and server and hence prevents any data theft or manipulation at the network layer.
    Firebase comes with an expression-based rule language that allows you to manage
    data security by just doing configuration.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase位于云存储上，因此人们很自然地会考虑它是否足够安全。然而，不用担心，因为Firebase提供了一个安全的架构和一套工具来管理应用程序的安全性。Firebase托管在SSL（安全套接字层）上，通常加密客户端和服务器之间的连接，从而防止在网络层发生任何数据窃取或篡改。Firebase配备了基于表达式的规则语言，允许您通过配置来管理数据安全性。
- en: Firebase security is all about the configuration over convention so that your
    application's security-related logic is separate from your business logic. In
    this way, it makes your application loosely coupled.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase安全性主要是关于配置而不是约定，这样您的应用程序的安全相关逻辑就与业务逻辑分离开来。这样一来，您的应用程序就变得松散耦合。
- en: In this chapter, we will learn about Firebase Realtime Database security and
    rules.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习有关Firebase实时数据库安全性和规则的内容。
- en: Realtime Database Rules Overview
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时数据库规则概述
- en: Firebase Database Rules allow you to manage the read and write access permissions
    to your database. They also help you define how your data will be validated, such
    as whether it has valid datatype and format. If your rules allow, only then will
    read and write requests be completed. By default, your rules are set to allow
    only authenticated users with full read and write access to your database.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase数据库规则允许您管理对数据库的读取和写入访问权限。它们还帮助您定义数据的验证方式，例如它是否具有有效的数据类型和格式。只有在您的规则允许的情况下，读取和写入请求才会被完成。默认情况下，您的规则被设置为只允许经过身份验证的用户完全读取和写入数据库。
- en: 'Firebase Database Rules have a JavaScript-like syntax and come in four types:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase数据库规则具有类似JavaScript的语法，并分为四种类型：
- en: '| `.read` | It determines whether data is allowed to be read by users and when.
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `.read` | 它确定用户何时允许读取数据。 |'
- en: '| `.write` | It determines whether data is allowed to be written by users and
    when. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `.write` | 它确定用户何时允许写入数据。 |'
- en: '| `.validate` | It validates whether a value is correctly formatted, has child
    attributes, and its data type. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `.validate` | 它验证值是否格式正确，是否具有子属性以及其数据类型。 |'
- en: '| `.indexOn` | It determines whether an index exists on a child to support
    faster querying and ordering. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `.indexOn` | 它确定子级是否存在索引以支持更快的查询和排序。 |'
- en: 'You can access and set your rules from the Database || Rulestab in your Firebase
    Console:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从Firebase控制台的Database || Rulestab中访问和设置您的规则：
- en: '![](Images/cf48ed62-4bce-4f33-aa03-750add6b25ea.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cf48ed62-4bce-4f33-aa03-750add6b25ea.png)'
- en: 'There are three steps to Firebase Realtime Database security:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase实时数据库安全性有三个步骤：
- en: Authentication of users
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户认证
- en: Authorization of users - control access to data
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户授权-控制对数据的访问
- en: Validation of user inputs
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户输入验证
- en: Authentication
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证
- en: 'User authentication is the first step to secure your application from unauthenticated
    access. Identifying the user in the first step automatically implies the restriction
    on data they can access and manipulate. In the applications where we use backend
    technologies such as Java, Microsoft.Net, or any other platform, we write authentication
    logic to restrict the access to our application. However, since Firebase is widely
    used with client-side only applications, we will not have the luxury of backend
    tools. Luckily, Firebase platform provides an Authentication mechanism—Firebase
    Authentication—which has built-in support for common authentication mechanisms
    such as form-based authentication with username and password, Google and Facebook
    login, and many more. In [Chapter 3](dede285d-2924-4fcf-a208-57337e4b853f.xhtml),
    *Authentication with Firebase*, and [Chapter 5](5697f854-7bc1-4ffb-86a2-8304d0fc73e7.xhtml), *User
    Profile and Access Management*, we have already seen how we can implement the
    Firebase Authentication. The following rule specifies that to access the database,
    a user must be authenticated. It also specifies that once a user is authenticated,
    it can access all the data available in the database:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 用户身份验证是保护应用程序免受未经授权访问的第一步。在第一步中识别用户自动意味着对他们可以访问和操作的数据的限制。在我们使用Java、Microsoft.Net或任何其他平台的后端技术的应用程序中，我们编写身份验证逻辑来限制对我们应用程序的访问。然而，由于Firebase广泛用于仅客户端应用程序，我们将没有后端工具的奢侈。幸运的是，Firebase平台提供了一种身份验证机制—Firebase身份验证—它内置了对常见身份验证机制的支持，如基于表单的身份验证、使用用户名和密码的Google和Facebook登录等。在[第3章](dede285d-2924-4fcf-a208-57337e4b853f.xhtml)中，*使用Firebase进行身份验证*，以及[第5章](5697f854-7bc1-4ffb-86a2-8304d0fc73e7.xhtml)中，*用户配置文件和访问管理*，我们已经看到了如何实现Firebase身份验证。以下规则指定要访问数据库，用户必须经过身份验证。它还指定一旦用户经过身份验证，就可以访问数据库中的所有可用数据：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Authorization
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权
- en: 'Once the user is authenticated, they can access the database. However, you
    need some control over who can access what. Everybody should not be allowed to
    read/write all the data present in your database. This is where Authorization
    comes into the picture. Firebase Database Rules allow you to control access for
    each user. Firebase security rules are node based and are managed by a single
    JSON object that you can edit on your Realtime Database console or using the Firebase
    CLI:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户经过身份验证，他们就可以访问数据库。但是，您需要对谁可以访问什么进行一些控制。不应该允许每个人读取/写入数据库中的所有数据。这就是授权出现的地方。Firebase数据库规则允许您控制每个用户的访问权限。Firebase安全规则是基于节点的，并由一个JSON对象管理，您可以在实时数据库控制台上编辑它，也可以使用Firebase
    CLI：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding rules determine that all the users will be able to read the users'
    data but nobody will be able to write to it. Also, note that it is mandatory to
    have `rules` as the first node in your security JSON object.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的规则确定所有用户都能够读取用户数据，但没有人能够对其进行写入。另外，请注意，必须将`rules`作为安全JSON对象中的第一个节点。
- en: 'Here''s an example of a rule that specifies data private to a user:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是指定用户私有数据的规则示例：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, you might have a question like we have nested data structure, how will
    the rules apply to that data. To answer that question, one of the points to remember
    here is that the `.read` and `.write` rules **cascade **meaning; granting a read
    or write access to a *parent node* always grants that read/write access to *all
    child nodes*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可能会有一个问题，比如我们有嵌套的数据结构，规则将如何应用到该数据。为了回答这个问题，这里要记住的一点是，`.read`和`.write`规则**级联**，即授予对*父节点*的读取或写入访问权限总是授予对*所有子节点*的读取/写入访问权限。
- en: The rules at parent node have higher priority and hence they will override the
    rules defined at its child level.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 父节点上的规则具有更高的优先级，因此它们将覆盖其子级别定义的规则。
- en: Firebase rules also provide some built-in variables and functions that allow
    you to access Firebase authentication information, refer to other paths, and more.
    We will check this in detail in the coming sections of this chapter.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase规则还提供了一些内置变量和函数，允许您访问Firebase身份验证信息，引用其他路径等。我们将在本章的后续部分详细检查这一点。
- en: Data validation
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据验证
- en: As seen in the introduction section, we need to validate our data before saving
    it in the database to maintain data integrity and correctness. Firebase rules
    provide `.validate` expressions such as `.read` and `.write` to implement validation
    logic such as length of the field should be only this many characters or it must
    be of string data type.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如在介绍部分中所示，我们需要在将数据保存到数据库之前验证数据，以保持数据的完整性和正确性。Firebase规则提供`.validate`表达式，如`.read`和`.write`来实现验证逻辑，例如字段的长度应该只有这么多个字符，或者它必须是字符串数据类型。
- en: 'Consider this example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个例子：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding validation rule for email field determines that the value of email
    field must be String and its length should be less than 30 characters.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述电子邮件字段的验证规则确定了电子邮件字段的值必须是字符串，其长度应小于30个字符。
- en: It is important to note that **validation rules do not cascade**, so in order
    for the write to be allowed, all relevant validation rules must evaluate to true.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意**验证规则不会级联**，因此为了允许写入，所有相关的验证规则必须评估为true。
- en: Now since we have a basic understanding of Firebase rules, let's deep dive into
    rules configuration.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经对Firebase规则有了基本的了解，让我们深入了解规则配置。
- en: Rule definition and structure
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规则定义和结构
- en: 'Firebase rules provide predefined variables that can be used inside a rule
    definition:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase规则提供了可以在规则定义中使用的预定义变量：
- en: '| Name | Definition / Usage |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 定义/用法 |'
- en: '| `auth` | It represents information of the authenticated user. It will be
    null for an unauthenticated user. It is an object that contains uid, token, and
    provider fields and corresponding values. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `auth` | 它表示经过身份验证的用户的信息。对于未经身份验证的用户，它将为null。它是一个包含uid、token和provider字段及相应值的对象。
    |'
- en: '| `$ variables` | It represents wildcard path to refer to the dynamically generated
    keys and represent IDs. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `$ variables` | 它表示通配符路径，用于引用动态生成的键和表示ID。 |'
- en: '| `root` | It represents data snapshot at the root path in the Firebase database
    before applying the given database operation. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `root` | 它表示在应用给定数据库操作之前Firebase数据库中根路径的数据快照。 |'
- en: '| `data` | It represents the Data Snapshot before applying the given database
    operation. For example, in case of the update or write, the root represents the
    original data snapshot without the changes in the update or write. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `data` | 它表示给定数据库操作之前的数据快照。例如，在更新或写入的情况下，根代表原始数据快照，不包括更新或写入中的更改。 |'
- en: '| `newData` | It represents the Data Snapshot before applying the given database
    operation. However, it includes both the existing data as well as the new data,
    which includes data manipulated by the given data operation. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `newData` | 它表示给定数据库操作之前的数据快照。然而，它包括现有数据以及新数据，其中包括给定数据操作操纵的数据。 |'
- en: '| `now` | It represents current time in milliseconds—the number of *seconds* that
    have elapsed *since* January 1, *1970* (midnight UTC). |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `now` | 它表示当前时间（以毫秒为单位）-自1970年1月1日（协调世界时午夜）以来经过的*秒数*。 |'
- en: In the following section, we'll look at how we can use these predefined variables
    in our rules.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看看如何在我们的规则中使用这些预定义变量。
- en: As we saw in the Authorization section, we need to see how rules will apply
    to the nested data. A rule of thumb is that we need to structure rules based on
    the structure of the data in the database.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在授权部分看到的，我们需要看看规则如何适用于嵌套数据。一个经验法则是，我们需要根据数据库中数据的结构来构建规则。
- en: We will extend our HelpDesk application developed in [chapter 5](5697f854-7bc1-4ffb-86a2-8304d0fc73e7.xhtml), *User
    Profile and Access Management*, of this book.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展我们在本书的[第5章](5697f854-7bc1-4ffb-86a2-8304d0fc73e7.xhtml)中开发的HelpDesk应用程序，*用户配置文件和访问管理*。
- en: 'We have a data structure as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有以下的数据结构：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we can see that to have data to be secured at the user level, to show
    only the tickets relevant to the logged in user, we are storing them under userId,
    such as `FlQefqueU2USLElL4vc5MoNUnu03` and `KEEyErkmP3YE1BagxSci0hF0g8H2`, and
    to show all the tickets to admin, we are storing them under `all`. However, this
    is not the ideal solution, since it has two issues: data is redundant, and to
    update any data, we will have to update it at two places. Luckily, we can handle
    this kind of security directly in the database with Rules.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到要使数据在用户级别上得到保护，只显示与已登录用户相关的工单，我们将它们存储在userId下，比如`FlQefqueU2USLElL4vc5MoNUnu03`和`KEEyErkmP3YE1BagxSci0hF0g8H2`，并且要向管理员显示所有工单，我们将它们存储在`all`下。然而，这并不是理想的解决方案，因为它有两个问题：数据是冗余的，并且要更新任何数据，我们将不得不在两个地方进行更新。幸运的是，我们可以直接在数据库中使用规则处理这种安全性。
- en: 'We will change our data, and we will remove the `all` node from data. We will
    also add one variable under `$userId` to identify whether a user is an admin or
    not. So it will look like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将改变我们的数据，从数据中删除`all`节点。我们还将在`$userId`下添加一个变量来标识用户是否是管理员。所以它将看起来像这样：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our rules will look as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的规则将如下所示：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These rules essentially impose restrictions that if the user is Admin, that
    is, `isAdmin` is true, then they can read and write all the data. However, other
    users will only be able to read/write their own data.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则实质上施加了限制，如果用户是管理员，也就是`isAdmin`为true，那么他们可以读取和写入所有数据。然而，其他用户只能读/写自己的数据。
- en: Here, we have also used predefined variable data, which represents the `DataSnapshot`
    before applying a `write` operation. Similarly, we can use the `root`variable
    to refer to the root path and `newData`to refer to the data snapshot that will
    exist after a write operation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们还使用了预定义的变量data，它代表了`write`操作之前的`DataSnapshot`。同样，我们可以使用`root`变量来引用根路径，`newData`来引用写操作后将存在的数据快照。
- en: Now, if you have observed, we have used `.child`, which is essentially used
    to refer to any child path/attribute. In our rule, we are checking that under
    `$uid`, the value of `isAdmin` is true, since we want to give access to all data
    to an admin. Similarly, we can use any data as a condition in our rules.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你已经注意到，我们使用了`.child`，这实质上是用来引用任何子路径/属性的。在我们的规则中，我们正在检查在`$uid`下，`isAdmin`的值是否为true，因为我们希望给管理员访问所有数据的权限。同样，我们可以在我们的规则中使用任何数据作为条件。
- en: Also, an important thing to note here is that once we have defined `.read` and
    `.write` rules at parent level `tickets`, we are not checking the `isAdmin` condition
    under `$uid`, because **rules do cascade**, so once you have granted read/write
    permissions to admins, you don't need to repeat those conditions at the `$uid`
    level. At the same time, it is important to note that it is mandatory to have
    a rule defined at a parent location. If we don't define them at the parent location,
    your data operation will fail completely even though the child path is accessible.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的事情要注意的是，一旦我们在父级`tickets`上定义了`.read`和`.write`规则，我们就不再在`$uid`下检查`isAdmin`条件，因为**规则会级联**，所以一旦你授予管理员读/写权限，你就不需要在`$uid`级别重复这些条件。同时，重要的是要注意，在父位置定义规则是强制性的。如果我们不在父位置定义规则，即使子路径是可访问的，你的数据操作也会完全失败。
- en: 'For example, in the following rule, we can see that though we have access permissions
    at ticket level, we won''t be able to access data since we haven''t defined rules
    at `$uid` level:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下规则中，我们可以看到，尽管我们在票证级别拥有访问权限，但由于我们在`$uid`级别未定义规则，我们将无法访问数据：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Query-based rules
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于查询的规则
- en: 'As seen in the preceding example, rules can''t be used as filters. However,
    at times, we need to give access to only subsets of data based on some conditions
    or query parameters. For example, let''s say that we need to return only the first
    100 records out of 1000 records from the query result set. We can achieve this
    through the use of the **query.** expressions to give read and write access to
    your result set based on the query parameters:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的示例所示，规则不能用作过滤器。但是，有时我们需要根据某些条件或查询参数仅访问数据的子集。例如，假设我们需要仅从查询结果集中返回1000条记录中的前100条记录。我们可以通过使用**query.**表达式根据查询参数为您的结果集提供读取和写入访问权限：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding will give access to the first 100 records that are ordered by
    key by default. If you want to specify `orderByChild`, you can also do that, as
    follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将默认访问前100条按键排序的记录。如果要指定`orderByChild`，也可以这样做，如下所示：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ensure that when you read the data, you specify `orderByChild`, otherwise your
    read will fail.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在读取数据时，指定`orderByChild`，否则读取将失败。
- en: Data indexing
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据索引
- en: Firebase allows you to write queries using child keys. To improve your query
    performance, you can define an index on those keys using the `.indexOn` rule.
    We assume that you already knew how the index works as almost all database systems
    support index.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase允许您使用子键编写查询。为了提高查询性能，您可以使用`.indexOn`规则在这些键上定义索引。我们假设您已经知道索引的工作原理，因为几乎所有数据库系统都支持索引。
- en: 'Let''s take an example to understand this better. Let''s say that in our HelpDesk
    system, we often order tickets by department key, and we are using `orderbyChild()`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子来更好地理解这一点。假设在我们的HelpDesk系统中，我们经常按部门键订购票，并且我们正在使用`orderbyChild()`：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Similarly, if we are using `orderByValue()`, we can have the following rule:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果我们使用`orderByValue()`，我们可以有以下规则：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Backups
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份
- en: In the first section of this chapter, we saw how important it is to manage the
    backups of the data. Though you can take and maintain your data backups manually,
    there are chances that you miss out something and lose the backups. Fortunately,
    Firebase provides an automatic backup service that can be set up to take automatic
    backups of your data and rules daily. Note that this service is only available
    to Blaze plan users and will be chargeable as per Standard rates. You can check
    various subscription plans available at [https://firebase.google.com/pricing/](https://firebase.google.com/pricing/).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一部分中，我们看到了管理数据备份的重要性。虽然您可以手动进行数据备份，但有可能会错过一些内容并丢失备份。幸运的是，Firebase提供了自动备份服务，可以设置为每天自动备份数据和规则。请注意，此服务仅适用于Blaze计划用户，并且将按照标准费率收费。您可以查看[https://firebase.google.com/pricing/](https://firebase.google.com/pricing/)上提供的各种订阅计划。
- en: Setup
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: You can set up database backups from the Backups tab of the Realtime Database
    of Firebase section. The setup wizard will guide you through the steps to configure
    automatic backups. Your Database backup activity will happen at a specific hour
    each day without affecting the load and ensures the highest availability for all
    backup customers.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从Firebase部分的实时数据库的备份选项卡设置数据库备份。设置向导将指导您完成配置自动备份的步骤。您的数据库备份活动将在每天的特定时间进行，而不会影响负载，并确保所有备份客户的最高可用性。
- en: Additionally, you can also take a manual backup whenever you want to get a point
    in time snapshot of your data and rules.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以在需要获取数据和规则的时间点快照时随时进行手动备份。
- en: Your backups will be stored in Google Cloud Storage, which is an object storage
    service provided by Google Cloud Platform. Essentially, Google Cloud Storage provides
    buckets that are like directories on computer filesystem, in which your backups
    will be stored. So, once the setup is done, a bucket will be created with permissions
    where your Firebase can write the data. We will see Google Cloud Storage and Firebase
    Cloud Storage in detail in [Chapter 8](ae32df4d-9428-4826-9ab1-339321a97500.xhtml)*,
    Firebase Cloud Storage.*
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您的备份将存储在Google Cloud Storage中，这是Google Cloud Platform提供的对象存储服务。基本上，Google Cloud
    Storage提供了类似计算机文件系统上的目录的存储桶，您的备份将存储在其中。因此，一旦设置完成，将创建一个具有权限的存储桶，您的Firebase可以在其中写入数据。我们将在[第8章](ae32df4d-9428-4826-9ab1-339321a97500.xhtml)*Firebase云存储*中详细了解Google
    Cloud Storage和Firebase云存储。
- en: The backup service automatically compresses the backup files using Gzip compression
    that reduces the overall backup size and ultimately reduces cost and also minimizes
    data transfer time. The compressed file size varies based on the data in your
    database, but in general, it reduces the overall file size to 1/3 of the original
    decompressed file size. You can enable and disable Gzip compression based on your
    requirements.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 备份服务会自动使用Gzip压缩备份文件，从而减小整体备份大小，最终降低成本，同时最小化数据传输时间。压缩文件大小根据数据库中的数据而变化，但通常情况下，它会将整体文件大小减小到原始解压文件大小的1/3。您可以根据需求启用或禁用Gzip压缩。
- en: To save further cost, you can also you can enable a 30-day lifecycle policy
    on your bucket to delete older backups; for example, backups older than 30 days
    automatically get deleted.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步节省成本，您还可以在存储桶上启用30天的生命周期策略来删除旧的备份；例如，30天前的备份会自动被删除。
- en: 'Your Gzipped JSON files can be decompressed by executing the following command-line
    command using the `gunzip` binary, which is available by default on OS-X and most
    Linux distributions:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行以下命令行命令来解压缩您的Gzipped JSON文件，该命令使用默认情况下在OS-X和大多数Linux发行版上都可用的`gunzip`二进制文件：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The filenames will be generated based on the following naming conventions.
    It will have a timestamp (ISO 8601 Standard):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名将根据以下命名约定生成。它将具有时间戳（ISO 8601标准）：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you have Gzip compression enabled, the name will be appended by a `.gz` suffix.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了Gzip压缩，文件名将附加一个`.gz`后缀。
- en: 'Consider this example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个例子：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once you have taken a backup, you would want to restore it at some point in
    time. Let's check how we can restore the data from a backup.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您进行了备份，您可能会希望在某个时间点进行恢复。让我们看看如何从备份中恢复数据。
- en: Restoring from backups
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从备份中恢复
- en: 'To restore the data from backup, first download the backup file from Google
    Cloud Storage and decompress it as per the preceding command. Once you have the
    JSON file, you can import data in either of the two ways:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要从备份中恢复数据，首先从Google Cloud Storage下载备份文件，并根据前面的命令进行解压缩。一旦您有了JSON文件，您可以通过以下两种方式之一导入数据：
- en: Under the database section of Firebase console, you will find an Import JSONbutton
    that will allow you to upload the file.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Firebase控制台的数据库部分，您将找到一个导入JSON按钮，它将允许您上传文件。
- en: You can use a CURL command: `curl 'https://<DATABASE_NAME>.firebaseio.com/.json?auth=<SECRET>&print=silent'
    -x PUT -d @<DATABASE_NAME>.json`. Note that you need to replace `DATABASE_NAME`
    and `SECRET`, respectively, with your own values. You can get the secret from
    the database settings page.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用CURL命令：`curl 'https://<DATABASE_NAME>.firebaseio.com/.json?auth=<SECRET>&print=silent'
    -x PUT -d @<DATABASE_NAME>.json`。请注意，您需要分别用自己的值替换`DATABASE_NAME`和`SECRET`。您可以从数据库设置页面获取密钥。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter explains the common security threats to data, especially when it
    resides on cloud, and how we can secure our data. It also explains that Firebase
    is secure and we shouldn't worry much about the security of data as far as we
    manage the security properly at our end by defining proper rules in database and
    control access to the data to the authorized users.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了数据面临的常见安全威胁，特别是当数据存储在云上时，以及我们如何保护我们的数据。它还解释了Firebase是安全的，只要我们通过在数据库中定义适当的规则并控制对数据的访问来正确管理安全性，我们就不必过多担心数据的安全性。
- en: Firebase is hosted on Secure Server Layer, which manages the security at the
    transport layer. It also gives you a powerful yet simple Rule engine that can
    be configured to secure your data and, at the same time, give the benefit of separation
    of concern—separates security logic from application logic.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase托管在安全服务器层上，该层管理传输层的安全性。它还为您提供了一个强大而简单的规则引擎，可以配置以保护您的数据，并同时获得关注分离的好处——将安全逻辑与应用逻辑分离。
- en: We also learned in detail about security rules and how we can define them using
    simple JavaScript-like syntax.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还详细学习了安全规则，以及如何使用类似于简单的JavaScript语法来定义它们。
- en: In the next chapter, we will explore Firebase Cloud Messaging and Cloud Functions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Firebase云消息传递和云函数。
