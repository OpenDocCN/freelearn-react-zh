["```jsx\n{\n  \"message\":{\n    \"token\":\"bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1...\",\n    \"notification\":{\n      \"title\":\"This is an FCM notification message!\",\n      \"body\":\"FCM message\"\n    }\n  }\n}\n```", "```jsx\n{\n  \"message\":{\n    \"token\":\"bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1...\",\n    \"data\":{\n      \"Name\" : \"MT\",\n      \"Education\" : \"Ph.D.\"\n    }\n  }\n}\n```", "```jsx\nnpm install -g create-react-app\n```", "```jsx\nnpm install firebase --save\n```", "```jsx\nnpm install -g firebase-tools\n```", "```jsx\n{\n  \"gcm_sender_id\": \"103953800507\"\n}\n```", "```jsx\n componentWillMount() {\n      firebase.messaging().requestPermission()\n       .then(function() {\n        console.log('Permission granted.');\n        // you can write logic to get the registration token\n          // _this.getToken();\n       })\n       .catch(function(err) {\n        console.log('Unable to get permission to notify.', err);\n      });\n  }\n```", "```jsx\nimport firebase from '../firebase/firebase-config';\n```", "```jsx\n getToken() {\n        console.log(\"get token\");\n        firebase.messaging().getToken()\n            .then(function (currentToken) {\n                if (currentToken) {\n                    console.log(\"current token\", currentToken)\n                   // sendTokenToServer(currentToken);\n                   //updateUI(currentToken);\n                } else {\n                    // Show permission request.\n                    console.log('No Instance ID token available. \n                    Request permission to generate one.');\n                    // Show permission UI.\n                  // updateUIForPushPermissionRequired();\n                   // setTokenSentToServer(false);\n                }\n            })\n            .catch(function (err) {\n                console.log('An error occurred while retrieving token. \n                ', err);\n              // showToken('Error retrieving Instance ID token. ', \n                 err);\n               // setTokenSentToServer(false);\n            });\n   }\n```", "```jsx\n refreshToken() {\n        firebase.messaging().onTokenRefresh(function () {\n            firebase.messaging().getToken()\n                .then(function (refreshedToken) {\n                    console.log('Token refreshed.');\n                    // Indicate that the new Instance ID token has not \n                       yet been sent to the\n                    // app server.\n                    //setTokenSentToServer(false);\n                     Send Instance ID token to app server. Implement it \n                     as per your requirement\n                    //sendTokenToServer(refreshedToken);\n                    // ...\n                })\n                .catch(function (err) {\n                    console.log('Unable to retrieve refreshed token ', \n                    err);\n                    //showToken('Unable to retrieve refreshed token ', \n                      err);\n                });\n        });\n    }\n```", "```jsx\nimportScripts('https://www.gstatic.com/firebasejs/4.1.1/firebase-app.js');\nimportScripts('https://www.gstatic.com/firebasejs/4.1.1/firebase-messaging.js');\n\nvar config = {\n    messagingSenderId: \"41428255555\"\n};\nfirebase.initializeApp(config);\nconst messaging = firebase.messaging();\n\nmessaging.setBackgroundMessageHandler(function(payload) {\n    console.log('[firebase-messaging-sw.js] Received background message ', payload);\n    // Customize notification here\n    const notificationTitle = 'Background Message Title';\n    const notificationOptions = {\n        body: 'Background Message body.',\n        icon: '/firebase-logo.png'\n    };\n\nreturn self.registration.showNotification(notificationTitle,\n    notificationOptions);\n});\n```", "```jsx\nconstructor(props) {\n        super(props);\n        //this.refreshToken();\n        firebase.messaging().onMessage(function (payload) {\n            console.log(\"Message received. \", payload);\n            // Update the UI to include the received message.\n            console.log(\"msg\", payload);\n            // appendMessage(payload);\n        });\n    }\n```", "```jsx\nnpm install googleapis --save\n```", "```jsx\napp.get('/getAccessToken', function (req, res) {\n\n  var { google } = require('googleapis');\n\n  var key = require('./firebase/serviceAccountKey.json');\n  var jwtClient = new google.auth.JWT(\n    key.client_email,\n    null,\n    key.private_key,\n    ['https://www.googleapis.com/auth/firebase.messaging'], // an array \n     of auth scopes\n    null\n  );\n  jwtClient.authorize(function (err, tokens) {\n    if (err) {\n      console.log(err);\n      res.send(JSON.stringify({\n        \"token\": err\n      }));\n    }\n    console.log(\"tokens\", tokens);\n    res.send(JSON.stringify({\n      \"token\": tokens.access_token\n    }));\n  });\n\n});\n```", "```jsx\nheaders: {\n  'Authorization': 'Bearer ' + accessToken\n}\n```", "```jsx\nPOST https://fcm.googleapis.com/v1/projects/demoproject-7cc0d/messages:send\n\nContent-Type: application/json\nAuthorization: Bearer ya29.c.ElphBTDpfvg35hKz4nDu9XYn3p1jlTRgw9FD0ubT5h4prOtwC9G9IKslBv8TDaAPohQHY0-O3JmADYfsrk7WWdhZAeOoqWSH4wTsVyijjhE-PWRSL2YI1erT\"\n\n{\n  \"message\":{\n    \"token\" : \"dWOV8ukFukY:APA91bFIAEkV-9vwAIQNRGt57XX2hl5trWf8YpocOHfkYAkgSZr5wfBsNozYZOEm_N0mbdZmKbvmtVCCWovrng4UYwj-zmpe36ySPcP31HxGGGb3noEkeBFyZRDUpv0TD7HAKxTfDuEx...\",\n    \"notification\" : {\n      \"body\" : \"This is an FCM notification message!\",\n      \"title\" : \"FCM Message\",\n      }\n   }\n}\n```", "```jsx\nnpm install -g firebase-tools\n```", "```jsx\nfirebase login\n```", "```jsx\nfirebase init functions\n```", "```jsx\nimport * as functions from 'firebase-functions';\n\nexport const greetUser = functions.https.onRequest((request, response) => {\n        const name = request.query.name;\n        response.send(\"Welcome to Firebase Cloud Function, \"+name+\"!\");\n});\n```", "```jsx\nfirebase deploy --only functions\n```", "```jsx\nfirebase serve --only functions\n```", "```jsx\nimport * as functions from 'firebase-functions';\nimport * as admin from 'firebase-admin';\n\nadmin.initializeApp(functions.config().firebase);\n\nexport const makeUppercase = functions.database.ref('/users/{userId}')\n    .onWrite(event => {\n        // Grab the current value of what was written to the Realtime \n           Database.\n        const original = event.data.val();\n        console.log('Uppercasing', original);\n        //status is a property\n        const uppercase = original.name.toUpperCase();\n        // You must return a Promise when performing asynchronous tasks \n           inside a Functions such as\n        // writing to the Firebase Realtime Database.\n        // Setting an \"uppercase\" sibling in the Realtime Database \n           returns a Promise.\n        return event.data.ref.parent.child('uppercase').set(uppercase);\n});\n```", "```jsx\nexports.userCreated = functions.auth.user().onCreate(event => { ... });\n```", "```jsx\nconst user = event.data; \n\nconst email = user.email;\nconst name = user.displayName;\n```", "```jsx\nexports.deleteUser = functions.auth.user().onDelete(event => {\n  // ...\n});\n```", "```jsx\nfunctions.storage.object() - listen for object changes on the default storage bucket.\nfunctions.storage.bucket('test').object() - listen for object changes on a specific bucket called 'test'\n```", "```jsx\nexports.compressFiles = functions.storage.object().onChange(event => {\n  // ...\n});\n```", "```jsx\nresponse.send(\"Welcome to the Cloud Function\");\n```", "```jsx\nexports.updateUser = functions.firestore\n  .document('users/{userID}')\n  .onWrite(event => {\n    // An object with the current document value\n    var document = event.data.data();\n\n    // An object with the previous document value (for update or \n       delete)\n    var oldDocument = event.data.previous.data();\n\n    // perform desited database operations ...\n});\n```"]