["```jsx\nnpm install -g firebase-tools\n```", "```jsx\nfirebase --version\n```", "```jsx\nfirebase login\n```", "```jsx\nfirebase init\n```", "```jsx\n//run this command to install the project dependencies\nnpm install\n\n//run this command to build the project\nnpm run build\n```", "```jsx\nfirebase serve\n```", "```jsx\nnpm install firebase-admin --save\n```", "```jsx\nconst admin = require('firebase-admin');\nconst serviceAccount = require('./firebase/serviceAccountKey.json');\n\nadmin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n    databaseURL: \"https://demoproject-7cc0d.firebaseio.com\"\n});\n```", "```jsx\nnode <fileName>\n```", "```jsx\nfunction createCustomToken(req,res){\n const userId = req.body.uid \"guest_user\"\n admin.auth().createCustomToken(userId)\n .then(function(customToken) {\n res.send(customToken.toJSON());\n })\n .catch(function(error) {\n console.log(\"Error creating custom token:\", error);\n });\n}\n```", "```jsx\napp.get('/login', function (req, res) {\n if(validCredentials(req.body.username,req.body.password)){\n    createCustomToken(req,res);\n }\n})\n```", "```jsx\nfunction createCustomToken(req,res){\n const userId = req.body.uid\n const subscription = {\n   paid:true\n }\n admin.auth().createCustomToken(userId)\n .then(function(customToken) {\n   res.send(customToken.toJSON());\n })\n .catch(function(error) {\n console.log(\"Error creating custom token:\", error);\n });\n}\n```", "```jsx\nconst uid = this.state.userId\nfetch('http://localhost:3000/login', {\n   method: 'POST', // or 'PUT'\n   body: JSON.stringify({idToken:idToken}), \n   headers: new Headers({\n     'Content-Type': 'application/json'\n  })\n }).then(res => res.json())\n .catch(error => console.error('Error:', error))\n .then(res => {\n  console.log(res,\"after token valid\");\n  firebase.auth().signInWithCustomToken(res.customToken).catch(function(error) {\n    var errorCode = error.code;\n    var errorMessage = error.message;\n });\n})\n\n```", "```jsx\n//Firebase Realtime Database Rules\n{\n \"rules\": {\n \"admin\": {\n \".read\": \"auth.uid === 'guest_user'\"\n }\n }\n}\n```", "```jsx\n//Google Cloud Storage Rules\nservice firebase.storage {\n match /b/<firebase-storage-bucket-name>/o {\n match /admin/{filename} {\n allow read, write: if request.auth.uid == \"guest_user\";\n }\n }\n}\n```", "```jsx\n//Firebase Realtime Database Rules\n{\n \"rules\": {\n \"subscribeServices\": {\n \".read\": \"auth.token.paid === true\"\n }\n }\n}\n```", "```jsx\nservice firebase.storage {\n match /b/<firebase-storage-bucket-name>/o {\n match /subscribeServices/{filename} {\n allow read, write: if request.auth.token.paid === true;\n }\n }\n}\n```", "```jsx\nfirebase.auth().currentUser.getIdToken(/* forceRefresh */ true).then(function(idToken) {\n // Send this token to custom backend server via HTTPS\n}).catch(function(error) {\n // Handle error\n});\n```", "```jsx\nfunction validateToken(req,res){\n  const idToken= req.body.idToken;\n  admin.auth().verifyIdToken(idToken)\n   .then(function(decodedToken) {\n   var uid = decodedToken.uid;\n  //...\n  }).catch(function(error) {\n // Handle error\n });\n}\n```", "```jsx\n{\n \"rules\": {\n  \"helpdesk\":{\n   \"tickets\":{\n       \"all\": {\n         \".read\": \"auth.token.admin === true\",\n         \".write\": \"auth.token.admin === true\",\n         }\n        }\n      }\n   }\n}\n```", "```jsx\nadmin.auth().setCustomUserClaims(uid, {admin: true}).then(() => {\n});\n```", "```jsx\n admin.auth().verifyIdToken(idToken).then((claims) => {\n  if (claims.admin === true) {\n    // Allow access to admin resource.\n   }\n });\n```", "```jsx\nadmin.auth().getUser(uid).then((userRecord) => {\n   console.log(userRecord.customClaims.admin);\n});\n```", "```jsx\napp.post('/setCustomClaims', (req, res) => {\n // Get the ID token passed by the client app.\n const idToken = req.body.idToken;\n console.log(\"accepted\",idToken,req.body);\n // Verify the ID token\n admin.auth().verifyIdToken(idToken).then((claims) => {\n // Verify user is eligible for admin access or not\n if (typeof claims.email !== 'undefined' &&\n claims.email.indexOf('@adminhelpdesk.com') != -1) {\n // Add custom claims for admin access.\n admin.auth().setCustomUserClaims(claims.sub, {\n admin: true,\n }).then(function() {\n // send back to the app to refresh token and shows the admin UI.\n res.send(JSON.stringify({\n status: 'success',\n role:'admin'\n }));\n });\n } else if (typeof claims.email !== 'undefined'){\n // Add custom claims for admin access.\n admin.auth().setCustomUserClaims(claims.sub, {\n admin: false,\n }).then(function() {\n // Tell client to refresh token on user.\n res.send(JSON.stringify({\n status: 'success',\n role:'employee'\n }));\n });\n }\n else{\n // return nothing\n res.send(JSON.stringify({status: 'ineligible'}));\n }\n })\n });\n```", "```jsx\n  constructor() {\n  super();\n  this.state  = {  authenticated :  false,\n  data:'',\n  userUid:'',\n  role:{\n  admin:false,\n type:''\n } } }\n```", "```jsx\nthis.getIdToken(user).then((idToken)=>{\n console.log(idToken);\n fetch('http://localhost:3000/setCustomClaims', {\n   method: 'POST', // or 'PUT'\n   body: JSON.stringify({idToken:idToken}), \n   headers: new Headers({\n     'Content-Type': 'application/json'\n   })\n }).then(res => res.json())\n  .catch(error => console.error('Error:', error))\n  .then(res => {\n   console.log(res,\"after token valid\");\n   if(res.status === 'success' && res.role === 'admin'){\n      firebase.auth().currentUser.getIdToken(true);\n       this.setState({\n         authenticated:true,\n         data:user.providerData,\n         userUid:user.uid,\n             role:{\n                 admin:true,\n                 type:'admin'\n             }\n     })\n }\n else if (res.status === 'success' && res.role === 'employee'){\n this.setState({\n     authenticated:true,\n     data:user.providerData,\n     userUid:user.uid,\n     role:{\n         admin:false,\n         type:'employee'\n         }\n     })\n }\n else{\n     ToastDanger('Invalid Token !!')\n }\n```", "```jsx\n{\n this.state.authenticated && !this.state.role.admin\n ?\n (\n <React.Fragment>\n <Route path=\"/view-ticket\" render={() => (\n <ViewTicketTable userId = {this.state.userUid} />\n )}/>\n <Route path=\"/add-ticket\" render={() => (\n <AddTicketForm userId = {this.state.userUid} userInfo = {this.state.data} />\n )}/>\n <Route path=\"/user-profile\" render={() => (\n <ProfileUpdateForm userId = {this.state.userUid} userInfo = {this.state.data} />\n )}/>\n </React.Fragment>\n )\n :\n (\n <React.Fragment>\n   <Route path=\"/get-alluser\" component = { AppUsers }/>\n   <Route path=\"/tickets\" component = { GetAllTickets }/>\n   <Route path=\"/add-new-user\" component = { NewUserForm }/>\n </React.Fragment>\n )\n }\n```", "```jsx\n<form className=\"form-inline\">\n//Search Input\n     <div className=\"form-group\" style={marginRight}>\n         <input type=\"text\" id=\"search\" className=\"form-control\"\n         placeholder=\"Search user\" value={this.state.search} required  \n         />\n     </div>\n//Search by options\n     <select className=\"form-control\" style={marginRight}>\n         <option value=\"email\">Search by Email</option>\n         <option value=\"phone\">Search by Phone Number</option>\n     </select>\n     <button className=\"btn btn-primary btn-sm\">Search</button>\n </form>\n```", "```jsx\n <tbody>\n {\n this.state.users.length > 0 ?\n this.state.users.map((list,index) => {\n return (\n <tr key={list.uid}>\n <td>{list.email}</td>\n <td>{list.displayName}</td> \n <td>{list.metadata.lastSignInTime}</td> \n <td>{list.metadata.creationTime}</td> \n <td>\n     <button className=\"btn btn-sm btn-primary\" type=\"button\" style={marginRight} onClick={()=>            {this.deleteUser(list.uid)}}>Delete User</button>\n       <button className=\"btn btn-sm btn-primary\" type=\"button\" onClick={()=>                        {this.viewProfile(list.uid)}}>View Profile</button>\n </td> \n </tr>\n )\n }) :\n <tr>\n     <td colSpan=\"5\" className=\"text-center\">No users found.</td>\n </tr>\n }\n </tbody>\n```", "```jsx\nfetch('http://localhost:3000/users', {\n method: 'GET', // or 'PUT'\n headers: new Headers({\n 'Content-Type': 'application/json'\n })\n }).then(res => res.json())\n .catch(error => console.error('Error:', error))\n .then(response => {\n console.log(response,\"after token valid\");\n this.setState({\n   users:response\n })\n console.log(this.state.users,'All Users');\n })\n```", "```jsx\ndeleteUser(uid){\n fetch('http://localhost:3000/deleteUser', {\n     method: 'POST', // or 'PUT'\n     body:JSON.stringify({uid:uid}),\n     headers: new Headers({\n         'Content-Type': 'application/json'\n     })\n }).then(res => res.json())\n     .catch(error => console.error('Error:', error))\n }\n//Fetch User Profile\n viewProfile(uid){\n fetch('http://localhost:3000/getUserProfile', {\n     method: 'POST', // or 'PUT'\n     body:JSON.stringify({uid:uid}),\n     headers: new Headers({\n         'Content-Type': 'application/json'\n     })\n }).then(res => res.json())\n     .catch(error => console.error('Error:', error))\n     .then(response => {\n         console.log(response.data,\"User Profile\");\n     })\n }\n```", "```jsx\n//Search User by Email\nsearchByEmail(emailId){\n fetch('http://localhost:3000/searchByEmail', {\n method: 'POST', // or 'PUT'\n body:JSON.stringify({email:emailId}),\n headers: new Headers({\n 'Content-Type': 'application/json'\n })\n }).then(res => res.json())\n .catch(error => console.error('Error:', error))\n .then(response => {\n console.log(response.data,\"User Profile\");\n this.setState({\n    users:response\n })\n })\n }\n```", "```jsx\nfunction listAllUsers(req,res) {\n var nextPageToken;\n // List batch of users, 1000 at a time.\n admin.auth().listUsers(1000,nextPageToken)\n .then(function(data) {\n data = data.users.map((el) => {\n return el.toJSON();\n })\n res.send(data);\n })\n .catch(function(error) {\n console.log(\"Error fetching the users from firebase:\", error);\n });\n}\nfunction deleteUser(req, res){\n  const userId = req.body.uid;\n  admin.auth().deleteUser(userId)\n  .then(function() {\n    console.log(\"Successfully deleted user\"+userId);\n    res.send({status:\"success\", msg:\"Successfully deleted user\"})\n  })\n  .catch(function(error) {\n    console.log(\"Error deleting user:\", error);\n  res.send({status:\"error\", msg:\"Error deleting user:\"})\n  });\n}\nfunction searchByEmail(req, res){\n  const searchType = req.body.email;\n  admin.auth().getUserByEmail(userId)\n  .then(function(userInfo) {\n    console.log(\"Successfully fetched user information associated with this email\"+userId);\n    res.send({status:\"success\", data:userInfo})\n  })\n  .catch(function(error) {\n    console.log(\"Error fetching user info:\", error);\n  res.send({status:\"error\", msg:\"Error fetching user informaition\"})\n  });\n}\n```", "```jsx\napp.get('/users', function (req, res) {\n listAllUsers(req,res);\n})\napp.get('/deleteUser', function (req, res) {\n deleteUser(req,res);\n})\napp.post('/searchByEmail', function (req, res){\n searchByEmail(req, res)\n})\n```", "```jsx\nconst admin = require('firebase-admin');\nadmin.initializeApp(functions.config().firebase);\n// Revoke all refresh tokens for a specified user for whatever reason.\nfunction revokeUserTokens(uid){\nreturn admin.auth().revokeRefreshTokens(uid)\n.then(() => {\n    // Get user's tokensValidAfterTime.\n    return admin.auth().getUser(uid);\n})\n.then((userRecord) => {\n    // Convert to seconds as the auth_time in the token claims is in seconds too.\n    const utcRevocationTimeSecs = new Date(userRecord.tokensValidAfterTime).getTime() / 1000;\n    // Save the refresh token revocation timestamp. This is needed to track ID token\n    // revocation via Firebase rules.\n    const metadataRef = admin.database().ref(\"metadata/\" + userRecord.uid);\n    return metadataRef.set({revokeTime: utcRevocationTimeSecs});\n  });\n}\n```", "```jsx\n{\n\"rules\": {\n    \"metadata\": {\n        \"$user_id\": {\n            \".read\": \"$user_id === auth.uid\",\n            \".write\": \"false\",\n            }\n        }\n    }\n}\n```", "```jsx\n{\n \"rules\": {\n     \"users\": {\n         \"$user_id\": {\n         \".read\": \"$user_id === auth.uid && auth.token.auth_time >     (root.child('metadata').child(auth.uid).child('revokeTime').val() || 0)\",\n         \".write\": \"$user_id === auth.uid && auth.token.auth_time > (root.child('metadata').child(auth.uid).child('revokeTime').val() || 0)\"\n             }\n         }\n     }\n}\n```", "```jsx\n .catch(error => {\n     // Invalid token or token was revoked:\n     if (error.code == 'auth/id-token-revoked') {\n     //Shows the alert to user to reauthenticate\n     // Firebase Authentication API gives the API to reauthenticateWithCredential /reauthenticateWithPopup /reauthenticateWithRedirect\n }\n });\n```", "```jsx\nlet password = prompt('Please provide your password for reauthentication');\nlet credential = firebase.auth.EmailAuthProvider.credential(\nfirebase.auth().currentUser.email, password);\nfirebase.auth().currentUser.reauthenticateWithCredential(credential)\n.then(result => {\n// User successfully reauthenticated.\n})\n.catch(error => {\n// An error occurred.\n});\n```", "```jsx\n<form className=\"form\" onSubmit={this.handleSubmitEvent}>\n <div className=\"form-group\">\n <input type=\"text\" id=\"name\" className=\"form-control\"\n placeholder=\"Enter Employee Name\" value={this.state.name} required onChange={this.handleChange} />\n </div>\n <div className=\"form-group\">\n <input type=\"text\" id=\"email\" className=\"form-control\"\n placeholder=\"Employee Email ID\" value={this.state.email} required onChange={this.handleChange} />\n </div>\n <div className=\"form-group\">\n <input type=\"password\" id=\"password\" className=\"form-control\"\n placeholder=\"Application Password\" value={this.state.password} required onChange={this.handleChange} />\n </div>\n <div className=\"form-group\">\n <input type=\"text\" id=\"phoneNumber\" className=\"form-control\"\n placeholder=\"Employee Phone Number\" value={this.state.phoneNumber} required onChange={this.handleChange} />\n </div>\n <div className=\"form-group\">\n <input\n type=\"file\"\n ref={input => {\n this.fileInput = input;\n }}\n />\n </div>\n <button className=\"btn btn-primary btn-sm\">Submit</button>\n </form>\n```", "```jsx\ne.preventDefault();\n //React form data object\n var data = {\n email:this.state.email,\n emailVerified: false,\n password:this.state.password,\n displayName:this.state.name,\n phoneNumber:this.state.phoneNumber,\n profilePhoto:this.fileInput.files[0],\n disabled: false\n }\n fetch('http://localhost:3000/createNewUser', {\n   method: 'POST', // or 'PUT'\n   body:JSON.stringify({data:data}),\n   headers: new Headers({\n   'Content-Type': 'application/json'\n })\n }).then(res => res.json())\n .catch(error => { \n ToastDanger(error)\n })\n .then(response => {\n ToastSuccess(response.msg)\n });\n```", "```jsx\nvar newTicketKey = firebase.database().ref('/helpdesk').child('tickets').push().key;\n // Write the new ticket data simultaneously in the tickets list and the user's ticket list.\n var updates = {};\n updates['/helpdesk/tickets/' + userId + '/' + newTicketKey] = data;\n updates['/helpdesk/tickets/all/'+ newTicketKey] = data;\n```", "```jsx\nvar newTicketKey = firebase.database().ref('/helpdesk').child('tickets').push().key;\n // Write the new ticket data simultaneously in the tickets list and the user's ticket list.\n var updates = {};\n updates['/helpdesk/tickets/' + userId + '/' + newTicketKey] = data;\n updates['/helpdesk/tickets/all/'+ newTicketKey] = data;\n\n return firebase.database().ref().update(updates).then(()=>{\n ToastSuccess(\"Saved Successfully!!\");\n this.setState({\n    issueType:\"\",\n    department:\"\",\n    comment:\"\"\n });\n }).catch((error)=>{\n    ToastDanger(error.message);\n });\n```"]