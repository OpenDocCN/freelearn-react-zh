- en: Firebase Cloud Storage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase Cloud Storage
- en: In this chapter, we will discuss Cloud Storage for Firebase and also its integration
    with Google Cloud Platform. We will also explore Firebase hosting, which allows
    you to host your web apps and static content (CDN) on a production-grade environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论Firebase的Cloud Storage以及它与Google Cloud平台的集成。我们还将探讨Firebase托管，它允许您在生产级环境上托管您的Web应用程序和静态内容（CDN）。
- en: Cloud Storage provides scalable and secure object storage space, as most of
    the enterprises today need scalable file storage, considering the huge amount
    of data they collect through mobile apps, web applications, or corporate websites.
    Even the applications that are deployed on cloud need storage space either for
    their own assets such as images, JavaScript, CSS, audio, video files, or user-generated
    content such as documents, videos, or audios.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Storage提供可扩展和安全的对象存储空间，因为今天大多数企业都需要可扩展的文件存储，考虑到他们通过移动应用程序、Web应用程序或企业网站收集的大量数据。甚至部署在云上的应用程序也需要存储空间，无论是用于它们自己的资产，如图像、JavaScript、CSS、音频、视频文件，还是用户生成的内容，如文档、视频或音频。
- en: The Firebase SDK for Cloud Storage uses Google Cloud Storage buckets to store
    the uploaded files. Google Cloud Platform needs a billing account to use its products
    though they provide a few trials. The Firebase SDK for Cloud storage uses a default
    bucket in Google App Engine free tier and hence you don't need a billing account.
    Once your app starts growing, you can also integrate other products and services
    such managed to compute as App Engine or Cloud Functions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase Cloud Storage的SDK使用Google Cloud Storage存储上传的文件。Google Cloud平台需要一个计费账户来使用其产品，尽管他们提供了一些试用。Firebase
    Cloud Storage的SDK使用Google App Engine免费层中的默认存储桶，因此您不需要计费账户。一旦您的应用程序开始增长，您还可以集成其他产品和服务，如托管计算、App
    Engine或Cloud Functions。
- en: 'Here''s a list of topics that we''ll cover in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将涵盖的主题列表：
- en: Overview of Google Cloud Storage
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Storage概述
- en: Key Features of Google Cloud Storage
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Storage的关键特性
- en: Storage Classes supported by Google Cloud Storage
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Storage支持的存储类别
- en: Overview of Security and **Access Control List** (**ACL**) in Google Cloud Storage
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Storage中安全性和访问控制列表（ACL）的概述
- en: Key features of Cloud Storage for Firebase
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase的Cloud Storage的关键特性
- en: Setup of the Cloud Storage
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Storage的设置
- en: Integrate Firebase Cloud Storage with HelpDesk Application to Upload and Download
    files
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Firebase Cloud Storage与HelpDesk应用程序集成，以上传和下载文件
- en: Overview of Google App Engine
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google App Engine概述
- en: Overview Firebase Hosting
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase托管概述
- en: Deploy front-end of HelpDesk Application on Firebase Hosting
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Firebase托管上部署HelpDesk应用程序的前端
- en: Before we deep dive into Cloud Storage for Firebase, let's first discuss Google
    Cloud Storage and its features.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入讨论Firebase的Cloud Storage之前，让我们先讨论Google Cloud Storage及其特性。
- en: Google Cloud Storage
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Cloud Storage
- en: Google Cloud Platform provides a secure, scalable, cost-effective, and high-performance
    infrastructure that includes a wide variety of services that are needed for developing,
    managing, and operating your applications. Google Cloud Storage is a part of Google
    Cloud Platform, which is a one-stop solution for all your object storage needs—from
    storage to live streaming to analytics to archival, it covers everything. Object
    storage is a massively scalable and cost-effective storage service to store any
    type of data in its native format.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud平台提供了一个安全、可扩展、具有成本效益和高性能的基础设施，包括各种服务，用于开发、管理和运行应用程序所需的一切。Google
    Cloud Storage是Google Cloud平台的一部分，它是满足您所有对象存储需求的一站式解决方案，从存储到实时流媒体到分析到归档，应有尽有。对象存储是一种高度可扩展和具有成本效益的存储服务，可存储任何类型的数据以其原生格式。
- en: For your different storage requirements, Google Cloud Storage provides different
    classes of storage, viz, Multi-Regional Storage, Regional Storage, Nearline Storage,
    and Coldline Storage.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您不同的存储需求，Google Cloud Storage提供不同类别的存储，即多区域存储、区域存储、Nearline存储和Coldline存储。
- en: Key features of Google Cloud Storage
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Cloud Storage的关键特性
- en: 'Google Cloud Storage delivers advantages in the following key areas:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud Storage在以下关键领域提供优势：
- en: '**Durable:** Google Cloud Storage is designed to deliver 99.999999999% annual
    durability. Data is stored redundantly. When you upload data, it gets replicated
    in the background with an automatic checksum to ensure data integrity.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**耐用性：** Google Cloud Storage旨在提供99.999999999%的年度耐用性。数据被冗余存储。当您上传数据时，它会在后台进行复制，并使用自动校验和来确保数据完整性。'
- en: '**Available:** Google Cloud Storage offers high availability and makes your
    data available whenever you need it. As per Google Cloud Storage documentation, Multi-Regional
    offers 99.95% and Regional storage offers 99.9% monthly availability in their
    Service Level Agreement. Nearline and Coldline storage offer 99% monthly availability.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性：** Google Cloud Storage提供高可用性，并在您需要时随时提供数据。根据Google Cloud Storage文档，多区域存储提供99.95%的月度可用性，区域存储提供99.9%的月度可用性。Nearline和Coldline存储提供99%的月度可用性。'
- en: '**Scalable:** Google Cloud Storage is infinitely scalable, so it can support
    small to an exabyte-scale system.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性：** Google Cloud Storage具有无限可扩展性，因此可以支持从小型到百亿字节规模的系统。'
- en: '**Consistent:** Google Cloud Storage ensures read-after-write consistency,
    meaning that if a write succeeds, the latest copy of the document will always
    be returned for any GET request, globally. This applies to `DELETE` or `PUT` of
    new or overwritten objects.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性：** Google Cloud Storage确保读写一致性，这意味着如果写入成功，对于任何GET请求，全球范围内始终返回文档的最新副本。这适用于新建或覆盖对象的`DELETE`或`PUT`。'
- en: '**Secure:** Google Cloud Storage is highly secure and has Google grade security
    to protect your most critical documents, media, and assets. It also provides different
    Access Control options so that you can control who has access to storage objects
    and at what level.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性：** Google Cloud Storage具有高度安全性，并具有谷歌级别的安全性，以保护您最关键的文档、媒体和资产。它还提供不同的访问控制选项，以便您可以控制谁可以访问存储对象以及在什么级别。'
- en: '**Easy to Use:** Google Cloud Storage provides simple and easy-to-use APIs
    and utility tools to work with object storage.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于使用：** Google Cloud Storage提供简单易用的API和实用工具，用于处理对象存储。'
- en: 'We need to understand a few basic concepts of Google Cloud Storage to use it
    effectively. So, let''s look at them here:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要了解一些Google Cloud Storage的基本概念，以便有效地使用它。所以，让我们在这里看看它们：
- en: Key concepts
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键概念
- en: All data in Cloud Storage belongs to a project. A project consists of APIs,
    a set of users, and security and monitoring settings. You can create as many projects
    as you want. Inside projects, we have data containers called Buckets, which hold
    our uploaded data as objects. An object is nothing but a file and optionally,
    some metadata that describes that file.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Storage中的所有数据都属于一个项目。一个项目包括API、一组用户以及安全和监控设置。您可以创建任意多个项目。在项目内，我们有称为存储桶的数据容器，它们保存我们上传的数据作为对象。对象只是一个文件，还可以选择性地包含描述该文件的一些元数据。
- en: Buckets
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储桶
- en: Buckets are containers that hold your data. They are like directories in the
    computer file system and are basic containers where you put your data. The only
    difference is that you can't nest the buckets, unlike directories. Everything
    that you put in Cloud Storage must be inside a bucket. Buckets allow you to organize
    your data and also allow you to control access permissions to your data. When
    designing your application, you should plan fewer buckets and more objects in
    most cases due to some imposed rate limits of bucket creation and deletion. It
    is approximately 1 operation every 2 seconds per project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 存储桶是容纳数据的容器。它们就像计算机文件系统中的目录，是您放置数据的基本容器。唯一的区别是，与目录不同，您不能嵌套存储桶。您在云存储中放置的所有内容都必须在存储桶内。存储桶允许您组织数据，并且还允许您控制对数据的访问权限。在设计应用程序时，由于一些强加的存储桶创建和删除速率限制，您应该计划更少的存储桶和大多数情况下更多的对象。每个项目大约每2秒可以进行1次操作。
- en: 'You need to specify three things when you create a bucket: a globally unique
    name, a default storage class, and a geographic location where the bucket and
    its contents are stored. The default storage class you choose applies to the objects
    inside that bucket if you don''t specify an object class explicitly while storing
    the objects.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 创建存储桶时，您需要指定三件事：一个全局唯一的名称，一个默认存储类，以及存储桶及其内容存储的地理位置。如果您在存储对象时没有明确指定对象类别，则您选择的默认存储类将适用于该存储桶内的对象。
- en: Once the bucket is created, you can't change the name of the bucket and its
    location, unless you delete and recreate it. However, you can change its default
    storage class to any other class available in the bucket's location.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了存储桶，除非删除并重新创建，否则无法更改存储桶的名称和位置。但是，您可以将其默认存储类更改为存储桶位置中提供的任何其他类。
- en: Bucket names should be globally unique and can be used with CNAME redirect.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 存储桶名称应该是全局唯一的，并且可以与CNAME重定向一起使用。
- en: 'Your bucket names must meet the following requirements:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您的存储桶名称必须满足以下要求：
- en: 'It must contain only lowercase letters, numbers, and special characters: dashes
    (-), underscores (_), and dots (.). Names containing dots require verification.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它只能包含小写字母，数字和特殊字符：破折号（-），下划线（_）和点（.）。包含点的名称需要验证。
- en: It must start and end with a number or letter.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须以数字或字母开头和结尾。
- en: It must be 3 to 63 characters long. Names containing dots can be 222 characters
    long, but each dot-separated component must not be longer than 63 characters.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须是3到63个字符长。包含点的名称可以长达222个字符，但是每个以点分隔的组件的长度不能超过63个字符。
- en: It must not represent an IP address, such as `192.168.1.1`.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不能表示IP地址，例如`192.168.1.1`。
- en: It cannot begin with the "goog" prefix and cannot contain google or misspellings
    of google.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不能以“goog”前缀开头，也不能包含google或google的拼写错误。
- en: Apart from names, you can also associate key-value metadata pairs called bucket
    labels to your buckets. Bucket labels allow you to group your buckets with other
    Google Cloud Platform services, such as Virtual Machine Instances and Persistent
    Disks. You can have a maximum of 64 buckets labels per bucket.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了名称，您还可以将称为存储桶标签的键值元数据对与您的存储桶关联起来。存储桶标签允许您将存储桶与其他Google Cloud Platform服务（例如虚拟机实例和持久磁盘）分组。每个存储桶最多可以有64个存储桶标签。
- en: Objects
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象
- en: Objects are the basic entities that you store in Cloud Storage. You can store
    an infinite number of objects in a bucket, so essentially, there is no limit.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是您存储在云存储中的基本实体。您可以在一个存储桶中存储无限数量的对象，因此基本上没有限制。
- en: Objects consist of *object data* and object metadata. Object data is typically
    a file and is opaque (a chunk of data) to Cloud storage. Object metadata is a
    set of key-value pairs that describe the object.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对象由*对象数据*和对象元数据组成。对象数据通常是一个文件，并且对于云存储来说是不透明的（一块数据）。对象元数据是一组描述对象的键值对。
- en: An object name should be unique in a bucket; however, different buckets can
    have objects with the same name. An object's name is a piece of object metadata
    in Cloud Storage. Object names can contain any combination of Unicode characters
    (UTF-8 encoded) and must be less than 1024 bytes in length.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个对象名称在存储桶中应该是唯一的；然而，不同的存储桶可以有相同名称的对象。对象名称是Cloud Storage中的对象元数据。对象名称可以包含任何组合的Unicode字符（UTF-8编码），并且长度必须小于1024字节。
- en: 'Your object names must meet the following requirements:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您的对象名称必须满足以下要求：
- en: Object names must not contain Carriage Return or Line Feed characters
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象名称不得包含回车或换行字符。
- en: Object names must not start with well-known/acme-challenge
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象名称不得以well-known/acme-challenge开头
- en: You can include a common character slash (/) in your object names if you want
    to make it appear as though they are stored in a hierarchical structure, for example,
    /team.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在对象名称中包含常见字符斜杠(/)，如果您希望使其看起来好像它们存储在分层结构中，例如/team。
- en: A common character to include in object names is a slash (/). By using slashes,
    you can make objects appear as though they're stored in a hierarchical structure.
    For example, you can name one object `/team/alpha/report1.jpg` and another `object/team/alpha/report2.jpg`.
    They appear to be in a hierarchical directory structure based on the team when
    you list these objects; however, for Cloud Storage, objects are individual pieces
    of data and not a hierarchical structure.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对象名称中常见的字符包括斜杠(/)。通过使用斜杠，您可以使对象看起来好像它们存储在分层结构中。例如，您可以将一个对象命名为`/team/alpha/report1.jpg`，另一个命名为`object/team/alpha/report2.jpg`。当您列出这些对象时，它们看起来好像是基于团队的分层目录结构；然而，对于Cloud
    Storage来说，对象是独立的数据片段，而不是分层结构。
- en: Apart from the name, each object has an associated number called **Generation
    Number**. Whenever your object gets overwritten, its generation number changes.
    Cloud storage also supports a feature called Object Versioning that allows you
    to refer to the overwritten or deleted objects. Once you have object versioning
    enabled for a bucket, it creates an archived version of the object that is overwritten
    or deleted and associates a unique generation number to uniquely identify an object.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了名称之外，每个对象都有一个关联的数字，称为**生成编号**。每当您的对象被覆盖时，它的生成编号就会改变。Cloud Storage还支持一个名为对象版本控制的功能，允许您引用被覆盖或删除的对象。一旦您为一个存储桶启用了对象版本控制，它就会创建一个存档版本的对象，该对象被覆盖或删除，并关联一个唯一的生成编号来唯一标识一个对象。
- en: Resources
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: Any entity within Google Cloud Platform is a resource. Whether it is a project
    or a bucket or an object, in Google Cloud Platform, it is a resource.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud Platform中的任何实体都是一个资源。无论是项目、存储桶还是对象，在Google Cloud Platform中，它都是一个资源。
- en: Each resource has an associated unique name that identifies it. Each bucket
    has a resource name in the form of `projects/_/buckets/`[BUCKET_NAME], where [BUCKET_NAME] is
    the ID of the bucket. Each object has a resource name in the form of `projects/_/buckets/`[BUCKET_NAME]`/objects/`[OBJECT_NAME],
    where [OBJECT_NAME] is the ID of the object.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 每个资源都有一个关联的唯一名称来标识它。每个存储桶都有一个资源名称，格式为`projects/_/buckets/`[BUCKET_NAME]，其中[BUCKET_NAME]是存储桶的ID。每个对象都有一个资源名称，格式为`projects/_/buckets/`[BUCKET_NAME]`/objects/`[OBJECT_NAME]，其中[OBJECT_NAME]是对象的ID。
- en: 'A #[NUMBER] can also be appended to the end of the resource name that indicates
    a specific generation of the object; #0 is a special identifier to represent the
    latest version of an object. When the name of the object ends in a string that
    would otherwise be interpreted as a generation number, #0 can be useful.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以在资源名称的末尾附加一个`#[NUMBER]`，表示对象的特定生成版本；`#0`是一个特殊标识符，表示对象的最新版本。当对象的名称以本应被解释为生成编号的字符串结尾时，`#0`会很有用。
- en: Object immutability
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象的不可变性
- en: In Cloud Storage, when an object is uploaded, you cannot change it throughout
    its lifetime. The time between successful object upload and successful object
    delete is an object's lifetime. This essentially means that you cannot modify
    an existing object by appending some data to it or by truncating some data from
    it. However, you can overwrite the objects in Cloud storage. Note that the older
    version of the document will be accessible to the users until successful upload
    of the new version of the document.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在云存储中，当一个对象被上传后，在其生命周期内无法更改。成功上传对象和成功删除对象之间的时间就是对象的生命周期。这基本上意味着你无法通过追加一些数据或截断一些数据来修改现有对象。但是，你可以覆盖云存储中的对象。请注意，旧版本的文档将在成功上传新版本的文档之前对用户可用。
- en: A single particular object can only be updated or overwritten up to once per
    second.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 单个特定对象每秒只能更新或覆盖一次。
- en: So, now that we are aware of the basics of Cloud Storage, let's explore the
    Storage classes available in Cloud Storage.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了云存储的基础知识，让我们来探索云存储中可用的存储类。
- en: Storage classes
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储类
- en: Google Cloud Storage supports a range of storage classes based on different
    use cases. These include Multi Regional and Regional Storage for frequently accessed
    data, Nearline Storage for less frequently access data, such as data you use not
    more than once a month, and Coldline storage for infrequently accessed data, such
    as data you use very rarely, like once a year.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Google云存储支持一系列基于不同用例的存储类。这些包括多区域和区域存储用于频繁访问的数据，近线存储用于较少访问的数据，如您每月不超过一次使用的数据，以及冷线存储用于极少访问的数据，如您每年只使用一次的数据。
- en: Let's go through them one by one.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一了解它们。
- en: Multi regional storage
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多区域存储
- en: Multi regional storage is a Geo-redundant storage; it stores your data at multiple
    Geo locations or data centers across the globe. It stores your data in at least
    two geographic locations separated by at least 100 miles within the multiregional
    location of the bucket. It is ideal for low latency high availability application
    where your application serves the content, such as live streaming of videos, audios,
    or gaming content, to the users across the globe.  Due to data redundancy, it
    provides high availability. It costs slightly more as compared to other storage
    classes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 多区域存储是地理冗余存储；它将您的数据存储在全球各地的多个地理位置或数据中心。它至少在存储桶的多区域位置内以至少100英里的距离分隔的两个地理位置存储您的数据。它非常适合低延迟高可用性应用程序，其中您的应用程序为全球用户提供内容，如视频、音频或游戏内容的实时流。由于数据冗余，它提供了高可用性。与其他存储类相比，它的成本略高。
- en: It ensures **99.95% availability SLA^***. As your data is saved at multiple
    places, even in case of natural disasters or any other disruptions, it provides
    high availability.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 它确保99.95%的可用性SLA。由于您的数据保存在多个地方，即使在自然灾害或其他干扰的情况下，它也提供高可用性。
- en: The data stored as Multi regional storage can be placed only in multiregional
    locations, such as the United States, the European Union, or Asia, not specific
    regional locations such as us-central1 or asia-east1.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作为多区域存储的数据只能放置在多区域位置，如美国、欧盟或亚洲，而不能放置在特定的区域位置，如us-central1或asia-east1。
- en: Regional storage
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区域存储
- en: Regional storage stores data in a specific regional location, instead of having
    redundancy distributed over different geo-locations. It is cheaper as compared
    to Multi regional storage and ensures **99.9% availability SLA^***.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 区域存储将数据存储在特定的区域位置，而不是在不同地理位置分布的冗余数据。与多区域存储相比，它更便宜，并确保99.9%的可用性SLA。
- en: Regional storage is better suited for storing data in the same regional location
    of your server instances that use that data. It gives you better performance and
    in addition, it can reduce network charges.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 区域存储更适合存储与使用数据的服务器实例位于同一区域位置的数据。它可以提供更好的性能，并且可以减少网络费用。
- en: Nearline storage
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 近线存储
- en: There are chances that at some point in time, applications or enterprises use
    only some of the data frequently out of all the collected data. In that case,
    Multi regional or Regional storage will not be an ideal choice and will be an
    expensive option. Cloud storage provides another storage class called Nearline
    storage that can solve the earlier issue. It is a low-cost, storage service for
    storing less frequently accessed data. Nearline Storage is a better choice than
    Multi-Regional Storage or Regional Storage in scenarios where slightly lower availability
    is required. For example, you do some analytics once a month on the data collected
    throughout the month. It ensures **99.0% availability SLA^*.**
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能在某个时间点，应用程序或企业只频繁使用所有收集的数据中的一部分。在这种情况下，多区域或区域存储将不是理想的选择，也将是一种昂贵的选择。云存储提供了另一种存储类别，称为近线存储，可以解决之前的问题。这是一种用于存储访问频率较低的数据的低成本存储服务。在需要稍低可用性的情况下，近线存储是比多区域存储或区域存储更好的选择。例如，您每月对整个月份收集的数据进行一次分析。它确保**99.0%的可用性SLA**。
- en: Nearline Storage is also better suited for data backup, disaster recovery, and
    archival storage. Note, however, that for data accessed less frequently than once
    a year, Coldline Storage is the most cost-effective choice, as it offers the lowest
    storage costs.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 近线存储也更适合数据备份、灾难恢复和归档存储。然而，需要注意的是，对于一年内访问频率较低的数据，Coldline存储是最具成本效益的选择，因为它提供了最低的存储成本。
- en: Coldline storage
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Coldline存储
- en: Coldline storage is a very-low-cost, highly-durable storage service for data
    archiving and disaster recovery. Though it is like a "cold storage", it provides
    low latency access to your data. It is the best choice for data that you need
    once or twice a year. You can also store your daily backups and archived files
    to Coldline, as you don't need them on regular basis and will need them only in
    case of disaster recovery. It ensures **99.0% availability SLA *.**
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Coldline存储是一种用于数据归档和灾难恢复的成本非常低、高度耐用的存储服务。虽然它类似于“冷存储”，但它可以低延迟访问您的数据。这是您需要一年一两次的数据的最佳选择。您还可以将每日备份和归档文件存储到Coldline中，因为您不需要它们，并且只在灾难恢复时需要它们。它确保**99.0%的可用性SLA**。
- en: Standard storage
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准存储
- en: When users don't specify the default storage class while creating a bucket,
    it will be considered as a Standard storage object. Objects created without a
    storage class in such a bucket are also listed as Standard Storage. If the bucket
    is located in a multiregional location, Standard storage is equivalent to Multi-Regional
    Storage and when the bucket is in a regional storage, it is considered to be in
    Regional storage.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在创建存储桶时没有指定默认存储类时，它将被视为标准存储对象。在这样的存储桶中创建的没有存储类的对象也被列为标准存储。如果存储桶位于多区域位置，则标准存储等同于多区域存储，当存储桶位于区域存储时，它被视为区域存储。
- en: Note that pricing will also happen accordingly. If it is equivalent to Multi
    regional storage, charges of Multi Regional storage will apply.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，定价也会相应发生变化。如果等同于多区域存储，将适用多区域存储的费用。
- en: Now that we know about the different storage classes, let's understand the Life
    Cycle Management of an object in Cloud Storage.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了不同的存储类别，让我们来了解一下云存储中对象的生命周期管理。
- en: Life Cycle Management
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生命周期管理
- en: 'Many applications require the functionality to delete or archive the older
    resources after a certain amount of time. The following are some example use cases:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序需要在一定时间后删除或归档旧资源的功能。以下是一些示例用例：
- en: Move files older than 1 year from Multi Regional Storage to Coldline Storage.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将超过1年的文件从多区域存储移动到Coldline存储。
- en: Delete files older than 5 years from Coldline storage.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Coldline存储中删除超过5年的文件。
- en: Keep only a few recent object versions if you have Object Versioning.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果启用了对象版本控制，只保留少量最近的对象版本。
- en: Luckily, Google Cloud Storage provides a functionality called Object Life Cycle
    Management to handle this type of operations automatically based on the configurations.
    The configurations are set of rules that apply to bucket where you have enabled
    this feature.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Google Cloud Storage提供了一个名为对象生命周期管理的功能，根据配置自动处理这种类型的操作。配置是一组适用于启用了此功能的存储桶的规则。
- en: 'For example, the following rule specifies that it delete the files older than
    365 days:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下规则指定删除超过365天的文件：
- en: '[PRE0]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: APIs and tools
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API和工具
- en: 'Google Cloud Platform provides SDKs for Cloud storage and also a number of
    other products for a different platform such as Node.js, Java, Python, Ruby, PHP,
    and go. It provides REST APIs if you are not using any client library. It also
    provides a command-line tool called **gsutil** that allows you to perform object
    management tasks, including the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud Platform为云存储提供SDK，还为不同平台的其他产品提供了一些SDK，如Node.js、Java、Python、Ruby、PHP和go。如果您不使用任何客户端库，它还提供REST
    API。它还提供一个名为**gsutil**的命令行工具，允许您执行对象管理任务，包括以下内容：
- en: Upload, download, and delete objects
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传、下载和删除对象
- en: List buckets and objects
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出存储桶和对象
- en: Move, Copy, and rename objects
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动、复制和重命名对象
- en: Edit object and bucket ACLs
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑对象和存储桶的ACL
- en: Access control
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问控制
- en: 'There are a number of options available for access management of your buckets
    and objects. Let''s see a summary:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多选项可用于管理存储桶和对象的访问权限。让我们看一下总结：
- en: '**Identity and Access Management** (**IAM**) permissions: Gives broad level
    control for your projects and buckets. It is useful to grant access to buckets
    and allow bulk operations on objects within a bucket.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**身份和访问管理**（**IAM**）权限：为您的项目和存储桶提供广泛的控制。它对于授予对存储桶的访问权限并允许对存储桶内的对象进行批量操作非常有用。'
- en: '**Access Control Lists** (**ACLs**): Gives you fine-grained control to grant
    read or write access to users to individual buckets or objects.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**访问控制列表**（**ACL**）：为用户授予对单个存储桶或对象的读取或写入访问权限提供了细粒度的控制。'
- en: 'Signed URLs (query string authentication): Grant read or write access to an
    object for a limited time period through a Signed URL.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 签名URL（查询字符串认证）：通过签名URL在有限的时间内为对象授予读取或写入访问权限。
- en: 'S**igned Policy Documents**: Allows you to define rules and perform validations
    for what objects can be uploaded in a bucket, for example, restrict based on file
    size or content-type.'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**签名策略文档**：允许您定义规则并对可以上传到存储桶的对象执行验证，例如，基于文件大小或内容类型进行限制。'
- en: '**Firebase Security Rules**: Provides granular and attribute-based rule language
    to provide access to mobile apps and web apps using the Firebase SDKs for Cloud
    Storage.'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Firebase安全规则**：提供了细粒度和基于属性的规则语言，以使用Firebase SDK为云存储提供移动应用和Web应用的访问权限。'
- en: Now that we are familiar with the key concepts of Google Cloud Storage, let's
    come back to Cloud Storage for Firebase.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们熟悉了Google Cloud Storage的关键概念，让我们回到Firebase的云存储。
- en: Key features of Cloud Storage for Firebase
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase云存储的关键特性
- en: Cloud Storage for Firebase inherits advantages or features from Google Cloud
    Storage. However, it has some additional features, such as declarative security
    rule language, to specify security rules.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase云存储继承了Google云存储的优势或特性。然而，它还具有一些额外的特性，比如声明性安全规则语言，用于指定安全规则。
- en: 'The key features of Cloud Storage are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 云存储的关键特点如下：
- en: '**Ease of use and Robustness**: Cloud storage for Firebase is a simple and
    powerful solution to store and retrieve the user-generated content such as documents,
    photos, audio, or videos. It provides robust upload and download capabilities
    so that file transfers get paused when internet connectivity drops and resume
    from where they were left when it is connected again. It saves time as well as
    your internet bandwidth. The API for Cloud storage is also easy and can be used
    through the use of Firebase SDK.'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**易用性和健壮性：**Firebase云存储是一种简单而强大的解决方案，用于存储和检索用户生成的内容，如文档、照片、音频或视频。它提供了强大的上传和下载功能，使得文件传输在互联网连接中断时暂停，并在重新连接时从中断处恢复。这既节省时间又节省了互联网带宽。云存储的API也很简单，可以通过Firebase
    SDK来使用。'
- en: '**Powerful Security: **When it comes to storage in the cloud, the first thing
    we think about is the security. Is it secure enough? What will happen to my documents?
    Such questions are obvious and important also. The answer to that is yes, Cloud
    storage for Firebase is very much secure. It has the power of Google security.
    It is integrated with Firebase authentication to provide intuitive authentication
    for developers. You can also use declarative security rules to restrict access
    to the files based on the content type, name, or some other attributes.'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**强大的安全性：**当涉及到云存储时，我们首先想到的是安全性。它足够安全吗？我的文件会发生什么？这些问题显而易见，也很重要。答案是肯定的，Firebase云存储非常安全。它拥有Google安全性的力量。它与Firebase身份验证集成，为开发人员提供直观的身份验证。您还可以使用声明性安全规则来限制对文件的访问，根据内容类型、名称或其他属性。'
- en: '**High Scalability:** Cloud storage for Firebase is backed by Google infrastructure,
    which provides a highly scalable storage environment so that you can easily scale
    your applications from prototypes to productions. This infrastructure already
    backs the most popular and high traffic applications, such as Youtube, Google
    photos, and Spotify.'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**高可扩展性：**Firebase云存储由Google基础设施支持，提供了一个高度可扩展的存储环境，使您可以轻松地将应用程序从原型扩展到生产环境。这个基础设施已经支持了最流行和高流量的应用程序，如Youtube、Google照片和Spotify。'
- en: '**Cost effective: **Cloud storage is a cost-effective solution where you just
    pay for what you use. You don''t need to purchase and maintain a server for hosting
    files.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**成本效益：**云存储是一种成本效益的解决方案，您只需为所使用的内容付费。您无需购买和维护用于托管文件的服务器。'
- en: '**Integrates well with other Firebase products:** Cloud storage integrates
    well with other Firebase products, for example, in our last chapter, we have seen
    that Cloud storage triggers can trigger the Cloud functions that can execute some
    logic based on the file operation on Cloud storage.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**与其他Firebase产品良好集成：**云存储与其他Firebase产品良好集成，例如，在我们的上一章中，我们已经看到云存储触发器可以触发云函数，根据云存储上的文件操作执行一些逻辑。'
- en: We have seen the key features and advantages of Cloud Storage for Firebase.
    Let's see how it actually works.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了Firebase云存储的关键特点和优势。让我们看看它是如何实际运作的。
- en: How does it work?
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: Firebase SDKs for Cloud Storage can be used to upload and download files directly
    from clients. The client is able to retry to resume the operation right where
    it left off, saving your user's time and bandwidth.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase SDK用于云存储可以直接从客户端上传和下载文件。客户端能够重试或恢复操作，节省用户的时间和带宽。
- en: Under the hood, Cloud Storage stores your files in a Google Cloud Storage bucket
    and hence makes them accessible through both Firebase and Google Cloud. This gives
    you the flexibility to upload and download files from mobile clients via the Firebase
    SDKs, and do server-side processing, such as image thumbnail generation or video
    transcoding using Google Cloud Platform. As we have seen that Cloud Storage scales
    automatically, it can handle all types of application data, small to medium to
    large applications.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，Cloud Storage将您的文件存储在Google Cloud Storage存储桶中，因此可以通过Firebase和Google Cloud两者访问。这使您可以通过Firebase
    SDK从移动客户端上传和下载文件，并使用Google Cloud平台进行服务器端处理，例如生成图像缩略图或视频转码。由于Cloud Storage可以自动扩展，因此可以处理各种类型的应用程序数据，从小型到中型到大型应用程序。
- en: On the security front, the Firebase SDKs for Cloud Storage integrate seamlessly
    with Firebase Authentication to identify users. As we saw in [Chapter 6](3baeaa17-4005-4696-a5e3-e4dfc4986700.xhtml),
    *Firebase Security and Rules*, Firebase also provides declarative rule language that
    lets you control access to individual files or groups of files.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全方面，Firebase Cloud Storage的SDK与Firebase身份验证无缝集成，以识别用户。正如我们在[第6章](3baeaa17-4005-4696-a5e3-e4dfc4986700.xhtml)中所看到的，*Firebase安全性和规则*，Firebase还提供了声明性规则语言，让您控制对单个文件或文件组的访问。
- en: Let's enhance our Helpdesk application where the user can upload their profile
    picture.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们增强我们的Helpdesk应用程序，用户可以上传其个人资料图片。
- en: Setting up the Cloud Storage
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Cloud Storage
- en: With Firebase SDK, we can easily integrate and set up Cloud Storage for Firebase
    in our application.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Firebase SDK，我们可以轻松地在我们的应用程序中集成和设置Firebase的Cloud Storage。
- en: 'To set up Cloud Storage, you will need the URL of the Storage bucket, which
    you can get from our Firebase Console. You can get it from the `Files` tab of
    `Storage` menu, as illustrated:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置Cloud Storage，您将需要存储桶的URL，您可以从我们的Firebase控制台获取。您可以从`Storage`菜单的`Files`选项卡中获取，如下所示：
- en: '![](Images/c614fd16-cc49-4962-81d6-0fc10c6b72b8.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c614fd16-cc49-4962-81d6-0fc10c6b72b8.png)'
- en: Once you get it, you can add it to your Firebase config.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获得了引用，就可以将其添加到Firebase配置中。
- en: 'Consider this example:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个例子：
- en: '[PRE1]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we are ready to use Cloud storage. Now we need to create a reference, which
    can be used to navigate through the file hierarchy.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备使用Cloud Storage。现在我们需要创建一个引用，用于在文件层次结构中导航。
- en: 'We can get a reference by calling a `ref()` method, like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用`ref()`方法来获取引用，就像这样：
- en: '[PRE2]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also create a reference to a specific lower node in a tree. For example,
    to get a reference to `images/homepage.png`, we can write something like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以创建对树中特定下级节点的引用。例如，要获取对`images/homepage.png`的引用，我们可以这样写：
- en: '[PRE3]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also navigate to upper or lower level in a file hierarchy:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在文件层次结构中导航到上层或下层：
- en: '[PRE4]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Three properties—**fullPath**, **name**, and **bucket**—are available with
    references to better understand the files that references are a point to:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 三个属性——**fullPath**、**name**和**bucket**——可用于引用以更好地理解引用的文件：
- en: '[PRE5]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now we are ready for the upload functionality. We will extend our HelpDesk application
    and give the user a functionality to upload the screenshot along with other details
    of the ticket. We will store the uploaded picture in Cloud storage for Firebase
    and retrieve it from there only.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好进行上传功能。我们将扩展我们的HelpDesk应用程序，并为用户提供上传截图以及票务的其他细节的功能。我们将把上传的图片存储在Cloud
    Storage for Firebase中，并仅从那里检索。
- en: Upload Files
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传文件
- en: You can upload File or Blob types, a Uint8Array or base64 encoded strings to
    upload files to Cloud Storage. For our example, we will use File type. As mentioned
    earlier, first we need to get a reference to the full path of the file, including
    the filename.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以上传文件或Blob类型、Uint8Array或base64编码的字符串来上传文件到Cloud Storage。对于我们的示例，我们将使用文件类型。如前所述，首先我们需要获取文件的完整路径的引用，包括文件名。
- en: We will modify the `AddTicketForm.jsx` file to allow the user to upload a screenshot
    or an image related to the ticket.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改`AddTicketForm.jsx`文件，以允许用户上传与票务相关的截图或图像。
- en: 'The `src/add-ticket/''AddTicketForm.jsx''`file now looks like the following.
    The changes are highlighted in bold with comments:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`src/add-ticket/'AddTicketForm.jsx'`文件看起来像下面这样。更改部分已用粗体标出并附有注释：
- en: '[PRE6]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s understand the preceding code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解上述代码：
- en: Add a snapshot property in the state.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在状态中添加一个snapshot属性。
- en: '`OnChange()` - register the `onChange()` event for the file to set it in snapshot
    field in the state.'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`OnChange()` - 注册`onChange()`事件，将文件设置在状态中的快照字段中。'
- en: '`onHandleSubmit()` - We have created a reference to the file to store it in
    a folder called `''ticket_snapshots''` in Firebase Cloud storage. Once the file
    is uploaded successfully, we will get a download URL from response metadata, which
    we are storing in our realtime database along with other ticket details.'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`onHandleSubmit()` - 我们已经创建了一个文件的引用，将其存储在名为`''ticket_snapshots''`的文件夹中，存储在Firebase
    Cloud存储中。一旦文件成功上传，我们将从响应元数据中获取一个下载URL，并将其与其他票务详情一起存储在我们的实时数据库中。'
- en: 'You will also do some HTML changes in the `render()` method to add input field
    for file selection:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在`render()`方法中进行一些HTML更改，以添加用于文件选择的输入字段：
- en: '[PRE7]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Our add-ticket form looks like this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的add-ticket表单看起来像这样：
- en: '![](Images/9ba63b07-30eb-4922-a971-0c9cd9981db7.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9ba63b07-30eb-4922-a971-0c9cd9981db7.png)'
- en: 'You can then check your Firebase console to see whether file uploading is working
    or not. The following screenshot shows that the file (`helpdesk-db.png`) we have
    uploaded is saved successfully in Cloud Storage for Firebase:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以检查您的Firebase控制台，看看文件上传是否正常工作。以下屏幕截图显示，我们上传的文件（`helpdesk-db.png`）已成功保存在Firebase的Cloud
    Storage中：
- en: '![](Images/e5bc6f40-a481-4337-9395-563dd1a977bd.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e5bc6f40-a481-4337-9395-563dd1a977bd.png)'
- en: As mentioned earlier, Cloud storage for Firebase is highly integrated with Google
    Cloud Storage and uses a bucket of Google Cloud Storage to store the files. You
    can log in to your console of Google Cloud Platform at [https://console.cloud.google.com/storage](https://console.cloud.google.com/storage)
    and check under the storage section. You should see all your uploaded files there
    also.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Firebase的Cloud存储与Google Cloud存储高度集成，并使用Google Cloud存储的存储桶来存储文件。您可以登录到Google
    Cloud平台的控制台[https://console.cloud.google.com/storage](https://console.cloud.google.com/storage)并在存储部分进行检查。您还应该在那里看到您上传的所有文件。
- en: 'The next screenshot shows that the files can be viewed from Google Cloud Platform
    console:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个屏幕截图显示，文件可以从Google Cloud平台控制台中查看：
- en: '![](Images/bd9d81f6-eae8-40fb-aba8-e85c0049e973.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/bd9d81f6-eae8-40fb-aba8-e85c0049e973.png)'
- en: Now, you can check your database also to see whether the ticket that has been
    created has snapshot URL property and corresponding value—downloadURL of the file.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您还可以检查您的数据库，看看已创建的票务是否具有快照URL属性和相应的值-文件的downloadURL。
- en: 'The following screenshot of the database shows that the snapshot URL is getting
    stored correctly:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库的以下屏幕截图显示，快照URL已正确存储：
- en: '![](Images/56f4ed56-165e-4da7-8b64-6c5324fc9125.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/56f4ed56-165e-4da7-8b64-6c5324fc9125.png)'
- en: Yay! The Cloud Storage is integrated with our application. However, we are not
    done yet. We will need to allow the user to see the uploaded images, so we will
    implement a download file functionality too. However, before we move to download
    file function, I would like to mention that you should update the security rules
    for Cloud Storage to control access to your files. As per default rules, Firebase
    Authentication is required in order to perform any `.read` and `.write` operations
    on all files.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 耶！云存储已与我们的应用集成。但是，我们还没有完成。我们需要允许用户查看已上传的图像，因此我们还将实现下载文件功能。但是，在我们转到下载文件功能之前，我想提到您应更新云存储的安全规则以控制对文件的访问。根据默认规则，要执行所有文件的`.read`和`.write`操作，需要Firebase身份验证。
- en: 'The default rules look like the following image:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 默认规则如下图所示：
- en: '![](Images/6fbfacaa-6461-4a1d-9bbd-885484366869.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6fbfacaa-6461-4a1d-9bbd-885484366869.png)'
- en: However, you should update them as per your requirement.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您应根据自己的需求进行更新。
- en: Adding file metadata
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加文件元数据
- en: When you upload a file, you can also store some metadata for that file, such
    as Content-Type or name.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当您上传文件时，还可以为该文件存储一些元数据，例如Content-Type或名称。
- en: 'You can create a JSON object with key: value pairs and pass that object when
    you upload the file. For custom metadata, you can create an object inside the
    metadata object, as shown here:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个带有键值对的JSON对象，并在上传文件时传递该对象。对于自定义元数据，您可以在元数据对象内创建一个对象，如下所示：
- en: '[PRE8]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Managing uploads and error handling
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理上传和错误处理
- en: 'Cloud Storage allows you to manage the file uploads; you can resume, pause,
    or cancel the upload. The corresponding methods are available on `UploadTask`,
    which is returned by the `put()` or `putString()` methods that can be used as
    a promise or use to manage and monitor the status of the upload:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 云存储允许您管理文件上传；您可以恢复、暂停或取消上传。相应的方法可在`UploadTask`上使用，该方法由`put()`或`putString()`返回，可用作承诺或用于管理和监视上传的状态：
- en: '[PRE9]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can use the ''state_change'' observer to listen to the progress events.
    It is very useful if you want to show some real-time progress bar for your file
    uploading:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用'state_change'观察者来监听进度事件。如果您想要为文件上传显示实时进度条，这非常有用：
- en: '| **Event Type** | **Usage** |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| **事件类型** | **用途** |'
- en: '| running | When the task starts or resumes uploading, this event gets fired.
    |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 运行中 | 当任务开始或恢复上传时，会触发此事件。 |'
- en: '| progress | When any data is uploaded to Cloud Storage, this event gets fired.
    Useful to show progress bar for upload. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 进度 | 当任何数据上传到云存储时，会触发此事件。用于显示上传进度条。 |'
- en: '| pause | When the upload is paused, this event gets fired. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 暂停 | 当上传暂停时，会触发此事件。 |'
- en: When an event occurs, a **TaskSnapshot **object will be passed back, which can
    be used to view the task at the time of event occurrence.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当事件发生时，将传回一个**TaskSnapshot**对象，可用于查看事件发生时的任务。
- en: 'The object is passed back. It contains the following properties:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对象被传回。它包含以下属性：
- en: '| Property | Type | Description |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 类型 | 描述 |'
- en: '| bytes transferred | `Number` | Total number of bytes that have been transferred
    when the snapshot was taken. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 传输的字节数 | `数字` | 在拍摄快照时已传输的总字节数。 |'
- en: '| totalBytes | `Number` | Total number of bytes to be uploaded. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 总字节数 | `数字` | 要上传的总字节数。 |'
- en: '| state | `firebase.storage.TaskState` | Current upload state |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 状态 | `firebase.storage.TaskState` | 当前上传状态 |'
- en: '| metadata | `firebaseStorage.Metadata` | Contains metadata sent by server
    on completion of upload; until then, contains the metadata sent to the server.
    |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 元数据 | `firebaseStorage.Metadata` | 包含服务器在上传完成时发送的元数据；在那之前，包含发送到服务器的元数据。 |'
- en: '| task | `firebaseStorage.UploadTask` | Can be used to pause, cancel, or resume
    the task. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | `firebaseStorage.UploadTask` | 可用于暂停、取消或恢复任务。 |'
- en: '| ref | `firebaseStorage.Reference` | The reference this task came from. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| ref | `firebaseStorage.Reference` | 该任务来源的引用。|'
- en: When you upload a file, there are chances that some error occurs. You can handle
    the error using the error object you get in callback.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当您上传文件时，可能会发生一些错误。您可以使用回调中获得的错误对象来处理错误。
- en: 'The following code snippet shows example code to manage the file upload and
    error handling:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了管理文件上传和错误处理的示例代码：
- en: '[PRE10]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, let's move to the download file section.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到下载文件部分。
- en: Downloading files
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载文件
- en: To download a file, you will need to get a reference to that file using either
    `https:// or gs://` URL of the file, or you can construct it by appending child
    paths to the storage root.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载文件，您需要使用文件的`https://或gs://` URL获取对该文件的引用，或者您可以通过将子路径附加到存储根来构造它。
- en: 'The next code snippet shows these methods:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码片段显示了这些方法：
- en: '[PRE11]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will extend our HelpDesk application to allow the user to view the snapshot
    for a ticket if uploaded any. You will need to update code in the `ViewTickets.jsx`
    file under the `ticket-listing` folder. We already get a URL from our database,
    so we don''t need to get a reference to get the download URL:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展我们的HelpDesk应用程序，以允许用户查看已上传的票据的快照。您需要更新`ticket-listing`文件夹下的`ViewTickets.jsx`文件中的代码。我们已经从数据库中获取了一个URL，因此我们不需要获取下载URL的引用：
- en: '[PRE12]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Like for file upload, you need to handle errors for download in a similar manner
    as well.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 就像上传文件一样，您也需要以类似的方式处理下载的错误。
- en: Now, let's see how we can delete files from Cloud Storage.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何从云存储中删除文件。
- en: Deleting files
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除文件
- en: To delete a file, you first need to get a reference to the file, the same as
    we saw in upload and download. Once you get a reference, you can call a `delete()`
    method on it to delete a file. It returns a promise that either resolves in case
    of success or rejects in case of an error.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除文件，您首先需要获取对文件的引用，就像我们在上传和下载中看到的那样。一旦您获得了引用，就可以调用`delete()`方法来删除文件。它返回一个承诺，如果成功则解决，如果出现错误则拒绝。
- en: 'Consider this example:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个例子：
- en: '[PRE13]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, let's see what is Google App Engine.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看什么是Google App Engine。
- en: Google App Engine
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google App Engine
- en: Google App Engine is a "Platform as a Service" that abstracts away the infrastructure
    worries and lets you focus only on code. It provides an automatically scalable
    platform that scales based on the amount of traffic it receives. You just need
    to upload your code, and it will automatically manage the availability of your
    app. Google App Engine is an easy and fast way to add additional processing power
    or trusted execution to your Firebase application.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Google App Engine是一个“平台即服务”，它抽象了基础设施的担忧，让您只关注代码。它提供了一个根据接收的流量量自动扩展的平台。您只需要上传您的代码，它就会自动管理您的应用程序的可用性。Google
    App Engine是向Firebase应用程序添加额外处理能力或受信任执行的简单快速的方法。
- en: If you have an App Engine application, you can use the built-in App Engine APIs
    to share data between Firebase and App Engine, since the Firebase SDKs for Cloud
    Storage use the Google App Engine default bucket. This is useful for performing
    computation intensive background processing or image operations, such as creating
    a thumbnail of uploaded image.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个App Engine应用程序，您可以使用内置的App Engine API在Firebase和App Engine之间共享数据，因为Firebase云存储的SDK使用Google
    App Engine默认存储桶。这对于执行计算密集型的后台处理或图像操作非常有用，例如创建上传图像的缩略图。
- en: The Google App Engine standard environment provides an environment where your
    application runs in a sandbox, using the runtime environment of a supported language
    viz, Python 2.7, Java 8, Java 7, PHP 5.5, and Go 1.8, 1.6\. If you have application
    code that needs some other version of these languages or needs some another language,
    you can use the Google App Engine flexible environment where your application
    runs on docker containers, which run on Google Cloud Virtual machines.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Google App Engine标准环境提供了一个环境，您的应用在其中以受支持的语言的运行时环境运行，即Python 2.7、Java 8、Java
    7、PHP 5.5和Go 1.8、1.6。如果您的应用代码需要这些语言的其他版本或需要其他语言，您可以使用Google App Engine灵活环境，在该环境中，您的应用在运行在Google
    Cloud虚拟机上的docker容器上。
- en: There are many differences between these two environments, which can be explored
    in the Google Cloud documentation at [https://cloud.google.com/appengine/docs/the-appengine-environments](https://cloud.google.com/appengine/docs/the-appengine-environments).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个环境之间有许多不同之处，可以在Google Cloud文档中进行探索[https://cloud.google.com/appengine/docs/the-appengine-environments](https://cloud.google.com/appengine/docs/the-appengine-environments)。
- en: 'If you want to import an existing Google Cloud Platform project into Firebase
    and want to make available any existing App Engine objects, you''ll need to set
    the default access control on your objects to allow Firebase to access them by
    running the following command using `gsutil`:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将现有的Google Cloud Platform项目导入Firebase，并希望使任何现有的App Engine对象可用，您需要通过运行以下命令使用`gsutil`设置对象的默认访问控制，以允许Firebase访问它们。
- en: '[PRE14]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Firebase hosting
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase托管
- en: 'Firebase hosting provides a secure and easy way to host your static website
    and resources on CDN. The key features of Hosting are as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase Hosting提供了一种安全且简单的方式来在CDN上托管您的静态网站和资源。Hosting的主要特点如下：
- en: '**Served over a secure connection**: Content is always delivered securely over
    SSL'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过安全连接提供：内容始终通过SSL安全地传输
- en: 'Faster Content Delivery: Files are cached at CDN edges around the globe, so
    there''s faster content delivery.'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更快的内容传递：文件在全球的CDN边缘被缓存，因此内容传递更快。
- en: 'Faster Deployment: You can deploy your app using Firebase CLI within a few
    seconds'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更快的部署：您可以在几秒钟内使用Firebase CLI部署您的应用
- en: 'Easy and Fast rollback: In case of any mistake, roll back with a single command'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 轻松快速的回滚：如果出现任何错误，只需一个命令即可回滚
- en: Hosting provides all the necessary infrastructure, features, and tooling tailored
    to deploying and managing static websites, whether it is a single page app or
    a complex progressive app.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Hosting提供了部署和管理静态网站所需的所有基础设施、功能和工具，无论是单页面应用还是复杂的渐进式应用。
- en: Your site will be hosted on a subdomain on the [firebaseapp.com](http://firebaseapp.com)
    domain by default. Using the Firebase CLI, you can deploy files from local directories
    on your computer to your Hosting server.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您的网站将托管在[firebaseapp.com](http://firebaseapp.com)域的子域上。使用Firebase CLI，您可以将计算机上的本地目录中的文件部署到您的托管服务器上。
- en: When you move your site to production, you can connect your own domain name
    to Firebase Hosting.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将您的网站移至生产环境时，您可以将您自己的域名连接到Firebase Hosting。
- en: Deploying your site
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署您的网站
- en: You will need to install the Firebase CLI to deploy your static web app.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装Firebase CLI来部署您的静态网页应用。
- en: 'The Firebase CLI can be installed with a single command:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase CLI可以通过一个命令进行安装：
- en: '[PRE15]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let''s deploy our HelpDesk application on cloud. We have two projects
    for HelpDesk: react app (a project called code) and server app (a project called
    node). Let''s first host or deploy our client-side react app on Firebase Hosting.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在云上部署我们的HelpDesk应用程序。我们有两个HelpDesk项目：react应用（一个名为code的项目）和服务器应用（一个名为node的项目）。让我们首先在Firebase
    Hosting上托管或部署我们的客户端react应用。
- en: 'Go inside your project directory (code) and run the following command to initialize
    the configurations:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 进入您的项目目录（代码）并运行以下命令来初始化配置：
- en: '[PRE16]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As shown in the following screenshot, it will ask you "which Firebase feature
    do you want to set up for this folder?," and you need to select ''Hosting'':'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，它会问您“您想为此文件夹设置哪个 Firebase 功能？”，您需要选择“Hosting”：
- en: '![](Images/5e9c4046-1632-42c6-8ed2-bb6a9d80a672.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5e9c4046-1632-42c6-8ed2-bb6a9d80a672.png)'
- en: 'It will create a `firebase.json` file in the root directory of your project.
    The structure of the `firebase.json` will look like this:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在项目的根目录中创建一个 `firebase.json` 文件。`firebase.json` 的结构将如下所示：
- en: '[PRE17]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The public property tells Firebase which directory is to be uploaded to hosting.
    The directory must exist in your project directory.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: public 属性告诉 Firebase 要上传到托管的目录。该目录必须存在于您的项目目录中。
- en: 'You can now deploy your site using the following command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用以下命令部署您的站点：
- en: '[PRE18]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It will ask you to do Firebase CLI login. You can do it using the following
    command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 它会要求您进行 Firebase CLI 登录。您可以使用以下命令来执行：
- en: '[PRE19]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After a successful login, you can run the `firebase deploy` command again to
    deploy your app:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，您可以再次运行 `firebase deploy` 命令来部署您的应用程序：
- en: '![](Images/1a036823-cfec-46b2-99da-c2f952d67116.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1a036823-cfec-46b2-99da-c2f952d67116.png)'
- en: 'After successful deployment, you will a Hosting URL of your project, which
    is like `https://YOUR-FIREBASE-APP>.firebaseapp.com`. In our case, it is *[https://demoproject-7cc0d.firebaseapp.com/](https://demoproject-7cc0d.firebaseapp.com/). 60. *Now
    you can go and hit the generated URL and confirm that it is accessible:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 成功部署后，您将获得项目的 Hosting URL，类似于 `https://YOUR-FIREBASE-APP>.firebaseapp.com`。在我们的案例中，它是
    *[https://demoproject-7cc0d.firebaseapp.com/](https://demoproject-7cc0d.firebaseapp.com/)。*现在您可以转到生成的
    URL 并确认它是可访问的：
- en: '![](Images/ae4a3a72-2561-4adb-a3a2-78b4f3d0d585.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ae4a3a72-2561-4adb-a3a2-78b4f3d0d585.png)'
- en: 'Yay! We have deployed our first app on Firebase Hosting. You can also check
    the URL in your Firebase console under Hosting section:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 耶！我们已经在 Firebase Hosting 上部署了我们的第一个应用程序。您还可以在 Firebase 控制台的 Hosting 部分检查 URL：
- en: '![](Images/1f6101cd-a142-4dcd-b7af-62700798d521.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1f6101cd-a142-4dcd-b7af-62700798d521.png)'
- en: You can also configure your custom domain by clicking on the **Connect Domain **button.
    It will guide you through a wizard to configure your own domain.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过单击**连接域**按钮来配置您的自定义域。它将引导您通过向导来配置您自己的域名。
- en: Summary
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduced the Google Cloud Platform. It gave you a basic understanding
    of Google Cloud Storage and Google App Engine and how we can integrate Cloud storage
    for Firebase with Google Cloud Storage. We explored Cloud Storage for Firebase
    and saw how you can upload, download, and delete files to Cloud Storage. We also
    extended the HelpDesk application to allow the user to upload a screenshot along
    with the ticket details and also view/download the uploaded image. In addition,
    we explored how we can deploy our app on Firebase Hosting.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Google 云平台。它为您提供了对 Google 云存储和 Google 应用引擎的基本理解，以及我们如何将 Firebase 的云存储与
    Google 云存储集成。我们探索了 Firebase 的云存储，并看到了如何将文件上传、下载和删除到云存储。我们还扩展了 HelpDesk 应用程序，允许用户上传屏幕截图以及工单详细信息，并查看/下载已上传的图像。此外，我们还探讨了如何在
    Firebase Hosting 上部署我们的应用程序。
- en: In the next chapter, we will talk about coding standards and best practices
    that developers should follow while working with React and Firebase to have better
    application performance, reduced number of bugs, and also for easily manageable
    application code.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论开发人员在使用 React 和 Firebase 时应遵循的编码标准和最佳实践，以获得更好的应用程序性能、减少错误数量，以及更易于管理的应用程序代码。
