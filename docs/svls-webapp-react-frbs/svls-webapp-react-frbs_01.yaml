- en: Getting Started with Firebase and React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Firebase和React入门
- en: Realtime web applications are said to include the benefits of superfast responses
    to the user and are highly interactive, which increases the user engagement flow.
    In this modern web, there are many frameworks and tools that are available to
    develop Realtime applications. JavaScript is one of the most popular scripting
    languages that is used for building applications on the web. This book introduces
    you to ReactJS and Firebase, which you will likely come across as you learn about
    modern web app development. They both are used for building fast, scalable, and
    realtime user interfaces that use data and can change over time without reloading
    the page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 实时Web应用程序被认为包括对用户的超快速响应的好处，并且具有高度的互动性，这增加了用户的参与度。在现代Web中，有许多可用于开发实时应用程序的框架和工具。JavaScript是用于构建Web应用程序的最流行的脚本语言之一。本书向您介绍了ReactJS和Firebase，这两者在您学习现代Web应用程序开发时可能会遇到。它们都用于构建快速、可扩展和实时的用户界面，这些界面使用数据，并且可以随时间变化而无需重新加载页面。
- en: React is famously known as a View in **Model**-**View**-**Controller** (**MVC**) pattern
    and can be used with other JavaScript libraries or frameworks in MVC. For managing
    the data flow in React app, we can use Flux or Redux. In this book, we will also
    go through how we can implement redux with React and firebase app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: React以**模型**-**视图**-**控制器**（**MVC**）模式中的视图而闻名，并且可以与其他JavaScript库或框架一起在MVC中使用。为了管理React应用程序中的数据流，我们可以使用Flux或Redux。在本书中，我们还将介绍如何将redux与React和firebase应用程序实现。
- en: Redux is the alternative to Flux. It shares the same key benefits. Redux works
    especially well with React, for managing the state of the UI. If you have ever
    worked with flux, then it's easy too.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Redux是Flux的替代品。它具有相同的关键优势。Redux与React配合特别好，用于管理UI的状态。如果你曾经使用过flux，那么使用Redux也很容易。
- en: Before jumping into the code, let's refresh our knowledge of ReactJS and see
    what we can do with Firebase and their features, to know the power of firebase.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编码之前，让我们复习一下ReactJS的知识，并了解我们可以如何使用Firebase及其功能，以了解Firebase的强大功能。
- en: 'Here is the list of topics that we''ll cover in this section:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本节中我们将涵盖的主题列表：
- en: Introduction of React
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React简介
- en: React Component LifeCycle
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React组件生命周期
- en: This will give you a better understanding of dealing with React Components.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这将让您更好地理解处理React组件。
- en: React
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React
- en: React is an open source JavaScript library that provides a view-layer for rendering
    data as HTML to create interactive UI components. Components have been used typically
    to render React views that contain additional components specified as custom HTML
    tags. React views efficiently update and re-render the components without reloading
    the page when your data changes. It gives you a trivial virtual DOM, powerful
    views without templates, unidirectional data flow, and explicit mutation. It is
    a very systematic way of updating the HTML document when the data changes and
    provides a clean separation of components in a modern, single-page application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: React是一个开源的JavaScript库，提供了一个视图层，用于将数据呈现为HTML，以创建交互式UI组件。组件通常用于呈现包含自定义HTML标记的其他组件的React视图。当数据发生变化时，React视图会高效地更新和重新呈现组件，而无需重新加载页面。它为您提供了一个虚拟DOM，强大的视图而无需模板，单向数据流和显式突变。这是一种非常系统化的方式，在数据发生变化时更新HTML文档，并在现代单页面应用程序中提供了组件的清晰分离。
- en: The React Component is built entirely with Javascript, so it's easy to pass
    rich data through your app. Creating components in React lets you split the UI
    into reusable and independent pieces, which makes your application component reusable,
    testable, and makes the separation of concerns easy.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: React组件完全由Javascript构建，因此很容易通过应用程序传递丰富的数据。在React中创建组件可以将UI分割为可重用和独立的部分，这使得您的应用程序组件可重用、可测试，并且易于关注点分离。
- en: React is only focused on View in MVC, but it also has stateful components that
    remember everything within `this.state`. It handles mapping from input to state
    changes and it renders components. Let's look at React's component life cycle
    and its different levels.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: React只关注MVC中的视图，但它也有有状态的组件，它记住了`this.state`中的所有内容。它处理从输入到状态更改的映射，并渲染组件。让我们来看看React的组件生命周期及其不同的级别。
- en: Component lifecycle
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件生命周期
- en: In React, each component has its own lifecycle methods. Every method can be
    overridden as per your requirements.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，每个组件都有自己的生命周期方法。每个方法都可以根据您的要求进行重写。
- en: When the data changes, React automatically detects the change and re-renders
    the component. Also, we can catch the errors in the Error Handling phase.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据发生变化时，React会自动检测变化并重新渲染组件。此外，我们可以在错误处理阶段捕获错误。
- en: 'The following image shows the phases of a React Component:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了React组件的各个阶段：
- en: '![](Images/03a987fd-5f96-41d6-9c61-adada00864f3.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/03a987fd-5f96-41d6-9c61-adada00864f3.png)'
- en: Methods info
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法信息
- en: Let's take a quick look at the preceding methods.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下前面的方法。
- en: The constructor() method
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: constructor()方法
- en: The constructor method of React Component gets invoked first when the component
    is mounted. Here, we can set the state of the component.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当组件挂载时，React组件的构造函数首先被调用。在这里，我们可以设置组件的状态。
- en: 'Here''s an example of constructor in `React.Component`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在`React.Component`中的构造函数示例：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using `this.props` inside the constructor, we need to call `super(props)` to
    access and call functions of parents; otherwise, you will get `this.props` undefined
    in the constructor because React sets the `.props` on the instance from outside immediately after
    calling constructor, but it will not affect when you are using `this.props` inside
    the render method.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中使用`this.props`，我们需要调用`super(props)`来访问和调用父级的函数；否则，你会在构造函数中得到`this.props`未定义，因为React在调用构造函数后立即从外部设置实例上的`.props`，但当你在render方法中使用`this.props`时，它不会受到影响。
- en: The render() method
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: render()方法
- en: 'The `render()` method is required to render the UI component and examine `this.props` and
    `this.state` and return one of the following types:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`render()`方法是必需的，用于渲染UI组件并检查`this.props`和`this.state`，并返回以下类型之一：'
- en: '**React elements**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React元素**'
- en: '**String and numbers**'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串和数字**'
- en: '**Portals**'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**门户**'
- en: '**null**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**null**'
- en: '**Booleans**'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布尔值**'
- en: The componentWillMount() method
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: componentWillMount()方法
- en: This method is invoked immediately before `componentDidMount`. It is triggered
    before `render()method`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在`componentDidMount`之前立即调用。它在`render()`方法之前触发。
- en: The componentDidMount() method
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: componentDidMount()方法
- en: This method is invoked immediately after a component gets the mount. We can
    use this method to load the data from a remote endpoint to instantiate a network
    request.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在组件挂载后立即调用。我们可以使用此方法从远程端点加载数据以实例化网络请求。
- en: The componentWillReceiveProps() method
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: componentWillReceiveProps()方法
- en: This method will be invoked when the mounted component receives new props. This
    method also allows comparing the current and next values to ensure the changes
    in props.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当挂载的组件接收到新的props时，将调用此方法。此方法还允许比较当前值和下一个值，以确保props的更改。
- en: The shouldComponentUpdate() method
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: shouldComponentUpdate()方法
- en: The `shouldComponentUpdate()` method is invoked when the component has received
    the new props and state. The default value is `true`; if it returns `false`, React
    skips the update of the component.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`shouldComponentUpdate()`方法在组件接收到新的props和state时被调用。默认值是`true`；如果返回`false`，React会跳过组件的更新。'
- en: The componentWillUpdate() method
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: componentWillUpdate()方法
- en: The `componentWillUpdate()` method is invoked immediately before rendering when
    a new prop or state is being received. We can use this method to perform an action
    before the component gets updated.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentWillUpdate()`方法在渲染之前立即被调用，当接收到新的prop或state时。我们可以使用这个方法在组件更新之前执行操作。'
- en: This method will not be invoked if `shouldComponentUpdate()` returns `false`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`shouldComponentUpdate()`返回`false`，这个方法将不会被调用。
- en: The componentDidUpdate() method
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: componentDidUpdate()方法
- en: The `componentDidUpdate()` method is invoked immediately when component gets
    updated. This method is not called for the initial render.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentDidUpdate()`方法在组件更新后立即被调用。这个方法不会在初始渲染时被调用。'
- en: Similar to `componentWillUpdate()`, this method is also not invoked if `shouldComponentUpdate()`
    returns false.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`componentWillUpdate()`，如果`shouldComponentUpdate()`返回false，这个方法也不会被调用。
- en: The componentWillUnmount() method
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: componentWillUnmount()方法
- en: This method is invoked immediately before a React Component is unmounted and
    destroyed. Here, we can perform any necessary cleanup, such as canceling network
    requests or cleaning up any subscription that was created in `componentDidMount`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法在React组件被卸载和销毁之前立即被调用。在这里，我们可以执行任何必要的清理，比如取消网络请求或清理在`componentDidMount`中创建的任何订阅。
- en: The componentDidCatch() method
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: componentDidCatch()方法
- en: This method allows us to catch the JavaScript errors in React Components. We
    can log those errors and display another fallback UI instead of the component
    tree that crashed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法允许我们在React组件中捕获JavaScript错误。我们可以记录这些错误，并显示另一个备用UI，而不是崩溃的组件树。
- en: Now we have a clear idea about component methods that are available in React
    Components.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对React组件中可用的组件方法有了清晰的了解。
- en: 'Observe the following JavaScript code snippet:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下JavaScript代码片段：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, observe the following ReactJS code snippet:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，观察以下ReactJS代码片段：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, after observing the preceding examples of React and JavaScript, we will
    have a clear idea of normal HTML encapsulation and ReactJS custom HTML tags.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在观察了前面的React和JavaScript示例之后，我们将对普通HTML封装和ReactJS自定义HTML标签有一个清晰的了解。
- en: React isn't an MVC framework; it's a library for building a composable user
    interface and reusable components. React is used at Facebook in its production
    stages and [instagram.com](https://www.instagram.com/) is entirely built on React.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: React不是一个MVC框架；它是一个用于构建可组合用户界面和可重用组件的库。React在Facebook的生产阶段使用，并且[instagram.com](https://www.instagram.com/)完全基于React构建。
- en: Firebase
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase
- en: The Firebase platform helps you develop high-quality apps and focus on your
    users.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase平台帮助您开发高质量的应用程序并专注于用户。
- en: Firebase is a mobile and web application development platform backed by Google.
    It is a one-stop solution for all your needs to develop high-quality mobile and
    web applications. It includes various products, such as Realtime Database, Crash
    reporting, Cloud Firestore, Cloud Storage, Cloud functions, Authentication, Hosting,
    Test lab for Android, and Performance monitoring for iOS, which can be used to
    develop and test Realtime applications by focusing on the user's needs, rather
    than the technical complexities.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase是由Google支持的移动和Web应用程序开发平台。它是开发高质量移动和Web应用程序的一站式解决方案。它包括各种产品，如实时数据库、崩溃报告、云Firestore、云存储、云功能、身份验证、托管、Android测试实验室和iOS性能监控，可以用来开发和测试实时应用程序，专注于用户需求，而不是技术复杂性。
- en: It also includes products such as Cloud Messaging, Google Analytics, Dynamic
    Links, Remote Config, Invites, App Indexing, AdMob, and AdWords that help you
    grow user base and also increase the engagement of your audience.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 它还包括产品，如云消息传递、Google分析、动态链接、远程配置、邀请、应用索引、AdMob和AdWords，这些产品可以帮助您扩大用户群体，同时增加受众的参与度。
- en: 'Firebase provides multiple Firebase services. We can access each service with
    the Firebase namespace:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase提供多个Firebase服务。我们可以使用Firebase命名空间访问每个服务：
- en: '`firebase.auth()` - Authentication'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`firebase.auth()` - 认证'
- en: '`firebase.storage()` - Cloud Storage'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`firebase.storage()` - 云存储'
- en: '`firebase.database()` - Realtime Database'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`firebase.database()` - 实时数据库'
- en: '`firebase.firestore()` - Cloud Firestore'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`firebase.firestore()` - 云 Firestore'
- en: We'll cover all the preceding services in the upcoming chapters. In this chapter,
    we will go through the preceding products/services briefly to get a basic understanding
    of all features of the Firebase platform. In the upcoming chapters, we will explore
    web-related products  which can integrate with React platform, in more detail.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中涵盖所有前述的服务。在本章中，我们将简要地介绍前述产品/服务，以便对Firebase平台的所有功能有一个基本的了解。在接下来的章节中，我们将更详细地探索可以与React平台集成的与web相关的产品。
- en: 'Here''s the list of topics that we''ll cover in this section:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将在本节中涵盖的主题列表：
- en: Introduction to Firebase and its features
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase及其功能简介
- en: List of Firebase Features and how we can use it
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase功能列表以及如何使用它
- en: Cloud Firestore
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云 Firestore
- en: Firebase project setup with JavaScript
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript设置Firebase项目
- en: Sample application "Hello World" with Firebase and JavaScript
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Firebase和JavaScript创建“Hello World”示例应用程序
- en: As you can see, Firebase offers two types of Cloud Database and Realtime Database,
    and both support real-time data syncing. We can use both of them in the same application
    or project. Okay, let's go into detail and learn more about them.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Firebase提供了两种类型的云数据库和实时数据库，两者都支持实时数据同步。我们可以在同一个应用程序或项目中同时使用它们。好的，让我们深入了解并了解更多。
- en: Realtime Database
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时数据库
- en: For any Realtime application, we need a Realtime Database. The Firebase Realtime
    Database is a cloud-hosted NoSQL database that synchronizes the data in Realtime
    to every connected client. Instead of a typical request-response model, the Firebase
    database uses the synchronization mechanism that synchronizes the data to all
    the connected devices within milliseconds. Another key capability is its offline
    feature. The Firebase SDK persists the data on the disk; so, even if a user loses
    their internet connection, the app remains responsive. It automatically synchronizes
    the data once the connection is reestablished. It is supported by iOS, Android,
    Web, C++, and Unity platforms. We will cover this in detail in the upcoming chapters.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何实时应用程序，我们都需要一个实时数据库。Firebase实时数据库是一个云托管的NoSQL数据库，可以将数据实时同步到每个连接的客户端。Firebase数据库使用同步机制，而不是典型的请求-响应模型，它可以在毫秒内将数据同步到所有连接的设备上。另一个关键功能是它的离线功能。Firebase
    SDK将数据持久保存在磁盘上；因此，即使用户失去互联网连接，应用程序仍然可以响应。一旦重新建立连接，它会自动同步数据。它支持iOS、Android、Web、C++和Unity平台。我们将在接下来的章节中详细介绍这一点。
- en: Firebase Realtime Database can scale around 100,000 concurrent connections and
    1,000 writes/second in a single database.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase实时数据库可以在单个数据库中支持约100,000个并发连接和每秒1,000次写入。
- en: 'The following screenshot shows the list of features on the left, which are
    available in Firebase, and we have selected the Realtime Database in the database
    section. In that section, we have four tabs available:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了左侧Firebase中可用的功能列表，我们已经在数据库部分选择了实时数据库。在该部分，我们有四个选项卡可用：
- en: DATA
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据
- en: RULES
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则
- en: BACKUPS
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份
- en: USAGE
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用法
- en: '![](Images/d483f47d-f69c-41db-8390-b3d6fe253d52.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d483f47d-f69c-41db-8390-b3d6fe253d52.png)'
- en: Database rules
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库规则
- en: Firebase database rules are the only way to secure the data. Firebase provides
    flexibility and expression-based rules language with JavaScript-like syntax to
    developers to define how your data should be structured, how it should be indexed,
    and when the user can read and write the data. You can also combine authentication
    services with this to define who has access to what data and protect your users from
    unauthorized access. To validate the data, we need to add a rule separately using
    `.validate` in the rules.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase数据库规则是保护数据的唯一方法。Firebase为开发人员提供了灵活性和基于表达式的规则语言，具有类似JavaScript的语法，用于定义数据的结构、索引方式以及用户何时可以读取和写入数据。您还可以将身份验证服务与此结合，以定义谁可以访问哪些数据，并保护用户免受未经授权的访问。为了验证数据，我们需要在规则中使用`.validate`来单独添加规则。
- en: 'Consider this example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here are some other sample blocks of code for applying rules in the Rules tab:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在“规则”选项卡中应用规则的其他示例代码块：
- en: '**Default**: Rule configuration for authentication:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认**：身份验证的规则配置：'
- en: '[PRE4]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Public**:These rules give full access to everyone, even people who are not
    users of your app. They give read and write access to your database:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**公共**：这些规则允许每个人完全访问，即使是您应用的非用户。它们允许读取和写入数据库：'
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**User**: These rules authorize access to a node matching the user''s ID from
    the Firebase authentication token:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户**：这些规则授权访问与Firebase身份验证令牌中用户ID匹配的节点：'
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Private**: These rule configs don''t allow anyone to read and write to a
    database:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**私有**：这些规则配置不允许任何人读取和写入数据库：'
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can also use REST API with Firebase Secret code to write and update Rules
    for your Firebase app by making a `PUT` request to the `/.settings/rules.json`
    path and it will overwrite the existing rules.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用Firebase秘钥代码的REST API来通过向`/.settings/rules.json`路径发出`PUT`请求来编写和更新Firebase应用的规则，并且它将覆盖现有规则。
- en: 'Take, for example, `curl -X PUT -d ''{ "rules": { ".read": true } }''` `''https://docs-examples.firebaseio.com/.settings/rules.json?auth=FIREBASE_SECRET''`.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，`curl -X PUT -d ''{ "rules": { ".read": true } }''` `''https://docs-examples.firebaseio.com/.settings/rules.json?auth=FIREBASE_SECRET''`。'
- en: Backups
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份
- en: Firebase allows us to save the daily backup of our database, but that is only
    available in the Blaze plan. It also applies the security rules automatically
    to secure your data.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase允许我们保存数据库的每日备份，但这仅在Blaze计划中可用。它还会自动应用安全规则以保护您的数据。
- en: Usage
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用法
- en: 'Firebase allows seeing the usage of the database with the help of an analytical
    chart. It shows us the connections, storage, downloads, and load in Realtime on
    our firebase database:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase允许通过分析图表查看数据库的使用情况。它实时显示了我们的Firebase数据库中的连接、存储、下载和负载：
- en: '![](Images/2ba2765c-6d08-445d-82bf-f81e78b2b262.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2ba2765c-6d08-445d-82bf-f81e78b2b262.png)'
- en: Cloud Firestore
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cloud Firestore
- en: Cloud Firestore is also a cloud-hosted, NoSQL database. You might be thinking
    that we already have Realtime Database, which is also a NoSQL database, so why
    do we need Firestore? The answer to this question is that Firestore can be considered
    as an advanced version of Realtime Database that provides live synchronization
    and offline support along with efficient data queries. It scales globally and
    lets you focus on developing apps instead of worrying about server management.
    It can be used with Android, iOS, and web platforms.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Firestore也是一种云托管的NoSQL数据库。您可能会认为我们已经有了实时数据库，它也是一种NoSQL数据库，那么为什么我们需要Firestore呢？对这个问题的答案是，Firestore可以被视为提供实时同步和离线支持以及高效数据查询的实时数据库的高级版本。它可以全球扩展，并让您专注于开发应用，而不必担心服务器管理。它可以与Android、iOS和Web平台一起使用。
- en: We can use both databases within the same Firebase application or project. Both
    are NoSQL databases, can store the same types of data, and have client libraries
    that work in a similar manner.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在同一个Firebase应用程序或项目中使用这两个数据库。两者都是NoSQL数据库，可以存储相同类型的数据，并且具有类似方式工作的客户端库。
- en: 'If you want to try out Cloud Firestore while it''s in beta, use our guide to
    get started:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在云Firestore处于测试版时尝试它，请使用我们的指南开始使用：
- en: Go to the [https://console.firebase.google.com/](https://console.firebase.google.com/)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到[https://console.firebase.google.com/](https://console.firebase.google.com/)
- en: Select your project, ``DemoProject``
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择您的项目，“DemoProject”
- en: 'Click on the Database in the left section navigation and select the Cloud Firestore database:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单击左侧导航栏中的数据库，然后选择Cloud Firestore数据库：
- en: '![](Images/ac60a4ce-21da-48e5-9af3-cae9d46762eb.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ac60a4ce-21da-48e5-9af3-cae9d46762eb.png)'
- en: Once we select the database, it prompts you to apply the security rules before
    creating the database.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们选择数据库，它会提示您在创建数据库之前应用安全规则。
- en: Security rules
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全规则
- en: Before creating a database and collection in Cloud Firestore, it prompts you
    to apply the security rules for our database.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cloud Firestore中创建数据库和集合之前，它会提示您为我们的数据库应用安全规则。
- en: 'Take a look at the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下的截图：
- en: '![](Images/cfec66de-5807-4a3d-9bc6-9367e52836c9.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cfec66de-5807-4a3d-9bc6-9367e52836c9.png)'
- en: 'Here are some code example of Firestore rules:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Firestore规则的一些代码示例：
- en: '**Public**:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**公共**：'
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Users**:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户**：'
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Private**:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**私有**：'
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Difference between Realtime Database and Cloud Firestore
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时数据库和云Firestore之间的区别
- en: We have seen that both Realtime Database and Cloud Firestore are NoSQL Databases
    with Realtime capabilities of syncing the data. So, let's see the difference between
    both of them based on the features.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到实时数据库和云Firestore都是具有实时数据同步功能的NoSQL数据库。因此，让我们根据功能来看看它们之间的区别。
- en: Data model
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据模型
- en: 'Both databases are cloud-hosted, NoSQL databases, but the data model of both
    databases is different:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个数据库都是云托管的NoSQL数据库，但两个数据库的数据模型是不同的：
- en: '| **Realtime Database** | **Cloud Firestore** |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| **实时数据库** | **云Firestore** |'
- en: '|'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Simple data is very easy to store.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的数据非常容易存储。
- en: Complex, hierarchical data is harder to organize at scale.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂的分层数据在规模上更难组织。
- en: '|'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Simple data is easy to store in documents, which are very similar to JSON.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的数据很容易存储在类似JSON的文档中。
- en: Complex and hierarchical data is easier to organize at scale, using subcollections
    within documents.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用子集合在文档中更容易地组织复杂和分层数据。
- en: Requires less denormalization and data flattening.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要较少的去规范化和数据扁平化。
- en: '|'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Real-time and offline support
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时和离线支持
- en: 'Both have mobile-first, Realtime SDKs, and both support local data storage
    for offline-ready apps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都具有面向移动端的实时SDK，并且都支持本地数据存储，以便离线就绪的应用程序：
- en: '| **Realtime Database** | **Cloud Firestore** |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| **实时数据库** | **云Firestore** |'
- en: '| Offline support for mobile clients on iOS and Android only. | Offline support
    for iOS, Android, and web clients. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 仅iOS和Android移动客户端的离线支持。 | iOS、Android和Web客户端的离线支持。 |'
- en: Querying
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询
- en: 'Retrieve, sort, and filter data from either database through queries:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查询从任一数据库中检索、排序和过滤数据：
- en: '| **Realtime Database** | **Cloud Firestore** |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| **实时数据库** | **云Firestore** |'
- en: '| **Deep queries with limited sorting and filtering functionality:**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '| **具有有限排序和过滤功能的深度查询：**'
- en: You can only sort or filter on a property, not sort and filter on a property,
    in a single query.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您只能在一个属性上进行排序或过滤，而不能在一个属性上进行排序和过滤。
- en: Queries are deep by default. They always return the entire subtree.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询默认是深度的。它们总是返回整个子树。
- en: '| **Indexed queries with compound sorting and filtering:**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '| **具有复合排序和过滤的索引查询：**'
- en: You can chain filters and combine filtering and sort on a property in a single
    query.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在单个查询中链接过滤器并结合过滤和对属性进行排序。
- en: Write shallow queries for sub collections; you can query subcollections within
    a document instead of an entire collection, or even an entire document.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为子集合编写浅层查询；您可以查询文档内的子集合，而不是整个集合，甚至是整个文档。
- en: Queries are indexed by default. Query performance is proportional to the size
    of your result set, not your dataset.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询默认进行索引。查询性能与结果集的大小成正比，而不是数据集的大小。
- en: '|'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Reliability and performance
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可靠性和性能
- en: 'When we choose the database for our project, then reliability and performance
    are the most important parts that come to our mind:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为项目选择数据库时，可靠性和性能是我们首先考虑的最重要部分：
- en: '| **Realtime Database** | **Cloud Firestore** |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| **Realtime Database** | **Cloud Firestore** |'
- en: '| **Realtime Database is a mature product:**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '| **Realtime Database是一个成熟的产品：**'
- en: Stability you'd expect from a battle-tested, tried-and-true product.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以期望从经过严格测试和验证的产品中获得的稳定性。
- en: Very low latency, so it's a great option for frequent state-syncing.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟非常低，因此非常适合频繁的状态同步。
- en: Databases are limited to zonal availability in a single region.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库仅限于单个区域的区域可用性。
- en: '| **Cloud Firestore is currently in beta:**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '| **Cloud Firestore目前处于beta版：**'
- en: Stability in a beta product is not always the same as that of a fully launched
    product.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在beta产品中的稳定性并不总是与完全推出的产品相同。
- en: Houses your data across multiple data centers in distinct regions, ensuring
    global scalability, and strong reliability.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的数据存储在不同地区的多个数据中心，确保全球可扩展性和强大的可靠性。
- en: When Cloud Firestore graduates from beta, it will have stronger reliability
    than Realtime Database.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当Cloud Firestore从beta版毕业时，它的可靠性将比Realtime Database更强。
- en: '|'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Scalability
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展性
- en: 'When we develop a large-scale application, we must know how much we can scale
    our database:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开发大规模应用程序时，我们必须知道我们的数据库可以扩展到多大程度：
- en: '| **Realtime Database** | **Cloud Firestore** |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| **Realtime Database** | **Cloud Firestore** |'
- en: '| **Scaling requires sharding:**Scale to around 100,000 concurrent connections
    and 1,000 writes/second in a single database. Scaling beyond that requires sharing
    your data across multiple databases. | **Scaling will be automatic:**Scales completely
    automatically (after beta), which means that you don''t need to share your data
    across multiple instances. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| **扩展需要分片：**在单个数据库中扩展到大约100,000个并发连接和每秒1,000次写入。超出这一范围需要在多个数据库之间共享数据。| **扩展将是自动的：**完全自动扩展（在beta版之后），这意味着您不需要在多个实例之间共享数据。|'
- en: Security
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全性
- en: 'As per the security concern, every database has a different way of securing
    data from unauthorized users:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 就安全性而言，每个数据库都有不同的方式来保护数据免受未经授权的用户访问：
- en: '**Source**: [https://firebase.google.com/docs/firestore/rtdb-vs-firestore?authuser=0](https://firebase.google.com/docs/firestore/rtdb-vs-firestore?authuser=0).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源**：[https://firebase.google.com/docs/firestore/rtdb-vs-firestore?authuser=0](https://firebase.google.com/docs/firestore/rtdb-vs-firestore?authuser=0)。'
- en: '| **Realtime Database** | **Cloud Firestore** |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| **Realtime Database** | **Cloud Firestore** |'
- en: '| **Cascading rules that require separate validation.**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '| **需要单独验证的级联规则。**'
- en: Firebase Database Rules are the only security option.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase数据库规则是唯一的安全选项。
- en: Read and write rules cascade.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读写规则会级联。
- en: You need to validate data separately using `.validate` in the rule.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要使用`.validate`在规则中单独验证数据。
- en: '| **Simpler, more powerful security for mobile, web, and server SDKs.**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '| **更简单，更强大的移动端、Web端和服务器端SDK安全性。**'
- en: Mobile and web SDKs use Cloud Firestore Security Rules, and server SDKs use **Identity
    and Access Management** (**IAM**).
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动端和Web端SDK使用Cloud Firestore安全规则，服务器端SDK使用**身份和访问管理**（**IAM**）。
- en: Rules don't cascade unless you use a wildcard.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非使用通配符，否则规则不会级联。
- en: Data validation happens automatically.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据验证会自动进行。
- en: Rules can constrain queries; if a query's results might contain data the user
    doesn't have access to, the entire query fails.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则可以限制查询；如果查询结果可能包含用户无权访问的数据，则整个查询将失败。
- en: '|'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: As of now, Cloud Firestore is available in beta version; so, in this book, we
    are only focusing on Realtime Database.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，Cloud Firestore仅提供测试版；因此，在本书中，我们只关注实时数据库。
- en: Crash reporting
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 崩溃报告
- en: Crash reporting services help you diagnose problems in your Android and iOS
    mobile apps. It produces detailed reports of bugs and crashes and also sends them
    to the configured email address for quick notifications of the problems. It also
    provides a rich dashboard where you can monitor the overall health of your apps.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 崩溃报告服务可帮助您诊断Android和iOS移动应用中的问题。它会生成详细的错误和崩溃报告，并将其发送到配置的电子邮件地址，以便快速通知问题。它还提供了一个丰富的仪表板，您可以在其中监视应用的整体健康状况。
- en: Authentication
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证
- en: Firebase Authentication provides a simple and secure solution to manage user
    authentication for your mobile and web apps. It offers multiple methods to authenticate,
    including traditional form-based authentication using email and password, third-party
    providers such as Facebook or Twitter, and using your existing account system
    directly.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase身份验证提供了一个简单而安全的解决方案，用于管理移动和Web应用的用户身份验证。它提供多种身份验证方法，包括使用电子邮件和密码进行传统的基于表单的身份验证，使用Facebook或Twitter等第三方提供商，以及直接使用现有的帐户系统。
- en: FirebaseUI authentication for web
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于Web的FirebaseUI身份验证
- en: Firebase UI is completely open source and easily customizes to fit in with your
    app that includes some set of libraries. It allows you to quickly connect UI elements
    to the Firebase database for data storage, allowing views to be updated in Realtime,
    and it also provides the simple interfaces for common tasks such as displaying
    lists or collections of items.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase UI是完全开源的，并且可以轻松定制以适应您的应用程序，其中包括一些库。它允许您快速将UI元素连接到Firebase数据库以进行数据存储，允许视图实时更新，并且还提供了用于常见任务的简单接口，例如显示项目列表或集合。
- en: FirebaseUI Auth is a recommended way to add authentication in Firebase app,
    or we can do it manually with Firebase Authentication SDK. It allows users to
    add a complete UI flow for signing in with email and passwords, phone numbers,
    and with most popular identity providers, including Google and Facebook Login.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: FirebaseUI Auth是在Firebase应用程序中添加身份验证的推荐方法，或者我们可以使用Firebase身份验证SDK手动执行。它允许用户为使用电子邮件和密码、电话号码以及包括Google和Facebook登录在内的最流行的身份提供者添加完整的UI流程。
- en: FirebaseUI is available at [https://opensource.google.com/projects/firebaseui](https://opensource.google.com/projects/firebaseui).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: FirebaseUI可在[https://opensource.google.com/projects/firebaseui](https://opensource.google.com/projects/firebaseui)上找到。
- en: We will explore more about Authentication in detail in the upcoming chapters.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中详细探讨身份验证。
- en: Cloud Functions
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云函数
- en: 'Cloud Functions allow you to have serverless apps; you can run your custom
    application backend logic without a server. Your custom functions can be executed
    on specific events that can be emitted by integrating the following Firebase products:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 云函数允许您拥有无服务器应用程序；您可以在没有服务器的情况下运行自定义应用程序后端逻辑。您的自定义函数可以在特定事件上执行，这些事件可以通过集成以下Firebase产品来触发：
- en: Cloud Firestore triggers
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Firestore触发器
- en: Realtime Database triggers
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时数据库触发器
- en: Firebase Authentication triggers
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase身份验证触发器
- en: Google Analytics for Firebase triggers
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase的Google Analytics触发器
- en: Cloud Storage triggers
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云存储触发器
- en: Cloud Pub/Sub triggers
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云Pub/Sub触发器
- en: HTTP Triggers
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP触发器
- en: How does it work?
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: Once you write and deploy a function, Google's servers start listening to those functions
    immediately, that is listening for events and running the function when it gets
    triggered. As the load of your app increases or decreases, it responds by rapidly
    scaling the number of virtual server instances needed to run your function faster.
    If the function is deleted, idle, or updated by you, then instances are cleaned
    up and replaced by new instances. In the case of deletion, it also removes the
    connection between functions and the event provider.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编写并部署函数，Google的服务器立即开始监听这些函数，即监听事件并在触发时运行函数。随着应用程序的负载增加或减少，它会通过快速扩展所需的虚拟服务器实例数量来响应。如果函数被删除、空闲或由您更新，那么实例将被清理并替换为新实例。在删除的情况下，它还会删除函数与事件提供者之间的连接。
- en: 'Given here are the events that are supported by Cloud Functions:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了云函数支持的事件：
- en: '`onWrite()`: It triggers when data is created, destroyed, or changed in the
    Realtime Database'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onWrite()`: 当实时数据库中的数据被创建、销毁或更改时触发'
- en: '`onCreate()`: It triggers when new data is created in the Realtime Database'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onCreate()`: 当实时数据库中创建新数据时触发'
- en: '`onUpdate()`: It triggers when data is updated in the Realtime Database'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onUpdate()`: 当实时数据库中的数据更新时触发'
- en: '`onDelete()`: It triggers when data is deleted from the Realtime Database'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDelete()`: 当实时数据库中的数据被删除时触发'
- en: 'Here''s a code sample of the cloud function `makeUppercase`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个云函数`makeUppercase`的代码示例：
- en: '[PRE11]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After you write the cloud function, we can also test and monitor our functions.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 编写云函数后，我们还可以测试和监视我们的函数。
- en: Cloud Storage
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云存储
- en: Any mobile or web app will need a storage space that stores user-generated content
    such as documents, photos, or videos in a secure manner and scales well. Cloud
    Storage is designed with the same requirement in mind and helps you easily store
    and serve user-generated content. It provides a robust streaming mechanism for
    a best end-user experience.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 任何移动应用或Web应用都需要一个存储空间，以安全且可扩展的方式存储用户生成的内容，如文档、照片或视频。云存储是根据相同的要求设计的，并帮助您轻松存储和提供用户生成的内容。它提供了一个强大的流媒体机制，以获得最佳的最终用户体验。
- en: 'Here''s how we can configure Firebase Cloud Storage:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何配置Firebase云存储：
- en: '[PRE12]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The total length of `reference.fullPath` must be between 1 and 1,024 bytes,
    with no Carriage Return or Line Feed characters.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`reference.fullPath`的总长度必须在1到1,024字节之间，不能包含回车或换行字符。'
- en: 'Avoid using #, [, ], *, or ?, as these do not work well with other tools such
    as Firebase Realtime Database.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 避免使用#、[、]、*或?，因为这些在其他工具（如Firebase实时数据库）中效果不佳。
- en: Hosting
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管
- en: Firebase provides a hosting service where you can easily deploy your web apps
    and static content with a simple command. Your web content will be deployed on
    a **global delivery network** (**GDN**), so it will be delivered fast regardless
    of end-user location. It provides a free SSL for your domain to serve the content
    over a secure connection. It also provides full versioning and releases management
    with one-click rollbacks.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase提供了一个托管服务，您可以通过简单的命令轻松部署您的Web应用和静态内容。您的Web内容将部署在**全球交付网络**（**GDN**）上，因此无论最终用户的位置如何，都可以快速交付。它为您的域名提供免费的SSL，以通过安全连接提供内容。它还提供完整的版本控制和一键回滚的发布管理。
- en: Test lab for Android
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android的测试实验室
- en: We test our Android app with a variety of devices running on different Android
    API versions to ensure that the end user can use our app with any Android device
    without any issues. However, it is not always possible to make all the different
    devices available to the testing team. To overcome such problems, we can use Test
    Lab, which provides cloudhosted infrastructure to test the apps with a variety
    of devices. It also makes it easy to collect test results with logs, videos, and
    screenshots. It also tests your app automatically to identify any possible crashes.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用不同的Android API版本在各种设备上测试我们的Android应用程序，以确保最终用户可以在任何Android设备上使用我们的应用程序而不会出现任何问题。但是，很难让所有不同的设备都可供测试团队使用。为了克服这些问题，我们可以使用Test
    Lab，它提供了云托管基础设施，以便使用各种设备测试应用程序。它还可以轻松收集带有日志、视频和截图的测试结果。它还会自动测试您的应用程序，以识别可能的崩溃。
- en: Performance Monitoring
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能监控
- en: Firebase Performance Monitoring is specifically designed for iOS apps' performance
    testing. You can easily identify the performance bottlenecks of your app with
    performance traces. It also provides an automated environment to monitor HTTP
    requests, which helps identify network issues. Performance traces and network
    data gives better insights on how your app is performing.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase性能监控专门为iOS应用程序的性能测试而设计。您可以使用性能跟踪轻松识别应用程序的性能瓶颈。它还提供了一个自动化环境来监视HTTP请求，有助于识别网络问题。性能跟踪和网络数据可以更好地了解您的应用程序的性能。
- en: The following category of products is used in terms of increasing your user
    base and also engaging them in a better way.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 以下产品类别用于增加用户群体并更好地吸引他们。
- en: Google Analytics
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Analytics
- en: Google Analytics is a very well-known product and I think no developer needs
    its introduction. Google Analytics for Firebase is a free analytics solution to
    measure the user engagement with your app. It also provides insights on app usage.
    Analytics reports help you understand the user behavior and hence better decisions
    can be made regarding app marketing and performance optimizations. You can generate
    reports based on different parameters, such as device types, custom events, user
    location, and other properties. Analytics can be configured for Android, iOS,
    and C++ and Unity apps.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Google Analytics是一个非常知名的产品，我认为没有开发人员需要介绍它。Firebase的Google Analytics是一个免费的分析解决方案，用于衡量用户对您的应用的参与度。它还提供有关应用使用情况的见解。分析报告可以帮助您了解用户行为，因此可以更好地做出关于应用营销和性能优化的决策。您可以根据不同的参数生成报告，例如设备类型、自定义事件、用户位置和其他属性。分析可以配置为Android、iOS和C++和Unity应用程序。
- en: Cloud Messaging
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云消息传递
- en: 'Any Realtime app needs to send Realtime notifications. **Firebase Cloud Messaging**
    (**FCM**) provides a platform that helps you send the messages and notifications
    to the app user in Realtime. You can send hundreds of billions of messages per
    day for free across different platforms: Android, iOS, and web. We can also schedule
    the message delivery—immediately or in future. Notification messages are integrated
    with Firebase Analytics, so no coding is required to monitor user engagement.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 任何实时应用程序都需要发送实时通知。Firebase Cloud Messaging（FCM）提供了一个平台，帮助您实时向应用用户发送消息和通知。您可以免费在不同平台上发送数百亿条消息：Android、iOS和Web。我们还可以安排消息的交付
    - 立即或在将来。通知消息与Firebase Analytics集成，因此无需编码即可监控用户参与度。
- en: 'Service Workers are supported on the following browsers:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下浏览器支持服务工作者：
- en: 'Chrome: 50+'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome：50+
- en: 'Firefox: 44+'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firefox：44+
- en: 'Opera Mobile: 37+'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Opera Mobile：37+
- en: '[PRE14]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The FCM SDK is supported only in HTTPS pages because of service workers, which
    are available only on HTTPS sites.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: FCM SDK仅在HTTPS页面上受支持，因为服务工作者仅在HTTPS站点上可用。
- en: Dynamic Links
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态链接
- en: Dynamic Links are URLs that help you redirect users to a specific content location
    in your mobile app or web application. If a user opens a dynamic link in a Desktop
    browser, the respective web page will be open, but if a user opens it up in your
    Android or iOS, the user will be redirected to the respective location in your
    Android or iOS. In addition, Dynamic Links work across the app; the user will
    be prompted to install the app if it is not installed yet. Dynamic Links increase
    the chances of conversion of mobile web users to native app users. Dynamic Links
    as part of online social networking campaigns also increase app installation and
    they are free forever.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 动态链接是帮助您将用户重定向到移动应用程序或Web应用程序中特定内容位置的URL。如果用户在桌面浏览器中打开动态链接，将打开相应的网页，但如果用户在Android或iOS中打开它，用户将被重定向到Android或iOS中的相应位置。此外，动态链接在应用之间起作用；如果应用尚未安装，用户将被提示安装应用。动态链接增加了将移动Web用户转化为原生应用用户的机会。动态链接作为在线社交网络活动的一部分也增加了应用的安装，并且永久免费。
- en: Remote config
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程配置
- en: How cool is it to change the color theme of your app without redeploying it
    on the app store? Yes, it is possible to make on the fly changes to your app through
    Firebase Remote Config. You can manage the app behavior and appearance through
    server-side parameters. For example, you can give the certain discount on a specific
    group of audience based on the region without any redeployment of your app.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在不重新部署应用程序到应用商店的情况下更改应用程序的颜色主题有多酷？是的，通过Firebase远程配置，可以对应用程序进行即时更改。您可以通过服务器端参数管理应用程序的行为和外观。例如，您可以根据地区为特定的受众提供一定的折扣，而无需重新部署应用程序。
- en: Invites
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 邀请
- en: Generally, everybody refers the good apps to their friends and colleagues. We
    do it by copying and pasting the app links. However, it doesn't always work, due
    to a number of reasons, for example, the link was for Android, so an iOS user
    can't open it. Firebase Invites make it very simple to share the content or app
    referrals via email or SMS. It works with Firebase Dynamic Links to give the users
    the best experience with their platform. You can associate the Dynamic Links to
    the content you want to share and Firebase SDK will handle it for you, giving
    the best user experience to your app users.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，每个人都会向朋友和同事推荐好的应用程序。我们通过复制和粘贴应用链接来做到这一点。然而，由于许多原因，它并不总是有效，例如，链接是针对安卓的，所以iOS用户无法打开它。Firebase邀请使通过电子邮件或短信分享内容或应用推荐变得非常简单。它与Firebase动态链接一起工作，为用户提供最佳的平台体验。您可以将动态链接与要分享的内容相关联，Firebase
    SDK将为您处理，为您的应用用户提供最佳的用户体验。
- en: App indexing
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用索引
- en: For any app, it is equally important to get the app installed as well as to
    retain those users with some engagement. To re-engage the users who have installed
    your app, App indexing is a way to go. With Google search Integration, your app
    links will be shown whenever users will search for the content your app provides.
    Also, App Indexing helps you improve Google search ranking for your app links
    to show them in top search results and autocompletion.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何应用程序，让应用程序安装以及保留这些用户并进行一些参与同样重要。重新吸引已安装您的应用程序的用户，应用索引是一种方法。通过Google搜索集成，您的应用链接将在用户搜索您的应用提供的内容时显示。此外，应用索引还可以帮助您改善Google搜索排名，以便在顶部搜索结果和自动完成中显示应用链接。
- en: AdMob
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AdMob
- en: The ultimate goal of the app developer is mostly to monetize it. AdMob helps
    you monetize your app through in-app advertising. You can have different kinds
    of ads, such as a banner ad, a video ad, or even a native ad. It allows you to
    show the ads from AdMob mediation platform or from Google Advertisers. AdMob mediation
    platform has Ad optimization strategy built to maximize your revenue. You can
    also see the monetization reports generated by AdMob to define your product strategy.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 应用开发者的最终目标大多是将其货币化。AdMob通过应用内广告帮助您实现应用的货币化。您可以有不同类型的广告，比如横幅广告、视频广告，甚至原生广告。它允许您展示来自AdMob调解平台或谷歌广告商的广告。AdMob调解平台具有广告优化策略，旨在最大化您的收入。您还可以查看AdMob生成的货币化报告，以制定产品策略。
- en: AdWords
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AdWords
- en: One of the best marketing strategies in today's world is online advertisements.
    Google AdWords helps you reach the potential customers or app users through ad
    campaigns. You can link your Google AdWords account to your Firebase project to
    define the specific target audiences to run your ad campaigns.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今世界，最好的营销策略之一是在线广告。Google AdWords帮助您通过广告活动吸引潜在客户或应用用户。您可以将您的Google AdWords帐户链接到您的Firebase项目，以定义特定的目标受众来运行您的广告活动。
- en: Now that we have an understanding of all the products of Firebase platform,
    we can mix and match these products to solve the common development issues and
    get the best product out in the market.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Firebase平台的所有产品，我们可以混合匹配这些产品来解决常见的开发问题，并在市场上推出最佳产品。
- en: Getting started with Firebase
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Firebase
- en: Before we actually use Firebase in our sample app, we have to create our Firebase
    project through Firebase Console at [https://console.firebase.google.com/](https://console.firebase.google.com/).
    Opening this link will redirect you to the Google sign in the page where you will
    have to log in to your existing Google Account or by creating a new one.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实际在示例应用程序中使用Firebase之前，我们必须通过Firebase控制台在[https://console.firebase.google.com/](https://console.firebase.google.com/)上创建我们的Firebase项目。打开此链接将重定向您到Google登录页面，您将需要登录到您现有的Google帐户或创建一个新的帐户。
- en: 'Once you successfully log in to the Firebase console, you will see a dashboard
    like the following screenshot:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您成功登录到Firebase控制台，您将看到以下截图所示的仪表板：
- en: '![](Images/08005632-39e7-459f-8cd6-86e3f82d5a0a.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/08005632-39e7-459f-8cd6-86e3f82d5a0a.png)'
- en: 'We will create our first project by clicking on the Add project button. Once
    you click on the Add project button, it will show a pop-up window asking for the
    name of your project and the country of your organization. I will call it a `DemoProject`,
    set country to the United States, and click on the CREATE PROJECT button:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过单击“添加项目”按钮来创建我们的第一个项目。一旦您单击“添加项目”按钮，它将显示一个弹出窗口，询问您的项目名称和组织所在国家。我将其称为“DemoProject”，将国家设置为美国，然后单击“创建项目”按钮：
- en: '![](Images/fb88bf3c-f082-42c6-8a9a-5f0d86f81235.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fb88bf3c-f082-42c6-8a9a-5f0d86f81235.png)'
- en: 'Once the project is created, you are good to go. You will be redirected to
    the project dashboard where you can configure the products/services you want to
    use in your project:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 项目创建后，您就可以开始了。您将被重定向到项目仪表板，您可以在其中配置您想要在项目中使用的产品/服务：
- en: '![](Images/33b39356-9f67-4973-905a-713fa55bf80d.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/33b39356-9f67-4973-905a-713fa55bf80d.png)'
- en: Next, we will look at how we can integrate this Firebase project in a web app.
    Your web app can be any JavaScript Or NodeJS project.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何将这个Firebase项目集成到Web应用程序中。您的Web应用程序可以是任何JavaScript或NodeJS项目。
- en: First, we will create an example with plain JavaScript, and then we will move
    further and include React.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用纯JavaScript创建一个示例，然后我们将进一步包含React。
- en: 'Now you need to create a directory in your system with the name of `DemoProject`
    and inside it, you will create a couple of folders named `images`, `css`, and
    `js` (JavaScript) to make your application manageable. Once you have completed
    the folder structure, it will look like this:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您需要在系统中创建一个名为`DemoProject`的目录，并在其中创建几个名为`images`、`css`和`js`（JavaScript）的文件夹，以使您的应用程序易于管理。完成文件夹结构后，它将如下所示：
- en: '![](Images/20b83747-0e37-4322-8a97-43205e7a46fc.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/20b83747-0e37-4322-8a97-43205e7a46fc.png)'
- en: 'To integrate our Firebase project to our JavaScript app, we will need a code
    snippet that has to be added in our JavaScript code. To get it, click on Add Firebase
    to your web app and note the initialization code it has generated, which should
    look like the following code:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们的Firebase项目集成到JavaScript应用程序中，我们需要一个代码片段，必须添加到我们的JavaScript代码中。要获取它，请单击“将Firebase添加到您的Web应用程序”，并注意它生成的初始化代码，它应该看起来像以下代码：
- en: '![](Images/b7726c54-087e-4351-8c80-4d3303073cd3.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b7726c54-087e-4351-8c80-4d3303073cd3.png)'
- en: 'When we start making an application with ReactJS or plain JavaScript, we need
    to do some setup, which just involves an HTML page and includes a few files. First,
    we create a directory (folder) called `chapter1`. Open it up in any of your code
    editors. Create a new file called `index.html` directly inside it and add the
    following HTML5 Boilerplate code:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始使用ReactJS或纯JavaScript制作应用程序时，我们需要进行一些设置，这仅涉及HTML页面并包括一些文件。首先，我们创建一个名为`chapter1`的目录（文件夹）。在任何代码编辑器中打开它。直接在其中创建一个名为`index.html`的新文件，并添加以下HTML5
    Boilerplate代码：
- en: For example, I have created a folder called `DemoProject`
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，我创建了一个名为`DemoProject`的文件夹
- en: Create a file called `index.html` in the folder
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文件夹中创建一个名为`index.html`的文件
- en: 'In your HTML, add the code snippet we copied from Firebase console:'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的HTML中，添加我们从Firebase控制台复制的代码片段：
- en: '![](Images/9545c90c-3af6-4f46-ab86-d5a785e6422c.png)I prefer and recommend
    that you use Visual Studio code editor for any type of JavaScript application
    development over the listed text editors because of its vast array of features.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/9545c90c-3af6-4f46-ab86-d5a785e6422c.png)我更喜欢并建议您在任何类型的JavaScript应用程序开发中使用Visual
    Studio代码编辑器，而不是列出的文本编辑器，因为它具有广泛的功能。'
- en: 'Now, we need to copy the Firebase code snippet into the HTML:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将Firebase代码片段复制到HTML中：
- en: '[PRE15]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following shows the data in our database, which we will fetch and display
    on the UI with JavaScript:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了我们数据库中的数据，我们将使用JavaScript获取并在UI上显示：
- en: '![](Images/9399942c-46ab-4989-8a92-8c56fae2a22a.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9399942c-46ab-4989-8a92-8c56fae2a22a.png)'
- en: '[PRE16]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding code, we are using the `on()` method to retrieve the data.
    It takes the event type as `value` and then retrieves the snapshot of the data.
    When we add the `val()` method to the snapshot, we will get data to show in the
    `messageField`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们使用`on()`方法来检索数据。它以`value`作为事件类型，然后检索数据的快照。当我们向快照添加`val()`方法时，我们将获得要显示在`messageField`中的数据。
- en: Let me give you a brief of the available events in Firebase that we can use
    to read the data.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 让我简要介绍一下Firebase中可用的事件，我们可以用它来读取数据。
- en: 'As for now, in Database rules, we are allowing anyone to read and write the
    data in the database; otherwise, it shows the permission denied error. Consider
    this as an example:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前而言，在数据库规则中，我们允许任何人读取和写入数据库中的数据；否则，它会显示权限被拒绝的错误。将其视为一个例子：
- en: '`{`'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`   "rules": {`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`   "rules": {`'
- en: '`      ".read": true,`'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`      ".read": true,`'
- en: '`     ".write": true`'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`     ".write": true`'
- en: '`    }`'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`    }`'
- en: '`}`'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: Firebase events
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase事件
- en: If you can see the preceding code, we have used the callback function that receives
    a DataSnapshot, which holds the data of snapshot. A snapshot is a picture of the
    data at a particular database reference at a single point in time, and if no data
    exists at the reference's location, the snapshot's value returns null.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以看到前面的代码，我们已经使用了接收DataSnapshot的回调函数，该DataSnapshot保存了快照的数据。快照是数据库引用位置在某个特定时间点的数据的图片，如果在引用位置不存在数据，则快照的值返回null。
- en: value
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: value
- en: Recently, we have used this valuable event to read the data from Realtime Database.
    This event type will be triggered every time the data changes, and the callback
    function will retrieve all the data including children.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我们已经使用了这个宝贵的事件来读取实时数据库中的数据。每当数据发生变化时，都会触发此事件类型，并且回调函数将检索所有数据，包括子数据。
- en: child_added
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: child_added
- en: This event type will be triggered once when we need to retrieve the list of
    items object and every time when a new object is added to our data as given path.
    Unlike `value`, which returns the entire object of that location, this event callback
    is passed as a snapshot that contains two arguments, which include the new child
    and previous child data.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们需要检索项目对象列表时，此事件类型将被触发一次，并且每当新对象被添加到我们的数据给定路径时都会触发。与`value`不同，它返回该位置的整个对象，此事件回调作为包含两个参数的快照传递，其中包括新子项和先前子项数据。
- en: For example, if you want to retrieve the data on each new comment added to your
    post in blogging app, you can use `child_added`.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想在博客应用程序中的每次添加新评论时检索数据，可以使用`child_added`。
- en: child_changed
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: child_changed
- en: The `child_changed` event is triggered when any child object is changed.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 当任何子对象更改时，将触发`child_changed`事件。
- en: child_removed
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: child_removed
- en: The `child_removed` event is triggered when an immediate child is removed. It
    is typically used in combination with `child_added` and `child_changed`. This
    event callback contains the data for the removed child.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 当立即子项被移除时，将触发`child_removed`事件。它通常与`child_added`和`child_changed`结合使用。此事件回调包含已移除子项的数据。
- en: child_moved
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: child_moved
- en: The `child_moved` event is triggered when you're working with ordered data like
    drag and drop in list items.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用有序数据（如列表项的拖放）时，将触发`child_moved`事件。
- en: 'Now, let''s take quick look at our full code:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速查看一下我们的完整代码：
- en: '[PRE17]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, open `index.html` in your browser, and let''s look at the result:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在浏览器中打开`index.html`，让我们看一下结果：
- en: '![](Images/e989b866-a12a-4233-b2ef-10bbe437fdd6.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e989b866-a12a-4233-b2ef-10bbe437fdd6.png)'
- en: In the preceding screen excerpt, we can see the database value on `MessageLabel`
    and JavaScript data representation in the browser console.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的屏幕摘录中，我们可以看到`MessageLabel`上的数据库值和浏览器控制台中的JavaScript数据表示。
- en: 'Let''s extend this example further by taking the input value from the user
    and save those values in the database. Then, using the events, we will display
    that messages in the browser in Realtime:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过从用户那里获取输入值并将这些值保存在数据库中来进一步扩展此示例。然后，使用事件，我们将在实时中在浏览器中显示这些消息：
- en: '![](Images/4d462cc7-ccf3-48cd-9fb5-5ecee3c675c5.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/4d462cc7-ccf3-48cd-9fb5-5ecee3c675c5.png)'
- en: As shown here, I have added a child node `messages` in the database. Now, we
    will add the form input in our HTML with the Save button and at the bottom, we
    will display those messages list in Realtime when the user submits.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，我在数据库中添加了一个子节点`messages`。现在，我们将在我们的HTML中添加表单输入和保存按钮，并在底部在实时中显示用户提交的消息列表。
- en: 'Here''s the HTML Code:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这是HTML代码：
- en: '[PRE18]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we will create the `addData()` function to get and save the data to Firebase:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建`addData()`函数来获取并保存数据到Firebase：
- en: '[PRE19]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the next screenshot, I have added some messages to the input text:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕截图中，我已经向输入文本添加了一些消息：
- en: '![](Images/6a1d1ab3-f606-44ea-b526-dbe561ea0a6c.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6a1d1ab3-f606-44ea-b526-dbe561ea0a6c.png)'
- en: 'Now, we need to display those messages into HTML at the bottom of the messages
    title:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将这些消息显示在HTML的消息标题底部：
- en: '[PRE20]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We have used the `child_added` event, which means whenever any child is added
    in the messages on node, we need to take that value and update the messages list.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了`child_added`事件，这意味着每当在节点上添加任何子项时，我们都需要获取该值并更新消息列表。
- en: 'Now, open your browser and note the output:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开你的浏览器并注意输出：
- en: '![](Images/ae0a520c-16dd-43d8-9621-8ad9b5ffaba3.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ae0a520c-16dd-43d8-9621-8ad9b5ffaba3.png)'
- en: That looks great. We are now be able to see the message that users have submitted
    and our data is also getting updated with the new message in Realtime.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很棒。我们现在能够看到用户提交的消息，并且我们的数据也在实时中得到更新。
- en: 'Now, let''s take a quick look at how our code looks:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速看一下我们的代码是什么样子的：
- en: '[PRE21]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Summary
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Our simple Hello World application and Hello World examples are looking great
    and working exactly as they should; so, let's review what we've learned in this
    chapter.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简单的Hello World应用程序和示例看起来很棒，并且正如他们应该的那样工作；所以，让我们回顾一下我们在本章学到的内容。
- en: 'To begin with, we covered React and Firebase and how easy it is to set up the
    Firebase account and configuration. We also looked at the difference between Realtime
    Database and Firestore. Apart from that, we learned how simple it is to initialize
    Realtime Firebase Database with JavaScript and started building our first Hello
    World application. The Hello World application that we created demonstrates some
    of Firebase''s basic features, such as the following:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们介绍了React和Firebase，以及设置Firebase帐户和配置有多么容易。我们还了解了实时数据库和Firestore之间的区别。除此之外，我们还学习了如何使用JavaScript初始化实时Firebase数据库，并开始构建我们的第一个Hello
    World应用程序。我们创建的Hello World应用程序演示了Firebase的一些基本功能，例如：
- en: About Realtime Database and Firestore
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于实时数据库和Firestore
- en: Difference between Realtime Database and Firestore
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时数据库和Firestore之间的区别
- en: Firebase account creation and configuration with JavaScript App
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript应用程序创建Firebase帐户和配置
- en: Firebase Events (value and `child_data`)
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase事件（值和`child_data`）
- en: Saving the values into the database
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将值保存到数据库中
- en: Read the values from the database
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中读取值
- en: In [Chapter 2](77d4d4ec-e6e1-47c4-8b2a-8c9620341ba7.xhtml), *Integrate React
    App with Firebase*, let's build a React application with Firebase. We will explore
    some more React and Firebase fundamentals and introduce the project that we will
    build over the course of this book.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](77d4d4ec-e6e1-47c4-8b2a-8c9620341ba7.xhtml)中，*将React应用程序与Firebase集成*，让我们使用Firebase构建一个React应用程序。我们将探索更多React和Firebase的基础知识，并介绍我们将在本书中构建的项目。
