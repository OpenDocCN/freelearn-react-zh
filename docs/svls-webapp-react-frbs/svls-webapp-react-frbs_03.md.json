["```jsx\nnode -v\n```", "```jsx\nnpm -v\n```", "```jsx\nnpm install -g create-react-app \nor \nnpm i -g create-react-app\n```", "```jsx\ncreate-react-app <project-name> \nor\ncreate-react-app login-authentication\n```", "```jsx\nnpm install firebase --save\n```", "```jsx\nimport  firebase  from  'firebase'; const  config  = {  apiKey:  \"AIzaSyDO1VEnd5VmWd2OWQ9NQuh-ehNXcoPTy-w\",\n  authDomain:  \"demoproject-7cc0d.firebaseapp.com\",\n  databaseURL:  \"https://demoproject-7cc0d.firebaseio.com\",\n  projectId:  \"demoproject-7cc0d\",\n  storageBucket:  \"demoproject-7cc0d.appspot.com\",\n  messagingSenderId:  \"41428255556\" }; firebase.initializeApp(config); export  default  firebase;\n```", "```jsx\n//package.json\n{\n \"name\": \"login-authentication\",\n \"version\": \"0.1.0\",\n \"private\": true,\n \"dependencies\": {\n \"firebase\": \"^4.8.0\",\n \"react\": \"^16.2.0\",\n \"react-dom\": \"^16.2.0\",\n \"react-router-dom\": \"^4.2.2\",\n \"react-scripts\": \"1.0.17\",\n \"react-toastr-basic\": \"^1.1.14\"\n },\n \"scripts\": {\n \"start\": \"react-scripts start\",\n \"build\": \"react-scripts build\",\n \"test\": \"react-scripts test --env=jsdom\",\n \"eject\": \"react-scripts eject\"\n }\n}\n```", "```jsx\n{\n \"rules\": {\n \".read\": \"auth != null\",\n \".write\": \"auth != null\"\n }\n}\n```", "```jsx\nexport  const  firebaseApp  =  firebase.initializeApp(config); export  const  googleProvider  =  new  firebase.auth.GoogleAuthProvider(); export  const  facebookProvider  =  new  firebase.auth.FacebookAuthProvider();\n```", "```jsx\nconstructor() { super();   this.state  = {  authenticated :  false,\n  data:''\n } }\n```", "```jsx\n constructor() {\n super();\n   this.state = {\n     redirect: false\n   }\n }\n```", "```jsx\nif(this.state.redirect === true){\n return <Redirect to = \"/\" />\n }\n return (\n <div className=\"wrapper\">\n <form className=\"form-signin\" onSubmit={(event)=>{this.authWithEmailPassword(event)}} ref={(form)=>{this.loginForm = form}}> \n <h2 className=\"form-signin-heading\">Login</h2>\n <input type=\"email\" className=\"form-control\" name=\"username\" placeholder=\"Email Address\" ref={(input)=>{this.emailField = input}} required />\n <input type=\"password\" className=\"form-control\" name=\"password\" placeholder=\"Password\" ref={(input)=>{this.passwordField = input}} required /> \n <label className=\"checkbox\">\n <input type=\"checkbox\" value=\"remember-me\" id=\"rememberMe\" name=\"rememberMe\"/> Remember me\n </label>\n <button className=\"btn btn-lg btn-primary btn-block btn-normal\" type=\"submit\">Login</button> \n <br/> \n<!-- Here we will add the buttons for google and facebook authentication\n </form>\n </div>\n );\n```", "```jsx\n<Redirect to={{\n pathname: '/login',\n search: '?utm=your+selection',\n state: { referrer: currentLocation }\n}}/>\n```", "```jsx\n<Switch>\n <Redirect from='/old-url' to='/new-url'/>\n <Route path='/new-url' component={componentName}/>\n</Switch>\n```", "```jsx\n <!-- facebook button that we have bind with authWithFacebook()-->\n<button className=\"btn btn-lg btn-primary btn-facebook btn-block\" type=\"button\" onClick={()=>{this.authWithFacebook()}}>Login with Facebook</button> \n```", "```jsx\n<!-- Google button which we have bind with authWithGoogle()-->\n <button className=\"btn btn-lg btn-primary btn-google btn-block\" type=\"button\" onClick={()=>{this.authWithGoogle()}}>Login with Google</button>\n```", "```jsx\n<Router>\n<div className=\"container\"> {\nthis.state.authenticated\n?\n(\n<React.Fragment>\n<Header authenticated = {this.state.authenticated}/>\n<Route path=\"/\" render={() => (<Home userInfo = {this.state.data} />)} />\n<Route path=\"/view-ticket\" component={ViewTicketTable}/>\n<Route path=\"/add-ticket\" component={AddTicketForm}/>\n</React.Fragment>\n)\n:\n(\n<React.Fragment>\n<Header authenticated = {this.state.authenticated}/>\n<Route exact path=\"/login\" component={Login}/>\n</React.Fragment>\n)\n}\n</div>\n</Router>\n```", "```jsx\nclass Header extends Component {\nrender() {\n return (\n <div className=\"navbar navbar-inverse firebase-nav\" role=\"navigation\">\n {\n this.props.authenticated\n ?\n (\n <React.Fragment>\n <ul className=\"nav navbar-nav\">\n <li className=\"active\"><Link to=\"/\">Home</Link></li>\n <li><Link to=\"/view-ticket\">Tickets</Link></li>\n <li><Link to=\"/add-ticket\">Add new ticket</Link></li>\n </ul>\n <ul className=\"nav navbar-nav navbar-right\">\n <li><Link to=\"/logout\">Logout</Link></li>\n </ul>\n </React.Fragment>\n ):(\n <React.Fragment>\n <ul className=\"nav navbar-nav navbar-right\">\n <li><Link to=\"/login\">Register/Login</Link></li>\n </ul>\n </React.Fragment>\n )\n }\n </div>\n );\n }\n}\n```", "```jsx\n<li><NavLink to=\"/view-ticket/\" activeClassName=\"active\" activeStyle={{fontWeight: 'bold', color: red'}} exact strict>Tickets</NavLink></li>\n```", "```jsx\nnpm start\n```", "```jsx\n authWithFacebook(){\n console.log(\"facebook\");\n firebaseApp.auth().signInWithPopup(facebookProvider).then((result,error)=>{\n if(error){\n   console.log(\"unable to sign in with facebook\");\n }\n else{\n   this.setState({redirect:true})\n }}).catch((error)=>{\n        ToastDanger(error.message);\n    })\n }\n```", "```jsx\nconstructor() {\n super();\n this.authWithFacebook = this.authWithFacebook.bind(this);\n this.state = {\n  redirect: false,\n  data:null\n }}\n```", "```jsx\n authWithGoogle(){\n console.log(\"Google\");      \n googleProvider.addScope('profile');\n googleProvider.addScope('email');\n firebaseApp.auth().signInWithPopup(googleProvider).then((result,error)=>{\n   if(error){\n     console.log(\"unable to sign in with google\");\n    }\n   else{\n     this.setState({redirect:true,data:result.user})\n   }}).catch((error)=>{\n        ToastDanger(error.message);\n     })\n}\n```", "```jsx\nprovider.setCustomParameters({\n 'login_hint': 'admin'\n});\n```", "```jsx\nif (error.code === 'auth/account-exists-with-different-credential') {\n // Step 2.\n var pendingCred = error.credential;\n // The provider account's email address.\n var email = error.email;\n // Get registered providers for this email.\n firebaseApp.auth().fetchProvidersForEmail(email).then(function(providers) {\n // Step 3.\n // If the user has several providers,\n // the first provider in the list will be the \"recommended\" provider to use.\n if (providers[0] === 'password') {\n // Asks the user his password.\n // In real scenario, you should handle this asynchronously.\n var password = promptUserForPassword(); // TODO: implement promptUserForPassword to open the dialog to get the user entered password.\n firebaseApp.auth().signInWithEmailAndPassword(email, password).then(function(user) {\n // Step 4.\n return user.link(pendingCred);\n }).then(function() {\n // Google account successfully linked to the existing Firebase user.\n });\n }\n })}\n```", "```jsx\n componentWillMount() {\n   this.removeAuthListener = firebase.auth().onAuthStateChanged((user) \n   =>{\n    if(user){\n     console.log(\"App user data\",user);\n     this.setState({\n       authenticated:true,\n       data:user.providerData\n     })\n  }\n else{\n   this.setState({\n     authenticated:false,\n     data:''\n })}\n })}\n```", "```jsx\n componentWillUnmount(){\n   this.removeAuthListener();\n }\n```", "```jsx\n<Route path=\"/\" render={() => (<Home userInfo = {this.state.data} />)} />\n```", "```jsx\nrender() {\n var userPhoto = {width:\"80px\",height:\"80px\",margintop:\"10px\"}; \n return (\n <div>\n {\n this.props.userInfo.map((profile)=> {\n return (\n <React.Fragment key={profile.uid}>\n <h2>{ profile.displayName } - Welcome to Helpdesk Application</h2>\n <div style={userPhoto}>\n <img src = { profile.photoURL } alt=\"user\"/>\n <br/>\n <span><b>Eamil:</b></span> {profile.email }\n </div>\n </React.Fragment>\n )})\n }\n </div>\n )}\n```", "```jsx\nconstructor() {\n super();\n  this.state = {\n    redirect: false,\n    data:''\n  }\n }\n componentWillMount(){\n   firebaseApp.auth().signOut().then((user)=>{\n     this.setState({\n      redirect:true,\n      data: null\n   })\n })}\n render() {\n if(this.state.redirect === true){\n return <Redirect to = \"/\" />\n }\n return (\n <div style={{textAlign:\"center\",position:\"absolute\",top:\"25%\",left:\"50%\"}}>\n <h4>Logging out...</h4>\n </div>);\n }\n```", "```jsx\nfirebaseApp.auth().setPersistence('session')\n .then(function() {\n // Auth state is now persisted in the current\n // session only. If user directly close the browser window without doing signout then it clear the existing state\n // ...\n // New sign-in will be persisted with session.\n return firebase.auth().signInWithEmailAndPassword(email, password);\n })\n .catch(function(error) {\n // Handle Errors here.\n });\n```", "```jsx\nconst email = this.emailField.value\nconst password = this.passwordField.value;\nfirebaseApp.auth().fetchProvidersForEmail(email).then((provider)=>{\n if(provider.length === 0){\n //Creating a new user\n return firebaseApp.auth().createUserWithEmailAndPassword(email,password);\n } else if(provider.indexOf(\"password\") === -1){\n this.loginForm.reset();\n ToastDanger('Wrong Password. Please try again!!')\n } else {\n //signin user\n return firebaseApp.auth().signInWithEmailAndPassword(email,password);\n }}).then((user) => {\n if(user && user.email){\n this.loginForm.reset();\n this.setState({redirect: true});\n }})\n .catch((error)=>{\n console.log(error);\n ToastDanger(error.message);\n })\n```", "```jsx\nvar currentUser = firebase.auth().currentUser;\ncurrentUser.updateProfile({\n displayName: \u201cHarmeet Singh\u201d,\n photoURL: \u201chttp://www.liferayui.com/g/200/300\"\n});\ncurrentUser.sendPasswordResetEmail(\u201charmeetsingh090@gmail.com\u201d); // Sends a temporary password\n// Re-authentication is necessary for email, password and delete functions\nvar credential = firebase.auth.EmailAuthProvider.credential(email, password);\ncurrentUser.reauthenticate(credential);\ncurrentUser.updateEmail(\u201charmeetsingh090@gmail.com\u201d);\ncurrentUser.updatePassword(\u201cD@#Log123\u201d);\ncurrentUser.delete();\n```", "```jsx\nclass Logout extends Component {\n constructor(props) {\n super();\n  this.state = {\n    redirect: props.authenticated,\n    data:''\n }}\n componentWillMount(){\n  firebaseApp.auth().signOut().then((user)=>{\n    this.setState({\n       redirect:true,\n       data: null\n   })\n })}\n render() {\n if(this.state.redirect === true){\n    return <Redirect to = \"/\" />\n }\n return (\n <div style={{textAlign:\"center\",position:\"absolute\",top:\"25%\",left:\"50%\"}}>\n   <h4>Logging out...</h4>\n </div>\n );\n }}\n```"]