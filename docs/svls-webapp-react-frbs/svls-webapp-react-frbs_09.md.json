["```jsx\n{\n \"tickets\": {\n \"-L4L1BLYiU-UQdE6lKA_\": {\n    \"comments\": \"Need extra 4GB RAM in my system\"\n    \"date\": \"Fri Feb 02 2018 15:51:10 GMT+0530 (India Standa...\"\n    \"department\": \"IT\"\n    \"email\": \"harmeet_15_1991@yahoo.com\"\n    \"issueType\": \"Hardware Request\"\n    \"status\": \"progress\"\n },\n \"-L4K01hUSDzPXTIXY9oU\": {\n \"comments\": \"Need extra 4GB RAM in my system\"\n \"date\": \"Fri Feb 02 2018 15:51:10 GMT+0530 (India Standa...\"\n \"department\": \"IT\"\n \"email\": \"harmeet_15_1991@yahoo.com\"\n \"issueType\": \"Hardware Request\"\n \"status\": \"progress\"\n     }\n  }\n}\n```", "```jsx\n{\n \"tickets\": {\n \"0\": {\n    \"comments\": \"Need extra 4GB RAM in my system\"\n    \"date\": \"Fri Feb 02 2018 15:51:10 GMT+0530 (India Standa...\"\n    \"department\": \"IT\"\n    \"email\": \"harmeet_15_1991@yahoo.com\"\n    \"issueType\": \"Hardware Request\"\n    \"status\": \"progress\"\n },\n \"1\": {\n \"comments\": \"Need extra 4GB RAM in my system\"\n \"date\": \"Fri Feb 02 2018 15:51:10 GMT+0530 (India Standa...\"\n \"department\": \"IT\"\n \"email\": \"harmeet_15_1991@yahoo.com\"\n \"issueType\": \"Hardware Request\"\n \"status\": \"progress\"\n     }\n  }\n}\n```", "```jsx\n{\n // a poorly nested data architecture, because\n // iterating over \"products\" to get a list of names requires\n // potentially downloading hundreds of products of mobile\n \"products\": {\n \"electronics\": {\n \"name\": \"mobile\",\n \"types\": {\n \"samsung\": { \"name\": \"Samsung S7 Edge (Black Pearl, 128 GB)\", \"description\": \"foo\" },\n \"apple\": { ... },\n // a very long list of mobile products\n }\n }\n }\n }\n```", "```jsx\n{\n      // products contains only meta info about each product\n      // stored under the product's unique ID\n      \"products\": {\n        \"electronics\": {\n          \"name\": \"mobile\"\n        },\n        \"home_furniture\": { ... },\n        \"sports\": { ... }\n      },\n      // product types are easily accessible (or restricted)\n      // we also store these by product Id\n      \"types\": {\n          \"mobile\":{\n              \"name\":\"samsung\"\n           },\n      \"laptop\": {...},\n      \"computers\":{...},\n      \"television\":{...}\n      \"home_furniture\": { ... },\n      \"sports\": { ... }\n      },\n      // details are separate from data we may want to iterate quickly\n      // but still easily paginated and queried, and organized by \n         product ID\n      \"detail\": {\n        \"electronics\": {\n          \"samsung\": { \"name\": \"Samsung S7 Edge (Black Pearl, 128 GB)\", \n          \"description\": \"foo\" },\n          \"apple\": { ... },\n          \"mi\": { ... }\n        },\n        \"home_furniture\": { ... },\n        \"sports\": { ... }\n      }\n    }\n```", "```jsx\n{\n \"rules\": {\n \"users\": {\n \"$user_id\": {\n \".read\": \"$user_id === auth.uid && auth.token.auth_time > (root.child('metadata').child(auth.uid).child('revokeTime').val() || 0)\",\n \".write\": \"$user_id === auth.uid && auth.token.auth_time > (root.child('metadata').child(auth.uid).child('revokeTime').val() || 0)\"\n }\n }\n }\n}\n```", "```jsx\nvar presenceRef = firebase.database().ref(\"disconnectmessage\");\n// Write the string when client loses connection\npresenceRef.onDisconnect().set(\"I disconnected!\");\n```", "```jsx\npresenceRef.onDisconnect().remove(function(err) {\n if (err) {\n console.error('onDisconnect event not attached properly', err);\n }\n});\n```", "```jsx\nvar connectedRef = firebase.database().ref(\".info/connected\");\nconnectedRef.on(\"value\", function(snap) {\n if (snap.val() === true) {\n alert(\"connected\");\n } else {\n alert(\"not connected\");\n }\n});\n```", "```jsx\nfirebase target:apply database main my-db-1 my-db-2\nfirebase target:apply database other my-other-db-3\nUpdate firebase.json with the deploy targets:\n{\n\"database\": [\n{\"target\": \"main\", \"rules\", \"foo.rules.json\"},\n{\"target\": \"other\", \"rules\": \"bar.rules.json\"}\n]\n}\n```", "```jsx\nfirebase deploy \n```", "```jsx\n// Get the default database instance for an app\nvar database = firebase.database();\n// Get a secondary database instance by URL\nvar database = firebase.database('https://reactfirebaseapp-9897.firebaseio.com');\n```", "```jsx\nshouldComponentUpdate(nexProps) { \n // instead of object deep comparsion\n return this.props.immutableFoo !== nexProps.immutableFoo\n}\n```", "```jsx\nreturn { \n  ...state,\n  foo\n}\nreturn arr1.concat(arr2) \n```", "```jsx\nimport { fromJS } from 'immutable'\nconst state = fromJS({ bar: 'biz' }) \nconst newState = foo.set('bar', 'baz') \n```", "```jsx\nrequire.ensure([], () => { \n  const Profile = require('./Profile.js')\n  this.setState({\n    currentComponent: Profile\n  })\n})\n```", "```jsx\nMyComponent.propTypes = { \n  isLoading: PropTypes.bool.isRequired,\n  items: ImmutablePropTypes.listOf(\n    ImmutablePropTypes.contains({\n      name: PropTypes.string.isRequired,\n    })\n  ).isRequired\n}\n```", "```jsx\nPassData({ foo: 'bar' })(MyComponent) \n```", "```jsx\nrequireAuth({ role: 'admin' })(MyComponent) \n```"]