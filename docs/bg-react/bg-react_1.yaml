- en: Introducing React and UI Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is definitely one of the most talked about libraries on the web. It has
    become as popular as jQuery was in its prime, and more and more developers choose
    it to build the user interface of their web applications. Why has it become so
    popular? Why is this JavaScript library so innovative compared to others?
  prefs: []
  type: TYPE_NORMAL
- en: We will try to provide answers to these questions in this book by showing what the
    library offers, and by using it to build efficient web user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will introduce React and we will start building the basic infrastructure
    of a React-based application. Then, we will analyze how to design a user interface
    so that it can be easily mapped to React components, exploiting the best from
    React's internal architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Describe what React is and where it fits in the development of your applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up the infrastructure of a React-based application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design the UI of your application, optimizing it for use in React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is React?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To put it simply, React is a JavaScript library for building composable user interfaces.
    This means that we can build a user interface by composing items called **components**.
    A component is an element that contributes to building a user interface. It could
    be a textbox, a button, a whole form, a group of other components, and so on.
    Even the entire application's user interface is a component. So, React encourages
    the creation of components to build a user interface; it's even better if these
    components are reusable.
  prefs: []
  type: TYPE_NORMAL
- en: React components have the ability to present data that changes over time, and
    the visualization of that changing data is automatic when we follow a few guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the library deals with user interfaces, you may wonder which presentational design
    patterns React was inspired by: **Model-View-Controller**, **Model-View-Presenter**,
    **Model-View-ViewModel**, or something else. React is not bound to a specific
    presentational pattern. React implements the *View* part of the most common patterns,
    leaving developers free to choose the best approach to implement the model, the
    presenter, and everything else they need to build their application. This aspect
    is important, since it allows us to classify it as a library, not as a framework; therefore,
    comparisons with frameworks such as Angular may throw up some inconsistencies.'
  prefs: []
  type: TYPE_NORMAL
- en: How to Set up a React-Based Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is a JavaScript library, so we should be able to make a reference to it
    through a `<script>` tag in our HTML page and start writing our web application.
    However, this approach would prevent us from exploiting some features that are
    provided by a modern JavaScript development environment—features that make our
    lives easier. For example, we wouldn't be able to use recent features from ECMAScript
    2015+, such as classes, modules, arrow functions, `let` and `const` statements,
    and so on. Or, we could use those features, but only recent browsers would support
    them.
  prefs: []
  type: TYPE_NORMAL
- en: '**The relationship of ECMAScript with JavaScript**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the latest ECMAScript features requires a true development environment, allowing
    us to transpile our code into ECMAScript 5 version JavaScript code, so that even
    older browsers will be able to run our application. Setting up a modern JavaScript
    development environment requires the installation and configuration of a few tools:
    a transpiler, a syntax checker, a module bundler, a task runner, and so on. Learning
    to use these tools properly requires a lot of time, even before starting to write
    a single line of code.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing create-react-app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fortunately, we can use `create-react-app`, a **command-line interface** (**CLI**) tool
    that allows us to set up a React-based application without needing to configure
    any of the aforementioned tools. It is based on Node.js and provides commands
    to set up and modify a React application in an immediate way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install `create-react-app`, you need Node.js installed on your
    machine. You can install the CLI by typing the following command in a console
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After installation, you can verify whether it is properly installed by typing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If all is OK, the installed version of `create-react-app` will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Your First React Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the development environment is installed, let''s create our first
    React application. We can do this by typing the following command in a console
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command tells `create-react-app` to set up all of the prerequisites for
    a React-based application named `hello-react`. The creation process may take several minutes,
    since it has to download the npm packages needed for the project.
  prefs: []
  type: TYPE_NORMAL
- en: npm is the standard package manager of the Node.js environment. When the process
    ends, you will find a list of the available commands that you can run to manage
    the project on the screen. We will return to this later. The result of the project
    creation will be a folder named `hello-react`, inside of which you will find the
    items composing a dummy—but working—React-based application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Creating an Application with create-react-app'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Scenario**'
  prefs: []
  type: TYPE_NORMAL
- en: We need to set up a development environment in order to create a product catalog application
    built with React.
  prefs: []
  type: TYPE_NORMAL
- en: '**Aim**'
  prefs: []
  type: TYPE_NORMAL
- en: The aim of the activity is to start becoming familiar with `create-react-app`
    and the content it creates.
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: Use `create-react-app` to create the development environment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the name `my-shop` to the sample application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: There is no formal solution. You should focus on the content created by `create-react-app`,
    as we are going to analyze it in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Generated Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at the files generated by `create-react-app`, so that we
    can get an understanding of the structure of a React-based application. We will
    find these files and folders inside of the `HELLO-REACT` folder as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b24741a3-0f38-44cd-a832-5fd756aa5339.png)'
  prefs: []
  type: TYPE_IMG
- en: In the root folder, we can see a `README.md` file, the `package.json` file,
    and the `.gitignore` file.
  prefs: []
  type: TYPE_NORMAL
- en: The `README` document contains references to all you need to start building
    a React-based application. It is written in Markdown format, and you can integrate
    or overwrite it with your own documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Markdown is a simple markup language, often used to create technical documentation
    for software libraries. It requires a simple text editor, and it is possible to
    convert a Markdown document into HTML.
  prefs: []
  type: TYPE_NORMAL
- en: The `package.json` file contains information about the project, such as the
    name, the version, and so on, and references to all the npm packages used by the
    current project. This is a Node.js asset that allows you to download the required
    packages when copying the project to another machine. It also contains the definitions
    of scripts that allow us to manage the project itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of `package.json` file content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the file's content is a JSON object, with a few easy to recognize properties.
    In particular, we can identify the project's name, the version, and package dependencies.
    Apart from the name and version properties, usually, you don't need to manually
    change these settings.
  prefs: []
  type: TYPE_NORMAL
- en: The `.gitignore` file is a hidden file in Unix-based systems, and it allows
    us to track which file(s) to ignore when using Git as a version control system. The
    `create-react-app` tool added this file because nowadays, it is essential to have
    a project under version control. It suggests Git, since it is one of the most popular
    version control systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `public` folder contains the static parts of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`favicon`: This is the icon shown in the browser''s address bar and is used
    for bookmarks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`: This is the HTML page containing the reference to our React code
    and providing a context to React rendering'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`manifest.json`: This is a configuration file containing metadata according to
    the **Progressive Web Apps** (**PWA**) criteria'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In particular, the `index.html` file is the starting point of our application.
    Let''s take a look at it so that we can understand what''s special about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, it is a standard HTML page; however, a few things should be
    noted. First of all, we see a link to the `manifest.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This manifest contains metadata for configuring our app as a PWA.
  prefs: []
  type: TYPE_NORMAL
- en: Progressive web apps are web applications that work for every browser and every
    platform, even offline. Their basic tenet is responsiveness and progressive enhancement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second thing we notice is the `%PUBLIC_URL%` placeholder in both link references:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This placeholder will be replaced with the actual URL of the `public` folder
    during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: The body of the HTML page contains an empty `div` with a root identifier. This
    is an important item for the correct setup of our React application, as we will
    soon see. Apart from the `<noscript>` tag, we do not see any other element in
    the body. However, we need a binding between the HTML page and the JavaScript.
    The build process will be responsible for adding the required scripts to the body.
  prefs: []
  type: TYPE_NORMAL
- en: We can add any other required items to the HTML page, such as meta tags, web
    fonts, and so on. However, remember that files referenced inside the HTML markup
    should be put in the `public` folder. The `node_modules` folder contains the npm
    packages used by the project. Usually, you don't need to directly manage these
    files.
  prefs: []
  type: TYPE_NORMAL
- en: The most important folder for developing our application is the `src` folder.
    It contains the basic files, with the code that we can modify for our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In particular, we will find the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.js`: Contains the starting point of our application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.css`: Stores the base styling for our application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`App.js`: Contains the definition of the main component of the sample application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`App.css`: Contains the styling of the `App` component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logo.svg`: This is the React logo'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`App.test.js`: Stores the basic unit test involving the `App` component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`registerServiceWorker.js`: Contains the code to register the service worker
    in order to allow offline behavior, as per the PWA requirements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's analyze the content of a couple of these files, since their code is fundamental
    to understanding how the startup of a React application works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the `index.js` file. Its content is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It is an ECMAScript 2015 module, importing other modules. In particular, it
    imports the `React` and `ReactDOM` objects from the `react` and `react-dom` modules, respectively.
    Both modules are part of the React library and are stored inside the `node_modules`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: The `react` module provides functionality for component creation and state management.
    The `react-dom` module is the glue between React components and the HTML DOM.
    The React library has been split into two modules in order to separate the component
    management from the actual rendering. This separation may be useful when we want
    to target a rendering platform that is not the web; for example, if we want to
    target native mobile rendering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other modules are imported from the same folder as the `index.js` file. In
    particular, we import the `App` component from the `App` module. The `App` component
    is used by the `render()` method of the `ReactDOM` object in order to bind it
    to the `div` element in the HTML page. This magic is performed by the following
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: For the moment, let's ignore the syntax used to render the `App` component.
    This will be covered in the next chapter. The meaning of this statement is to
    associate the React `App` component defined inside the `App` module with the HTML
    element identified by the `root` ID.
  prefs: []
  type: TYPE_NORMAL
- en: The `registerServiceWorker()` function import and invocation enables the support for
    offline behavior, in line with the PWA specification, while the import of `index.css`
    makes the CSS styling available to the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `App.js` file contains the definition of the React component representing
    the application. Its content looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a quick look at the code, since it will be covered in detail in the
    next chapter. For the moment, we only want to get a very basic idea of how a React
    component is defined. Here, we see a module importing a few items from other modules,
    defining the `App` class by inheriting from the `Component` class and exporting
    the `App` class itself as a default export. That's all, for the moment. We will
    cover this code in depth in the next chapter, understanding its meaning in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The create-react-app Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `create-react-app` CLI provides a few commands to manage our React project. These
    commands appear in the form `npm <command>`, since they are based on the npm.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer to use YARN as a package manager, you should replace `yarn` wherever
    you find `npm`.
  prefs: []
  type: TYPE_NORMAL
- en: The npm start Command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first command we will cover is `npm start`. This command starts a development web
    server accepting requests at `http://localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, after launching this command, we can open a browser and see the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/576f13fd-abeb-46d3-a45f-dfacde3d733b.png)'
  prefs: []
  type: TYPE_IMG
- en: The development web server has a hot reloading system that allows us to change
    the code of our application and get the page refreshed in the browser after saving
    the file.
  prefs: []
  type: TYPE_NORMAL
- en: Changing File Content and Viewing the Result
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This following steps show how changing the content of a file causes the application
    to reload in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a console window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `hello-react` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `npm start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch a browser and go to `http://localhost:3000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch a text editor and open the `App.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search for the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the code mentioned in step 6 with the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the browser content. Now it should display the new text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Activity: Starting and Changing the Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Scenario**'
  prefs: []
  type: TYPE_NORMAL
- en: We want to change the title of the application that was created in the previous activity.
  prefs: []
  type: TYPE_NORMAL
- en: '**Aim**'
  prefs: []
  type: TYPE_NORMAL
- en: The aim of the activity is to become familiar with launching an application
    and appreciating the hot reloading feature.
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: Start the application so that you can see it in a browser
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the `App.js` file and set the title to `My Shop`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: There is no formal solution. You should focus on getting the title correctly
    changed and the application running.
  prefs: []
  type: TYPE_NORMAL
- en: The npm test Command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`create-react-app` promotes the use of unit tests by generating a sample unit
    test file, as we have already seen, and by providing a set of tools to run such
    tests.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These tools are based on **Jest**, and we can run the tests written within
    our application by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will start running our test and will show the results, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6214f136-1247-4f58-ae30-447792398d06.png)'
  prefs: []
  type: TYPE_IMG
- en: The npm run build Command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we are ready to move our application into the production environment,
    we need the artifacts to publish. We can produce these artifacts by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The result of running this command is a new `BUILD` folder where we will find
    all of the files that we need to move into a production environment. The command
    carries out some processing on the files of our development environment. Put simply,
    it translates all of the ES2015 code we wrote into ES5 compatible code, so that
    it is also available for older browsers. This process is called **transpilation**.
    In addition, it reduces the size of the code itself, allowing for faster downloading
    over the network. This process is called **minification**. Finally, it takes the
    files in our development environment and combines them into a few files, called
    bundles, in order to decrease network requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the content of the `BUILD` folder of the sample
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/751f24bf-3ab9-4bde-aa22-52c5c896fc43.png)'
  prefs: []
  type: TYPE_IMG
- en: To publish the production build of our application, we can just copy the content
    of the `BUILD` folder into the production server's folder.
  prefs: []
  type: TYPE_NORMAL
- en: The result of the production build assumes that the artifact will be published
    into the web server root, that is, at a location where the application will be
    accessible through a URL such as `http://www.myapplication.com`.
  prefs: []
  type: TYPE_NORMAL
- en: If we need to publish the application in a root's subfolder, that is, at a location
    where the application will be accessible through a URL such as `http://www.myapplication.com/app`,
    we need to make a slight change to the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we need to add a `homepage` key to the configuration JSON with
    the URL as its value, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"homepage": "http://www.myapplication.com/app"`.'
  prefs: []
  type: TYPE_NORMAL
- en: The npm run eject Command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last command we will cover is the `eject` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We can use this command when we are confident in using the tools underlying `create-react-app`
    and we need to customize the environment configuration. This command takes our
    application out of the CLI context and gives us the power and responsibility to
    manage it.
  prefs: []
  type: TYPE_NORMAL
- en: This is a one-way process. If we leave the `create-react-app` context for our
    application, we cannot go back.
  prefs: []
  type: TYPE_NORMAL
- en: How to Design a UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are going to see how we can design our application so that it fits well
    when implemented with React.
  prefs: []
  type: TYPE_NORMAL
- en: Everything Is a Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main concept introduced by React in user interface design and implementation is
    the component concept. A user interface is an aggregate of components, and the whole
    React application is an aggregate of components. We will now see in more detail
    what components are from a design point of view.
  prefs: []
  type: TYPE_NORMAL
- en: From a design point of view, we can say that a component is a part of the user interface,
    having a specific role. A hierarchy of components is often called a component
    tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a form in a web page. It can be treated as a component, since it has
    a specific role: to collect data and send it to the server. Also, a textbox inside
    the form can be considered a component. It has a specific role: to collect a single
    piece of data that will be sent to the server. So, a component may contain other
    components. And this is what usually happens: a user interface is a hierarchy
    of components, where some components contain other components.'
  prefs: []
  type: TYPE_NORMAL
- en: Keep this concept in mind, since it will be useful to implement efficient and
    reusable user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Decompose a User Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To better understand how to design a user interface and how to create components to
    implement them, we will try to decompose a well-known web user interface—the YouTube
    main page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e9867a5a-8ca0-4c86-9b7e-73501a8bde50.png)'
  prefs: []
  type: TYPE_IMG
- en: We can detect several items on this page, each having a specific role, starting
    with the page itself, whose role is to allow the user to interact with the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we consider the header, the left sidebar, and the main area, all of these
    items are components of the page. You can see them highlighted in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/094ad032-347c-4c84-9cfd-c33f4ce932f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Of course, we can go ahead and detect other components. For example, we can
    consider each video preview box in the main area as a component. You can see them
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/fbd31514-b679-4314-9c01-bd23302a7d35.png)'
  prefs: []
  type: TYPE_IMG
- en: This decomposition process allows us to focus on the specific role of each item
    in an interface, so that we can try to isolate each functionality and create reusable components,
    that is, components with just the dependencies that really matter.
  prefs: []
  type: TYPE_NORMAL
- en: Container and Presentational Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can classify the components in a user interface into container and presentational components.
  prefs: []
  type: TYPE_NORMAL
- en: The container components are components that do not have a relevant visual effect. Their
    main role is to group other components, that is, *contain* other components. For example,
    a form is usually a container component, since its main role is to contain other
    components, such as textboxes, labels, buttons, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The presentational components are components that display data in some graphical form.
    A textbox, a date picker, and a toolbar are examples of presentational components.
  prefs: []
  type: TYPE_NORMAL
- en: The distinction between container and presentational components is very important in
    order to create efficient user interfaces in React. We will exploit this distinction later,
    when we learn to manage the components' state and to propagate data through the
    components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Detecting Components in a Web User Interface'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Scenario**'
  prefs: []
  type: TYPE_NORMAL
- en: We need to convert the Wikipedia website's user interface ([https://en.wikipedia.org](https://en.wikipedia.org))
    into React components.
  prefs: []
  type: TYPE_NORMAL
- en: '**Aim**'
  prefs: []
  type: TYPE_NORMAL
- en: The aim of the activity is to address the design process when implementing React-based user
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: Analyze the page's current structure and detect the items you can implement
    as components
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Indicate which would be container and which would be presentational components
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume that the following is the current Wikipedia home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3efcae52-04c7-429a-92d7-fd347d736c11.png)'
  prefs: []
  type: TYPE_IMG
- en: A possible solution could be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can detect the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: The *home page* component contains the *left sidebar* component, the *header* component,
    and the *main area* component. All of these components are container components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *left-side* component contains the *logo* component (presentational) and
    a list of *section* components (presentational).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *header* component contains a list of *link* components (presentational)
    to general pieces of functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *main area* component contains a list of *tab* components (container) and
    a *search* component (presentational).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main *tab* component contains a *banner* component (presentational), a *topic
    index* component (presentational), and a list of *block* components (presentational).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we started to explore the React world. In particular, we:'
  prefs: []
  type: TYPE_NORMAL
- en: Established that React is a user interface library, used to implement the View part
    of various MV* design patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduced the `create-react-app` tool, which helps us to set up a development environment
    to build React-based applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explored the items composing a typical React-based application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzed the approach to designing user interfaces that best fits in the React world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will discover how to create React components to build
    user interfaces for our application.
  prefs: []
  type: TYPE_NORMAL
