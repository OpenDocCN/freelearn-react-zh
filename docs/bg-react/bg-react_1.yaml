- en: Introducing React and UI Design
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍React和用户界面设计
- en: React is definitely one of the most talked about libraries on the web. It has
    become as popular as jQuery was in its prime, and more and more developers choose
    it to build the user interface of their web applications. Why has it become so
    popular? Why is this JavaScript library so innovative compared to others?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React无疑是网络上讨论最多的库之一。它已经变得像jQuery在其鼎盛时期一样流行，越来越多的开发者选择它来构建他们的网页应用程序的用户界面。为什么它变得如此流行？为什么这个JavaScript库与其他库相比如此创新？
- en: We will try to provide answers to these questions in this book by showing what the
    library offers, and by using it to build efficient web user interfaces.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中尝试回答这些问题，展示该库提供的内容，并使用它来构建高效的网页用户界面。
- en: In this chapter, we will introduce React and we will start building the basic infrastructure
    of a React-based application. Then, we will analyze how to design a user interface
    so that it can be easily mapped to React components, exploiting the best from
    React's internal architecture.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍React，并开始构建基于React的应用程序的基本基础设施。然后，我们将分析如何设计用户界面，以便它可以轻松映射到React组件，充分利用React的内部架构。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将能够：
- en: Describe what React is and where it fits in the development of your applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述React是什么以及它在你的应用程序开发中的作用
- en: Set up the infrastructure of a React-based application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搭建基于React的应用程序的基础设施
- en: Design the UI of your application, optimizing it for use in React
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计你的应用程序的用户界面，并优化其在React中的使用
- en: What is React?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是React？
- en: To put it simply, React is a JavaScript library for building composable user interfaces.
    This means that we can build a user interface by composing items called **components**.
    A component is an element that contributes to building a user interface. It could
    be a textbox, a button, a whole form, a group of other components, and so on.
    Even the entire application's user interface is a component. So, React encourages
    the creation of components to build a user interface; it's even better if these
    components are reusable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，React是一个用于构建可组合用户界面的JavaScript库。这意味着我们可以通过组合称为**组件**的项来构建用户界面。组件是构建用户界面的元素。它可以是一个文本框、一个按钮、一个完整的表单、一组其他组件，等等。甚至整个应用程序的用户界面也是一个组件。因此，React鼓励创建组件来构建用户界面；如果这些组件是可重用的，那就更好了。
- en: React components have the ability to present data that changes over time, and
    the visualization of that changing data is automatic when we follow a few guidelines.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: React组件有能力展示随时间变化，并且当我们遵循一些指导原则时，该变化数据的可视化是自动的。
- en: 'Since the library deals with user interfaces, you may wonder which presentational design
    patterns React was inspired by: **Model-View-Controller**, **Model-View-Presenter**,
    **Model-View-ViewModel**, or something else. React is not bound to a specific
    presentational pattern. React implements the *View* part of the most common patterns,
    leaving developers free to choose the best approach to implement the model, the
    presenter, and everything else they need to build their application. This aspect
    is important, since it allows us to classify it as a library, not as a framework; therefore,
    comparisons with frameworks such as Angular may throw up some inconsistencies.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该库涉及用户界面，你可能会好奇React受到了哪些展示设计模式的影响：**模型-视图-控制器**、**模型-视图-展示器**、**模型-视图-视图模型**，还是其他。React并不局限于特定的展示模式。React实现了最常见模式中的*视图*部分，让开发者自由选择最佳方法来实现模型、展示器以及构建应用程序所需的其他一切。这一点很重要，因为它使我们能够将其归类为库，而不是框架；因此，与Angular等框架的比较可能会出现一些不一致之处。
- en: How to Set up a React-Based Application
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何搭建基于React的应用程序
- en: React is a JavaScript library, so we should be able to make a reference to it
    through a `<script>` tag in our HTML page and start writing our web application.
    However, this approach would prevent us from exploiting some features that are
    provided by a modern JavaScript development environment—features that make our
    lives easier. For example, we wouldn't be able to use recent features from ECMAScript
    2015+, such as classes, modules, arrow functions, `let` and `const` statements,
    and so on. Or, we could use those features, but only recent browsers would support
    them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: React是一个JavaScript库，因此我们应该能够通过HTML页面中的`<script>`标签引用它并开始编写我们的Web应用程序。然而，这种方法会阻止我们利用现代JavaScript开发环境提供的一些功能——这些功能使我们的生活更轻松。例如，我们将无法使用ECMAScript
    2015+的最新功能，如类、模块、箭头函数、`let`和`const`语句等。或者，我们可以使用这些功能，但只有最近的浏览器才会支持它们。
- en: '**The relationship of ECMAScript with JavaScript**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**ECMAScript与JavaScript的关系**'
- en: 'Using the latest ECMAScript features requires a true development environment, allowing
    us to transpile our code into ECMAScript 5 version JavaScript code, so that even
    older browsers will be able to run our application. Setting up a modern JavaScript
    development environment requires the installation and configuration of a few tools:
    a transpiler, a syntax checker, a module bundler, a task runner, and so on. Learning
    to use these tools properly requires a lot of time, even before starting to write
    a single line of code.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最新的ECMAScript功能需要一个真正的开发环境，允许我们将代码转换为ECMAScript 5版本的JavaScript代码，以便即使旧的浏览器也能够运行我们的应用程序。设置现代JavaScript开发环境需要安装和配置一些工具：一个转换器、一个语法检查器、一个模块捆绑器、一个任务运行器等。学习正确使用这些工具需要大量时间，甚至在开始编写一行代码之前。
- en: Installing create-react-app
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**安装create-react-app**'
- en: Fortunately, we can use `create-react-app`, a **command-line interface** (**CLI**) tool
    that allows us to set up a React-based application without needing to configure
    any of the aforementioned tools. It is based on Node.js and provides commands
    to set up and modify a React application in an immediate way.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以使用`create-react-app`，这是一个**命令行界面**（**CLI**）工具，它允许我们无需配置任何上述工具即可设置基于React的应用程序。它基于Node.js，并提供命令以即时方式设置和修改React应用程序。
- en: 'In order to install `create-react-app`, you need Node.js installed on your
    machine. You can install the CLI by typing the following command in a console
    window:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装`create-react-app`，您需要在您的机器上安装Node.js。您可以在控制台窗口中输入以下命令来安装CLI：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After installation, you can verify whether it is properly installed by typing
    the following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，您可以通过输入以下命令来验证是否已正确安装：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If all is OK, the installed version of `create-react-app` will be shown.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，将显示已安装的`create-react-app`版本。
- en: Creating Your First React Application
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**创建您的第一个React应用程序**'
- en: 'Now that the development environment is installed, let''s create our first
    React application. We can do this by typing the following command in a console
    window:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 既然开发环境已安装，让我们创建我们的第一个React应用程序。我们可以在控制台窗口中输入以下命令来执行此操作：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This command tells `create-react-app` to set up all of the prerequisites for
    a React-based application named `hello-react`. The creation process may take several minutes,
    since it has to download the npm packages needed for the project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令告诉`create-react-app`为名为`hello-react`的React应用程序设置所有先决条件。创建过程可能需要几分钟，因为它必须下载项目所需的npm包。
- en: npm is the standard package manager of the Node.js environment. When the process
    ends, you will find a list of the available commands that you can run to manage
    the project on the screen. We will return to this later. The result of the project
    creation will be a folder named `hello-react`, inside of which you will find the
    items composing a dummy—but working—React-based application.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: npm是Node.js环境的默认包管理器。当进程结束时，您将在屏幕上找到可用于管理项目的可用命令列表。我们稍后会回到这一点。项目创建的结果将是一个名为`hello-react`的文件夹，在其中您将找到构成一个虚拟的——但可工作的——基于React的应用程序的项。
- en: 'Activity: Creating an Application with create-react-app'
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**活动：使用create-react-app创建应用程序**'
- en: '**Scenario**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**'
- en: We need to set up a development environment in order to create a product catalog application
    built with React.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置一个开发环境，以便创建一个使用React构建的产品目录应用程序。
- en: '**Aim**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**目的**'
- en: The aim of the activity is to start becoming familiar with `create-react-app`
    and the content it creates.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 活动的目的是开始熟悉`create-react-app`及其创建的内容。
- en: '**Steps for Completion**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: Use `create-react-app` to create the development environment
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `create-react-app` 创建开发环境
- en: Give the name `my-shop` to the sample application
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将示例应用程序命名为 `my-shop`
- en: '**Solution**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: There is no formal solution. You should focus on the content created by `create-react-app`,
    as we are going to analyze it in the following sections.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 没有正式的解决方案。你应该专注于由 `create-react-app` 创建的内容，因为接下来我们将在以下部分中分析它。
- en: Exploring the Generated Content
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索生成的内容
- en: 'Let''s take a look at the files generated by `create-react-app`, so that we
    can get an understanding of the structure of a React-based application. We will
    find these files and folders inside of the `HELLO-REACT` folder as shown in the
    following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 `create-react-app` 生成的文件，以便我们能够理解基于 React 的应用程序的结构。我们将在 `HELLO-REACT`
    文件夹中找到这些文件和文件夹，如下面的截图所示：
- en: '![](Images/b24741a3-0f38-44cd-a832-5fd756aa5339.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b24741a3-0f38-44cd-a832-5fd756aa5339.png)'
- en: In the root folder, we can see a `README.md` file, the `package.json` file,
    and the `.gitignore` file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在根文件夹中，我们可以看到一个 `README.md` 文件、`package.json` 文件和 `.gitignore` 文件。
- en: The `README` document contains references to all you need to start building
    a React-based application. It is written in Markdown format, and you can integrate
    or overwrite it with your own documentation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`README` 文档包含开始构建基于 React 的应用程序所需的所有引用。它是以 Markdown 格式编写的，你可以将其与自己的文档集成或覆盖。'
- en: Markdown is a simple markup language, often used to create technical documentation
    for software libraries. It requires a simple text editor, and it is possible to
    convert a Markdown document into HTML.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown 是一种简单的标记语言，常用于创建软件库的技术文档。它只需要一个简单的文本编辑器，并且可以将 Markdown 文档转换为 HTML。
- en: The `package.json` file contains information about the project, such as the
    name, the version, and so on, and references to all the npm packages used by the
    current project. This is a Node.js asset that allows you to download the required
    packages when copying the project to another machine. It also contains the definitions
    of scripts that allow us to manage the project itself.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件包含有关项目的信息，如名称、版本等，以及对当前项目使用的所有 npm 包的引用。这是一个 Node.js 资源，允许你在将项目复制到另一台机器时下载所需的包。它还包含允许我们管理项目本身的脚本定义。'
- en: 'The following is an example of `package.json` file content:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `package.json` 文件内容的示例：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we can see, the file's content is a JSON object, with a few easy to recognize properties.
    In particular, we can identify the project's name, the version, and package dependencies.
    Apart from the name and version properties, usually, you don't need to manually
    change these settings.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，文件内容是一个 JSON 对象，有几个易于识别的属性。特别是，我们可以识别项目的名称、版本和包依赖项。除了名称和版本属性外，通常你不需要手动更改这些设置。
- en: The `.gitignore` file is a hidden file in Unix-based systems, and it allows
    us to track which file(s) to ignore when using Git as a version control system. The
    `create-react-app` tool added this file because nowadays, it is essential to have
    a project under version control. It suggests Git, since it is one of the most popular
    version control systems.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`.gitignore` 文件是 Unix 系统中的隐藏文件，它允许我们跟踪在使用 Git 作为版本控制系统时要忽略的文件。`create-react-app`
    工具添加了这个文件，因为现在，将项目置于版本控制之下是必不可少的。它建议使用 Git，因为它是目前最流行的版本控制系统之一。'
- en: 'The `public` folder contains the static parts of our application:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`public` 文件夹包含我们应用程序的静态部分：'
- en: '`favicon`: This is the icon shown in the browser''s address bar and is used
    for bookmarks'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`favicon`：这是在浏览器地址栏中显示的图标，用于书签'
- en: '`index.html`: This is the HTML page containing the reference to our React code
    and providing a context to React rendering'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`：这是包含对我们的 React 代码的引用并提供 React 渲染上下文的 HTML 页面'
- en: '`manifest.json`: This is a configuration file containing metadata according to
    the **Progressive Web Apps** (**PWA**) criteria'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manifest.json`：这是一个根据 **渐进式 Web 应用**（**PWA**）标准包含元数据的配置文件'
- en: 'In particular, the `index.html` file is the starting point of our application.
    Let''s take a look at it so that we can understand what''s special about it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，`index.html` 文件是我们应用程序的起点。让我们来看看它，以便我们能够理解它的特别之处：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As we can see, it is a standard HTML page; however, a few things should be
    noted. First of all, we see a link to the `manifest.json` file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，它是一个标准的 HTML 页面；然而，有几点需要注意。首先，我们看到一个指向 `manifest.json` 文件的链接：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This manifest contains metadata for configuring our app as a PWA.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个清单包含将我们的应用配置为 PWA 的元数据。
- en: Progressive web apps are web applications that work for every browser and every
    platform, even offline. Their basic tenet is responsiveness and progressive enhancement.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进式Web应用是适用于每个浏览器和平台的Web应用，甚至可以离线工作。它们的基本原则是响应性和渐进增强。
- en: 'The second thing we notice is the `%PUBLIC_URL%` placeholder in both link references:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到的第二件事是两个链接引用中都存在的`%PUBLIC_URL%`占位符。
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This placeholder will be replaced with the actual URL of the `public` folder
    during the build process.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个占位符将在构建过程中被`public`文件夹的实际URL替换。
- en: The body of the HTML page contains an empty `div` with a root identifier. This
    is an important item for the correct setup of our React application, as we will
    soon see. Apart from the `<noscript>` tag, we do not see any other element in
    the body. However, we need a binding between the HTML page and the JavaScript.
    The build process will be responsible for adding the required scripts to the body.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: HTML页面的主体包含一个带有根标识符的空`div`。这是我们React应用程序正确设置的一个重要项目，我们很快就会看到。除了`<noscript>`标签外，我们在主体中看不到其他元素。然而，我们需要在HTML页面和JavaScript之间建立绑定。构建过程将负责向主体添加所需的脚本。
- en: We can add any other required items to the HTML page, such as meta tags, web
    fonts, and so on. However, remember that files referenced inside the HTML markup
    should be put in the `public` folder. The `node_modules` folder contains the npm
    packages used by the project. Usually, you don't need to directly manage these
    files.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以向HTML页面添加任何其他必需的项目，例如元标签、网络字体等。但是，请记住，HTML标记中引用的文件应该放在`public`文件夹中。`node_modules`文件夹包含项目使用的npm包。通常，您不需要直接管理这些文件。
- en: The most important folder for developing our application is the `src` folder.
    It contains the basic files, with the code that we can modify for our purposes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 开发我们应用程序最重要的文件夹是`src`文件夹。它包含我们可以根据需要修改的基本文件和代码。
- en: 'In particular, we will find the following files:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，我们将找到以下文件：
- en: '`index.js`: Contains the starting point of our application'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.js`：包含我们应用程序的启动点。'
- en: '`index.css`: Stores the base styling for our application'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.css`：存储我们应用程序的基本样式。'
- en: '`App.js`: Contains the definition of the main component of the sample application'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.js`：包含示例应用程序的主要组件的定义。'
- en: '`App.css`: Contains the styling of the `App` component'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.css`：包含`App`组件的样式。'
- en: '`logo.svg`: This is the React logo'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logo.svg`：这是React的标志。'
- en: '`App.test.js`: Stores the basic unit test involving the `App` component'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.test.js`：存储涉及`App`组件的基本单元测试。'
- en: '`registerServiceWorker.js`: Contains the code to register the service worker
    in order to allow offline behavior, as per the PWA requirements'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`registerServiceWorker.js`：包含注册服务工作者的代码，以便允许离线行为，符合PWA的要求。'
- en: Let's analyze the content of a couple of these files, since their code is fundamental
    to understanding how the startup of a React application works.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下这些文件的内容，因为它们的代码对于理解React应用程序的启动方式至关重要。
- en: 'Let''s start with the `index.js` file. Its content is shown as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`index.js`文件开始。其内容如下所示：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It is an ECMAScript 2015 module, importing other modules. In particular, it
    imports the `React` and `ReactDOM` objects from the `react` and `react-dom` modules, respectively.
    Both modules are part of the React library and are stored inside the `node_modules`
    folder.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个ECMAScript 2015模块，导入其他模块。特别是，它从`react`和`react-dom`模块分别导入`React`和`ReactDOM`对象。这两个模块都是React库的一部分，存储在`node_modules`文件夹中。
- en: The `react` module provides functionality for component creation and state management.
    The `react-dom` module is the glue between React components and the HTML DOM.
    The React library has been split into two modules in order to separate the component
    management from the actual rendering. This separation may be useful when we want
    to target a rendering platform that is not the web; for example, if we want to
    target native mobile rendering.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`react`模块提供组件创建和状态管理的功能。`react-dom`模块是React组件和HTML DOM之间的粘合剂。React库被分为两个模块，以将组件管理与实际渲染分离。当我们想要针对的不是Web的渲染平台时，这种分离可能会有用；例如，如果我们想要针对原生移动渲染。'
- en: 'Other modules are imported from the same folder as the `index.js` file. In
    particular, we import the `App` component from the `App` module. The `App` component
    is used by the `render()` method of the `ReactDOM` object in order to bind it
    to the `div` element in the HTML page. This magic is performed by the following
    statement:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 其他模块从与`index.js`文件相同的文件夹中导入。特别是，我们从`App`模块导入`App`组件。`App`组件由`ReactDOM`对象的`render()`方法使用，以便将其绑定到HTML页面中的`div`元素。这个魔法是通过以下语句实现的：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For the moment, let's ignore the syntax used to render the `App` component.
    This will be covered in the next chapter. The meaning of this statement is to
    associate the React `App` component defined inside the `App` module with the HTML
    element identified by the `root` ID.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们先忽略用于渲染`App`组件的语法。这将在下一章中介绍。这个语句的含义是将`App`模块内部定义的React`App`组件与`root`ID标识的HTML元素关联起来。
- en: The `registerServiceWorker()` function import and invocation enables the support for
    offline behavior, in line with the PWA specification, while the import of `index.css`
    makes the CSS styling available to the application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`registerServiceWorker()`函数的导入和调用启用了离线行为支持，符合PWA规范，而`index.css`的导入使CSS样式对应用程序可用。'
- en: 'The `App.js` file contains the definition of the React component representing
    the application. Its content looks like the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`App.js`文件包含了代表应用程序的React组件的定义。其内容如下所示：'
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's take a quick look at the code, since it will be covered in detail in the
    next chapter. For the moment, we only want to get a very basic idea of how a React
    component is defined. Here, we see a module importing a few items from other modules,
    defining the `App` class by inheriting from the `Component` class and exporting
    the `App` class itself as a default export. That's all, for the moment. We will
    cover this code in depth in the next chapter, understanding its meaning in detail.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下代码，因为它将在下一章中详细介绍。目前，我们只想对React组件的定义有一个非常基本的了解。在这里，我们看到一个模块从其他模块导入一些项目，通过继承`Component`类定义`App`类，并将`App`类本身作为默认导出。目前就是这样。我们将在下一章中深入介绍这段代码，详细理解其含义。
- en: The create-react-app Commands
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: create-react-app命令
- en: The `create-react-app` CLI provides a few commands to manage our React project. These
    commands appear in the form `npm <command>`, since they are based on the npm.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`create-react-app` CLI提供了几个命令来管理我们的React项目。这些命令以`npm <command>`的形式出现，因为它们基于npm。'
- en: If you prefer to use YARN as a package manager, you should replace `yarn` wherever
    you find `npm`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢使用YARN作为包管理器，你应该在任何地方找到`npm`时替换为`yarn`。
- en: The npm start Command
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: npm start命令
- en: The first command we will cover is `npm start`. This command starts a development web
    server accepting requests at `http://localhost:3000`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍的第一个命令是`npm start`。这个命令启动一个开发Web服务器，接受`http://localhost:3000`的请求。
- en: 'So, after launching this command, we can open a browser and see the following
    result:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在启动这个命令后，我们可以在浏览器中看到以下结果：
- en: '![](Images/576f13fd-abeb-46d3-a45f-dfacde3d733b.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/576f13fd-abeb-46d3-a45f-dfacde3d733b.png)'
- en: The development web server has a hot reloading system that allows us to change
    the code of our application and get the page refreshed in the browser after saving
    the file.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 开发Web服务器有一个热重载系统，允许我们更改应用程序的代码并在保存文件后在浏览器中刷新页面。
- en: Changing File Content and Viewing the Result
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改文件内容并查看结果
- en: 'This following steps show how changing the content of a file causes the application
    to reload in the browser:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤展示了如何通过更改文件内容来使应用程序在浏览器中重新加载：
- en: Open a console window.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个控制台窗口。
- en: Go to the `hello-react` folder.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`hello-react`文件夹。
- en: Run `npm start`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`npm start`。
- en: Launch a browser and go to `http://localhost:3000`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动浏览器并访问`http://localhost:3000`。
- en: Launch a text editor and open the `App.js` file.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动文本编辑器并打开`App.js`文件。
- en: 'Search for the following line of code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找以下代码行：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Replace the code mentioned in step 6 with the following line of code:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第6步中提到的代码替换为以下代码行：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save the file.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Check the browser content. Now it should display the new text.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查浏览器内容。现在它应该显示新文本。
- en: 'Activity: Starting and Changing the Application'
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：启动和更改应用程序
- en: '**Scenario**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**'
- en: We want to change the title of the application that was created in the previous activity.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要更改在前一个活动中创建的应用程序的标题。
- en: '**Aim**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**目的**'
- en: The aim of the activity is to become familiar with launching an application
    and appreciating the hot reloading feature.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 活动的目的是熟悉启动应用程序并欣赏热重载功能。
- en: '**Steps for Completion**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: Start the application so that you can see it in a browser
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动应用程序，以便您可以在浏览器中看到它
- en: Edit the `App.js` file and set the title to `My Shop`
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`App.js`文件并将标题设置为`My Shop`
- en: '**Solution**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: There is no formal solution. You should focus on getting the title correctly
    changed and the application running.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 没有正式的解决方案。您应该专注于正确更改标题并使应用程序运行。
- en: The npm test Command
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: npm测试命令
- en: '`create-react-app` promotes the use of unit tests by generating a sample unit
    test file, as we have already seen, and by providing a set of tools to run such
    tests.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`create-react-app`通过生成一个示例单元测试文件（我们已经看到过）并提供一组工具来运行这些测试，从而推广使用单元测试。'
- en: 'These tools are based on **Jest**, and we can run the tests written within
    our application by running the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具基于**Jest**，我们可以通过运行以下命令来运行我们应用程序中编写的测试：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This command will start running our test and will show the results, as shown
    in the following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将开始运行我们的测试，并显示结果，如以下截图所示：
- en: '![](Images/6214f136-1247-4f58-ae30-447792398d06.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6214f136-1247-4f58-ae30-447792398d06.png)'
- en: The npm run build Command
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: npm运行构建命令
- en: 'When we are ready to move our application into the production environment,
    we need the artifacts to publish. We can produce these artifacts by running the
    following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们准备好将应用程序移动到生产环境时，我们需要发布工件。我们可以通过运行以下命令来生成这些工件：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The result of running this command is a new `BUILD` folder where we will find
    all of the files that we need to move into a production environment. The command
    carries out some processing on the files of our development environment. Put simply,
    it translates all of the ES2015 code we wrote into ES5 compatible code, so that
    it is also available for older browsers. This process is called **transpilation**.
    In addition, it reduces the size of the code itself, allowing for faster downloading
    over the network. This process is called **minification**. Finally, it takes the
    files in our development environment and combines them into a few files, called
    bundles, in order to decrease network requests.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令的结果是一个新的`BUILD`文件夹，我们将在这里找到所有需要移动到生产环境的文件。该命令对我们的开发环境文件进行一些处理。简单来说，它将我们编写的所有ES2015代码转换为与ES5兼容的代码，以便它也可以用于旧版浏览器。这个过程称为**转译**。此外，它还减小了代码本身的大小，允许通过网络更快地下载。这个过程称为**压缩**。最后，它将我们开发环境中的文件合并为几个文件，称为捆绑包，以减少网络请求。
- en: 'The following screenshot shows the content of the `BUILD` folder of the sample
    application:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了示例应用程序的`BUILD`文件夹的内容：
- en: '![](Images/751f24bf-3ab9-4bde-aa22-52c5c896fc43.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/751f24bf-3ab9-4bde-aa22-52c5c896fc43.png)'
- en: To publish the production build of our application, we can just copy the content
    of the `BUILD` folder into the production server's folder.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要发布我们应用程序的生产构建，我们只需将`BUILD`文件夹的内容复制到生产服务器的文件夹中。
- en: The result of the production build assumes that the artifact will be published
    into the web server root, that is, at a location where the application will be
    accessible through a URL such as `http://www.myapplication.com`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 生产构建的结果假设工件将被发布到Web服务器根目录，也就是说，在一个位置，应用程序将通过一个URL（如`http://www.myapplication.com`）访问。
- en: If we need to publish the application in a root's subfolder, that is, at a location
    where the application will be accessible through a URL such as `http://www.myapplication.com/app`,
    we need to make a slight change to the `package.json` file.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要在根目录的子文件夹中发布应用程序，也就是说，在一个位置，应用程序将通过一个URL（如`http://www.myapplication.com/app`）访问，我们需要对`package.json`文件进行轻微更改。
- en: 'In this case, we need to add a `homepage` key to the configuration JSON with
    the URL as its value, as shown here:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要在配置JSON中添加一个`homepage`键，其值为URL，如下所示：
- en: '`"homepage": "http://www.myapplication.com/app"`.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`"homepage": "http://www.myapplication.com/app"`。'
- en: The npm run eject Command
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: npm运行eject命令
- en: 'The last command we will cover is the `eject` command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要介绍的最后一个命令是`eject`命令：
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We can use this command when we are confident in using the tools underlying `create-react-app`
    and we need to customize the environment configuration. This command takes our
    application out of the CLI context and gives us the power and responsibility to
    manage it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们对使用`create-react-app`底层工具充满信心并且需要自定义环境配置时，我们可以使用此命令。此命令将我们的应用程序从CLI上下文中移出，并赋予我们管理和负责它的能力。
- en: This is a one-way process. If we leave the `create-react-app` context for our
    application, we cannot go back.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个单向过程。如果我们为应用程序离开`create-react-app`上下文，我们就无法返回。
- en: How to Design a UI
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何设计UI
- en: Now, we are going to see how we can design our application so that it fits well
    when implemented with React.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到如何设计我们的应用程序，以便它在用React实现时很好地适应。
- en: Everything Is a Component
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一切都是组件
- en: The main concept introduced by React in user interface design and implementation is
    the component concept. A user interface is an aggregate of components, and the whole
    React application is an aggregate of components. We will now see in more detail
    what components are from a design point of view.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户界面设计和实现中引入的主要概念是React的组件概念。用户界面是组件的聚合，整个React应用程序是组件的聚合。现在我们将更详细地了解从设计角度来看组件是什么。
- en: From a design point of view, we can say that a component is a part of the user interface,
    having a specific role. A hierarchy of components is often called a component
    tree.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 从设计的角度来看，我们可以说组件是用户界面的一部分，具有特定的作用。组件的层次结构通常被称为组件树。
- en: 'Consider a form in a web page. It can be treated as a component, since it has
    a specific role: to collect data and send it to the server. Also, a textbox inside
    the form can be considered a component. It has a specific role: to collect a single
    piece of data that will be sent to the server. So, a component may contain other
    components. And this is what usually happens: a user interface is a hierarchy
    of components, where some components contain other components.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑网页中的一个表单。它可以被视为一个组件，因为它有一个特定的作用：收集数据并将其发送到服务器。此外，表单内的文本框也可以被视为一个组件。它有一个特定的作用：收集单个数据片段，该数据将被发送到服务器。因此，一个组件可能包含其他组件。这通常是发生的情况：用户界面是组件的层次结构，其中一些组件包含其他组件。
- en: Keep this concept in mind, since it will be useful to implement efficient and
    reusable user interfaces.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这个概念，因为它将有助于实现高效和可重用的用户界面。
- en: Decompose a User Interface
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分解用户界面
- en: 'To better understand how to design a user interface and how to create components to
    implement them, we will try to decompose a well-known web user interface—the YouTube
    main page:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解如何设计用户界面以及如何创建组件来实现它们，我们将尝试分解一个广为人知的网页用户界面——YouTube主页：
- en: '![](Images/e9867a5a-8ca0-4c86-9b7e-73501a8bde50.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e9867a5a-8ca0-4c86-9b7e-73501a8bde50.png)'
- en: We can detect several items on this page, each having a specific role, starting
    with the page itself, whose role is to allow the user to interact with the system.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检测到页面上的多个项目，每个项目都有特定的作用，从页面本身开始，其作用是允许用户与系统交互。
- en: 'If we consider the header, the left sidebar, and the main area, all of these
    items are components of the page. You can see them highlighted in the following
    screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们考虑页眉、左侧边栏和主区域，所有这些项目都是页面的组件。您可以在下面的截图中看到它们被突出显示：
- en: '![](Images/094ad032-347c-4c84-9cfd-c33f4ce932f8.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/094ad032-347c-4c84-9cfd-c33f4ce932f8.png)'
- en: 'Of course, we can go ahead and detect other components. For example, we can
    consider each video preview box in the main area as a component. You can see them
    in the following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以继续识别其他组件。例如，我们可以将主区域中的每个视频预览框视为一个组件。您可以在下面的截图中看到它们：
- en: '![](Images/fbd31514-b679-4314-9c01-bd23302a7d35.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fbd31514-b679-4314-9c01-bd23302a7d35.png)'
- en: This decomposition process allows us to focus on the specific role of each item
    in an interface, so that we can try to isolate each functionality and create reusable components,
    that is, components with just the dependencies that really matter.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个分解过程使我们能够专注于界面中每个项目的特定作用，以便我们可以尝试隔离每个功能并创建可重用的组件，即只具有真正重要的依赖关系的组件。
- en: Container and Presentational Components
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器和展示组件
- en: We can classify the components in a user interface into container and presentational components.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将用户界面中的组件分为容器组件和展示组件。
- en: The container components are components that do not have a relevant visual effect. Their
    main role is to group other components, that is, *contain* other components. For example,
    a form is usually a container component, since its main role is to contain other
    components, such as textboxes, labels, buttons, and so on.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 容器组件是那些没有显著视觉效果的组件。它们的主要作用是组合其他组件，即*包含*其他组件。例如，一个表单通常是容器组件，因为它的主要作用是包含其他组件，如文本框、标签、按钮等。
- en: The presentational components are components that display data in some graphical form.
    A textbox, a date picker, and a toolbar are examples of presentational components.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 展示组件是那些以某种图形形式显示数据的组件。文本框、日期选择器和工具栏都是展示组件的例子。
- en: The distinction between container and presentational components is very important in
    order to create efficient user interfaces in React. We will exploit this distinction later,
    when we learn to manage the components' state and to propagate data through the
    components.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 区分容器组件和展示组件对于在React中创建高效的用户界面非常重要。我们将在学习管理组件状态和通过组件传播数据时利用这种区分。
- en: 'Activity: Detecting Components in a Web User Interface'
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：在网页用户界面中识别组件
- en: '**Scenario**'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**'
- en: We need to convert the Wikipedia website's user interface ([https://en.wikipedia.org](https://en.wikipedia.org))
    into React components.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将维基百科网站的用户界面（[https://en.wikipedia.org](https://en.wikipedia.org)）转换为React组件。
- en: '**Aim**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标**'
- en: The aim of the activity is to address the design process when implementing React-based user
    interfaces.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 该活动的目的是解决在实现基于React的用户界面时的设计过程。
- en: '**Steps for Completion**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: Analyze the page's current structure and detect the items you can implement
    as components
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析页面的当前结构并识别可以作为组件实现的项目
- en: Indicate which would be container and which would be presentational components
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指出了哪些是容器组件，哪些是展示组件
- en: '**Solution**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'Assume that the following is the current Wikipedia home page:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 假设以下是当前的维基百科首页：
- en: '![](Images/3efcae52-04c7-429a-92d7-fd347d736c11.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3efcae52-04c7-429a-92d7-fd347d736c11.png)'
- en: A possible solution could be as follows.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的解决方案如下。
- en: 'We can detect the following components:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以识别以下组件：
- en: The *home page* component contains the *left sidebar* component, the *header* component,
    and the *main area* component. All of these components are container components.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*首页*组件包含*左侧边栏*组件、*头部*组件和*主区域*组件。所有这些组件都是容器组件。'
- en: The *left-side* component contains the *logo* component (presentational) and
    a list of *section* components (presentational).
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*左侧边栏*组件包含*徽标*组件（展示型）和一组*节*组件（展示型）。'
- en: The *header* component contains a list of *link* components (presentational)
    to general pieces of functionality.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*头部*组件包含一组*链接*组件（展示型），指向一般的功能块。'
- en: The *main area* component contains a list of *tab* components (container) and
    a *search* component (presentational).
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*主区域*组件包含一组*标签*组件（容器型）和一个*搜索*组件（展示型）。'
- en: The main *tab* component contains a *banner* component (presentational), a *topic
    index* component (presentational), and a list of *block* components (presentational).
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*主标签*组件包含一个*横幅*组件（展示型），一个*主题索引*组件（展示型），以及一组*块*组件（展示型）。'
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'In this chapter, we started to explore the React world. In particular, we:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始探索React世界。特别是，我们：
- en: Established that React is a user interface library, used to implement the View part
    of various MV* design patterns
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定了React是一个用户界面库，用于实现各种MV*设计模式中的视图部分
- en: Introduced the `create-react-app` tool, which helps us to set up a development environment
    to build React-based applications
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍了`create-react-app`工具，它帮助我们设置一个开发环境来构建基于React的应用程序
- en: Explored the items composing a typical React-based application
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索了构成典型基于React的应用程序的各个部分
- en: Analyzed the approach to designing user interfaces that best fits in the React world
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析了最适合React世界的用户界面设计方法
- en: In the next chapter, we will discover how to create React components to build
    user interfaces for our application.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何创建React组件来构建我们应用程序的用户界面。
