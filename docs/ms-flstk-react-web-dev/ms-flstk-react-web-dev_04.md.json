["```jsx\nimport configMongoose from './configMongoose'; \n\nconst Article = configMongoose.Article; \n\nexport default () => { \n\n  return Article.find({}, function(err, articlesDocs) { \n\n    return articlesDocs; \n\n  }).then ((articlesArrayFromDB) => { \n\n    return articlesArrayFromDB; \n\n  }); \n\n}\n\n```", "```jsx\n// te following code should already be in your codebase: \n\nlet handleServerSideRender = (req, res, next) => { \n\ntry {\n\n    let initMOCKstore = fetchServerSide(); // mocked for now \n\n    // Create a new Redux store instance \n\n    const store = createStore(rootReducer, initMOCKstore) \n\n    const location = hist.createLocation(req.path);\n\n```", "```jsx\n// this is an improved version: \n\nlet handleServerSideRender = async (req, res, next) => { \n\n  try { \n\n    let articlesArray = await fetchServerSide(); \n\n    let initMOCKstore = { \n\n      article: articlesArray \n\n    } \n\n  // Create a new Redux store instance \n\n  const store = createStore(rootReducer, initMOCKstore) \n\n  const location = hist.createLocation(req.path);\n\n```", "```jsx\nroute: 'articles[{integers}][\"id\",\"articleTitle\",\"articleContent\"]',\n\n```", "```jsx\nroute: 'articles[{integers}][\"_id\",\"articleTitle\",\"articleContent\"]',\n\n```", "```jsx\nget(['articles', {from: 0, to: articlesLength-1}, ['id','articleTitle', 'articleContent']]).\n\n```", "```jsx\nget(['articles', {from: 0, to: articlesLength-1}, ['_id','articleTitle', 'articleContent']]).\n\n```", "```jsx\n<h1>Server side publishing app</h1>\n\n```", "```jsx\n<h1>Our publishing app</h1>\n\n```", "```jsx\n<h1>Login view</h1>\n\n```", "```jsx\n<h1>Register</h1>\n\n```", "```jsx\nimport AppBar from 'material-ui/lib/app-bar'; \n\nimport RaisedButton from 'material-ui/lib/raised-button'; \n\nimport ActionHome from 'material-ui/lib/svg-icons/action/home';\n\n```", "```jsx\n render () { \n\n    const buttonStyle = { \n\n      margin: 5 \n\n    }; \n\n    const homeIconStyle = { \n\n      margin: 5, \n\n      paddingTop: 5 \n\n    }; \n\n    let menuLinksJSX = ( \n\n    <span> \n\n        <Link to='/register'> \n\n       <RaisedButton label='Register' style={buttonStyle}  /> \n\n     </Link>  \n\n        <Link to='/login'> \n\n       <RaisedButton label='Login' style={buttonStyle}  /> \n\n     </Link>  \n\n      </span>); \n\n    let homePageButtonJSX = ( \n\n     <Link to='/'> \n\n          <RaisedButton label={<ActionHome />} \n\n           style={homeIconStyle}  /> \n\n        </Link>); \n\n    return ( \n\n      <div> \n\n        <AppBar \n\n          title='Publishing App' \n\n          iconElementLeft={homePageButtonJSX} \n\n          iconElementRight={menuLinksJSX} /> \n\n          <br/> \n\n          {this.props.children} \n\n      </div> \n\n    ); \n\n  }\n\n```", "```jsx\n$ [[you are in the src/components/ directory of your project]]\n\n$ touch ArticleCard.js\n\n```", "```jsx\nimport React from 'react'; \n\nimport {  \n\n  Card,  \n\n  CardHeader,  \n\n  CardMedia,  \n\n  CardTitle,  \n\n  CardText  \n\n} from 'material-ui/lib/card'; \n\nimport {Paper} from 'material-ui'; \n\nclass ArticleCard extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n  } \n\n  render() { \n\n    return <h1>here goes the article card</h1>; \n\n  } \n\n}; \n\nexport default ArticleCard;\n\n```", "```jsx\nrender() { \n\n  let title = this.props.title || 'no title provided'; \n\n  let content = this.props.content || 'no content provided'; \n\n  const paperStyle = { \n\n    padding: 10,  \n\n    width: '100%',  \n\n    height: 300 \n\n  }; \n\n  const leftDivStyle = { \n\n    width: '30%',  \n\n    float: 'left' \n\n  }; \n\n  const rightDivStyle = { \n\n    width: '60%',  \n\n    float: 'left',  \n\n    padding: '10px 10px 10px 10px' \n\n  }; \n\n  return ( \n\n    <Paper style={paperStyle}> \n\n      <CardHeader \n\n        title={this.props.title} \n\n        subtitle='Subtitle' \n\n        avatar='/static/avatar.png' \n\n      /> \n\n      <div style={leftDivStyle}> \n\n        <Card > \n\n          <CardMedia \n\n            overlay={<CardTitle title={title} \n\n             subtitle='Overlay subtitle' />}> \n\n            <img src='/static/placeholder.png' height=\"190\" /> \n\n          </CardMedia> \n\n        </Card> \n\n      </div> \n\n      <div style={rightDivStyle}> \n\n        {content} \n\n      </div> \n\n    </Paper>); \n\n}\n\n```", "```jsx\nimport ArticleCard from '../components/ArticleCard';\n\n```", "```jsx\nrender () { \n\n  let articlesJSX = []; \n\n  for(let articleKey in this.props.article) { \n\n    const articleDetails = this.props.article[articleKey]; \n\n    const currentArticleJSX = ( \n\n      <div key={articleKey}> \n\n        <ArticleCard  \n\n          title={articleDetails.articleTitle} \n\n          content={articleDetails.articleContent} /> \n\n      </div> \n\n    ); \n\n    articlesJSX.push(currentArticleJSX); \n\n  } \n\n  return ( \n\n    <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n\n        {articlesJSX} \n\n    </div> \n\n  ); \n\n}\n\n```", "```jsx\n<ArticleCard  \n\n  title={articleDetails.articleTitle} \n\n  content={articleDetails.articleContent} />\n\n```", "```jsx\n$ [[you are in the src/components/ directory of your project]]\n\n$ mkdir articles\n\n$ cd articles\n\n$ touch WYSIWYGeditor.js\n\n```", "```jsx\nimport React from 'react'; \n\nclass WYSIWYGeditor extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n  } \n\n  render() { \n\n    return <h1>WYSIWYGeditor</h1>; \n\n  } \n\n}; \n\nexport default WYSIWYGeditor;\n\n```", "```jsx\n$ [[you should be at src/views/ directory of your project]]\n\n$ touch LogoutView.js\n\n```", "```jsx\nimport React from 'react'; \n\nimport {Paper} from 'material-ui'; \n\nclass LogoutView extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n  } \n\n  componentWillMount() { \n\n    if (typeof localStorage !== 'undefined' && localStorage.token) { \n\n      delete localStorage.token; \n\n      delete localStorage.username; \n\n      delete localStorage.role; \n\n    } \n\n  } \n\n  render () { \n\n    return ( \n\n      <div style={{width: 400, margin: 'auto'}}> \n\n        <Paper zDepth={3} style={{padding: 32, margin: 32}}> \n\n          Logout successful. \n\n        </Paper> \n\n      </div> \n\n    ); \n\n  } \n\n} \n\nexport default LogoutView;\n\n```", "```jsx\n$ [[you are in the src/views/ directory of your project]]\n\n$ mkdir articles\n\n$ cd articles\n\n$ touch AddArticleView.js\n\n```", "```jsx\nimport React from 'react'; \n\nimport {connect} from 'react-redux'; \n\nimport WYSIWYGeditor from '../../components/articles/WYSIWYGeditor.js'; \n\nconst mapStateToProps = (state) => ({ \n\n  ...state \n\n}); \n\nconst mapDispatchToProps = (dispatch) => ({ \n\n}); \n\nclass AddArticleView extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n  } \n\n  render () { \n\n    return ( \n\n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n\n        <h1>Add Article</h1> \n\n        <WYSIWYGeditor /> \n\n      </div> \n\n    ); \n\n  } \n\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddArticleView);\n\n```", "```jsx\nimport React from 'react'; \n\nimport {Route, IndexRoute} from 'react-router'; \n\nimport CoreLayout from '../layouts/CoreLayout'; \n\nimport PublishingApp from '../layouts/PublishingApp'; \n\nimport LoginView from '../views/LoginView'; \n\nimport LogoutView from '../views/LogoutView'; \n\nimport RegisterView from '../views/RegisterView'; \n\nimport DashboardView from '../views/DashboardView'; \n\nimport AddArticleView from '../views/articles/AddArticleView'; \n\nexport default ( \n\n  <Route component={CoreLayout} path='/'> \n\n    <IndexRoute component={PublishingApp} name='home' /> \n\n    <Route component={LoginView} path='login' name='login' /> \n\n    <Route component={LogoutView} path='logout' name='logout' /> \n\n    <Route component={RegisterView} path='register' \n\n       name='register' /> \n\n    <Route component={DashboardView} path='dashboard' \n\n       name='dashboard' /> \n\n    <Route component={AddArticleView} path='add-article' \n\n       name='add-article' /> \n\n  </Route> \n\n);\n\n```", "```jsx\nimport LogoutView from '../views/LogoutView'; \n\nimport AddArticleView from '../views/articles/AddArticleView';\n\n```", "```jsx\n  render () { \n\n    const buttonStyle = { \n\n      margin: 5 \n\n    }; \n\n    const homeIconStyle = { \n\n      margin: 5, \n\n      paddingTop: 5 \n\n    }; \n\n    let menuLinksJSX; \n\n    let userIsLoggedIn = typeof localStorage !== 'undefined' &&  \n\n     localStorage.token && this.props.routes[1].name !== 'logout'; \n\n    if (userIsLoggedIn) { \n\n      menuLinksJSX = ( \n\n     <span> \n\n          <Link to='/dashboard'> \n\n      <RaisedButton label='Dashboard' style={buttonStyle}  /> \n\n    </Link>  \n\n          <Link to='/logout'> \n\n      <RaisedButton label='Logout' style={buttonStyle}  /> \n\n    </Link>  \n\n      </span>); \n\n    } else { \n\n      menuLinksJSX = ( \n\n     <span> \n\n         <Link to='/register'> \n\n      <RaisedButton label='Register' style={buttonStyle}  /> \n\n    </Link>  \n\n           <Link to='/login'> \n\n       <RaisedButton label='Login' style={buttonStyle}  /> \n\n     </Link>  \n\n       </span>); \n\n    } \n\n    let homePageButtonJSX = ( \n\n      <Link to='/'> \n\n        <RaisedButton label={<ActionHome />} style={homeIconStyle}  \n\n         /> \n\n      </Link>); \n\n    return ( \n\n      <div> \n\n        <AppBar \n\n          title='Publishing App' \n\n          iconElementLeft={homePageButtonJSX} \n\n          iconElementRight={menuLinksJSX} /> \n\n          <br/> \n\n          {this.props.children} \n\n      </div> \n\n    ); \n\n  }\n\n```", "```jsx\n  let menuLinksJSX; \n\n  let userIsLoggedIn = typeof localStorage !== \n\n  'undefined' && localStorage.token && this.props.routes[1].name \n\n   !== 'logout'; \n\n  if (userIsLoggedIn) { \n\n    menuLinksJSX = ( \n\n  <span> \n\n        <Link to='/dashboard'> \n\n    <RaisedButton label='Dashboard' style={buttonStyle}  /> \n\n  </Link>  \n\n        <Link to='/logout'> \n\n    <RaisedButton label='Logout'style={buttonStyle}  /> \n\n  </Link>  \n\n      </span>); \n\n  } else { \n\n    menuLinksJSX = ( \n\n  <span> \n\n        <Link to='/register'> \n\n    <RaisedButton label='Register' style={buttonStyle}  /> \n\n  </Link>  \n\n        <Link to='/login'> \n\n    <RaisedButton label='Login' style={buttonStyle}  /> \n\n  </Link>  \n\n      </span>); \n\n  }\n\n```", "```jsx\nimport {Link} from 'react-router'; \n\nimport List from 'material-ui/lib/lists/list'; \n\nimport ListItem from 'material-ui/lib/lists/list-item'; \n\nimport Avatar from 'material-ui/lib/avatar'; \n\nimport ActionInfo from 'material-ui/lib/svg-icons/action/info'; \n\nimport FileFolder from 'material-ui/lib/svg-icons/file/folder'; \n\nimport RaisedButton from 'material-ui/lib/raised-button'; \n\nimport Divider from 'material-ui/lib/divider';\n\n```", "```jsx\nrender () { \n\n    let articlesJSX = []; \n\n    for(let articleKey in this.props.article) { \n\n      const articleDetails = this.props.article[articleKey]; \n\n      const currentArticleJSX = ( \n\n        <ListItem \n\n          key={articleKey} \n\n          leftAvatar={<img  \n\n          src='/static/placeholder.png'  \n\n          width='50'  \n\n          height='50' />} \n\n          primaryText={articleDetails.articleTitle} \n\n          secondaryText={articleDetails.articleContent} \n\n        /> \n\n      ); \n\n      articlesJSX.push(currentArticleJSX); \n\n    } \n\n    return ( \n\n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n\n        <Link to='/add-article'> \n\n          <RaisedButton  \n\n            label='Create an article'  \n\n            secondary={true}  \n\n            style={{margin: '20px 20px 20px 20px'}} /> \n\n        </Link> \n\n        <List> \n\n          {articlesJSX} \n\n        </List> \n\n      </div> \n\n    ); \n\n  }\n\n```", "```jsx\nnpm i --save draft-js@0.5.0\n\n```", "```jsx\nnpm i --save falcor-json-graph@1.1.7\n\n```", "```jsx\n.RichEditor-root { \n\n  background: #fff; \n\n  border: 1px solid #ddd; \n\n  font-family: 'Georgia', serif; \n\n  font-size: 14px; \n\n  padding: 15px; \n\n} \n\n.RichEditor-editor { \n\n  border-top: 1px solid #ddd; \n\n  cursor: text; \n\n  font-size: 16px; \n\n  margin-top: 10px; \n\n  min-height: 100px; \n\n} \n\n.RichEditor-editor .RichEditor-blockquote { \n\n  border-left: 5px solid #eee; \n\n  color: #666; \n\n  font-family: 'Hoefler Text', 'Georgia', serif; \n\n  font-style: italic; \n\n  margin: 16px 0; \n\n  padding: 10px 20px; \n\n} \n\n.RichEditor-controls { \n\n  font-family: 'Helvetica', sans-serif; \n\n  font-size: 14px; \n\n  margin-bottom: 5px; \n\n  user-select: none; \n\n} \n\n.RichEditor-styleButton { \n\n  color: #999; \n\n  cursor: pointer; \n\n  margin-right: 16px; \n\n  padding: 2px 0; \n\n} \n\n.RichEditor-activeButton { \n\n  color: #5890ff; \n\n}\n\n```", "```jsx\nlet renderFullPage = (html, initialState) => \n\n{ \n\n  return &grave; \n\n    <!doctype html> \n\n    <html> \n\n      <head> \n\n        <title>Publishing App Server Side Rendering</title> \n\n        <link rel=\"stylesheet\" type=\"text/css\" \n\n         href=\"/static/styles-draft-js.css\" /> \n\n      </head> \n\n      <body> \n\n        <div id=\"publishingAppRoot\">${html}</div> \n\n        <script> \n\n          window.__INITIAL_STATE__ = \n\n           ${JSON.stringify(initialState)} \n\n        </script> \n\n        <script src=\"/static/app.js\"></script> \n\n      </body> \n\n    </html> \n\n    &grave; \n\n};\n\n```", "```jsx\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/static/styles-draft- \n\n js.css\" />\n\n```", "```jsx\nimport React from 'react'; \n\nimport { \n\n  Editor,  \n\n  EditorState,  \n\n  ContentState,  \n\n  RichUtils,  \n\n  convertToRaw, \n\n  convertFromRaw \n\n} from 'draft-js'; \n\nexport default class   WYSIWYGeditor extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n    let initialEditorFromProps = \n\n     EditorState.createWithContent \n\n     (ContentState.createFromText('')); \n\n    this.state = { \n\n      editorState: initialEditorFromProps \n\n    }; \n\n    this.onChange = (editorState) => {  \n\n      var contentState = editorState.getCurrentContent(); \n\n      let contentJSON = convertToRaw(contentState); \n\n      props.onChangeTextJSON(contentJSON, contentState); \n\n      this.setState({editorState})  \n\n    }; \n\n  } \n\n  render() { \n\n    return <h1>WYSIWYGeditor</h1>; \n\n  } \n\n}\n\n```", "```jsx\nthis.focus = () => this.refs['refWYSIWYGeditor'].focus(); \n\nthis.handleKeyCommand = (command) => this._handleKeyCommand(command);\n\n```", "```jsx\n_handleKeyCommand(command) { \n\n   const {editorState} = this.state; \n\n   const newState = RichUtils.handleKeyCommand(editorState, \n\n    command); \n\n   if (newState) { \n\n     this.onChange(newState); \n\n     return true; \n\n   } \n\n   return false; \n\n }\n\n```", "```jsx\nexport default class   WYSIWYGeditor extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n    let initialEditorFromProps = \n\n     EditorState.createWithContent \n\n     (ContentState.createFromText('')); \n\n    this.state = { \n\n      editorState: initialEditorFromProps \n\n    }; \n\n    this.onChange = (editorState) => {  \n\n      var contentState = editorState.getCurrentContent(); \n\n      let contentJSON = convertToRaw(contentState); \n\n      props.onChangeTextJSON(contentJSON, contentState); \n\n      this.setState({editorState}); \n\n    }; \n\n    this.focus = () => this.refs['refWYSIWYGeditor'].focus(); \n\n    this.handleKeyCommand = (command) => \n\n     this._handleKeyCommand(command); \n\n  }\n\n```", "```jsx\n  _handleKeyCommand(command) { \n\n    const {editorState} = this.state; \n\n    const newState = RichUtils.handleKeyCommand(editorState, \n\n     command); \n\n    if (newState) { \n\n      this.onChange(newState); \n\n      return true; \n\n    } \n\n    return false; \n\n  } \n\n  render() { \n\n    return <h1> WYSIWYGeditor</h1>; \n\n  } \n\n}\n\n```", "```jsx\n render() { \n\n    const { editorState } = this.state; \n\n    let className = 'RichEditor-editor'; \n\n    var contentState = editorState.getCurrentContent(); \n\n    return ( \n\n      <div> \n\n        <h4>{this.props.title}</h4> \n\n        <div className='RichEditor-root'> \n\n          <div className={className} onClick={this.focus}> \n\n            <Editor \n\n              editorState={editorState} \n\n              handleKeyCommand={this.handleKeyCommand} \n\n              onChange={this.onChange} \n\n              ref='refWYSIWYGeditor' /> \n\n          </div> \n\n        </div> \n\n      </div> \n\n    ); \n\n  }\n\n```", "```jsx\nnpm i --save draft-js-export-html@0.1.13\n\n```", "```jsx\nimport { stateToHTML } from 'draft-js-export-html';\n\n```", "```jsx\nclass AddArticleView extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n    this._onDraftJSChange = this._onDraftJSChange.bind(this); \n\n    this.state = { \n\n      contentJSON: {}, \n\n      htmlContent: '' \n\n    }; \n\n  } \n\n  _onDraftJSChange(contentJSON, contentState) { \n\n    let htmlContent = stateToHTML(contentState); \n\n    this.setState({contentJSON, htmlContent}); \n\n  }\n\n```", "```jsx\nrender () { \n\n   return ( \n\n     <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n\n       <h1>Add Article</h1> \n\n       <WYSIWYGeditor \n\n         initialValue='' \n\n         title='Create an article' \n\n         onChangeTextJSON={this._onDraftJSChange} /> \n\n     </div> \n\n   ); \n\n }\n\n```", "```jsx\n// don't write it, this is only an example:\n\nimport { BlockStyleControls, InlineStyleControls } from \n\n './wysiwyg/WYSIWY\n\n    Gbuttons';\n\n```", "```jsx\n$ [[you are in the src/components/articles directory of your project]]\n\n$ mkdir wysiwyg\n\n$ cd wysiwyg\n\n$ touch  WYSIWYGbuttons.js\n\n```", "```jsx\nimport React from 'react'; \n\nclass StyleButton extends React.Component { \n\n  constructor() { \n\n    super(); \n\n    this.onToggle = (e) => { \n\n      e.preventDefault(); \n\n      this.props.onToggle(this.props.style); \n\n    }; \n\n  } \n\n  render() { \n\n    let className = 'RichEditor-styleButton'; \n\n    if (this.props.active) { \n\n      className += ' RichEditor-activeButton'; \n\n    } \n\n    return ( \n\n      <span className={className} onMouseDown={this.onToggle}> \n\n        {this.props.label} \n\n      </span> \n\n    ); \n\n  } \n\n}\n\n```", "```jsx\nconst BLOCK_TYPES = [ \n\n  {label: 'H1', style: 'header-one'}, \n\n  {label: 'H2', style: 'header-two'}, \n\n  {label: 'Blockquote', style: 'blockquote'}, \n\n  {label: 'UL', style: 'unordered-list-item'}, \n\n  {label: 'OL', style: 'ordered-list-item'} \n\n];\n\n```", "```jsx\nexport const BlockStyleControls = (props) => { \n\n  const {editorState} = props; \n\n  const selection = editorState.getSelection(); \n\n  const blockType = editorState \n\n    .getCurrentContent() \n\n    .getBlockForKey(selection.getStartKey()) \n\n    .getType(); \n\n  return ( \n\n    <div className='RichEditor-controls'> \n\n      {BLOCK_TYPES.map((type) => \n\n        <StyleButton \n\n          key={type.label} \n\n          active={type.style === blockType} \n\n          label={type.label} \n\n          onToggle={props.onToggle} \n\n          style={type.style} \n\n        /> \n\n      )} \n\n    </div> \n\n  ); \n\n};\n\n```", "```jsx\nvar INLINE_STYLES = [ \n\n  {label: 'Bold', style: 'BOLD'}, \n\n  {label: 'Italic', style: 'ITALIC'}, \n\n  {label: 'Underline', style: 'UNDERLINE'} \n\n];\n\n```", "```jsx\nexport const InlineStyleControls = (props) => { \n\n  var currentStyle = props.editorState.getCurrentInlineStyle(); \n\n  return ( \n\n    <div className='RichEditor-controls'> \n\n      {INLINE_STYLES.map(type => \n\n        <StyleButton \n\n          key={type.label} \n\n          active={currentStyle.has(type.style)} \n\n          label={type.label} \n\n          onToggle={props.onToggle} \n\n          style={type.style} \n\n        /> \n\n      )} \n\n    </div> \n\n  ); \n\n};\n\n```", "```jsx\nimport { BlockStyleControls, InlineStyleControls } from './wysiwyg/WYSIWYGbuttons';\n\n```", "```jsx\nthis.toggleInlineStyle = (style) => \n\nthis._toggleInlineStyle(style); \n\nthis.toggleBlockType = (type) => this._toggleBlockType(type);\n\n```", "```jsx\n _toggleBlockType(blockType) {\n\nthis.onChange(\n\n      RichUtils.toggleBlockType( \n\n        this.state.editorState, \n\n        blockType \n\n      ) \n\n    ); \n\n  } \n\n  _toggleInlineStyle(inlineStyle) { \n\n    this.onChange( \n\n      RichUtils.toggleInlineStyle( \n\n        this.state.editorState, \n\n        inlineStyle \n\n      ) \n\n    ); \n\n  }\n\n```", "```jsx\n render() { \n\n    const { editorState } = this.state; \n\n    let className = 'RichEditor-editor'; \n\n    var contentState = editorState.getCurrentContent(); \n\n    return ( \n\n      <div> \n\n        <h4>{this.props.title}</h4> \n\n        <div className='RichEditor-root'> \n\n          <BlockStyleControls \n\n            editorState={editorState} \n\n            onToggle={this.toggleBlockType} /> \n\n          <InlineStyleControls \n\n            editorState={editorState} \n\n            onToggle={this.toggleInlineStyle} /> \n\n          <div className={className} onClick={this.focus}> \n\n            <Editor \n\n              editorState={editorState} \n\n              handleKeyCommand={this.handleKeyCommand} \n\n              onChange={this.onChange} \n\n              ref='refWYSIWYGeditor' /> \n\n          </div> \n\n        </div> \n\n      </div> \n\n    ); \n\n  }\n\n```", "```jsx\nexport default { \n\n  articlesList: (response) => { \n\n    return { \n\n      type: 'ARTICLES_LIST_ADD', \n\n      payload: { response: response } \n\n    } \n\n  }, \n\n  pushNewArticle: (response) => { \n\n    return { \n\n      type: 'PUSH_NEW_ARTICLE', \n\n      payload: { response: response } \n\n    } \n\n  } \n\n}\n\n```", "```jsx\nreturn ( \n\n   <Paper style={paperStyle}> \n\n     <CardHeader \n\n       title={this.props.title} \n\n       subtitle='Subtitle' \n\n       avatar='/static/avatar.png' \n\n     /> \n\n     <div style={leftDivStyle}> \n\n       <Card > \n\n         <CardMedia \n\n           overlay={<CardTitle title={title} subtitle='Overlay \n\n            subtitle' />}> \n\n           <img src='/static/placeholder.png' height='190' /> \n\n         </CardMedia> \n\n       </Card> \n\n     </div> \n\n     <div style={rightDivStyle}> \n\n       <div dangerouslySetInnerHTML={{__html: content}} /> \n\n     </div> \n\n   </Paper>); \n\n}\n\n```", "```jsx\n<div dangerouslySetInnerHTML={{__html: content}} />\n\n```", "```jsx\n// this already exsits in your codebasecase 'ARTICLES_LIST_ADD': \n\nlet articlesList = action.payload.response; \n\nreturn Object.assign({}, articlesList);\n\n```", "```jsx\ncase 'ARTICLES_LIST_ADD': \n\n  let articlesList = action.payload.response; \n\n  return mapHelpers.addMultipleItems(state, articlesList);\n\n```", "```jsx\n$ [[you are in the src/ directory of your project]]\n\n$ mkdir utils\n\n$ cd utils\n\n$ touch mapHelpers.js\n\n```", "```jsx\nconst duplicate = (map) => { \n\n  const newMap = new Map(); \n\n  map.forEach((item, key) => { \n\n    if (item['_id']) { \n\n      newMap.set(item['_id'], item); \n\n    } \n\n  }); \n\n  return newMap; \n\n}; \n\nconst addMultipleItems = (map, items) => { \n\n  const newMap = duplicate(map); \n\n  Object.keys(items).map((itemIndex) => { \n\n    let item = items[itemIndex]; \n\n    if (item['_id']) { \n\n      newMap.set(item['_id'], item); \n\n    } \n\n  }); \n\n  return newMap; \n\n};\n\n```", "```jsx\nconst addItem = (map, newKey, newItem) => { \n\n  const newMap = duplicate(map); \n\n  newMap.set(newKey, newItem); \n\n  return newMap; \n\n}; \n\nconst deleteItem = (map, key) => { \n\n  const newMap = duplicate(map); \n\n  newMap.delete(key); \n\n  return newMap; \n\n}; \n\nexport default { \n\n  addItem, \n\n  deleteItem, \n\n  addMultipleItems \n\n};\n\n```", "```jsx\nimport mapHelpers from '../utils/mapHelpers'; \n\nconst article = (state = {}, action) => { \n\n  switch (action.type) { \n\n    case 'ARTICLES_LIST_ADD': \n\n      let articlesList = action.payload.response; \n\n      return mapHelpers.addMultipleItems(state, articlesList); \n\n    case 'PUSH_NEW_ARTICLE': \n\n      let newArticleObject = action.payload.response; \n\n      return mapHelpers.addItem(state, newArticleObject['_id'], \n\n       newArticleObject); \n\n    default: \n\n      return state; \n\n  } \n\n} \n\nexport default article\n\n```", "```jsx\n// The following is old codebase: \n\nimport React from 'react'; \n\nimport { Link } from 'react-router'; \n\nimport themeDecorator from 'material-ui/lib/styles/theme- \n\n decorator'; \n\nimport getMuiTheme from 'material-ui/lib/styles/getMuiTheme'; \n\nimport RaisedButton from 'material-ui/lib/raised-button'; \n\nimport AppBar from 'material-ui/lib/app-bar'; \n\nimport ActionHome from 'material-ui/lib/svg-icons/action/home';\n\n```", "```jsx\nimport React from 'react'; \n\nimport {Link} from 'react-router'; \n\nimport themeDecorator from 'material-ui/lib/styles/theme- \n\n decorator'; \n\nimport getMuiTheme from 'material-ui/lib/styles/getMuiTheme'; \n\nimport RaisedButton from 'material-ui/lib/raised-button'; \n\nimport AppBar from 'material-ui/lib/app-bar'; \n\nimport ActionHome from 'material-ui/lib/svg-icons/action/home'; \n\nimport {connect} from 'react-redux'; \n\nimport {bindActionCreators} from 'redux'; \n\nimport articleActions from '../actions/article.js'; \n\nconst mapStateToProps = (state) => ({ \n\n  ...state \n\n}); \n\nconst mapDispatchToProps = (dispatch) => ({ \n\n  articleActions: bindActionCreators(articleActions, dispatch) \n\n});\n\n```", "```jsx\n  componentWillMount() { \n\n    if (typeof window !== 'undefined' && !this.props.article.get) \n\n     { \n\n      this.props.articleActions.articlesList(this.props.article); \n\n    } \n\n  }\n\n```", "```jsx\nconst muiCoreLayout = themeDecorator(getMuiTheme(null, { \n\n userAgent: 'all' }))(CoreLayout); \n\n export default connect(mapStateToProps, \n\n mapDispatchToProps)(muiCoreLayout);\n\n```", "```jsx\nrender () { \n\n  let articlesJSX = []; \n\n  this.props.article.forEach((articleDetails, articleKey) => { \n\n    const currentArticleJSX = ( \n\n      <div key={articleKey}> \n\n        <ArticleCard  \n\n          title={articleDetails.articleTitle} \n\n          content={articleDetails.articleContent} /> \n\n      </div> \n\n    ); \n\n    articlesJSX.push(currentArticleJSX); \n\n  }); \n\n  return ( \n\n    <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n\n        {articlesJSX} \n\n    </div> \n\n  ); \n\n}\n\n```", "```jsx\nrender () { \n\n  let articlesJSX = []; \n\n  this.props.article.forEach((articleDetails, articleKey) => { \n\n    const currentArticleJSX = ( \n\n      <ListItem \n\n        key={articleKey} \n\n        leftAvatar={<img src='/static/placeholder.png'  \n\n    width='50'  \n\n    height='50' />} \n\n        primaryText={articleDetails.articleTitle} \n\n        secondaryText={articleDetails.articleContent} \n\n      /> \n\n    ); \n\n    articlesJSX.push(currentArticleJSX); \n\n  }); \n\n  return ( \n\n    <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n\n      <Link to='/add-article'> \n\n        <RaisedButton  \n\n          label='Create an article'  \n\n          secondary={true}  \n\n          style={{margin: '20px 20px 20px 20px'}} /> \n\n      </Link> \n\n      <List> \n\n        {articlesJSX} \n\n      </List> \n\n    </div> \n\n  ); \n\n}\n\n```", "```jsx\nthis.props.article.forEach((articleDetails, articleKey) => {\n\n```", "```jsx\nimport {bindActionCreators} from 'redux'; \n\nimport {Link} from 'react-router'; \n\nimport articleActions from '../../actions/article.js'; \n\nimport RaisedButton from 'material-ui/lib/raised-button';\n\n```", "```jsx\n// this is old code, you shall have it already \n\nconst mapDispatchToProps = (dispatch) => ({ \n\n});\n\n```", "```jsx\nconst mapDispatchToProps = (dispatch) => ({ \n\n  articleActions: bindActionCreators(articleActions, dispatch) \n\n});\n\n```", "```jsx\n constructor(props) { \n\n    super(props); \n\n    this._onDraftJSChange = this._onDraftJSChange.bind(this); \n\n    this._articleSubmit = this._articleSubmit.bind(this); \n\n    this.state = { \n\n      title: 'test', \n\n      contentJSON: {}, \n\n      htmlContent: '', \n\n      newArticleID: null \n\n    }; \n\n  }\n\n```", "```jsx\n _articleSubmit() { \n\n    let newArticle = { \n\n      articleTitle: this.state.title, \n\n      articleContent: this.state.htmlContent, \n\n      articleContentJSON: this.state.contentJSON \n\n    } \n\n    let newArticleID = 'MOCKEDRandomid' + Math.floor(Math.random() \n\n     * 10000); \n\n    newArticle['_id'] = newArticleID; \n\n    this.props.articleActions.pushNewArticle(newArticle); \n\n    this.setState({ newArticleID: newArticleID}); \n\n  }\n\n```", "```jsx\nlet newArticle = { \n\n  articleTitle: this.state.title, \n\n  articleContent: this.state.htmlContent, \n\n  articleContentJSON: this.state.contentJSON \n\n}\n\n```", "```jsx\n render () { \n\n    if (this.state.newArticleID) { \n\n      return ( \n\n        <div style={{height: '100%', width: '75%', margin: \n\n         'auto'}}> \n\n          <h3>Your new article ID is \n\n           {this.state.newArticleID}</h3> \n\n          <Link to='/dashboard'> \n\n            <RaisedButton \n\n              secondary={true} \n\n              type='submit' \n\n              style={{margin: '10px auto', display: 'block', \n\n               width: 150}} \n\n              label='Done' /> \n\n          </Link> \n\n        </div> \n\n      ); \n\n    } \n\n    return ( \n\n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n\n        <h1>Add Article</h1> \n\n        <WYSIWYGeditor \n\n          name='addarticle' \n\n          onChangeTextJSON={this._onDraftJSChange} /> \n\n          <RaisedButton \n\n            onClick={this._articleSubmit} \n\n            secondary={true} \n\n            type='submit' \n\n            style={{margin: '10px auto', display: 'block', width: \n\n             150}} \n\n            label={'Submit Article'} /> \n\n      </div> \n\n    ); \n\n  }\n\n```", "```jsx\nimport EditArticleView from '../views/articles/EditArticleView';\n\n```", "```jsx\nexport default ( \n\n  <Route component={CoreLayout} path='/'> \n\n    <IndexRoute component={PublishingApp} name='home' /> \n\n    <Route component={LoginView} path='login' name='login' /> \n\n    <Route component={LogoutView} path='logout' name='logout' /> \n\n    <Route component={RegisterView} path='register' \n\n     name='register' /> \n\n    <Route component={DashboardView} \n\n    path='dashboard' name='dashboard' /> \n\n    <Route component={AddArticleView} \n\n    path='add-article' name='add-article' /> \n\n    <Route component={EditArticleView} \n\n  path='/edit-article/:articleID' name='edit-article' /> \n\n  </Route> \n\n);\n\n```", "```jsx\nimport React from 'react'; \n\nimport Falcor from 'falcor'; \n\nimport {Link} from 'react-router'; \n\nimport falcorModel from '../../falcorModel.js'; \n\nimport {connect} from 'react-redux'; \n\nimport {bindActionCreators} from 'redux'; \n\nimport articleActions from '../../actions/article.js'; \n\nimport WYSIWYGeditor from '../../components/articles/WYSIWYGeditor'; \n\nimport {stateToHTML} from 'draft-js-export-html'; \n\nimport RaisedButton from 'material-ui/lib/raised-button'; \n\nconst mapStateToProps = (state) => ({ \n\n  ...state \n\n}); \n\nconst mapDispatchToProps = (dispatch) => ({ \n\n  articleActions: bindActionCreators(articleActions, dispatch) \n\n}); \n\nclass EditArticleView extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n  } \n\n  render () { \n\n    return <h1>An edit article MOCK</h1> \n\n  } \n\n} \n\nexport default connect(mapStateToProps, \n\n mapDispatchToProps)(EditArticleView);\n\n```", "```jsx\n let articlesJSX = []; \n\n  this.props.article.forEach((articleDetails, articleKey) => { \n\n    let currentArticleJSX = ( \n\n      <Link to={&grave;/edit-article/${articleDetails['_id']}&grave;} \n\n       key={articleKey}> \n\n        <ListItem \n\n          leftAvatar={<img  \n\n          src='/static/placeholder.png' \n\n          width='50' \n\n          height='50' />} \n\n          primaryText={articleDetails.articleTitle} \n\n          secondaryText={articleDetails.articleContent} \n\n        /> \n\n      </Link> \n\n    ); \n\n    articlesJSX.push(currentArticleJSX); \n\n  });\n\n```", "```jsx\nexport default { \n\n  articlesList: (response) => { \n\n    return { \n\n      type: 'ARTICLES_LIST_ADD', \n\n      payload: { response: response } \n\n    } \n\n  }, \n\n  pushNewArticle: (response) => { \n\n    return { \n\n      type: 'PUSH_NEW_ARTICLE', \n\n      payload: { response: response } \n\n    } \n\n  }, \n\n  editArticle: (response) => { \n\n    return { \n\n      type: 'EDIT_ARTICLE', \n\n      payload: { response: response } \n\n    } \n\n  } \n\n}\n\n```", "```jsx\nimport mapHelpers from '../utils/mapHelpers'; \n\nconst article = (state = {}, action) => { \n\n  switch (action.type) { \n\n    case 'ARTICLES_LIST_ADD': \n\n      let articlesList = action.payload.response; \n\n      return mapHelpers.addMultipleItems(state, articlesList); \n\n    case 'PUSH_NEW_ARTICLE': \n\n      let newArticleObject = action.payload.response; \n\n      return mapHelpers.addItem(state, newArticleObject['_id'], \n\n       newArticleObject); \n\n    case 'EDIT_ARTICLE': \n\n      let editedArticleObject = action.payload.response; \n\n      return mapHelpers.addItem(state, editedArticleObject['_id'], \n\n       editedArticleObject); \n\n    default: \n\n      return state; \n\n  } \n\n};export default article;\n\n```", "```jsx\nexport default class  WYSIWYGeditor extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n    let initialEditorFromProps; \n\n    if (typeof props.initialValue === 'undefined' || typeof \n\n     props.initialValue !== 'object') { \n\n      initialEditorFromProps = \n\n       EditorState.createWithContent \n\n       (ContentState.createFromText('')); \n\n    } else { \n\n      let isInvalidObject = typeof props.initialValue.entityMap \n\n       === 'undefined' || typeof props.initialValue.blocks === \n\n       'undefined'; \n\n      if (isInvalidObject) { \n\n        alert('Invalid article-edit error provided, exit'); \n\n        return; \n\n      } \n\n      let draftBlocks = convertFromRaw(props.initialValue); \n\n      let contentToConsume = \n\n       ContentState.createFromBlockArray(draftBlocks); \n\n      initialEditorFromProps = \n\n       EditorState.createWithContent(contentToConsume); \n\n    } \n\n    this.state = { \n\n      editorState: initialEditorFromProps \n\n    }; \n\n    this.focus = () => this.refs['refWYSIWYGeditor'].focus(); \n\n    this.onChange = (editorState) => {  \n\n      var contentState = editorState.getCurrentContent(); \n\n      let contentJSON = convertToRaw(contentState); \n\n      props.onChangeTextJSON(contentJSON, contentState); \n\n      this.setState({editorState})  \n\n    }; \n\n    this.handleKeyCommand = (command) => \n\n     this._handleKeyCommand(command); \n\n      this.toggleInlineStyle = (style) => \n\n       this._toggleInlineStyle(style); \n\n      this.toggleBlockType = (type) => \n\n       this._toggleBlockType(type); \n\n  }\n\n```", "```jsx\nlet isInvalidObject = typeof props.initialValue.entityMap === \n\n 'undefined' || typeof blocks === 'undefined'; \n\nif (isInvalidObject) { \n\n  alert('Error: Invalid article-edit object provided, exit'); \n\n  return; \n\n} \n\nlet draftBlocks = convertFromRaw(props.initialValue); \n\nlet contentToConsume = \n\n ContentState.createFromBlockArray(draftBlocks); \n\n initialEditorFromProps = \n\n EditorState.createWithContent(contentToConsume);\n\n```", "```jsx\nclass EditArticleView extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n    this._onDraftJSChange = this._onDraftJSChange.bind(this); \n\n    this._articleEditSubmit = this._articleEditSubmit.bind(this); \n\n    this._fetchArticleData = this._fetchArticleData.bind(this); \n\n    this.state = { \n\n      articleFetchError: null, \n\n      articleEditSuccess: null, \n\n      editedArticleID: null, \n\n      articleDetails: null, \n\n      title: 'test', \n\n      contentJSON: {}, \n\n      htmlContent: '' \n\n    }; \n\n  }\n\n```", "```jsx\n componentWillMount() { \n\n    this._fetchArticleData(); \n\n  } \n\n  _fetchArticleData() { \n\n    let articleID = this.props.params.articleID; \n\n    if (typeof window !== 'undefined' && articleID) { \n\n        let articleDetails = this.props.article.get(articleID); \n\n        if(articleDetails) { \n\n          this.setState({  \n\n            editedArticleID: articleID,  \n\n            articleDetails: articleDetails \n\n          }); \n\n        } else { \n\n          this.setState({ \n\n            articleFetchError: true \n\n          }) \n\n        } \n\n    } \n\n  } \n\n  onDraftJSChange(contentJSON, contentState) { \n\n    let htmlContent = stateToHTML(contentState); \n\n    this.setState({contentJSON, htmlContent}); \n\n  } \n\n  _articleEditSubmit() { \n\n    let currentArticleID = this.state.editedArticleID; \n\n    let editedArticle = { \n\n      _id: currentArticleID, \n\n      articleTitle: this.state.title, \n\n      articleContent: this.state.htmlContent, \n\n      articleContentJSON: this.state.contentJSON \n\n    } \n\n    this.props.articleActions.editArticle(editedArticle); \n\n    this.setState({ articleEditSuccess: true }); \n\n  }\n\n```", "```jsx\nif (articleDetails) { \n\n  this.setState({  \n\n    editedArticleID: articleID,  \n\n    articleDetails: articleDetails \n\n  }); \n\n} else { \n\n  this.setState({ \n\n    articleFetchError: true \n\n  }) \n\n}\n\n```", "```jsx\nrender () { \n\n    if (this.state.articleFetchError) { \n\n      return <h1>Article not found (invalid article's ID \n\n       {this.props.params.articleID})</h1>; \n\n    } else if (!this.state.editedArticleID) { \n\n        return <h1>Loading article details</h1>; \n\n    } else if (this.state.articleEditSuccess) { \n\n      return ( \n\n        <div style={{height: '100%', width: '75%', margin: \n\n         'auto'}}> \n\n          <h3>Your article has been edited successfully</h3> \n\n          <Link to='/dashboard'> \n\n            <RaisedButton \n\n              secondary={true} \n\n              type='submit' \n\n              style={{margin: '10px auto', display: 'block', \n\n               width: 150}} \n\n              label='Done' /> \n\n          </Link> \n\n        </div> \n\n      ); \n\n    } \n\n    let initialWYSIWYGValue = \n\n     this.state.articleDetails.articleContentJSON; \n\n    return ( \n\n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n\n        <h1>Edit an existing article</h1> \n\n        <WYSIWYGeditor \n\n          initialValue={initialWYSIWYGValue} \n\n          name='editarticle' \n\n          title='Edit an article' \n\n          onChangeTextJSON={this._onDraftJSChange} /> \n\n          <RaisedButton \n\n            onClick={this._articleEditSubmit} \n\n            secondary={true} \n\n            type='submit' \n\n            style={{margin: '10px auto', display: 'block', \n\n             width: 150}} \n\n            label={'Submit Edition'} /> \n\n      </div> \n\n    ); \n\n  }\n\n```", "```jsx\n<WYSIWYGeditor \n\n  initialValue={initialWYSIWYGValue} \n\n  name='editarticle' \n\n  title='Edit an article' \n\n  onChangeTextJSON={this._onDraftJSChange} />\n\n```", "```jsx\ndeleteArticle: (response) => { \n\n  return { \n\n    type: 'DELETE_ARTICLE', \n\n    payload: { response: response } \n\n  } \n\n}\n\n```", "```jsx\nimport mapHelpers from '../utils/mapHelpers'; \n\nconst article = (state = {}, action) => { \n\n  switch (action.type) { \n\n    case 'ARTICLES_LIST_ADD': \n\n      let articlesList = action.payload.response; \n\n      return mapHelpers.addMultipleItems(state, articlesList); \n\n    case 'PUSH_NEW_ARTICLE': \n\n      let newArticleObject = action.payload.response; \n\n      return mapHelpers.addItem(state, newArticleObject['_id'], \n\n       newArticleObject); \n\n    case 'EDIT_ARTICLE': \n\n      let editedArticleObject = action.payload.response; \n\n      return mapHelpers.addItem(state, editedArticleObject['_id'], \n\n       editedArticleObject); \n\n    case 'DELETE_ARTICLE': \n\n      let deleteArticleId = action.payload.response; \n\n      return mapHelpers.deleteItem(state, deleteArticleId); \n\n    default: \n\n      return state; \n\n  } \n\nexport default article\n\n```", "```jsx\nimport Popover from 'material-ui/lib/popover/popover'; \n\nImprove the constructor of EditArticleView: \n\nclass EditArticleView extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n    this._onDraftJSChange = this._onDraftJSChange.bind(this); \n\n    this._articleEditSubmit = this._articleEditSubmit.bind(this); \n\n    this._fetchArticleData = this._fetchArticleData.bind(this); \n\n    this._handleDeleteTap = this._handleDeleteTap.bind(this); \n\n    this._handleDeletion = this._handleDeletion.bind(this); \n\n    this._handleClosePopover = \n\n     this._handleClosePopover.bind(this); \n\n    this.state = { \n\n      articleFetchError: null, \n\n      articleEditSuccess: null, \n\n      editedArticleID: null, \n\n      articleDetails: null, \n\n      title: 'test', \n\n      contentJSON: {}, \n\n      htmlContent: '', \n\n      openDelete: false, \n\n      deleteAnchorEl: null \n\n    }; \n\n  }\n\n```", "```jsx\n _handleDeleteTap(event) { \n\n    this.setState({ \n\n      openDelete: true, \n\n      deleteAnchorEl: event.currentTarget \n\n    }); \n\n  } \n\n  _handleDeletion() { \n\n    let articleID = this.state.editedArticleID; \n\n    this.props.articleActions.deleteArticle(articleID); \n\n    this.setState({ \n\n      openDelete: false \n\n    }); \n\n    this.props.history.pushState(null, '/dashboard'); \n\n  } \n\n  _handleClosePopover() { \n\n    this.setState({ \n\n      openDelete: false \n\n    }); \n\n  }\n\n```", "```jsx\nlet initialWYSIWYGValue = \n\n this.state.articleDetails.articleContentJSON; \n\n return ( \n\n   <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n\n     <h1>Edit an exisitng article</h1> \n\n     <WYSIWYGeditor \n\n       initialValue={initialWYSIWYGValue} \n\n       name='editarticle' \n\n       title='Edit an article' \n\n       onChangeTextJSON={this._onDraftJSChange} /> \n\n       <RaisedButton \n\n         onClick={this._articleEditSubmit} \n\n         secondary={true} \n\n         type='submit' \n\n         style={{margin: '10px auto', display: 'block', \n\n          width: 150}} \n\n         label={'Submit Edition'} /> \n\n     <hr /> \n\n     <h1>Delete permanently this article</h1> \n\n       <RaisedButton \n\n         onClick={this._handleDeleteTap} \n\n         label='Delete' /> \n\n       <Popover \n\n         open={this.state.openDelete} \n\n         anchorEl={this.state.deleteAnchorEl} \n\n         anchorOrigin={{horizontal: 'left', vertical: \n\n          'bottom'}} \n\n         targetOrigin={{horizontal: 'left', vertical: 'top'}} \n\n         onRequestClose={this._handleClosePopover}> \n\n         <div style={{padding: 20}}> \n\n           <RaisedButton  \n\n             onClick={this._handleDeletion}  \n\n             primary={true}  \n\n             label=\"Permanent delete, click here\"/> \n\n         </div> \n\n       </Popover> \n\n   </div> \n\n );\n\n```"]