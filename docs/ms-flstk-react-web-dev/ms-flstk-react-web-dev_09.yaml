- en: Continuous Integration with Unit and Behavioral Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单元测试和行为测试进行持续集成
- en: We made it; congratulations! We have created a full-stack app that runs under
    a certain domain name (in this book its *reactjs.space* ). The missing parts in
    the whole setup are the deployments processes. Deployments should be zero downtime.
    We need to have a redundant server of our application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功了！恭喜！我们创建了一个在某个特定域名下运行的全栈应用（在本书中是*reactjs.space*）。整个设置中缺少的部分是部署过程。部署应该是零停机时间的。我们需要一个冗余的服务器来运行我们的应用程序。
- en: We are also missing some steps in our app to make it professionally work as
    minification, unit, and behavioral tests.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序还缺少一些步骤，以使其能够专业地进行缩小、单元和行为测试。
- en: In this chapter, we will introduce you to some additional concepts that are
    required in order to master the full-stack development. The remaining missing
    pieces are left for you as homework.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向你介绍一些额外的概念，这些概念是掌握全栈开发所必需的。其余的缺失部分留给你作为家庭作业。
- en: When to write unit and behavioral tests
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时编写单元测试和行为测试
- en: Generally, there are some advices about when to write unit and/or behavioral
    tests.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，有一些建议关于何时编写单元测试和/或行为测试。
- en: 'We in ReactPoland often have clients who run startups. As a general governance
    for them, we suggest the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在ReactPoland经常有客户是创业公司。作为对他们的一般管理，我们建议以下内容：
- en: If your startup is looking for traction and you need your product in order to
    make it, then don't worry about tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的创业公司正在寻求增长，并且需要你的产品来实现它，那就不要担心测试。
- en: After you have created your **Minimum Viable Product** (**MVP** ), you *must*
    have those tests when expanding your application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在创建了**最小可行产品**（**MVP**）之后，当扩展你的应用程序时，*必须*进行这些测试
- en: If you are a well-established company, which is building an app for your clients
    and you know their needs very well, then you must have tests
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你是一家成熟的公司，为客户构建应用程序，并且非常了解他们的需求，那么你必须进行测试。
- en: The preceding first two points are related to startups and young companies.
    The third point is related mostly to well-established companies.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 前两点与初创公司和年轻公司有关。第三点主要与成熟的公司有关。
- en: Depending on where you and your product are, then you need to decide on your
    own, if it is worth to write the tests.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你和你的产品所处的位置，你需要自己决定是否值得编写测试。
- en: React conventions
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React惯例
- en: There is a project that shows fully how the full-stack development setup should
    be looking like at [http://React JS.co](http://reactjs.co/) .
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个项目完全展示了全栈开发设置应该是什么样子的，网址是[http://React JS.co](http://reactjs.co/)。
- en: Visit this website and learn how to integrate your app with unit and behavioral
    tests and learn up-to-date best conventions about how to make React Redux applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 访问这个网站，学习如何将你的应用程序与单元测试和行为测试集成，并了解有关如何制作React Redux应用程序的最新最佳惯例。
- en: Karma for testing
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试的因果报应
- en: We won't guide you in setting up the tests in this chapter because it's not
    in the scope of this book. The aim of this chapter is intended to present you
    with online resources that will help you to understand the bigger picture.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们不会指导你设置测试，因为这不在本书的范围内。本章的目的是向你介绍在线资源，这些资源将帮助你理解更大的图景。
- en: Karma is the one of most popular tools for unit and behavioral tests. The main
    goal is to bring a productive testing environment while working on any application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Karma是最流行的用于单元测试和行为测试的工具之一。其主要目标是在开发任何应用程序时提供一个高效的测试环境。
- en: There are many features that you are provided with by using this test runner.
    There is a nice video that explains the big picture about Karma at [https://karma-runner.github.io](https://karma-runner.github.io)
    .
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个测试运行器，你可以获得许多功能。有一个很好的视频在[https://karma-runner.github.io](https://karma-runner.github.io)解释了Karma的整体情况。
- en: 'Some of the main features are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一些主要特性如下：
- en: '**Tests on real devices** : You can use real browsers and real devices such
    as phones, tablets, or PhantomJS to run the tests (PhantomJS is a headless WebKit
    scriptable with a JavaScript API; it has fast and native support for various web
    standards: DOM handling, CSS selector, JSON, Canvas, and SVG.) There are different
    environments, but one tool that runs on them all.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在真实设备上进行测试**：您可以使用真实浏览器和真实设备，如手机、平板电脑或PhantomJS来运行测试（PhantomJS是一个无头WebKit，可通过JavaScript
    API进行脚本化；它对各种Web标准具有快速和本地支持：DOM处理、CSS选择器、JSON、Canvas和SVG）。有不同的环境，但有一个工具可以在所有这些环境上运行。'
- en: '**Remote control** : You can run the tests remotely, for example, on each save
    from your IDE, so that you don''t have to do it manually.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程控制**：您可以远程运行测试，例如，在IDE每次保存时，这样您就不必手动运行。'
- en: '**Testing framework agnostic** : You can write your tests in Jasmine, Mocha,
    QUnit, and other frameworks. It''s totally up to you.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试框架不可知**：您可以使用Jasmine、Mocha、QUnit和其他框架编写测试。完全取决于您。'
- en: '**Continuous integration** : Karma works great with CI tools such as Jenkins,
    Travis, or CircleCI.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**：Karma与Jenkins、Travis或CircleCI等CI工具完美配合。'
- en: How to write unit and behavioral tests
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何编写单元测试和行为测试
- en: Let's provide an example of how to set up properly a project in order to have
    an ability to write tests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子，说明如何正确设置项目，以便能够编写测试。
- en: Visit the GitHub repo of the very popular Redux starter kit at [https://github.com/davezuko/react-redux-starter-kit](https://github.com/davezuko/react-redux-starter-kit)
    .
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 访问非常流行的Redux starter kit的GitHub仓库，网址为[https://github.com/davezuko/react-redux-starter-kit](https://github.com/davezuko/react-redux-starter-kit)。
- en: 'Then visit the `package.json` file of this repository. We can find out there
    what the possible commands/scripts are:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后访问此存储库的`package.json`文件。我们可以在那里找到可能的命令/脚本是什么：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can find, after the NPM test that it runs the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在NPM测试后找到它运行以下命令：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can find the configuration file of Karma located at `build/karma.conf` from
    [https://github.com/davezuko/react-redux-starter-kit/blob/master/build/karma.conf.js](https://github.com/davezuko/react-redux-starter-kit/blob/master/build/karma.conf.js)
    .
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`build/karma.conf`中找到Karma的配置文件，网址为[https://github.com/davezuko/react-redux-starter-kit/blob/master/build/karma.conf.js](https://github.com/davezuko/react-redux-starter-kit/blob/master/build/karma.conf.js)。
- en: 'And the content (July 2016) is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 截至内容（2016年7月）如下：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see in `karma.conf.js` they are using Mocha (check the line with
    `"frameworks: [''mocha'']"` ). The rest of the options used in the config files
    are described in the documentation that is available at [http://karma-runner.github.io/1.0/config/configuration-file.html](http://karma-runner.github.io/1.0/config/configuration-file.html)
    . If you are interested in learning the Karma configuration, then `karma.conf.js`
    should be your starting file.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '正如您在`karma.conf.js`中所看到的，他们正在使用Mocha（检查带有`"frameworks: [''mocha'']"`的行）。配置文件中使用的其他选项在文档中有描述，该文档可在[http://karma-runner.github.io/1.0/config/configuration-file.html](http://karma-runner.github.io/1.0/config/configuration-file.html)找到。如果您有兴趣学习Karma配置，那么`karma.conf.js`应该是您的起始文件。'
- en: What is Mocha and why do you need it?
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Mocha，为什么需要它？
- en: In the Karma config file, we have found that it uses Mocha as the JS testing
    framework ( [https://mochajs.org/](https://mochajs.org/) ). Let's analyze the
    codebase.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Karma配置文件中，我们发现它使用Mocha作为JS测试框架（[https://mochajs.org/](https://mochajs.org/)）。让我们分析代码库。
- en: 'We can find `dir_test : ''tests''` in the `config/index.js` file, so based
    on that variable, Karma''s `config` knows that the Mocha''s tests are located
    in the `tests/test-bundler.js` file.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以在`config/index.js`文件中找到`dir_test: ''tests''`，因此基于该变量，Karma的`config`知道Mocha的测试位于`tests/test-bundler.js`文件中。'
- en: 'Let''s see what is in the `tests` directory at https://github.com/davezuko/react-redux-starter-kit/tree/master/tests
    . As you can see in the `test-bundler.js` file, there are plenty of dependencies:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在https://github.com/davezuko/react-redux-starter-kit/tree/master/tests的`tests`目录中有什么。正如您在`test-bundler.js`文件中所看到的，有大量的依赖项：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s roughly describe what is used there:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们大致描述一下那里使用了什么：
- en: Babel-polyfill emulates a full ES6 environment
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Babel-polyfill模拟了完整的ES6环境
- en: Sinon is a standalone and test framework agnostic JavaScript test for spies,
    stubs, and mocks
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sinon是一个独立的、与测试框架无关的JavaScript测试框架，用于间谍、存根和模拟
- en: Spies are useful if in a tested piece of code, you call for an other external's
    services. You can check if it was called, what parameters it had, if it returned
    something, or even how many times it was called!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在被测试的代码中调用了其他外部服务，间谍是很有用的。您可以检查它是否被调用，它有什么参数，它是否返回了东西，甚至它被调用了多少次！
- en: The stubs concept is very similar to the spies concept. The biggest difference
    is that stubs replace the target function. They also replace the called code with
    custom behavior (replacing it) such as throwing exceptions or returning a value.
    They are also able to call a callback function that has been provided as a parameter.
    Stubs code returns a specified result.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 存根的概念与间谍的概念非常相似。最大的区别在于存根替换了目标函数。它们还用自定义行为（替换它）替换了被调用的代码，比如抛出异常或返回一个值。它们还能够调用作为参数提供的回调函数。存根代码返回指定的结果。
- en: Mocks are kind of *smarter stubs* . Mocks are used for asserting data and should
    never return data, when a stub is used simply for returning data and should never
    assert. Mocks can file your tests (when asserting), while stubs can't.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Mocks是一种*更智能的存根*。 Mocks用于断言数据，不应返回数据，而存根仅用于返回数据，不应断言。 Mocks可以在断言时破坏您的测试，而存根则不能。
- en: Chai is the BDD/TDD assertion framework for Node.js and the browser. In the
    previous example, it has been paired with the Mocha testing framework.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Chai是用于Node.js和浏览器的BDD/TDD断言框架。在前面的例子中，它已经与Mocha测试框架配对使用了。
- en: Testing CoreLayout step-by-step
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逐步测试CoreLayout
- en: Let's analyze the `CoreLayout.spec.js` tests. This component has a role similar
    to the CoreLayout in the publishing app, and so it's a good way to describe how
    you can start writing tests for your application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析`CoreLayout.spec.js`的测试。这个组件在发布应用程序中扮演着与CoreLayout类似的角色，因此这是描述如何开始为应用程序编写测试的好方法。
- en: The CoreLayout tests file location (July 2016) is available at [https://github.com/davezuko/react-redux-starter-kit/blob/master/tests/layouts/CoreLayout.spec.js](https://github.com/davezuko/react-redux-starter-kit/blob/master/tests/layouts/CoreLayout.spec.js)
    .
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: CoreLayout测试文件位置（2016年7月）可在[https://github.com/davezuko/react-redux-starter-kit/blob/master/tests/layouts/CoreLayout.spec.js](https://github.com/davezuko/react-redux-starter-kit/blob/master/tests/layouts/CoreLayout.spec.js)找到。
- en: 'The content is as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 内容如下：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `react-addons-test-utils` library makes it easy to test React components
    with Mocha. The method that we used in the preceding example is **shallow rendering,**
    which is available at [https://facebook.github.io/react/docs/test-utils.html#shallow-rendering](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering)
    .
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-addons-test-utils`库使得使用Mocha轻松测试React组件成为可能。我们在前面的例子中使用的方法是**浅渲染**，可以在[https://facebook.github.io/react/docs/test-utils.html#shallow-rendering](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering)找到。'
- en: 'This feature helps us test the `render` function and is the result of rendering
    a one level deep in our components. Then we can assert facts about what its `render`
    method returns, as shown in the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能帮助我们测试`render`函数，并且是在我们的组件中渲染一级深度的结果。然后我们可以断言关于它的`render`方法返回的事实，如下所示：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: First, we provide a component in the `shallowRender` method (in this example,
    it will be CoreLayout). Later, we use `method.render` and then we return the output
    with the use of `renderer.getRenderOutput` .
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在`shallowRender`方法中提供一个组件（在这个例子中，它将是CoreLayout）。然后，我们使用`method.render`，然后我们使用`renderer.getRenderOutput`返回输出。
- en: 'In our case, that function is called here (note that the semicolons are missing
    in the following example, because the starter that we are describing has different
    linting options than ours):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，这个函数在这里被调用（请注意，以下示例中缺少分号，因为我们描述的起始器与我们的不同的linting选项）：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can find that the `_component` variable contains the result of the `renderer.getRenderOutput`
    . This value is asserted as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以发现`_component`变量包含了`renderer.getRenderOutput`的结果。这个值被断言如下：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In that test, we test our code if it returns `div` . But if you visit the documentation,
    then you can find the code example as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个测试中，我们测试我们的代码是否返回`div`。但是如果你访问文档，你可以找到以下代码示例：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also find the assertion example as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在下面找到断言的例子：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see in the preceding two examples, you can expect a type as `div`
    or you can expect more specific information about the CoreLayout return (depending
    on your needs).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的两个例子中，你可以期望一个类型为`div`，或者你可以期望更具体的关于CoreLayout返回的信息（取决于你的需求）。
- en: 'The first test asserts the type of a component (if it is `div` ), and the second
    example test asserts if a CoreLayout returns correct components that are as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个测试断言组件的类型（如果是`div`），第二个例子测试断言CoreLayout返回的正确组件如下：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first one is a unit test because this isn't testing exactly if users see
    a correct thing. The second one is a behavioral test.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是单元测试，因为这并不完全是在测试用户是否看到了正确的东西。第二个是行为测试。
- en: Generally, Packt has many books on **Behavior-Driven Development** (**BDD**
    ) and **Test-Driven Development** (**TDD** ).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Packt有许多关于**行为驱动开发**（**BDD**）和**测试驱动开发**（**TDD**）的书籍。
- en: Continuous integration with Travis
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Travis进行持续集成
- en: In the given example, you can find a `.yml` file at [https://github.com/davezuko/react-redux-starter-kit/blob/master/.travis.yml](https://github.com/davezuko/react-redux-starter-kit/blob/master/.travis.yml)
    .
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的例子中，你可以在[https://github.com/davezuko/react-redux-starter-kit/blob/master/.travis.yml](https://github.com/davezuko/react-redux-starter-kit/blob/master/.travis.yml)找到一个`.yml`文件。
- en: This is a configuration file for Travis. What is this? It's a hosted CI service
    used to build and test software. Generally, it's a tool that is free for open
    source projects to use. If you want a hosted Travis CI for private projects, then
    their fees apply.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Travis的配置文件。这是什么？这是一个托管的CI服务，用于构建和测试软件。通常，这是一个免费供开源项目使用的工具。如果你想要一个私人项目的托管Travis
    CI，那么就需要支付费用。
- en: Configuration for Travis is made by adding the `.travis.yml` file, as mentioned
    earlier. The YAML form is a text file that is placed to the root directory of
    your project. This file's content describes all the steps that have to be done
    to test, install, and build a project.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，通过添加`.travis.yml`文件来配置Travis。YAML形式是一个文本文件，放置在项目的根目录。这个文件的内容描述了测试、安装和构建项目所需的所有步骤。
- en: The Travis CI goal is to make every commit to your GitHub account and to run
    the tests, and when the tests are passing, you can deploy the app to a staging
    server on an Amazon AWS. The continuous integration is not in the scope of this
    book, so if you are interested in adding this step to the whole publishing app
    project, there are books related to this as well.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI的目标是使每次提交到你的GitHub账户并运行测试，当测试通过时，你可以将应用部署到Amazon AWS上的一个暂存服务器上。持续集成不在本书的范围内，所以如果你有兴趣将这一步添加到整个发布应用项目中，也有相关的书籍。
- en: 读累了记得休息一会哦~
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Our publishing app is working. As with any digital project, there are still
    plenty of stuff that we can improve in order to have a better end product. For
    example, the following homework is for you:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的发布应用程序正在运行。与任何数字项目一样，我们仍然有很多可以改进的地方，以便获得更好的最终产品。例如，以下作业是给你的：
- en: Add a minifaction on the frontend side so that it will be lighter when loading
    over the Internet.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前端添加一个压缩，这样在互联网上加载时会更轻。
- en: As mentioned earlier, you need to start using Karma and Mocha for unit and behavioral
    tests. An example setup was described in detail in this chapter.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如前面提到的，您需要开始使用Karma和Mocha进行单元和行为测试。本章节详细描述了一个示例设置。
- en: You need to choose a CI tool such as Travis, create your YML file, and prepare
    the environment on AWS.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要选择一个CI工具，比如Travis，创建您的YML文件，并在AWS上准备环境。
- en: That is all you can additionally do besides all that has been covered in the
    350+ pages of this book, where you built a full-stack React + Redux + Falcor +
    Node + Express + Mongo application. I hope to keep in touch with you; follow me
    on Twitter/GitHub in order to keep in touch or send me an e-mail if you have any
    additional questions.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是除了本书350多页涵盖的所有内容之外，你可以额外做的。在这本书中，你构建了一个全栈React + Redux + Falcor + Node + Express
    + Mongo应用程序。我希望能和你保持联系；在Twitter/GitHub上关注我，以便保持联系，或者如果你有任何额外的问题，给我发电子邮件。
- en: Good luck in getting your hands dirty with the next commercial full-stack applications
    and see you again.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你好运，下一个商业全栈应用程序的开发顺利，再见。
