- en: Server-Side Rendering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端渲染
- en: Universal JavaScript, or isomorphic JavaScript, are different names for a feature
    that we are going to implement in this chapter. To be more exact, we will develop
    our app and render the app's pages on both the server and client side. It will
    be different to **Angular1** or Backbone single-page apps which are mainly rendered
    on the client side. Our approach is more complicated in technological terms as
    you need to deploy your full-stack skills which work on server-side rendering,
    but having this experience will make you a more desirable programmer so you can
    advance your career to the next level--you will be able to charge more for your
    skills on the market.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通用JavaScript或同构JavaScript是我们将在本章实现的一个功能的不同名称。更确切地说，我们将开发我们的应用程序，并在服务器端和客户端渲染应用程序的页面。这与主要在客户端渲染的**Angular1**或Backbone单页面应用程序不同。我们的方法在技术上更加复杂，因为您需要部署在服务器端渲染上工作的全栈技能，但拥有这种经验将使您成为一个更受欢迎的程序员，因此您可以将自己的职业发展到下一个水平--您将能够在市场上更高价地出售您的技能。
- en: When the server side is worth implementing
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时值得实施服务器端
- en: Server-side rendering is a very useful feature in text content (like news portals)
    start-ups/companies, because it helps achieve better indexing by different search
    engines. It's an essential feature for any news and content-heavy website, because
    it helps grow organic traffic. In this chapter, we will also run our app with
    server-side rendering. Other companies where server-side rendering may be useful
    are entertainment businesses where users have less patience and they might close
    the browser if a webpage is loading slowly. In general, all **B2C** (consumer
    facing) apps should use server-side rendering to improve the experience for the
    people who visit their websites.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端渲染是文本内容（如新闻门户）初创公司的一个非常有用的功能，因为它有助于实现不同搜索引擎的更好索引。对于任何新闻和内容丰富的网站来说，这是一个必不可少的功能，因为它有助于增加有机流量。在本章中，我们还将使用服务器端渲染运行我们的应用程序。其他可能需要服务器端渲染的公司包括娱乐企业，用户对加载速度不耐烦，如果网页加载缓慢，他们可能会关闭浏览器。总的来说，所有面向消费者的应用程序都应该使用服务器端渲染来改善访问其网站的人的体验。
- en: 'Our focus in this chapter will include the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们的重点将包括以下内容：
- en: Making the whole server-side code rearrangements to prepare for the server-side
    rendering
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对整个服务器端代码进行重新排列，以准备进行服务器端渲染
- en: Starting to use react-dom/server and its `renderToString` method
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用react-dom/server及其`renderToString`方法
- en: '`RoutingContext` and match for the react-router working on the server side'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RoutingContext`和react-router在服务器端的匹配工作'
- en: Improving the client-side application so it will be optimized for an isomorphic
    JavaScript application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化客户端应用程序，使其适用于同构JavaScript应用程序
- en: Are you ready? Our first step is to mock the database's response on the backend
    (we will create a real DB query after whole server-side rendering works correctly
    on the mocked data).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好了吗？我们的第一步是在后端模拟数据库的响应（在整个服务器端渲染在模拟数据上正常工作后，我们将创建一个真实的数据库查询）。
- en: Mocking the database response
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟数据库响应
- en: 'First of all, we will mock our database response on the backend in order to
    prepare to go into server-side rendering directly; we will change it later in
    this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在后端模拟我们的数据库响应，以便直接进行服务器端渲染；我们将在本章后面更改它：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `fetchServerSide.js` file will consist of all functions that will fetch
    data from our database in order to make the server side work.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetchServerSide.js`文件将包括所有从数据库获取数据以使服务器端工作的函数。'
- en: 'As mentioned earlier, we will mock it for now, with the following code in `fetchServerSide.js`
    :'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们现在将对其进行模拟，在`fetchServerSide.js`中使用以下代码：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The goal of making this mocked object is that we will be able to see if our
    server-side rendering works correctly after implementation because, as you have
    probably already spotted, we have added `SERVER-SIDE` at the beginning of each
    title and content--so it will help us to learn if our app is getting the data
    from server-side rendering. Later, this function will be replaced with a query
    to MongoDB.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 制作这个模拟对象的目的是，我们将能够在实现后正确查看我们的服务器端渲染是否正常工作，因为你可能已经注意到，我们在每个标题和内容的开头都添加了`SERVER-SIDE`，所以它将帮助我们了解我们的应用是否从服务器端渲染中获取数据。稍后，这个函数将被替换为对MongoDB的查询。
- en: The next thing that will help us implement the server-side rendering is to make
    a `handleServerSideRender` function that will be triggered each time a request
    hits the server.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助我们实现服务器端渲染的下一件事是创建一个`handleServerSideRender`函数，每当请求命中服务器时都会触发。
- en: 'In order to make the `handleServerSideRender` trigger every time the frontend
    calls our backend, we need to use Express middleware using `app.use` . So far,
    we have used some external libraries such as:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`handleServerSideRender`在前端调用我们的后端时每次触发，我们需要使用Express中间件使用`app.use`。到目前为止，我们已经使用了一些外部库，比如：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For the first time in this book, we will write our own, small, middleware function
    that behaves in a similar way to `cors` or `bodyParser` (the external `libs` that
    are also middleware).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将首次编写自己的小型中间件函数，其行为类似于`cors`或`bodyParser`（也是中间件的外部`libs`）。
- en: 'Before doing so, let''s import the dependencies that are required in React''s
    server-side rendering (`server/server.js` ):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这之前，让我们导入React服务器端渲染所需的依赖项（`server/server.js`）：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So, after adding all those imports of `server/server.js` , the file will look
    as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在添加了所有这些`server/server.js`的导入之后，文件将如下所示：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Most of that stuff explained here is similar to client-side development in
    previous chapters. What is important is to import history in the given way, as
    in the example: `import * as hist from ''history''` . The `RoutingContext` , match
    is a way of using `React-Router` on the server side. The `renderToStaticMarkup`
    function is going to generate an HTML markup for us on the server side.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里解释的大部分内容与前几章的客户端开发类似。重要的是以给定的方式导入history，就像例子中的`import * as hist from 'history'`一样。`RoutingContext`，`match`是在服务器端使用`React-Router`的一种方式。`renderToStaticMarkup`函数将在服务器端为我们生成HTML标记。
- en: 'After we have added the new imports, then under Falcor''s middleware setup:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了新的导入之后，在Falcor的中间件设置下：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Under that `model.json` code, add the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在`model.json`代码下面，添加以下内容：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `app.use(handleServerSideRender)` event is fired each time the server side
    receives a request from a client''s application. Then we will prepare the empty
    functions that we will use:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.use(handleServerSideRender)`事件在服务器端每次接收来自客户端应用的请求时触发。然后我们将准备我们将使用的空函数：'
- en: '`handleServerSideRender` : It will use `renderToString` in order to create
    a valid server-side HTML markup'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handleServerSideRender`：它将使用`renderToString`来创建有效的服务器端HTML标记'
- en: '`renderFullHtml` : It is a helper function that will embed our new React''s
    HTML markup into a whole HTML document as we will see later'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`renderFullHtml`：这是一个辅助函数，将我们新的React的HTML标记嵌入到整个HTML文档中，我们稍后会看到'
- en: The handleServerSideRender function
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`handleServerSideRender`函数'
- en: First, we are going to create a new Redux store instance that will be created
    on every call to the backend. The main goal of this is to give the initial state
    information to our application so it can create a valid markup based on the current
    request.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个新的Redux存储实例，该实例将在每次调用后端时创建。这样做的主要目的是为我们的应用提供初始状态信息，以便它可以根据当前请求创建有效的标记。
- en: We will use the `Provider` component that we have already used in our client-side's
    app that will be wrapping the `Root` component. That will make the store available
    to all our components.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`Provider`组件，该组件已经在我们客户端应用程序中使用，将包装`Root`组件。这将使存储可用于我们所有的组件。
- en: The most important part here is `ReactDOMServer.renderToString()` to render
    the initial HTML markup of our application, before we send the markup to the client
    side.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最重要的部分是`ReactDOMServer.renderToString()`，用于在将标记发送到客户端之前，渲染应用程序的初始HTML标记。
- en: The next step is to get the initial state from the Redux store by using the
    `store.getState()` function. The initial state will be passed along in our `renderFullHtml`
    function, as you will learn in a moment.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是通过使用`store.getState()`函数从Redux存储中获取初始状态。初始状态将在我们的`renderFullHtml`函数中传递，您一会儿会了解到。
- en: 'Before we work on the two new functions (`handleServerSideRender` and `renderFullHtml`
    ), replace this in `server.js` :'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始处理两个新功能（`handleServerSideRender` 和 `renderFullHtml`）之前，请在`server.js`中进行以下替换：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Replace with the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下替换：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That's everything in our `dist` project. It will be available as a static file
    under the localhost address (`http://localhost:3000/static/app.js*` ). This will
    help us make a single-page app after initial server-side rendering.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们`dist`项目中的所有内容。它将作为静态文件在本地主机地址（`http://localhost:3000/static/app.js*`）下可用。这将帮助我们在初始服务器端渲染后创建单页面应用程序。
- en: 'Also make sure that `app.use(''/static'', express.static(''dist''));` is placed
    directly under `app.use(bodyParser.urlencoded({extended: false }));` . Otherwise
    it may not work if you misplace this in the `server/server.js` file.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '同时确保`app.use(''/static'', express.static(''dist''));`直接放在`app.use(bodyParser.urlencoded({extended:
    false }));`下面。否则，如果您将其放错位置在`server/server.js`文件中，可能无法正常工作。'
- en: 'After you are done with the preceding work of `express.static` , let''s make
    this function more complete:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成`express.static`的前述工作后，让我们将这个函数做得更完整：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Replace the preceding empty function with the following improved version:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下改进版本替换前面的空函数：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In short, this HTML code will be sent by our server when a user hits the website
    for the first time so we need to create the HTML markup with a body and head in
    order to make it work. The server-side publishing app''s header is here just temporarily,
    to check if we are fetching the server-side HTML template correctly. Later you
    can find `$html` with the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，当用户第一次访问网站时，这段HTML代码将由我们的服务器发送，因此我们需要创建带有body和head的HTML标记，以使其正常工作。服务器端发布应用程序的标题只是暂时的，用于检查我们是否正确获取了服务器端HTML模板。稍后，您可以通过以下命令找到`$html`：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notice that we are using ES6 templates (Google ES6 template literals) syntax
    with `&grave;` .
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用ES6模板（Google ES6模板文字）语法与`&grave;`。
- en: In this, we will later put the value that is generated by the `renderToStaticMarkup`
    function. The last step in the `renderFullPage` function is to give the initial,
    server-side rendering state in the window with `window.INITIAL_STATE = ${JSON.stringify(initialState)}`
    so the app can work correctly on the client-side with data fetched on the backend
    when the first request to the server has been made.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将稍后放置由`renderToStaticMarkup`函数生成的值。`renderFullPage`函数的最后一步是在窗口中使用`window.INITIAL_STATE
    = ${JSON.stringify(initialState)}`提供初始的服务器端渲染状态，以便在第一次向服务器发出请求时，应用程序可以在客户端正确工作并获取后端数据。
- en: 'Okay, next let''s focus on the `handleServerSideRender` function by replacing
    the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，接下来让我们专注于`handleServerSideRender`函数，通过以下替换：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Replace with the more complete version of the function as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下更完整版本的函数替换：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `let initMOCKstore = fetchServerSide();` expression is fetching data from
    MongoDB (mocked for now, to be improved later). Next, we create a server-side's
    Redux story with `store = createStore(rootReducer, initMOCKstore)` . We also need
    to prepare a correct location for our app's user consumable by the react-router
    with `location = hist.createLocation(req.path)` (in `req.path` there is a simple
    path which is in the browser; `/register` or `/login` or simply `main page /`
    ). The function `match` is provided by the react-router in order to match the
    correct route on the server side.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`let initMOCKstore = fetchServerSide();`表达式正在从MongoDB获取数据（目前是模拟的，以后会改进）。接下来，我们使用`store
    = createStore(rootReducer, initMOCKstore)`创建了服务器端的Redux存储。我们还需要准备一个正确的位置，供react-router在服务器端使用，使用`location
    = hist.createLocation(req.path)`（在`req.path`中有一个简单的路径，就在浏览器中；`/register`或`/login`或简单地`主页/`）。`match`函数由react-router提供，以便在服务器端匹配正确的路由。'
- en: 'When we have matched the route on the server side, we will see the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在服务器端匹配路由时，我们将看到以下内容：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see here, we are creating the server-side HTML markup with `renderToStaticMarkup`
    . Inside this function, there is a Provider with the store that has previously
    been fetched with the `let initMOCKstore = fetchServerSide()` . Inside the Redux
    Provider we have `RoutingContext` which simply passes all required props down
    into our app so we can have a correctly-created markup server side.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在此处所见，我们使用`renderToStaticMarkup`创建了服务器端的HTML标记。在这个函数内部，有一个带有之前使用`let initMOCKstore
    = fetchServerSide()`获取的存储的Provider。在Redux Provider内部，我们有`RoutingContext`，它简单地将所有所需的props传递到我们的应用程序中，以便我们可以在服务器端正确创建标记。
- en: After all that, we only need to prepare `initialState` of our Redux Store with
    `const initialState = store.getState();` and later `let fullHTML = renderFullPage(html,
    initialState);` to have everything we need to send it to the client with `res.send(fullHTML)`
    .
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这之后，我们只需要使用`const initialState = store.getState();`准备Redux Store的`initialState`，然后使用`let
    fullHTML = renderFullPage(html, initialState);`来获取发送到客户端所需的一切，使用`res.send(fullHTML)`。
- en: We are done with server-side preparations.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了服务器端的准备工作。
- en: Double-check server/server.js
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 再次检查`server/server.js`
- en: 'Before we go forward with the client-side development, we will double-check
    `server/server.js` as the order of our code is important and this is one of the
    error-prone files:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行客户端开发之前，我们将再次检查`server/server.js`，因为我们的代码顺序很重要，而这是一个容易出错的文件之一：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here you have everything you need for the server-side rendering on the backend.
    Let's move on to the frontend side improvements.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您拥有了后端服务器端渲染所需的一切。让我们继续进行前端改进。
- en: Frontend tweaks to make the server-side rendering work
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前端调整以使服务器端渲染工作
- en: 'We need some tweaks to the frontend. First of all, go to the file in `src/layouts/CoreLayout.js`
    and add the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对前端进行一些调整。首先，转到`src/layouts/CoreLayout.js`文件并添加以下内容：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'From the preceding code, the new thing to add is:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中，要添加的新内容是：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Besides this, improve the `render` function and export `default` to:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，改进`render`函数并导出`default`到：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We need the changes in the `CoreLayout` component because the Material UI design
    by default is checking on what browser you run it in and as you can predict, there
    is no browser on the server side so we need to provide the information in our
    app on whether `{ userAgent: ''all'' }` is set to `all` . It will help avoid warnings
    in the console about the server-side HTML markup being different from the one
    generated by the client-side browser.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '我们需要在`CoreLayout`组件中进行更改，因为Material UI设计默认会检查您在哪个浏览器上运行它，正如您可以预测的那样，在服务器端没有浏览器，因此我们需要在我们的应用程序中提供关于`{userAgent:
    ''all''}`是否设置为`all`的信息。这将有助于避免控制台中关于服务器端HTML标记与客户端浏览器生成的标记不同的警告。'
- en: 'We also need to improve our component `WillMount/_fetch` function in the publishing
    app''s component, so it will be fired only on the frontend. Go to the `src/layouts/PublishingApp.js`
    file then replace this old code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要改进发布应用程序组件`WillMount/_fetch`函数，这样它只会在前端触发。转到`src/layouts/PublishingApp.js`文件，然后用以下旧代码替换它：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Replace it with the new improved code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 用新的改进代码替换它：
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: That `if(typeof window !== 'undefined')` statement checks if there is a window
    (on the server-side, the window will be undefined). If yes then it starts fetching
    data via Falcor (when on the client side).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该`if(typeof window !== 'undefined')`语句检查是否有窗口（在服务器端，窗口将为未定义）。如果是，则它将通过Falcor开始获取数据（在客户端时）。
- en: 'Next, go to the `containers/Root.js` file and change it to the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，转到`containers/Root.js`文件，并将其更改为以下内容：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you can see, we have deleted this part of the code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已删除了代码的这部分：
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And we have changed this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 并且我们已经改变了这个：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 变成这样：
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Why do we need to do all this? It helps us to get rid of the `/#/` sign from
    our client-side browser's URL so next time when we hit, for example, `http://localhost:3000/register`
    then our `server.js` can see the user's current URL with the `req.path` (in our
    case when hitting the `http://localhost:3000/register` the `req.path` is then
    equal to `/register` ) that we use in the `handleServerSideRender` function.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们需要做所有这些？这有助于我们摆脱客户端浏览器URL中的`/#/`标记，因此下次当我们访问，例如，`http://localhost:3000/register`时，我们的`server.js`可以看到用户当前的URL，并使用`req.path`（在我们的情况下，当访问`http://localhost:3000/register`时，`req.path`等于`/register`），我们在`handleServerSideRender`函数中使用它。
- en: 'After all that, you will then be able to see the following in your client browser:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成所有这些之后，您将能够在客户端浏览器中看到以下内容：
- en: '![](Image00026.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00026.jpg)'
- en: 'After 1-2 seconds it will change to the following because of firing the real
    `this._fetch()` function in the `PublishingApp.js` :'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 1-2秒后，由于在`PublishingApp.js`中触发了真正的`this._fetch()`函数，它将变成以下内容：
- en: '![](Image00027.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00027.jpg)'
- en: 'Of course, you can see the server-rendered markup when you go to the page''s
    HTML source:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当您查看页面的HTML源代码时，当然可以看到服务器渲染的标记：
- en: '![](Image00028.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00028.jpg)'
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have done the basic server-side rendering, as you can see in the screenshots.
    The only missing piece in the server-side rendering is to fetch real data from
    our MongoDB--that will be implemented in the next chapter (we will unlock this
    fetching in `server/fetchServerSide.js` ).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了基本的服务器端渲染，正如您在屏幕截图中所看到的。服务器端渲染中唯一缺失的部分是从我们的MongoDB获取真实数据--这将在下一章中实现（我们将在`server/fetchServerSide.js`中解锁此获取）。
- en: After unmocking the server side's database query, we will start working on improving
    the whole look of our app and implement some key features that are important for
    us such as adding/editing/deleting an article.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在取消模拟服务器端的数据库查询之后，我们将开始改进应用程序的整体外观，并实现一些对我们重要的关键功能，例如添加/编辑/删除文章。
- en: 读累了记得休息一会哦~
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
