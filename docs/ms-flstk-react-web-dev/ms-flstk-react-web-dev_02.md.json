["```jsx\n{'iss': 'PublishginAppIssuer','name': 'John Doe','admin':true}\n\n```", "```jsx\n{ \n\n'typ': 'JWT', \n\n'alg': 'HS256' \n\n}\n\n```", "```jsx\n{ \n\n'iss': 'http://theIssuerAddress', \n\n'exp': '1450819372', \n\n'aud': 'http://myAppAddress', \n\n'sub': 'publishingApp', \n\n'scope': ['read'] \n\n}\n\n```", "```jsx\n$ [[you are in the root directory of your project]]\n\n$ touch initPubUsers.js\n\n```", "```jsx\n[ \n\n  { \n\n'username' : 'admin', \n\n'password' : 'c5a0df4e293953d6048e78bd9849ec0ddce811f0b29f72564714e474615a7852', \n\n'firstName' : 'Kamil', \n\n'lastName' : 'Przeorski', \n\n'email' : 'kamil@mobilewebpro.pl', \n\n'role' : 'admin', \n\n'verified' : false, \n\n'imageUrl' : 'http://lorempixel.com/100/100/people/' \n\n  } \n\n]\n\n```", "```jsx\nmongoimport --db local --collection pubUsers --jsonArrayinitPubUsers.js --host=127.0.0.1\n\n```", "```jsx\n2009-04-03T11:36:00.566+0200  connected to: 127.0.0.1\n\n2009-04-03T11:36:00.569+0200  imported 1 document\n\n```", "```jsx\n$ cd server\n\n$ touch configSecret.js\n\n```", "```jsx\nexport default { \n\n'secret': process.env.JWT_SECRET || 'devSecretGoesHere' \n\n}\n\n```", "```jsx\n$ cd server\n\n```", "```jsx\napp.use(bodyParser.urlencoded({extended: false}));\n\n```", "```jsx\nimport http from 'http'; \n\nimport express from 'express'; \n\nimport cors from 'cors'; \n\nimport bodyParser from 'body-parser'; \n\nimport mongoose from 'mongoose'; \n\nimport falcor from 'falcor'; \n\nimport falcorExpress from 'falcor-express'; \n\nimport Router from 'falcor-router'; \n\nimport routes from './routes.js'; \n\nvar app = express(); \n\napp.server = http.createServer(app); \n\n// CORS - 3rd party middleware \n\napp.use(cors()); \n\n// This is required by falcor-express middleware to work correctly with falcor-browser \n\napp.use(bodyParser.json({extended: false})); \n\napp.use(bodyParser.urlencoded({extended: false})); \n\n```", "```jsx\n$ touch routesSession.js \n\n```", "```jsx\nexport default [ \n\n  {  \n\n    route: ['login'] , \n\n    call: (callPath, args) => \n\n      { \n\n      const { username, password } = args[0]; \n\n      const userStatementQuery = { \n\n          $and: [ \n\n              { 'username': username }, \n\n              { 'password': password } \n\n          ] \n\n        } \n\n      } \n\n  } \n\n];\n\n```", "```jsx\nconst { username, password } = args[0];\n\n```", "```jsx\nconst userStatementQuery = { \n\n  $and: [ \n\n      { 'username': username }, \n\n      { 'password': password } \n\n  ] \n\n}\n\n```", "```jsx\n$ [[we are in the server/ directory]]\n\n$ touch configMongoose.js\n\n```", "```jsx\nimport mongoose from 'mongoose'; \n\nconst conf = { \n\n  hostname: process.env.MONGO_HOSTNAME || 'localhost', \n\n  port: process.env.MONGO_PORT || 27017, \n\n  env: process.env.MONGO_ENV || 'local', \n\n}; \n\nmongoose.connect(&grave;mongodb://${conf.hostname}:  \n\n${conf.port}/${conf.env}&grave;); \n\nconst articleSchema = { \n\narticleTitle:String, \n\narticleContent:String \n\n}; \n\nconst Article = mongoose.model('Article', articleSchema,  \n\n'articles'); \n\nexport default { \n\n  Article \n\n};\n\n```", "```jsx\nimport mongoose from 'mongoose'; \n\nmongoose.connect('mongodb://localhost/local'); \n\nconst articleSchema = { \n\narticleTitle:String, \n\narticleContent:String \n\n}; \n\nconst Article = mongoose.model('Article', articleSchema,  \n\n'articles');\n\n```", "```jsx\nimport configMongoosefrom './configMongoose'; \n\nimport sessionRoutes from './routesSession'; \n\nconst Article = configMongoose.Article;\n\n```", "```jsx\nconst PublishingAppRoutes = [ \n\n    ...sessionRoutes, \n\n  { \n\n  route: 'articles.length',\n\n```", "```jsx\nHash: eeeb09711c820a7978d5 \n\nVersion2,: webpack 1.12.14 \n\nTime: 2609ms \n\n Asset    Size  Chunks             Chunk Names \n\napp.js  1.9 MB       0  [emitted]  main \n\n   [0] multi main 40 bytes {0} [built] \n\n    + 634 hidden modules \n\nStarted on port 3000\n\n```", "```jsx\nconst userSchema = { \n\n'username' : String, \n\n'password' : String, \n\n'firstName' : String, \n\n'lastName' : String, \n\n'email' : String, \n\n'role' : String, \n\n'verified' : Boolean, \n\n'imageUrl' : String \n\n}; \n\nconst User = mongoose.model('User', userSchema, 'pubUsers'); \n\nexport default { \n\n  Article, \n\n  User \n\n};\n\n```", "```jsx\nimport configMongoosefrom './configMongoose'; \n\nconst User = configMongoose.User;\n\n```", "```jsx\n$ npmi --save jsonwebtoken crypto\n\n```", "```jsx\nimport jwt from 'jsonwebtoken'; \n\nimport crypto from 'crypto'; \n\nimport jwtSecret from './configSecret';\n\n```", "```jsx\nconst saltedPassword = password+'pubApp';  \n\n// pubApp is our salt string \n\nconst saltedPassHash = crypto \n\n.createHash('sha256') \n\n.update(saltedPassword) \n\n.digest('hex'); \n\nconst userStatementQuery = { \n\n  $and: [ \n\n      { 'username': username }, \n\n      { 'password': saltedPassHash } \n\n  ] \n\n}\n\n```", "```jsx\nreturn User.find(userStatementQuery, function(err, user) { \n\n   if (err) throw err; \n\n }).then((result) => { \n\n   if(result.length) { \n\n     return null;  \n\n     // SUCCESSFUL LOGIN mocked now (will implement next) \n\n   } else { \n\n     // INVALID LOGIN \n\n     return [ \n\n       { \n\n         path: ['login', 'token'],  \n\n         value: \"INVALID\" \n\n       }, \n\n       { \n\n         path: ['login', 'error'],  \n\n         value: \"NO USER FOUND, incorrect login  \n\n         information\" \n\n       } \n\n     ]; \n\n   } \n\n   return result; \n\n });\n\n```", "```jsx\n return [ \n\n    { \n\n      path: ['login', 'token'],  \n\n      value: \"INVALID\" \n\n    }, \n\n    { \n\n      path: ['login', 'error'],  \n\n      value: 'NO USER FOUND, incorrect login  \n\n      information' \n\n    } \n\n  ];\n\n```", "```jsx\nreturn null; // SUCCESSFUL LOGIN mocked now (will implement next)\n\n```", "```jsx\nconst role = result[0].role; \n\nconst userDetailsToHash = username+role; \n\nconst token = jwt.sign(userDetailsToHash, jwtSecret.secret); \n\nreturn [ \n\n  { \n\n    path: ['login', 'token'], \n\n    value: token \n\n  }, \n\n  { \n\n    path: ['login', 'username'], \n\n    value: username \n\n  }, \n\n  { \n\n    path: ['login', 'role'], \n\n    value: role \n\n  }, \n\n  { \n\n    path: ['login', 'error'], \n\n    value: false \n\n  } \n\n];\n\n```", "```jsx\n$ npmi --save react-router@1.0.0redux-simple-router@0.0.10redux-thunk@1.0.0\n\n```", "```jsx\n$ cd src\n\n$ mkdir routes\n\n$ cd routes\n\n$ touch index.js\n\n```", "```jsx\nimport React  from 'react'; \n\nimport {Route, IndexRoute} from 'react-router'; \n\nimport CoreLayout  from '../layouts/CoreLayout'; \n\nimport PublishingApp  from '../layouts/PublishingApp'; \n\nimport LoginView  from '../views/LoginView'; \n\nexport default ( \n\n<Route component={CoreLayout} path='/'> \n\n<IndexRoute component={PublishingApp} name='home' /> \n\n<Route component={LoginView} path='login' name='login' /> \n\n</Route> \n\n);\n\n```", "```jsx\ncd ../layouts/ \n\ntouch CoreLayout.js \n\n```", "```jsx\nimport React from 'react'; \n\nimport {Link} from 'react-router'; \n\nclass CoreLayout extends React.Component { \n\n  static propTypes = { \n\n    children : React.PropTypes.element \n\n  } \n\n  render () { \n\n    return ( \n\n<div> \n\n<span> \n\nLinks: <Link to='/login'>Login</Link> |  \n\n<Link to='/'>Home Page</Link> \n\n</span> \n\n<br/> \n\n          {this.props.children} \n\n</div> \n\n    ); \n\n  } \n\n} \n\nexport default CoreLayout;\n\n```", "```jsx\n$ pwd\n\n$ [[[you shall be at the src folder]]]\n\n$ mkdir views\n\n$ cd views\n\n$ touch LoginView.js\n\n```", "```jsx\nimport React from 'react'; \n\nimport Falcor from 'falcor'; \n\nimport falcorModel from '../falcorModel.js'; \n\nimport {connect} from 'react-redux'; \n\nimport {bindActionCreators} from 'redux'; \n\nconst mapStateToProps = (state) => ({ \n\n  ...state \n\n}); \n\n// You can add your reducers here \n\nconst mapDispatchToProps = (dispatch) => ({}); \n\nclass LoginView extends React.Component { \n\n  render () { \n\n    return ( \n\n<div> \n\n<h1>Login view</h1> \n\n          FORM GOES HERE \n\n</div> \n\n    ); \n\n  } \n\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginView);\n\n```", "```jsx\n$ pwd\n\n$ [[[you shall be at the src folder]]]\n\n$ mkdir containers\n\n$ cd containers\n\n$ touch Root.js\n\n```", "```jsx\nimport React  from 'react'; \n\nimport {Provider}  from 'react-redux'; \n\nimport {Router}  from 'react-router'; \n\nimport routes   from '../routes'; \n\nimport createHashHistory  from 'history/lib/createHashHistory'; \n\nconst noQueryKeyHistory = createHashHistory({ \n\nqueryKey: false \n\n}); \n\nexport default class Root extends React.Component { \n\n  static propTypes = { \n\n    history : React.PropTypes.object.isRequired, \n\n    store   : React.PropTypes.object.isRequired \n\n  } \n\n  render () { \n\n    return ( \n\n<Provider store={this.props.store}> \n\n<div> \n\n<Router history={noQueryKeyHistory}> \n\n            {routes} \n\n</Router> \n\n</div> \n\n</Provider> \n\n    ); \n\n  } \n\n}\n\n```", "```jsx\n$ pwd\n\n$ [[[you shall be at the src folder]]]\n\n$ cd reducers\n\n$ touch index.js\n\n```", "```jsx\nimport {combineReducers} from 'redux'; \n\nimport {routeReducer} from 'redux-simple-router'; \n\nimport article  from './article'; \n\nexport default combineReducers({ \n\n  routing: routeReducer, \n\n  article \n\n});\n\n```", "```jsx\n$ pwd\n\n$ [[[you shall be at the src folder]]]\n\n$ mkdir store\n\n$ cd store\n\n$ touch configureStore.js\n\n```", "```jsx\nimport rootReducer  from '../reducers'; \n\nimport thunk  from 'redux-thunk'; \n\nimport {applyMiddleware,compose,createStore} from 'redux'; \n\nexport default function configureStore (initialState, debug =  \n\nfalse) { \n\nlet createStoreWithMiddleware; \n\nconst middleware = applyMiddleware(thunk); \n\ncreateStoreWithMiddleware = compose(middleware); \n\nconst store = createStoreWithMiddleware(createStore)( \n\nrootReducer, initialState \n\n  ); \n\n  return store; \n\n}\n\n```", "```jsx\nlet articlesJSX = []; \n\nfor(let articleKey in this.props) { \n\nconst articleDetails = this.props[articleKey]; \n\nconst currentArticleJSX = ( \n\n<div key={articleKey}> \n\n<h2>{articleDetails.articleTitle}</h2> \n\n<h3>{articleDetails.articleContent}</h3> \n\n</div>); \n\narticlesJSX.push(currentArticleJSX); \n\n}\n\n```", "```jsx\nlet articlesJSX = []; \n\nfor(let articleKey in this.props.article) { \n\nconst articleDetails = this.props.article[articleKey]; \n\nconst currentArticleJSX = ( \n\n<div key={articleKey}> \n\n<h2>{articleDetails.articleTitle}</h2> \n\n<h3>{articleDetails.articleContent}</h3> \n\n</div>); \n\narticlesJSX.push(currentArticleJSX); \n\n}\n\n```", "```jsx\n// old codebase, to improve: \n\nimport React from 'react' \n\nimport { render } from 'react-dom' \n\nimport { Provider } from 'react-redux' \n\nimport { createStore } from 'redux' \n\nimport article from './reducers/article' \n\nimport PublishingApp from './layouts/PublishingApp' \n\nconst store = createStore(article) \n\nrender( \n\n<Provider store={store}> \n\n<PublishingApp store={store} /> \n\n</Provider>, \n\ndocument.getElementById('publishingAppRoot') \n\n);\n\n```", "```jsx\nimport React from 'react'; \n\nimport ReactDOM from 'react-dom'; \n\nimport createBrowserHistory from 'history/lib/createBrowserHistory'; \n\nimport {syncReduxAndRouter} from 'redux-simple-router'; \n\nimport Root from './containers/Root'; \n\nimport configureStore from './store/configureStore'; \n\nconst target  = document.getElementById('publishingAppRoot'); \n\nconst history = createBrowserHistory(); \n\nexport const store = configureStore(window.__INITIAL_STATE__); \n\nsyncReduxAndRouter(history, store); \n\nconst node = ( \n\n<Root \n\n      history={history} \n\n      store={store}  /> \n\n); \n\nReactDOM.render(node, target);\n\n```", "```jsx\n$ npm i --save material-ui@0.14.4formsy-react@0.17.0\n\n```", "```jsx\n$ pwd\n\n$ [[[you shall be at the src folder]]]\n\n$ mkdir components\n\n$ cd components\n\n$ touch DefaultInput.js\n\n```", "```jsx\nimport React from 'react'; \n\nimport {TextField} from 'material-ui'; \n\nimport {HOC} from 'formsy-react'; \n\nclass DefaultInput extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n    this.changeValue = this.changeValue.bind(this); \n\n    this.state = {currentText: null} \n\n  } \n\nchangeValue(e) { \n\nthis.setState({currentText: e.target.value}) \n\nthis.props.setValue(e.target.value); \n\nthis.props.onChange(e); \n\n  } \n\n  render() { \n\n    return ( \n\n<div> \n\n<TextField \n\n          ref={this.props.name} \n\n          floatingLabelText={this.props.title} \n\n          name={this.props.name} \n\n          onChange={this.changeValue} \n\n          required={this.props.required} \n\n          type={this.props.type} \n\n          value={this.state.currentText ?  \n\n          this.state.currentText : this.props.value} \n\n          defaultValue={this.props.defaultValue} /> \n\n        {this.props.children} \n\n</div>); \n\n  } \n\n}; \n\nexport default HOC(DefaultInput);\n\n```", "```jsx\n$ pwd\n\n$ [[[you shall be at the components folder]]]\n\n$ touch LoginForm.js\n\n```", "```jsx\nimport React from 'react'; \n\nimport Formsy from 'formsy-react'; \n\nimport {RaisedButton, Paper} from 'material-ui'; \n\nimport DefaultInput from './DefaultInput'; \n\nexport class LoginForm extends React.Component { \n\n  constructor() { \n\n    super(); \n\n  } \n\n  render() { \n\n    return ( \n\n<Formsy.FormonSubmit={this.props.onSubmit}> \n\n<Paper zDepth={1} style={{padding: 32}}> \n\n<h3>Log in</h3> \n\n<DefaultInput \n\nonChange={(event) => {}}  \n\nname='username' \n\ntitle='Username (admin)' \n\nrequired /> \n\n<DefaultInput \n\nonChange={(event) => {}}  \n\ntype='password' \n\nname='password' \n\ntitle='Password (123456)' \n\nrequired /> \n\n<div style={{marginTop: 24}}> \n\n<RaisedButton \n\n              secondary={true} \n\n              type=\"submit\" \n\n              style={{margin: '0 auto', display: 'block', width:  \n\n              150}} \n\n              label={'Log in'} /> \n\n</div> \n\n</Paper> \n\n</Formsy.Form> \n\n    ); \n\n  } \n\n}\n\n```", "```jsx\nimport {LoginForm} from '../components/LoginForm.js'; \n\nAdd a new constructor of that component: \n\n constructor(props) { \n\n    super(props); \n\n    this.login = this.login.bind(this); \n\n    this.state = { \n\n      error: null \n\n    }; \n\n  }\n\n```", "```jsx\nasync login(credentials) { \n\nconsole.info('credentials', credentials); \n\n    await falcorModel \n\n      .call(['login'],[credentials]) \n\n      .then((result) =>result); \n\nconst tokenRes = await falcorModel.getValue('login.token'); \n\nconsole.info('tokenRes', tokenRes); \n\n    return; \n\n  }\n\n```", "```jsx\n render () { \n\n    return ( \n\n<div> \n\n<h1>Login view</h1> \n\n          FORM GOES HERE \n\n</div> \n\n    ); \n\n  }\n\n```", "```jsx\n render () { \n\n    return ( \n\n<div> \n\n<h1>Login view</h1> \n\n<div style={{maxWidth: 450, margin: '0 auto'}}> \n\n<LoginForm \n\nonSubmit={this.login} /> \n\n</div> \n\n</div> \n\n    ); \n\n  }\n\n```", "```jsx\n$ pwd \n\n$ [[[you shall be at the views folder]]] \n\n$ touch DashboardView.js\n\n```", "```jsx\nimport React from 'react'; \n\nimport Falcor from 'falcor'; \n\nimport falcorModel from '../falcorModel.js'; \n\nimport { connect } from 'react-redux'; \n\nimport { bindActionCreators } from 'redux'; \n\nimport { LoginForm } from '../components/LoginForm.js'; \n\nconst mapStateToProps = (state) => ({ \n\n  ...state \n\n}); \n\n// You can add your reducers here \n\nconst mapDispatchToProps = (dispatch) => ({}); \n\nclass DashboardView extends React.Component { \n\nrender () { \n\n    return ( \n\n<div> \n\n<h1>Dashboard - loggedin!</h1> \n\n</div> \n\n    ); \n\n  } \n\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardView);\n\n```", "```jsx\nimport DashboardView from '../views/DashboardView'; \n\nexport default ( \n\n<Route component={CoreLayout} path='/'> \n\n<IndexRoute component={PublishingApp} name='home' /> \n\n<Route component={LoginView} path='login' name='login' /> \n\n<Route component={DashboardView} path='dashboard'   name='dashboard' /> \n\n</Route> \n\n);\n\n```", "```jsx\nconsole.info('tokenRes', tokenRes); \n\nif(tokenRes === 'INVALID') { \n\n    const errorRes = await falcorModel.getValue('login.error'); \n\n    this.setState({error: errorRes}); \n\n    return; \n\n} \n\nreturn;\n\n```", "```jsx\nimport { Snackbar } from 'material-ui';\n\n```", "```jsx\n<Snackbar \n\n  autoHideDuration={4000} \n\n  open={!!this.state.error} \n\n  message={this.state.error || ''}  \n\n  onRequestClose={() => null} />\n\n```", "```jsx\nrender () { \n\n  return ( \n\n<div> \n\n<h1>Login view</h1> \n\n<div style={{maxWidth: 450, margin: '0 auto'}}> \n\n<LoginForm \n\nonSubmit={this.login} /> \n\n</div> \n\n<Snackbar autoHideDuration={4000} \n\n          open={!!this.state.error} \n\n          message={this.state.error || ''}  \n\nonRequestClose={() => null} /> \n\n</div> \n\n  ); \n\n}\n\n```", "```jsx\nif(tokenRes === 'INVALID') { \n\nconst errorRes = await falcorModel.getValue('login.error'); \n\nthis.setState({error: errorRes}); \n\n      return; \n\n    }\n\n```", "```jsx\nif(tokenRes) { \n\nconst username = await falcorModel.getValue('login.username'); \n\nconst role = await falcorModel.getValue('login.role'); \n\nlocalStorage.setItem('token', tokenRes); \n\nlocalStorage.setItem('username', username); \n\nlocalStorage.setItem('role', role); \n\nthis.props.history.pushState(null, '/dashboard'); \n\n}\n\n```", "```jsx\nlocalStorage.setItem('token', tokenRes); \n\nlocalStorage.setItem('username', username); \n\nlocalStorage.setItem('role', role);\n\n```", "```jsx\nconst userSchema = { \n\n'username' : String, \n\n'password' : String, \n\n'firstName' : String, \n\n'lastName' : String, \n\n'email' : String, \n\n'role' : String, \n\n'verified' : Boolean, \n\n'imageUrl' : String \n\n};\n\n```", "```jsx\nconst userSchema = { \n\n'username' : { type: String, index: {unique: true, dropDups: true }}, \n\n'password' : String, \n\n'firstName' : String, \n\n'lastName' : String, \n\n'email' : { type: String, index: {unique: true, dropDups: true }}, \n\n'role' : { type: String, default: 'editor' }, \n\n'verified' : Boolean, \n\n'imageUrl' : String \n\n};\n\n```", "```jsx\n {  \n\n    route: ['register'], \n\n    call: (callPath, args) => \n\n      { \n\n        const newUserObj = args[0]; \n\n        newUserObj.password = newUserObj.password+'pubApp'; \n\n        newUserObj.password = crypto \n\n          .createHash('sha256') \n\n          .update(newUserObj.password) \n\n          .digest('hex'); \n\n          const newUser = new User(newUserObj); \n\n          return newUser.save((err, data) => { if (err) return err; }) \n\n          .then ((newRes) => { \n\n            /* \n\n              got new obj data, now let's get count: \n\n             */ \n\n             const newUserDetail = newRes.toObject(); \n\n            if(newUserDetail._id) { \n\n              return null; // Mocked for now \n\n            } else { \n\n              // registration failed \n\n              return [ \n\n                { \n\n                  path: ['register', 'newUserId'],  \n\n                  value: 'INVALID' \n\n                }, \n\n                { \n\n                  path: ['register', 'error'],  \n\n                  value: 'Registration failed - no id has been                                  \n\n                  created' \n\n                } \n\n              ]; \n\n            } \n\n            return; \n\n          }).catch((reason) =>console.error(reason)); \n\n      } \n\n  }\n\n```", "```jsx\nnewUserObj.password = newUserObj.password+'pubApp'; \n\nnewUserObj.password = crypto \n\n  .createHash('sha256') \n\n  .update(newUserObj.password) \n\n  .digest('hex');\n\n```", "```jsx\nreturn newUser.save((err, data) => { if (err) return err; })\n\n```", "```jsx\n // registration failed \n\n    return [ \n\n      { \n\n        path: ['register', 'newUserId'],  \n\n        value: 'INVALID' \n\n      }, \n\n      { \n\n        path: ['register', 'error'],  \n\n        value: 'Registration failed - no id has been created' \n\n      }\n\n```", "```jsx\n// you shall already have this in your codebase, just a recall \n\nif(newUserDetail._id) { \n\n  return null; // Mocked for now \n\n} \n\nThe preceding code needs to be replaced with: \n\nif(newUserDetail._id) { \n\nconst newUserId = newUserDetail._id.toString(); \n\n  return [ \n\n    { \n\n      path: ['register', 'newUserId'],  \n\n      value: newUserId \n\n    }, \n\n    { \n\n      path: ['register', 'error'],  \n\n      value: false  \n\n    } \n\n  ]; \n\n}\n\n```", "```jsx\n$ pwd \n\n$ [[[you shall be at the components folder]]] \n\n$ touch RegisterForm.js \n\n```", "```jsx\nimport React from 'react'; \n\nimport Formsy from 'formsy-react'; \n\nimport {RaisedButton, Paper} from 'material-ui'; \n\nimport DefaultInput from './DefaultInput'; \n\nexport class RegisterForm extends React.Component { \n\n  constructor() { \n\n    super(); \n\n  } \n\n  render() { \n\n    return ( \n\n<Formsy.FormonSubmit={this.props.onSubmit}> \n\n<Paper zDepth={1} style={{padding: 32}}> \n\n<h3>Registration form</h3> \n\n<DefaultInput \n\n  onChange={(event) => {}}  \n\n  name='username' \n\n  title='Username' \n\n  required /> \n\n<DefaultInput \n\n  onChange={(event) => {}}  \n\n  name='firstName' \n\n  title='Firstname' \n\n  required /> \n\n<DefaultInput \n\n  onChange={(event) => {}}  \n\n  name='lastName' \n\n  title='Lastname' \n\n  required /> \n\n<DefaultInput \n\n  onChange={(event) => {}}  \n\n  name='email' \n\n  title='Email' \n\n  required /> \n\n<DefaultInput \n\n  onChange={(event) => {}}  \n\n  type='password' \n\n  name='password' \n\n  title='Password' \n\n  required /> \n\n<div style={{marginTop: 24}}> \n\n<RaisedButton \n\n              secondary={true} \n\n              type=\"submit\" \n\n              style={{margin: '0 auto', display:                      \n\n              'block', width: 150}} \n\n              label={'Register'} /> \n\n</div> \n\n</Paper> \n\n</Formsy.Form> \n\n    ); \n\n  } \n\n}\n\n```", "```jsx\n$ pwd \n\n$ [[[you shall be at the views folder]]] \n\n$ touch RegisterView.js\n\n```", "```jsx\nimport React from 'react'; \n\nimport falcorModel from '../falcorModel.js'; \n\nimport { connect } from 'react-redux'; \n\nimport { bindActionCreators } from 'redux'; \n\nimport { Snackbar } from 'material-ui'; \n\nimport { RegisterForm } from '../components/RegisterForm.js'; \n\nconst mapStateToProps = (state) => ({  \n\n  ...state  \n\n}); \n\nconst mapDispatchToProps = (dispatch) => ({});\n\n```", "```jsx\nconst mapDispatchToProps = (dispatch) => ({}); \n\nclass RegisterView extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n    this.register = this.register.bind(this); \n\n    this.state = { \n\n      error: null \n\n    }; \n\n  } \n\n  render () { \n\n    return ( \n\n<div> \n\n<h1>Register</h1> \n\n<div style={{maxWidth: 450, margin: '0 auto'}}> \n\n<RegisterForm \n\nonSubmit={this.register} /> \n\n</div> \n\n</div> \n\n    ); \n\n  } \n\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterView);\n\n```", "```jsx\nasync register (newUserModel) {console.info(\"newUserModel\",  newUserModel); \n\n    await falcorModel \n\n      .call(['register'],[newUserModel]) \n\n      .then((result) =>result); \n\n      const newUserId = await falcorModel.getValue(['register',  \n\n      'newUserId']); \n\n    if(newUserId === 'INVALID') { \n\n      const errorRes = await falcorModel.getValue('register.error'); \n\n      this.setState({error: errorRes}); \n\n      return; \n\n    } \n\n    this.props.history.pushState(null, '/login'); \n\n  }\n\n```", "```jsx\nawait falcorModel \n\n      .call(['register'],[newUserModel]) \n\n      .then((result) => result);\n\n```", "```jsx\nconst newUserId = await falcorModel.getValue(['register', 'newUserId']);\n\n```", "```jsx\nimport RegisterView from '../views/RegisterView';\n\n```", "```jsx\nexport default ( \n\n<Route component={CoreLayout} path='/'> \n\n<IndexRoute component={PublishingApp} name='home' /> \n\n<Route component={LoginView} path='login' name='login' /> \n\n<Route component={DashboardView} path='dashboard'  name='dashboard' /> \n\n<Route component={RegisterView} path='register' name='register' /> \n\n</Route> \n\n);\n\n```", "```jsx\nrender () { \n\n    return ( \n\n<div> \n\n<span> \n\n   Links:<Link to='/register'>Register</Link>\n\n  <Link to='/login'>Login</Link> \n\n  <Link to='/'>Home Page</Link> \n\n</span> \n\n  <br/> \n\n {this.props.children} \n\n</div> \n\n    ); \n\n  }\n\n```"]