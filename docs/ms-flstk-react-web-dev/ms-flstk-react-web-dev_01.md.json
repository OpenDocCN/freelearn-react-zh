["```jsx\n$ nvm list-remote\n\n```", "```jsx\n$ nvm install v4.0.0\n\n$ nvm alias default v4.0.0\n\n```", "```jsx\n$ npm -v\n\n2.14.23\n\n```", "```jsx\nmongod\n\n```", "```jsx\ntouch initData.js\n\n```", "```jsx\n[ \n\n    { \n\n        articleId: '987654', \n\n        articleTitle: 'Lorem ipsum - article one', \n\n        articleContent: 'Here goes the content of the article' \n\n    }, \n\n    { \n\n        articleId: '123456', \n\n        articleTitle: 'Lorem ipsum - article two', \n\n        articleContent: 'Sky is the limit, the content goes here.' \n\n    } \n\n]\n\n```", "```jsx\n$ mongo\n\n```", "```jsx\nshow dbs\n\n```", "```jsx\nWelcome to the MongoDB shell. \n\nFor interactive help, type \"help\". \n\nFor more comprehensive documentation, see \n\n http://docs.mongodb.org/ \n\nQuestions? Try the support group \n\n http://groups.google.com/group/mongodb-user \n\nServer has startup warnings: \n\n2016-02-25T13:31:05.896+0100 I CONTROL  [initandlisten] \n\n2016-02-25T13:31:05.896+0100 I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number of files is 256, should be at least 1000 \n\n> show dbs \n\nlocal  0.078GB \n\n>\n\n```", "```jsx\nmongoimport --db local --collection articles --jsonArray initData.js --host=127.0.0.1\n\n```", "```jsx\nconnected to: 127.0.0.1\n\nimported 2 documents\n\n```", "```jsx\nnpm init --yes\n\n```", "```jsx\nmkdir server\n\ncd server\n\ntouch index.js\n\n```", "```jsx\n// babel-core and babel-polyfill to be installed later in that  \n\n//chapter \n\nrequire('babel-core/register'); \n\nrequire('babel-polyfill'); \n\nrequire('./server');\n\n```", "```jsx\nnpm i express@4.13.4  cors@2.7.1 body-parser@1.15.0--save\n\n```", "```jsx\nnpm i --save-dev babel@6.5.2 \n\nnpm i --save-dev babel-core@6.6.5 \n\nnpm i --save-dev babel-polyfill@6.6.1 \n\nnpm i --save-dev babel-loader@6.2.4 \n\nnpm i --save-dev babel-preset-es2015@6.6.0 \n\nnpm i --save-dev babel-preset-react@6.5.0 \n\nnpm i --save-dev babel-preset-stage-0@6.5.0\n\n```", "```jsx\n$ [[[you are in the main project's directory]]] \n\n$ touch .babelrc \n\n```", "```jsx\n{ \n\n'presets': [ \n\n'es2015', \n\n'react', \n\n'stage-0' \n\n  ] \n\n}\n\n```", "```jsx\n&boxvr;&boxh;&boxh; node_modules \n\n&boxv;   &boxvr;&boxh;&boxh; *** \n\n&boxvr;&boxh;&boxh; initData.js \n\n&boxvr;&boxh;&boxh; package.json \n\n&boxur;&boxh;&boxh; server \n\n    &boxur;&boxh;&boxh; index.js\n\n```", "```jsx\ntouch server.js\n\n```", "```jsx\nimport http from 'http'; \n\nimport express from 'express'; \n\nimport cors from 'cors'; \n\nimport bodyParser from 'body-parser'; \n\nconst app = express(); \n\napp.server = http.createServer(app); \n\n// CORS - 3rd party middleware \n\napp.use(cors()); \n\n// This is required by falcor-express middleware  \n\n//to work correctly with falcor-browser \n\napp.use(bodyParser.json({extended: false})); \n\napp.get('/', (req, res) => res.send('Publishing App Initial Application!')); \n\napp.server.listen(process.env.PORT || 3000); \n\nconsole.log(&grave;Started on port ${app.server.address().port}&grave;); \n\nexport default app;\n\n```", "```jsx\nnpm i mongoose@4.4.5 --save\n\n```", "```jsx\nimport http from 'http'; \n\nimport express from 'express'; \n\nimport cors from 'cors'; \n\nimport bodyParser from 'body-parser'; \n\nimport mongoose from 'mongoose'; \n\nmongoose.connect('mongodb://localhost/local'); \n\nconst articleSchema = { \n\n    articleTitle:String, \n\n    articleContent:String \n\n}; \n\nconst Article = mongoose.model('Article', articleSchema,  'articles');\n\nconst app = express(); \n\napp.server = http.createServer(app); \n\n// CORS - 3rd party middleware \n\napp.use(cors()); \n\n// This is required by falcor-express middleware to work correctly  \n\n//with falcor-browser \n\napp.use(bodyParser.json({extended: false})); \n\napp.use(express.static('dist')); \n\napp.get('/', (req, res) => {  \n\n    Article.find( (err, articlesDocs) => { \n\n      const ourArticles = articlesDocs.map((articleItem) => { \n\n        return &grave;<h2>${articleItem.articleTitle}</h2>            \n\n        ${articleItem.articleCon tent}&grave;; \n\n      }).join('<br/>'); \n\n      res.send(&grave;<h1>Publishing App Initial Application!</h1>        \n\n      ${ourArticles}&grave;); \n\n    }); \n\n}); \n\napp.server.listen(process.env.PORT || 3000); \n\nconsole.log(&grave;Started on port ${app.server.address().port}&grave;); \n\nexport default app;\n\n```", "```jsx\nmongod\n\n```", "```jsx\n\"devDependencies\": { \n\n\"babel\": \"6.5.2\", \n\n\"babel-core\": \"6.6.5\", \n\n\"babel-loader\": \"6.2.4\", \n\n\"babel-polyfill\": \"6.6.1\", \n\n\"babel-preset-es2015\": \"6.6.0\", \n\n\"babel-preset-react\": \"6.5.0\", \n\n\"babel-preset-stage-0\": \"6.5.0\" \n\n  }\n\n```", "```jsx\n\"dependencies\": { \n\n\"body-parser\": \"1.15.0\", \n\n\"cors\": \"2.7.1\", \n\n\"express\": \"4.13.4\", \n\n\"mongoose\": \"4.4.5\" \n\n  }\n\n```", "```jsx\nnode server/index.js \n\n```", "```jsx\n$ node server/index.js\n\nStarted on port 3000\n\n```", "```jsx\n{ \n\n    type: 'ADD_ARTICLE', \n\n    payload: '_____HERE_GOES_INFORMATION_ABOUT_THE_CHANGE_____' \n\n}\n\n```", "```jsx\nmkdir src \n\ncd src \n\nmkdir reducers \n\ncd reducers \n\ntouch article.js \n\n```", "```jsx\nconst articleMock = { \n\n'987654': { \n\n        articleTitle: 'Lorem ipsum - article one', \n\n        articleContent: 'Here goes the content of the article' \n\n    }, \n\n'123456': { \n\n        articleTitle: 'Lorem ipsum - article two', \n\n        articleContent: 'Sky is the limit, the content goes here.' \n\n    } \n\n}; \n\nconst article = (state = articleMock, action) => { \n\n    switch (action.type) { \n\n        case 'RETURN_ALL_ARTICLES': \n\n            return Object.assign({}, state); \n\n        default: \n\n            return state; \n\n    } \n\n} \n\nexport default article;\n\n```", "```jsx\npwd \n\n/Users/przeor/Desktop/React-Convention-Book/src/reducers \n\ncd ../.. \n\nmkdir dist \n\ncd dist \n\ntouch index.html \n\n```", "```jsx\n<!doctype html> \n\n<html lang=\"en\"> \n\n<head> \n\n<title>Publishing App</title> \n\n<meta charset=\"utf-8\"> \n\n</head> \n\n<body> \n\n<div id=\"publishingAppRoot\"></div> \n\n<script src=\"app.js\"></script> \n\n</body> \n\n</html>\n\n```", "```jsx\nnpm i --save-dev webpack@1.12.14 webpack-dev-server@1.14.1 \n\n```", "```jsx\ntouch webpack.config.js\n\n```", "```jsx\nmodule.exports = { \n\n    entry: ['babel-polyfill', './src/app.js'], \n\n    output: { \n\n        path: './dist', \n\n        filename: 'app.js', \n\n        publicPath: '/' \n\n    }, \n\n    devServer: { \n\n        inline: true, \n\n        port: 3000, \n\n        contentBase: './dist' \n\n    }, \n\n    module: { \n\n        loaders: [ \n\n            { \n\n                test: /.js$/, \n\n                exclude: /(node_modules|bower_components)/, \n\n                loader: 'babel', \n\n        query: { \n\n                    presets: ['es2015', 'stage-0', 'react'] \n\n                } \n\n            } \n\n        ] \n\n    } \n\n}\n\n```", "```jsx\nnpm i --save react@0.14.7 react-dom@0.14.7 react-redux@4.4.0 redux@3.3.1\n\n```", "```jsx\n\"scripts\": { \n\n\"dev\": \"webpack-dev-server\" \n\n  },\n\n```", "```jsx\n01{ \n\n\"name\": \"project\", \n\n\"version\": \"1.0.0\", \n\n\"description\": \"\", \n\n\"scripts\": { \n\n\"dev\": \"webpack-dev-server\" \n\n  }, \n\n\"dependencies\": { \n\n\"body-parser\": \"1.15.0\", \n\n\"cors\": \"2.7.1\", \n\n\"express\": \"4.13.4\", \n\n\"mongoose\": \"4.4.5\", \n\n\"react\": \"0.14.7\", \n\n\"react-dom\": \"0.14.7\", \n\n\"react-redux\": \"4.4.0\", \n\n\"redux\": \"3.3.1\" \n\n  }, \n\n\"devDependencies\": { \n\n\"babel\": \"6.5.2\", \n\n\"babel-core\": \"6.6.5\", \n\n\"babel-loader\": \"6.2.4\", \n\n\"babel-polyfill\": \"6.6.1\", \n\n\"babel-preset-es2015\": \"6.6.0\", \n\n\"babel-preset-react\": \"6.5.0\", \n\n\"babel-preset-stage-0\": \"6.5.0\", \n\n\"webpack\": \"1.12.14\", \n\n\"webpack-dev-server\": \"1.14.1\" \n\n  } \n\n}\n\n```", "```jsx\n//[[your are in the main directory of the project]] \n\ncd src\n\ntouch app.js\n\n```", "```jsx\nimport React from 'react'; \n\nimport { render } from 'react-dom'; \n\nimport { Provider } from 'react-redux'; \n\nimport { createStore } from 'redux'; \n\nimport article from './reducers/article'; \n\nimport PublishingApp from './layouts/PublishingApp'; \n\nconst store = createStore(article); \n\nrender( \n\n<Provider store={store}> \n\n<PublishingApp /> \n\n</Provider>, \n\n    document.getElementById('publishingAppRoot') \n\n);\n\n```", "```jsx\n<Provider store>\n\n```", "```jsx\nconnect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\n\n```", "```jsx\nstore.getState();\n\n```", "```jsx\nstore.dispatch({ type: 'RETURN_ALL_ARTICLES' });\n\n```", "```jsx\nstore.subscribe(() => { \n\n});\n\n```", "```jsx\n&boxvr;&boxh;&boxh; dist \n\n&boxv;   &boxur;&boxh;&boxh; index.html \n\n&boxvr;&boxh;&boxh; initData.js \n\n&boxvr;&boxh;&boxh; node_modules \n\n&boxv;   &boxvr;&boxh;&boxh; ********** (A LOT OF LIBRARIES HERE) \n\n&boxvr;&boxh;&boxh; package.json \n\n&boxvr;&boxh;&boxh; server \n\n&boxv;   &boxvr;&boxh;&boxh; index.js \n\n&boxv;   &boxur;&boxh;&boxh; server.js \n\n&boxvr;&boxh;&boxh; src \n\n&boxv;   &boxvr;&boxh;&boxh; app.js \n\n&boxv;   &boxur;&boxh;&boxh; reducers \n\n&boxv;       &boxur;&boxh;&boxh; article.js \n\n&boxur;&boxh;&boxh; webpack.config.js\n\n```", "```jsx\npwd\n\n/Users/przeor/Desktop/React-Convention-Book/src\n\nmkdir layouts\n\ncd layouts\n\ntouch PublishingApp.js\n\n```", "```jsx\nimport React from 'react'; \n\nimport { connect } from 'react-redux'; \n\nconst mapStateToProps = (state) => ({ \n\n  ...state \n\n}); \n\nconst mapDispatchToProps = (dispatch) => ({ \n\n}); \n\nclass PublishingApp extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n  } \n\n  render () { \n\n    console.log(this.props);     \n\n    return ( \n\n<div> \n\n          Our publishing app \n\n</div> \n\n    ); \n\n  } \n\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(PublishingApp);\n\n```", "```jsx\nconst mapStateToProps = (state) => ({ \n\n  ...state \n\n});\n\n```", "```jsx\nconst articleMock = { \n\n'987654': { \n\n        articleTitle: 'Lorem ipsum - article one', \n\n        articleContent: 'Here goes the content of the article' \n\n    }, \n\n\"123456\": { \n\n        articleTitle: 'Lorem ipsum - article two', \n\n        articleContent: 'Sky is the limit, the content goes here.' \n\n    } \n\n};\n\n```", "```jsx\n render () { \n\n    let articlesJSX = []; \n\n    for(let articleKey in this.props) { \n\n        const articleDetails = this.props[articleKey]; \n\n        const currentArticleJSX = ( \n\n          <div key={articleKey}> \n\n          <h2>{articleDetails.articleTitle}</h2> \n\n          <h3>{articleDetails.articleContent}</h3> \n\n          </div>); \n\n        articlesJSX.push(currentArticleJSX); \n\n    } \n\n    return ( \n\n      <div> \n\n      <h1>Our publishing app</h1> \n\n          {articlesJSX} \n\n      </div> \n\n    ); \n\n  }\n\n```", "```jsx\n<div> \n\n<h1>Our publishing app</h1> \n\n          {articlesJSX} \n\n</div>\n\n```", "```jsx\nnpm run dev\n\n```", "```jsx\n        { \n\n            id: '92', \n\n            title: 'example title', \n\n            content: 'example content' \n\n        }\n\n```", "```jsx\npwd \n\n/Users/przeor/Desktop/React-Convention-Book \n\nnpm i --save falcor@0.1\\. \n\n16 falcor-http-datasource@0.1.3 \n\n```", "```jsx\ncd src\n\ntouch falcorModel.js\n\n```", "```jsx\nimport falcor from 'falcor';  \n\nimport FalcorDataSource from 'falcor-http-datasource'; \n\nlet cache = { \n\n  articles: [ \n\n    { \n\n        id: 987654, \n\n        articleTitle: 'Lorem ipsum - article one', \n\n        articleContent: 'Here goes the content of the article' \n\n    }, \n\n    { \n\n        id: 123456, \n\n        articleTitle: 'Lorem ipsum - article two from backend', \n\n        articleContent: 'Sky is the limit, the content goes here.' \n\n    } \n\n  ] \n\n}; \n\nconst model = new falcor.Model({ \n\n'cache': cache \n\n}); \n\nexport default model;\n\n```", "```jsx\nimport falcorModel from '../falcorModel.js';\n\n```", "```jsx\nclass PublishingApp extends React.Component { \n\n  constructor(props) { \n\n    super(props); \n\n  } \n\n  componentWillMount() { \n\n    this._fetch(); \n\n  } \n\n  async _fetch() { \n\n    const articlesLength = await falcorModel. \n\n      getValue('articles.length'). \n\n      then((length) => length ); \n\n    const articles = await falcorModel. \n\n      get(['articles', {from: 0, to: articlesLength-1},  \n\n      ['id','articleTitle', 'articleContent']])  \n\n      .then((articlesResponse) => articlesResponse.json.articles); \n\n  } \n\n  // below here are next methods o the PublishingApp\n\n```", "```jsx\n        const articlesLength = await falcorModel. \n\n          getValue('articles.length'). \n\n          then( (length) =>  length );\n\n```", "```jsx\n        let articles = await falcorModel. \n\n          get(['articles', {from: 0, to: articlesLength-1},\n\n          ['id','articleTitle', 'articleContent']]).  \n\n          then( (articlesResponse) => articlesResponse.json.articles);\n\n```", "```jsx\nfalcorModel.get( \n\n['articles', {from: 0, to: articlesLength-1}, ['id','articleTitle', 'articleContent']] \n\n)\n\n```", "```jsx\n{ \n\n  articles: [ \n\n    { \n\n        id: 987654, \n\n        articleTitle: 'Lorem ipsum - article one', \n\n        articleContent: 'Here goes the content of the article' \n\n    }, \n\n    { \n\n        id: 123456, \n\n        articleTitle: 'Lorem ipsum - article two from backend', \n\n        articleContent: 'Sky is the limit, the content goes here.' \n\n    } \n\n  ] \n\n}\n\n```", "```jsx\n        ['articles']\n\n```", "```jsx\n        ['articles', {from: 0, to: articlesLength-1}]\n\n```", "```jsx\n        ['articles', {from: 0, to: articlesLength-1},   \n\n        ['id','articleTitle', 'articleContent']]\n\n```", "```jsx\npwd \n\n$ /Users/przeor/Desktop/React-Convention-Book \n\ncd src \n\nmkdir actions \n\ncd actions \n\ntouch article.js \n\n```", "```jsx\nexport default { \n\n  articlesList: (response) => { \n\n    return { \n\n      type: 'ARTICLES_LIST_ADD', \n\n      payload: { response: response } \n\n    } \n\n  } \n\n}\n\n```", "```jsx\nimport {bindActionCreators} from 'redux'; \n\nimport articleActions from '../actions/article.js';\n\n```", "```jsx\nconst mapDispatchToProps = (dispatch) => ({ \n\n});\n\n```", "```jsx\nconst mapDispatchToProps = (dispatch) => ({ \n\n  articleActions: bindActionCreators(articleActions, dispatch) \n\n});\n\n```", "```jsx\nthis.props.articleActions.articlesList(articles);\n\n```", "```jsx\n async _fetch() { \n\n    const articlesLength = await falcorModel. \n\n      getValue('articles.length'). \n\n      then( (length) => length); \n\n    let articles = await falcorModel. \n\n      get(['articles', {from: 0, to: articlesLength-1},  \n\n      ['id','articleTitle', 'articleContent']]).  \n\n      then( (articlesResponse) => articlesResponse.json.articles); \n\n    this.props.articleActions.articlesList(articles); \n\n  }\n\n```", "```jsx\n componentWillMount() { \n\n    this._fetch(); \n\n  }\n\n```", "```jsx\nconst article = (state = {}, action) => { \n\n    switch (action.type) { \n\n        case 'RETURN_ALL_ARTICLES': \n\n            return Object.assign({}, state); \n\n        case 'ARTICLES_LIST_ADD': \n\n            return Object.assign({}, action.payload.response); \n\n        default: \n\n            return state; \n\n    } \n\n} \n\nexport default article\n\n```", "```jsx\n   case 'ARTICLES_LIST_ADD': \n\n        let articlesList = action.payload.response; \n\n        return Object.assign({}, articlesList);\n\n```", "```jsx\n\"scripts\": { \n\n  \"dev\": \"webpack-dev-server\", \n\n  \"start\": \"npm run webpack; node server\", \n\n  \"webpack\": \"webpack --config ./webpack.config.js\" \n\n},\n\n```", "```jsx\nnpm i --save falcor-express@0.1.2 falcor-router@0.2.12\n\n```", "```jsx\n        import falcor from 'falcor'; \n\n        import falcorExpress from 'falcor-express';\n\n```", "```jsx\n        app.use(bodyParser.json({extended: false})); \n\n app.use(express.static('dist'));\n\n```", "```jsx\n        app.use(bodyParser.json({extended: false})); \n\n        let cache = { \n\n          articles: [ \n\n            { \n\n                id: 987654, \n\n                articleTitle: 'Lorem ipsum - article one', \n\n                articleContent: 'Here goes the content of the article' \n\n            }, \n\n            { \n\n                id: 123456, \n\n                articleTitle: 'Lorem ipsum - article two from          \n\n                backend', \n\n                articleContent: 'Sky is the limit, the content goes          \n\n                here.' \n\n            } \n\n          ] \n\n        }; \n\n        var model = new falcor.Model({ \n\n          cache: cache \n\n        }); \n\n        app.use('/model.json', falcorExpress.dataSourceRoute((req,               \n\n        res) => { \n\n            return model.asDataSource(); \n\n        })); \n\n        app.use(express.static('dist'));\n\n```", "```jsx\n        import falcor from 'falcor'; \n\n        import FalcorDataSource from 'falcor-http-datasource'; \n\n        let cache = { \n\n          articles: [ \n\n          { \n\n            id: 987654, \n\n            articleTitle: 'Lorem ipsum - article one', \n\n            articleContent: 'Here goes the content of the article' \n\n          }, \n\n          { \n\n            id: 123456, \n\n            articleTitle: 'Lorem ipsum - article two from backend', \n\n            articleContent: 'Sky is the limit, the content goes here.' \n\n          } \n\n         ] \n\n        }; \n\n        const model = new falcor.Model({ \n\n        'cache': cache \n\n        }); \n\n        export default model;\n\n```", "```jsx\n        import falcor from 'falcor'; \n\n        import FalcorDataSource from 'falcor-http-datasource'; \n\n        const model = new falcor.Model({ \n\n          source: new FalcorDataSource('/model.json') \n\n        }); \n\n        export default model;\n\n```", "```jsx\n npm start\n\n```", "```jsx\nhttp://localhost:3000/model.json?paths=[[\"articles\", {\"from\":0,\"to\":1},   \n\n[\"articleContent\",\"articleTitle\",\"id\"]]]&method=get.\n\n```", "```jsx\n$ pwd \n\n/Users/przeor/Desktop/React-Convention-Book \n\n$ cd server \n\n$ touch routes.js \n\n```", "```jsx\nconst PublishingAppRoutes = [{ \n\n  route: 'articles.length', \n\n  get: () => { \n\n    const articlesCountInDB = 2; // hardcoded for example \n\n    return { \n\n      path: ['articles', 'length'], \n\n      value: articlesCountInDB \n\n    }; \n\n  } \n\n}]; \n\nexport default PublishingAppRoutes;\n\n```", "```jsx\n // location of that code snippet: src/layouts/PublishingApp.js \n\n const articlesLength = await falcorModel. \n\n    getValue('articles.length'). \n\n    then((length) => length);\n\n```", "```jsx\n{ \n\n  route: 'articles[{integers}][\"id\",\"articleTitle\",\"articleContent\"]', \n\n  get: (pathSet) => { \n\n    const articlesIndex = pathSet[1]; \n\n    const articlesArrayFromDB = [{ \n\n    'articleId': '987654', \n\n    'articleTitle': 'BACKEND Lorem ipsum - article one', \n\n    'articleContent': 'BACKEND Here goes the content of the article' \n\n    }, { \n\n    'articleId': '123456', \n\n    'articleTitle': 'BACKEND Lorem ipsum - article two', \n\n    'articleContent': 'BACKEND Sky is the limit, the content goes here.' \n\n    }]; // That are our mocked articles from MongoDB \n\n    let results = []; \n\n    articlesIndex.forEach((index) => { \n\n      const singleArticleObject = articlesArrayFromDB[index]; \n\n      const falcorSingleArticleResult = { \n\n        path: ['articles', index], \n\n        value: singleArticleObject \n\n      }; \n\n      results.push(falcorSingleArticleResult); \n\n    }); \n\n    return results; \n\n  } \n\n}\n\n```", "```jsx\n[  \n\n'articles', \n\n  [ 0, 1 ], \n\n  [ 'articleContent', 'articleTitle', 'id' ]  \n\n]\n\n```", "```jsx\nlet results = [];\n\n```", "```jsx\narticlesIndex.forEach((index) => { \n\n   const singleArticleObject = articlesArrayFromDB[index]; \n\n   const falcorSingleArticleResult = { \n\n     path: ['articles', index], \n\n     value: singleArticleObject \n\n   }; \n\n   results.push(falcorSingleArticleResult); \n\n });\n\n```", "```jsx\nconsole.info(results) \n\n return results;\n\n```", "```jsx\n[{ \n\n  path: ['articles', 0], \n\n  value: { \n\n    articleId: '987654', \n\n    articleTitle: 'BACKEND Lorem ipsum - article one', \n\n    articleContent: 'BACKEND Here goes the content of the article' \n\n  } \n\n}, { \n\n  path: ['articles', 1], \n\n  value: { \n\n    articleId: '123456', \n\n    articleTitle: 'BACKEND Lorem ipsum - article two', \n\n    articleContent: 'BACKEND Sky is the limit, the content goes here.' \n\n  } \n\n}]\n\n```", "```jsx\nimport falcorRouter from 'falcor-router'; \n\nimport routes from './routes.js';\n\n```", "```jsx\n// This is old code, remove it and replace with new \n\napp.use('/model.json', falcorExpress.dataSourceRoute((req, res) =>  { \n\n  return model.asDataSource(); \n\n}));\n\n```", "```jsx\napp.use('/model.json', falcorExpress.dataSourceRoute((req, res) => { \n\n return new falcorRouter(routes); \n\n}));\n\n```", "```jsx\nnpm start\n\n```", "```jsx\n// this goes to server/routes.js \n\nimport mongoose from 'mongoose'; \n\nmongoose.connect('mongodb://localhost/local'); \n\nconst articleSchema = { \n\n  articleTitle:String, \n\n  articleContent:String \n\n}; \n\nconst Article = mongoose.model('Article', articleSchema, 'articles');\n\n```", "```jsx\n route: 'articles.length', \n\n    get: () => { \n\n    return Article.count({}, (err, count) => count) \n\n    .then ((articlesCountInDB) => { \n\n      return { \n\n        path: ['articles', 'length'], \n\n        value: articlesCountInDB \n\n      } \n\n    }) \n\n  }\n\n```", "```jsx\n{ \n\n  route: 'articles[{integers}][\"id\",\"articleTitle\",\"articleContent\"]', \n\n  get: (pathSet) => { \n\n    const articlesIndex = pathSet[1]; \n\n    return Article.find({}, (err, articlesDocs) => articlesDocs) \n\n    .then ((articlesArrayFromDB) => { \n\n      let results = []; \n\n      articlesIndex.forEach((index) => { \n\n        const singleArticleObject =          \n\n        articlesArrayFromDB[index].toObject(); \n\n        const falcorSingleArticleResult = { \n\n          path: ['articles', index], \n\n          value: singleArticleObject \n\n        }; \n\n        results.push(falcorSingleArticleResult); \n\n      }); \n\n      return results; \n\n    }) \n\n  } \n\n}\n\n```", "```jsx\nimport mongoose from 'mongoose'; \n\nmongoose.connect('mongodb://localhost/local'); \n\nconst articleSchema = { \n\n  articleTitle:String, \n\n  articleContent:String \n\n}; \n\nconst Article = mongoose.model('Article', articleSchema, 'articles'); \n\nconst PublishingAppRoutes = [ \n\n  { \n\n    route: 'articles.length', \n\n      get: () =>  Article.count({}, (err, count) => count) \n\n        .then ((articlesCountInDB) => { \n\n          return { \n\n            path: ['articles', 'length'], \n\n            value: articlesCountInDB \n\n          }; \n\n      }) \n\n  }, \n\n  { \n\n    route: 'articles[{integers}]  \n\n    [\"id\",\"articleTitle\",\"articleContent\"]', \n\n    get: (pathSet) => { \n\n      const articlesIndex = pathSet[1]; \n\n      return Article.find({}, (err, articlesDocs) =>         \n\n      articlesDocs); \n\n       .then ((articlesArrayFromDB) => { \n\n          let results = []; \n\n          articlesIndex.forEach((index) => { \n\n            const singleArticleObject =              \n\n            articlesArrayFromDB[index].toObject(); \n\n            const falcorSingleArticleResult = { \n\n              path: ['articles', index], \n\n              value: singleArticleObject \n\n            }; \n\n            results.push(falcorSingleArticleResult); \n\n          }); \n\n          return results; \n\n        }) \n\n      } \n\n  } \n\n]; \n\nexport default PublishingAppRoutes;\n\n```", "```jsx\n{ \n\n\"name\": \"project\", \n\n\"version\": \"1.0.0\", \n\n\"scripts\": { \n\n\"dev\": \"webpack-dev-server\", \n\n\"start\": \"npm run webpack; node server\", \n\n\"webpack\": \"webpack --config ./webpack.config.js\" \n\n  }, \n\n\"dependencies\": { \n\n\"body-parser\": \"^1.15.0\", \n\n\"cors\": \"^2.7.1\", \n\n\"express\": \"^4.13.4\", \n\n\"falcor\": \"^0.1.16\", \n\n\"falcor-express\": \"^0.1.2\", \n\n\"falcor-http-datasource\": \"^0.1.3\", \n\n\"falcor-router\": \"0.2.12\", \n\n\"mongoose\": \"4.4.5\", \n\n\"react\": \"^0.14.7\", \n\n\"react-dom\": \"^0.14.7\", \n\n\"react-redux\": \"^4.4.0\", \n\n\"redux\": \"^3.3.1\" \n\n  }, \n\n\"devDependencies\": { \n\n\"babel\": \"^6.5.2\", \n\n\"babel-core\": \"^6.6.5\", \n\n\"babel-loader\": \"^6.2.4\", \n\n\"babel-polyfill\": \"^6.6.1\", \n\n\"babel-preset-es2015\": \"^6.6.0\", \n\n\"babel-preset-react\": \"^6.5.0\", \n\n\"babel-preset-stage-0\": \"^6.5.0\", \n\n\"webpack\": \"^1.12.14\", \n\n\"webpack-dev-server\": \"^1.14.1\" \n\n  } \n\n}\n\n```"]