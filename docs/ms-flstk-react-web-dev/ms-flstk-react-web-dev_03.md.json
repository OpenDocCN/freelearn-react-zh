["```jsx\n$ [[you are in the server directory of your project]]\n\n$ touch fetchServerSide.js\n\n```", "```jsx\nexport default () => { \n\n    return { \n\n'article':{ \n\n      '0': { \n\n        'articleTitle': 'SERVER-SIDE Lorem ipsum - article one', \n\n        'articleContent':'SERVER-SIDE Here goes the content of the \n\n         article' \n\n      }, \n\n      '1': { \n\n        'articleTitle':'SERVER-SIDE Lorem ipsum - article two', \n\n        'articleContent':'SERVER-SIDE Sky is the limit, the \n\n         content goes here.' \n\n      } \n\n    } \n\n  } \n\n} \n\n```", "```jsx\napp.use(cors()); \n\napp.use(bodyParser.json({extended: false})) \n\n```", "```jsx\nimport React from 'react'; \n\nimport {createStore} from 'redux'; \n\nimport {Provider} from 'react-redux'; \n\nimport {renderToStaticMarkup} from 'react-dom/server'; \n\nimport ReactRouter from 'react-router'; \n\nimport {RoutingContext, match} from 'react-router'; \n\nimport * as hist  from 'history'; \n\nimport rootReducer from '../src/reducers'; \n\nimport reactRoutes from '../src/routes'; \n\nimport fetchServerSide from './fetchServerSide'; \n\n```", "```jsx\nimport http from 'http'; \n\nimport express from 'express'; \n\nimport cors from 'cors'; \n\nimport bodyParser from 'body-parser'; \n\nimport falcor from 'falcor'; \n\nimport falcorExpress from 'falcor-express'; \n\nimport falcorRouter from 'falcor-router'; \n\nimport routes from './routes.js'; \n\nimport React from 'react' \n\nimport { createStore } from 'redux' \n\nimport { Provider } from 'react-redux' \n\nimport { renderToStaticMarkup } from 'react-dom/server' \n\nimport ReactRouter from 'react-router'; \n\nimport { RoutingContext, match } from 'react-router'; \n\nimport * as hist  from 'history'; \n\nimport rootReducer from '../src/reducers'; \n\nimport reactRoutes from '../src/routes'; \n\nimport fetchServerSide from './fetchServerSide'; \n\n```", "```jsx\n// this already exists in your codebase \n\napp.use('/model.json', falcorExpress.dataSourceRoute((req, res) => { \n\n  return new falcorRouter(routes); // this already exists in your \n\n   codebase \n\n})); \n\n```", "```jsx\nlet handleServerSideRender = (req, res) => \n\n{ \n\n  return; \n\n}; \n\nlet renderFullHtml = (html, initialState) => \n\n{ \n\n  return; \n\n}; \n\napp.use(handleServerSideRender); \n\n```", "```jsx\napp.use(express.static('dist')); \n\n```", "```jsx\napp.use('/static', express.static('dist')); \n\n```", "```jsx\nlet renderFullHtml = (html, initialState) => \n\n{ \n\n  return; // this is already in your codebase \n\n}; \n\n```", "```jsx\nlet renderFullPage = (html, initialState) => \n\n{ \n\n  return &grave; \n\n<!doctype html> \n\n<html> \n\n<head> \n\n<title>Publishing App Server Side Rendering</title> \n\n</head> \n\n<body> \n\n<h1>Server side publishing app</h1> \n\n<div id=\"publishingAppRoot\">${html}</div> \n\n<script> \n\nwindow.__INITIAL_STATE__ = ${JSON.stringify(initialState)} \n\n</script> \n\n<script src=\"/static/app.js\"></script> \n\n</body> \n\n</html> \n\n    &grave; \n\n}; \n\n```", "```jsx\n${html}\n\n```", "```jsx\nlet handleServerSideRender = (req, res) => \n\n{ \n\n  return; \n\n}; \n\n```", "```jsx\nlet handleServerSideRender = (req, res, next) => { \n\n  try { \n\n    let initMOCKstore = fetchServerSide(); // mocked for now \n\n    // Create a new Redux store instance \n\n    const store = createStore(rootReducer, initMOCKstore); \n\n    const location = hist.createLocation(req.path); \n\n    match({ \n\n      routes: reactRoutes, \n\n      location: location, \n\n    }, (err, redirectLocation, renderProps) => { \n\n      if (redirectLocation) { \n\n        res.redirect(301, redirectLocation.pathname + \n\n        redirectLocation.search); \n\n      } else if (err) { \n\n        console.log(err); \n\n        next(err); \n\n        // res.send(500, error.message); \n\n      } else if (renderProps === null) { \n\n        res.status(404) \n\n        .send('Not found'); \n\n      } else { \n\n      if  (typeofrenderProps === 'undefined') { \n\n        // using handleServerSideRender middleware not required; \n\n        // we are not requesting HTML (probably an app.js or other \n\n        file) \n\n        return; \n\n      } \n\n        let html = renderToStaticMarkup( \n\n          <Provider store={store}> \n\n          <RoutingContext {...renderProps}/> \n\n          </Provider> \n\n        ); \n\n        const initialState = store.getState() \n\n        let fullHTML = renderFullPage(html, initialState); \n\n        res.send(fullHTML); \n\n      } \n\n    }); \n\n  } catch (err) { \n\n      next(err) \n\n  } \n\n} \n\n```", "```jsx\n// this is already added to your codebase: \n\nlet html = renderToStaticMarkup( \n\n<Provider store={store}> \n\n<RoutingContext {...renderProps}/> \n\n</Provider> \n\n); \n\nconst initialState = store.getState(); \n\nlet fullHTML = renderFullPage(html, initialState); \n\nres.send(fullHTML); \n\n```", "```jsx\nimport http from 'http';\n\nimport express from 'express'; \n\nimport cors from 'cors'; \n\nimport bodyParser from 'body-parser'; \n\nimport falcor from 'falcor'; \n\nimport falcorExpress from 'falcor-express'; \n\nimport falcorRouter from 'falcor-router'; \n\nimport routes from './routes.js'; \n\nimport React from 'react' \n\nimport { createStore } from 'redux' \n\nimport { Provider } from 'react-redux' \n\nimport { renderToStaticMarkup } from 'react-dom/server' \n\nimport ReactRouter from 'react-router'; \n\nimport { RoutingContext, match } from 'react-router'; \n\nimport * as hist from 'history'; \n\nimport rootReducer from '../src/reducers'; \n\nimport reactRoutes from '../src/routes'; \n\nimport fetchServerSide from './fetchServerSide'; \n\nconst app = express(); \n\napp.server = http.createServer(app); \n\n// CORS - 3rd party middleware \n\napp.use(cors()); \n\n// This is required by falcor-express middleware to work correctly \n\n with falcor-browser \n\napp.use(bodyParser.json({extended: false})); \n\napp.use(bodyParser.urlencoded({extended: false})); \n\napp.use('/static', express.static('dist')); \n\napp.use('/model.json', falcorExpress.dataSourceRoute(function(req, res) { \n\n  return new falcorRouter(routes); \n\n})); \n\nlet handleServerSideRender = (req, res, next) => { \n\n  try { \n\n    let initMOCKstore = fetchServerSide(); // mocked for now \n\n    // Create a new Redux store instance \n\n    const store = createStore(rootReducer, initMOCKstore); \n\n    const location = hist.createLocation(req.path); \n\n    match({ \n\n      routes: reactRoutes, \n\n      location: location, \n\n      }, (err, redirectLocation, renderProps) => { \n\n        if (redirectLocation) { \n\n          res.redirect(301, redirectLocation.pathname +  \n\n          redirectLocation.search); \n\n        } else if (err) { \n\n          next(err); \n\n        // res.send(500, error.message); \n\n        } else if (renderProps === null) { \n\n          res.status(404) \n\n          .send('Not found'); \n\n        } else { \n\n            if (typeofrenderProps === 'undefined') { \n\n            // using handleServerSideRender middleware not \n\n             required; \n\n            // we are not requesting HTML (probably an app.js or \n\n             other file) \n\n            return; \n\n          } \n\n          let html = renderToStaticMarkup( \n\n            <Provider store={store}> \n\n            <RoutingContext {...renderProps}/> \n\n            </Provider> \n\n          ); \n\n          const initialState = store.getState() \n\n          let fullHTML = renderFullPage(html, initialState); \n\n          res.send(fullHTML); \n\n        } \n\n       }); \n\n    } catch (err) { \n\n    next(err) \n\n  } \n\n} \n\nlet renderFullPage = (html, initialState) => \n\n{ \n\nreturn &grave; \n\n<!doctype html> \n\n<html> \n\n<head> \n\n<title>Publishing App Server Side Rendering</title> \n\n</head> \n\n<body> \n\n<h1>Server side publishing app</h1> \n\n<div id=\"publishingAppRoot\">${html}</div> \n\n<script> \n\nwindow.__INITIAL_STATE__ = ${JSON.stringify(initialState)} \n\n</script> \n\n<script src=\"/static/app.js\"></script> \n\n</body> \n\n</html> \n\n&grave; \n\n}; \n\napp.use(handleServerSideRender); \n\napp.server.listen(process.env.PORT || 3000); \n\nconsole.log(&grave;Started on port ${app.server.address().port}&grave;); \n\nexport default app; \n\n```", "```jsx\nimport React from 'react'; \n\nimport { Link } from 'react-router'; \n\nimport themeDecorator from 'material-ui/lib/styles/theme- \n\n decorator'; \n\nimport getMuiTheme from 'material-ui/lib/styles/getMuiTheme'; \n\nclass CoreLayout extends React.Component { \n\n  static propTypes = { \n\n    children :React.PropTypes.element \n\n  } \n\n```", "```jsx\nimport themeDecorator from 'material-ui/lib/styles/theme-decorator'; \n\nimport getMuiTheme from 'material-ui/lib/styles/getMuiTheme'; \n\n```", "```jsx\n  render () { \n\n    return ( \n\n<div> \n\n<span> \n\n    Links:   <Link to='/register'>Register</Link> |  \n\n      <Link to='/login'>Login</Link> |  \n\n      <Link to='/'>Home Page</Link> \n\n</span> \n\n<br/> \n\n   {this.props.children} \n\n</div> \n\n    ); \n\n  } \n\nexport default themeDecorator(getMuiTheme(null, { userAgent: 'all' }))(CoreLayout); \n\n```", "```jsx\ncomponentWillMount() { \n\n  this._fetch(); \n\n} \n\n```", "```jsx\ncomponentWillMount() { \n\n  if(typeof window !== 'undefined') { \n\n    this._fetch(); // we are server side rendering, no fetching \n\n  } \n\n} \n\n```", "```jsx\nimport React  from 'react'; \n\nimport {Provider}  from 'react-redux'; \n\nimport {Router}  from 'react-router'; \n\nimport routes  from '../routes'; \n\nimport createHashHistory  from 'history/lib/createHashHistory'; \n\nexport default class Root extends React.Component { \n\n  static propTypes = { \n\n    history : React.PropTypes.object.isRequired, \n\n    store   : React.PropTypes.object.isRequired \n\n  } \n\nrender () { \n\n    return ( \n\n<Provider store={this.props.store}> \n\n<div> \n\n<Router history={this.props.history}> \n\n{routes} \n\n</Router> \n\n</div> \n\n</Provider> \n\n    ); \n\n  } \n\n} \n\n```", "```jsx\n// deleted code from Root.js \n\nconst noQueryKeyHistory = createHashHistory({ \n\n  queryKey: false \n\n}); \n\n```", "```jsx\n<Router history={noQueryKeyHistory}> \n\n```", "```jsx\n<Router history={this.props.history}> \n\n```"]