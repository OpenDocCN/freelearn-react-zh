["```jsx\npost: () => Relay.QL \n\n  fragment on Articles { \n\n    title, \n\n    content \n\n  } \n\n```", "```jsx\nSELECT title, content FROM Articles \n\n```", "```jsx\nconst articlesLength = await falcorModel. \n\n  getValue('articles.length'). \n\n  then((length) => length); \n\nconst articles = await falcorModel. \n\n  get(['articles', {from: 0, to: articlesLength-1}, \n\n   ['_id','articleTitle', 'articleContent']]).  \n\n  then((articlesResponse) => articlesResponse.json.articles); \n\n```", "```jsx\n// this code is already in the codebase \n\nconst falcor = require('falcor'); \n\nconst FalcorDataSource = require('falcor-http-datasource'); \n\nconst model = new falcor.Model({ \n\n  source: new FalcorDataSource('/model.json') \n\n}); \n\nexport default model; \n\n```", "```jsx\nimport falcor from 'falcor'; \n\nimport FalcorDataSource from 'falcor-http-datasource'; \n\nclass PublishingAppDataSource extends FalcorDataSource { \n\n  onBeforeRequest ( config ) { \n\n    const token = localStorage.token; \n\n    const username = localStorage.username; \n\n    const role = localStorage.role; \n\n    if (token && username && role) { \n\n      config.headers['token'] = token; \n\n      config.headers['username'] = username; \n\n      config.headers['role'] = role; \n\n    } \n\n  } \n\n} \n\nconst model = new falcor.Model({ \n\n  source: new PublishingAppDataSource('/model.json') \n\n}); \n\nexport default model; \n\n```", "```jsx\n// this shall be already in your codebase \n\napp.use('/model.json', falcorExpress.dataSourceRoute((req, res) \n\n => { \n\n  return new falcorRouter(routes); \n\n})); \n\n```", "```jsx\napp.use('/model.json', falcorExpress.dataSourceRoute((req, res) \n\n => { \n\n  return new falcorRouter( \n\n      [] \n\n        .concat(routes(req, res)) \n\n    ); \n\n})); \n\n```", "```jsx\n// this code is already in your codebase: \n\nconst PublishingAppRoutes = [ \n\n    ...sessionRoutes, \n\n  { \n\n  route: 'articles.length', \n\n    get: () => { \n\n      return Article.count({}, function(err, count) { \n\n        return count; \n\n      }).then ((articlesCountInDB) => { \n\n        return { \n\n          path: ['articles', 'length'], \n\n          value: articlesCountInDB \n\n        } \n\n      }) \n\n  } \n\n}, \n\n//  \n\n// ...... There is more code between, it has been truncated in \n\n //order to save space \n\n// \n\nexport default PublishingAppRoutes;  \n\n```", "```jsx\nimport configMongoose from './configMongoose'; \n\nimport sessionRoutes from './routesSession'; \n\nimport jsonGraph from 'falcor-json-graph'; \n\nimport jwt from 'jsonwebtoken'; \n\nimport jwtSecret from './configSecret'; \n\nlet $atom = jsonGraph.atom; // this will be explained later \n\n                            //in the chapter \n\nconst Article = configMongoose.Article; \n\n```", "```jsx\nexport default ( req, res ) => { \n\n  let { token, role, username } = req.headers; \n\n  let userDetailsToHash = username+role; \n\n  let authSignToken = jwt.sign(userDetailsToHash, \n\n   jwtSecret.secret); \n\n  let isAuthorized = authSignToken === token; \n\n  let sessionObject = {isAuthorized, role, username}; \n\n  console.info(&grave;The ${username} is authorized === &grave;, \n\n   isAuthorized); \n\n  const PublishingAppRoutes = [ \n\n      ...sessionRoutes, \n\n    { \n\n    route: 'articles.length', \n\n      get: () => { \n\n        return Article.count({}, function(err, count) { \n\n          return count; \n\n        }).then ((articlesCountInDB) => { \n\n          return { \n\n            path: ['articles', 'length'], \n\n            value: articlesCountInDB \n\n          } \n\n        }) \n\n    } \n\n  }]; \n\n  return PublishingAppRoutes; \n\n} \n\n```", "```jsx\n { \n\n    route: \n\n     'articles[{integers}][\"_id\",\"articleTitle\",\"articleContent\"]', \n\n    get: (pathSet) => { \n\n      const articlesIndex = pathSet[1]; \n\n      return Article.find({}, function(err, articlesDocs) { \n\n        return articlesDocs; \n\n      }).then ((articlesArrayFromDB) => { \n\n        let results = []; \n\n        articlesIndex.forEach((index) => { \n\n          const singleArticleObject = \n\n           articlesArrayFromDB[index].toObject(); \n\n          const falcorSingleArticleResult = { \n\n            path: ['articles', index], \n\n            value: singleArticleObject \n\n          }; \n\n          results.push(falcorSingleArticleResult); \n\n        }); \n\n        return results; \n\n      }) \n\n    } \n\n  } \n\n```", "```jsx\n{ $type: 'ref', value: ['articlesById', 'STRING_ARTICLE_ID_HERE'] } \n\n```", "```jsx\n// wait, this is just an example, don't code this here: \n\nimport jsonGraph from 'falcor-json-graph'; \n\nlet $ref = jsonGraph.ref; \n\n// now you can use $ref([x, y]) function \n\n```", "```jsx\nnpm i --save falcor-json-graph@1.1.7\n\n```", "```jsx\n// this is just explanation example, don't write this here \n\n// we assume that _id comes from MongoDB \n\n[ \n\n  { \n\n    _id: '987654', \n\n    articleTitle: 'Lorem ipsum - article one', \n\n    articleContent: 'Here goes the content of the article' \n\n  }, \n\n  { \n\n    _id: '123456', \n\n    articleTitle: 'Lorem ipsum - article two', \n\n    articleContent: 'Sky is the limit, the content goes here.' \n\n  } \n\n] \n\n```", "```jsx\n// JSON envelope is an array of two $refs  \n\n// The following is an example, don't write it \n\n[ \n\n  $ref([ articlesById,'987654' ]), \n\n  $ref([ articlesById,'123456' ]) \n\n] \n\n```", "```jsx\n// JSON envelope is an array of two $refs (other notation than \n\n //above, but the same end effect) \n\n[ \n\n  { $type: 'ref', value: ['articlesById', '987654'] }, \n\n  { $type: 'ref', value: ['articlesById', '123456'] } \n\n] \n\n```", "```jsx\n// this is just explanatory example code: \n\nlet cache = { \n\n  articles: [ \n\n    { \n\n        id: 987654, \n\n        articleTitle: 'Lorem ipsum - article one', \n\n        articleContent: 'Here goes the content of the article' \n\n        numberOfLikes: 0 \n\n    }, \n\n    { \n\n        id: 123456, \n\n        articleTitle: 'Lorem ipsum - article two from backend', \n\n        articleContent: 'Sky is the limit, the content goes \n\n         here.', \n\n        numberOfLikes: 0 \n\n    } \n\n  ], \n\n  recentlyVisitedArticles: [ \n\n    { \n\n        id: 123456, \n\n        articleTitle: 'Lorem ipsum - article two from backend', \n\n        articleContent: 'Sky is the limit, the content goes \n\n         here.', \n\n        numberOfLikes: 0 \n\n    } \n\n  ] \n\n}; \n\n```", "```jsx\nlet cache = { \n\n  articlesById: { \n\n    987654: { \n\n        _id: 987654, \n\n        articleTitle: 'Lorem ipsum - article one', \n\n        articleContent: 'Here goes the content of the article' \n\n        numberOfLikes: 0 \n\n    }, \n\n    123456: { \n\n        _id: 123456, \n\n        articleTitle: 'Lorem ipsum - article two from backend', \n\n        articleContent: 'Sky is the limit, the content goes \n\n         here.', \n\n        numberOfLikes: 0 \n\n    } \n\n  }, \n\n  articles: [ \n\n    { $type: 'ref', value: ['articlesById', '987654'] }, \n\n    { $type: 'ref', value: ['articlesById', '123456'] } \n\n  ], \n\n  recentlyVisitedArticles: [ \n\n    { $type: 'ref', value: ['articlesById', '123456'] } \n\n  ] \n\n}; \n\n```", "```jsx\n// example of ref, don't write it yet: \n\nlet articleRef = $ref(['articlesById', currentMongoID]); \n\n```", "```jsx\n// this is old codebase, you already shall have it: \n\nimport mongoose from 'mongoose'; \n\nconst conf = { \n\n  hostname: process.env.MONGO_HOSTNAME || 'localhost', \n\n  port: process.env.MONGO_PORT || 27017, \n\n  env: process.env.MONGO_ENV || 'local', \n\n}; \n\nmongoose.connect(&grave;mongodb://${conf.hostname}:${conf.port}/ \n\n ${conf.env}&grave;); \n\nconst articleSchema = { \n\n  articleTitle:String, \n\n  articleContent:String \n\n} \n\n```", "```jsx\nimport mongoose from 'mongoose'; \n\nconst Schema = mongoose.Schema; \n\nconst conf = { \n\n  hostname: process.env.MONGO_HOSTNAME || 'localhost', \n\n  port: process.env.MONGO_PORT || 27017, \n\n  env: process.env.MONGO_ENV || 'local', \n\n}; \n\nmongoose.connect(&grave;mongodb://${conf.hostname}:${conf.port}/ \n\n ${conf.env}&grave;); \n\nconst articleSchema = new Schema({ \n\n    articleTitle:String, \n\n    articleContent:String, \n\n    articleContentJSON: Object \n\n  },  \n\n  {  \n\n    minimize: false  \n\n  } \n\n); \n\n```", "```jsx\nimport configMongoose from './configMongoose'; \n\nimport sessionRoutes from './routesSession'; \n\nimport jsonGraph from 'falcor-json-graph'; // this is new \n\nimport jwt from 'jsonwebtoken'; \n\nimport jwtSecret from './configSecret'; \n\nlet $ref = jsonGraph.ref; // this is new \n\nlet $atom = jsonGraph.atom; // this is new \n\nconst Article = configMongoose.Article; \n\n```", "```jsx\n { \n\n    route: 'articlesById[{keys}][\"_id\",\"articleTitle\", \n\n     \"articleContent\",\"articleContentJSON\"]', \n\n      get: function(pathSet) { \n\n      let articlesIDs = pathSet[1]; \n\n      return Article.find({ \n\n            '_id': { $in: articlesIDs} \n\n        }, function(err, articlesDocs) { \n\n          return articlesDocs; \n\n        }).then ((articlesArrayFromDB) => { \n\n          let results = []; \n\n          articlesArrayFromDB.map((articleObject) => { \n\n            let articleResObj = articleObject.toObject(); \n\n            let currentIdString = String(articleResObj['_id']); \n\n            if (typeof articleResObj.articleContentJSON !== \n\n             'undefined') { \n\n              articleResObj.articleContentJSON = \n\n               $atom(articleResObj.articleContentJSON); \n\n            } \n\n            results.push({ \n\n              path: ['articlesById', currentIdString], \n\n              value: articleResObj \n\n            }); \n\n          }); \n\n          return results; \n\n        }); \n\n    } \n\n  }, \n\n```", "```jsx\n// just an example: \n\n[ \n\n  { $type: 'ref', value: ['articlesById', '123456'] }, \n\n  { $type: 'ref', value: ['articlesById', '987654'] } \n\n] \n\n```", "```jsx\n['articlesById', ['123456', '987654']] \n\n```", "```jsx\n['123456', '987654'] \n\n```", "```jsx\n// this is already in your codebase: \n\nreturn Article.find({ \n\n            '_id': { $in: articlesIDs} \n\n        }, function(err, articlesDocs) { \n\n```", "```jsx\n// this already is in your codebase: \n\narticlesArrayFromDB.map((articleObject) => { \n\n```", "```jsx\n// this already is in your codebase: \n\nlet articleResObj = articleObject.toObject(); \n\nlet currentIdString = String(articleResObj['_id']); \n\nif (typeof articleResObj.articleContentJSON !== 'undefined') { \n\n  articleResObj.articleContentJSON = \n\n   $atom(articleResObj.articleContentJSON); \n\n} \n\nresults.push({ \n\n  path: ['articlesById', currentIdString], \n\n  value: articleResObj \n\n}); \n\n```", "```jsx\n// this already is in your codebase: \n\nif (typeof articleResObj.articleContentJSON !== 'undefined') { \n\n  articleResObj.articleContentJSON = \n\n   $atom(articleResObj.articleContentJSON); \n\n} \n\n```", "```jsx\nUncaught MaxRetryExceededError: The allowed number of retries \n\nhave been exceeded. \n\n```", "```jsx\n// this already shall be in your codebase: \n\n  { \n\n    route: \n\n     'articles[{integers}][\"_id\",\"articleTitle\",\"articleContent\"]', \n\n    get: (pathSet) => { \n\n      const articlesIndex = pathSet[1]; \n\n      return Article.find({}, function(err, articlesDocs) { \n\n        return articlesDocs; \n\n      }).then ((articlesArrayFromDB) => { \n\n        let results = []; \n\n        articlesIndex.forEach((index) => { \n\n          const singleArticleObject = \n\n           articlesArrayFromDB[index].toObject(); \n\n          const falcorSingleArticleResult = { \n\n            path: ['articles', index], \n\n            value: singleArticleObject \n\n          }; \n\n          results.push(falcorSingleArticleResult); \n\n        }); \n\n        return results; \n\n      }) \n\n    } \n\n  } \n\n```", "```jsx\n { \n\n    route: 'articles[{integers}]', \n\n    get: (pathSet) => { \n\n      const articlesIndex = pathSet[1]; \n\n      return Article.find({}, '_id', function(err, articlesDocs) { \n\n        return articlesDocs; \n\n      }).then ((articlesArrayFromDB) => { \n\n        let results = []; \n\n        articlesIndex.forEach((index) => { \n\n          let currentMongoID = \n\n           String(articlesArrayFromDB[index]['_id']); \n\n          let articleRef = $ref(['articlesById', currentMongoID]); \n\n          const falcorSingleArticleResult = { \n\n            path: ['articles', index], \n\n            value: articleRef \n\n          }; \n\n          results.push(falcorSingleArticleResult); \n\n        }); \n\n        return results; \n\n      }) \n\n    } \n\n  }, \n\n```", "```jsx\n// this is already in your codebase: \n\nlet currentMongoID = String(articlesArrayFromDB[index]['_id']); \n\nlet articleRef = $ref(['articlesById', currentMongoID]); \n\n```", "```jsx\n// old version \n\nconst singleArticleObject = articlesArrayFromDB[index].toObject(); \n\nconst falcorSingleArticleResult = { \n\n  path: ['articles', index], \n\n  value: singleArticleObject \n\n}; \n\n```", "```jsx\n// new improved version \n\nlet articleRef = $ref(['articlesById', currentMongoID]); \n\nconst falcorSingleArticleResult = { \n\n  path: ['articles', index], \n\n  value: articleRef \n\n}; \n\n```", "```jsx\n { \n\n    route: 'articles.add', \n\n    call: (callPath, args) => { \n\n      const newArticleObj = args[0]; \n\n      var article = new Article(newArticleObj); \n\n      return article.save(function (err, data) { \n\n        if (err) { \n\n          console.info('ERROR', err); \n\n          return err; \n\n        } \n\n        else { \n\n          return data; \n\n        } \n\n      }).then ((data) => { \n\n        return Article.count({}, function(err, count) { \n\n        }).then((count) => { \n\n          return { count, data }; \n\n        }); \n\n      }).then ((res) => { \n\n        // \n\n        // we will add more stuff here in a moment, below \n\n        // \n\n        return results; \n\n      }); \n\n    } \n\n  } \n\n```", "```jsx\nreturn article.save(function (err, data) { \n\n```", "```jsx\nreturn Article.count({}, function(err, count) { \n\n```", "```jsx\n// \n\n// we will add more stuff here in a moment, below \n\n// \n\n```", "```jsx\n let newArticleDetail = res.data.toObject(); \n\n let newArticleID = String(newArticleDetail['_id']); \n\n let NewArticleRef = $ref(['articlesById', newArticleID]); \n\n let results = [ \n\n   { \n\n     path: ['articles', res.count-1], \n\n     value: NewArticleRef \n\n   }, \n\n   { \n\n     path: ['articles', 'newArticleID'], \n\n     value: newArticleID \n\n   }, \n\n   { \n\n     path: ['articles', 'length'], \n\n     value: res.count \n\n   } \n\n ]; \n\n return results; \n\n```", "```jsx\nget(['articles', {from: 0, to: articlesLength-1}, ['_id','articleTitle', 'articleContent']]). \n\n```", "```jsx\nget(['articles', {from: 0, to: articlesLength-1}, ['_id','articleTitle', 'articleContent', 'articleContentJSON']]).  \n\n```", "```jsx\n// this is old function to replace: \n\n  _articleSubmit() { \n\n    let newArticle = { \n\n      articleTitle: this.state.title, \n\n      articleContent: this.state.htmlContent, \n\n      articleContentJSON: this.state.contentJSON \n\n    } \n\n    let newArticleID = 'MOCKEDRandomid' + Math.floor(Math.random() *    \n\n    10000); \n\n    newArticle['_id'] = newArticleID; \n\n    this.props.articleActions.pushNewArticle(newArticle); \n\n    this.setState({ newArticleID: newArticleID}); \n\n  } \n\n```", "```jsx\n async _articleSubmit() { \n\n    let newArticle = { \n\n      articleTitle: this.state.title, \n\n      articleContent: this.state.htmlContent, \n\n      articleContentJSON: this.state.contentJSON \n\n    } \n\n    let newArticleID = await falcorModel \n\n      .call( \n\n            'articles.add', \n\n            [newArticle] \n\n          ). \n\n      then((result) => { \n\n        return falcorModel.getValue( \n\n            ['articles', 'newArticleID'] \n\n          ).then((articleID) => { \n\n            return articleID; \n\n          }); \n\n      }); \n\n    newArticle['_id'] = newArticleID; \n\n    this.props.articleActions.pushNewArticle(newArticle); \n\n    this.setState({ newArticleID: newArticleID}); \n\n  } \n\n```", "```jsx\nimport falcorModel from '../../falcorModel.js'; \n\n```", "```jsx\n// this already is in your codebase: \n\nlet newArticleID = await falcorModel \n\n  .call( \n\n        'articles.add', \n\n        [newArticle] \n\n      ). \n\n  then((result) => { \n\n    return falcorModel.getValue( \n\n        ['articles', 'newArticleID'] \n\n      ).then((articleID) => { \n\n        return articleID; \n\n      }); \n\n  }); \n\n```", "```jsx\n// this already is in your codebase: \n\nreturn falcorModel.getValue( \n\n        ['articles', 'newArticleID'] \n\n      ).then((articleID) => { \n\n        return articleID; \n\n      }); \n\n```", "```jsx\nnewArticle['_id'] = newArticleID; \n\nthis.props.articleActions.pushNewArticle(newArticle); \n\nthis.setState({ newArticleID: newArticleID}); \n\n```", "```jsx\n// this already is in your codebase (just an example) \n\n    { \n\n    route: 'articles.length', \n\n      get: () => { \n\n        return Article.count({}, function(err, count) { \n\n          return count; \n\n        }).then ((articlesCountInDB) => { \n\n          return { \n\n            path: ['articles', 'length'], \n\n            value: articlesCountInDB \n\n          } \n\n        }) \n\n    } \n\n  },  \n\n```", "```jsx\n     get: () => { \n\n        return Article.count({}, function(err, count) { \n\n          return count; \n\n        }).then ((articlesCountInDB) => { \n\n          return [ \n\n            { \n\n              path: ['articles', 'length'], \n\n              value: articlesCountInDB \n\n            } \n\n          ] \n\n        }) \n\n    } \n\n```", "```jsx\n// this is already in your codebase \n\nlet results = []; \n\narticlesArrayFromDB.map((articleObject) => { \n\n  let articleResObj = articleObject.toObject(); \n\n  let currentIdString = String(articleResObj['_id']); \n\n  if (typeof articleResObj.articleContentJSON !== 'undefined') { \n\n    articleResObj.articleContentJSON = \n\n     $atom(articleResObj.articleContentJSON); \n\n  } \n\n  // pushing multiple routes \n\n  results.push({ \n\n    path: ['articlesById', currentIdString], \n\n    value: articleResObj \n\n  }); \n\n}); \n\nreturn results; // returning array of routes' objects \n\n```", "```jsx\n { \n\n  route: 'articles.update', \n\n  call: async (callPath, args) =>  \n\n    { \n\n      let updatedArticle = args[0]; \n\n      let articleID = String(updatedArticle._id); \n\n      let article = new Article(updatedArticle); \n\n      article.isNew = false; \n\n      return article.save(function (err, data) { \n\n        if (err) { \n\n          console.info('ERROR', err); \n\n          return err; \n\n        } \n\n      }).then ((res) => { \n\n        return [ \n\n          { \n\n            path: ['articlesById', articleID], \n\n            value: updatedArticle \n\n          }, \n\n          { \n\n            path: ['articlesById', articleID], \n\n            invalidate: true \n\n          } \n\n        ]; \n\n      }); \n\n    } \n\n  }, \n\n```", "```jsx\n{\"error\":{\"name\":\"MongoError\",\"code\":11000,\"err\":\"insertDocument \n\n :: caused by :: 11000 E11000 duplicate key error index: \n\n staging.articles.$_id _ dup key: { : \n\n ObjectId('1515b34ed65022ec234b5c5f') }\"}} \n\n```", "```jsx\n// this is already in your code base: \n\nreturn [ \n\n  { \n\n    path: ['articlesById', articleID], \n\n    value: updatedArticle \n\n  }, \n\n  { \n\n    path: ['articlesById', articleID], \n\n    invalidate: true \n\n  } \n\n]; \n\n```", "```jsx\n { \n\n  route: 'articles.delete', \n\n  call: (callPath, args) =>  \n\n    { \n\n      const toDeleteArticleId = args[0]; \n\n      return Article.find({ _id: toDeleteArticleId }). \n\n       remove((err) => { \n\n        if (err) { \n\n          console.info('ERROR', err); \n\n          return err; \n\n        } \n\n      }).then((res) => { \n\n        return [ \n\n          { \n\n            path: ['articlesById', toDeleteArticleId], \n\n            invalidate: true \n\n          } \n\n        ] \n\n      }); \n\n    } \n\n  } \n\n```", "```jsx\n// this is old already in your codebase: \n\n  _articleEditSubmit() { \n\n    let currentArticleID = this.state.editedArticleID; \n\n    let editedArticle = { \n\n      _id: currentArticleID, \n\n      articleTitle: this.state.title, \n\n      articleContent: this.state.htmlContent, \n\n      articleContentJSON: this.state.contentJSON \n\n    } \n\n    this.props.articleActions.editArticle(editedArticle); \n\n    this.setState({ articleEditSuccess: true }); \n\n  } \n\n```", "```jsx\n async _articleEditSubmit() { \n\n    let currentArticleID = this.state.editedArticleID; \n\n    let editedArticle = { \n\n      _id: currentArticleID, \n\n      articleTitle: this.state.title, \n\n      articleContent: this.state.htmlContent, \n\n      articleContentJSON: this.state.contentJSON \n\n    } \n\n    let editResults = await falcorModel \n\n      .call( \n\n            ['articles', 'update'], \n\n            [editedArticle] \n\n          ). \n\n      then((result) => { \n\n        return result; \n\n      }); \n\n    this.props.articleActions.editArticle(editedArticle); \n\n    this.setState({ articleEditSuccess: true }); \n\n  } \n\n```", "```jsx\n// old version \n\n  _handleDeletion() { \n\n    let articleID = this.state.editedArticleID; \n\n    this.props.articleActions.deleteArticle(articleID); \n\n    this.setState({ \n\n      openDelete: false \n\n    }); \n\n    this.props.history.pushState(null, '/dashboard'); \n\n  } \n\n```", "```jsx\n async _handleDeletion() { \n\n    let articleID = this.state.editedArticleID; \n\n    let deletetionResults = await falcorModel \n\n      .call( \n\n            ['articles', 'delete'], \n\n            [articleID] \n\n          ). \n\n      then((result) => { \n\n        return result; \n\n      }); \n\n    this.props.articleActions.deleteArticle(articleID); \n\n    this.setState({ \n\n      openDelete: false \n\n    }); \n\n    this.props.history.pushState(null, '/dashboard'); \n\n  } \n\n```", "```jsx\nimport AppBar from 'material-ui/lib/app-bar'; \n\nimport Snackbar from 'material-ui/lib/snackbar'; \n\n```", "```jsx\nlet errorFuncUtil =  (errMsg, errPath) => { \n\n} \n\nexport { errorFuncUtil as errorFunc }; \n\n```", "```jsx\n// old constructor \n\nconstructor(props) { \n\n  super(props); \n\n} \n\n```", "```jsx\nconstructor(props) { \n\n  super(props); \n\n    this.state = { \n\n      errorValue: null \n\n    } \n\n  if (typeof window !== 'undefined') { \n\n    errorFuncUtil = this.handleFalcorErrors.bind(this); \n\n  } \n\n} \n\n```", "```jsx\nhandleFalcorErrors(errMsg, errPath) { \n\n  let errorValue = &grave;Error: ${errMsg} (path ${JSON.stringify(errPath)})&grave; \n\n  this.setState({errorValue}); \n\n} \n\n```", "```jsx\n render () { \n\n    let errorSnackbarJSX = null; \n\n    if (this.state.errorValue) { \n\n      errorSnackbarJSX = <Snackbar \n\n        open={true} \n\n        message={this.state.errorValue} \n\n        autoHideDuration={8000} \n\n        onRequestClose={ () => console.log('You can add custom \n\n         onClose code') } />; \n\n    } \n\n    const buttonStyle = { \n\n      margin: 5 \n\n    }; \n\n    const homeIconStyle = { \n\n      margin: 5, \n\n      paddingTop: 5 \n\n    }; \n\n    let menuLinksJSX; \n\n    let userIsLoggedIn = typeof localStorage !== 'undefined' && \n\n     localStorage.token && this.props.routes[1].name !== 'logout'; \n\n    if (userIsLoggedIn) { \n\n      menuLinksJSX = ( \n\n  <span> \n\n        <Link to='/dashboard'> \n\n     <RaisedButton label='Dashboard' style={buttonStyle}  /> \n\n  </Link>  \n\n        <Link to='/logout'> \n\n     <RaisedButton label='Logout' style={buttonStyle}  /> \n\n  </Link>  \n\n      </span>); \n\n    } else { \n\n      menuLinksJSX = ( \n\n  <span> \n\n          <Link to='/register'> \n\n      <RaisedButton label='Register' style={buttonStyle}  /> \n\n  </Link>  \n\n        <Link to='/login'> \n\n    <RaisedButton label='Login' style={buttonStyle}  /> \n\n  </Link>  \n\n      </span>); \n\n    } \n\n    let homePageButtonJSX = ( \n\n    <Link to='/'> \n\n        <RaisedButton label={<ActionHome />} \n\n         style={homeIconStyle}  /> \n\n      </Link>); \n\n    return ( \n\n        <div> \n\n          {errorSnackbarJSX} \n\n          <AppBar \n\n            title='Publishing App' \n\n            iconElementLeft={homePageButtonJSX} \n\n            iconElementRight={menuLinksJSX} /> \n\n            <br/> \n\n            {this.props.children} \n\n        </div> \n\n    ); \n\n  } \n\n```", "```jsx\nlet errorSnackbarJSX = null; \n\nif (this.state.errorValue) { \n\n  errorSnackbarJSX = <Snackbar \n\n    open={true} \n\n    message={this.state.errorValue} \n\n    autoHideDuration={8000} />; \n\n} \n\n```", "```jsx\n  <div> \n\n    {errorSnackbarJSX} \n\n    <AppBar \n\n      title='Publishing App' \n\n      iconElementLeft={homePageButtonJSX} \n\n      iconElementRight={menuLinksJSX} /> \n\n      <br/> \n\n      {this.props.children} \n\n  </div> \n\n```", "```jsx\n// already in your codebase, old code: \n\nimport falcor from 'falcor'; \n\nimport FalcorDataSource from 'falcor-http-datasource'; \n\nclass PublishingAppDataSource extends FalcorDataSource { \n\n  onBeforeRequest ( config ) { \n\n    const token = localStorage.token; \n\n    const username = localStorage.username; \n\n    const role = localStorage.role; \n\n    if (token && username && role) { \n\n      config.headers['token'] = token; \n\n      config.headers['username'] = username; \n\n      config.headers['role'] = role; \n\n    } \n\n  } \n\n} \n\nconst model = new falcor.Model({ \n\n  source: new PublishingAppDataSource('/model.json') \n\n}); \n\nexport default model; \n\n```", "```jsx\nimport falcor from 'falcor'; \n\nimport FalcorDataSource from 'falcor-http-datasource'; \n\nimport {errorFunc} from './layouts/CoreLayout'; \n\nclass PublishingAppDataSource extends FalcorDataSource { \n\n  onBeforeRequest ( config ) { \n\n    const token = localStorage.token; \n\n    const username = localStorage.username; \n\n    const role = localStorage.role; \n\n    if (token && username && role) { \n\n      config.headers['token'] = token; \n\n      config.headers['username'] = username; \n\n      config.headers['role'] = role; \n\n    } \n\n  } \n\n} \n\nlet falcorOptions = { \n\n  source: new PublishingAppDataSource('/model.json'),    \n\n  errorSelector: function(path, error) { \n\n    errorFunc(error.value, path); \n\n    error.$expires = -1000 * 60 * 2; \n\n    return error; \n\n  }  \n\n}; \n\nconst model = new falcor.Model(falcorOptions); \n\nexport default model; \n\n```", "```jsx\nimport {errorFunc} from './layouts/CoreLayout'; \n\n```", "```jsx\nimport configMongoose from './configMongoose'; \n\nimport sessionRoutes from './routesSession'; \n\nimport jsonGraph from 'falcor-json-graph'; \n\nimport jwt from 'jsonwebtoken'; \n\nimport jwtSecret from './configSecret'; \n\nlet $ref = jsonGraph.ref; \n\nlet $atom = jsonGraph.atom; \n\nlet $error = jsonGraph.error; \n\nconst Article = configMongoose.Article; \n\n```", "```jsx\n { \n\n    route: 'articles[{integers}]', \n\n    get: (pathSet) => { \n\n      const articlesIndex = pathSet[1]; \n\n      return { \n\n        path: ['articles'], \n\n        value: $error('auth error') \n\n      } \n\n      return Article.find({}, '_id', function(err, articlesDocs) { \n\n        return articlesDocs; \n\n      }).then ((articlesArrayFromDB) => { \n\n        let results = []; \n\n        articlesIndex.forEach((index) => { \n\n          let currentMongoID = \n\n           String(articlesArrayFromDB[index]['_id']); \n\n          let articleRef = $ref(['articlesById', currentMongoID]); \n\n          const falcorSingleArticleResult = { \n\n            path: ['articles', index], \n\n            value: articleRef \n\n          }; \n\n          results.push(falcorSingleArticleResult); \n\n        }); \n\n        return results; \n\n      }) \n\n    } \n\n  }, \n\n```", "```jsx\n$ mongod \n\n```", "```jsx\n$ npm start\n\n```", "```jsx\n { \n\n    route: 'articles[{integers}]', \n\n    get: (pathSet) => { \n\n      const articlesIndex = pathSet[1]; \n\n      return { \n\n        path: ['articles'], \n\n        value: $error('auth error') \n\n      } \n\n      return Article.find({}, '_id', function(err, articlesDocs) { \n\n```", "```jsx\n { \n\n    route: 'articles[{integers}]', \n\n    get: (pathSet) => { \n\n      const articlesIndex = pathSet[1]; \n\n      return Article.find({}, '_id', function(err, articlesDocs) { \n\n```", "```jsx\n// this already is in your codebase: \n\nexport default ( req, res ) => { \n\n  let { token, role, username } = req.headers; \n\n  let userDetailsToHash = username+role; \n\n  let authSignToken = jwt.sign(userDetailsToHash, jwtSecret.secret); \n\n  let isAuthorized = authSignToken === token; \n\n  let sessionObject = {isAuthorized, role, username}; \n\n  console.info(&grave;The ${username} is authorized === &grave;, isAuthorized); \n\n```", "```jsx\n// this is example of falcor-router $errors, don't write it: \n\nif (isAuthorized === false) { \n\n  return { \n\n    path: ['HERE_GOES_THE_REAL_FALCOR_PATH'], \n\n    value: $error('auth error') \n\n  } \n\n} elseif(role !== 'editor') { \n\n  return { \n\n    path: ['HERE_GOES_THE_REAL_FALCOR_PATH'], \n\n    value: $error('you must be an editor in order \n\n     to perform this action') \n\n  } \n\n} \n\n```", "```jsx\nroute: 'articles.add', \n\n```", "```jsx\n// this is already in your codebase, old code: \n\n  { \n\n    route: 'articles.add', \n\n    call: (callPath, args) => { \n\n      const newArticleObj = args[0]; \n\n      var article = new Article(newArticleObj); \n\n      return article.save(function (err, data) { \n\n        if (err) { \n\n          console.info('ERROR', err); \n\n          return err; \n\n        } \n\n        else { \n\n          return data; \n\n        } \n\n      }).then ((data) => { \n\n// code has been striped out from here for the sake of brevity, \n\n nothing changes below \n\n```", "```jsx\n { \n\n    route: 'articles.add', \n\n    call: (callPath, args) => { \n\n      if (sessionObject.isAuthorized === false) { \n\n        return { \n\n          path: ['articles'], \n\n          value: $error('auth error') \n\n        } \n\n      } else if(sessionObject.role !== 'editor' && \n\n       sessionObject.role !== 'admin') { \n\n        return { \n\n          path: ['articles'], \n\n          value: $error('you must be an editor \n\n           in order to perform this action') \n\n        } \n\n      } \n\n      const newArticleObj = args[0]; \n\n      var article = new Article(newArticleObj); \n\n      return article.save(function (err, data) { \n\n        if (err) { \n\n          console.info('ERROR', err); \n\n          return err; \n\n        } \n\n        else { \n\n          return data; \n\n        } \n\n      }).then ((data) => { \n\n// code has been striped out from here for \n\n //the sake of brevity, nothing changes below \n\n```", "```jsx\nroute: 'articles.update', \n\n```", "```jsx\n// this is already in your codebase, old code: \n\n  { \n\n  route: 'articles.update', \n\n  call: async (callPath, args) =>  \n\n    { \n\n      const updatedArticle = args[0]; \n\n      let articleID = String(updatedArticle._id); \n\n      let article = new Article(updatedArticle); \n\n      article.isNew = false; \n\n      return article.save(function (err, data) { \n\n        if (err) { \n\n          console.info('ERROR', err); \n\n          return err; \n\n        } \n\n      }).then ((res) => { \n\n// code has been striped out from here for the \n\n //sake of brevity, nothing changes below \n\n```", "```jsx\n { \n\n  route: 'articles.update', \n\n  call: async (callPath, args) =>  \n\n    { \n\n      if (sessionObject.isAuthorized === false) { \n\n        return { \n\n          path: ['articles'], \n\n          value: $error('auth error') \n\n        } \n\n      } else if(sessionObject.role !== 'editor' && \n\n       sessionObject.role !== 'admin') { \n\n        return { \n\n          path: ['articles'], \n\n          value: $error('you must be an editor \n\n           in order to perform this action') \n\n        } \n\n      } \n\n      const updatedArticle = args[0]; \n\n      let articleID = String(updatedArticle._id); \n\n      let article = new Article(updatedArticle); \n\n      article.isNew = false; \n\n      return article.save(function (err, data) { \n\n        if (err) { \n\n          console.info('ERROR', err); \n\n          return err; \n\n        } \n\n      }).then ((res) => { \n\n// code has been striped out from here \n\n //for the sake of brevity, nothing changes below \n\narticles delete: \n\nroute: 'articles.delete', \n\n```", "```jsx\n// this is already in your codebase, old code: \n\n  { \n\n  route: 'articles.delete', \n\n  call: (callPath, args) =>  \n\n    { \n\n      let toDeleteArticleId = args[0]; \n\n      return Article.find({ _id: toDeleteArticleId }).remove((err) => { \n\n        if (err) { \n\n          console.info('ERROR', err); \n\n          return err; \n\n        } \n\n      }).then((res) => { \n\n// code has been striped out from here \n\n //for the sake of brevity, nothing changes below \n\n```", "```jsx\n { \n\n  route: 'articles.delete', \n\n  call: (callPath, args) =>  \n\n    { \n\n      if (sessionObject.isAuthorized === false) { \n\n        return { \n\n          path: ['articles'], \n\n          value: $error('auth error') \n\n        } \n\n      } else if(sessionObject.role !== 'editor' && \n\n       sessionObject.role !== 'admin') { \n\n        return { \n\n          path: ['articles'], \n\n          value: $error('you must be an \n\n           editor in order to perform this action') \n\n        } \n\n      } \n\n      let toDeleteArticleId = args[0]; \n\n      return Article.find({ _id: toDeleteArticleId }).remove((err) => { \n\n        if (err) { \n\n          console.info('ERROR', err); \n\n          return err; \n\n        } \n\n      }).then((res) => { \n\n// code has been striped out from here \n\n //for the sake of brevity, nothing below changes \n\n```"]