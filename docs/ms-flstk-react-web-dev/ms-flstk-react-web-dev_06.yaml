- en: AWS S3 for Image Upload and Wrapping Up Key Application Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS S3用于图像上传和关键应用程序功能的封装
- en: 'Currently we have an app that works but is missing some key features. Our focus
    for this chapter will include the following feature implementations/improvements:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们有一个可以工作但缺少一些关键功能的应用程序。本章我们的重点将包括以下功能的实现/改进：
- en: Opening a new AWS account
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开一个新的AWS账户
- en: Creating **Identity and Access Management** (**IAM** ) for your AWS account
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的AWS账户创建**身份和访问管理**（**IAM**）
- en: Setting up an AWS S3 bucket
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置AWS S3存储桶
- en: Adding the ability to upload a photo for an article (add and edit article covers)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加上传文章照片的功能（添加和编辑文章封面）
- en: Adding the ability to set up a title, subtitle, and "overlay subtitle" (on the
    add/edit article views)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加设置标题、副标题和“覆盖副标题”的功能（在添加/编辑文章视图中）
- en: 'Articles on the dashboard currently have HTML in the content; we need to improve
    that:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板上的文章目前在内容中有HTML；我们需要改进：
- en: '![](Image00052.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00052.jpg)'
- en: We need to finish this stuff. After we are done with these improvements, we
    will do some refactoring.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要完成这些事情。在完成这些改进后，我们将进行一些重构。
- en: AWS S3 - an introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS S3-简介
- en: Amazon's AWS S3 is a simple storage service for static assets such as images
    on Amazon's servers. It helps you host safe, secure, and highly scalable objects
    (as images) in the cloud.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊的AWS S3是亚马逊服务器上用于静态资产（如图像）的简单存储服务。它帮助您在云中安全、可靠、高度可扩展地托管对象（如图像）。
- en: This approach of storing static assets online is quite convenient and easy--this
    is why we will use it throughout our book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在线存储静态资产的这种方法非常方便和简单-这就是为什么我们将在整本书中使用它。
- en: We will use it in our application, as it gives us many scalability features
    that wouldn't be so easy to access when hosting image assets on our own Node.js
    server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的应用程序中使用它，因为它为我们提供了许多可扩展性功能，在我们自己的Node.js服务器上托管图像资产时不容易访问。
- en: In general, Node.js shouldn't be used for hosting assets larger than what we
    use it for now. Don't even think of implementing an image-upload mechanism (not
    recommended at all) on the Node.js server--we will employ Amazon's services for
    that.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，Node.js不应该用于托管比我们现在使用的更大的资产。甚至不要考虑在Node.js服务器上实现图像上传机制（根本不推荐）-我们将使用亚马逊的服务来实现。
- en: Generating keys (access key ID and secret key)
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成密钥（访问密钥ID和秘密密钥）
- en: Before we start adding a new S3 bucket, we need to generate keys for our AWS
    account (`accessKeyId` and `secretAccessKey` ).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始添加新的S3存储桶之前，我们需要为我们的AWS账户生成密钥（`accessKeyId`和`secretAccessKey`）。
- en: 'An example set of details that we will need to keep in our Node.js app is as
    follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Node.js应用程序中需要保留的一组示例详细信息如下：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What is a bucket in Amazon S3? A **bucket** is a kind of namespace for files
    that you have in Amazon S3\. You can have several buckets associated with different
    projects. As you can see, our next steps will be creating the `accessKeyId` and
    `secretAccessKey` associated with your `accountDefine` and `bucketKey` (kind of
    a namespace for the pictures for our articles). Define a region where you want
    to keep the files physically. If your project has a target specified for a location,
    it will speed up the loading of images and, in general, limit the latency because
    an image will be hosted closer to the client/user of our publishing application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在亚马逊S3中，什么是存储桶？**存储桶**是Amazon S3中文件的一种命名空间。您可以有几个与不同项目相关联的存储桶。正如您所看到的，我们接下来要做的是创建与您的`accountDefine`和`bucketKey`（文章图片的一种命名空间）相关联的`accessKeyId`和`secretAccessKey`。定义一个您希望在其中保留文件的区域。如果您的项目为位置指定了目标，它将加快图像的加载速度，并且通常限制延迟，因为图像将更接近我们发布应用程序的客户/用户。
- en: 'To create an AWS account, go to [https://aws.amazon.com/](https://aws.amazon.com/)
    :'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建AWS账户，请访问[https://aws.amazon.com/](https://aws.amazon.com/)：
- en: '![](Image00053.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00053.jpg)'
- en: 'Create an account or sign in to your account:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个帐户或登录到您的帐户：
- en: '![](Image00054.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00054.jpg)'
- en: The next step is to create the IAM, described in detail in the next section.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建 IAM，在下一节中详细描述。
- en: '**Regarding AWS creation** After you create an account for a certain region,
    if you want to create an S3 bucket, you need to choose the same region your account
    is assigned to; otherwise, you may have problems while setting up S3 in the following
    pages.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于 AWS 创建** 在为特定区域创建帐户后，如果要创建 S3 存储桶，您需要选择与您的帐户分配的相同区域；否则，在设置 S3 时可能会遇到问题。'
- en: IAM
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IAM
- en: 'Let''s prepare our new `accessKeyId` and `secretAccessKey` . You need to visit
    the IAM page in your Amazon console. You can find it in the Services list:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备我们的新的 `accessKeyId` 和 `secretAccessKey`。您需要访问您的 Amazon 控制台中的 IAM 页面。您可以在服务列表中找到它：
- en: '![](Image00055.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00055.jpg)'
- en: 'The IAM page looks like this ( [https://console.aws.amazon.com/iam/home?#home](https://console.aws.amazon.com/iam/home?#home)
    ):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: IAM 页面如下（[https://console.aws.amazon.com/iam/home?#home](https://console.aws.amazon.com/iam/home?#home)）：
- en: '![](Image00056.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00056.jpg)'
- en: 'Go to IAM Resources | Users :'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 IAM 资源 | 用户：
- en: '![](Image00057.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00057.jpg)'
- en: 'On the next page, you will see a button; click on it:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一页上，您将看到一个按钮；点击它：
- en: '![](Image00058.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00058.jpg)'
- en: 'After clicking, you will see a form. Fill it in with at least one user, as
    in this screenshot (the screenshots are giving you the exact steps that you must
    accomplish, even if AWS''s UX has been changed in the meantime):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 点击后，您将看到一个表格。至少填写一个用户，就像这个屏幕截图中一样（即使 AWS 的 UX 在此期间已经更改，屏幕截图也会给您确切的步骤）：
- en: '![](Image00059.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00059.jpg)'
- en: 'After clicking on the Create button, copy the keys to a safe place (we will
    use them in a moment):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“创建”按钮后，将密钥复制到安全位置（我们将在稍后使用它们）：
- en: '![](Image00060.jpg)Do not forget to copy the keys (access key ID and secret
    access key). You will learn where to put them in the code in order to use S3 services
    later in the book. Of course, the ones in the screenshot aren''t active. They
    are only examples; you need to have your own.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Image00060.jpg)不要忘记复制密钥（访问密钥 ID 和秘密访问密钥）。您将在本书后面学习在代码中放置它们以后使用 S3 服务。当然，屏幕截图中的密钥是不活跃的。它们只是示例；您需要拥有自己的密钥。'
- en: Setting up S3 permissions for the user
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为用户设置 S3 权限
- en: 'The last thing is to add AmazonS3FullAccess permissions with the following
    steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一件事是使用以下步骤添加 AmazonS3FullAccess 权限：
- en: 'Go to the Permissions tab:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到权限选项卡：
- en: '![](Image00061.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00061.jpg)'
- en: 'Click on Attach Policy and choose AmazonS3FullAccessAfter . After attaching
    it, it will be listed as in the following example:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击附加策略，选择 AmazonS3FullAccess。附加后，它将列在以下示例中：
- en: '![](Image00062.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00062.jpg)'
- en: Now we'll move on to creating a new bucket for the image files.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将继续创建一个新的存储桶用于图像文件。
- en: 'You are done with the keys and you have granted the S3 policy for the keys;
    now, we need to prepare the bucket that will keep the images. First of all, you
    need to go to the AWS console main page, which looks as follows ( [https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)
    ):'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已经完成了密钥，并且已经为密钥授予了 S3 策略；现在，我们需要准备将保存图像的存储桶。首先，您需要转到 AWS 控制台的主页，如下所示（[https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)）：
- en: '![](Image00063.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00063.jpg)'
- en: 'You will see something like AWS Services SHOW ALL SERVICES (alternatively,
    find it from the Services list the same way as IAM ):'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到类似 AWS 服务显示所有服务的东西（或者，从服务列表中找到它，就像 IAM 一样）：
- en: '![](Image00064.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00064.jpg)'
- en: 'Click on S3 - Scalable Storage in the Cloud (as in the previous screenshot).
    After that, you will see a view similar to this (I have six buckets; you will
    have zero when you have a new account):'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击S3 - 云中的可扩展存储（如上一截图中所示）。之后，您将看到类似于此的视图（我有六个存储桶；当您有一个新帐户时，您将看到零个）：
- en: '![](Image00065.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00065.jpg)'
- en: In that bucket, we will keep the static images of our articles (you will learn
    how exactly in the coming pages).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个存储桶中，我们将保存文章的静态图像（您将在接下来的页面中学习确切的方法）。
- en: 'Create a bucket by clicking on the Create Bucket button:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击“创建存储桶”按钮来创建存储桶：
- en: '![](Image00066.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00066.jpg)'
- en: Choose thepublishing-app name (or another that works for you).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择publishing-app名称（或其他适合您的名称）。
- en: '![](Image00067.jpg)In the screenshot, we have chosen Frankfurt . But if, for
    example, when you create an account and your URL shows `"?region=us-west-2"` ,
    then choose Oregon . It''s important to create the S3 bucket in the region that
    you have assigned your account to.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Image00067.jpg)在截图中，我们选择了Frankfurt。但是，例如，当您创建帐户并且您的URL显示`"?region=us-west-2"`时，请选择Oregon。在分配帐户时，重要的是在正确的区域创建S3存储桶。'
- en: 'After the bucket has been created, click on it from the bucket list:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建存储桶后，从存储桶列表中点击它：
- en: '![](Image00068.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00068.jpg)'
- en: 'The empty bucket with the publishing-app name will look as follows:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有publishing-app名称的空存储桶将如下所示：
- en: '![](Image00069.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00069.jpg)'
- en: 'When you are in this view, the URL in the browser tells you the exact region
    and bucket (so you can use it later when performing configuration on the backend):'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在此视图中时，浏览器中的URL会告诉您确切的区域和存储桶（因此您以后可以在后端执行配置时使用）：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The last thing is to make sure that the CORS configuration for the publishing-app
    bucket is correct. Click on the Properties tab in that view, and you will get
    a detailed view of it:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一件事是确保publishing-app存储桶的CORS配置正确。在该视图中，单击“属性”选项卡，您将获得详细视图：
- en: '![](Image00070.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00070.jpg)'
- en: 'Then, click on the Add CORS button:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，单击“添加CORS”按钮：
- en: '![](Image00071.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00071.jpg)'
- en: 'After that, paste the following into the text area (the following is the cross-origin
    resource sharing definition; it defines a way for the Pub app which is loaded
    in one domain to interact with resources in a different domain within the AWS
    services):'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下内容粘贴到文本区域中（以下是跨域资源共享定义；它定义了Pub应用程序在一个域中加载并与AWS服务中不同域中的资源进行交互的方式）：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It will now look like the following example:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在它看起来像以下示例：
- en: '![](Image00072.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00072.jpg)'
- en: Click on the Save button. After all the steps are done, we can start with coding
    the image upload feature.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“保存”按钮。完成所有步骤后，我们可以开始编写图像上传功能。
- en: Coding the image upload feature in the AddArticleView
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AddArticleView中编写图像上传功能
- en: 'Before you are able to continue, you need to have your access details for your
    S3 bucket that you created in the previous pages. `AWS_ACCESS_KEY_ID` comes from
    a previous subsection, where we created a user while being in that view:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，您需要拥有在上一页中创建的S3存储桶的访问详细信息。`AWS_ACCESS_KEY_ID`来自上一小节，在该小节中我们创建了一个用户：
- en: '![](Image00073.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00073.jpg)'
- en: '`AWS_SECRET_ACCESS_KEY` is the same as the AWS access key (as you can already
    guess by the name itself). `AWS_BUCKET_NAME` is the name of your bucket (in our
    book, we''ve called it publishing-app ). For `AWS_REGION_NAME` , we will use `eu-central-1`
    .'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`AWS_SECRET_ACCESS_KEY`与AWS访问密钥相同（从名称中就可以猜到）。`AWS_BUCKET_NAME`是您的存储桶名称（在我们的书中，我们称之为publishing-app）。对于`AWS_REGION_NAME`，我们将使用`eu-central-1`。'
- en: The easiest way to find `AWS_BUCKET_NAME` and `AWS_REGION_NAME` is to look at
    the URL while you are in that view (described in the previous subsection).![](Image00074.jpg)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 找到`AWS_BUCKET_NAME`和`AWS_REGION_NAME`的最简单方法是在该视图中查看URL（在上一小节中描述）！[](Image00074.jpg)
- en: 'Check the browser''s URL in that view: `https://console.aws.amazon.com/s3/home?region=eu-central-1#&bucket=publishing-app&prefix=`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 检查该视图中的浏览器URL：`https://console.aws.amazon.com/s3/home?region=eu-central-1#&bucket=publishing-app&prefix=`
- en: The region and bucket names are clearly in that URL (I want to make this very
    clear as your region and bucket name can be different, depending on where you
    live).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 区域和存储桶名称清楚地显示在URL中（我想要非常清楚地说明，因为您的区域和存储桶名称可能会有所不同，这取决于您所在的位置）。
- en: Also, make sure that your CORS are set up correctly and your permissions/attach
    policy is done exactly as described above. Otherwise, you can have problems with
    everything described in the following subsections.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 还要确保您的CORS设置正确，并且您的权限/附加策略与上述完全相同。否则，您可能会遇到以下各小节中描述的所有问题。
- en: Environment variables in Node.js
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js中的环境变量
- en: We will pass all four parameters (`AWS_ACCESS_KEY_ID` , `AWS_SECRET_ACCESS_KEY`
    , `AWS_BUCKET_NAME` , and `AWS_REGION_NAME` ) via the node's environment variables.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过节点的环境变量传递所有四个参数（`AWS_ACCESS_KEY_ID`，`AWS_SECRET_ACCESS_KEY`，`AWS_BUCKET_NAME`和`AWS_REGION_NAME`）。
- en: 'First, let''s install a node library that will create environment variables
    from a file so that we will be able to use them within our localhost:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们安装一个节点库，它将从文件中创建环境变量，以便我们能够在本地主机中使用它们：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What are these environment variables? In general, we will use them to pass the
    variables of some sensitive data to the app--we are talking here specifically
    about AWS secret keys and MongoDB's login/password information for the current
    environment setup (if it is development or production).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些环境变量是什么？一般来说，我们将使用它们来传递一些敏感数据的变量给应用程序--我们在这里特别谈论AWS秘钥和MongoDB的登录/密码信息，用于当前环境设置（无论是开发还是生产）。
- en: 'You can read those environment variables via accessing them, like in the following
    examples:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问它们来读取这些环境变量，就像以下示例中所示：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In our local development environment, we will keep that information in the
    server''s directory, so do this from your command prompt:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的本地开发环境中，我们将保留该信息在服务器目录中，因此请从命令提示符中执行以下操作：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You have created a `server/.env` file; the next step is to put content in it
    (from this file, the `node-env-file` will read the environment variables when
    our app is running):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经创建了`server/.env`文件；下一步是在其中放入内容（当我们的应用程序运行时，`node-env-file`将读取环境变量）：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, you can see the structure of a node''s environment file. Each new line
    comes with a key and value. There, you need to paste the keys you created while
    reading this chapter. Replace those values with your own: `*_*_ACCESS_KEY_HERE_*_`
    and `_*_SECRET_KEY_HERE_**_` .'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到节点环境文件的结构。每一行都有一个键和一个值。在那里，您需要粘贴在阅读本章时创建的键。用您自己的值替换这些值：`*_*_ACCESS_KEY_HERE_*_`和`_*_SECRET_KEY_HERE_**_`。
- en: 'After you have created the `server/.env` file, install the required dependency
    that will abstract the whole gig with the image upload; use `npm` for this when
    in the project''s directory:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了`server/.env`文件后，在项目目录中使用`npm`安装所需的依赖项，以在图像上传时抽象整个巨大工作：
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `react-s3-uploader` component works quite well for our use case, and it
    abstracts the `aws-sdk` features for us quite well. The main point here is that
    we need to have configured the `.env` file well (with the correct variables) and
    the `react-s3-uploader` will do the job at the backend and frontend for us (as
    you will see soon).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-s3-uploader`组件非常适合我们的用例，并且它很好地抽象了`aws-sdk`的功能。这里的主要问题是我们需要正确配置`.env`文件（具有正确的变量），`react-s3-uploader`将在后端和前端为我们完成工作（很快您将看到）。'
- en: Improving our Mongoose article schema
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进我们的Mongoose文章模式
- en: 'We need to improve the schema, so we will have a place in our article collection
    for storing the URL of an image. Edit the old article schema:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要改进模式，这样我们的文章集合中就会有一个存储图片URL的位置。编辑旧的文章模式：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Change it to the new, improved version:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为新的、改进的版本：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, we have introduced the `articlePicUrl` with a default value
    of `/static/placeholder.png` . Now, we will be able to save an article with a
    picture's URL variable in the article's object.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们引入了`articlePicUrl`，默认值为`/static/placeholder.png`。现在，我们将能够在文章对象中保存带有图片URL变量的文章。
- en: If you forgot to update the Mongoose model, then it won't let you save that
    value into the database.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您忘记更新Mongoose模型，那么它将不允许您将该值保存到数据库中。
- en: Adding routes for S3's upload
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为S3的上传添加路由
- en: 'We need to import one new library into the `server/server.js` file:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将一个新的库导入到`server/server.js`文件中：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We''ll end up with something like the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终会得到类似以下的东西：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: I'm putting all this here so you can make sure that your `server/server.js`
    file matches this.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我把所有这些放在这里，这样您就可以确保您的`server/server.js`文件与此匹配。
- en: 'One more thing to do is to modify the `server/index.js` file. Find this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事要做，就是修改`server/index.js`文件。找到这个：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Change it to the following improved version:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为以下改进版本：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Just for clarification, `env(__dirname + '/.env');` is telling us the location
    of the `.env` file in our structure (you can find from `console.log` that the
    `__dirname` variable is a system location of a server's file--this must match
    the real `.env` file's location so it can be found by the system).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了澄清，`env(__dirname + '/.env');`告诉我们在我们的结构中`.env`文件的位置（您可以从`console.log`中找到`__dirname`变量是服务器文件的系统位置--这必须与真实的`.env`文件的位置匹配，以便系统找到它）。
- en: 'The next part is to add this to our `server/server.js` file:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将此添加到我们的`server/server.js`文件中：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see here, we have started using the environment variable that we
    defined in the `server/.env` file. For me, the `process.env.AWS_BUCKET_NAME` is
    equal to `publishing-app` , but if you have defined it differently, then it will
    retrieve another value from `server/.env` (thanks to the `env` express middleware
    that we just defined).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在这里所见，我们已经开始使用我们在`server/.env`文件中定义的环境变量。对我来说，`process.env.AWS_BUCKET_NAME`等于`publishing-app`，但如果您定义了不同的值，那么它将从`server/.env`中检索另一个值（感谢我们刚刚定义的`env`
    express中间件）。
- en: Based on that backend configuration (environment variables and setting up `s3router`
    with `import s3router from 'react-s3-uploader/s3router'` ), we will be able to
    use the AWS S3 bucket. We need to prepare the frontend, which first will be implemented
    on the add-an-article view.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 基于后端配置（环境变量和使用`import s3router from 'react-s3-uploader/s3router'`设置`s3router`），我们将能够使用AWS
    S3存储桶。我们需要准备前端，首先将在添加文章视图上实现。
- en: Creating the ImgUploader component on the frontend
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在前端创建ImgUploader组件
- en: 'We will create a dump component called `ImgUploader` . This component will
    use the `react-s3-uploader` library, which does the job of abstracting the upload
    to Amazon S3\. On a callback, you receive `information:onProgress` , and you can
    find the progress in percent with that callback, so a user can see the status
    of an `uploadonError` . This callback is fired when an error `occursonFinish`
    : this callback sends us back the location of a file that has been uploaded to
    S3.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`ImgUploader`的组件。该组件将使用`react-s3-uploader`库，该库用于将上传抽象到Amazon S3。在回调中，您将收到`information:onProgress`，并且可以使用该回调找到百分比的进度，以便用户可以查看`uploadonError`的状态。当发生错误时，将触发此回调：当完成时，此回调将向我们发送已上传到S3的文件的位置。
- en: 'You will learn more details further in the chapter; let''s create a file first:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本章中进一步了解更多细节；让我们先创建一个文件：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You have created the `src/components/articles/ImgUploader.js` file, and the
    next step is to prepare the imports. So to the top of the `ImgUploader` file,
    add the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了`src/components/articles/ImgUploader.js`文件，下一步是准备导入。所以在`ImgUploader`文件的顶部添加以下内容：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see here, we have initiated the `ImgUploader` component with `div`
    that returns a temporary placeholder in the `render` function.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在这里所看到的，我们在`render`函数中用`div`初始化了`ImgUploader`组件，返回一个临时占位符。
- en: We have also prepared `propTypes` with a required property called `updateImgUrl`
    . This will be a callback function that will send a final, uploaded image's location
    (which has to be saved in the database--we will use this `updateImgUrl` props
    in a moment).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还准备了一个带有必需属性`updateImgUrl`的`propTypes`。这将是一个回调函数，将发送最终上传的图片位置（必须保存在数据库中--我们将在稍后使用`updateImgUrl`属性）。
- en: 'In the state of that `ImgUploader` component, we have the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ImgUploader`组件的状态下，我们有以下内容：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In these variables, we will store all the states of our components, depending
    on the current status and `props.articlePicUrl` , and we'll send the URL details
    up to the `AddArticleView` component (we will do it later in the chapter, after
    finishing the `ImgUploader` component).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些变量中，我们将根据当前状态和`props.articlePicUrl`存储所有组件的状态，并将URL详细信息发送到`AddArticleView`组件（我们将在本章后面完成`ImgUploader`组件后进行）。
- en: Wrapping up the ImgUploader component
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束`ImgUploader`组件
- en: 'The next step is to improve the `uploadFinished` function in our `ImgUploader`
    , so find the old empty function:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是改进我们`ImgUploader`中的`uploadFinished`函数，找到旧的空函数：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Replace it with the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, the `uploadDetails.filename` variable comes from the `ReactS3Uploader`
    component, which we have imported on top of the `ImgUploader` file. After a successful
    upload, we set the `uploadProgress` back to `null` , set the details of our upload,
    and send back the details via the callback using `this.props.updateImgUrl(articlePicUrl)`
    .
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`uploadDetails.filename`变量来自于我们在`ImgUploader`文件顶部导入的`ReactS3Uploader`组件。成功上传后，我们将`uploadProgress`设置回`null`，设置我们上传的详细信息，并通过`this.props.updateImgUrl(articlePicUrl)`回调发送详细信息。
- en: 'The next step is to improve our `render` function in `ImgUploader` :'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是改进我们`ImgUploader`中的`render`函数：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This render is incomplete, but let''s describe what we have added so far. The
    code is simply all about getting information about `uploadProgress` via `this.state`
    (the first `if` statement). The `else if(this.state.articlePicUrl)` is all about
    rendering the image after the upload is complete. Okay, but where we will get
    that information? Here is the rest:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这个渲染是不完整的，但让我们描述一下我们到目前为止添加了什么。这段代码简单地是关于通过`this.state`获取`uploadProgress`的信息（第一个`if`语句）。`else
    if(this.state.articlePicUrl)`是关于在上传完成后渲染图片。好的，但我们将从哪里获取这些信息呢？这就是剩下的部分：
- en: '[PRE21]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `uploaderJSX` variable is the exact same as our `react-s3-uploader` library.
    As you can see from the code, for progress, we set the state with `uploadProgress:
    { progressInPercent, uploadStatusText }` and we set up `uploadError: null` (in
    case the user receives an error message). On error, we set the state, so we can
    tell the user. On finish, we run the `uploadFinished` function, which was described
    in detail previously.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`uploaderJSX`变量与我们的`react-s3-uploader`库完全相同。从代码中可以看出，对于进度，我们使用`uploadProgress:
    { progressInPercent, uploadStatusText }`来设置状态，并设置`uploadError: null`（以防用户收到错误消息）。在出现错误时，我们设置状态，以便告知用户。完成后，我们运行`uploadFinished`函数，该函数之前已经详细描述过。'
- en: 'The complete `render` function of `ImgUploader` will look as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImgUploader`的完整`render`函数如下所示：'
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, this is the whole render of `ImgUploader` . We use an inline-styled
    `Paper` component (from `material-ui` ), so the whole thing will look better to
    an article's end user/editor.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这是整个 `ImgUploader` 的渲染。我们使用了内联样式的 `Paper` 组件（来自 `material-ui` ），所以整个东西看起来对文章的最终用户/编辑者更好。
- en: 读累了记得休息一会哦~
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
- en: AddArticleView improvements
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AddArticleView的改进
- en: 'We need to add the `ImgUploader` component to `AddArticleView` ; first, we
    need to import it into the `src/views/articles/AddArticleView.js` file, like this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将 `ImgUploader` 组件添加到 `AddArticleView` 中；首先，我们需要将其导入到 `src/views/articles/AddArticleView.js`
    文件中，就像这样：
- en: '[PRE23]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, in the constructor of `AddArticleView` , find this old code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 `AddArticleView` 的构造函数中，找到这段旧代码：
- en: '[PRE24]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Change it to the following improved version:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将其改为以下改进版本：
- en: '[PRE25]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As you can see, we have bound this to the `updateImgUrl` function and added
    a new state variable called `articlePicUrl` (by default, we will point to `/static/placeholder.png`
    in case a user doesn't choose a cover).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们将这个绑定到 `updateImgUrl` 函数，并添加了一个新的状态变量叫做 `articlePicUrl`（默认情况下，如果用户没有选择封面，我们将指向
    `/static/placeholder.png`）。
- en: 'Let''s improve the functions of this component:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改进一下这个组件的功能：
- en: '[PRE26]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Change this code to the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段代码改为以下内容：
- en: '[PRE27]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As you can see, we have added `articlePicUrl: this.state.articlePicUrl` to
    the `newArticle` object. We have also introduced a new function called `updateImgUrl`
    , which is simply a callback that sets a new state with the `articlePicUrl` variable
    (in `this.state.articlePicUrl` , we keep the image URL of the current article
    that is going to be saved to the database).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '正如你所看到的，我们在 `newArticle` 对象中添加了 `articlePicUrl: this.state.articlePicUrl`。我们还引入了一个名为
    `updateImgUrl` 的新函数，它只是一个回调函数，用来设置一个新的状态，其中包含 `articlePicUrl` 变量（在 `this.state.articlePicUrl`
    中，我们保存了即将保存到数据库中的当前文章的图片URL）。'
- en: 'The only thing to improve in `src/views/articles/AddArticleView.js` is our
    current render. Here is the old one:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/views/articles/AddArticleView.js` 中唯一需要改进的是我们当前的渲染。以下是旧的渲染：'
- en: '[PRE28]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We need to improve this code using `ImgUploader` :'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用 `ImgUploader` 来改进这段代码：
- en: '[PRE29]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You can see that we use the properties for sending down the current `articlePicUrl`
    (this will be handy later and also give us the default `placeholder.png` location)
    and the callback to update the `img` URL, called `updateImgUrl` .
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，我们使用属性发送当前的 `articlePicUrl`（这将在以后很方便，也给我们提供了默认的 `placeholder.png` 位置），以及更新
    `img` URL 的回调函数，称为 `updateImgUrl`。
- en: 'If you visit `http://localhost:3000/add-article` , you will see a new image
    picker between the WYSIWYG box and the SUBMIT ARTICLE button (check the screenshot):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问 `http://localhost:3000/add-article` ，你将会看到一个新的图片选择器，位于所见即所得框和提交文章按钮之间（查看截图）：
- en: '![](Image00075.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00075.jpg)'
- en: 'Of course, if you followed all the instructions correctly, after clicking on
    Choose File , you will be able to upload a new image to the S3 bucket, and the
    image in the thumbnail will be replaced, as in the following example:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你按照所有的说明正确操作，点击“选择文件”后，你将能够上传一个新的图片到S3存储桶，缩略图中的图片将被替换，就像下面的例子一样：
- en: '![](Image00076.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00076.jpg)'
- en: As you can see, we can upload an image. The next step is to unmock viewing them
    so we can see that our article has a dog on the cover (and the dog's image comes
    from our article collection in the DB).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们可以上传一张图片。下一步是取消模拟查看它们，这样我们就可以看到我们的文章封面上有一只狗（狗的图片来自我们在数据库中的文章集合）。
- en: Some remaining tweaks for PublishingApp, ArticleCard, and DashboardView
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对PublishingApp、ArticleCard和DashboardView进行一些剩余的调整
- en: We can add an article. We need to unmock the image URLs in our views so we can
    see the real URL from the database (instead mocked in an `img src` property).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加一篇文章。我们需要在视图中取消模拟图像URL，这样我们就可以看到来自数据库的真实URL（而不是在`img src`属性中模拟的）。
- en: 'Let''s start with `src/layouts/PublishingApp.js` and improve the old `_fetch`
    function:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`src/layouts/PublishingApp.js`开始，改进旧的`_fetch`函数：
- en: '[PRE30]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Replace this code with the following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换这段代码：
- en: '[PRE31]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As you can see, we have started to fetch `articlePicUrl` via the `falcorModel.get`
    method.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经开始通过`falcorModel.get`方法获取`articlePicUrl`。
- en: 'The next step, also in the `PublishingApp` file, is to improve the `render`
    function, so you need to improve the following code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`PublishingApp`文件中，也是改进`render`函数，所以您需要改进以下代码：
- en: '[PRE32]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add to it a new property, which will pass down the image URL:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个新的属性，将传递图像URL：
- en: '[PRE33]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As you can see, we are passing the fetched `articlePicUrl` to the `ArticleCard`
    component.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们正在将获取的`articlePicUrl`传递给`ArticleCard`组件。
- en: Improving the ArticleCard component
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进ArticleCard组件
- en: 'After we pass the `articlePicUrl` variable via properties, we need to improve
    the following (`src/components/ArticleCard.js` ):'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们通过属性传递`articlePicUrl`变量之后，我们需要改进以下内容（`src/components/ArticleCard.js`）：
- en: '[PRE34]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Change it to the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为以下内容：
- en: '[PRE35]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: At the beginning of `render` , we use `let articlePicUrl = this.props.articlePicUrl
    || '/static/placeholder.png';` , and later, we use that in our image's JSX (`img
    src={articlePicUrl} height='190'` ).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在`render`的开始，我们使用`let articlePicUrl = this.props.articlePicUrl || '/static/placeholder.png';`，然后在我们的图片的JSX中使用它（`img
    src={articlePicUrl} height='190'`）。
- en: 'After these two changes, you can see the article with a real cover, like this:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个更改之后，您可以看到文章有一个真正的封面，就像这样：
- en: '![](Image00077.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00077.jpg)'
- en: Improving the DashboardView component
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进DashboardView组件
- en: 'Let''s improve the dashboard with the cover, so in `src/views/DashboardView.js`
    , find the following code:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过封面来改进仪表板，所以在`src/views/DashboardView.js`中找到以下代码：
- en: '[PRE36]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Replace it with the following:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换它：
- en: '[PRE37]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As you can see, we have replaced the mocked placeholder with a real cover photo,
    so on our articles dashboard (which is available after login) we will find real
    images in the thumbnails.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经用真实的封面照片替换了模拟的占位符，所以在我们的文章仪表板（在登录后可用）中，我们将在缩略图中找到真实的图像。
- en: Editing an article's cover photo
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑文章的封面照片
- en: 'Regarding the article''s photo, we need to make some improvements in the `src/views/articles/EditArticleView.js`
    file, such as importing `ImgUploader` :'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 关于文章的照片，我们需要在`src/views/articles/EditArticleView.js`文件中进行一些改进，比如导入`ImgUploader`：
- en: '[PRE38]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'After you have imported `ImgUploader` , improve the constructor of `EditArticleView`
    . Find the following code:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入`ImgUploader`之后，改进`EditArticleView`的构造函数。找到以下代码：
- en: '[PRE39]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Replace it with the new, improved constructor:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 用新的、改进后的构造函数替换它：
- en: '[PRE40]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As you can see, we have bound this to the new `updateImgUrl` function (which
    will be the `ImgUploader` callback), and we create a new default state for the
    `articlePicUrl` .
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经将其绑定到新的`updateImgUrl`函数（这将是`ImgUploader`的回调），并为`articlePicUrl`创建了一个新的默认状态。
- en: 'The next step is to improve the current `_fetchArticleData` function:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是改进当前的`_fetchArticleData`函数：
- en: '[PRE41]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Replace it with the following improved code:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下改进后的代码替换它：
- en: '[PRE42]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Here, we have added to an initial fetch some new `this.setState` variables,
    such as `articlePicUrl` , `contentJSON` , and `htmlContent` . The article fetch
    is here because we need to set up a cover in the `ImgUploader` of a current image
    that might potentially be changed. The `contentJSON` and `htmlContent` is here
    in case the user doesn't edit anything in the WYSIWYG editor and we need to have
    a default value from the database (otherwise, the edit button would save empty
    values into the database and break the whole editing experience).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在初始获取中添加了一些新的`this.setState`变量，比如`articlePicUrl`，`contentJSON`和`htmlContent`。文章获取在这里是因为我们需要在`ImgUploader`中设置当前可能会更改的图片的封面。`contentJSON`和`htmlContent`在用户没有在所见即所得编辑器中编辑任何内容时会用到，我们需要从数据库中获取默认值（否则，编辑按钮会将空值保存到数据库中并破坏整个编辑体验）。
- en: 'Let''s improve the `_articleEditSubmit` function. This is the old code:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改进`_articleEditSubmit`函数。这是旧代码：
- en: '[PRE43]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Change to the following improved version:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下改进版本：
- en: '[PRE44]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The next step is to add a new function to the `EditArticleView` component:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是向`EditArticleView`组件添加一个新函数：
- en: '[PRE45]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The last step in order to finish the article-editing cover is to improve the
    old render:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 完成文章编辑封面的最后一步是改进旧的渲染：
- en: '[PRE46]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Replace it with the following:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE47]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: As you can see, we have added `ImgUploader` and styled it exactly the same way
    as in `AddArticleView` . The rest of `ImgUploader` does the job for us in order
    to allow our users to edit article photos.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经添加了`ImgUploader`并将其样式与`AddArticleView`完全相同。`ImgUploader`的其余部分会帮助我们允许用户编辑文章照片。
- en: '![](Image00078.jpg)In this screenshot, you can see how the edit view should
    look after all the recent improvements.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Image00078.jpg)在这个截图中，您可以看到所有最近改进后编辑视图应该是什么样子。'
- en: Adding the ability to add/edit the title and subtitle of an article
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加编辑文章标题和副标题的能力
- en: 'In general, we shall improve the article''s model in the `server/configMongoose.js`
    file. Start by finding the following code:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们将在`server/configMongoose.js`文件中改进文章的模型。首先找到以下代码：
- en: '[PRE48]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Replace it with the improved code, as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 用改进后的代码替换它，如下所示：
- en: '[PRE49]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: As you can see, we have added a lot of required properties in our model; this
    will affect the ability to save incomplete objects, so in general, our model will
    be more consistent throughout the life of our publishing app.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在我们的模型中添加了许多必需的属性；这将影响保存不完整对象的能力，因此，总的来说，我们的模型将在我们发布应用程序的整个生命周期中更加一致。
- en: We have also added a new property to our model called `articleSubTitle` , which
    we will be using later in this chapter.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还向我们的模型添加了一个名为`articleSubTitle`的新属性，我们将在本章后面使用它。
- en: AddArticleView improvements
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AddArticleView改进
- en: 'In general, we will add two `DefaultInput` components (title and subtitle),
    and the whole form will be using `formsy-react` , so in `src/views/articles/AddArticleView.js`
    , add new imports:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们将添加两个`DefaultInput`组件（标题和副标题），整个表单将使用`formsy-react`，所以在`src/views/articles/AddArticleView.js`中，添加新的导入：
- en: '[PRE50]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The next step is to improve `async _articleSubmit` , so change the old code:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是改进`async _articleSubmit`，所以更改旧代码：
- en: '[PRE51]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Replace it with the following:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE52]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: As you can see, we have added `articleModel` in the `_articleSubmit` arguments;
    this will come from `formsy-react` , the same way we implemented it in the `LoginView`
    and `RegisterView` . We have also added the `articleSubTitle` property to the
    `newArticle` object.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在`_articleSubmit`参数中添加了`articleModel`；这将来自`formsy-react`，我们在`LoginView`和`RegisterView`中实现的方式相同。我们还向`newArticle`对象添加了`articleSubTitle`属性。
- en: 'The old `render` function return looks like this:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的`render`函数返回如下：
- en: '[PRE53]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Change it to the following:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为以下内容：
- en: '[PRE54]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In this code snippet, we have added `Formsy.Form` the same way as in the `LoginView`
    , so I won''t describe it in detail. The most important thing to notice is that
    with `onSubmit` , we call the `this._articleSubmit` function. We have also added
    two `DefaultInput` components (title and subtitle): the data from those two inputs
    will be used in `async _articleSubmit(articleModel)` (as you already know based
    on previous implementations in this book).'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码片段中，我们添加了`Formsy.Form`，方式与`LoginView`中一样，所以我不会详细描述它。最重要的是要注意，通过`onSubmit`，我们调用了`this._articleSubmit`函数。我们还添加了两个`DefaultInput`组件（标题和副标题）：这两个输入框中的数据将在`async
    _articleSubmit(articleModel)`中使用（根据本书中先前的实现，您已经知道这一点）。
- en: 'Based on the changes in the Mongoose config and in the `AddArticleView` component,
    you are now able to add a title and subtitle to a new article, as in the following
    screenshot:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Mongoose配置和`AddArticleView`组件中的更改，您现在可以向新文章添加标题和副标题，就像以下截图中一样：
- en: '![](Image00079.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00079.jpg)'
- en: We're still missing the ability to edit the title and subtitle, so let's implement
    that now.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然缺少编辑标题和副标题的能力，所以现在让我们实现它。
- en: Ability to edit an article title and subtitle
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑文章标题和副标题的能力
- en: 'Go to the `src/views/articles/EditArticleView.js` file and add new imports
    (in a similar way to the `add` view):'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 转到`src/views/articles/EditArticleView.js`文件，并添加新的导入（类似于`add`视图）：
- en: '[PRE55]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Improve the old `_articleEditSubmit` function from the current version:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 改进当前版本中的旧`_articleEditSubmit`函数：
- en: '[PRE56]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Change it to the following:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为以下内容：
- en: '[PRE57]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'As you can see, we do the same thing as in the `AddArticleView` , so you should
    be familiar with it. The last thing to do is update `render` so that we are able
    to input the title and subtitle that will be sent as a callback to `_articleEditSubmit`
    with data in the `articleModel` . The old return in the `render` function is as
    follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们在`AddArticleView`中做了与之相同的事情，所以您应该对此很熟悉。要做的最后一件事是更新`render`，以便我们能够输入标题和副标题，并将它们作为回调发送到`articleModel`中的`_articleEditSubmit`函数。`render`函数中的旧返回值如下：
- en: '[PRE58]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The new improved return in the `render` function is as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`render`函数中的新改进返回值如下：'
- en: '[PRE59]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: We are doing the same thing here as we did in the `AddArticleView` . We are
    introducing `Formsy.Form` , which is calling back the article's title and subtitle
    when a user hits the submit button (SUBMIT EDITION ).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的与`AddArticleView`中所做的事情相同。我们引入了`Formsy.Form`，当用户点击提交按钮（提交编辑）时，它会回调文章的标题和副标题。
- en: 'Here is an example of how it should look:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是应该看起来的样子：
- en: '![](Image00080.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00080.jpg)'
- en: ArticleCard and PublishingApp improvements
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ArticleCard和PublishingApp的改进
- en: 'Improve the `render` function in `ArticleCard` so it will also show the subtitle
    (currently, it''s mocked). The `src/components/ArticleCard.js` file''s old content
    is as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 改进`ArticleCard`中的`render`函数，以便它也显示副标题（目前是模拟的）。`src/components/ArticleCard.js`文件的旧内容如下：
- en: '[PRE60]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Let''s change this to the following:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其更改为以下内容：
- en: '[PRE61]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: As you can see, we have defined a new `subTitle` variable and have then used
    it in the `CardHeader` and `CardMedia` components, so now it will show the subtitle
    as well.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经定义了一个新的`subTitle`变量，并在`CardHeader`和`CardMedia`组件中使用它，所以现在它也会显示副标题。
- en: 'Another thing to do is to make the `PublishingApp` also fetch the subtitle
    that has been introduced in the chapter, so we need to improve the following old
    code:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件事是让`PublishingApp`也获取在本章中引入的副标题，因此我们需要改进以下旧代码：
- en: '[PRE62]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Replace it with the following:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 将其替换为以下内容：
- en: '[PRE63]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: As you can see, we have started `falcorModel.get` with the `articleSubTitle`
    property.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经开始使用`falcorModel.get`来获取`articleSubTitle`属性。
- en: 'Of course, we need to pass this `subTitle` property to the `ArticleCard` component
    in the `PublishingApp` class''s `render` function:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们需要将这个`subTitle`属性传递给`PublishingApp`类的`render`函数中的`ArticleCard`组件。
- en: '[PRE64]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'In the end, we will get the following:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们将得到以下结果：
- en: '[PRE65]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'After all these changes on the main page, you can find an edited article with
    the title, subtitle, cover photo, and content (created by our WYSIWYG editor):'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在主页上所有这些更改之后，你可以找到一个编辑过的文章，包括标题、副标题、封面照片和内容（由我们的所见即所得编辑器创建）：
- en: '![](Image00081.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00081.jpg)'
- en: Dashboard improvement (now we can strip the remaining HTML)
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表板改进（现在我们可以剥离剩余的HTML）
- en: 'The last step in this chapter is to improve the dashboard. It will string the
    HTML from the props in order to make a better look and feel when a user will browse
    our application. Find the following code:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一步是改进仪表板。它将从props中提取HTML，以便在用户浏览我们的应用程序时获得更好的外观和感觉。找到以下代码：
- en: '[PRE66]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Replace it with the following:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换：
- en: '[PRE67]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'As you can see, we simply strip the HTML tags from the HTML so that we will
    get better `secondaryText` without the HTML markup, as in this example:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们只是从HTML中剥离HTML标签，这样我们将获得更好的`secondaryText`，而不带有HTML标记，就像这个例子中一样：
- en: '![](Image00082.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00082.jpg)'
- en: Summary
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have implemented all of the features that are within the book's scope. The
    next step is to start working on the deployment of this application.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经实现了书中涵盖的所有功能。下一步是开始着手部署这个应用程序。
- en: If you want to improve your coding skills, it's a good idea to implement some
    features completely on your own. These are some ideas for features that are still
    missing from our publishing app.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想提高编码技能，最好自己完全实现一些功能。以下是一些我们发布应用程序中仍然缺少的功能的想法。
- en: We could have a separate link to a certain article so you can share it with
    a friend. This could be useful if you want to create a human-readable unique slug
    associated with a certain article in the database. So, instead of linking to something
    such as [http://reactjs.space/570b6e26ae357d391c6ebc1d](http://reactjs.space/570b6e26ae357d391c6ebc1d)
    (`reactjs.space` is a domain that we will use on our production server), a user
    can share a link such as [http://reactjs.space/an-article-about-a-dog](http://reactjs.space/an-article-about-a-dog)
    .
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有一个单独的链接指向某篇文章，这样你可以与朋友分享。如果你想在数据库中创建一个与某篇文章相关的易读唯一标识，这可能会很有用。因此，用户可以分享类似于[http://reactjs.space/an-article-about-a-dog](http://reactjs.space/an-article-about-a-dog)这样的链接，而不是链接到类似于[http://reactjs.space/570b6e26ae357d391c6ebc1d](http://reactjs.space/570b6e26ae357d391c6ebc1d)（`reactjs.space`是我们在生产服务器上将使用的域名）。
- en: There could be a way to associate an article with the editor who posted it.
    Currently, it's mocked. You can unmock it.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有一种方法将一篇文章与发布它的编辑关联起来。目前是模拟的。你可以取消模拟。
- en: A user can't change their user details while they are logged in--this could
    be a good way to practice more full-stack development.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 用户在登录状态下无法更改其用户详细信息--这可能是练习更全面的全栈开发的好方法。
- en: A user can't set up their avatar's image--you can add this feature in a similar
    way to how we implemented the image cover.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 用户无法设置他们的头像图片--你可以以类似的方式添加这个功能，就像我们实现封面图片一样。
- en: Create a more robust Draft.JS WYSIWYG editor with plugins. Robust plugins are
    easy to implement for mentions, stickers, emoji, hashtags, undo/redo, and more.
    Visit [https://www.draft-js-plugins.com/](https://www.draft-js-plugins.com/) for
    more details about them. Implement one or two that you like the most.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个更强大的Draft.JS所见即所得编辑器与插件。强大的插件易于实现提及、贴纸、表情符号、标签、撤销/重做等功能。访问[https://www.draft-js-plugins.com/](https://www.draft-js-plugins.com/)了解更多详情。实现你最喜欢的一个或两个。
- en: In the next chapter, we will start deploying our MongoDB instance online using
    [www.mLab.com](http://www.mLab.com) , which is a Database-as-a-Service provider
    and helps us build scalable MongoDB nodes with ease.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用[www.mLab.com](http://www.mLab.com)在线部署我们的MongoDB实例，这是一个作为服务提供商，可以帮助我们轻松构建可扩展的MongoDB节点。
- en: Let's start with the deployment fun!
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始部署的乐趣吧！
- en: 读累了记得休息一会哦~
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要忘记休息一下哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
