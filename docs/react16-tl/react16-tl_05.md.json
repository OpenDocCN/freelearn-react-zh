["```jsx\nnpm install flow-bin --save-dev\n```", "```jsx\n\"scripts\": { \n  \"start\": \"react-scripts start\",\n```", "```jsx\n  \"build\": \"react-scripts build\", \n  \"test\": \"react-scripts test --env=jsdom\", \n  \"eject\": \"react-scripts eject\", \n  \"flow\": \"flow\" \n}, \n```", "```jsx\nnpm run flow\n```", "```jsx\nCould not find a .flowconfig in . or any of its parent directories. \n```", "```jsx\nnpm run flow init \n```", "```jsx\nLaunching Flow server for 05/installing-and-initializing-flow\nSpawned flow server (pid=46516)\nNo errors!  \n```", "```jsx\n// @flow \nimport React, { Component } from 'react'; \nimport logo from './logo.svg'; \nimport './App.css'; \n\nclass App extends Component { \n  render() { \n    return ( \n      <div className=\"App\"> \n        <header className=\"App-header\"> \n          <img src={logo} className=\"App-logo\" alt=\"logo\" /> \n          <h1 className=\"App-title\">Welcome to React</h1> \n        </header> \n        <p className=\"App-intro\"> \n          To get started... \n```", "```jsx\n        </p> \n      </div> \n    ); \n  } \n} \n\nexport default App; \n```", "```jsx\n      6: class App extends Component {\n                           ^^^^^^^^^ Component. Too few type arguments. Expected at least 1\n```", "```jsx\nComponent<Props, State = void> { \n          ^^^^^^^^^^^^ See type parameters of definition here. \n```", "```jsx\n// @flow \nimport React, { Component } from 'react'; \nimport logo from './logo.svg'; \nimport './App.css'; \n\ntype Props = {}; \n\nclass App extends Component<Props> { \n  render() { \n    return ( \n      <div className=\"App\"> \n        <header className=\"App-header\"> \n          <img src={logo} className=\"App-logo\" alt=\"logo\" /> \n          <h1 className=\"App-title\">Welcome to React</h1> \n        </header> \n        <p className=\"App-intro\"> \n          To get started... \n        </p> \n      </div> \n    ); \n  } \n}\nexport default App; \n```", "```jsx\n// @flow \nimport React from 'react'; \nimport ReactDOM from 'react-dom'; \nimport './index.css'; \nimport App from './App'; \nimport registerServiceWorker from './registerServiceWorker'; \n\nconst root = document.getElementById('root'); \n\nReactDOM.render( \n  <App />, \n  root \n); \n\nregisterServiceWorker(); \n```", "```jsx\n    Error: src/index.js:12\n     12:   root\n    ^^^^ null. This type is incompatible with the expected param \n                type of Element  \n```", "```jsx\n// @flow \nimport React from 'react'; \nimport ReactDOM from 'react-dom'; \nimport './index.css'; \nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker'; \n\nconst root = document.getElementById('root'); \n\nif (!(root instanceof Element)) { \n  throw 'Invalid root'; \n} \n\nReactDOM.render( \n  <App />, \n  root \n); \n\nregisterServiceWorker(); \n```", "```jsx\n// @flow \nimport React from 'react'; \n\ntype Props = { \n  name: string, \n  version: number \n}; \n\nconst Intro = ({ name, version }: Props) => ( \n  <p className=\"App-intro\"> \n    <strong>{name}:</strong>{version} \n  </p> \n); \n\nexport default Intro; \n```", "```jsx\ntype Props = { \n  name: string, \n  version: number \n}; \n```", "```jsx\n({ name, version }: Props) => (...) \n```", "```jsx\n// @flow \nimport React, { Component } from 'react'; \nimport logo from './logo.svg'; \nimport './App.css'; \nimport Intro from './Intro';\n\ntype Props = {}; \n\nclass App extends Component<Props> { \n  render() { \n    return ( \n      <div className=\"App\"> \n        <header className=\"App-header\"> \n          <img src={logo} className=\"App-logo\" alt=\"logo\" /> \n          <h1 className=\"App-title\">Welcome to React</h1> \n        </header> \n        <Intro name=\"React\" version={16} /> \n      </div> \n    ); \n  } \n} \n\nexport default App; \n```", "```jsx\n<Intro name=\"React\" version={16} /> \n```", "```jsx\n<Intro version=\"React\" name={16} /> \n```", "```jsx\n    Error: src/App.js:17\n     17:         <Intro version=\"React\" name={16} />\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props of React element `Intro`. This type is incompatible with\n      9: const Intro = ({ name, version }: Props) => (\n                                           ^^^^^ object type. See: src/Intro.js:9\n      Property `name` is incompatible:\n         17:         <Intro version=\"React\" name={16} />\n                                                  ^^ number. This type is incompatible with\n          5:   name: string,\n                     ^^^^^^ string. See: src/Intro.js:5\n\n    Error: src/App.js:17\n```", "```jsx\n     17:         <Intro version=\"React\" name={16} />\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props of React element `Intro`. This type is incompatible with\n```", "```jsx\n      9: const Intro = ({ name, version }: Props) => (\n                                           ^^^^^ object type. See: src/Intro.js:9\n      Property `version` is incompatible:\n         17:         <Intro version=\"React\" name={16} />\n                                    ^^^^^^^ string. This type is incompatible with\n          6:   version: number\n                        ^^^^^^ number. See: src/Intro.js:6\n\n```", "```jsx\n    <Intro version=\"React\" name={16} />\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props of React element `Intro`. \n\n```", "```jsx\n    This type is incompatible with\n      9: const Intro = ({ name, version }: Props) => (\n                                           ^^^^^ object type. See: src/Intro.js:9\n\n```", "```jsx\n    Property `name` is incompatible:\n         17:         <Intro version=\"React\" name={16} />\n                                                  ^^ number. This type is incompatible with\n          5:   name: string,\n                     ^^^^^^ string. See: src/Intro.js:5\n\n```", "```jsx\n// @flow \nimport React from 'react'; \n\ntype Props = { \n  person: { \n    name: string, \n    age: number \n  } \n}; \n\nconst Person = ({ person }: Props) => ( \n  <section> \n    <h3>Person</h3> \n    <p><strong>Name: </strong>{person.name}</p> \n    <p><strong>Age: </strong>{person.age}</p> \n  </section> \n); \n\nexport default Person; \n```", "```jsx\ntype Person = { \n  name: string, \n  age: number \n}; \n\ntype Props = { \n  person: Person \n}; \n```", "```jsx\n// @flow \nimport React, { Component } from 'react'; \nimport logo from './logo.svg'; \nimport './App.css'; \nimport Person from './Person'; \n\nclass App extends Component<{}> { \n  render() { \n    return ( \n      <div className=\"App\"> \n        <header className=\"App-header\"> \n          <img src={logo} className=\"App-logo\" alt=\"logo\" /> \n          <h1 className=\"App-title\">Welcome to React</h1> \n        </header> \n        <Person person={{ name: 'Roger', age: 20 }} /> \n      </div> \n    ); \n  } \n} \n\nexport default App; \n```", "```jsx\n<Person person={{ name: 'Roger' }} /> \n```", "```jsx\n    15:         <Person person={{ name: 'Roger' }} />\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props of React element `Person`. This type is incompatible with\n     11: const Person = ({ person }: Props) => (\n                                     ^^^^^ object type. See: src/Person.js:11\n      Property `person` is incompatible:\n         15:         <Person person={{ name: 'Roger' }} />\n                                     ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with\n                       v\n          5:   person: {\n          6:     name: string,\n          7:     age: number\n```", "```jsx\n          8:   }\n               ^ object type. See: src/Person.js:5\n          Property `age` is incompatible:\n                           v\n              5:   person: {\n              6:     name: string,\n              7:     age: number\n              8:   }\n                   ^ property `age`. Property not found in. See: src/Person.js:5\n             15:         <Person person={{ name: 'Roger' }} />\n                                         ^^^^^^^^^^^^^^^^^ object literal\n\n```", "```jsx\n// @flow \nimport React, { Component } from 'react'; \nimport Child from './Child'; \n\ntype State = { \n  on: boolean \n}; \n\nclass Container extends Component<{}, State> { \n  state = { \n    on: false \n  } \n\n  toggle = () => { \n    this.setState(state => ({ \n      on: !state.on \n    }));\n```", "```jsx\n  } \n\n  render() { \n    return ( \n      <Child \n        on={this.state.on} \n        toggle={this.toggle} \n      />); \n  } \n} \n\nexport default Container; \n```", "```jsx\ntype State = { \n  on: boolean \n}; \n```", "```jsx\nclass Container extends Component<{}, State> { \n  ... \n} \n```", "```jsx\ntoggle = () => { \n  this.setState(state => ({ \n    on: !state.on + 1 \n  })); \n} \n```", "```jsx\n    Error: src/Container.js:16\n     16:       on: !state.on + 1\n                   ^^^^^^^^^^^^^ number. This type is incompatible with\n      6:   on: boolean\n               ^^^^^^^ boolean\n```", "```jsx\n// @flow \nimport React, { Component } from 'react'; \nimport Article from './Article'; \n\ntype Props = {}; \ntype State = { \n  summary: string, \n  selected: number | null, \n  articles: Array<{ title: string, summary: string}> \n}; \n\nclass Articles extends Component<Props, State> { \n  state = { \n    summary: '', \n    selected: null, \n    articles: [ \n      { title: 'First Title', summary: 'First article summary' }, \n      { title: 'Second Title', summary: 'Second article summary' }, \n      { title: 'Third Title', summary: 'Third article summary' } \n    ] \n  }\n```", "```jsx\n  onClick = (selected: number) => () => { \n    this.setState(prevState => ({ \n      selected, \n      summary: prevState.articles[selected].summary \n    })); \n  } \n\n  render() { \n    const { \n      summary, \n      selected, \n      articles \n    } = this.state; \n\n    return ( \n      <div> \n        <strong>{summary}</strong> \n        <ul> \n          {articles.map((article, index) => ( \n            <li key={index}> \n              <Article \n                index={index} \n                title={article.title} \n                selected={selected === index} \n                onClick={this.onClick} \n              /> \n            </li> \n          ))} \n        </ul> \n      </div> \n    ); \n  } \n} \n\nexport default Articles; \n```", "```jsx\n// @flow \nimport React from 'react'; \n\ntype Props = { \n  title: string, \n  index: number, \n  selected: boolean, \n  onClick: (index: number) => Function \n}; \n\nconst Article = ({ \n  title, \n  index, \n  selected, \n  onClick \n}: Props) => ( \n  <a href=\"#\" \n    onClick={onClick(index)} \n    style={{ fontWeight: selected ? 'bold' : 'normal' }} \n  > \n    {title} \n  </a> \n); \n\nexport default Article; \n```", "```jsx\ntype Props = { \n  onClick: (index: number) => Function, \n  ... \n}; \n```", "```jsx\n// @flow \nimport * as React from 'react'; \nimport Child from './Child'; \n\ntype Props = { \n  children: React.ChildrenArray<React.Element<Child>>, \n}; \n\nconst Parent = ({ children }: Props) => ( \n  <section> \n    <h2>Parent</h2> \n    {children} \n  </section> \n); \n\nexport default Parent; \n```", "```jsx\n import * as React from 'react'; \n```", "```jsx\n<Parent> \n  <Child /> \n  <Child /> \n</Parent> \n```", "```jsx\n// @flow\nimport * as React from 'react';\nimport Child from './Child';\n\ntype Props = {\n  children: React.Element<Child>,\n};\n\nconst ParentWithOneChild = ({ children }: Props) => (\n  <section>\n    <h2>Parent With One Child</h2>\n    {children}\n  </section>\n);\n\nexport default ParentWithOneChild; \n```", "```jsx\n<ParentWithOneChild> \n  <Child /> \n</ParentWithOneChild> \n```", "```jsx\n    Property `children` is incompatible:\n         24:         <ParentWithOneChild>\n                     ^^^^^^^^^^^^^^^^^^^^ React children array. Inexact type is incompatible with exact type\n          6:   children: React.Element<Child>,\n                         ^^^^^^^^^^^^^^^^^^^^ object type. See: src/ParentWithOneChild.js:6\n\n```", "```jsx\n// @flow\nimport * as React from 'react';\nimport Child from './Child';\n\ntype Props = {\n  children?: React.Element<Child>,\n};\n\nconst ParentWithOptionalChild = ({ children }: Props) => (\n  <section>\n    <h2>Parent With Optional Child</h2>\n    {children}\n  </section>\n);\n\nexport default ParentWithOptionalChild;\n```", "```jsx\n// @flow\nimport * as React from 'react';\n\ntype Props = {\n  children?: React.ChildrenArray<string|boolean>,\n};\n\nconst ParentWithStringOrNumberChild = ({ children }: Props) => (\n  <section>\n    <h2>Parent With String or Number Child</h2>\n    {children}\n  </section>\n);\n\nexport default ParentWithStringOrNumberChild;\n```", "```jsx\n<ParentWithStringOrNumberChild>\n  Child String\n</ParentWithStringOrNumberChild>\n```", "```jsx\n<ParentWithStringOrNumberChild> \n  {true} \n</ParentWithStringOrNumberChild> \n```", "```jsx\n<ParentWithStringOrNumberChild> \n  Child String \n  {false} \n</ParentWithStringOrNumberChild> \n```", "```jsx\n// @flow\nimport * as React from 'react';\nimport { Component } from 'react';\n\nclass EventHandler extends Component<{}> {\n  clickHandler = (e: SyntheticEvent<HTMLAnchorElement>): void => {\n    e.preventDefault();\n    console.log('clicked', e.currentTarget.href);\n  }\n\n  render() {\n    return (\n      <section>\n        <a href=\"#page1\" onClick={this.clickHandler}>\n          First Link\n        </a>\n      </section>\n    );\n  }\n}\n\nexport default EventHandler;\n```", "```jsx\nnpm install flow-babel-webpack-plugin --save-dev\n```", "```jsx\nconst FlowBabelWebpackPlugin = require('flow-babel-webpack-plugin');\n```", "```jsx\nplugins: [ \n  new InterpolateHtmlPlugin(env.raw), \n  new HtmlWebpackPlugin({ \n    inject: true, \n    template: paths.appHtml, \n  }), \n  new webpack.NamedModulesPlugin(), \n  new webpack.DefinePlugin(env.stringified), \n  new webpack.HotModuleReplacementPlugin(), \n  new CaseSensitivePathsPlugin(), \n  new WatchMissingNodeModulesPlugin(paths.appNodeModules), \n  new webpack.IgnorePlugin(/^./locale$/, /moment$/), \n  new FlowBabelWebpackPlugin() \n], \n```", "```jsx\n    Failed to compile.\n\n    Flow: Type Error\n    Error: src/App.js:6\n      6: class App extends Component {\n                           ^^^^^^^^^ Component. Too few type arguments. Expected at least 1\n     26: declare class React$Component<Props, State = void> {\n                                       ^^^^^^^^^^^^ See type parameters of definition here.\n\n    Found 1 error\n\n```", "```jsx\nclass App extends Component<{}> { \n  ... \n} \n```"]