["```jsx\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n  Route,\n  NavLink\n} from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Home';\nimport NewBook from './NewBook';\nimport BookDetails from './BookDetails';\n\nclass App extends Component {\n  render() {\n    const { title } = this.props;\n\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 className=\"App-title\">{title}</h1>\n          </header>\n          <section className=\"Layout\">\n            <nav>\n              <NavLink\n                exact\n                to=\"/\"\n                activeStyle={{ fontWeight: 'bold' }}\n              >\n                Home\n              </NavLink>\n              <NavLink to=\"/new\" activeStyle={{ fontWeight: 'bold' }}>\n                New Book\n              </NavLink>\n            </nav>\n            <section>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/new\" component={NewBook} />\n              <Route\n                exact\n                path=\"/book/:title\"\n                component={BookDetails}\n              />\n            </section>\n          </section>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapState = state => state.app;\nconst mapDispatch = dispatch => ({});\nexport default connect(mapState, mapDispatch)(App);\n```", "```jsx\nconst initialState = {\n  title: 'Book Manager'\n};\n\nconst app = (state = initialState, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\nexport default app;\n```", "```jsx\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchBooks } from '../api';\nimport Book from './Book';\nimport Loading from './Loading';\nimport './Home.css';\n\nclass Home extends Component {\n  componentWillMount() {\n    this.props.fetchBooks();\n  }\n\n  render() {\n    const {\n      loading,\n      books,\n      filterValue,\n      onFilterChange\n    } = this.props;\n    return (\n      <Loading loading={loading}>\n        <section>\n          <input\n            placeholder=\"Filter\"\n            onChange={onFilterChange}\n            value={filterValue}\n          />\n        </section>\n        <section className=\"Books\">\n          {books\n            .filter(\n              book =>\n                filterValue.length === 0 ||\n                new RegExp(filterValue, 'gi').test(book.title)\n            )\n            .map(book => (\n              <Book\n                key={book.title}\n                title={book.title}\n                author={book.author}\n                imgURL={book.imgURL}\n              />\n            ))}\n        </section>\n      </Loading>\n    );\n  }\n}\n\nconst mapState = state => state.home;\nconst mapDispatch = dispatch => ({\n  fetchBooks() {\n    dispatch({ type: 'FETCHING_BOOKS' });\n    fetchBooks().then(books => {\n      dispatch({\n        type: 'FETCHED_BOOKS',\n        books\n      });\n    });\n  },\n\n  onFilterChange({ target: { value } }) {\n    dispatch({ type: 'SET_FILTER_VALUE', filterValue: value });\n  }\n});\n\nexport default connect(mapState, mapDispatch)(Home);\n```", "```jsx\nconst initialState = {\n  loading: false,\n  books: [],\n  filterValue: ''\n};\n\nconst home = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCHING_BOOKS':\n      return {\n        ...state,\n        loading: true\n      };\n    case 'FETCHED_BOOKS':\n      return {\n        ...state,\n        loading: false,\n        books: action.books\n      };\n\n    case 'SET_FILTER_VALUE':\n      return {\n        ...state,\n        filterValue: action.filterValue\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default home;\n```", "```jsx\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { createBook } from '../api';\nimport './NewBook.css';\n\nclass NewBook extends Component {\n  render() {\n    const {\n      title,\n      author,\n      imgURL,\n      controlsDisabled,\n      onTitleChange,\n      onAuthorChange,\n      onImageURLChange,\n      onCreateBook\n    } = this.props;\n\n    return (\n      <section className=\"NewBook\">\n        <label>\n          Title:\n          <input\n            autoFocus\n            onChange={onTitleChange}\n            value={title}\n            disabled={controlsDisabled}\n          />\n        </label>\n        <label>\n          Author:\n          <input\n            onChange={onAuthorChange}\n            value={author}\n            disabled={controlsDisabled}\n          />\n        </label>\n        <label>\n          Image URL:\n          <input\n            onChange={onImageURLChange}\n            value={imgURL}\n            disabled={controlsDisabled}\n          />\n        </label>\n        <button\n          onClick={() => {\n            onCreateBook(title, author, imgURL);\n          }}\n          disabled={controlsDisabled}\n        >\n          Create\n        </button>\n      </section>\n    );\n  }\n}\nconst mapState = state => state.newBook;\nconst mapDispatch = dispatch => ({\n  onTitleChange({ target: { value } }) {\n    dispatch({ type: 'SET_NEW_BOOK_TITLE', title: value });\n  },\n\n  onAuthorChange({ target: { value } }) {\n    dispatch({ type: 'SET_NEW_BOOK_AUTHOR', author: value });\n  },\n\n  onImageURLChange({ target: { value } }) {\n    dispatch({ type: 'SET_NEW_BOOK_IMAGE_URL', imgURL: value });\n  },\n\n  onCreateBook(title, author, imgURL) {\n    dispatch({ type: 'CREATING_BOOK' });\n    createBook(title, author, imgURL).then(() => {\n      dispatch({ type: 'CREATED_BOOK' });\n    });\n  }\n});\n\nexport default connect(mapState, mapDispatch)(NewBook);\n```", "```jsx\nconst initialState = {\n  title: '',\n  author: '',\n  imgURL: '',\n  controlsDisabled: false\n};\n\nconst newBook = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_NEW_BOOK_TITLE':\n      return {\n        ...state,\n        title: action.title\n      };\n    case 'SET_NEW_BOOK_AUTHOR':\n      return {\n        ...state,\n        author: action.author\n      };\n    case 'SET_NEW_BOOK_IMAGE_URL':\n      return {\n        ...state,\n        imgURL: action.imgURL\n      };\n    case 'CREATING_BOOK':\n      return {\n        ...state,\n        controlsDisabled: true\n      };\n    case 'CREATED_BOOK':\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default newBook;\n```", "```jsx\nconst LATENCY = 1000;\n\nconst BOOKS = [\n  {\n    title: 'React 16 Essentials',\n    author: 'Artemij Fedosejev',\n    imgURL: 'big long url...'\n  },\n  ...\n];\n\nexport const fetchBooks = () =>\n  new Promise(resolve => {\n    setTimeout(() => {\n      resolve(BOOKS);\n    }, LATENCY);\n  });\n\nexport const createBook = (title, author, imgURL) =>\n  new Promise(resolve => {\n    setTimeout(() => {\n      BOOKS.push({ title, author, imgURL });\n      resolve();\n    }, LATENCY);\n  });\n\nexport const fetchBook = title =>\n  new Promise(resolve => {\n    setTimeout(() => {\n      resolve(BOOKS.find(book => book.title === title));\n    }, LATENCY);\n  });\n\nexport const deleteBook = title =>\n  new Promise(resolve => {\n    setTimeout(() => {\n      BOOKS.splice(BOOKS.findIndex(b => b.title === title), 1);\n      resolve();\n    }, LATENCY);\n  });\n```", "```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './components/Root';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\nregisterServiceWorker();\n```", "```jsx\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from '../store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nexport default Root;\n```", "```jsx\nimport { createStore } from 'redux';\nimport reducers from './reducers';\n\nexport default createStore(\n  reducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n```", "```jsx\nimport { combineReducers } from 'redux';\nimport app from './app';\nimport home from './home';\nimport newBook from './newBook';\nimport bookDetails from './bookDetails';\n\nconst reducers = combineReducers({\n  app,\n  home,\n  newBook,\n  bookDetails\n});\n\nexport default reducers;\n```", "```jsx\nexport default createStore(\n  reducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n```"]