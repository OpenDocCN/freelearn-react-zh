- en: Development Mode and Mastering Hot Reloading
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发模式和精通热重载
- en: 'In the previous chapter, you learned how to use `create-react-app`. This is
    just the beginning of our *React toolin*g journey. By using `create-react-app`
    to bootstrap your application, you''re installing many other tools used for development.
    These tools are part of the `react-scripts` package. The focus of this chapter
    will be the development server that comes with `react-scripts` where we''ll cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学会了如何使用`create-react-app`。这只是我们*React工具链*旅程的开始。通过使用`create-react-app`来引导你的应用程序，你安装了许多其他用于开发的工具。这些工具是`react-scripts`包的一部分。本章的重点将是`react-scripts`附带的开发服务器，我们将涵盖：
- en: Starting the development server
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动开发服务器
- en: Automatic Webpack configuration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动Webpack配置
- en: Putting hot component reloading to use
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用热组件重新加载
- en: Starting the development server
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动开发服务器
- en: 'If you created a React application using the `create-react-app` tool in the
    previous chapter, then you have everything you need to launch a development server.
    No configuration is necessary! Let''s start it up right now. First, make sure
    that you''re in the project directory:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在上一章中使用`create-react-app`工具创建了一个React应用程序，那么你已经拥有了启动开发服务器所需的一切。不需要进行任何配置！让我们立即启动它。首先确保你在项目目录中：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now you can start the development server:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以启动开发服务器了：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will start the development server using the `start` script from the `react-scripts`
    package. You should see the console output that looks like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用`react-scripts`包中的`start`脚本启动开发服务器。你应该会看到类似于这样的控制台输出：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You''ll notice that in addition to printing this output in the console, this
    script will launch a new browser tab with `http://localhost:3000/` as the address.
    The page that''s displayed looks like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，除了在控制台中打印这个输出之外，这个脚本还会在浏览器中打开一个新的标签页，地址为`http://localhost:3000/`。显示的页面看起来像这样：
- en: '![](Images/1dcf9a53-b771-44f1-bf22-e40360ffbf28.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1dcf9a53-b771-44f1-bf22-e40360ffbf28.png)'
- en: 'We''ve accomplished a lot in just a couple of chapters so far. Let''s pause
    and recap what we''ve done:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在仅仅几章中我们已经取得了很多成就。让我们暂停一下，回顾一下我们所做的事情：
- en: You created a new React application using the `create-react-app` package.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用`create-react-app`包创建了一个新的React应用程序。
- en: You have the basic project structure in place and a placeholder `App` component
    to render.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经有了基本的项目结构和一个占位符`App`组件来渲染。
- en: You launched the development server, and now you're ready building React components.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你启动了开发服务器，现在你准备构建React组件了。
- en: To get to this point without `create-react-app` and `react-scripts` would typically
    take hours. You probably don't have hours to spend messing with meta development
    work. A lot of it has just been automated for you!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有`create-react-app`和`react-scripts`的情况下，要达到这一点通常需要花费数小时。你可能没有数小时来处理元开发工作。很多工作已经为你自动化了！
- en: Webpack configuration
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack配置
- en: Webpack is the tool of choice for building modern web applications. It's powerful
    enough to compile everything from JSX syntax to static images into bundles that
    are ready to deploy. It also comes with a development server. Its main drawback
    is its complexity. There are a lot of moving parts that need to be configured
    just to get Webpack off the ground, but you didn't have to touch any of it. This
    is because most of the Webpack configuration values that you would set for a React
    app are the same for most React apps.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack是构建现代Web应用程序的首选工具。它强大到足以将从JSX语法到静态图像的所有内容编译成准备部署的捆绑包。它还带有一个开发服务器。它的主要缺点是复杂性。有很多需要配置的移动部分才能让Webpack起步，但你不需要触及其中任何部分。这是因为大多数为React应用程序设置的Webpack配置值对于大多数React应用程序都是相同的。
- en: There are two separate pieces of the development server to configure. First,
    there's the Webpack development server itself. Then, there's the main Webpack
    configuration, which you'll need even if you weren't using the Webpack development
    server. So where are these configuration files? They're part of the `react-scripts`
    package, meaning, you don't have to mess around with them!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个独立的开发服务器配置。首先是Webpack开发服务器本身。然后是主要的Webpack配置，即使你没有使用Webpack开发服务器，你也需要它。那么这些配置文件在哪里？它们是`react-scripts`包的一部分，这意味着你不必去瞎折腾它们！
- en: Let's walk through some of these configuration values now to give you a better
    sense of the unnecessary headache you're able to avoid.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们浏览一些这些配置值，让你更好地了解你可以避免的不必要的头痛。
- en: Entry points
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入口点
- en: Entry points are used to tell Webpack where to start looking for modules used
    to build your application. With a simple application, you don't need anything
    more than a single file as your entry point. For example, this could be your `index.js`
    file that's used to render your root React component. Another way to think of
    this entry point, borrowing terminology from other programming languages, is the
    main program.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 入口点用于告诉Webpack从哪里开始查找用于构建应用程序的模块。对于一个简单的应用程序，你不需要更多的东西，只需要一个文件作为入口点。例如，这可以是用于渲染你的根React组件的`index.js`文件。从其他编程语言借来的术语来看，这个入口点也可以被称为主程序。
- en: 'The `react-scripts` package looks for an `index.js` file in your source folder
    when you run the `start` script. It adds a couple of other entry points as well:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行`start`脚本时，`react-scripts`包会在你的源文件夹中寻找一个`index.js`文件。它还添加了一些其他入口点：
- en: Polyfills for `Promise`, `fetch()`, and `Object.assign()`. These are only used
    if they don't already exist in the target browser.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Promise`、`fetch()`和`Object.assign()`的填充。只有在目标浏览器中不存在时才会使用它们。'
- en: A client for hot module reloading.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于热模块重载的客户端。
- en: These last two entry points are valuable for React development, but they're
    not something you want to have to think about when you're trying to get a project
    off the ground.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后两个入口点对于React开发非常有价值，但当你试图启动一个项目时，它们并不是你想要考虑的事情。
- en: Build output
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建输出
- en: The job of Webpack is to bundle your application resources so that they can
    be easily served from the web. This means that you have to configure various things
    related to bundle output, starting with the output path and file. The Webpack
    development server doesn't actually write a bundle file to disk because it is
    assumed that builds will happen frequently. The resulting bundle is kept in memory.
    Even with this in mind, you still have to configure the main output path because
    the Webpack development server still needs to serve it to the browser as though
    it were a real file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack的工作是打包你的应用程序资源，以便它们可以轻松地从网络中提供。这意味着你必须配置与包输出相关的各种事物，从输出路径和文件开始。Webpack开发服务器实际上并不会将捆绑文件写入磁盘，因为假定构建会频繁发生。生成的捆绑文件保存在内存中。即使有这个想法，你仍然需要配置主要输出路径，因为Webpack开发服务器仍然需要将其作为真实文件提供给浏览器。
- en: In addition to the main output location, you can also configure chunk filenames
    and the public path used to serve files from. Chunks are bundles that are split
    into smaller pieces to avoid creating a single bundle file that's too big and
    might cause performance problems. Wait, what? Thinking about performance and the
    path used to serve resources before you've even implemented a single component
    for your application? This is completely unnecessary at this point in the project.
    Don't worry, `react-scripts` has you covered and provides configuration for output
    that you probably won't ever need to change.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了主要的输出位置，你还可以配置块文件名和用于提供文件的公共路径。块是被分割成更小的片段以避免创建一个太大并可能导致性能问题的单个捆绑文件。等等，什么？在你甚至为你的应用程序实现一个组件之前就考虑性能和用于提供资源的路径？在项目的这一阶段完全是不必要的。别担心，`react-scripts`已经为你提供了配置，你可能永远不需要改变。
- en: Resolving input files
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析输入文件
- en: One of the key strengths of Webpack is that you don't need to supply it with
    a list of modules that need to be bundled. Once you supply an entry point in the
    Webpack configuration, it can figure out which modules your application needs,
    and will bundle them accordingly. Needless to say, this is a complex task that
    Webpack is performing for you and needs all the help it can get.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack的一个关键优势是你不需要提供一个需要捆绑的模块列表。一旦在Webpack配置中提供了一个入口点，它就可以找出你的应用程序需要哪些模块，并相应地捆绑它们。不用说，这是Webpack为你执行的一个复杂的任务，它需要尽可能多的帮助。
- en: For example, part of the `resolve` configuration is telling Webpack which file
    extensions to consider, for example, `.js` or `.jsx`. You also want to tell Webpack
    where to look for package modules. These are modules that you didn't write and
    aren't part of your application. These are npm packages that are typically found
    in the `node_modules` directory of your project.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`resolve`配置的一部分是告诉Webpack要考虑哪些文件扩展名，例如`.js`或`.jsx`。你还想告诉Webpack在哪里查找包模块。这些是你没有编写的模块，也不是你应用程序的一部分。这些通常可以在项目的`node_modules`目录中找到的npm包。
- en: There are more advanced options as well, such as creating aliases for modules
    and using resolver plugins. Once again, none of these things are relevant to you
    before you write any React code, yet, you need them configured so that you can
    develop your components, unless of course, you're using `react-scripts` to take
    care of this configuration for you.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更高级的选项，比如为模块创建别名并使用解析器插件。再次强调，在编写任何React代码之前，这些都与你无关，但你需要配置它们以便开发你的组件，除非你正在使用`react-scripts`来处理这个配置。
- en: Loading and compiling files
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载和编译文件
- en: 'Loading and compiling files for your bundle are probably the most important
    capabilities of Webpack. Interestingly, Webpack doesn''t directly process your
    files once they''re loaded. Instead, it coordinates I/O as it passes through Webpack
    loader plugins. For example, the Webpack configuration used by `react-scripts`
    uses the following loader plugins:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 加载和编译文件对于你的捆绑来说可能是Webpack最重要的功能。有趣的是，Webpack在加载文件后并不直接处理它们。相反，它通过Webpack加载器插件协调I/O。例如，`react-scripts`使用以下加载器插件的Webpack配置：
- en: '**Babel**: The Babel loader transpiles the JavaScript in your application''s
    source files into JavaScript that all browsers will understand. Babel will also
    take care of compiling your JSX syntax into regular JavaScript.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Babel**：Babel加载器将你应用程序的源文件中的JavaScript转译成所有浏览器都能理解的JavaScript。Babel还会处理将你的JSX语法编译成普通的JavaScript。'
- en: '**CSS**: There are a couple loaders used by `react-scripts` that result in
    CSS output:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CSS**：`react-scripts`使用了一些加载程序来生成CSS输出：'
- en: '`style-loader`: Import CSS modules like JavaScript modules using the `import`
    syntax.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style-loader`：使用`import`语法像导入JavaScript模块一样导入CSS模块。'
- en: '`postcss-loader`: Enhanced CSS features like modules, functions, and custom
    properties.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postcss-loader`：增强的CSS功能，如模块、函数和自定义属性。'
- en: '**Images**: Images that are imported by JavaScript or CSS are bundled using
    `url-loader`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图片**：通过JavaScript或CSS导入的图片使用`url-loader`进行捆绑。'
- en: As your application matures, you might find yourself needing to load and bundle
    different types of assets that fall outside of the default `react-scripts` configuration.
    Since you don't need to worry about this at the beginning of your project, there's
    no point in wasting time configuring Webpack loaders.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你的应用程序成熟，你可能会发现自己需要加载和捆绑不在默认`react-scripts`配置范围内的不同类型的资产。由于你在项目开始时不需要担心这一点，所以没有必要浪费时间配置Webpack加载器。
- en: Configuring plugins
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置插件
- en: There's a seemingly infinite list of plugins that you can add to your Webpack
    configuration. Some of them are really useful for development, so you want these
    plugins configured up front. Others might not prove useful until down the road
    as your project matures. The plugins that `react-scripts` uses out of the box
    contribute to a seamless React development experience.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎有一个无穷无尽的插件列表可以添加到你的Webpack配置中。其中一些对开发非常有用，所以你希望这些插件在前期就配置好。其他一些可能在项目成熟后才会有用。`react-scripts`默认使用的插件有助于无缝的React开发体验。
- en: Hot reloading
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热重载
- en: The hot module reloading mechanism requires configuration in both the main Webpack
    bundle configuration file, as well as the development server configuration. This
    is another example of something that you want as soon as you start developing
    your components, but don't want to spend time on. The `start` command of `react-scripts`
    starts a Webpack development server with hot reloading configured and ready to
    go.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 热模块重载机制需要在主Webpack捆绑配置文件和开发服务器配置中进行配置。这是另一个你在开始开发组件时想要的东西的例子，但不想花时间去做。`react-scripts`的`start`命令启动了一个已经配置好了热重载的Webpack开发服务器。
- en: Hot component reloading in action
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热组件重载正在进行中
- en: Earlier in this chapter, you learned how to start the `react-scripts` development
    server. This development server has hot module reloading configured and ready
    to use. All you have to do is start writing component code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，你学会了如何启动`react-scripts`开发服务器。这个开发服务器已经配置好了热模块重载，可以直接使用。你只需要开始编写组件代码。
- en: 'Let''s start by implementing the following heading component:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从实现以下标题组件开始：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This component will render any child text as an `<h1>` tag. Easy enough? Now,
    let''s change the `App` component to use `Heading`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件将任何子文本呈现为`<h1>`标签。简单吗？现在，让我们改变`App`组件来使用`Heading`：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, you can see what this looks like:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以看到这是什么样子的：
- en: '![](Images/485a5c5f-f3a7-44db-b479-b00cd63f5c98.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/485a5c5f-f3a7-44db-b479-b00cd63f5c98.png)'
- en: 'The `Heading` component is rendered as expected. Now that you''ve initially
    loaded your application in the browser, it''s time to put the hot reloading mechanism
    to work. Let''s say that you''ve decided to change the title of this heading:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`Heading`组件按预期渲染。现在你已经在浏览器中初始化加载了你的应用程序，是时候让热重载机制开始工作了。假设你决定改变这个标题的标题：'
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As soon as you hit save in your code editor, the Webpack development server
    detects that a change has taken place and that new code should be compiled, bundled,
    and sent to the browser. Since `react-scripts` has taken care of configuring Webpack,
    you can just head right into the browser and watch the changes as they take place:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在代码编辑器中保存时，Webpack开发服务器会检测到发生了变化，新代码应该被编译、捆绑并发送到浏览器。由于`react-scripts`已经配置好了Webpack，你可以直接进入浏览器，观察变化的发生：
- en: '![](Images/e7c80c59-40c7-4e5c-9a24-49c2a71ce4b7.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e7c80c59-40c7-4e5c-9a24-49c2a71ce4b7.png)'
- en: This should help speed up development! In fact, it already has and you've just
    witnessed it. You altered the text of a React element and saw the result immediately.
    You could have spent hours setting up this infrastructure with Webpack configuration
    at the center of it, but you didn't have to because you just reused the configuration
    provided by `react-scripts` because nearly all React development configurations
    should look about the same. Over time they diverge, but projects without any components
    look awfully similar. The name of the game is to hit the ground running.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该有助于加快开发速度！事实上，它已经做到了，你刚刚见证了。你修改了一个React元素的文本，并立即看到了结果。你本可以花几个小时来设置Webpack配置，但你不必这样做，因为你只需重用`react-scripts`提供的配置，因为几乎所有的React开发配置看起来都应该差不多。随着时间的推移，它们会分歧，但没有任何组件的项目看起来都非常相似。关键是要快速上手。
- en: 'Now let''s try something different. Let''s add a component with `state` and
    see what happens when we change it. Here''s a simple button component that keeps
    track of its clicks:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试一些不同的东西。让我们添加一个带有`state`的组件，并看看当我们改变它时会发生什么。这是一个简单的按钮组件，它会跟踪自己的点击次数：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s break down what''s happening with this component:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下这个组件的运行情况：
- en: It has a `style` object, but without any properties, so this has no effect.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它有一个`style`对象，但没有任何属性，所以这没有任何效果。
- en: It has a `count` state that is incremented each time the button is clicked.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它有一个`count`状态，每次点击按钮时都会增加。
- en: The `onClick()` handler sets the new `count` state, incrementing the old `count`
    state by `1`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`onClick()`处理程序设置了新的`count`状态，将旧的`count`状态增加`1`。'
- en: The `render()` method renders a `<button>` element with an `onClick` handler
    and a `style` property.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`render()`方法渲染了一个带有`onClick`处理程序和`style`属性的`<button>`元素。'
- en: 'Once you click on this button, it will have a new state. How will this work
    with hot module loading? Let''s try it out. We''ll render this `Button` component
    in our `App` component as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击这个按钮，它就会有一个新的状态。当我们使用热模块加载时会发生什么？让我们试一试。我们将在我们的`App`组件中渲染这个`Button`组件，如下所示：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When you load the UI, you should see something like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你加载UI时，你应该看到类似这样的东西：
- en: '![](Images/d1d97bb0-a1fc-4eb7-9769-4c83ad7d8f19.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d1d97bb0-a1fc-4eb7-9769-4c83ad7d8f19.png)'
- en: 'Clicking on the button should increment the `count` state by `1`. Sure enough,
    clicking it a few times causes the rendered button label to change, reflecting
    the new state:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮应该将`count`状态增加`1`。确实，点击几次会导致渲染的按钮标签发生变化，反映出新的状态：
- en: '![](Images/0753634f-4787-49aa-9bdb-f3a75138c414.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0753634f-4787-49aa-9bdb-f3a75138c414.png)'
- en: 'Now, let''s say that you wanted to change the style of the button. We''ll make
    the text bold:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你想改变按钮的样式。我们将使文本加粗：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The hot module mechanism works as expected, but with one important difference:
    the state of the `Button` component has reverted to its initial state:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 热模块机制的工作正常，但有一个重要的区别：`Button`组件的状态已经恢复到初始状态：
- en: '![](Images/20a0a67c-9e7c-471b-a3f8-37919c578ef6.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/20a0a67c-9e7c-471b-a3f8-37919c578ef6.png)'
- en: This happens because when the `Button.js` module is replaced, the existing component
    instance is unmounted before being replaced with the new instance. The state of
    the component is blown away along with the component itself.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为当`Button.js`模块被替换时，现有的组件实例在被新实例替换之前会被卸载。组件的状态和组件本身都会被清除。
- en: The solution to this is to use the *React Hot Loader* tool. This tool will keep
    your components mounted as their implementation is updated. This means that the
    state persists. In some cases, this can be incredibly helpful. Is this needed
    when you're just getting started? Probably not—hot module reloading that doesn't
    persist state is good enough to get rolling.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法是使用*React Hot Loader*工具。这个工具将保持你的组件在其实现更新时挂载。这意味着状态会保持不变。在某些情况下，这可能非常有帮助。当你刚开始时是否需要这个？可能不需要——不保持状态的热模块重载已经足够让你开始。
- en: Ejecting from Create React App
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Create React App中弹出
- en: The goal of `create-react-app` and `react-scripts` is zero-configuration React
    development. The less time you spend configuring development boilerplate, the
    more time you spend developing components. You should continue to avoid worrying
    about configuring your app for as long as you can. But at some point, you'll have
    to bail on `create-react-app` and maintain your own configuration.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`create-react-app`和`react-scripts`的目标是零配置的React开发。你花在配置开发样板的时间越少，你就能花更多时间开发组件。你应该尽可能地避免担心为你的应用程序进行配置。但是在某个时候，你将不得不放弃`create-react-app`并维护自己的配置。'
- en: Providing a zero-configuration environment is only possible because many defaults
    and many limitations are assumed by `create-react-app`. This is the trade-off.
    By providing sane defaults for most of the things that React developers have to
    do but don't want to, you're making a choice for the developer. This is a good
    thing—being able to punt on decisions early in the development of your application
    makes you more productive.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 提供零配置环境之所以可能，是因为`create-react-app`假定了许多默认值和许多限制。这是一种权衡。通过为大多数React开发人员必须做但不想做的事情提供合理的默认值，你正在为开发人员做出选择。这是一件好事——在应用程序开发的早期阶段能够推迟决策会让你更加高效。
- en: React component hot loading is a good example of a limitation of `create-react-app`.
    It isn't part of the configuration offered by `create-react-app` because you probably
    don't need it early on in your project. But as things become more complex, being
    able to troubleshoot your components without disrupting their current state is
    critical. At this point in the project, `create-react-app` has served its purpose
    and it's time to eject.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: React组件热加载是`create-react-app`的一个限制的很好的例子。它不是`create-react-app`提供的配置的一部分，因为在项目初期你可能不需要它。但随着事情变得更加复杂，能够在不中断当前状态的情况下对组件进行故障排除是至关重要的。在项目的这一阶段，`create-react-app`已经完成了它的使命，现在是时候弹出了。
- en: 'To eject from `create-react-app`, run the `eject` script:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要从`create-react-app`中弹出，运行`eject`脚本：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You'll be asked to confirm this action, because there's no going back. At this
    point, it's worth reinforcing the point that you should not eject from `create-react-app`
    until it gets in the way. Remember, once you eject from `create-react-app`, you
    now assume the responsibilities of maintaining all of the scripts and all of the
    configuration that was once hidden from view.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被要求确认此操作，因为没有回头的余地。在这一点上，值得强调的是，在`create-react-app`不再适用之前，你不应该弹出。记住，一旦你从`create-react-app`中弹出，你现在要承担维护所有曾经隐藏在视图之外的脚本和配置的责任。
- en: 'The good news is that part of the ejection process involves setting up scripts
    and configuration values for your project. Essentially, it''s the same thing that
    `react-scripts` uses internally, except now these scripts and config files are
    copied into your project directory for you to maintain. For example, after ejecting,
    you''ll see a `scripts` directory with the following files:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，弹出过程的一部分涉及为项目设置脚本和配置值。基本上，这与`react-scripts`在内部使用的是相同的东西，只是现在这些脚本和配置文件被复制到你的项目目录中供你维护。例如，弹出后，你会看到一个包含以下文件的`scripts`目录：
- en: '`build.js`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build.js`'
- en: '`start.js`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start.js`'
- en: '`test.js`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.js`'
- en: 'Now if you take a look at `package.json`, you''ll see that the scripts that
    you invoke using `npm` now reference your local scripts instead of referencing
    the `react-scripts` package. In turn, these scripts use the files found in the
    `config` directory that was created for you when you ran eject. Here are the relevant
    Webpack configuration files found here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您查看`package.json`，您会发现您使用`npm`调用的脚本现在引用您的本地脚本，而不是引用`react-scripts`包。反过来，这些脚本使用在您运行弹出时为您创建的`config`目录中找到的文件。以下是在此处找到的相关Webpack配置文件：
- en: '`webpack.config.dev.js`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack.config.dev.js`'
- en: '`webpack.config.prod.js`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack.config.prod.js`'
- en: '`webpackDevServer.config.js`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpackDevServer.config.js`'
- en: Remember, these files are copied over from the `react-scripts` package. Ejecting
    simply means that you now control everything that was once hidden. It's still
    set up the exact same way and will remain so until you change it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这些文件是从`react-scripts`包中复制过来的。弹出只是意味着您现在控制了曾经隐藏的一切。它的设置方式仍然完全相同，并且在您更改它之前将保持不变。
- en: 'For example, let''s suppose that you''ve decided that you need hot module replacement
    for React in a way that persists component state. Now that you''ve ejected from
    `create-react-app`, you can configure the necessary parts that enable the `react-hot-loader`
    tool. Let''s start by installing the dependency:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您已经决定需要React的热模块替换，以一种可以保持组件状态的方式。现在您已经从`create-react-app`中弹出，可以配置启用`react-hot-loader`工具所需的部分。让我们从安装依赖开始：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, let''s update the `webpack.config.dev.js` file so that it uses `react-hot-loader`.
    This is something that would have been impossible to configure before we ejected.
    There are two sections that need to be updated:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们更新`webpack.config.dev.js`文件，以便它使用`react-hot-loader`。这是在我们弹出之前不可能配置的东西。有两个部分需要更新：
- en: 'First, find the following line in the `entry` section:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`entry`部分找到以下行：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Replace this with the following two lines:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下两行替换它：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, you have to add `react-hot-loader` to the `module` section of the Webpack
    configuration. Find the following object:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要将`react-hot-loader`添加到Webpack配置的`module`部分。找到以下对象：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Replace it with the following:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其替换为以下内容：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: All you're doing here is changing the `loader` option to the `use` option so
    that you can pass an array of loaders. The `babel-loader` that you were using
    stays the same. But now you've added the `react-hot-loader/webpack` loader as
    well. Now this tool can detect when it needs to hot replace React components when
    their source changes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里所做的只是将`loader`选项更改为`use`选项，以便您可以传递一系列的加载器。您之前使用的`babel-loader`保持不变。但现在您还添加了`react-hot-loader/webpack`加载器。现在这个工具可以在源代码更改时检测何时需要热替换React组件。
- en: 'That''s all you have to change with your development Webpack configuration.
    Next, you''ll have to change the way that your root React component is rendered.
    Here''s what `index.js` used to look like:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您需要更改开发Webpack配置的全部内容。接下来，您需要更改根React组件的渲染方式。以下是`index.js`以前的样子：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To enable hot component replacement, you can change `index.js` so that it looks
    like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用热组件替换，您可以更改`index.js`，使其看起来像这样：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s break down what you''ve just added:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下您刚刚添加的内容：
- en: The `import 'react-hot-loader/patch'` statement is necessary to bootstrap the
    `react-hot-loader` mechanism.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`import ''react-hot-loader/patch''`语句是必要的，用于引导`react-hot-loader`机制。'
- en: You've created a `render()` function that accepts a component to render. The
    component is wrapped with the `AppContainer` component from `react-hot-loader`,
    which handles some of the bookkeeping associated with hot loading.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您创建了一个接受要渲染的组件的`render()`函数。该组件被`react-hot-loader`的`AppContainer`组件包装，该组件处理了一些与热加载相关的簿记工作。
- en: The first call to `render(App)` renders the application.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`render(App)`的第一次调用渲染了应用程序。
- en: The call to `module.hot.accept()` sets up a callback function that renders the
    `App` component when a new version of the component arrives.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 `module.hot.accept()` 的调用设置了一个回调函数，当组件的新版本到达时渲染 `App` 组件。
- en: Now your app is ready to receive hot React component updates. It was always
    able to receive updates when your source changed, but as discussed earlier in
    the chapter, these updates will wipe out any state in the component before the
    component is re-rendered. Now that `react-hot-loader` is in place, you get to
    keep any state in your components. Let's try it out.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的应用程序已准备好接收热更新的 React 组件。当您的源代码发生更改时，它总是能够接收更新，但正如本章前面讨论的那样，这些更新将在组件重新渲染之前清除组件中的任何状态。现在
    `react-hot-loader` 已经就位，您可以保留组件中的任何状态。让我们试一试。
- en: 'Once you load up the UI, click on the button a few times to change its state.
    Then, change the `style` constant to make the font bold:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 加载 UI 后，点击按钮几次以更改其状态。然后，更改 `style` 常量以使字体加粗：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once you save this file, you''ll notice that the button component has been
    updated. More importantly, the state hasn''t changed! If you clicked on the button
    twice, it should look like this now:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此文件后，您会注意到按钮组件已更新。更重要的是，状态没有改变！如果您点击按钮两次，现在应该是这样的：
- en: '![](Images/b7439ce3-0172-47ea-a557-57f5447d0030.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b7439ce3-0172-47ea-a557-57f5447d0030.png)'
- en: This was a simple example that involved only one button. But the setup that
    you've just created by ejecting from `create-react-app`, tweaking the development
    Webpack configuration, and changing the way the `App` component is rendered can
    support hot component loading with every component you create going forward.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这只涉及一个按钮的简单示例。但是，通过从 `create-react-app` 中弹出，调整开发 Webpack 配置，并改变 `App` 组件渲染方式所创建的设置可以支持未来创建的每个组件的热加载。
- en: Adding the `react-hot-loader` package to your project is just one example of
    the need to eject from `create-react-app` so that you can tweak the configuration.
    I would caution against changing what's absolutely necessary. Make sure that you
    have a specific goal in mind when you change the configuration that `create-react-app`
    gives you. In other words, don't undo all the work that `create-react-app` has
    done for you.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `react-hot-loader` 包添加到您的项目中只是需要从 `create-react-app` 中弹出以便您可以调整配置的一个例子。我建议不要更改绝对必要的内容。确保在更改
    `create-react-app` 给您的配置时有一个具体的目标。换句话说，不要撤消 `create-react-app` 为您所做的所有工作。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to start the development server for a project
    created with `create-react-app`. You then learned that the `react-scripts` package
    has its own Webpack configuration that it uses when it starts the development
    server for you. We went over the key areas of configuration that you shouldn't
    necessarily have to think about when you're trying to write an application.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何为使用 `create-react-app` 创建的项目启动开发服务器。然后您了解到 `react-scripts` 包在为您启动开发服务器时使用自己的
    Webpack 配置。我们讨论了在尝试编写应用程序时不一定需要考虑的配置的关键领域。
- en: Finally, you saw hot module reloading in action. Out of the box, `react-scripts`
    reloads the app for you when you make source changes. This results in a page refresh,
    which is good enough to get started. We then looked at the potential challenges
    of developing components using this approach because it wipes out any state that
    the component had before it was updated. So you ejected from `create-react-app`
    and customized the Webpack configuration for your project to support hot component
    reloading that will preserve the state.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您看到了热模块重新加载的实际操作。`react-scripts`默认情况下在您进行源代码更改时重新加载应用程序。这会导致页面刷新，这已经足够好用了。然后我们看了一下使用这种方法开发组件可能面临的挑战，因为它会清除组件在更新之前的任何状态。因此，您从`create-react-app`中退出，并自定义了项目的Webpack配置，以支持保留状态的热组件重新加载。
- en: In the following chapter, you'll work with tooling to support unit tests in
    your React application.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，您将使用工具来支持在您的React应用程序中进行单元测试。
