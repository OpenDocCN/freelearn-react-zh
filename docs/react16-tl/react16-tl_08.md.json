["```jsx\ncreate-react-app finding-and-selecting-components\n```", "```jsx\nnpm start\n```", "```jsx\nimport React from 'react'; \nimport MyContainer from './MyContainer'; \nimport MyChild from './MyChild'; \n\nconst App = () => ( \n  <MyContainer>\n```", "```jsx\n    <MyChild>child text</MyChild> \n  </MyContainer> \n); \n\nexport default App; \n```", "```jsx\nimport React from 'react'; \nimport './MyContainer.css'; \n\nconst MyContainer = ({ children }) => ( \n  <section className=\"MyContainer\"> \n    <header> \n      <h1>Container</h1> \n    </header> \n    <article>{children}</article> \n  </section> \n); \n\nexport default MyContainer; \n```", "```jsx\nimport React from 'react'; \n\nconst MyChild = ({ children }) => <p>{children}</p>; \n\nexport default MyChild; \n```", "```jsx\nimport React, { Component } from 'react'; \nimport MyItem from './MyItem'; \n\nclass MyList extends Component { \n  timer = null; \n  state = { items: [] };\n  componentDidMount() { \n    this.timer = setInterval(() => { \n      if (this.state.items.length === 10) { \n        clearInterval(this.timer); \n        return; \n      } \n\n      this.setState(state => ({ \n        ...state, \n        items: [ \n          ...state.items, \n          { \n            label: 'Item ${state.items.length + 1}', \n            strikethrough: false \n          } \n        ] \n      })); \n    }, 3000); \n  } \n\n  componentWillUnmount() { \n    clearInterval(this.timer); \n  } \n\n  onItemClick = index => () => { \n    this.setState(state => ({ \n      ...state, \n      items: state.items.map( \n        (v, i) => \n          index === i \n            ? { \n                ...v, \n                strikethrough: !v.strikethrough \n              } \n            : v \n      ) \n    })); \n  }; \n\n  render() { \n    return ( \n      <ul> \n        {this.state.items.map((v, i) => ( \n          <MyItem \n            key={i} \n            label={v.label} \n            strikethrough={v.strikethrough} \n            onClick={this.onItemClick(i)}\n\n          /> \n        ))} \n      </ul> \n    ); \n  } \n} \n\nexport default MyList; \n```", "```jsx\nimport React from 'react'; \n\nconst MyItem = ({ label, strikethrough, onClick }) => ( \n  <li \n    style={{ \n      cursor: 'pointer', \n      textDecoration: strikethrough ? 'line-through' : 'none' \n    }} \n    onClick={onClick} \n  > \n    {label} \n  </li> \n); \n\nexport default MyItem; \n```", "```jsx\nimport React, { Component } from 'react'; \nimport MyItem from './MyItem';\nclass MyList extends Component { \n  timer = null; \n  state = { \n    items: new Array(10).fill(null).map((v, i) => ({ \n      label: 'Item ${i + 1}', \n      strikethrough: false\n    })) \n  }; \n\n  onItemClick = index => () => { \n    this.setState(state => ({ \n      ...state, \n      items: state.items.map( \n        (v, i) => \n          index === i \n            ? { \n                ...v, \n                strikethrough: !v.strikethrough \n              } \n            : v \n      ) \n    })); \n  }; \n\n  render() { \n    return ( \n      <ul> \n        {this.state.items.map((v, i) => ( \n          <MyItem \n            key={i} \n            label={v.label} \n            strikethrough={v.strikethrough} \n            onClick={this.onItemClick(i)} \n          /> \n        ))} \n      </ul> \n    ); \n  } \n} \n\nexport default MyList; \n```", "```jsx\nimport React from 'react'; \nimport ReactDOM from 'react-dom'; \nimport './index.css'; \nimport App from './App'; \nimport registerServiceWorker from './registerServiceWorker'; \n\nconst update = () => { \n  ReactDOM.render(<App />, document.getElementById('root')); \n}; \n\nsetInterval(update, 5000); \nupdate(); \n\nregisterServiceWorker(); \n```", "```jsx\nimport React, { Component } from 'react'; \nimport './App.css'; \nimport Group from './Group';\n\nclass App extends Component { \n  state = { \n    groupCount: 10, \n    memberCount: 20, \n    groups: [] \n  }; \n\n  refreshGroups = (groups, members) => { \n    this.setState(state => { \n      const groupCount = \n        groups === undefined ? state.groupCount : groups; \n      const memberCount = \n        members === undefined ? state.memberCount : members; \n      return { \n        ...state, \n        groupCount, \n        memberCount, \n        groups: new Array(groupCount).fill(null).map((g, gi) => ({ \n          name: 'Group ${gi + 1}', \n          members: new Array(memberCount) \n            .fill(null) \n            .map((m, mi) => ({ name: 'Member ${mi + 1}' })) \n        })) \n      }; \n    }); \n  }; \n\n  onGroupCountChange = ({ target: { value } }) => { \n    // The + makes value a number. \n    this.refreshGroups(+value); \n  }; \n\n  onMemberCountChange = ({ target: { value } }) => { \n    this.refreshGroups(undefined, +value); \n  }; \n\n  onAddMemberClick = i => () => { \n    this.setState(state => ({ \n      ...state, \n      groups: state.groups.map( \n        (v, gi) => \n          i === gi \n            ? { \n                ...v, \n                members: v.members.concat({ \n                  name: 'Member ${v.members.length + 1}' \n                }) \n              }\n            : v \n      ) \n    })); \n  }; \n\n  componentWillMount() { \n    this.refreshGroups(); \n  } \n\n  render() { \n    return ( \n      <section className=\"App\"> \n        <div className=\"Field\"> \n          <label htmlFor=\"groups\">Groups</label> \n          <input \n            id=\"groups\" \n            type=\"range\" \n            value={this.state.groupCount} \n            min=\"1\" \n            max=\"20\" \n            onChange={this.onGroupCountChange} \n          /> \n        </div> \n        <div className=\"Field\"> \n          <label htmlFor=\"members\">Members</label> \n          <input \n            id=\"members\" \n            type=\"range\" \n            value={this.state.memberCount} \n            min=\"1\" \n            max=\"20\" \n            onChange={this.onMemberCountChange} \n          /> \n        </div> \n        {this.state.groups.map((g, i) => ( \n          <Group \n            key={i} \n            name={g.name} \n            members={g.members} \n            onAddMemberClick={this.onAddMemberClick(i)} \n          /> \n        ))} \n      </section> \n    ); \n  } \n} \n\nexport default App; \n```", "```jsx\nstate = { \n  groupCount: 10, \n  memberCount: 20, \n  groups: [] \n}; \n```", "```jsx\nrefreshGroups = (groups, members) => { \n  this.setState(state => { \n    const groupCount = \n      groups === undefined ? state.groupCount : groups; \n    const memberCount = \n      members === undefined ? state.memberCount : members; \n    return { \n      ...state, \n      groupCount, \n      memberCount, \n      groups: new Array(groupCount).fill(null).map((g, gi) => ({ \n        name: 'Group ${gi + 1}', \n        members: new Array(memberCount) \n          .fill(null) \n          .map((m, mi) => ({ name: 'Member ${mi + 1}' })) \n      })) \n    }; \n  }); \n}; \n```", "```jsx\n{ \n  groupCount: 10, \n  memberCount: 20, \n  groups: [ \n    {\n      Name: 'Group 1', \n      Members: [ { name: 'Member 1' }, { name: 'Member 2' } ] \n    }, \n    { \n      Name: 'Group 2', \n      Members: [ { name: 'Member 1' }, { name: 'Member 2' } ] \n    } \n  ] \n} \n```", "```jsx\nonGroupCountChange = ({ target: { value } }) => { \n  this.refreshGroups(+value); \n}; \n\nonMemberCountChange = ({ target: { value } }) => { \n  this.refreshGroups(undefined, +value); \n}; \n\nonAddMemberClick = i => () => { \n  this.setState(state => ({ \n    ...state, \n    groups: state.groups.map( \n      (v, gi) => \n        i === gi \n          ? { \n              ...v, \n              members: v.members.concat({ \n                name: 'Member ${v.members.length + 1}' \n              }) \n            } \n          : v \n    ) \n  })); \n}; \n```", "```jsx\nrender() { \n  return ( \n    <section className=\"App\"> \n      <div className=\"Field\"> \n        <label htmlFor=\"groups\">Groups</label> \n        <input \n          id=\"groups\" \n          type=\"range\" \n          value={this.state.groupCount} \n          min=\"1\" \n          max=\"20\" \n          onChange={this.onGroupCountChange} \n        /> \n      </div> \n      <div className=\"Field\"> \n        <label htmlFor=\"members\">Members</label> \n        <input \n          id=\"members\" \n          type=\"range\" \n          value={this.state.memberCount} \n          min=\"1\" \n          max=\"20\" \n          onChange={this.onMemberCountChange} \n        /> \n      </div> \n      {this.state.groups.map((g, i) => ( \n        <Group \n          key={i} \n          name={g.name} \n          members={g.members} \n          onAddMemberClick={this.onAddMemberClick(i)} \n        /> \n      ))} \n    </section> \n  ); \n} \n```", "```jsx\nimport React from 'react';\nconst Group = ({ name, members, onAddMemberClick }) => ( \n  <section> \n    <h4>{name}</h4> \n    <button onClick={onAddMemberClick}>Add Member</button> \n    <ul>{members.map((m, i) => <li key={i}>{m.name}</li>)}</ul> \n  </section> \n); \n\nexport default Group; \n```", "```jsx\nshouldComponentUpdate(props, state) { \n  return ( \n    this.state.groupCount !== state.groupCount || \n    this.state.memberCount !== state.memberCount \n  ); \n} \n```", "```jsx\nshouldComponentUpdate(props, state) { \n  const totalMembers = ({ groups }) => \n    groups \n      .map(group => group.members.length) \n      .reduce((result, m) => result + m); \n\n  return ( \n    this.state.groupCount !== state.groupCount || \n    this.state.memberCount !== state.memberCount || \n    totalMembers(this.state) !== totalMembers(state) \n  ); \n} \n```", "```jsx\ntotalMembers(this.state) !== totalMembers(state) \n```", "```jsx\nstate = { \n  groupCount: 1, \n  memberCount: 200, \n  groups: [] \n}; \n```", "```jsx\n<div className=\"Field\"> \n  <label htmlFor=\"members\">Members</label> \n  <input \n    id=\"members\" \n    type=\"range\" \n    value={this.state.memberCount}\n    min=\"1\" \n    max=\"200\" \n    onChange={this.onMemberCountChange} \n  /> \n</div> \n```"]