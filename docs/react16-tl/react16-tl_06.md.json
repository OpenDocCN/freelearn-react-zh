["```jsx\nnpm install eslint --save-dev\n```", "```jsx\n\"scripts\": { \n  ... \n  \"lint\": \"eslint\" \n}, \n```", "```jsx\nnpm run lint\n```", "```jsx\neslint [options] file.js [file.js] [dir]\n\nBasic configuration:\n  -c, --config path::String      Use configuration from this file or shareable config\n  --no-eslintrc                  Disable use of configuration from .eslintrc\n  --env [String]                 Specify environments\n  --ext [String]                 Specify JavaScript file extensions - default: .js\n  --global [String]              Define global variables\n  --parser String                Specify the parser to be used\n  --parser-options Object        Specify parser options \n...\n```", "```jsx\n\"scripts\": { \n  ... \n  \"lint\": \"eslint .\" \n}, \n```", "```jsx\nOops! Something went wrong! :(ESLint: 4.15.0.\nESLint couldn't find a configuration file. To set up a configuration file for this project, please run:\n eslint --init\n```", "```jsx\n? How would you like to configure ESLint? \n\u203a Answer questions about your style \n Use a popular style guide \n Inspect your JavaScript file(s) \n```", "```jsx\n? Are you using ECMAScript 6 features? (y/N)  \n```", "```jsx\n? Are you using ES6 modules? (y/N)\n```", "```jsx\n? Where will your code run? (Press <space> to select, <a> to toggle all, <i> to inverse selection)\n\u203a(*) Browser\n ( ) Node\n```", "```jsx\n? Do you use CommonJS? (y/N)  \n```", "```jsx\n? Do you use JSX? (y/N)  \n```", "```jsx\n? What style of indentation do you use? (Use arrow keys)\n\u203a Tabs \n  Spaces\n```", "```jsx\n? What quotes do you use for strings? (Use arrow keys)\n\u203a Double \n  Single \n```", "```jsx\n? What line endings do you use? (Use arrow keys)\n\u203a Unix\n  Windows\n```", "```jsx\n? Do you require semicolons? (Y/n)  \n```", "```jsx\n? What format do you want your config file to be in? (Use arrow keys)\n\u203a JavaScript \n  YAML \n  JSON \n```", "```jsx\nSuccessfully created .eslintrc.js file\n```", "```jsx\nnpm run lint\n```", "```jsx\nmodule.exports = { \n    \"env\": { \n        \"browser\": true, \n        \"es6\": true \n    }, \n    \"extends\": \"eslint:recommended\", \n    \"parserOptions\": { \n        \"sourceType\": \"module\"\n```", "```jsx\n    }, \n    \"rules\": { \n        \"indent\": [ \n            \"error\", \n           4 \n        ], \n        \"linebreak-style\": [ \n            \"error\", \n            \"unix\" \n        ], \n        \"quotes\": [ \n            \"error\", \n            \"single\" \n        ], \n        \"semi\": [ \n            \"error\", \n            \"always\" \n        ] \n    } \n}; \n```", "```jsx\nexport const myFunc = () => 'myFunc';\n```", "```jsx\nexport const myFunc = () => 'myFunc' \n```", "```jsx\nindex.js \n  1:37  error  Missing semicolon  semi \n\u03a7 1 problem (1 error, 0 warnings)\n```", "```jsx\nconst myFunc = () => 'myFunc'; \n```", "```jsx\nindex.js \n  1:7  error  'myFunc' is assigned a value but never used  no-unused-vars \u03a7 1 problem (1 error, 0 warnings)\n```", "```jsx\nnpm run lint -- --init\n```", "```jsx\n? How would you like to configure ESLint? \n  Answer questions about your style \n\u203a Use a popular style guide \n  Inspect your JavaScript file(s) \n```", "```jsx\n? Which style guide do you want to follow? \n  Google  \n\u203a  Airbnb \n  Standard \n```", "```jsx\nChecking peerDependencies of eslint-config-airbnb-base@latest \nInstalling eslint-config-airbnb-base@latest, eslint-plugin-import@^2.7.0 \n\n+ eslint-plugin-import@2.8.0 \n+ eslint-config-airbnb-base@12.1.0 \n```", "```jsx\nmodule.exports = { \n  \"extends\": \"airbnb-base\" \n}; \n```", "```jsx\nconst maybe = v => v ? v : 'default';\n\nconsole.log(maybe('yes'));\n// -> yes\nconsole.log(maybe());\n// -> default\n```", "```jsx\nnpm run lint\n```", "```jsx\nindex.js \n  1:15  error    Arrow function used ambiguously with a conditional expression     no-confusing-arrow\n```", "```jsx\n 1:24  error    Unnecessary use of conditional expression for default assignment  no-unneeded-ternary \n  3:1   warning  Unexpected console statement                                      no-console \n  5:1   warning  Unexpected console statement                                      no-console \n\u03a7 4 problems (2 errors, 2 warnings)\n```", "```jsx\nconst maybe = (v = 'default') => v; \n```", "```jsx\nindex.js \n  6:1  warning  Unexpected console statement  no-console \n  8:1  warning  Unexpected console statement  no-console \n\u03a7 2 problems (0 errors, 2 warnings)\n```", "```jsx\nmodule.exports = { \n  \"extends\": \"airbnb-base\", \n  \"rules\": { \n    \"no-console\": 0 \n  } \n}; \n```", "```jsx\nnpm run lint -- --init\n```", "```jsx\n? Which style guide do you want to follow? \n  Google \n\u203a  Airbnb \n  Standard \n```", "```jsx\n? Do you use React? (y/N) y\n```", "```jsx\n+ eslint-plugin-react@7.5.1\n+ eslint-plugin-jsx-a11y@6.0.3  \n```", "```jsx\nimport React, { Component } from 'react'; \n\nclass MyComponent extends Component { \n  render() { \n    return ( \n      <section> \n        <h1>My Component</h1> \n      </section> \n    );\n```", "```jsx\n  } \n} \n\nexport default MyComponent; \n```", "```jsx\nimport React from 'react'; \nimport ReactDOM from 'react-dom'; \nimport MyComponent from './MyComponent'; \n\nconst root = document.getElementById('root'); \n\nReactDOM.render( \n  <MyComponent />, \n  root \n); \n```", "```jsx\nnpm run lint\n```", "```jsx\nindex.js \n  5:14  error  'document' is not defined                      no-undef \n  8:3   error  JSX not allowed in files with extension '.js'  react/jsx-filename-extension \n  9:7   error  Missing trailing comma                         comma-dangle \n\nMyComponent.js \n  3:1  error  Component should be written as a pure function  react/prefer-stateless-function \n  6:7  error  JSX not allowed in files with extension '.js'   react/jsx-filename-extension \n```", "```jsx\nmodule.exports = { \n  \"extends\": \"airbnb\",\n```", "```jsx\n  \"globals\": {\n    \"document\": true \n  } \n}; \n```", "```jsx\nmodule.exports = { \n  \"extends\": \"airbnb\", \n  \"env\": { \n    \"browser\": true \n  } \n}; \n```", "```jsx\nmodule.exports = { \n  \"extends\": \"airbnb\", \n  \"env\": { \n    \"browser\": true, \n    \"node\": true \n  } \n}; \n```", "```jsx\nmodule.exports = {\n  \"extends\": \"airbnb\", \n  \"env\": { \n    \"browser\": true, \n    \"node\": true \n  }, \n  \"rules\": { \n    \"react/jsx-filename-extension\": 0 \n  } \n}; \n```", "```jsx\nReactDOM.render( \n  <MyComponent />, \n  root \n); \n```", "```jsx\nReactDOM.render( \n  <MyComponent />, \n  root, \n); \n```", "```jsx\nimport React, { Component } from 'react'; \n\nclass MyComponent extends Component {\n\n  render() { \n    return (\n      <section> \n        <h1>My Component</h1> \n      </section> \n    ); \n  } \n} \n\nexport default MyComponent; \n```", "```jsx\nimport React, { Component } from 'react';\n\nconst MyComponent = () => (\n  <section>\n    <h1>My Component</h1>\n  </section>\n);\n\nexport default MyComponent;\n```", "```jsx\nMyComponent.js \n  1:17  error  'Component' is defined but never used  no-unused-vars \n```", "```jsx\nimport React from 'react';\nconst MyComponent = () => ( \n  <section>\n    <h1>My Component</h1> \n  </section> \n); \n\nexport default MyComponent; \n```", "```jsx\ncreate-react-app my-new-app\n```", "```jsx\nnpm start\n```", "```jsx\nimport React, { Component } from 'react'; \nimport logo from './logo.svg'; \nimport './App.css'; \n\nclass App extends Component { \n  render() { \n    return ( \n      <div className=\"App\"> \n        <header className=\"App-header\"> \n          <img src={logo} className=\"App-logo\" alt=\"logo\" /> \n          <h1 className=\"App-title\">Welcome to React</h1> \n        </header>\n        <p className=\"App-intro\"> \n          To get started, edit <code>src/App.js</code> and save to reload. \n        </p> \n      </div>\n    ); \n  } \n} \n\nexport default App; \n```", "```jsx\nimport React from 'react'; \nimport logo from './logo.svg'; \nimport './App.css'; \n\nclass App extends Component { \n  render() { \n    return ( \n      <div className=\"App\"> \n        <header className=\"App-header\"> \n          <img src={logo} className=\"App-logo\" alt=\"logo\" /> \n          <h1 className=\"App-title\">Welcome to React</h1> \n        </header> \n        <p className=\"App-intro\"> \n          To get started, edit <code>src/App.js</code> and save to reload. \n        </p> \n      </div> \n    ); \n  } \n} \n\nexport default App; \n```", "```jsx\nFailed to compile.\n\n./src/App.js\nLine 5:  'Component' is not defined  no-undef  \n```", "```jsx\nmodule.exports = { \n  \"extends\": \"eslint-config-react-app\" \n}; \n```", "```jsx\nimport React from 'react';\n```", "```jsx\nimport React, { Component } from 'react'; \n```"]