["```jsx\nnpm start\n```", "```jsx\nnpm run api\n```", "```jsx\nAPI server listening on port 3001!  \n```", "```jsx\nimport React, { Component } from 'react';\n\nimport { withStyles } from 'material-ui/styles';\nimport TextField from 'material-ui/TextField';\nimport Button from 'material-ui/Button';\n\nimport { login } from './api';\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200\n  },\n  button: {\n    margin: theme.spacing.unit\n  }\n});\n\nclass Login extends Component {\n  state = {\n    user: '',\n    password: ''\n  };\n\n  onInputChange = name => event => {\n    this.setState({\n      [name]: event.target.value\n    });\n  };\n\n  onLoginClick = () => {\n    login(this.state).then(resp => {\n      if (resp.status === 200) {\n        this.props.history.push('/');\n      }\n    });\n  };\n\n  componentWillMount() {\n    this.props.setTitle('Login');\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.container}>\n        <TextField\n          id=\"user\"\n          label=\"User\"\n          className={classes.textField}\n          value={this.state.user}\n          onChange={this.onInputChange('user')}\n          margin=\"normal\"\n        />\n        <TextField\n          id=\"password\"\n          label=\"Password\"\n          className={classes.textField}\n          value={this.state.password}\n          onChange={this.onInputChange('password')}\n          type=\"password\"\n          autoComplete=\"current-password\"\n          margin=\"normal\"\n        />\n        <Button\n          variant=\"raised\"\n          color=\"primary\"\n          className={classes.button}\n          onClick={this.onLoginClick}\n        >\n          Login\n        </Button>\n      </div>\n    );\n  }\n}\nexport default withStyles(styles)(Login);\n```", "```jsx\nimport React, { Component } from 'react';\n\nimport { withStyles } from 'material-ui/styles';\nimport Paper from 'material-ui/Paper';\nimport Avatar from 'material-ui/Avatar';\nimport IconButton from 'material-ui/IconButton';\n\nimport ContactMail from 'material-ui-icons/ContactMail';\nimport Message from 'material-ui-icons/Message';\n\nimport List, {\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  ListItemSecondaryAction\n} from 'material-ui/List';\n\nimport EmptyMessage from './EmptyMessage';\nimport { getContacts } from './api';\n\nconst styles = theme => ({\n  root: {\n    margin: '10px',\n    width: '100%',\n    maxWidth: 500,\n    backgroundColor: theme.palette.background.paper\n  }\n});\n\nclass Home extends Component {\n  state = {\n    contacts: []\n  };\n\n  onMessageClick = id => () => {\n    this.props.history.push(`/newmessage/${id}`);\n  };\n\n  componentWillMount() {\n    const { setTitle, history } = this.props;\n\n    setTitle('Barely SMS');\n\n    const refresh = () =>\n      getContacts().then(resp => {\n        if (resp.status === 403) {\n          history.push('/login');\n        } else {\n          resp.json().then(contacts => {\n            this.setState({\n              contacts: contacts.filter(contact => contact.online)\n            });\n          });\n        }\n      });\n\n    this.refreshInterval = setInterval(refresh, 5000);\n    refresh();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.refreshInterval);\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { contacts } = this.state;\n    const { onMessageClick } = this;\n\n    return (\n      <Paper className={classes.root}>\n        <EmptyMessage coll={contacts}>\n          No contacts online\n        </EmptyMessage>\n        <List component=\"nav\">\n          {contacts.map(contact => (\n            <ListItem key={contact.id}>\n              <ListItemAvatar>\n                <Avatar>\n                  <ContactMail />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary={contact.name} />\n              <ListItemSecondaryAction>\n                <IconButton onClick={onMessageClick(contact.id)}>\n                  <Message />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(styles)(Home);\n```", "```jsx\nimport React, { Component } from 'react';\n\nimport { withStyles } from 'material-ui/styles';\nimport Paper from 'material-ui/Paper';\nimport Avatar from 'material-ui/Avatar';\nimport IconButton from 'material-ui/IconButton';\n\nimport ContactMail from 'material-ui-icons/ContactMail';\nimport Message from 'material-ui-icons/Message';\n\nimport List, {\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  ListItemSecondaryAction\n} from 'material-ui/List';\n\nimport EmptyMessage from './EmptyMessage';\nimport { getContacts } from './api';\n\nconst styles = theme => ({\n  root: {\n    margin: '10px',\n    width: '100%',\n    maxWidth: 500,\n    backgroundColor: theme.palette.background.paper\n  }\n});\n\nclass Contacts extends Component {\n  state = {\n    contacts: []\n  };\n\n  onMessageClick = id => () => {\n    this.props.history.push(`/newmessage/${id}`);\n  };\n\n  componentWillMount() {\n    const { setTitle, history } = this.props;\n\n    setTitle('Contacts');\n\n    const refresh = () =>\n      getContacts().then(resp => {\n        if (resp.status === 403) {\n          history.push('/login');\n        } else {\n          resp.json().then(contacts => {\n            this.setState({ contacts });\n          });\n        }\n      });\n\n    this.refreshInterval = setInterval(refresh, 5000);\n    refresh();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.refreshInterval);\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { contacts } = this.state;\n    const { onMessageClick } = this;\n\n    return (\n      <Paper className={classes.root}>\n        <EmptyMessage coll={contacts}>No contacts</EmptyMessage>\n        <List component=\"nav\">\n          {contacts.map(contact => (\n            <ListItem key={contact.id}>\n              <ListItemAvatar>\n                <Avatar>\n                  <ContactMail />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary={contact.name} />\n              <ListItemSecondaryAction>\n                <IconButton onClick={onMessageClick(contact.id)}>\n                  <Message />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(styles)(Contacts);\n```", "```jsx\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\n\nimport { withStyles } from 'material-ui/styles';\nimport Paper from 'material-ui/Paper';\nimport Avatar from 'material-ui/Avatar';\nimport List, {\n  ListItem,\n  ListItemAvatar,\n  ListItemText\n} from 'material-ui/List';\n\nimport Message from 'material-ui-icons/Message';\n\nimport EmptyMessage from './EmptyMessage';\nimport { getMessages } from './api';\n\nconst styles = theme => ({\n  root: {\n    margin: '10px',\n    width: '100%',\n    maxWidth: 500,\n    backgroundColor: theme.palette.background.paper\n  }\n});\n\nclass Messages extends Component {\n  state = {\n    messages: []\n  };\n\n  componentWillMount() {\n    const { setTitle, history } = this.props;\n\n    setTitle('Messages');\n\n    const refresh = () =>\n      getMessages().then(resp => {\n        if (resp.status === 403) {\n          history.push('/login');\n        } else {\n          resp.json().then(messages => {\n            this.setState({\n              messages: messages.map(message => ({\n                ...message,\n                duration: moment\n                  .duration(new Date() - new Date(message.timestamp))\n                  .humanize()\n              }))\n            });\n          });\n        }\n      });\n\n    this.refreshInterval = setInterval(refresh, 5000);\n    refresh();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.refreshInterval);\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { messages } = this.state;\n\n    return (\n      <Paper className={classes.root}>\n        <EmptyMessage coll={messages}>No messages</EmptyMessage>\n        <List component=\"nav\">\n          {messages.map(message => (\n            <ListItem\n              key={message.id}\n              component={Link}\n              to={`/messages/${message.id}`}\n            >\n              <ListItemAvatar>\n                <Avatar>\n                  <Message />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={message.fromName}\n                secondary={`${message.duration} ago`}\n              />\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(styles)(Messages);\n```", "```jsx\nimport React, { Component } from 'react';\n\nimport { withStyles } from 'material-ui/styles';\nimport Paper from 'material-ui/Paper';\nimport TextField from 'material-ui/TextField';\nimport Button from 'material-ui/Button';\n\nimport Send from 'material-ui-icons/Send';\n\nimport { getUser, postMessage } from './api';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'column'\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 500\n  },\n  button: {\n    width: 500,\n    margin: theme.spacing.unit\n  },\n  rightIcon: {\n    marginLeft: theme.spacing.unit\n  }\n});\n\nclass NewMessage extends Component {\n  state = {\n    message: ''\n  };\n\n  onMessageChange = event => {\n    this.setState({\n      message: event.target.value\n    });\n  };\n\n  onSendClick = () => {\n    const { match: { params: { id } }, history } = this.props;\n    const { message } = this.state;\n\n    postMessage({ to: id, message }).then(() => {\n      this.setState({ message: '' });\n      history.push('/');\n    });\n  };\n\n  componentWillMount() {\n    const {\n      match: { params: { id } },\n      setTitle,\n      history\n    } = this.props;\n\n    getUser(id).then(resp => {\n      if (resp.status === 403) {\n        history.push('/login');\n      } else {\n        resp.json().then(user => {\n          setTitle(`New message for ${user.name}`);\n        });\n      }\n    });\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { message } = this.state;\n    const { onMessageChange, onSendClick } = this;\n\n    return (\n      <Paper className={classes.root}>\n        <TextField\n          id=\"multiline-static\"\n          label=\"Message\"\n          multiline\n          rows=\"4\"\n          className={classes.textField}\n          margin=\"normal\"\n          value={message}\n          onChange={onMessageChange}\n        />\n        <Button\n          variant=\"raised\"\n          color=\"primary\"\n          className={classes.button}\n          onClick={onSendClick}\n        >\n          Send\n          <Send className={classes.rightIcon} />\n        </Button>\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(styles)(NewMessage);\n```", "```jsx\nimport React, { Component } from 'react'; \nimport { Link } from 'react-router-dom'; \n\nimport { withStyles } from 'material-ui/styles'; \nimport Paper from 'material-ui/Paper'; \nimport Button from 'material-ui/Button'; \nimport Typography from 'material-ui/Typography'; \n\nimport Delete from 'material-ui-icons/Delete'; \nimport Reply from 'material-ui-icons/Reply'; \n\nimport { getMessage, deleteMessage } from './api'; \n\nconst styles = theme => ({ \n  root: { \n    display: 'flex', \n    flexWrap: 'wrap', \n    flexDirection: 'column' \n  }, \n  message: { \n    width: 500, \n    margin: theme.spacing.unit \n  }, \n  button: { \n    width: 500, \n    margin: theme.spacing.unit \n  }, \n  rightIcon: { \n    marginLeft: theme.spacing.unit \n  } \n}); \n\nclass NewMessage extends Component { \n  state = { \n    message: {} \n  }; \n\n  onDeleteClick = () => { \n    const { history, match: { params: { id } } } = this.props; \n\n    deleteMessage(id).then(() => { \n      history.push('/messages'); \n    }); \n  }; \n\n  componentWillMount() { \n    const { \n      match: { params: { id } }, \n      setTitle, \n      history \n    } = this.props; \n\n    getMessage(id).then(resp => { \n      if (resp.status === 403) { \n        history.push('/login'); \n      } else { \n        resp.json().then(message => { \n          setTitle(`Message from ${message.fromName}`); \n          this.setState({ message }); \n        }); \n      } \n    }); \n  } \n\n  render() { \n    const { classes } = this.props; \n    const { message } = this.state; \n    const { onDeleteClick } = this; \n\n    return ( \n      <Paper className={classes.root}> \n        <Typography className={classes.message}> \n          {message.message} \n        </Typography> \n        <Button \n          variant=\"raised\" \n          color=\"primary\" \n          className={classes.button} \n          component={Link} \n          to={`/newmessage/${message.from}`} \n        > \n          Reply \n          <Reply className={classes.rightIcon} /> \n        </Button> \n        <Button \n          variant=\"raised\" \n          color=\"primary\" \n          className={classes.button} \n          onClick={onDeleteClick} \n        > \n          Delete \n          <Delete className={classes.rightIcon} /> \n        </Button> \n      </Paper> \n    ); \n  } \n} \n\nexport default withStyles(styles)(NewMessage); \n```", "```jsx\nexport const login = body => \n  fetch('/api/login', { \n    method: 'post', \n    headers: { 'Content-Type': 'application/json' }, \n    body: JSON.stringify(body), \n    credentials: 'same-origin' \n  }); \n\nexport const logout = user => \n  fetch('/api/logout', { \n    method: 'post', \n    credentials: 'same-origin' \n  }); \n\nexport const getUser = id => \n  fetch(`/api/user/${id}`, { credentials: 'same-origin' }); \n\nexport const getContacts = () => \n  fetch('/api/contacts', { credentials: 'same-origin' }); \n\nexport const getMessages = () => \n  fetch('/api/messages', { credentials: 'same-origin' }); \n\nexport const getMessage = id => \n  fetch(`/api/message/${id}`, { credentials: 'same-origin' }); \n\nexport const postMessage = body => \n  fetch('/api/messages', { \n    method: 'post', \n    headers: { 'Content-Type': 'application/json' }, \n    body: JSON.stringify(body), \n    credentials: 'same-origin' \n  });\n\nexport const deleteMessage = id => \n  fetch(`/api/message/${id}`, { \n    method: 'delete', \n    credentials: 'same-origin' \n  }); \n```", "```jsx\nconst express = require('express'); \nconst bodyParser = require('body-parser'); \nconst cookieParser = require('cookie-parser'); \n\nconst sessions = []; \nconst messages = []; \nconst users = { \n  user1: { \n    name: 'User 1', \n    contacts: ['user2', 'user3', 'user4', 'user5'], \n    online: false \n  }, \n  user2: { \n    name: 'User 2', \n    contacts: ['user1', 'user3', 'user4', 'user5'], \n    online: false \n  }, \n  user3: { \n    name: 'User 3', \n    contacts: ['user1', 'user2', 'user4', 'user5'], \n    online: false \n  }, \n  user4: { \n    name: 'User 4', \n    contacts: ['user1', 'user2', 'user3', 'user5'], \n    online: false \n  }, \n  user5: { \n    name: 'User 5', \n    contacts: ['user1', 'user2', 'user3', 'user4'] \n  } \n}; \n\nconst authenticate = (req, res, next) => { \n  if (!sessions.includes(req.cookies.session)) { \n    res.status(403).end(); \n  } else { \n    next(); \n  } \n}; \n\nconst app = express(); \napp.use(cookieParser()); \napp.use(bodyParser.json()); \napp.use(bodyParser.urlencoded({ extended: true })); \n\napp.post('/api/login', (req, res) => { \n  const { user } = req.body; \n\n  if (users.hasOwnProperty(user)) { \n    sessions.push(user); \n    users[user].online = true; \n    res.cookie('session', user); \n    res.end(); \n  } else { \n    res.status(403).end(); \n  } \n}); \n\napp.post('/api/logout', (req, res) => { \n  const { session } = req.cookies; \n  const index = sessions.indexOf(session); \n\n  sessions.splice(index, 1); \n  users[session].online = false; \n\n  res.clearCookie('session'); \n  res.status(200).end(); \n}); \n\napp.get('/api/user/:id', authenticate, (req, res) => { \n  res.json(users[req.params.id]); \n}); \n\napp.get('/api/contacts', authenticate, (req, res) => { \n  res.json( \n    users[req.cookies.session].contacts.map(id => ({ \n      id, \n      name: users[id].name, \n      online: users[id].online \n    })) \n  ); \n}); \n\napp.post('/api/messages', authenticate, (req, res) => { \n  messages.push({ \n    from: req.cookies.session, \n    fromName: users[req.cookies.session].name, \n    to: req.body.to, \n    message: req.body.message, \n    timestamp: new Date() \n  }); \n\n  res.status(201).end(); \n}); \n\napp.get('/api/messages', authenticate, (req, res) => { \n  res.json( \n    messages \n      .map((message, id) => ({ ...message, id })) \n      .filter(message => message.to === req.cookies.session) \n  ); \n}); \n\napp.get('/api/message/:id', authenticate, (req, res) => { \n  const { params: { id } } = req; \n  res.json({ ...messages[id], id }); \n}); \n\napp.delete('/api/message/:id', authenticate, (req, res) => { \n  messages.splice(req.params.id, 1); \n  res.status(200).end(); \n}); \n\napp.listen(3001, () => \n  console.log('API server listening on port 3001!') \n);\n```", "```jsx\nFROM node:alpine\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [ \"npm\", \"start\" ]\n```", "```jsx\nnode_modules\nnpm-debug.log\n```", "```jsx\nhttp://localhost:3001\n```", "```jsx\nhttp://192.168.86.237:3001\n```", "```jsx\napp.listen(3001, () => \n  console.log('API server listening on port 3001!') \n); \n```", "```jsx\napp.listen(3001, '192.168.86.237', () => \n  console.log('API server listening on port 3001!') \n); \n```", "```jsx\ndocker build -t barely-sms-ui . \n```", "```jsx\nREPOSITORY       TAG      IMAGE ID       CREATED       SIZE\nbarely-sms-ui    latest   b1526915598d   7 hours ago   267MB\n```", "```jsx\ndocker run -p 3000:3000 barely-sms-ui\n```", "```jsx\ndocker system prune\n```", "```jsx\n    Proxy error: Could not proxy request /api/contacts from localhost:3000 to http://192.168.86.237:3001.\n    See https://nodejs.org/api/errors.html#errors_common_system_errors for more information (ECONNREFUSED).\n```", "```jsx\nFROM node:alpine\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3001\nCMD [ \"npm\", \"run\", \"api\" ]\n```", "```jsx\napp.listen(3001, () => \n  console.log('API server listening on port 3001!') \n); \n```", "```jsx\ndocker build -f Dockerfile.ui -t barely-sms-ui . \n```", "```jsx\ndocker build -f Dockerfile.api -t barely-sms-api .\n```", "```jsx\napi:\n  image: barely-sms-api\n  expose:\n    - 3001\n  ports:\n    - \"3001:3001\"\n\nui:\n  image: barely-sms-ui\n  expose:\n    - 3000\n  links:\n    - api\n  ports:\n    - \"3000:3000\"\n```", "```jsx\ndocker-compose up\n```", "```jsx\nnpm run build\n```", "```jsx\nFROM nginx:alpine \nEXPOSE 3000 \nCOPY nginx.conf /etc/nginx/nginx.conf \nCOPY build /data/www \nCMD [\"nginx\", \"-g\", \"daemon off;\"] \n```", "```jsx\nworker_processes 2; \n\nevents { \n  worker_connections 2048; \n} \n\nhttp { \n  upstream service_api { \n    server api:3001; \n  } \n\n  server { \n    location / { \n      root /data/www; \n      try_files $uri /index.html; \n    } \n\n    location /api { \n      proxy_pass http://service_api; \n    } \n  } \n} \n```", "```jsx\napi: \n  image: barely-sms-api \n  expose: \n    - 3001 \n  ports: \n    - \"3001:3001\" \n\nui: \n  image: barely-sms-ui \n  expose: \n    - 80 \n  links: \n    - api \n  ports: \n    - \"3000:80\" \n```"]