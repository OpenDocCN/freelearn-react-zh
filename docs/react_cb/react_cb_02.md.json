["```jsx\n npm install -g create-react-app\n```", "```jsx\n npm i -g create-react-app\n```", "```jsx\n create-react-app my-first-react-app\n```", "```jsx\nimport React, { Component } from 'react';\n\nclass Home extends Component {\n  render() {\n    return <h1>I'm Home Component</h1>;\n  }\n}\n\nexport default Home;\n```", "```jsx\n import React, { Component } from 'react';\n export default class Home extends Component {\n      render() {\n        return <h1>I'm Home Component</h1>;\n      }\n    }\n```", "```jsx\n import React, { Component } from 'react';\n import logo from './logo.svg';\n import './App.css';\n class App extends Component {\n      render() {\n        return (\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              <h1 className=\"App-title\">Welcome to React</h1>\n            </header>\n            <p className=\"App-intro\">\n              To get started, edit <code>src/App.js</code> \n              and save to reload.\n            </p>\n          </div>\n        );\n      }\n    }\n\n export default App;\n```", "```jsx\n import React, { Component } from 'react';\n import logo from './logo.svg';\n\n // We import our Home component here...\n import Home from './Home';\n import './App.css';\n\n class App extends Component {\n      render() {\n        return (\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              <h1 className=\"App-title\">Welcome to React</h1>\n            </header>\n            {/* Here we add our Home component to be render it */}\n            <Home />\n          </div>\n        );\n      }\n    }\n\n export default App;\n```", "```jsx\n import logo from '../shared/images/logo.svg';\n import Home from './Home/Home';\n```", "```jsx\nimport App from './components/App';\n```", "```jsx\n import React, { Component } from 'react';\n\n // We import our Home.css file here\n import './Home.css';\n\n class Home extends Component {\n      render() {\n        return (\n          <div className=\"Home\">\n            <h1>Welcome to Codejobs</h1>\n\n            <p>\n              In this recipe you will learn how to add styles to \n              components. If you want to learn more you can visit \n              our Youtube Channel at \n              <a href=\"http://youtube.com/codejobs\">Codejobs</a>.\n            </p>\n          </div>\n        );\n      }\n    }\n\n export default Home;\n```", "```jsx\n  .Home {\n      margin: 0 auto;\n      width: 960px;\n  }\n\n  .Home h1 {\n      font-size: 32px;\n      color: #333;\n  }\n\n  .Home p {\n      color: #333;\n      text-align: center;\n  }\n\n  .Home a {\n      color: #56D5FA;\n      text-decoration: none;\n  }\n\n  .Home a:hover {\n      color: #333;\n  }\n```", "```jsx\n import React, { Component } from 'react';\n\n // We import our Home.css file here\n import './Home.css';\n\n class Home extends Component {\n    render() {\n      return (\n        <div className=\"Home\">\n          <h1>Welcome to Codejobs</h1>\n          <p>\n            In this recipe you will learn how to add styles to \n            components. If you want to learn more you can visit \n            our Youtube Channel at \n            <a href=\"http://youtube.com/codejobs\">Codejobs</a>.\n          </p>\n\n          <p>\n            <button \n style={{ \n backgroundColor: 'gray', \n border: '1px solid black' \n }}            >\n              Click me!\n            </button>\n          </p>\n        </div>\n      );\n    }\n  }\n\n export default Home;\n```", "```jsx\n import React, { Component } from 'react';\n\n // We import our Home.css file here\n import './Home.css';\n\n class Home extends Component {\n    render() {\n      // Style object...\n      const buttonStyle = {\n        backgroundColor: 'gray',\n        border: '1px solid black'\n      };\n\n      return (\n        <div className=\"Home\">\n          <h1>Welcome to Codejobs</h1>\n          <p>\n            In this recipe you will learn how to add styles to \n            components. If you want to learn more you can visit \n            our Youtube Channel at \n            <a href=\"http://youtube.com/codejobs\">Codejobs</a>.\n          </p>\n          <p>\n            <button style={buttonStyle}>Click me!</button>\n          </p>\n        </div>\n      );\n    }\n  }\n\n export default Home;\n```", "```jsx\n import React, { Component } from 'react';\n import logo from '../shared/images/logo.svg';\n import Home from './Home/Home';\n import './App.css';\n\n class App extends Component {\n    render() {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n <img src={logo} className=\"App-logo\" alt=\"logo\" />\n <h1 className=\"App-title\">Welcome to React</h1>\n </header>\n\n          <Home />\n        </div>\n      );\n    }\n  }\n\n export default App;\n```", "```jsx\nnpm install prop-types\n```", "```jsx\n import React, { Component } from 'react';\n import PropTypes from 'prop-types';\n import logo from '../../images/logo.svg';\n\n class Header extends Component {\n      // Here you can define your PropTypes.\n      static propTypes = {\n        title: PropTypes.string.isRequired,\n        url: PropTypes.string\n      };\n\n      render() {\n        const { \n title = 'Welcome to React', \n url = 'http://localhost:3000' \n        } = this.props;\n\n        return (\n          <header className=\"App-header\">\n            <a href={url}>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </a>\n            <h1 className=\"App-title\">{title}</h1>\n          </header>\n        );\n      }\n    }\n\n export default Header;\n```", "```jsx\n import React, { Component } from 'react';\n import Home from './Home/Home';\n import Header from '../shared/components/layout/Header';\n import './App.css';\n\n class App extends Component {\n      render() {\n        return (\n          <div className=\"App\">\n            <Header title=\"Welcome to Codejobs\" />\n            <Home />\n          </div>\n        );\n      }\n    }\n\n export default App;\n```", "```jsx\n import React, { Component } from 'react';\n\n class Footer extends Component {\n      render() {\n        return (\n       <footer>&copy; Codejobs {(new Date()).getFullYear()}</footer>\n        );\n      }\n    }\n\n export default Footer;\n```", "```jsx\n import React, { Component } from 'react';\n import PropTypes from 'prop-types';\n\n class Content extends Component {\n    static propTypes = {\n      children: PropTypes.element.isRequired\n    };\n\n    render() {\n      const { children } = this.props;\n\n      return (\n        <main>\n          {children}\n        </main>\n      );\n    }\n  }\n\n export default Content;\n```", "```jsx\n import React, { Component } from 'react';\n import Home from './Home/Home';\n\n  // Layout Components\n import Header from '../shared/components/layout/Header';\n import Content from '../shared/components/layout/Content';\n import Footer from '../shared/components/layout/Footer';\n\n import './App.css';\n\n class App extends Component {\n    render() {\n      return (\n        <div className=\"App\">\n          <Header title=\"Welcome to Codejobs\" />\n\n          <Content>\n            <Home />\n          </Content>\n\n          <Footer />\n        </div>\n      );\n    }\n  }\n\n export default App;\n```", "```jsx\n import React, { Component } from 'react';\n import './Home.css';\n\n class Home extends Component {\n    constructor() {\n // We need to define super() at the beginning of the \n // constructor to have access to 'this'\n      super();\n\n      // Here we initialize our local state as an object\n      this.state = {\n        name: 'Carlos'\n      };\n    }\n\n    render() {\n      return (\n        <div className=\"Home\">\n          {/* Here we render our state name */}\n          <p>Hi my name is {this.state.name}</p>\n        </div>\n      );\n    }\n  }\n\n export default Home;\n```", "```jsx\n  this.state = {\n    name: 'Carlos'\n  };\n```", "```jsx\n render() {\n    setTimeout(() => {\n      this.setState({\n        name: 'Cristina' // Here we update the value of the state\n      });\n    }, 1000);\n\n    console.log('Name:', this.state.name);\n\n    return (\n      <div className=\"Home\">\n        <p>Hi my name is {this.state.name}</p>\n      </div>\n    );\n  }\n```", "```jsx\n import React, { Component } from 'react';\n import './Home.css';\n\n class Home extends Component {\n    constructor() {\n      super();\n\n      this.state = {\n        name: 'Carlos'\n      };\n    }\n\n    componentDidMount() {\n      setTimeout(() => {\n        this.setState({\n          name: 'Cristina'\n        });\n      }, 1000);\n    }\n\n    render() {\n      console.log('Name:', this.state.name);\n\n      return (\n        <div className=\"Home\">\n          <p>Hi my name is {this.state.name}</p>\n        </div>\n      );\n    }\n  }\n\n export default Home;\n```", "```jsx\n import React, { Component } from 'react';\n import PropTypes from 'prop-types';\n import logo from '../../images/logo.svg';\n\n class Header extends Component {\n    static propTypes = {\n      title: PropTypes.string.isRequired,\n      url: PropTypes.string\n    };\n\n    render() {\n      const { \n        title = 'Welcome to React', \n        url = 'http://localhost:3000' \n      } = this.props;\n\n      return (\n        <header className=\"App-header\">\n          <a href={url}>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </a>\n          <h1 className=\"App-title\">{title}</h1>\n        </header>\n      );\n    }\n  }\n\n export default Header;\n```", "```jsx\n import React from 'react';\n import PropTypes from 'prop-types';\n import logo from '../../images/logo.svg';\n\n  // We created a component with a simple arrow function.\n const Header = props => {\n    const { \n      title = 'Welcome to React', \n      url = 'http://localhost:3000' \n    } = props;\n\n    return (\n      <header className=\"App-header\">\n        <a href={url}>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </a>\n        <h1 className=\"App-title\">{title}</h1>\n      </header>\n    );\n  };\n\n  // Even with Functional Components we are able to validate our \n  // PropTypes.\n  Header.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string\n  };\n\n export default Header;\n```", "```jsx\n import React, { Component } from 'react';\n\n class Footer extends Component {\n    render() {\n      return (\n        <footer>\n          &copy; Codejobs {(new Date()).getFullYear()}\n </footer>\n      );\n    }\n  }\n\n export default Footer;\n```", "```jsx\n import React from 'react';\n\n  // Since we don't have props, we can directly return our JSX.\n const Footer = () => (\n    <footer>&copy; Codejobs {(new Date()).getFullYear()}</footer>\n  );\n\n export default Footer;\n```", "```jsx\n import React, { Component } from 'react';\n import PropTypes from 'prop-types';\n\n class Content extends Component {\n    static propTypes = {\n      children: PropTypes.element.isRequired\n    };\n\n    render() {\n      const { children } = this.props;\n\n      return (\n        <main>\n          {children}\n        </main>\n      );\n    }\n  }\n\n export default Content;\n```", "```jsx\n import React from 'react';\n import PropTypes from 'prop-types';\n\n const Content = props => { \n    const { children } = props;\n\n    return ( \n      <main>\n        {children} \n      </main>\n    ); \n  };\n\n  Content.propTypes = {\n    children: PropTypes.element.isRequired\n  };\n\n export default Content;\n```", "```jsx\nimport React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component {\n  constructor() {\n    super();\n  }\n\n  componentWillMount() {\n\n  }\n\n  render() {\n    return (\n      <div className=\"Todo\">\n        <h1>New Task:</h1>\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n```", "```jsx\nconstructor() {\n  super();\n\n  // Initial state...\n  this.state = {\n    task: '',\n    items: []\n  };\n}\n```", "```jsx\ncomponentWillMount() {\n  // Setting default tasks...\n  this.setState({\n    items: [\n      {\n        id: uuidv4(),\n        task: 'Pay the rent',\n        completed: false\n      },\n      {\n        id: uuidv4(),\n        task: 'Go to the gym',\n        completed: false\n      },\n      {\n        id: uuidv4(),\n        task: 'Do my homework',\n        completed: false\n      }\n    ]\n  });\n}\n```", "```jsx\n npm install uuid\n```", "```jsx\n import uuidv4 from 'uuid/v4';\n```", "```jsx\n render() {\n    return (\n      <div className=\"Todo\">\n        <h1>New Task:</h1>\n\n        <form onSubmit={this.handleOnSubmit}>\n          <input \n            value={this.state.task} \n            onChange={this.handleOnChange} \n          />\n        </form>\n\n        <List\n          items={this.state.items}\n          markAsCompleted={this.markAsCompleted}\n          removeTask={this.removeTask}\n        />\n      </div>\n    );\n  }\n```", "```jsx\n handleOnChange = e => {\n    const { target: { value } } = e;\n\n    // Updating our task state with the input value...\n    this.setState({\n      task: value\n    });\n  }\n```", "```jsx\n handleOnSubmit = e => {\n    // Prevent default to avoid the actual form submit...\n    e.preventDefault();\n\n // Once is submited we reset the task value and we push \n // the new task to the items array.\n    if (this.state.task.trim() !== '') {\n      this.setState({\n        task: '',\n        items: [\n          ...this.state.items,\n          {\n            id: uuidv4(),\n            task: this.state.task,\n            complete: false\n          }\n        ]\n      });\n    }\n  }\n```", "```jsx\n markAsCompleted = id => {\n    // Finding the task by id...\n    const foundTask = this.state.items.find(\n      task => task.id === id\n    );\n\n    // Updating the completed status...\n    foundTask.completed = true;\n\n    // Updating the state with the new updated task...\n    this.setState({\n      items: [\n        ...this.state.items,\n        ...foundTask\n      ]\n    });\n  }\n```", "```jsx\n removeTask = id => {\n    // Filtering the tasks by removing the specific task id...\n    const filteredTasks = this.state.items.filter(\n      task => task.id !== id\n    );\n\n    // Updating items state...\n    this.setState({\n      items: filteredTasks\n    });\n  }\n```", "```jsx\n import React, { Component } from 'react';\n import uuidv4 from 'uuid/v4';\n import List from './List';\n import './Todo.css';\n\n class Todo extends Component {\n    constructor() {\n      super();\n\n      // Initial state...\n      this.state = {\n        task: '',\n        items: []\n      };\n    }\n\n    componentWillMount() {\n      // Setting default tasks...\n      this.setState({\n        items: [\n          {\n            id: uuidv4(),\n            task: 'Pay the rent',\n            completed: false\n          },\n          {\n            id: uuidv4(),\n            task: 'Go to the gym',\n            completed: false\n          },\n          {\n            id: uuidv4(),\n            task: 'Do my homework',\n            completed: false\n          }\n        ]\n      });\n    }\n\n    handleOnChange = e => {\n      const { target: { value } } = e;\n\n      // Updating our task state with the input value...\n      this.setState({\n        task: value\n      });\n    }\n\n    handleOnSubmit = e => {\n      // Prevent default to avoid the actual form submit...\n      e.preventDefault();\n\n      // Once is submitted we reset the task value and \n      // we push the new task to the items array.\n      if (this.state.task.trim() !== '') {\n        this.setState({\n          task: '',\n          items: [\n            ...this.state.items,\n            {\n              id: uuidv4(),\n              task: this.state.task,\n              complete: false\n            }\n          ]\n        });\n      }\n    }\n\n    markAsCompleted = id => {\n      // Finding the task by id...\n      const foundTask = this.state.items.find(\n        task => task.id === id\n      );\n\n      // Updating the completed status...\n      foundTask.completed = true;\n\n      // Updating the state with the new updated task...\n      this.setState({\n        items: [\n          ...this.state.items,\n          ...foundTask\n        ]\n      });\n    }\n\n    removeTask = id => {\n      // Filtering the tasks by removing the specific task id...\n      const filteredTasks=this.state.items.filter(\n        task => task.id !== id\n      );\n\n      // Updating items state...\n      this.setState({\n        items: filteredTasks\n      });\n    }\n\n    render() {\n      return (\n        <div className=\"Todo\">\n          <h1>New Task:</h1>\n\n          <form onSubmit={this.handleOnSubmit}>\n            <input \n              value={this.state.task} \n onChange={this.handleOnChange}\n            />\n          </form>\n\n          <List\n            items={this.state.items}\n            markAsCompleted={this.markAsCompleted}\n            removeTask={this.removeTask}\n          />\n        </div>\n      );\n    }\n  }\n\n export default Todo;\n```", "```jsx\n import React from 'react';\n\n const List = props => (\n    <ul>\n      {props.items.map((item, key) => (\n        <li \n key={key} \n          className={`${item.completed ? 'completed' : 'pending'}`}                        \n        >\n          {/* \n            * If the task is completed we assign the * .completed class otherwise .pending \n            */}\n          {item.task}\n\n          <div className=\"actions\">\n            {/* \n              * Using a callback on the onClick we call our \n              * markAsCompleted function \n              */}\n            <span \n              className={item.completed ? 'hide' : 'done'} \n onClick={() => props.markAsCompleted(item.id)}\n            >\n              <i className=\"fa fa-check\"></i>\n            </span>\n\n            {/* \n              * Using a callback on the onClick we call \n              * our removeTask function \n              */}\n            <span \n              className=\"trash\" \n onClick={() => props.removeTask(item.id)}\n            >\n              <i className=\"fa fa-trash\"></i>\n            </span>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n\n export default List;\n```", "```jsx\n  <head>\n    <title>React App</title>\n    <link \n href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" \n rel=\"stylesheet\" \n    />\n  </head>\n```", "```jsx\n .Todo {\n     background-color: #f5f5f5;\n     border-radius: 4px;\n     border: 1px solid #e3e3e3;\n     box-shadow: inset 0 1px 1px rgba(0,0,0,.05);\n     margin: 50px auto;\n     min-height: 20px;\n     padding: 20px;\n     text-align: left;\n     width: 70%;\n }\n\n .Todo ul {\n     margin: 20px 0px;\n     padding: 0;\n     list-style: none;\n }\n\n .Todo ul li {\n     background-color: #fff;\n     border: 1px solid #ddd;\n     display: flex;\n     justify-content: space-between;\n     margin-bottom: -1px;\n     padding: 10px 15px;\n }\n\n .Todo ul li .hide {\n     visibility: hidden;\n }\n\n .Todo ul li.completed {\n     background-color: #dff0d8;\n }\n\n .Todo ul li .actions {\n     display: flex;\n     justify-content: space-between;\n     width: 40px;\n }\n\n .Todo ul li span {\n     cursor: pointer;\n }\n\n .Todo ul li .done {\n     color: #79c41d;\n     display: block;\n }\n\n .Todo ul li .trash {\n     color: #c41d1d;\n     display: block;\n }\n\n .Todo form input {\n     background-color: #fff;\n     border-radius: 4px;\n     border: 1px solid #ccc;\n     box-shadow: inset 0 1px 1px rgba(0,0,0,.075);\n     color: #555;\n     font-size: 14px;\n     height: 34px;\n     line-height: 34px;\n     padding: 6px 12px;\n     width: 40%;\n }\n```", "```jsx\n  import React, { Component } from 'react';\n  import Todo from './Todo/Todo';\n  import Header from '../shared/components/layout/Header';\n  import Content from '../shared/components/layout/Content';\n  import Footer from '../shared/components/layout/Footer';\n  import './App.css';\n\n  class App extends Component {\n    render() {\n      return (\n        <div className=\"App\">\n          <Header title=\"Todo List\" />\n\n          <Content>\n            <Todo />\n          </Content>\n\n          <Footer />\n        </div>\n      );\n    }\n  }\n\n export default App;\n```", "```jsx\nimport React, { Component } from 'react';\nimport './Timer.css';\n\nclass Timer extends Component {\n  constructor() {\n    super();\n  }\n\n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <div className=\"Pomodoro\">\n\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n```", "```jsx\n constructor() {\n    super();\n\n    // Initial State\n    this.state = {\n      alert: {\n        type: '',\n        message: ''\n      },\n      time: 0\n    };\n\n    // Defined times for work, short break and long break...\n    this.times = {\n      defaultTime: 1500, // 25 min\n      shortBreak: 300, // 5 min\n      longBreak: 900 // 15 min\n    };\n  }\n```", "```jsx\n  componentDidMount() {\n    // Set default time when the component mounts\n    this.setDefaultTime();\n  }\n\n  setDefaultTime = () => {\n    // Default time is 25 min\n    this.setState({\n      time: this.times.defaultTime\n    });\n  }\n```", "```jsx\n render() {\n    const { alert: { message, type }, time } = this.state;\n\n    return (\n      <div className=\"Pomodoro\">\n        <div className={`alert ${type}`}>\n          {message}\n        </div>\n\n        <div className=\"timer\">\n          {this.displayTimer(time)}\n        </div>\n\n        <div className=\"types\">\n          <button \n            className=\"start\" \n onClick={this.setTimeForWork}\n          >\n            Start Working\n          </button>\n          <button \n            className=\"short\" \n onClick={this.setTimeForShortBreak}\n          >\n            Short Break\n          </button>\n          <button \n            className=\"long\" \n onClick={this.setTimeForLongBreak}\n          >\n            Long Break\n          </button>\n        </div>\n      </div>\n    );\n  }\n```", "```jsx\n  setTimeForWork = () => {\n    this.setState({\n      alert: {\n        type: 'work',\n        message: 'Working!'\n      }\n    });\n\n    return this.setTime(this.times.defaultTime);\n  }\n\n  setTimeForShortBreak = () => {\n    this.setState({\n      alert: {\n        type: 'shortBreak',\n        message: 'Taking a Short Break!'\n      }\n    });\n\n    return this.setTime(this.times.shortBreak);\n  }\n\n  setTimeForLongBreak = () => {\n    this.setState({\n      alert: {\n        type: 'longBreak',\n        message: 'Taking a Long Break!'\n      }\n    });\n\n    return this.setTime(this.times.longBreak);\n  }\n```", "```jsx\n  setTime = newTime => {\n    this.restartInterval();\n\n    this.setState({\n      time: newTime\n    });\n  }\n```", "```jsx\n  restartInterval = () => {\n    // Clearing the interval\n    clearInterval(this.interval);\n\n // Execute countDown function every second\n    this.interval = setInterval(this.countDown, 1000);\n  }\n```", "```jsx\n  countDown = () => {\n    // If the time reach 0 then we display Buzzzz! alert.\n    if (this.state.time === 0) {\n      this.setState({\n        alert: {\n          type: 'buz',\n          message: 'Buzzzzzzzz!'\n        }\n      });\n    } else {\n      // We decrease the time second by second\n      this.setState({\n        time: this.state.time - 1\n      });\n    }\n  }\n```", "```jsx\n displayTimer(seconds) {\n    // Formatting the time into mm:ss\n    const m = Math.floor(seconds % 3600 / 60);\n    const s = Math.floor(seconds % 3600 % 60);\n\n return `${m < 10 ? '0' : ''}${m}:${s < 10 ? '0' : ''}${s}`;\n }\n```", "```jsx\n import React, { Component } from 'react';\n import './Timer.css';\n\n class Timer extends Component {\n    constructor() {\n      super();\n\n      // Initial State\n      this.state = {\n        alert: {\n          type: '',\n          message: ''\n        },\n        time: 0\n      };\n\n      // Defined times for work, short break and long break...\n      this.times = {\n        defaultTime: 1500, // 25 min\n        shortBreak: 300, // 5 min\n        longBreak: 900 // 15 min\n      };\n    }\n\n    componentDidMount() {\n      // Set default time when the component mounts\n      this.setDefaultTime();\n    }\n\n    setDefaultTime = () => {\n      // Default time is 25 min\n      this.setState({\n        time: this.times.defaultTime\n      });\n    }\n\n    setTime = newTime => {\n      this.restartInterval();\n\n      this.setState({\n        time: newTime\n      });\n    }\n\n    restartInterval = () => {\n      // Clearing the interval\n      clearInterval(this.interval);\n\n      // Execute countDown every second\n      this.interval = setInterval(this.countDown, 1000);\n    }\n\n    countDown = () => {\n      // If the time reach 0 then we display Buzzzz! alert.\n      if (this.state.time === 0) {\n        this.setState({\n          alert: {\n            type: 'buz',\n            message: 'Buzzzzzzzz!'\n          }\n        });\n      } else {\n        // We decrease the time second by second\n        this.setState({\n          time: this.state.time - 1\n        });\n      }\n    }\n\n    setTimeForWork = () => {\n      this.setState({\n        alert: {\n          type: 'work',\n          message: 'Working!'\n        }\n      });\n\n      return this.setTime(this.times.defaultTime);\n    }\n\n    setTimeForShortBreak = () => {\n      this.setState({\n        alert: {\n          type: 'shortBreak',\n          message: 'Taking a Short Break!'\n        }\n      });\n\n      return this.setTime(this.times.shortBreak);\n    }\n\n    setTimeForLongBreak = () => {\n      this.setState({\n        alert: {\n          type: 'longBreak',\n          message: 'Taking a Long Break!'\n        }\n      });\n\n      return this.setTime(this.times.longBreak);\n    }\n\n    displayTimer(seconds) {\n      // Formatting the time into mm:ss\n      const m = Math.floor(seconds % 3600 / 60);\n      const s = Math.floor(seconds % 3600 % 60);\n\n      return `${m < 10 ? '0' : ''}${m}:${s < 10 ? '0' : ''}${s}`;\n    }\n\n    render() {\n      const { alert: { message, type }, time } = this.state;\n\n      return (\n        <div className=\"Pomodoro\">\n          <div className={`alert ${type}`}>\n            {message}\n          </div>\n\n          <div className=\"timer\">\n            {this.displayTimer(time)}\n          </div>\n\n          <div className=\"types\">\n            <button \n              className=\"start\" \n onClick={this.setTimeForWork}\n            >\n              Start Working\n            </button>\n            <button \n              className=\"short\" \n onClick={this.setTimeForShortBreak}\n            >\n              Short Break\n            </button>\n            <button \n              className=\"long\" \n onClick={this.setTimeForLongBreak}\n            >\n              Long Break\n            </button>\n          </div>\n        </div>\n      );\n    }\n  }\n\n export default Timer;\n```", "```jsx\n.Pomodoro {\n    padding: 50px;\n}\n\n.Pomodoro .timer {\n    font-size: 100px;\n    font-weight: bold;\n}\n\n.Pomodoro .alert {\n    font-size: 20px;\n    padding: 50px;\n    margin-bottom: 20px;\n}\n\n.Pomodoro .alert.work {\n    background: #5da423;\n}\n\n.Pomodoro .alert.shortBreak {\n    background: #f4ad42;\n}\n\n.Pomodoro .alert.longBreak {\n    background: #2ba6cb;\n}\n\n.Pomodoro .alert.buz {\n    background: #c60f13;\n}\n\n.Pomodoro button {\n    background: #2ba6cb;\n    border: 1px solid #1e728c;\n    box-shadow: 0 1px 0 rgba(255, 255, 255, 0.5) inset;\n    color: white;\n    cursor: pointer;\n    display: inline-block;\n    font-size: 14px;\n    font-weight: bold;\n    line-height: 1;\n    margin: 50px 10px 0px 10px;\n    padding: 10px 20px 11px;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n}\n\n.Pomodoro button.start {\n    background-color: #5da423;\n    border: 1px solid #396516;\n}\n\n.Pomodoro button.short {\n    background-color: #f4ad42;\n    border: 1px solid #dd962a;\n}\n```", "```jsx\nimport React, { Component } from 'react';\nimport './Coins.css';\n\nclass Coins extends Component {\n  constructor() {\n    super();\n\n    // Initial state...\n    this.state = {\n      dollars: 0\n    };\n  }\n\n  shouldComponentUpdate(props, state) {\n    // We only update if the dollars are multiples of 10\n    return state.dollars % 10 === 0;\n  }\n\n  handleOnChange = e => {\n    this.setState({\n      dollars: Number(e.target.value || 0)\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Coins\">\n        <h1>Buy Crypto Coins!</h1>\n\n        <div className=\"question\">\n          <p>How much dollars do you have?</p>\n\n          <p>\n            <input \n              placeholder=\"0\" \n onChange={this.handleOnChange} \n              type=\"text\" \n            />\n          </p>\n        </div>\n\n        <div className=\"answer\">\n          <p>Crypto Coin price: $10</p>\n          <p>\n            You can buy <strong>{this.state.dollars / 10}</strong> \n            coins.\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Coins;\n```", "```jsx\nshouldComponentUpdate(props, state) {\n  return false;\n}\n```", "```jsx\n  .Coins {\n    background-color: #f5f5f5;\n    border-radius: 4px;\n    border: 1px solid #e3e3e3;\n    box-shadow: inset 0 1px 1px rgba(0,0,0,.05);\n    margin-bottom: 20px;\n    margin: 50px auto;\n    min-height: 20px;\n    padding: 19px;\n    text-align: left;\n    width: 70%;\n  }\n\n  .Coins input {\n    background-color: #fff;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n    box-shadow: inset 0 1px 1px rgba(0,0,0,.075);\n    color: #555;\n    font-size: 14px;\n    height: 34px;\n    line-height: 34px;\n    padding: 6px 12px;\n    width: 120px;\n  }\n```", "```jsx\n export const notes1 = [\n    {\n      title: 'Note 1',\n      content: 'Content for Note 1'\n    },\n    {\n      title: 'Note 2',\n      content: 'Content for Note 2'\n    },\n    {\n      title: 'Note 3',\n      content: 'Content for Note 3'\n    }\n  ];\n\n export const notes2 = [\n    {\n      title: 'Note 4',\n      content: 'Content for Note 4'\n    },\n    {\n      title: 'Note 5',\n      content: 'Content for Note 5'\n    },\n    {\n      title: 'Note 6',\n      content: 'Content for Note 6'\n    }\n  ];\n```", "```jsx\n import React, { Component } from 'react';\n import moment from 'moment';\n import './Notes.css';\n\n  const formatTime = 'YYYY-MM-DD HH:mm:ss';\n\n class Notes extends Component {\n    constructor() {\n      super();\n\n      // We save the first date when the data is \n      // rendered at the beginning\n      this.state = {\n        lastUpdate: moment().format(formatTime).toString()\n      }\n    }\n\n    componentWillReceiveProps(nextProps) {\n      // If the prop notes has changed...\n      if (nextProps.notes !== this.props.notes) {\n        this.setState({\n          lastUpdate: moment().format(formatTime).toString()\n        });\n      }\n    }\n    render() {\n      const { notes } = this.props;\n\n      return (\n        <div className=\"Notes\">\n          <h1>Notes:</h1>\n\n          <ul>\n            {notes.map((note, key) => (\n              <li key={key}>{note.title} - {note.content}</li>\n            ))}\n          </ul>\n\n          <p>Last Update: <strong>{this.state.lastUpdate}</strong>\n          </p>\n        </div>\n      );\n    }\n  }\n\n export default Notes;\n```", "```jsx\n npm install moment\n```", "```jsx\n import React, { Component } from 'react';\n import Notes from './Notes/Notes';\n import Header from '../shared/components/layout/Header';\n import Content from '../shared/components/layout/Content';\n import Footer from '../shared/components/layout/Footer';\n\n // This is our fake data...\n import { notes1, notes2 } from './Notes/data';\n import './App.css';\n\n class App extends Component {\n    constructor() {\n      super();\n\n      // The first time we load the notes1...\n      this.state = {\n        notes: notes1\n      };\n    }\n\n    componentDidMount() {\n      // After 10 seconds (10000 milliseconds) we concatenate our       \n      // data with notes2...\n      setTimeout(() => {\n        this.setState({\n          notes: [...this.state.notes, ...notes2]\n        });\n      }, 10000);\n    }\n\n    render() {\n      return (\n        <div className=\"App\">\n          <Header title=\"Notes\" />\n\n          <Content>\n            <Notes notes={this.state.notes} />\n          </Content>\n\n          <Footer />\n        </div>\n      );\n    }\n  }\n\n export default App;\n```", "```jsx\n  .Notes {\n    background-color: #f5f5f5;\n    border-radius: 4px;\n    border: 1px solid #e3e3e3;\n    box-shadow: inset 0 1px 1px rgba(0,0,0,.05);\n    margin-bottom: 20px;\n    margin: 50px auto;\n    min-height: 20px;\n    padding: 19px;\n    text-align: left;\n    width: 70%;\n  }\n\n .Notes ul {\n    margin: 20px 0px;\n    padding: 0;\n    list-style: none;\n  }\n\n .Notes ul li {\n    background-color: #fff;\n    border: 1px solid #ddd;\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: -1px;\n    padding: 10px 15px;\n    position: relative;\n  }\n```", "```jsx\n componentWillUnmount() {\n    console.log('Hasta la vista baby!');\n    document.body.style = 'background: black;';\n    document.getElementById('unmountMessage').style.color = 'white';\n  }\n```", "```jsx\n  <body>\n    <div id=\"root\"></div>\n\n    <div id=\"unmountMessage\">There is no mounted component!</div>\n\n    <button \n      id=\"unmount\" \n style=\"margin:0 auto;display:block;background:red;color:white;\"\n    >\n      Unmount\n    </button>\n  </body>\n```", "```jsx\n import React from 'react';\n import ReactDOM from 'react-dom';\n import './index.css';\n import App from './components/App';\n import registerServiceWorker from './registerServiceWorker';\n\n const unmountButton = document.getElementById('unmount');\n\n // Is not very common to remove a Component from the DOM,           \n  // but this will be just to understand how  \n  // componentWillUnmount works.\n function unmount() {              \n ReactDOM.unmountComponentAtNode(\n document.getElementById('root')\n    );\n\n document.getElementById('unmountMessage')\n      .style.display = 'block';\n\n unmountButton.remove();\n  }\n\n  unmountButton.addEventListener('click', unmount);\n\n  document.getElementById('unmountMessage')\n    .style.display = 'none';\n\n ReactDOM.render(<App />, document.getElementById('root'));\n  registerServiceWorker();\n```", "```jsx\n npm install c3\n```", "```jsx\n<!-- Add this on the <head> tag -->\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.10/c3.min.css\" rel=\"stylesheet\" />\n```", "```jsx\n import React, { Component } from 'react';\n import c3 from 'c3';\n import './Chart.css';\n\n class Chart extends Component {\n    componentDidMount() {\n      // When the component mounts the first time we update  \n      // the chart.\n      this.updateChart();\n    }\n\n    componentDidUpdate() {\n      // When we receive a new prop then we update the chart again.\n      this.updateChart();\n    }\n\n    updateChart() {\n      c3.generate({\n        bindto: '#chart',\n        data: {\n          columns: this.props.columns,\n          type: this.props.chartType\n        }\n      });\n    }\n\n    render() {\n      return <div id=\"chart\" />;\n    }\n  }\n\n export default Chart;\n```", "```jsx\n import React, { Component } from 'react';\n import Chart from './Chart/Chart';\n import Header from '../shared/components/layout/Header';\n import Content from '../shared/components/layout/Content';\n import Footer from '../shared/components/layout/Footer';\n import './App.css';\n\n class App extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        chartType: 'line'\n      };\n\n      this.columns = [\n        ['BTC', 3000, 6000, 10000, 15000, 13000, 11000],\n        ['ETH', 2000, 3000, 5000, 4000, 3000, 940],\n        ['XRP', 100, 200, 300, 500, 400, 300],\n      ];\n    }\n\n    setBarChart = () => {\n      this.setState({\n        chartType: 'bar'\n      });\n    }\n\n    setLineChart = () => {\n      this.setState({\n        chartType: 'line'\n      });\n    }\n\n    render() {\n      return (\n        <div className=\"App\">\n          <Header title=\"Charts\" />\n\n          <Content>\n            <Chart \n columns={this.columns} \n chartType={this.state.chartType} \n            />\n\n            <p>\n              Chart Type\n              <button onClick={this.setBarChart}>Bar</button>\n              <button onClick={this.setLineChart}>Line</button>\n            </p>\n          </Content>\n\n          <Footer />\n        </div>\n      );\n    }\n  }\n\n export default App;\n```", "```jsx\n p {\n    text-align: center;\n  }\n\n button {\n    background: #159fff;\n    border: none;\n    color: white;\n    margin-left: 1em;\n    padding: 0.5em 2em;\n    text-transform: uppercase;\n    &:hover {\n      background: darken(#159fff, 5%);\n    }\n  }\n\n #chart {\n    background: #fff;\n    width: 90%;\n    margin: 1em auto;\n  }\n```", "```jsx\n import React, { Component } from 'react';\n import './Animation.css';\n\n class Animation extends Component {\n    constructor() {\n      super();\n\n      this.state = {\n        show: false\n      };\n    }\n\n    componentWillUpdate(newProps, newState) {\n      if (!newState.show) {\n        document.getElementById('fade').style = 'opacity: 1;';\n      } else {\n        document.getElementById('fade').style = 'opacity: 0;';\n      }\n    }\n\n    toggleCollapse = () => {\n      this.setState({\n        show: !this.state.show\n      });\n    }\n\n    render() {\n      return (\n        <div className=\"Animation\">\n          <button onClick={this.toggleCollapse}>\n            {this.state.show ? 'Collapse' : 'Expand'}\n          </button>\n\n          <div \n id=\"fade\" \n className={\n              this.state.show ? 'transition show' : 'transition'\n            }\n          >\n            This text will disappear\n          </div>\n        </div>\n      );\n    }\n  }\n\n export default Animation;\n```", "```jsx\n.Animation {\nbackground: red;\n }\n.Animation .transition {\ntransition: all 3s ease 0s;\ncolor: white;\npadding-bottom: 10px;\n}\n.Animation .transition.show {\npadding-bottom: 300px;\nbackground: red;\n}\n```", "```jsx\n import React, { PureComponent } from 'react';\n```", "```jsx\n    import React, { Component } from 'react';\n    import Numbers from './Numbers/Numbers';\n\n    import Header from '../shared/components/layout/Header';\n    import Content from '../shared/components/layout/Content';\n    import Footer from '../shared/components/layout/Footer';\n    import './App.css';\n\n    class App extends Component {\n      render() {\n        return (\n          <div className=\"App\">\n            <Header title=\"Understanding Pure Components\" />\n\n            <Content>\n              <Numbers />\n            </Content>\n\n            <Footer />\n          </div>\n        );\n      }\n    }\n\n export default App;\n```", "```jsx\n    // Dependencies\n    import React, { Component } from 'react';\n\n    // Components\n    import Result from './Result';\n\n    // Styles\n    import './Numbers.css';\n\n    class Numbers extends Component {\n      state = {\n        numbers: '', // Here we will save the input value\n        results: []  // In this state we will save the results of the sums\n      };\n\n      handleNumberChange = e => {\n        const { target: { value } } = e;\n\n        // Converting the string value to array\n // \"12345\" => [\"1\", \"2\", \"3\", \"4\", \"5\"]\n        const numbers = Array.from(value);\n\n        // Summing all numbers from the array\n // [\"1\", \"2\", \"3\", \"4\", \"5\"] => 15\n        const result = numbers.reduce((a, b) => Number(a) + Number(b), 0);\n\n        // Updating the local state\n        this.setState({\n          numbers: value,\n          results: [...this.state.results, result]\n        });\n      }\n\n      render() {\n        return (\n          <div className=\"Numbers\">\n            <input\n              type=\"number\"\n              value={this.state.numbers}\n              onChange={this.handleNumberChange}\n            />\n\n            {/* Rendering the results array */}\n            <ul>\n              {this.state.results.map((result, i) => (\n <Result key={i} result={result} />\n              ))}\n            </ul>\n          </div>\n        )\n      }\n    }\n\n    export default Numbers;\n```", "```jsx\n    import React, { Component } from 'react';\n\n    class Result extends Component {\n      render() {\n        return <li>{this.props.result}</li>;\n      }\n    }\n\n    export default Result;\n```", "```jsx\n    .Numbers {\n      padding: 30px;\n    }\n\n    .Numbers input[type=number]::-webkit-inner-spin-button,\n .Numbers input[type=number]::-webkit-outer-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n\n    .Numbers input {\n      width: 500px;\n      height: 60px;\n      font-size: 20px;\n      outline: none;\n      border: 1px solid #ccc;\n      padding: 10px;\n    }\n\n    .Numbers ul {\n      margin: 0 auto;\n      padding: 0;\n      list-style: none;\n      width: 522px;\n    }\n\n    .Numbers ul li {\n      border-top: 1px solid #ccc;\n      border-left: 1px solid #ccc;\n      border-right: 1px solid #ccc;\n      padding: 10px;\n    }\n\n    .Numbers ul li:first-child {\n      border-top: none;\n    }\n\n    .Numbers ul li:last-child {\n      border-bottom: 1px solid #ccc;\n    }\n```", "```jsx\n    import React, { PureComponent } from 'react';\n\n    class Result extends PureComponent {\n      render() {\n        return <li>{this.props.result}</li>;\n      }\n    }\n\n    export default Result;\n```", "```jsx\n    import React from 'react';\n\n    const Result = props => <li>{props.result}</li>;\n\n    export default Result;\n```", "```jsx\n import React, { Component } from 'react';\n\n // Let's suppose this response is coming from a service and have     \n  // some XSS attacks in the content...\n const response = [\n    {\n      id: 1,\n      title: 'My blog post 1...',\n      content: '<p>This is <strong>HTML</strong> code</p>'\n    },\n    {\n      id: 2,\n      title: 'My blog post 2...',\n      content: `<p>Alert: <script>alert(1);</script></p>`\n    },\n    {\n      id: 3,\n      title: 'My blog post 3...',\n      content: `\n <p>\n       <img onmouseover=\"alert('This site is not secure');\" \n src=\"attack.jpg\" />\n        </p>\n      `\n    }\n  ];\n\n // Let's suppose this is our initialState of Redux \n  // which is injected to the DOM...\n const initialState = JSON.stringify(response);\n\n class Xss extends Component {\n    render() {\n      // Parsing the JSON string to an actual object...\n      const posts = JSON.parse(initialState);\n\n      // Rendering our posts...\n      return (\n        <div className=\"Xss\">\n          {posts.map((post, key) => (\n            <div key={key}>\n              <h2>{post.title}</h2>\n\n              <p>{post.content}</p>\n            </div>\n          ))}\n        </div>\n      );\n    }\n  }\n\n export default Xss;\n```", "```jsx\nimport React, { Component } from 'react';\n // Let's suppose this response is coming from a service and have       \n  // some XSS attacks in the content...\n const response = [\n    {\n      id: 1,\n      title: 'My blog post 1...',\n      content: '<p>This is <strong>HTML</strong> code</p>'\n    },\n    {\n      id: 2,\n      title: 'My blog post 2...',\n      content: `<p>Alert: <script>alert(1);</script></p>`\n    },\n    {\n      id: 3,\n      title: 'My blog post 3...',\n      content: `\n        <p>\n          <img onmouseover=\"alert('This site is not secure');\" \n          src=\"attack.jpg\" />\n        </p>\n      `\n    }\n  ];\n\n // Let's suppose this is our initialState of Redux \n  // which is injected to the DOM...\n const initialState = JSON.stringify(response);\n\n class Xss extends Component {\n    render() {\n      // Parsing the JSON string to an actual object...\n      const posts = JSON.parse(initialState);\n\n      // Rendering our posts...\n      return (\n        <div className=\"Xss\">\n          {posts.map((post, key) => (\n            <div key={key}>\n              <h2>{post.title}</h2>\n              <p><strong>Secure Code:</strong></p>\n              <p>{post.content}</p>\n              <p><strong>Insecure Code:</strong></p>\n              <p \n dangerouslySetInnerHTML={{ __html: post.content }} \n              />\n            </div>\n          ))}\n        </div>\n      );\n    }\n  }\n\n export default Xss;\n```", "```jsx\n import React, { Component } from 'react';\n\n // Let's suppose this response is coming from a service and have \n  // some XSS attacks in the content...\n const response = [\n    {\n      id: 1,\n      title: 'My blog post 1...',\n      content: '<p>This is <strong>HTML</strong> code</p>'\n    },\n    {\n      id: 2,\n      title: 'My blog post 2...',\n      content: `<p>Alert: <script>alert(1);</script></p>`\n    },\n    {\n      id: 3,\n      title: 'My blog post 3...',\n      content: `\n        <p>\n          <img onmouseover=\"alert('This site is not secure');\" \n          src=\"attack.jpg\" />\n        </p>\n      `\n    }\n  ];\n\n // Let's suppose this is our initialState of Redux \n  // which is injected to the DOM...\n const initialState = JSON.stringify(response);\n\n const removeXSSAttacks = html => {\n    const SCRIPT_REGEX = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi;\n\n    // Removing the <script> tags\n    while (SCRIPT_REGEX.test(html)) {\n      html = html.replace(SCRIPT_REGEX, '');\n    }\n\n    // Removing all events from tags...\n    html = html.replace(/ on\\w+=\"[^\"]*\"/g, '');\n\n    return {\n      __html: html\n    }\n  };\n\n class Xss extends Component {\n    render() {\n      // Parsing the JSON string to an actual object...\n      const posts = JSON.parse(initialState);\n\n      // Rendering our posts...\n      return (\n        <div className=\"Xss\">\n          {posts.map((post, key) => (\n            <div key={key}>\n              <h2>{post.title}</h2>\n              <p><strong>Secure Code:</strong></p>\n              <p>{post.content}</p>\n              <p><strong>Insecure Code:</strong></p>\n              <p \n dangerouslySetInnerHTML=\n              {removeXSSAttacks(post.content)} \n              />\n            </div>\n          ))}\n        </div>\n      );\n    }\n  }\n\n export default Xss;\n```", "```jsx\n  [\n      {\"id\":1,\"title\":\"My blog post 1...\",\"content\":\"<p>This is <strong>HTML</strong> code</p>\"},\n      {\"id\":2,\"title\":\"My blog post 2...\",\"content\":\"<p>Alert: <script>alert(1);</script></p>\"},\n      {\"id\":3,\"title\":\"My blog post 3...\",\"content\":\"<p><img onmouseover=\\\"alert('This site is not secure');\\\" src=\\\"attack.jpg\\\" /></p>\"}\n  ]    \n```", "```jsx\n **npm install serialize-javascript**\n```", "```jsx\n import serialize from 'serialize-javascript';\n\n // Let's suppose this response is coming from a service and have    \n  // some XSS attacks in the content...\n const response = [\n    {\n      id: 1,\n      title: 'My blog post 1...',\n      content: '<p>This is <strong>HTML</strong> code</p>'\n    },\n    {\n      id: 2,\n      title: 'My blog post 2...',\n      content: `<p>Alert: <script>alert(1);</script></p>`\n    },\n    {\n      id: 3,\n      title: 'My blog post 3...',\n      content: `<p><img onmouseover=\"alert('This site is not \n      secure');\" src=\"attack.jpg\" /></p>`\n    }\n  ];\n\n // Let's suppose this is our initialState of Redux which is \n  // injected to the DOM...\n const initialState = serialize(response);\n console.log(initialState);\n```", "```jsx\n  [\n      {\"id\":1,\"title\":\"My blog post 1...\",\"content\":\"\\u003Cp\\u003EThis is \\u003Cstrong\\u003EHTML\\u003C\\u002Fstrong\\u003E code\\u003C\\u002Fp\\u003E\"},\n      {\"id\":2,\"title\":\"My blog post 2...\",\"content\":\"\\u003Cp\\u003EAlert: \\u003Cscript\\u003Ealert(1);\\u003C\\u002Fscript\\u003E\\u003C\\u002Fp\\u003E\"},\n      {\"id\":3,\"title\":\"My blog post 3...\",\"content\":\"\\u003Cp\\u003E\\u003Cimg onmouseover=\\\"alert('This site is not secure');\\\" src=\\\"attack.jpg\\\" \\u002F\\u003E\\u003C\\u002Fp\\u003E\"}\n    ]\n```", "```jsx\n import React, { Component } from 'react';\n import serialize from 'serialize-javascript';\n\n // Let's suppose this response is coming from a service and have \n  // some XSS attacks in the content...\n const response = [\n    {\n      id: 1,\n      title: 'My blog post 1...',\n      content: '<p>This is <strong>HTML</strong> code</p>'\n    },\n    {\n      id: 2,\n      title: 'My blog post 2...',\n      content: `<p>Alert: <script>alert(1);</script></p>`\n    },\n    {\n      id: 3,\n      title: 'My blog post 3...',\n      content: `<p><img onmouseover=\"alert('This site is not secure');\" \n      src=\"attack.jpg\" /></p>`\n    }    \n  ];\n\n  // Let's suppose this is our initialState of Redux which is \n  // injected to the DOM...\n const secureInitialState = serialize(response);\n // const insecureInitialState = JSON.stringify(response);\n\n console.log(secureInitialState);\n\n const removeXSSAttacks = html => {\n    const SCRIPT_REGEX = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi;\n\n    // Removing the <script> tags\n    while (SCRIPT_REGEX.test(html)) {\n      html = html.replace(SCRIPT_REGEX, '');\n    }\n\n    // Removing all events from tags...\n    html = html.replace(/ on\\w+=\"[^\"]*\"/g, '');\n\n    return {\n      __html: html\n    }\n  };\n\n class Xss extends Component {\n    render() {\n      // Parsing the JSON string to an actual object...\n      const posts = JSON.parse(secureInitialState);\n\n      // Rendering our posts...\n      return (\n        <div className=\"Xss\">\n          {posts.map((post, key) => (\n            <div key={key}>\n              <h2>{post.title}</h2>\n              <p><strong>Secure Code:</strong></p>\n              <p>{post.content}</p>\n              <p><strong>Insecure Code:</strong></p>\n              <p \n dangerouslySetInnerHTML={removeXSSAttacks(post.content)} \n              />\n            </div>\n          ))}\n        </div>\n      );\n    }\n  }\n\n export default Xss;\n```"]