["```jsx\nnpm install uuid\n```", "```jsx\nimport React, { Component } from 'react';\nimport uuidv4 from 'uuid/v4';\nimport './Todo.css';\n\nclass Todo extends Component {\n  constructor() {\n    super();\n\n    // Initial state...\n    this.state = {\n      task: '',\n      items: []\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"Todo\">\n        <h1>New Task:</h1>\n\n        <form onSubmit={this.handleOnSubmit}>\n          <input value={this.state.task} />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n```", "```jsx\n// Dependencies\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\n// Components\nimport App from './components/App';\nimport About from './components/About';\nimport Coins from './components/Coins';\nimport Contact from './components/Contact';\nimport Home from './components/Home';\nimport Notes from './components/Notes';\nimport Todo from './components/Todo';\nimport Error404 from './components/Error/404';\n\nconst AppRoutes = () => (\n  <App>\n    <Switch>\n      <Route path=\"/\" component={Home} exact />\n      <Route path=\"/about\" component={About} exact />\n      <Route path=\"/coins\" component={Coins} exact />\n      <Route path=\"/contact\" component={Contact} exact />\n      <Route path=\"/notes\" component={Notes} exact />\n      <Route path=\"/notes/:noteId\" component={Notes} exact />\n      <Route path=\"/todo\" component={Todo} exact />\n      <Route component={Error404} />\n    </Switch>\n  </App>\n);\n\nexport default AppRoutes;\n```", "```jsx\nimport React, { Component } from 'react';\nimport uuidv4 from 'uuid/v4';\nimport './Todo.css';\n\nclass Todo extends Component {\n  constructor() {\n    super();\n\n    // Initial state...\n    this.state = {\n      task: '',\n      items: []\n    };\n  }\n\n  handleOnChange = e => {\n    const { target: { value } } = e;\n\n    // Updating our task state with the input value...\n    this.setState({\n      task: value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Todo\">\n        <h1>New Task:</h1>\n\n        <form onSubmit={this.handleOnSubmit}>\n          <input \n value={this.state.task} \n onChange={this.handleOnChange} \n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n```", "```jsx\nimport React, { Component } from 'react';\nimport uuidv4 from 'uuid/v4';\nimport List from './List';\nimport './Todo.css';\n\nclass Todo extends Component {\n  constructor() {\n    super();\n\n    // Initial state...\n    this.state = {\n      task: '',\n      items: []\n    };\n  }\n\n  handleOnChange = e => {\n    const { target: { value } } = e;\n\n    // Updating our task state with the input value...\n    this.setState({\n      task: value\n    });\n  }\n\n  handleOnSubmit = e => {\n    // Prevent default to avoid the actual form submit...\n    e.preventDefault();\n\n    // Once is submitted we reset the task value and we push \n    // task to the items array.\n    this.setState({\n      task: '',\n      items: [\n        ...this.state.items,\n        {\n          id: uuidv4(),\n          task: this.state.task,\n          complete: false\n        }\n      ]\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Todo\">\n        <h1>New Task:</h1>\n\n        <form onSubmit={this.handleOnSubmit}>\n          <input \n            value={this.state.task} \n onChange={this.handleOnChange} \n          />\n        </form>\n\n        <List items={this.state.items} />\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n```", "```jsx\nimport React from 'react';\n\nconst List = props => (\n  <ul>\n    {props.items.map((item, key) => (\n      <li key={key}>\n        {item.task}\n      </li>\n    ))}\n  </ul>\n);\n\nexport default List;\n```", "```jsx\n.Todo {\n    background-color: #f5f5f5;\n    border-radius: 4px;\n    border: 1px solid #e3e3e3;\n    box-shadow: inset 0 1px 1px rgba(0,0,0,.05);\n    margin-bottom: 20px;\n    margin: 50px auto;\n    min-height: 20px;\n    padding: 19px;\n    text-align: left;\n    width: 70%;\n}\n\n.Todo ul {\n    margin: 20px 0px;\n    padding: 0;\n    list-style: none;\n}\n\n.Todo ul li {\n    background-color: #fff;\n    border: 1px solid #ddd;\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: -1px;\n    padding: 10px 15px;\n    position: relative;\n}\n\n.Todo form input {\n    background-color: #fff;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n    box-shadow: inset 0 1px 1px rgba(0,0,0,.075);\n    color: #555;\n    font-size: 14px;\n    height: 34px;\n    line-height: 34px;\n    padding: 6px 12px;\n    width: 40%;\n}\n\n.Todo form button {\n    background: #2ba6cb;\n    border: 1px solid #1e728c;\n    box-shadow: 0 1px 0 rgba(255, 255, 255, 0.5) inset;\n    color: white;\n    cursor: pointer;\n    display: block;\n    font-size: 14px;\n    font-weight: bold;\n    line-height: 1;\n    margin: 20px auto;\n    padding: 10px 20px 11px;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n}\n```", "```jsx\n npm install redux-form\n```", "```jsx\n// Dependencies\nimport { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\n// Components Reducers\nimport coins from '../../reducers/coinsReducer';\n\n// Shared Reducers\nimport device from './deviceReducer';\n\nconst rootReducer = combineReducers({\n  coins,\n  device,\n  form: formReducer\n});\n\nexport default rootReducer;\n```", "```jsx\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass TodoForm extends Component {\n  // Functional component to render an input...\n  renderInput = ({ input }) => <input {...input} type=\"text\" />;\n\n // This function is useful to handle our \n  onSubmit = values => {\n    const { addTask, dispatch, reset } = this.props;\n\n    // Resetting our form, this will clear our input...\n    dispatch(reset('todo'));  \n\n    // Executing our addTask method and\n    // passing the form values.\n    addTask(values);\n  }\n\n  render() {\n    // handleSubmit is part of Redux Form \n    // to handle the onSubmit event\n    const { handleSubmit } = this.props;\n\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)}>\n        {/* Field is a Redux Form Component, we need to pass the \n         name of the input and the component we are using to \n         render it */}\n        <Field \n          name=\"task\" \n          component={this.renderInput} \n        />\n      </form>\n    )\n  }\n}\n\n// With this we named our form reducer for this specific form (todo).  \nexport default reduxForm({\n  form: 'todo'\n})(TodoForm);\n```", "```jsx\nimport React, { Component } from 'react';\nimport uuidv4 from 'uuid/v4';\nimport List from './List';\nimport TodoForm from './TodoForm';\nimport './Todo.css';\nclass Todo extends Component {\n  constructor() {\n    super();\n\n    // Initial state...\n    this.state = {\n      items: []\n    };\n  }\n\n  addTask = values => {\n    // This values are coming from our \n    // onSubmit method in our TodoForm.\n    const { task } = values;\n\n    this.setState({\n      items: [\n        ...this.state.items,\n        {\n          id: uuidv4(),\n          task,\n          complete: false\n        }\n      ]\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Todo\">\n        <h1>New Task:</h1>\n\n        <TodoForm addTask={this.addTask} />\n        <List items={this.state.items} />\n      </div>\n    );\n  }\n}\nexport default Todo;\n```", "```jsx\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport './TodoForm.css';\n\nclass TodoForm extends Component {\n  renderInput = ({ input }) => <input {...input} type=\"text\" />;\n\n  onSubmit = values => {\n    const { addTask, dispatch, reset } = this.props;\n\n    // Resetting our form...\n    dispatch(reset('todo'));\n\n    addTask(values);\n  }\n\n  renderError(field) {\n    const { meta: { submitFailed, error } } = field;\n\n    if (submitFailed && error) {\n      return (\n        <div className=\"error\">\n          {error}\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    const { handleSubmit, submitting } = this.props;\n\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)}>\n        <Field name=\"task\" component={this.renderInput} />\n        <Field name=\"task\" component={this.renderError} />\n      </form>\n    );\n  }\n}\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.task) {\n    errors.task = 'Task cannot be empty!';\n  }\n\n  return errors;\n}\n\nexport default reduxForm({\n  validate,\n  form: 'todo'\n})(TodoForm);\n```", "```jsx\n.error {\n  color: red;\n  font-size: small;\n  margin-top: 10px;\n}\n```"]