- en: Working with React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下示例：
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍
- en: Working with the latest JS features in React
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在React中使用最新的JS功能
- en: What's new in React?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React中有什么新功能？
- en: Using React on Windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上使用React
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: React is a JavaScript library (MIT License) made by Facebook to create interactive
    UIs. It's used to create dynamic and reusable components. The most powerful thing
    about React is that can be used in the client, server, mobile applications, and
    even VR applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: React是一个由Facebook制作的JavaScript库（MIT许可证），用于创建交互式UI。它用于创建动态和可重用的组件。React最强大的地方在于它可以在客户端、服务器、移动应用程序甚至VR应用程序中使用。
- en: In the modern web, we need to manipulate the DOM constantly; the problem is
    that doing this a lot may affect the performance of our application seriously.
    React uses a Virtual DOM, which means that all updates occur in memory (this is
    faster than manipulating the real DOM directly). The learning curve of React is
    short in comparison with other JavaScript frameworks such as Angular, Vue, or
    Backbone, mainly because the React code is mostly written with modern JavaScript
    (classes, arrow functions, string templates, and so on) and does not have too
    many patterns used to write code, like Dependency Injection, or a template system,
    like in Angular.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代网络中，我们需要不断地操作DOM；问题是这样做可能会严重影响我们应用程序的性能。React使用虚拟DOM，这意味着所有更新都发生在内存中（这比直接操作真实DOM更快）。与其他JavaScript框架（如Angular、Vue或Backbone）相比，React的学习曲线较短，主要是因为React代码大多是用现代JavaScript（类、箭头函数、字符串模板等）编写的，而没有太多用于编写代码的模式，比如依赖注入，或者像Angular中的模板系统。
- en: Companies such as Airbnb, Microsoft, Netflix, Disney, Dropbox, Twitter, PayPal,
    Salesforce, Tesla, and Uber are extensively using React in their projects. In
    this book, you will learn how to develop your React applications in the way they
    do, using best practices.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 像Airbnb、Microsoft、Netflix、Disney、Dropbox、Twitter、PayPal、Salesforce、Tesla和Uber这样的公司在他们的项目中广泛使用React。在这本书中，你将学习如何像他们一样使用最佳实践来开发你的React应用程序。
- en: Working with the latest JS features in React
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在React中使用最新的JS功能
- en: As I said in the introduction, React is mainly written with modern JavaScript
    (ES6, ES7, and ES8). If you want to take advantage of React, there are some modern
    JS features that you should master to get the best results for your React applications.
    In this first recipe, we are going to cover the essential JS features so you are
    ready and can start working on your first React application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在介绍中所说，React主要是用现代JavaScript（ES6、ES7和ES8）编写的。如果你想利用React，有一些现代JS功能是你应该掌握的，以获得你的React应用程序的最佳结果。在这个第一个示例中，我们将涵盖基本的JS功能，这样你就可以准备好开始在你的第一个React应用程序上工作了。
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'In this section, we will see how to use the most important JS features in React:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何在React中使用最重要的JS功能：
- en: '`let` and `const`: The new way to declare variables in JavaScript is by using
    `let` or `const`. You can use `let` to declare variables that can change their
    value but in block scope. The difference between `let` and `var` is that `let`
    is a block scoped variable that cannot be global, and with `var`, you can declare
    a global variable, for example:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`let`和`const`：在JavaScript中声明变量的新方法是使用`let`或`const`。你可以使用`let`来声明可以在块作用域中改变其值的变量。`let`和`var`的区别在于，`let`是一个块作用域变量，不能是全局的，而用`var`可以声明一个全局变量，例如：'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The best way to understand "block scope" is by declaring a `for` loop with
    `var` and `let`. First, let''s use `var` and see its behavior:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 理解“块作用域”的最好方法是通过使用`var`和`let`声明`for`循环。首先，让我们使用`var`并看看它的行为：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we write the same code, but with `let`, this will happen:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们用`let`写相同的代码，会发生这种情况：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With `const`, we can declare constants, which means the value can''t be changed
    (except for arrays and objects):'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`const`，我们可以声明常量，这意味着值不能被改变（除了数组和对象）：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we declare an array with `const`, we can manipulate the array elements (add,
    remove, or modify elements):'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们用`const`声明一个数组，我们可以操作数组元素（添加、删除或修改元素）：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Also, using objects, we can add, remove, or modify the nodes:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，使用对象，我们可以添加、删除或修改节点：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Spread operator**:The spread operator (...) splits an iterable object into
    individual values. In React, it can be used to push values into another array,
    for example when we want to add a new item to a Todo list by utilizing `setState`
    (this will be explained in the next chapter):'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展运算符：扩展运算符（...）将可迭代对象分割成单独的值。在React中，它可以用于将值推入另一个数组，例如当我们想要通过利用`setState`向待办事项列表添加新项目时（这将在下一章中解释）：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Also, the Spread operator can be used in React to spread attributes (props)
    in JSX:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，扩展运算符可以在React中用于在JSX中扩展属性（props）：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Rest parameter:** The `rest` parameter is also represented by `...`. The
    last parameter in a function prefixed with `...` is called the rest parameter.
    The rest parameter is an array that will contain the rest of the parameters of
    a function when the number of arguments exceeds the number of named parameters:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剩余参数：`rest`参数也用`...`表示。在函数中以`...`为前缀的最后一个参数称为剩余参数。剩余参数是一个数组，当参数的数量超过命名参数的数量时，它将包含函数的其余参数：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Destructuring**: The destructuring assignment feature is the most used in
    React. It is an expression that allows us to assign the values or properties of
    an iterable object to variables. Generally, with this we can convert our component
    props into variables (or constants):'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解构赋值：解构赋值是React中最常用的功能。它是一个表达式，允许我们将可迭代对象的值或属性分配给变量。通常，我们可以将组件的props转换为变量（或常量）：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Arrow functions**: ES6 provides a new way to create functions using the `=>`
    operator. These functions are called arrow functions. This new method has a shorter
    syntax, and the arrow functions are anonymous functions. In React, arrow functions
    are used as a way to bind the `this` object in our methods instead of binding
    it in the constructor:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 箭头函数：ES6提供了一种使用`=>`运算符创建函数的新方法。这些函数称为箭头函数。这种新方法有更短的语法，箭头函数是匿名函数。在React中，箭头函数用作绑定方法中的`this`对象的一种方式，而不是在构造函数中绑定它。
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Template literals**: The template literal is a new way to create a string
    using backticks (` `) instead of single quotes ('' '')   or double quotes (" ").
    React use template literals to concatenate class names or to render a string using
    a ternary operator:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板文字：模板文字是使用反引号（` `）而不是单引号（''）或双引号（""）创建字符串的新方法。React使用模板文字来连接类名或使用三元运算符呈现字符串：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**M****ap**: The `map()` method returns a new array with the results of calling
    a provided function on each element in the calling array. Map use is widespread
    in React, and is mainly used to render multiple elements inside a React component;
    for example, it can be used to render a list of tasks:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 映射：`map()`方法返回一个新数组，其中包含对调用数组中每个元素的提供函数的结果。在React中，映射的使用非常广泛，主要用于在React组件内呈现多个元素；例如，它可以用于呈现任务列表：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Object.assign()**: The `Object.assign()` method is used to copy the values
    of all enumerable own properties from one or more source objects to a target object.
    It will return the target object. This method is used mainly with Redux to create
    immutable objects and return a new state to the reducers (Redux will be covered
    in [Chapter 5](dafa4ab9-3353-4faf-8af0-f3739c6d5e78.xhtml), *Mastering Redux*):'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Object.assign()**：`Object.assign()` 方法用于将一个或多个源对象的所有可枚举自有属性的值复制到目标对象中。它将返回目标对象。这个方法主要用于
    Redux，用于创建不可变对象并将新状态返回给 reducers（Redux 将在[第5章](dafa4ab9-3353-4faf-8af0-f3739c6d5e78.xhtml)，*精通
    Redux*中介绍）：'
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Classes**: JavaScript classes, introduced in ES6, are mainly a new syntax
    for the existing prototype-based inheritance. Classes are functions and are not
    hoisted. React uses classes to create class *Components*:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**类**：JavaScript 类是 ES6 中引入的，主要是现有基于原型的继承的新语法。类是函数，不会被提升。React 使用类来创建类 *组件*：'
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Static methods**: Static methods are not called on instances of the class.
    Instead, they''re called on the class itself. These are often utility functions,
    such as functions to create or clone objects. In React, they can be used to define
    the `PropTypes` in a component:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**静态方法**：静态方法不是在类的实例上调用的。相反，它们是在类本身上调用的。这些通常是实用函数，比如用来创建或克隆对象的函数。在 React 中，它们可以用来定义组件中的
    `PropTypes`：'
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Promises**:The `Promise` object represents the eventual completion (or failure)
    of an asynchronous operation and its resulting value. We will use promises in
    React to handle requests by using axios or fetch; also, we are going to use Promises
    to implement the server-side rendering (this will be covered in [Chapter 11](884074f8-0a8a-4e3f-b9dc-b817e0f3f7c3.xhtml)*,
    Implementing Server-Side Rendering*).'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Promises**：`Promise` 对象表示异步操作的最终完成（或失败）及其结果值。我们将在 React 中使用 promises 来处理请求，例如使用
    axios 或 fetch；此外，我们将使用 Promises 来实现服务器端渲染（这将在[第11章](884074f8-0a8a-4e3f-b9dc-b817e0f3f7c3.xhtml)*，实现服务器端渲染*中介绍）。'
- en: '**async/await**: The async function declaration defines an asynchronous function,
    which returns an `AsyncFunction` object. This also can be used to perform a server
    request, for example using axios:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**async/await**：async 函数声明定义了一个异步函数，返回一个 `AsyncFunction` 对象。这也可以用来执行服务器请求，例如使用
    axios：'
- en: '[PRE16]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What's new in React?
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 有什么新功能？
- en: This paragraph was written on August 14, 2018, and the latest version of React
    was 16.4.2\. The React 16 version has a new core architecture named Fiber.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这段文字是在2018年8月14日写的，当时 React 的最新版本是16.4.2。React 16 版本有一个名为 Fiber 的新核心架构。
- en: In this recipe, we will see the most important updates in this version that
    you should be aware of to get the most out of React.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到这个版本中最重要的更新，你应该了解这些更新，以充分利用 React。
- en: How to do it...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s see the new updates:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看新的更新：
- en: '**Components can now return arrays and strings from render**: Before, React
    forced you to return an element wrapped with a <div> or any other tag; now it
    is possible to return an array or string directly:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**组件现在可以从渲染中返回数组和字符串**：以前，React 强制你返回一个包裹在 <div> 或其他标签中的元素；现在可以直接返回数组或字符串：'
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Also, React now has a new feature called **Fragment**, which also works as
    a special wrapper for elements. It can be specified with empty tags (`<></>`)
    or directly using `React.Fragment`:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，React 现在有一个名为 **Fragment** 的新功能，它也可以作为元素的特殊包装器。它可以用空标签（`<></>`）指定，也可以直接使用
    `React.Fragment`：
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Error boundaries** with from the official website:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**来自官方网站的错误边界**：'
- en: A JavaScript error in a part of the UI shouldn’t break the whole app. To solve
    this problem for React users, React 16 introduces a new concept of an "error boundary". Error
    boundaries are React components that catch JavaScript errors anywhere in their
    child component tree, log those errors, and display a fallback UI instead of the
    component tree that crashed. Error boundaries catch errors during rendering, in
    lifecycle methods, and in constructors of the whole tree below them. A class component
    becomes an error boundary if it defines a new lifecycle method called componentDidCatch(error,
    info).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: UI的一部分出现JavaScript错误不应该导致整个应用程序崩溃。为了解决React用户的这个问题，React 16引入了一个新概念，即"错误边界"。错误边界是React组件，它们捕获其子组件树中任何位置的JavaScript错误，记录这些错误，并显示一个替代UI，而不是崩溃的组件树。错误边界在渲染期间、生命周期方法中以及它们下面整个树的构造函数中捕获错误。如果一个类组件定义了一个名为componentDidCatch(error,
    info)的新生命周期方法，它就成为了一个错误边界。
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Better server-side rendering** with from the official site:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更好的服务器端渲染** 来自官方网站：'
- en: '*React 16 includes a completely rewritten server renderer. It''s really fast.
    It supports streaming, so you can start sending bytes to the client faster. And
    thanks to a new packaging strategy that compiles away process.env checks (Believe
    it or not, reading process.env in Node is really slow!), you no longer need to
    bundle React to get good server-rendering performance.*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: React 16包括一个完全重写的服务器渲染器。它非常快。它支持流式传输，因此您可以更快地开始向客户端发送字节。并且由于一种新的打包策略，它会编译掉process.env检查（信不信由你，在Node中读取process.env真的很慢！），您不再需要捆绑React以获得良好的服务器渲染性能。
- en: '****Reduced file size**** with from the official site:**** "****Despite all
    these additions, React 16 is actually smaller compared to 15.6.1.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从官方网站上减小文件大小："尽管增加了所有这些内容，React 16实际上比15.6.1要小。
- en: react is 5.3 kb (2.2 kb gzipped), down from 20.7 kb (6.9 kb gzipped)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: react为5.3 kb（经过gzip压缩为2.2 kb），而之前为20.7 kb（经过gzip压缩为6.9 kb）
- en: react-dom is 103.7 kb (32.6 kb gzipped), down from 141 kb (42.9 kb gzipped)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: react-dom为103.7 kb（经过gzip压缩为32.6 kb），而之前为141 kb（经过gzip压缩为42.9 kb）
- en: react + react-dom is 109 kb (34.8 kb gzipped), down from 161.7 kb (49.8 kb gzipped)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: react + react-dom为109 kb（经过gzip压缩为34.8 kb），而之前为161.7 kb（经过gzip压缩为49.8 kb）
- en: That amounts to a combined 32% size decrease compared to the previous version
    (30% post-gzip)."
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一个版本相比，这相当于总体减小了32%的大小（gzip后减小了30%）。
- en: 'If you want to check the latest updates on React, you can visit the official
    React blog: [https://reactjs.org/blog](https://reactjs.org/blog).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看React的最新更新，可以访问官方React博客：[https://reactjs.org/blog](https://reactjs.org/blog)。
- en: Using React on Windows
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上使用React
- en: I'm not a big fan of Windows for development since it's kind of problematic
    to configure sometimes. I will always prefer Linux or Mac, but I'm aware that
    a lot of people who are reading this book will use Windows. In this recipe, I'll
    show you the most common problems you may have when you try to follow the recipes
    in this book using Windows.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我不是Windows的开发大粉丝，因为有时配置起来有点问题。我总是更喜欢Linux或Mac，但我知道很多读者会使用Windows。在这个配方中，我将向您展示在使用Windows时可能遇到的最常见问题。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''ll now see the most common problems using Windows for development:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看到在开发中使用Windows时最常见的问题：
- en: '**Terminal**: The first problem you will face is to use the Windows terminal
    (CMD) because it does not support Unix commands (like Linux or Mac). The solution
    is to install a Unix Terminal; the most highly recommended is to use the **Git
    Bash** Terminal, which is included with **Git** when you install it ([https://git-scm.com](https://git-scm.com)),
    and the second option is to install **Cygwin**, which is a Linux Terminal in Windows
    ([https://www.cygwin.com](https://www.cygwin.com)).'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**：你将面临的第一个问题是使用Windows终端（CMD），因为它不支持Unix命令（如Linux或Mac）。解决方法是安装一个Unix终端；最受推荐的是使用**Git
    Bash**终端，它在你安装**Git**时就包含在内（[https://git-scm.com](https://git-scm.com)），第二个选择是安装**Cygwin**，它是Windows中的Linux终端（[https://www.cygwin.com](https://www.cygwin.com)）。'
- en: '**Environment variables**: Another common problem using Windows is to set environment
    variables. Generally, when we write npm scripts, we set environment variables
    such as `NODE_ENV=production` or `BABEL_ENV=development`, but to set those variables
    in Windows, you use the `SET` command, which means you need to do `SET NODE_ENV=production`
    or `SET BABEL_ENV=development`. The problem with this is that if you are working
    with other people that use Linux or Mac, they will have problems with the `SET`
    command, and probably you will need to ignore this file and modify it only for
    your local environment. This can be tedious. The solution to this problem is to
    use a package called cross-env; you can install it by doing `npm install cross-env`,
    and this will work in Windows, Mac, and Linux:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**环境变量**：在Windows上使用的另一个常见问题是设置环境变量。通常，当我们编写npm脚本时，我们设置诸如`NODE_ENV=production`或`BABEL_ENV=development`之类的环境变量，但在Windows中设置这些变量时，你需要使用`SET`命令，这意味着你需要执行`SET
    NODE_ENV=production`或`SET BABEL_ENV=development`。这样做的问题是，如果你与其他使用Linux或Mac的人一起工作，他们将会遇到`SET`命令的问题，而且你可能需要忽略这个文件，只为你的本地环境修改它。这可能会很繁琐。解决这个问题的方法是使用一个叫做cross-env的包；你可以通过执行`npm
    install cross-env`来安装它，这将在Windows、Mac和Linux上都能工作：'
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Case-sensitive files or directories**: In reality, this also happens on Linux,
    but sometimes it is very difficult to identify this problem, for example, if you
    create a component in the `components/**home**/Home.jsx` directory but in your
    code you''re trying to import the component like this:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**区分大小写的文件或目录**：实际上，在Linux上也会发生这种情况，但有时很难识别这个问题，例如，如果你在`components/**home**/Home.jsx`目录中创建一个组件，但在你的代码中尝试像这样导入组件：'
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Normally, this won't cause any problems on Mac but can generate an error on
    Linux or Windows because we are trying to import a file with a different name
    (because it's case-sensitive) into the directory.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这在Mac上不会引起任何问题，但可能会在Linux或Windows上生成错误，因为我们试图将一个文件以不同的名称（因为它是区分大小写的）导入到目录中。
- en: '**Paths**: Windows uses a backslash (`\`) to define a path, while in Mac or
    Linux they use a forward slash (`/`). This is problematic because sometimes we
    need to define a path (in Node.js mostly) and we need to do something like this:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**路径**：Windows使用反斜杠（`\`）来定义路径，而在Mac或Linux中使用正斜杠（`/`）。这是有问题的，因为有时我们需要定义一个路径（在Node.js中大多数情况下），我们需要做类似这样的事情：'
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
