["```jsx\n mkdir contacts-graphql\n cd contacts-graphql\n npm init --yes\n npm install express graphql express-graphql babel-preset-env\n npm install -g babel-cli\n```", "```jsx\n  {\n    \"presets\": [\"env\"]\n  }\n```", "```jsx\n  import express from 'express';\n\n  const app = express();\n\n  app.listen(3000, () => console.log('Running server on port 3000'));\n```", "```jsx\n    import express from 'express';\n    import expressGraphQL from 'express-graphql';\n    import { buildSchema } from 'graphql';\n\n    const app = express();\n\n    app.listen(3000, () => console.log('Running server on port 3000'));\n```", "```jsx\n  // Dependencies\n  import express from 'express';\n  import expressGraphQL from 'express-graphql';\n  import { buildSchema } from 'graphql';\n\n  // Express Application\n  const app = express();\n\n  // Creating our GraphQL Schema\n  const schema = buildSchema(`\n    type Query {\n      message: String\n    }\n  `);\n\n  // Root has the methods we will execute to get the data\n  const root = {\n    message: () => 'First message'\n  };\n\n  // GraphQL middleware\n  app.use('/graphql', expressGraphQL({\n    schema,\n    rootValue: root,\n    graphiql: true // This enables the GraphQL browser's IDE\n  }));\n\n  // Running our server\n  app.listen(3000, () => console.log('Running server on port 3000'));\n```", "```jsx\n    {\n      \"contacts\": [\n        {\n          \"id\": 1,\n          \"name\": \"Carlos Santana\",\n          \"phone\": \"281-323-4146\",\n          \"email\": \"carlos@milkzoft.com\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Cristina\",\n          \"phone\": \"331-251-5673\",\n          \"email\": \"cristina@gmail.com\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"John Smith\",\n          \"phone\": \"415-307-4382\",\n          \"email\": \"john.smith@gmail.com\"\n        },\n        {\n          \"id\": 4,\n          \"name\": \"John Brown\",\n          \"phone\": \"281-323-4146\",\n          \"email\": \"john.brown@gmail.com\"\n        }\n      ]\n    }\n```", "```jsx\n      // Dependencies\n      import express from 'express';\n      import expressGraphQL from 'express-graphql';\n      import { buildSchema } from 'graphql';\n\n      // Contacts Data\n      import { contacts } from './data/contacts';\n\n      // Express Application\n      const app = express();\n\n      // Creating our GraphQL Schema\n      const schema = buildSchema(`\n        type Query {\n          contact(id: Int!): Contact\n          contacts(name: String): [Contact]\n        }\n\n        type Contact {\n          id: Int\n          name: String\n          phone: String\n          email: String\n        }\n      `);\n\n      // Data methods\n      const methods = {\n        getContact: args => {\n          const { id } = args;\n\n          return contacts.filter(contact => contact.id === id)[0];\n        },\n        getContacts: args => {\n          const { name = false } = args;\n\n          // If we don't get a name we return all contacts\n          if (!name) {\n            return contacts;\n          }\n\n          // Returning contacts with same name...\n          return contacts.filter(\n            contact => contact.name.includes(name)\n          );\n        }\n      };\n\n      // Root has the methods we will execute to get the data\n      const root = {\n        contact: methods.getContact,\n        contacts: methods.getContacts\n      };\n\n      // GraphQL middleware\n      app.use('/graphql', expressGraphQL({\n        schema,\n        rootValue: root,\n        graphiql: true // This enables the GraphQL GUI\n      }));\n\n      // Runnign our server\n      app.listen(3000, () => console.log('Running server on port 3000'));\n```", "```jsx\n  // Dependencies\n  import express from 'express';\n  import expressGraphQL from 'express-graphql';\n  import { buildSchema } from 'graphql';\n\n  // Contacts Data\n  import { contacts } from './data/contacts';\n\n  // Express Application\n  const app = express();\n\n  // Creating our GraphQL Schema\n  const schema = buildSchema(`\n    type Query {\n      contact(id: Int!): Contact\n      contacts(name: String): [Contact]\n    }\n\n    type Mutation {\n      updateContact(\n id: Int!, \n name: String!, \n phone: String!, \n email: String!\n      ): Contact\n    }\n\n    type Contact {\n      id: Int\n      name: String\n      phone: String\n      email: String\n    }\n  `);\n\n  // Data methods\n  const methods = {\n    getContact: args => {\n      const { id } = args;\n\n      return contacts.filter(contact => contact.id === id)[0];\n    },\n    getContacts: args => {\n      const { name = false } = args;\n\n      // If we don't get a name we return all contacts\n      if (!name) {\n        return contacts;\n      }\n\n      // Returning contacts with same name...\n      return contacts.filter(contact => contact.name.includes(name));\n    },\n    updateContact: ({ id, name, phone, email }) => {\n      contacts.forEach(contact => {\n        if (contact.id === id) {\n          // Updating only the fields that has new values...\n          contact.name = name || contact.name;\n          contact.phone = phone || contact.phone;\n          contact.email = email || contact.email;\n        }\n      });\n\n      return contacts.filter(contact => contact.id === id)[0];\n    }\n  };\n\n  // Root has the methods we will execute to get the data\n  const root = {\n    contact: methods.getContact,\n    contacts: methods.getContacts,\n    updateContact: methods.updateContact\n  };\n\n  // GraphQL middleware\n  app.use('/graphql', expressGraphQL({\n    schema,\n    rootValue: root,\n    graphiql: true // This enables the GraphQL GUI\n  }));\n\n  // Running our server\n  app.listen(3000, () => console.log('Running server on port 3000'));\n```", "```jsx\n create-react-app apollo\n```", "```jsx\n npm run eject\n```", "```jsx\n npm install apollo-boost graphql graphql-tag moment mongoose react-\n  apollo\n```", "```jsx\n npm install --save-dev babel-preset-react babel-preset-stage-0\n```", "```jsx\n \"resolutions\": {\n   \"graphql\": \"0.13.2\"\n }\n```", "```jsx\n \"babel\": {\n   \"presets\": [\n     \"react-app\"\n   ]\n }\n```", "```jsx\n {\n   \"presets\": [\"react\", \"stage-0\"]\n }\n```", "```jsx\n cd apollo\n mkdir backend\n cd backend\n npm init -y\n mkdir src\n```", "```jsx\n npm install cors express express-graphql graphql graphql-tools \n      mongoose nodemon babel-preset-es2015\n\n npm install -g babel-cli\n```", "```jsx\n      \"scripts\": {\n        \"start\": \"nodemon src/app.js --watch src --exec babel-node \n        --presets es2015\"\n      }\n```", "```jsx\n  // Dependencies\n  import express from 'express';\n  import expressGraphQL from 'express-graphql';\n  import cors from 'cors';\n  import graphQLExpress from 'express-graphql';\n  import { makeExecutableSchema } from 'graphql-tools';\n\n  // Query\n  import { typeDefs } from './types/Query';\n  import { resolvers } from './types/Resolvers';\n\n  // Defining our schema with our typeDefs and resolvers\n  const schema = makeExecutableSchema({\n    typeDefs,\n    resolvers\n  });\n\n  // Intializing our express app\n  const app = express();\n\n  // Using cors\n  app.use(cors());\n\n  // GraphQL Middleware\n  app.use('/graphiql', graphQLExpress({\n    schema,\n    pretty: true,\n    graphiql: true\n  }));\n\n  // Listening port 5000\n  app.listen(5000);\n\n  console.log('Server started on port 5000');\n```", "```jsx\n export const typeDefs = [`\n    # Scalar Types (custom type)\n    scalar DateTime\n\n    # Tweet Type (should match our Mongo schema)\n    type Tweet {\n      _id: String\n      tweet: String\n      author: String\n      createdAt: DateTime\n    }\n\n    # Query\n    type Query {\n      # This query will return a single Tweet\n      getTweet(_id: String): Tweet \n\n      # This query will return an array of Tweets\n      getTweets: [Tweet]\n    }\n\n    # Mutations\n    type Mutation {\n      # DateTime is a custom Type\n      createTweet(\n        tweet: String,\n        author: String,\n        createdAt: DateTime \n      ): Tweet\n\n      # Mutation to delete a Tweet\n      deleteTweet(_id: String): Tweet\n\n      # Mutation to update a Tweet (! means mandatory).\n      updateTweet(\n        _id: String!,\n        tweet: String!\n      ): Tweet\n    }\n\n    # Schema\n    schema {\n      query: Query\n      mutation: Mutation\n    }\n  `];\n```", "```jsx\n // Dependencies\n import { GraphQLScalarType } from 'graphql';\n // TweetModel (Mongo Schema)\n import TweetModel from '../model/Tweet';\n // Resolvers\n export const resolvers = {\n    Query: {\n      // Receives an _id and returns a single Tweet.\n      getTweet: _id => TweetModel.getTweet(_id),\n      // Gets an array of Tweets.\n      getTweets: () => TweetModel.getTweets()\n    },\n    Mutation: {\n      // Creating a Tweet passing the args (Tweet object), the _ is    \n      // the root normally is undefined\n      createTweet: (_, args) => TweetModel.createTweet(args),\n      // Deleting a Tweet passing in the args the _id of the Tweet \n      // we want to remove\n      deleteTweet: (_, args) => TweetModel.deleteTweet(args),\n      // Updating a Tweet passing the new values of the Tweet we \n      // want to update\n      updateTweet: (_, args) => TweetModel.updateTweet(args)\n    },\n    // This DateTime will return the current date.\n    DateTime: new GraphQLScalarType({\n      name: 'DateTime',\n      description: 'Date custom scalar type',\n      parseValue: () => new Date(),\n      serialize: value => value,\n      parseLiteral: ast => ast.value\n    })\n  };\n```", "```jsx\n  // Dependencies\n  import mongoose from 'mongoose';\n\n  // Connecting to Mongo\n  mongoose.Promise = global.Promise;\n  mongoose.connect('mongodb://localhost:27017/twitter', {\n    useNewUrlParser: true\n  });\n\n  // Getting Mongoose Schema\n  const Schema = mongoose.Schema;\n\n  // Defining our Tweet schema\n  const tweetSchema = new Schema({\n    tweet: String,\n    author: String,\n    createdAt: Date,\n  });\n\n  // Creating our Model\n  const TweetModel = mongoose.model('Tweet', tweetSchema);\n\n  export default {\n    // Getting all the tweets and sorting descending\n    getTweets: () => TweetModel.find().sort({ _id: -1 }),\n    // Getting a single Tweet using the _id\n    getTweet: _id => TweetModel.findOne({ _id }),\n    // Saving a Tweet\n    createTweet: args => TweetModel(args).save(),\n    // Removing a Tweet by _id\n    deleteTweet: args => {\n      const { _id } = args;\n\n      TweetModel.remove({ _id }, error => {\n        if (error) {\n          console.log('Error Removing:', error);\n        }\n      });\n\n      // Even when we removed a tweet we need to return the object \n      // of the tweet\n      return args;\n    },\n    // Updating a Tweet (just the field tweet will be updated)\n    updateTweet: args => {\n      const { _id, tweet } = args;\n\n      // Searching by _id and then update tweet field.\n      TweetModel.update({ _id }, {\n        $set: {\n          tweet\n        }\n      },\n      { upsert: true }, error => {\n        if (error) {\n          console.log('Error Updating:', error);\n        }\n      });\n\n      // This is hard coded for now\n      args.author = 'codejobs';\n      args.createdAt = new Date();\n\n      // Returning the updated Tweet \n      return args;\n    }\n  };\n```", "```jsx\n  \"resolutions\": {\n     \"graphql\": \"0.13.2\"\n   }\n```", "```jsx\n     npm install -g npm\n```", "```jsx\n    npm cache clean --force\n```", "```jsx\n    // Dependencies\n    import React from 'react';\n    import { render } from 'react-dom';\n    import ApolloClient from 'apollo-boost';\n    import { ApolloProvider } from 'react-apollo';\n\n    // Components\n    import App from './App';\n\n    // Styles\n    import './index.css';\n\n    // Apollo Client\n    const client = new ApolloClient({\n      uri: 'http://localhost:5000/graphiql' // Backend endpoint\n    });\n\n    // Wrapping the App with ApolloProvider\n    const AppContainer = () => (\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    );\n\n    // Root\n    const root = document.getElementById('root');\n\n    // Rendering the AppContainer\n    render(<AppContainer />, root);\n```", "```jsx\n  // Dependencies\n  import React, { Component } from 'react';\n\n  // Components\n  import Tweets from './components/Tweets';\n\n  // Styles\n  import './App.css';\n\n  class App extends Component {\n    render() {\n      return (\n        <div className=\"App\">\n          <Tweets />\n        </div>\n      );\n    }\n  }\n\n export default App;\n```", "```jsx\n // Dependencies\n import gql from 'graphql-tag';\n\n // getTweets query\n export const QUERY_GET_TWEETS = gql`\n    query getTweets {\n      getTweets {\n        _id\n        tweet\n        author\n        createdAt\n      }\n    }\n  `;\n```", "```jsx\n  // Dependencies\n  import gql from 'graphql-tag';\n\n  // createTweet Mutation\n  export const MUTATION_CREATE_TWEET = gql`\n    mutation createTweet(\n      $tweet: String,\n      $author: String,\n      $createdAt: DateTime\n    ) {\n      createTweet(\n        tweet: $tweet,\n        author: $author,\n        createdAt: $createdAt\n      ) {\n        _id\n        tweet\n        author\n        createdAt\n      }\n    }\n  `;\n\n  // deleteTweet Mutation\n  export const MUTATION_DELETE_TWEET = gql`\n    # ! means mandatory\n    mutation deleteTweet($_id: String!) {\n      deleteTweet(\n        _id: $_id\n      ) {\n        _id\n        tweet\n        author\n        createdAt\n      }\n    }\n  `;\n\n  // updateTweet Mutation\n export const MUTATION_UPDATE_TWEET = gql`\n    mutation updateTweet(\n      $_id: String!,\n      $tweet: String!\n    ) {\n      updateTweet(\n        _id: $_id,\n        tweet: $tweet\n      ) {\n        _id\n        tweet\n        author\n        createdAt\n      }\n    }\n  `;\n```", "```jsx\n  // Dependencies\n  import React, { Component } from 'react';\n  import { Query as ApolloQuery } from 'react-apollo';\n\n  class Query extends Component {\n    render() {\n      const {\n        query,\n        render: Component\n      } = this.props;\n\n      return (\n        <ApolloQuery query={query}>\n          {({ loading, error, data }) => {\n            if (loading) {\n              return <p>Loading...</p>;\n            }\n\n            if (error) {\n              return <p>Query Error: {error}</p>\n            }\n\n            return <Component data={data || false} />;\n          }}\n        </ApolloQuery>\n      );\n    }\n  }\n\n  export default Query;\n```", "```jsx\n  // Dependencies\n  import React, { Component } from 'react';\n  import { Mutation as ApolloMutation } from 'react-apollo';\n\n  class Mutation extends Component {\n    render() {\n      const {\n        mutation,\n        query,\n        children,\n        onCompleted\n      } = this.props;\n\n      return (\n        <ApolloMutation\n          mutation={mutation}\n          update={(cache, { data }) => {\n            // Getting the mutation and query name\n            const { \n              definitions: [{ name: { value: mutationName } }] \n            } = mutation;\n            const { \n              definitions: [{ name: { value: queryName } }] \n            } = query;\n\n            // Getting cachedData from previous query\n            const cachedData = cache.readQuery({ query });\n\n            // Getting current data (result of the mutation)\n            const current = data[mutationName];\n\n            // Initializing our updatedData\n            let updatedData = [];\n\n            // Lower case mutation name\n            const mutationNameLC = mutationName.toLowerCase();\n\n            // If the mutation includes \"delete\" or \"remove\"\n            if (mutationNameLC.includes('delete') \n              || mutationNameLC.includes('remove')) {\n              // Removing the current tweet by filtering \n              // from the cachedData\n              updatedData = cachedData[queryName].filter(\n                row => row._id !== current._id\n              );\n            } else if (mutationNameLC.includes('create') \n || mutationNameLC.includes('add')) {\n              // Create or add action injects the current \n              // value in the array\n              updatedData = [current, ...cachedData[queryName]];\n            } else if (mutationNameLC.includes('edit') \n || mutationNameLC.includes('update')) {\n              // Edit or update actions will replace the old values \n              // with the new ones\n              const index = cachedData[queryName].findIndex(\n                row => row._id === current._id\n              );\n              cachedData[queryName][index] = current;\n              updatedData = cachedData[queryName];\n            }\n\n            // Updating our data to refresh the tweets list\n            cache.writeQuery({\n              query,\n              data: {\n                [queryName]: updatedData\n              }\n            });\n          }}\n          onCompleted={onCompleted} \n        >\n          {/** \n            * Here we render the content of the \n            * component (children) \n            */}\n          {children}\n        </ApolloMutation>\n      );\n    }\n  }\n\n  export default Mutation;\n```", "```jsx\n // Dependencies\n  import React, { Component } from 'react';\n\n  // Components\n  import Tweet from './Tweet';\n  import CreateTweet from './CreateTweet';\n  import Query from '../shared/components/Query';\n\n  // Queries\n  import { QUERY_GET_TWEETS } from '../graphql/queries';\n\n  // Styles\n  import './Tweets.css';\n\n  class Tweets extends Component {\n    render() {\n      return (\n        <div className=\"tweets\">\n          {/* Rendering CreateTweet component */}\n          <CreateTweet />\n\n          {/** \n            * Executing QUERY_GET_TWEETS query and render our Tweet \n            * component \n            */}\n          <Query query={QUERY_GET_TWEETS} render={Tweet} />\n        </div>\n      );\n    }\n  }\n\n  export default Tweets;\n```", "```jsx\n    // Dependencies\n    import React, { Component } from 'react';\n    import moment from 'moment';\n\n    // Components\n    import Mutation from '../shared/components/Mutation';\n\n // Queries\n    import { \n      MUTATION_DELETE_TWEET, \n      MUTATION_UPDATE_TWEET \n    } from '../graphql/mutations';\n\n    import { QUERY_GET_TWEETS } from '../graphql/queries';\n\n    // Images (those are temporary images and exists on the repository)\n    import TwitterLogo from './twitter.svg';\n    import CodejobsAvatar from './codejobs.png';\n\n    class Tweet extends Component {\n      // Local State\n      state = {\n        currentTweet: false\n      };\n\n      // Enabling a textarea for edit a Tweet\n      handleEditTweet = _id => {\n        const { data: { getTweets: tweets } } = this.props;\n\n        const selectedTweet = tweets.find(tweet => tweet._id === _id);\n\n        const currentTweet = {\n          [_id]: selectedTweet.tweet\n        };\n\n        this.setState({\n          currentTweet\n        });\n      }\n\n      // Handle Change for textarea\n      handleChange = (value, _id) => {\n        const { currentTweet } = this.state;\n\n        currentTweet[_id] = value;\n\n        this.setState({\n          currentTweet\n        });\n      }\n\n      // Delete tweet mutation\n      handleDeleteTweet = (mutation, _id) => {\n        // Sending variables\n        mutation({\n          variables: {\n            _id\n          }\n        });\n      }\n\n      // Update tweet mutation\n      handleUpdateTweet = (mutation, value, _id) => {\n        // Sending variables\n        mutation({\n          variables: {\n            _id,\n            tweet: value\n          }\n        });\n      }\n\n      render() {\n        // Getting the data from getTweets query\n        const { data: { getTweets: tweets } } = this.props;\n\n        // currentTweet state\n        const { currentTweet } = this.state;\n\n        // Mapping the tweets\n        return tweets.map(({\n          _id,\n          tweet,\n          author,\n          createdAt\n        }) => (\n          <div className=\"tweet\" key={`tweet-${_id}`}>\n            <div className=\"author\">\n              {/* Rendering our Twitter Avatar (this is hardcoded) */}\n              <img src={CodejobsAvatar} alt=\"Codejobs\" />\n\n              {/* Rendering the author */}\n              <strong>{author}</strong>\n            </div>\n\n            <div className=\"content\">\n              <div className=\"twitter-logo\">\n                {/* Rendering the Twitter Logo */}\n                <img src={TwitterLogo} alt=\"Twitter\" />\n              </div>\n\n              {/**\n * If there is no currentTweet being edited then  \n                * we display the tweet as a text otherwise we \n                * render a textarea with the tweet to be edited\n */}\n              {!currentTweet[_id]\n                ? tweet\n                : (\n                  <Mutation\n                    mutation={MUTATION_UPDATE_TWEET}\n                    query={QUERY_GET_TWEETS}\n                    onCompleted={() => {\n                      // Once the mutation is completed we clear our \n                      // currentTweet state\n                      this.setState({\n                        currentTweet: false\n                      });\n                    }}\n                  >\n                    {(updateTweet) => (\n                      <textarea\n                        autoFocus\n                        className=\"editTextarea\"\n                        value={currentTweet[_id]}\n                        onChange={(e) => {\n                          this.handleChange(\n                            e.target.value, \n _id                          ); \n                        }}\n                        onBlur={(e) => {\n                          this.handleUpdateTweet(\n updateTweet, \n                            e.target.value, \n _id                          ); \n                        }}\n                      />\n                    )}\n                  </Mutation>\n                )\n              }\n            </div>\n\n            <div className=\"date\">\n              {/* Rendering the createdAt date (MMM DD, YYYY) */}\n              {moment(createdAt).format('MMM DD, YYYY')}\n            </div>\n\n            {/* Rendering edit icon */}\n            <div \n              className=\"edit\" \n onClick={() => { \n                this.handleEditTweet(_id); \n              }}\n            >\n              <i className=\"fa fa-pencil\" aria-hidden=\"true\" />\n            </div>\n\n            {/* Mutation for delete a tweet */}\n            <Mutation\n              mutation={MUTATION_DELETE_TWEET}\n              query={QUERY_GET_TWEETS}\n            >\n              {(deleteTweet) => (\n                <div \n                  className=\"delete\" \n onClick={() => {\n                    this.handleDeleteTweet(deleteTweet, _id); \n                  }}\n                >\n                  <i className=\"fa fa-trash\" aria-hidden=\"true\" />\n                </div>\n              )}\n            </Mutation>\n          </div>\n        ));\n      }\n    }\n\n export default Tweet;\n```", "```jsx\n  // Dependencies\n  import React, { Component } from 'react';\n  import Mutation from '../shared/components/Mutation';\n\n  // Images (this image is on the repository)\n  import CodejobsAvatar from './codejobs.png';\n\n  // Queries\n  import { MUTATION_CREATE_TWEET } from '../graphql/mutations';\n  import { QUERY_GET_TWEETS } from '../graphql/queries';\n\n  class CreateTweet extends Component {\n    // Local state\n    state = {\n      tweet: ''\n    };\n\n    // Handle change for textarea\n    handleChange = e => {\n      const { target: { value } } = e;\n\n      this.setState({\n        tweet: value\n      })\n    }\n\n    // Executing createTweet mutation to add a new Tweet\n    handleSubmit = mutation => {\n      const tweet = this.state.tweet;\n      const author = '@codejobs';\n      const createdAt = new Date();\n\n      mutation({\n        variables: {\n          tweet,\n          author,\n          createdAt\n        }\n      });\n    }\n\n    render() {\n      return (\n        <Mutation\n          mutation={MUTATION_CREATE_TWEET}\n          query={QUERY_GET_TWEETS}\n          onCompleted={() => {\n            // On mutation completed we clean the tweet state \n            this.setState({\n              tweet: ''\n            });\n          }}\n        >\n          {(createTweet) => (\n            <div className=\"createTweet\">\n              <header>\n                Write a new Tweet\n              </header>\n\n              <section>\n                <img src={CodejobsAvatar} alt=\"Codejobs\" />\n\n                <textarea\n                  placeholder=\"Write your tweet here...\"\n                  value={this.state.tweet}\n                  onChange={this.handleChange}\n                />\n              </section>\n\n              <div className=\"publish\">\n                <button\n                  onClick={() => {\n                    this.handleSubmit(createTweet);\n                  }}\n                >\n                  Tweet it!\n                </button>\n              </div>\n            </div>\n          )}\n        </Mutation>\n      );\n    }\n  }\n\n export default CreateTweet;\n```", "```jsx\n  .tweet {\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    height: 200px;\n    width: 80%;\n    position: relative;\n  }\n\n  .author {\n    text-align: left;\n    margin-bottom: 20px;\n  }\n\n  .author strong {\n    position: absolute;\n    top: 40px;\n    margin-left: 10px;\n  }\n\n  .author img {\n    width: 50px;\n    border-radius: 50%;\n  }\n\n  .content {\n    text-align: left;\n    color: #222;\n    text-align: justify;\n    line-height: 25px;\n  }\n\n  .date {\n    color: #aaa;\n    font-size: 12px;\n    position: absolute;\n    bottom: 10px;\n  }\n\n  .twitter-logo img {\n    position: absolute;\n    right: 10px;\n    top: 10px;\n    width: 20px;\n  }\n\n  .createTweet {\n    margin: 20px auto;\n    background-color: #F5F5F5;\n    width: 86%;\n    height: 225px;\n    border: 1px solid #AAA;\n  }\n\n  .createTweet header {\n    color: white;\n    font-weight: bold;\n    background-color: #2AA3EF;\n    border-bottom: 1px solid #AAA;\n    padding: 20px;\n  }\n\n  .createTweet section {\n    padding: 20px;\n    display: flex;\n  }\n\n  .createTweet section img {\n    border-radius: 50%;\n    margin: 10px;\n    height: 50px;\n  }\n\n  textarea {\n    border: 1px solid #ddd;\n    height: 80px;\n    width: 100%;\n  }\n\n  .publish {\n    margin-bottom: 20px;\n  }\n\n  .publish button {\n    cursor: pointer;\n    border: 1px solid #2AA3EF;\n    background-color: #2AA3EF;\n    padding: 10px 20px;\n    color: white;\n    border-radius: 20px;\n    float: right;\n    margin-right: 20px;\n  }\n\n  .delete {\n    position: absolute;\n    right: 10px;\n    bottom: 10px;\n    cursor: pointer;\n  }\n\n  .edit {\n    position: absolute;\n    right: 30px;\n    bottom: 10px;\n    cursor: pointer;\n  }\n```"]