- en: Mastering Webpack 4.x
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack 4.x的掌握
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下配方：
- en: Webpack 4 Zero Configuration
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack 4 零配置
- en: Adding React to Webpack 4
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将React添加到Webpack 4
- en: Adding Webpack Dev Server and Sass, Stylus, or LessCSS with React
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Webpack Dev Server和Sass、Stylus或LessCSS与React
- en: Webpack 4 Optimization – Splitting Bundles
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack 4 优化 - 拆分捆绑包
- en: Implementing Node.js with React/Redux and Webpack 4
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React/Redux和Webpack 4实现Node.js
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'From the Webpack 4 official website ([https://webpack.js.org](https://webpack.js.org)):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Webpack 4官方网站([https://webpack.js.org](https://webpack.js.org))：
- en: '"Webpack is a *static module bundler* for modern JavaScript applications. When
    webpack processes your application, it internally builds a dependency graph which
    maps every module your project needs and generates one or more bundles. Since
    version 4, webpack does not require a configuration file to bundle your project.
    Nevertheless, it is incredibly configurable to fit your needs better."'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '"Webpack是现代JavaScript应用程序的*静态模块打包工具*。当webpack处理你的应用程序时，它在内部构建一个依赖图，映射了你的项目需要的每个模块，并生成一个或多个捆绑包。自从4版本以来，webpack不需要配置文件来捆绑你的项目。尽管如此，它可以非常灵活地配置以更好地满足你的需求。"'
- en: Webpack 4 Zero Configuration
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack 4 零配置
- en: Webpack 4 does not need a configuration file by default. In the older versions,
    you had to have a configuration file. If you need to customize Webpack 4 to your
    project's needs, you can still create a configuration file, which will be much
    easier to configure.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 4 默认情况下不需要配置文件。在旧版本中，你必须有一个配置文件。如果你需要根据项目的需要自定义Webpack 4，你仍然可以创建一个配置文件，这将更容易配置。
- en: Getting Ready
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'For this recipe, you need to create a new folder and install the following
    packages:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你需要创建一个新的文件夹并安装以下包：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In your Webpack folder, you need to create a `package.json` file, and for this,
    you can use the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Webpack文件夹中，你需要创建一个`package.json`文件，为此，你可以使用以下命令：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s now start the configuration:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始配置：
- en: 'Open `package.json`, and add a new `build` script:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`package.json`，并添加一个新的`build`脚本：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: File: package.json
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：package.json
- en: 'Run the build script in your terminal:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端中运行构建脚本：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will see this error:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到这个错误：
- en: '![](assets/721d0b30-cbc6-4a67-9104-b072e2f2ec3e.png)*The error you get in the
    terminal will look like this***:** *ERROR in Entry module not found: Error: Can''t
    resolver''./src'' in ''/Users/czantany/projects/React16Cookbook/Chapter9/Recipe1/webpack-zero-configuration''*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '！[](assets/721d0b30-cbc6-4a67-9104-b072e2f2ec3e.png)*终端中出现的错误看起来像这样***:** *ERROR
    in Entry module not found: Error: Can''t resolver''./src'' in ''/Users/czantany/projects/React16Cookbook/Chapter9/Recipe1/webpack-zero-configuration''*'
- en: 'Because we''re now in Webpack 4, by the default, the main entry point is `src/index.js`.
    Let''s create this file to be able to build our first bundle:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我们现在使用的是Webpack 4，默认情况下，主入口点是`src/index.js`。让我们创建这个文件，以便能够构建我们的第一个捆绑包：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'File: src/index.js'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/index.js
- en: 'If you re-run the build script, you will see that Webpack creates a new bundle
    file called `main.js` io the `dist` folder (again, this is by default):'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你重新运行构建脚本，你会看到Webpack创建了一个名为`main.js`的新捆绑文件，放在`dist`文件夹中（同样，默认情况下）：
- en: '![](assets/48a422a9-37fd-4fca-9fa9-800767e1dff8.png)The warning let us know
    that we can choose the mode between production or development'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/48a422a9-37fd-4fca-9fa9-800767e1dff8.png)警告让我们知道我们可以在生产或开发模式之间进行选择
- en: 'There is a Warning message in the terminal: the `mode` option has not been
    set, webpack will fallback to production for this value. Set `mode` to `development`
    or `production` to enable defaults for each environment. You can also set it to
    `none` to disable any default behavior. You can learn more at https://webpack.js.org/concepts/mode/*.*
    By default, production mode is enabled, and that''s why our bundle (`dist/main.js`)
    is minified and obfuscated, similar to the following:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 终端中有一个警告消息：未设置`mode`选项，webpack将回退到生产模式。将`mode`设置为`development`或`production`以启用每个环境的默认值。您还可以将其设置为`none`以禁用任何默认行为。您可以在https://webpack.js.org/concepts/mode/了解更多信息。默认情况下，生产模式已启用，这就是为什么我们的捆绑包（`dist/main.js`）被缩小和混淆的原因，类似于以下内容：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'File: dist/main.js'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：dist/main.js
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Webpack 4 has two modes: production and development. In Webpack 3, you needed
    to create a config file for each one; now you can get the same result just with
    a single line. Let''s add a script to get our application to start using the development
    mode:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 4有两种模式：生产模式和开发模式。在Webpack 3中，您需要为每种模式创建一个配置文件；现在您只需一行代码就可以得到相同的结果。让我们添加一个脚本，以便使用开发模式启动我们的应用程序：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'File: package.json'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：package.json
- en: 'If you run the `npm run build-development` command, now you will see that the
    bundle is not compressed at all:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行`npm run build-development`命令，现在您会发现捆绑包根本没有被压缩：
- en: '![](assets/de001572-73d6-41c9-b4f0-78e20e0a0dd2.png)File: dist/main.js'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/de001572-73d6-41c9-b4f0-78e20e0a0dd2.png)文件：dist/main.js'
- en: As you can see, by default, Webpack 4 using production minifies the code and
    performs some optimizations for this environment, in Webpack 3, this configuration
    had to be done manually in a config file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，默认情况下，Webpack 4在生产模式下会对代码进行缩小，并对该环境进行一些优化，在Webpack 3中，这个配置必须在配置文件中手动完成。
- en: There's more...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you want to implement Babel with Webpack 4 to transpile ES6 code, you need
    to use `babel-loader`, and you may need to install the following packages:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要在Webpack 4中使用Babel来转译ES6代码，您需要使用`babel-loader`，并且可能需要安装以下软件包：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a .babelrc file at the root of your project and then add this code:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录创建一个.babelrc文件，然后添加以下代码：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'File: .babelrc'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：.babelrc
- en: 'Add our `babel-loader` using a `webpack.config.js` file:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`webpack.config.js`文件添加我们的`babel-loader`：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'File: webpack.config.js'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack.config.js
- en: 'Create a file called `src/numbers.js` and import it to our `src/index.js` to
    test our `babel-loader`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`src/numbers.js`的文件，并将其导入到我们的`src/index.js`中以测试我们的`babel-loader`：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'File: src/numbers.js'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/numbers.js
- en: 'In our `index.js` file, do the following:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`index.js`文件中，做以下操作：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'File: src/index.js'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/index.js
- en: 'Run the `npm run build` script, and if everything works fine, you should get
    this result:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`npm run build`脚本，如果一切正常，您应该会得到这个结果：
- en: '![](assets/b0d0c4c8-5054-4234-b47d-bfcda3ec7467.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b0d0c4c8-5054-4234-b47d-bfcda3ec7467.png)'
- en: 'It is also possible to use `babel-loader` directly in the terminal without
    a config file, for this, we need to use the `--module-bind` flag to bind an extension
    to a loader:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还可以直接在终端中使用`babel-loader`，而无需配置文件，为此，我们需要使用`--module-bind`标志将扩展名绑定到加载器：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There are more flags to bind modules (if you want to learn more about Webpack
    CLI, you can visit the official site at [https://webpack.js.org/api/cli/](https://webpack.js.org/api/cli/)):'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有更多绑定模块的标志（如果您想了解更多关于Webpack CLI的信息，可以访问官方网站[https://webpack.js.org/api/cli/](https://webpack.js.org/api/cli/)）：
- en: '`--module-bind-post`: Bind an extension to a post-loader'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--module-bind-post`：将扩展名绑定到后置加载器'
- en: '`--module-bind-pre`: Bind an extension to a pre-loader'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--module-bind-pre`：将扩展名绑定到前置加载器'
- en: Adding React to Webpack 4
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Webpack 4添加React
- en: In this recipe, we are going to implement React with Webpack 4, but we will
    use a plugin called `html-webpack-plugin` to generate our `index.html` file to
    render our React application. In the next recipe, we will integrate Node.js to
    have more flexibility in our server-side before rendering the HTML code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将实现React与Webpack 4，但我们将使用一个名为`html-webpack-plugin`的插件来生成我们的`index.html`文件以渲染我们的React应用程序。在下一个配方中，我们将集成Node.js，以在渲染HTML代码之前在服务器端具有更多的灵活性。
- en: Getting Ready
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will need to install the following packages:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，你需要安装以下包：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Here are the steps to add React to Webpack 4:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将React添加到Webpack 4的步骤：
- en: 'Using the same code of the last recipe, create a `.babelrc` file and add some
    presets:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上一个配方的相同代码，创建一个`.babelrc`文件并添加一些预设：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'File: .babelrc'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：.babelrc
- en: 'In our `webpack.config.js` file, where we have our `babel-loader`, we need
    to add the `.jsx` extension beside the `.js` extension to be able to apply `babel-loader`
    to our React components:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`webpack.config.js`文件中，我们需要在我们的`babel-loader`中添加`.jsx`扩展名，以便能够将`babel-loader`应用到我们的React组件：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'File: webpack.config.js'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack.config.js
- en: 'After we added the `.jsx` extension to our `babel-loader`, we need to create
    the `src/components/App.jsx` file:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们将`.jsx`扩展名添加到我们的`babel-loader`之后，我们需要创建`src/components/App.jsx`文件：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'File: src/components/App.jsx'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/App.jsx
- en: 'Creating the `Home` component:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Home`组件：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'File: src/components/Home/index.jsx'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Home/index.jsx
- en: 'In our main `index.js` file, we need to include `react`, the `render` method
    from `react-dom` and our `App` component, and render the application:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的主`index.js`文件中，我们需要包括`react`，从`react-dom`中的`render`方法和我们的`App`组件，并渲染应用程序：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'File: src/index.jsx'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/index.jsx
- en: 'You may wonder where the `#root` div is since we have not created `index.html`
    yet. In this specific recipe, we are going to use the `html-webpack-plugin` plugin
    to process our HTML:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能会想知道`#root` div在哪里，因为我们还没有创建`index.html`。在这个特定的配方中，我们将使用`html-webpack-plugin`插件来处理我们的HTML：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open your `webpack.config.js` file. We need to add our `html-webpack-plugin`
    and create a plugins node in our config file:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的`webpack.config.js`文件。我们需要添加我们的`html-webpack-plugin`并在配置文件中创建一个插件节点：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'File: webpack.config.js'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack.config.js
- en: 'Create the `index.html` template at your `src` directory level:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`src`目录级别创建`index.html`模板：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'File: src/index.html'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/index.html
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As you can see, we can inject variables from the plugin using the `htmlWebpackPlugin.options` object
    between the `<%=` and `%>` delimiters. Now it''s time to test our application,
    try to run the `npm run build` command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们可以使用`htmlWebpackPlugin.options`对象从插件中注入变量，在`<%=`和`%>`分隔符之间。现在是测试我们应用程序的时候了，尝试运行`npm
    run build`命令：
- en: '![](assets/71380885-1299-430e-91f7-a4594befd844.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/71380885-1299-430e-91f7-a4594befd844.png)'
- en: '**Big red error:** Can''t resolve `./src` directory, but what does it mean?
    Do you remember how we used the `.jsx` extension in our files? Even we added that
    extension to our `babel-loader` rule so why is not working? It''s because we had
    to add a resolve node to our configuration and specified the file extensions we
    want to support. Otherwise, we have to use only the `.js` extension:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**大红色错误：** 无法解析`./src`目录，但这是什么意思？你还记得我们如何在文件中使用`.jsx`扩展名吗？即使我们将该扩展名添加到了我们的`babel-loader`规则中，为什么它还是不起作用呢？这是因为我们必须在配置中添加一个解析节点，并指定我们想要支持的文件扩展名。否则，我们只能使用`.js`扩展名：'
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'File: webpack.config.js'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack.config.js
- en: 'If you run `npm run build` again, now it should work:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你再次运行`npm run build`，现在应该可以工作了：
- en: '![](assets/afbdb184-f9c5-416b-a57d-79ef55b6632d.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/afbdb184-f9c5-416b-a57d-79ef55b6632d.png)'
- en: 'After you run that command, you will see that you have two files in your dist
    directory: `index.html` and `main.js`. If you open your `index.html` file with
    Chrome, you should see the following result:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 运行该命令后，您会看到在dist目录中有两个文件：`index.html`和`main.js`。如果您用Chrome打开您的`index.html`文件，您应该会看到以下结果：
- en: '![](assets/a72a556c-7626-41f3-9359-6d330141d5ea.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a72a556c-7626-41f3-9359-6d330141d5ea.png)'
- en: We can build our bundle, but it is 100% static. In the next recipe, we are going
    to add Webpack Dev Server to run our React Application in an actual server and
    refresh the server every time we make a change.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以构建我们的捆绑包，但它是100%静态的。在下一个教程中，我们将添加Webpack Dev Server来在实际服务器上运行我们的React应用程序，并在每次更改时刷新服务器。
- en: There's more...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'I prefer to use ES6 code in all my projects, even in the configurations, and
    I like to break my Webpack configuration into separate files for better organization
    and an easier understanding of the configurations. If you have worked with Webpack
    before, you are aware that a `webpack.config.js` file can be huge and very hard
    to maintain, so let me explain how to do that:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢在所有项目中使用ES6代码，甚至在配置中，我喜欢将我的Webpack配置分成单独的文件，以便更好地组织和更容易理解配置。如果你以前使用过Webpack，你就知道`webpack.config.js`文件可能会很大，很难维护，所以让我解释一下如何做到这一点：
- en: Rename the `webpack.config.js` file to `webpack.config.babel.js`. When you add
    the `.babel` suffix on a `.js` file, this will be handled by Babel automatically.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`webpack.config.js`文件重命名为`webpack.config.babel.js`。当在`.js`文件上添加`.babel`后缀时，这将由Babel自动处理。
- en: 'Let''s migrate our current ES5 code to ES6:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将当前的ES5代码迁移到ES6：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'File: webpack.config.babel.js'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack.config.babel.js
- en: Create a folder called `webpack` and inside other called `configuration`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`webpack`的文件夹，里面再创建一个名为`configuration`的文件夹。
- en: 'Create an individual file for each node of our Webpack configuration and export
    it. For example, let''s start by creating a file for our node module, so you should
    call `module.js`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们Webpack配置的每个节点创建一个单独的文件并导出它。例如，让我们从为我们的节点模块创建一个文件开始，所以你应该叫`module.js`：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'File: webpack/configuration/module.js'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/module.js
- en: 'Let''s create a file for our plugins (`plugins.js`):'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为我们的插件创建一个文件（`plugins.js`）：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'File: webpack/configuration/plugins.js'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/plugins.js
- en: It's very useful to add our array of plugins into a constant because then we
    can add more plugins based on the environment (development or production), so
    now you can add plugins in a conditional way (using push).
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的插件数组添加到一个常量中非常有用，因为这样我们可以根据环境（开发或生产）添加更多的插件，所以现在你可以以条件方式添加插件（使用push）。
- en: 'The last node is resolve:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个节点是resolve：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'File: webpack/configuration/resolve.js'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/resolve.js
- en: 'We can import our files directly, but I prefer to use an `index.js` file and
    export all of them. This way, we only import the objects we need into our `webpack.config.babel.js`
    file:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以直接导入我们的文件，但我更喜欢使用一个`index.js`文件并导出所有文件。这样，我们只需要在我们的`webpack.config.babel.js`文件中导入我们需要的对象：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'File: webpack/configuration/index.js'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/index.js
- en: 'Our `webpack.config.babel.js` will be very clean:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`webpack.config.babel.js`将非常干净：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'File: webpack.config.babel.js'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack.config.babel.js
- en: Adding Webpack Dev Server and Sass, Stylus, or LessCSS with React
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Webpack Dev Server和React添加Sass、Stylus或LessCSS
- en: In the last recipe, we added React to Webpack 4, and we split our Webpack configuration,
    but in the end, we were just able to build our bundle and run the application
    as a static page. In this recipe, we are going to add the Webpack Dev Server to
    run our React Application in an actual server and restart the server every time
    we make a change. Also, we are going to implement CSS preprocessors such as Sass,
    Stylus, and LessCSS.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个教程中，我们将React添加到了Webpack 4中，并且拆分了我们的Webpack配置，但最终，我们只能构建我们的捆绑包并将应用程序作为静态页面运行。在这个教程中，我们将添加Webpack
    Dev Server来在实际服务器上运行我们的React应用程序，并在每次更改时重新启动服务器。此外，我们将实现诸如Sass、Stylus和LessCSS之类的CSS预处理器。
- en: Getting Ready
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will need to install the following packages:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您需要安装以下软件包：
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you want to use Sass in your project, you have to install:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要在项目中使用Sass，必须安装：
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If you prefer Stylus, you''ll need the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢Stylus，您将需要以下内容：
- en: '[PRE31]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Or if you like LessCSS, install this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您喜欢LessCSS，请安装：
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How to do it...
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will first add the Webpack Dev Server:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先添加Webpack Dev Server：
- en: 'Once you installed the `webpack-dev-server` dependency, we need to add a new
    script to start the application in our `package.json`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装了`webpack-dev-server`依赖项后，我们需要在`package.json`中添加一个新的脚本来启动应用程序：
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'File: package.json'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：package.json
- en: 'As you know, the `--mode` flag specifies the mode we want (the default is production),
    and the `--open` flag opens the browser when we start the application. Now you
    can run the application with the `npm start` command:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所知，`--mode`标志指定我们想要的模式（默认为生产模式），`--open`标志在启动应用程序时打开浏览器。现在您可以使用`npm start`命令运行应用程序：
- en: '![](assets/f0f811ad-3f7d-43c8-a88b-9c7a0e370673.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f0f811ad-3f7d-43c8-a88b-9c7a0e370673.png)'
- en: 'Your application was opened using port 8080, which is the default port of `webpack-dev-server`.
    If you want to change it, you can use the `--port` flag to specify which port
    you want to use:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的应用程序是使用端口8080打开的，这是`webpack-dev-server`的默认端口。如果要更改它，可以使用`--port`标志指定要使用的端口：
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The cool thing about `webpack-dev-server` is that if you update any component,
    you will see the change reflected instantaneously. For example, let''s modify
    our `Home` component:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`webpack-dev-server`的很酷的一点是，如果更新任何组件，您将立即看到更改的反映。例如，让我们修改我们的`Home`组件：'
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'File: src/components/Home/index.jsx'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Home/index.jsx
- en: 'You can see the reflected change in the same page without refreshing the page
    manually:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在同一页上看到反映的更改，而无需手动刷新页面：
- en: '![](assets/8e5b2601-19ec-412d-8c22-5b4c4fa8a0f2.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8e5b2601-19ec-412d-8c22-5b4c4fa8a0f2.png)'
- en: 'Let''s add Sass, Stylus, or LessCSS to our project to have some styles in the
    application. You have to edit the file located at `webpack/configuration/module.js`
    and add `style-loader`, `css-loader`, and the loader we want for sass (`sass-loader`),
    stylus (`stylus-loader`), or less (`less-loader`):'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们向我们的项目添加Sass、Stylus或LessCSS，以在应用程序中添加一些样式。您必须编辑位于`webpack/configuration/module.js`的文件，并添加`style-loader`、`css-loader`以及我们想要的sass（`sass-loader`）、stylus（`stylus-loader`）或less（`less-loader`）加载器：
- en: '[PRE36]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'File: webpack/configuration/module.js'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/module.js
- en: 'Using Sass, we can create the Home.scss file to add some styles:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Sass，我们可以创建Home.scss文件来添加一些样式：
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'File: src/components/Home/Home.scss'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Home/Home.scss
- en: 'In the Home component, you can import the Sass file like this:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Home组件中，您可以像这样导入Sass文件：
- en: '[PRE38]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'File: src/component/Home/index.jsx'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/component/Home/index.jsx
- en: 'Each import line is for a different preprocessor. Use the line you want and
    remove the others. Sass generates this style:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个导入行都是为不同的预处理器。使用您想要的行并删除其他行。Sass生成这种样式：
- en: '![](assets/c996de0f-aebd-49cb-9905-7fe3b43fb541.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c996de0f-aebd-49cb-9905-7fe3b43fb541.png)'
- en: 'If you want to use Stylus, create the `Home.styl` file and change the configuration
    in the `module.js` file from the Webpack configuration:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想使用Stylus，在`Home.styl`文件中创建并在Webpack配置的`module.js`文件中更改配置：
- en: '[PRE39]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'File: src/components/Home/Home.styl![](assets/1c2d56f6-71dc-4fcd-bfe4-cb7981aa1d40.png)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Home/Home.styl![](assets/1c2d56f6-71dc-4fcd-bfe4-cb7981aa1d40.png)
- en: 'If you want to use Less CSS, do the necessary changes on the Webpack configuration
    and then use this file:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想使用Less CSS，在Webpack配置中做必要的更改，然后使用这个文件：
- en: '[PRE40]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'File: src/components/Home/Home.less![](assets/039be0c1-f666-4167-a687-08c6d919cf96.png)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Home/Home.less![](assets/039be0c1-f666-4167-a687-08c6d919cf96.png)
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you are curious, you probably already tried to see how it''s rendering the
    stylesheet and how is the class name in our HTML. If you inspect the site, you
    will see something like this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你好奇的话，你可能已经尝试过查看样式表是如何渲染的，以及我们的HTML中的类名是什么。如果你检查网站，你会看到类似这样的东西：
- en: '![](assets/8161cb69-8dfd-4ed0-9f5c-65802f84caf3.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8161cb69-8dfd-4ed0-9f5c-65802f84caf3.png)'
- en: 'Dynamically is being inject a `<link>` tag with a temporal URL that contains
    our compiled css, and then our class name is "Home_Home_2kP..." this is because
    our configuration: `localIdentName: ''[name]_[local]_[hash:base64]''`. With this,
    we are creating isolated styles, which means that we will never affect any other
    class if we use the same name.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '动态地注入了一个包含我们编译后的css的临时URL的`<link>`标签，然后我们的类名是"Home_Home_2kP..."，这是因为我们的配置：`localIdentName:
    ''[name]_[local]_[hash:base64]''`。通过这样做，我们创建了隔离的样式，这意味着如果我们使用相同的名称，我们永远不会影响任何其他类。'
- en: There's more...
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Let''s implement CSS preprocessors such as Sass, Stylus, and LessCSS:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现CSS预处理器，比如Sass、Stylus和LessCSS：
- en: 'If you want to extract your CSS code to a `style.css` file and compress the
    code for production mode, you can use the `extract-text-webpack-plugin` package:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想将你的CSS代码提取到一个`style.css`文件中，并在生产模式下压缩代码，你可以使用`extract-text-webpack-plugin`包：
- en: '[PRE41]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We need to add this to our Webpack plugins:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将这个添加到我们的Webpack插件中：
- en: '[PRE42]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'File: webpack/configuration/plugins.js'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/plugins.js
- en: 'As you can see, I''m pushing to the plugins array only if is production. This
    means we need to create a new script into our package.json to specify when we
    are going to use production:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你所看到的，我只有在生产模式下才会向插件数组中添加内容。这意味着我们需要在package.json中创建一个新的脚本来指定何时使用生产模式：
- en: '[PRE43]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Run `npm run start-production` in your terminal, and you will be able to start
    in production mode.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端中运行`npm run start-production`，你就可以以生产模式启动了。
- en: 'You will probably get some errors because we also need to add a rule for the
    Extract Text Plugin to our module node:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能会遇到一些错误，因为我们还需要向我们的模块节点添加一个Extract Text插件的规则：
- en: '[PRE44]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We are using Extract Text Plugin just for production. For any other environment,
    we use `style-loader`, `css-loader`, and `sass-loader` directly as before. That''s
    why I love splitting the Webpack configuration into smaller files, as you can
    see, some of the files can be huge, so this helps us to be more organized. If
    you start the production mode with `npm run start-production`, you will see this
    CSS:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只在生产环境中使用Extract Text插件。对于任何其他环境，我们像以前一样直接使用`style-loader`、`css-loader`和`sass-loader`。这就是为什么我喜欢将Webpack配置拆分成更小的文件，正如你所看到的，有些文件可能会很大，所以这有助于我们更有条理。如果你用`npm
    run start-production`启动生产模式，你会看到这个CSS：
- en: '![](assets/74a0055c-2388-4f99-9465-7f59989ce7cb.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/74a0055c-2388-4f99-9465-7f59989ce7cb.png)'
- en: Webpack 4 Optimization – Splitting Bundles
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack 4 优化 - 拆分捆绑包
- en: Webpack 4 already has some optimizations presets for production mode, such as
    the code minification (before it was made with UglifyJS), but there are more things
    we can use to improve the performance of our application. In this recipe, we are
    going to learn how to split bundles (vendors and application bundles), add source
    maps, and implement the *BundleAnalyzerPlugin*.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 4已经为生产模式提供了一些优化预设，比如代码最小化（之前是使用UglifyJS实现的），但是我们还可以使用更多的东西来提高我们应用的性能。在这个教程中，我们将学习如何拆分捆绑包（供应商和应用程序捆绑包），添加源映射，并实现*BundleAnalyzerPlugin*。
- en: Getting Ready
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'For this recipe, we need to install the following packages:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们需要安装以下包：
- en: '[PRE45]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How to do it...
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s add a source map to our Webpack:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给我们的Webpack添加一个源映射：
- en: 'Create the `webpack/configuration/devtool.js` file:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`webpack/configuration/devtool.js`文件：
- en: '[PRE46]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'File: webpack/configuration/devtool.js'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/devtool.js
- en: 'Split the bundles (using the new "optimization" Webpack node): one for our
    `/node_modules/` which will be the biggest one, and one for our React Application.
    You need to create the `optimization.js` file and add this code:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拆分捆绑包（使用新的“优化”Webpack节点）：一个用于我们的`/node_modules/`，它将是最大的，一个用于我们的React应用程序。你需要创建`optimization.js`文件并添加这段代码：
- en: '[PRE47]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'File: webpack/configuration/optimization.js'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/optimization.js
- en: 'Remember that you need to add those new files into `index.js`:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住，你需要把这些新文件添加到`index.js`中：
- en: '[PRE48]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'File: webpack/configuration/index.js'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/index.js
- en: 'Add the nodes to `webpack.config.babel.js`:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将节点添加到`webpack.config.babel.js`中：
- en: '[PRE49]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'File: webpack.config.babel.js'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack.config.babel.js
- en: How it works...
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s test this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一下：
- en: 'Just run the application with `npm start`. If you look at the HTML, you will
    see that it''s automatically being injected into the `vendor.js` and `main.js` bundles:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '只需用`npm start`运行应用程序。如果你查看HTML，你会发现它自动注入到`vendor.js`和`main.js`捆绑包中： '
- en: '![](assets/d92a9b8e-50e9-4084-81e7-7dc87d4f1229.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d92a9b8e-50e9-4084-81e7-7dc87d4f1229.png)'
- en: 'If you look at the Network tab, you can see the size of the files:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你查看网络选项卡，你可以看到文件的大小：
- en: '![](assets/060c76da-55b9-4c94-acc6-4affbbddf8e6.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/060c76da-55b9-4c94-acc6-4affbbddf8e6.png)'
- en: 'If you run the application with the production mode, you will notice that the
    bundles are smaller. Run the `npm run start-production` command:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你以生产模式运行应用程序，你会注意到捆绑包更小。运行`npm run start-production`命令：
- en: '![](assets/6f0cc143-f0e0-47e1-a109-6c9aefb9ef1f.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6f0cc143-f0e0-47e1-a109-6c9aefb9ef1f.png)'
- en: With this optimization, we are reducing the bundle sizes by 40%. In the next
    recipe, we are going to implement Node.js with Webpack and React, and we will
    be able to apply a GZip compression, which will help us to reduce the bundle sizes
    even more.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过这种优化，我们将捆绑包的大小减少了40%。在下一个教程中，我们将实现Node.js与Webpack和React，并且我们将能够应用GZip压缩，这将帮助我们进一步减少捆绑包的大小。
- en: 'The `BundleAnalyzer` plugin can help us to see all the packages (`node_modules`)
    and our components sizes; this will give us an image of the bundles organizing
    by size (big squares mean big size and small squares mean small size). We can
    also implement the `WebpackNotifierPlugin` plugin, which is just a notification
    we can display every time our Webpack does a build:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`BundleAnalyzer`插件可以帮助我们查看所有包（`node_modules`）和我们组件的大小；这将给我们一个按大小组织的捆绑包的图像（大方块表示大尺寸，小方块表示小尺寸）。我们还可以实现`WebpackNotifierPlugin`插件，这只是一个通知，每当我们的Webpack构建时就会显示：'
- en: '[PRE50]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'File: webpack/configuration/plugins.js'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/plugins.js
- en: '`BundleAnalyzerPlugin` will be executed only on development mode; if you start
    the application (`npm start`), you will see that a new page is open and displays
    all the installed packages, specifying the size of each one:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`BundleAnalyzerPlugin`只会在开发模式下执行；如果你启动应用程序（`npm start`），你会看到一个新页面打开，并显示所有安装的包，指定每个包的大小：'
- en: '![](assets/cd259291-c437-4244-bde3-283d54187fc3.png)The purpose of this image
    is to show the sizes of the installed packages'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/cd259291-c437-4244-bde3-283d54187fc3.png)这张图片的目的是展示安装包的大小'
- en: 'The biggest one, of course, will be the vendor.js file, but we can also see
    our main.js components:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最大的文件当然是vendor.js文件，但我们也可以看到我们的main.js组件：
- en: '![](assets/8734e5a2-2dbb-4bf8-b7c5-7a0aa1854ba8.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8734e5a2-2dbb-4bf8-b7c5-7a0aa1854ba8.png)'
- en: 'You can see the fancy notification when you start your application:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你启动应用程序时，你可以看到漂亮的通知：
- en: '![](assets/4475abf7-6a7f-4fb8-9c4a-3d7170092db2.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4475abf7-6a7f-4fb8-9c4a-3d7170092db2.png)'
- en: Implementing Node.js with React/Redux and Webpack 4
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js与React/Redux和Webpack 4
- en: So far, in all the recipes, we have used React directly with `create-react-app`
    or Webpack 4\. In this recipe, we are going to implement React and Redux using
    Node.js and Webpack 4; this will help us to have more robust applications.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在所有的教程中，我们直接使用了`create-react-app`或Webpack 4来使用React。在这个教程中，我们将使用Node.js和Webpack
    4来实现React和Redux；这将帮助我们拥有更强大的应用程序。
- en: Getting Ready
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Using the same code of the last recipe, you will need to install all these
    packages:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上一个教程的相同代码，你需要安装所有这些包：
- en: '[PRE51]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: How to do it...
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s get started with the implementation:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始实施吧：
- en: 'Include the `react-hot-loader` plugin in our `.babelrc` file just for the development
    environment:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`.babelrc`文件中包含`react-hot-loader`插件，只用于开发环境：
- en: '[PRE52]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'File: .babelrc'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：.babelrc
- en: 'Create an Express Server; you need to create a file at `src/server/index.js`:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Express服务器；你需要在`src/server/index.js`中创建一个文件：
- en: '[PRE53]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'File: src/server/index.js'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/server/index.js
- en: 'We included a device detection with Node.js to use in our `initialState` for
    Redux. we can create this util file for this purpose:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在Node.js中包含了设备检测，用于Redux的`initialState`。我们可以为此目的创建这个工具文件：
- en: '[PRE54]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'File: src/shared/utils/device.js'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/utils/device.js
- en: 'You will need the device reducer as well:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还需要设备reducer：
- en: '[PRE55]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'File: src/shared/reducers/deviceReducer.js'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/reducers/deviceReducer.js
- en: 'We need to create `index.js` in our reducers folders, in the place where we
    are going to combine our reducers:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在reducers文件夹中创建`index.js`，在这个地方我们将合并我们的reducers：
- en: '[PRE56]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'File: src/shared/reducers/index.js'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/reducers/index.js
- en: 'Let''s create our initialState file. This is where we are going to get the
    device information from the `req` object:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建我们的初始状态文件。这是我们将从`req`对象中获取设备信息的地方：
- en: '[PRE57]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Redux needs a store to save all our reducers and our `initialState`; this will
    be our `configureStore`:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Redux需要一个存储来保存所有的reducers和我们的`initialState`；这将是我们的`configureStore`：
- en: '[PRE58]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'File: src/shared/redux/configureStore.js'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/redux/configureStore.js
- en: 'In the last recipes, we were using the `html-webpack-plugin` package to render
    the initial HTML template; now we have to do that in Node. For this, you need
    to create the `src/server/render/html.js` file:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一个教程中，我们使用了`html-webpack-plugin`包来渲染初始HTML模板；现在我们需要在Node中做到这一点。为此，你需要创建`src/server/render/html.js`文件：
- en: '[PRE59]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'File: src/server/render/html.js'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/server/render/html.js
- en: 'Create a function to render the HTML; I called this the `clientRender.js` file:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数来渲染HTML；我把这个文件叫做`clientRender.js`：
- en: '[PRE60]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'File: src/server/render/clientRender.js'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/server/render/clientRender.js
- en: 'After we''ve created our server files, we need to add our main entry file for
    the client. In this file, we are going to wrap our main `App` component inside
    the React Hot Loader App Container:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建了服务器文件之后，我们需要为客户端添加主入口文件。在这个文件中，我们将把我们的主`App`组件包裹在React热加载器应用容器中：
- en: '[PRE61]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'File: src/index.jsx'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/index.jsx
- en: 'Let''s create a directory for our client files. The first file we need to create
    is `App.jsx`, where we are going to include our component''s routes:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为我们的客户端文件创建一个目录。我们需要创建的第一个文件是`App.jsx`，在这里我们将包含我们组件的路由：
- en: '[PRE62]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'File: src/client/App.jsx'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/App.jsx
- en: 'To test our routes and our Redux state (`isMobile`), let''s create the `About`
    component:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试我们的路由和Redux状态（`isMobile`），让我们创建`About`组件：
- en: '[PRE63]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'File: src/client/components/About/index.jsx'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/components/About/index.jsx
- en: 'Add basic styles for this component:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此组件添加基本样式：
- en: '[PRE64]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'File: src/client/components/About/About.scss'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/client/components/About/About.scss
- en: 'When we want to use the React Hot Loader to refresh the page every time we
    make a change, we need to add an entry for our `webpack-hot-middleware` and one
    for `react-hot-loader` to connect to the **HMR** (**Hot Module Replacement**):'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们想要使用React Hot Loader在每次更改时刷新页面时，我们需要为我们的`webpack-hot-middleware`添加一个条目，并为`react-hot-loader`添加一个条目来连接到**HMR**（**热模块替换**）：
- en: '[PRE65]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'File: webpack/configuration/entry.js'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/entry.js
- en: 'Create the `output.js` file to specify where our Webpack should save the files:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`output.js`文件以指定我们的Webpack应该保存文件的位置：
- en: '[PRE66]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'You need to import these files into our `index.js`:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要将这些文件导入到我们的`index.js`中：
- en: '[PRE67]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'File: webpack/configuration/index.js'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/index.js
- en: 'We need to create a `mode.js` file as well, and handle the environment mode
    from our JS file because we are going to change our start script and we won''t
    specify the mode directly anymore:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要创建一个`mode.js`文件，并从我们的JS文件中处理环境模式，因为我们将要更改我们的启动脚本，不再直接指定模式：
- en: '[PRE68]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'File: webpack/configuration/mode.js'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/mode.js
- en: 'Add `HotModuleReplacementPlugin` into our plugins file for development and `CompressionPlugin`
    for production:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为开发添加`HotModuleReplacementPlugin`到我们的插件文件，为生产添加`CompressionPlugin`：
- en: '[PRE69]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'File: webpack/configuration/plugins.js'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：webpack/configuration/plugins.js
- en: 'In `package.json`, the new start script should look like this:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`中，新的启动脚本应该如下所示：
- en: '[PRE70]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'File: package.jsonIf you use Windows, you have to use the `SET` keyword to
    specify `NODE_ENV`. For example, `*SET NODE_ENV=development*` or *`SET NODE_ENV=production`*
    otherwise won''t work in your machine.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：package.json如果您使用Windows，您必须使用`SET`关键字来指定`NODE_ENV`。例如，`*SET NODE_ENV=development*`或*`SET
    NODE_ENV=production`*否则将无法在您的机器上工作。
- en: How it works...
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We''ll now see how it works:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看到它是如何工作的：
- en: Start the application with `npm start`.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm start`启动应用程序。
- en: 'You should see this page:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到这个页面：
- en: '![](assets/588f5d7a-e8dd-459a-9224-cf6556e1502f.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/588f5d7a-e8dd-459a-9224-cf6556e1502f.png)'
- en: 'If you open the console of your browser, you will see that the HMR is now connected:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您打开浏览器的控制台，您将看到HMR现在已连接：
- en: '![](assets/5545f6e0-fe39-4935-8ce2-dbb9369ff4ec.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5545f6e0-fe39-4935-8ce2-dbb9369ff4ec.png)'
- en: 'You can do a change in the `Home` component to see how the content is being
    updated without refresh:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以对`Home`组件进行更改，以查看内容如何在不刷新的情况下更新：
- en: '![](assets/4af7e2e3-9e84-44ae-bc88-b51ac68dcc40.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4af7e2e3-9e84-44ae-bc88-b51ac68dcc40.png)'
- en: 'As you can see in the console, the HMR specify each event is occurring and
    give you the updated modules. If you open the Network tab, you will see the massive
    size of our bundles (*vendor.js = 1MB* and *main.js = 46.3KB*):'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您在控制台中所见，HMR指定每个事件的发生并为您提供更新的模块。如果您打开网络选项卡，您将看到我们捆绑包的巨大大小（*vendor.js = 1MB*和*main.js
    = 46.3KB*）：
- en: '![](assets/57beef3a-38f8-4329-b02a-5a2677ad0243.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/57beef3a-38f8-4329-b02a-5a2677ad0243.png)'
- en: 'If you hit the `http://localhost:3000/about` URL, you will see the `About`
    component with the Redux state connected (`isMobile`):'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您访问`http://localhost:3000/about`网址，您将看到连接了Redux状态（`isMobile`）的`About`组件：
- en: '![](assets/19798efe-1fbf-4bab-ba38-8aaf6876a5b0.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/19798efe-1fbf-4bab-ba38-8aaf6876a5b0.png)'
- en: 'If you want to run your application in production mode, execute `npm run start-production`.
    If everything works fine, you should see the same site but with smaller bundles
    (vendor.js: 262KB - 74% less and main.js: 5.2KB - 88% less):'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想以生产模式运行应用程序，请执行`npm run start-production`。如果一切正常，您应该看到相同的网站，但捆绑包更小（vendor.js：262KB
    - 减少74%和main.js：5.2KB - 减少88%）：
- en: '![](assets/ca8686e9-1e7d-4337-8ef7-61be67e654ff.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ca8686e9-1e7d-4337-8ef7-61be67e654ff.png)'
- en: There's more...
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'I don''t like to use relative paths in the imports, sometimes can be very difficult
    to calculate the depth of certain files. The `babel-plugin-module-resolver` package
    can help us to add a custom alias for our directories. For example:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我不喜欢在导入中使用相对路径，有时很难计算某些文件的深度。`babel-plugin-module-resolver`包可以帮助我们为我们的目录添加自定义别名。例如：
- en: '[PRE71]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: As you can see, using an alias is more consistent, and it does not matter in
    which path you are importing the util always will be the same path using the alias,
    it's cool, isn't it?
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，使用别名更加一致，而且无论你从哪个路径导入util，始终都会使用相同的路径别名，这很酷，不是吗？
- en: 'First, we need to install the package:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装这个包：
- en: '[PRE72]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Then in our `.babelrc`, we can add our aliases for each path we want:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在我们的`.babelrc`中，我们可以为每个路径添加我们的别名：
- en: '[PRE73]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The `*@*` character is not necessary, but I like to use it to quickly identify
    whether I''m using an alias. Now you can modify some of the files we made in this
    recipe and replace the paths with the new aliases:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`*@*`字符并不是必需的，但我喜欢使用它来快速识别我是否在使用别名。现在你可以修改我们在这个教程中制作的一些文件，并用新的别名替换路径：'
- en: '![](assets/79829c9f-0c8e-4344-8fd8-f20ac676e3e8.png)File: src/client/App.jsx![](assets/17b7fd10-71b9-4176-ae6b-4ac68ca2eace.png)File: src/index.jsx![](assets/9291db28-809f-457e-a928-25c95e4660a4.png)File: src/server/index.js'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/79829c9f-0c8e-4344-8fd8-f20ac676e3e8.png)文件：src/client/App.jsx![](assets/17b7fd10-71b9-4176-ae6b-4ac68ca2eace.png)文件：src/index.jsx![](assets/9291db28-809f-457e-a928-25c95e4660a4.png)文件：src/server/index.js'
- en: '![](assets/228eba43-aa88-455d-9bc1-c0f0a9658c84.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/228eba43-aa88-455d-9bc1-c0f0a9658c84.png)'
- en: File: src/shared/redux/configureStore.js
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/redux/configureStore.js
