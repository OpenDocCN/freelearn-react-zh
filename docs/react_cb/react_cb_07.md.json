["```jsx\nnpm install react-addons-css-transition-group\n```", "```jsx\nimport React, { Component } from 'react';\nimport uuidv4 from 'uuid/v4';\nimport List from './List';\nimport './Todo.css';\n\nclass Todo extends Component {\n  constructor() {\n    super();\n\n    // Initial state...\n    this.state = {\n      task: '',\n      items: []\n    };\n  }\n\n  componentWillMount() {\n    // Setting default tasks...\n    this.setState({\n      items: [\n        {\n          id: uuidv4(),\n          task: 'Default Task 1',\n          completed: false\n        },\n        {\n          id: uuidv4(),\n          task: 'Default Task 2',\n          completed: true\n        },\n        {\n          id: uuidv4(),\n          task: 'Default Task 3',\n          completed: false\n        }\n      ]\n    });\n  }\n\n  handleOnChange = e => {\n    const { target: { value } } = e;\n\n    // Updating our task state with the input value...\n    this.setState({\n      task: value\n    });\n  }\n\n  handleOnSubmit = e => {\n    // Prevent default to avoid the actual form submit...\n    e.preventDefault();\n\n    // Once is submited we reset the task value and we push the \n    // new task to the items array.\n    this.setState({\n      task: '',\n      items: [\n        ...this.state.items,\n        {\n          id: uuidv4(),\n          task: this.state.task,\n          complete: false\n        }\n      ]\n    });\n  }\n\n  markAsCompleted = id => {\n    // Finding the task by id...\n    const foundTask = this.state.items.find(\n      task => task.id === id\n    );\n\n    // Updating the completed status...\n    foundTask.completed = true;\n\n    // Updating the state with the new updated task...\n    this.setState({\n      items: [\n        ...this.state.items,\n        ...foundTask\n      ]\n    });\n  }\n\n  removeTask = id => {\n    // Filtering the tasks by removing the specific task id...\n    const filteredTasks = this.state.items.filter(\n      task => task.id !== id\n    );\n\n    // Updating items state...\n    this.setState({\n      items: filteredTasks\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Todo\">\n        <h1>New Task:</h1>\n\n        <form onSubmit={this.handleOnSubmit}>\n          <input \n            value={this.state.task} \n onChange={this.handleOnChange} \n          />\n        </form>\n\n        <List\n          items={this.state.items}\n          markAsCompleted={this.markAsCompleted}\n          removeTask={this.removeTask}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n```", "```jsx\nimport React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport './List.css';\n\nconst List = props => (\n  <ul>\n    <ReactCSSTransitionGroup \n transitionName=\"todo\" \n transitionAppear={true}\n    >\n      {props.items.map((item, key) => (\n        <li \n          key={key} \n          className={`${item.completed ? 'completed' : 'pending'}`}\n        >\n          {item.task}\n\n          <div className=\"actions\">\n            <span \n              className={item.completed ? 'hide' : 'done'} \n              onClick={() => props.markAsCompleted(item.id)}\n            >\n              <i className=\"fa fa-check\"></i>\n            </span>\n\n            <span \n              className=\"trash\" \n              onClick={() => props.removeTask(item.id)}\n            >\n              <i className=\"fa fa-trash\"></i>\n            </span>\n          </div>\n        </li>\n      ))}\n    </ReactCSSTransitionGroup>\n  </ul>\n);\n\nexport default List;\n```", "```jsx\n.todo-enter {\n    opacity: 0.01;\n}\n\n.todo-enter.todo-enter-active {\n    opacity: 1;\n    transition: opacity 0.5s ease;\n}\n\n.todo-leave {\n    opacity: 1;\n}\n\n.todo-leave.todo-leave-active {\n    opacity: 0.01;\n    transition: opacity .5s ease-in;\n}\n\n.todo-appear {\n    opacity: 0.01;\n    transition: opacity .5s ease-in;\n}\n\n.todo-appear.todo-appear-active {\n    opacity: 1;\n}\n```", "```jsx\nnpm install react-animations radium\n```", "```jsx\nimport React, { Component } from 'react';\nimport { fadeIn } from 'react-animations';\nimport Radium, { StyleRoot } from 'radium';\n\nconst styles = {\n  fadeIn: {\n    animation: 'x 1s',\n    animationName: Radium.keyframes(fadeIn, 'fadeIn')\n  }\n};\n\nclass Animations extends Component {\n  render() {\n    return (\n      <StyleRoot>\n        <div className=\"Animations\" style={styles.fadeIn}>\n          <h1>This text will be animated</h1>\n        </div>\n      </StyleRoot>\n    );\n  }\n}\n\nexport default Animations;\n```", "```jsx\nimport React, { Component } from 'react';\nimport { fadeIn, bounce } from 'react-animations';\nimport Radium, { StyleRoot } from 'radium';\n\nconst styles = {\n  fadeIn: {\n    animation: 'x 1s',\n    animationName: Radium.keyframes(fadeIn, 'fadeIn')\n  },\n  bounce: {\n    animation: 'x 1s',\n    animationName: Radium.keyframes(bounce, 'bounce')\n  }\n};\n\nclass Animations extends Component {\n  render() {\n    return (\n      <StyleRoot>\n        <div className=\"Animations\" style={styles.bounce}>\n          <h1>This text will be animated</h1>\n        </div>\n      </StyleRoot>\n    );\n  }\n}\n\nexport default Animations;\n```", "```jsx\n npm install react react-dom react-pose styled-components\n```", "```jsx\nimport React, { Component } from 'react';\nimport posed from 'react-pose';\nimport styled from 'styled-components';\nimport './Animations.css';\n\nclass Animations extends Component {\n  render() {\n    return (\n      <div class=\"Animations\">\n\n      </div>\n    );\n  }\n}\n\nexport default Animations;\n```", "```jsx\nimport React, { Component } from 'react';\nimport posed from 'react-pose';\nimport styled from 'styled-components';\nimport './Animations.css';\n\n// Creating our posed div\nconst Circle = posed.div({\n  normal: {\n    scale: 1 // Normal state\n  },\n  hover: {\n    scale: 3 // Hover state\n  }\n});\n\n// Creating styled component\nconst StyledCircle = styled(Circle)`\n  color: white;\n  cursor: pointer;\n  background: blue;\n  line-height: 80px;\n  border-radius: 50%;\n  height: 80px;\n  width: 80px;\n`;\n\nclass Animations extends Component {\n  render() {\n    return (\n      <div class=\"Animations\">\n\n      </div>\n    );\n  }\n}\n\nexport default Animations;\n```", "```jsx\n      render() {\n        return (\n          <div class=\"Animations\">\n            <StyledCircle\n              pose={this.state.hover ? 'hover' : 'normal'}\n              onMouseEnter={this.handleMouseEnter}\n              onMouseLeave={this.handleMouseLeave}\n              onClick={this.handleClick}\n              style={{ background: this.state.bg }}\n            >\n              Click me!\n            </StyledCircle>\n          </div>\n        );\n      }\n```", "```jsx\nimport React, { Component } from 'react';\nimport posed from 'react-pose';\nimport styled from 'styled-components';\nimport './Animations.css';\n\nconst Circle = posed.div({\n  normal: {\n    scale: 1 // Normal state\n  },\n  hover: {\n    scale: 3 // Hover state\n  }\n});\n\n// Creating styled component\nconst StyledCircle = styled(Circle)`\n  color: white;\n  cursor: pointer;\n  background: blue;\n  line-height: 80px;\n  border-radius: 50%;\n  height: 80px;\n  width: 80px;\n`;\n\nclass Animations extends Component {\n  state = {\n    bg: 'blue',\n    hover: false\n  };\n\n  handleMouseEnter = () => {\n    this.setState({\n      hover: true\n    });\n  }\n\n  handleMouseLeave = () => {\n    this.setState({\n      hover: false\n    });\n  }\n\n  handleClick = () => {\n    // Choosing a random color...\n    const colors = ['red', 'green', 'gray', 'orange', 'black', 'pink'];\n\n    this.setState({\n      bg: colors[Math.floor(Math.random() * colors.length)]\n    });\n  }\n\n  render() {\n    return (\n      <div class=\"Animations\">\n        <StyledCircle\n          pose={this.state.hover ? 'hover' : 'normal'}\n          onMouseEnter={this.handleMouseEnter}\n          onMouseLeave={this.handleMouseLeave}\n          onClick={this.handleClick}\n          style={{ background: this.state.bg }}\n        >\n          Click me!\n        </StyledCircle>\n      </div>\n    );\n  }\n}\n\nexport default Animations;\n```", "```jsx\nimport React, { Component } from 'react';\nimport posed from 'react-pose';\nimport styled, { keyframes } from 'styled-components';\nimport { flip } from 'react-animations';\nimport './Animations.css';\n\nconst flipAnimation = keyframes`${flip}`;\n\nconst Circle = posed.div({\n  normal: {\n    scale: 1 // Normal state\n  },\n  hover: {\n    scale: 3 // Hover state\n  }\n});\n\n// Creating styled component\nconst StyledCircle = styled(Circle)`\n  color: white;\n  cursor: pointer;\n  background: blue;\n  line-height: 80px;\n  border-radius: 50%;\n  height: 80px;\n  width: 80px;\n`;\n\nclass Animations extends Component {\n  state = {\n    style: {\n      background: 'blue'\n    },\n    hover: false\n  };\n\n  handleMouseEnter = () => {\n    this.setState({\n      hover: true\n    });\n  }\n\n  handleMouseLeave = () => {\n    this.setState({\n      hover: false\n    });\n  }\n\n  handleClick = () => {\n    // Choosing a random color...\n    const colors = ['red', 'green', 'gray', 'orange', 'black', 'pink'];\n\n    this.setState({\n      style: {\n        animation: `1s ${flipAnimation}`,\n        background: colors[Math.floor(Math.random() * colors.length)]\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Animations\">\n        <StyledCircle\n          pose={this.state.hover ? 'hover' : 'normal'}\n          onMouseEnter={this.handleMouseEnter}\n          onMouseLeave={this.handleMouseLeave}\n          onClick={this.handleClick}\n          style={this.state.style}\n         >\n           Click me!\n         </StyledCircle>\n       </div>\n    );\n  }\n}\n\nexport default Animations;\n```"]