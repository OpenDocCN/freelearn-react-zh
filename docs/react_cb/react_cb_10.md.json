["```jsx\nmkdir webpack-zero-configuration\ncd webpack-zero-configuration\nnpm install --save-dev webpack webpack-cli\n```", "```jsx\nnpm init -y\n```", "```jsx\n  {\n    \"name\": \"webpack-zero-configuration\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Webpack 4 Zero Configuration\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n      \"build\": \"webpack\"\n    },\n    \"author\": \"Carlos Santana\",\n    \"license\": \"MIT\",\n    \"devDependencies\": {\n      \"webpack\": \"^4.6.0\",\n      \"webpack-cli\": \"^2.0.15\"\n    }\n  }\n```", "```jsx\n    npm run build\n```", "```jsx\n    console.log('Index file...');\n```", "```jsx\n    !function(e){var n={};function r(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=n,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:t})},r.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,\"a\",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p=\"\",r(r.s=0)}([function(e,n){console.log(\"Index file...\")}]);\n```", "```jsx\n  {\n    \"name\": \"webpack-zero-configuration\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Webpack 4 Zero Configuration\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n      \"build-development\": \"webpack --mode development\",\n      \"build\": \"webpack --mode production\"\n    },\n    \"author\": \"Carlos Santana\",\n    \"license\": \"MIT\",\n    \"devDependencies\": {\n      \"webpack\": \"^4.6.0\",\n      \"webpack-cli\": \"^2.0.15\"\n    }\n  }\n```", "```jsx\nnpm install --save-dev babel-loader babel-core babel-preset-env\n```", "```jsx\n    {\n      \"presets\": [\"env\"]\n    }\n```", "```jsx\n  const webpackConfig = {\n    module: {\n      rules: [\n        {\n          test: /\\.js$/,\n          exclude: /node_modules/,\n          use: 'babel-loader'\n        }\n      ]\n    }\n  };\n\n  module.exports = webpackConfig;\n```", "```jsx\n    export const numbers = ['one', 'two', 'three'];\n```", "```jsx\n  import { numbers } from './numbers';\n  numbers.forEach(number => console.log(number));\n```", "```jsx\n  {\n    \"name\": \"webpack-zero-configuration\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Webpack 4 Zero Configuration\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n      \"build-development\": \"webpack --mode development --module-bind \n     js=babel-loader\",\n      \"build\": \"webpack --mode production --module-bind js=babel-\n       loader\"\n    },\n    \"author\": \"Carlos Santana\",\n    \"license\": \"MIT\",\n    \"devDependencies\": {\n      \"babel-core\": \"^6.26.3\",\n      \"babel-loader\": \"^7.1.4\",\n      \"babel-preset-env\": \"^1.6.1\",\n      \"webpack\": \"^4.6.0\",\n      \"webpack-cli\": \"^2.0.15\"\n    }\n  }\n```", "```jsx\n    npm install react react-dom babel-preset-react\n```", "```jsx\n  {\n    \"presets\": [\n      \"env\",\n      \"react\"\n    ]\n  }\n```", "```jsx\n  const webpackConfig = {\n    module: {\n      rules: [\n        {\n          test: /\\.(js|jsx)$/,\n          exclude: /node_modules/,\n          use: 'babel-loader'\n        }\n      ]\n    }\n  };\n\n  module.exports = webpackConfig;\n```", "```jsx\n  // Dependencies\n  import React from 'react';\n\n  // Components\n  import Home from './Home';\n\n  const App = props => (\n    <div>\n      <Home />\n    </div>\n  );\n\n  export default App;\n```", "```jsx\n  import React from 'react';\n\n  const Home = () => <h1>Home</h1>;\n\n  export default Home;\n```", "```jsx\n  // Dependencies\n  import React from 'react';\n  import { render } from 'react-dom';\n\n  // Components\n  import App from './components/App';\n\n  render(<App />, document.querySelector('#root'));\n```", "```jsx\n    npm install --save-dev html-webpack-plugin\n```", "```jsx\n  const HtmlWebPackPlugin = require('html-webpack-plugin');\n\n  const webpackConfig = {\n    module: {\n      rules: [\n        {\n          test: /\\.(js|jsx)$/,\n          exclude: /node_modules/,\n          use: 'babel-loader'\n        }\n      ]\n    },\n    plugins: [\n      new HtmlWebPackPlugin({\n        title: 'Codejobs',\n        template: './src/index.html',\n        filename: './index.html'\n      })\n    ]\n  };\n\n  module.exports = webpackConfig;\n```", "```jsx\n  <!DOCTYPE html>\n  <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <title><%= htmlWebpackPlugin.options.title %></title>\n    </head>\n    <body>\n      <div id=\"root\"></div>\n    </body>\n  </html>\n```", "```jsx\n  const HtmlWebPackPlugin = require('html-webpack-plugin');\n\n  const webpackConfig = {\n    module: {\n      rules: [\n        {\n          test: /\\.(js|jsx)$/,\n          exclude: /node_modules/,\n          use: 'babel-loader'\n        }\n      ]\n    },\n    plugins: [\n      new HtmlWebPackPlugin({\n        title: 'Codejobs',\n        template: './src/index.html',\n        filename: './index.html'\n      })\n    ],\n    resolve: {\n      extensions: ['.js', '.jsx']\n    }\n  };\n\n module.exports = webpackConfig;\n```", "```jsx\n  import HtmlWebPackPlugin from 'html-webpack-plugin';\n\n  export default {\n    module: {\n      rules: [\n        {\n          test: /\\.(js|jsx)$/,\n          exclude: /node_modules/,\n          use: 'babel-loader'\n        }\n      ]\n    },\n    plugins: [\n      new HtmlWebPackPlugin({\n        title: 'Codejobs',\n        template: './src/index.html',\n        filename: './index.html'\n      })\n    ],\n    resolve: {\n      extensions: ['.js', '.jsx']\n    }\n  };\n```", "```jsx\n  export default {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: 'babel-loader'\n      }\n    ]\n  };\n```", "```jsx\n  import HtmlWebPackPlugin from 'html-webpack-plugin';\n\n const plugins = [\n    new HtmlWebPackPlugin({\n      title: 'Codejobs',\n      template: './src/index.html',\n      filename: './index.html'\n    })\n  ];\n\n  export default plugins;\n```", "```jsx\n  export default {\n    extensions: ['.js', '.jsx']\n  }\n```", "```jsx\n // Configuration\n  import module from './module';\n  import plugins from './plugins';\n  import resolve from './resolve';\n\n  export {\n    module,\n    plugins,\n    resolve\n  };\n```", "```jsx\n  import {\n    module,\n    plugins,\n    resolve\n  } from './webpack/configuration';\n\n  export default {\n    module,\n    plugins,\n    resolve\n  };\n```", "```jsx\n    npm install webpack-dev-server **css-loader extract-text-webpack-plugin@v4.0.0-beta.0 style-loader**\n```", "```jsx\n    npm install sass-loader **node-sass** \n```", "```jsx\n    npm install stylus-loader stylus\n```", "```jsx\n    npm install less-loader less\n```", "```jsx\n    \"scripts\": {\n      \"start\": \"webpack-dev-server --mode development --open\",\n      \"build-development\": \"webpack --mode development\",\n      \"build\": \"webpack --mode production\"\n    }\n```", "```jsx\n\"start\": \"webpack-dev-server --mode development --open --port 9999\"\n```", "```jsx\n  import React from 'react';\n\n  const Home = () => <h1>Updated Home</h1>;\n\n  export default Home;\n```", "```jsx\n  export default {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: 'babel-loader'\n      },\n      {\n        test: /\\.scss$/, // Can be: .scss or .styl or .less\n        use: [\n          {\n            loader: 'style-loader'\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              // Enables CSS Modules\n              modules: true, \n              // Number of loaders applied before CSS loader\n              importLoaders: 1, \n              // Formatting CSS Class name\n              localIdentName: '[name]_[local]_[hash:base64]', // Enable/disable sourcemaps\n              sourceMap: true, \n              // Enable/disable minification\n              minimize: true \n            }\n          },\n          {\n            loader: 'sass-loader' // sass-loader or stylus-loader\n                                  // or less-loader\n          }\n        ]\n      }\n    ]\n  };\n```", "```jsx\n  $color: red;\n  .Home {\n    color: $color;\n  }\n```", "```jsx\n  import React from 'react';\n  import styles from './Home.scss'; // For Sass\n  // import styles from './Home.styl'; // For Stylus\n  // import styles from './Home.less'; // For Less\n\n  const Home = () => <h1 className={styles.Home}>Updated Home</h1>;\n\n export default Home;\n```", "```jsx\n  $color = green\n\n  .Home\n    color: $color\n```", "```jsx\n @color: blue;\n\n .Home {\n    color: @color;\n  }\n```", "```jsx\n   npm install extract-text-webpack-plugin@v4.0.0-beta.0\n```", "```jsx\n  import HtmlWebPackPlugin from 'html-webpack-plugin';\n  import ExtractTextPlugin from 'extract-text-webpack-plugin';\n\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  const plugins = [\n    new HtmlWebPackPlugin({\n      title: 'Codejobs',\n      template: './src/index.html',\n      filename: './index.html'\n    })\n  ];\n\n  if (isProduction) {\n    plugins.push(\n      new ExtractTextPlugin({\n        allChunks: true,\n        filename: './css/[name].css'\n      })\n    );\n  }\n\n export default plugins;\n```", "```jsx\n    \"scripts\": {\n      \"start\": \"webpack-dev-server --mode development --open\",\n      \"start-production\": \"NODE_ENV=production webpack-dev-server --\n      mode production\",\n      \"build-development\": \"webpack --mode development\",\n      \"build\": \"webpack --mode production\"\n    }\n```", "```jsx\n  import ExtractTextPlugin from 'extract-text-webpack-plugin';\n\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  const rules = [\n    {\n      test: /\\.(js|jsx)$/,\n      exclude: /node_modules/,\n      use: 'babel-loader'\n    }\n  ];\n\n  if (isProduction) {\n    rules.push({\n      test: /\\.scss/,\n      use: ExtractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: [\n          'css-loader?minimize=true&modules=true&localIdentName=\n          [name]_[local]_[hash:base64]',\n          'sass-loader'\n        ]\n      })\n    });\n  } else {\n    rules.push({\n      test: /\\.scss$/, // .scss - .styl - .less\n      use: [\n        {\n          loader: 'style-loader'\n        },\n        {\n          loader: 'css-loader',\n          options: {\n            modules: true,\n            importLoaders: 1,\n            localIdentName: '[name]_[local]_[hash:base64]',\n            sourceMap: true,\n            minimize: true\n          }\n        },\n        {\n          loader: 'sass-loader' // sass-loader, stylus-loader or \n                                //less-loader\n        }\n      ]\n    });\n  }\n\n  export default {\n    rules\n  };\n```", "```jsx\nnpm install webpack-bundle-analyzer webpack-notifier\n```", "```jsx\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  export default !isProduction ? 'cheap-module-source-map' : 'eval';\n```", "```jsx\n export default {\n    splitChunks: {\n      cacheGroups: {\n        default: false,\n        commons: {\n          test: /node_modules/,\n          name: 'vendor',\n          chunks: 'all'\n        }\n      }\n    }\n  }\n```", "```jsx\n  // Configuration\n  import devtool from './devtool';\n  import module from './module';\n  import optimization from './optimization';\n  import plugins from './plugins';\n  import resolve from './resolve';\n\n  export {\n    devtool,\n    module,\n    optimization,\n    plugins,\n    resolve\n  };\n```", "```jsx\n  import {\n    devtool,\n    module,\n    optimization,\n    plugins,\n    resolve\n  } from './webpack/configuration';\n\n  export default {\n    devtool,\n    module,\n    plugins,\n    optimization,\n    resolve\n  };\n```", "```jsx\n  import HtmlWebPackPlugin from 'html-webpack-plugin';\n  import ExtractTextPlugin from 'extract-text-webpack-plugin';\n  import WebpackNotifierPlugin from 'webpack-notifier';\n import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';\n\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  const plugins = [\n    new HtmlWebPackPlugin({\n      title: 'Codejobs',\n      template: './src/index.html',\n      filename: './index.html'\n    })\n  ];\n\n  if (isProduction) {\n    plugins.push(\n      new ExtractTextPlugin({\n        allChunks: true,\n        filename: './css/[name].css'\n      })\n    );\n  } else {\n    plugins.push(\n      new BundleAnalyzerPlugin(),\n new WebpackNotifierPlugin({\n title: 'CodeJobs'\n })\n    );\n  }\n\n export default plugins;\n```", "```jsx\nnpm install babel-cli express nodemon react-hot-loader react-router-dom webpack-hot-middleware compression-webpack-plugin react-redux redux\n```", "```jsx\n  {\n    \"presets\": [\"env\", \"react\"],\n    \"env\": {\n      \"development\": {\n        \"plugins\": [\n          \"react-hot-loader/babel\"\n        ]\n      }\n    }\n  }\n```", "```jsx\n  // Dependencies\n  import express from 'express';\n  import path from 'path';\n  import webpackDevMiddleware from 'webpack-dev-middleware';\n  import webpackHotMiddleware from 'webpack-hot-middleware';\n  import webpack from 'webpack';\n\n  // Webpack Configuration\n  import webpackConfig from '../../webpack.config.babel';\n\n  // Client Render\n  import clientRender from './render/clientRender';\n\n // Utils\n  import { isMobile } from '../shared/utils/device';\n\n  // Environment\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  // Express Application\n  const app = express();\n\n  // Webpack Compiler\n  const compiler = webpack(webpackConfig);\n\n  // Webpack Middleware\n  if (!isProduction) {\n    // Hot Module Replacement\n    app.use(webpackDevMiddleware(compiler));\n    app.use(webpackHotMiddleware(compiler));\n  } else {\n    // Public directory\n    app.use(express.static(path.join(__dirname, '../../public')));\n\n    // GZip Compression just for Production\n    app.get('*.js', (req, res, next) => {\n      req.url = `${req.url}.gz`;\n      res.set('Content-Encoding', 'gzip');\n      next();\n    });\n  }\n\n  // Device Detection\n  app.use((req, res, next) => {\n    req.isMobile = isMobile(req.headers['user-agent']);\n    next();\n  });\n\n  // Client Side Rendering\n  app.use(clientRender());\n\n  // Disabling x-powered-by\n  app.disable('x-powered-by');\n\n  // Listen Port 3000...\n  app.listen(3000);\n```", "```jsx\n  export function getCurrentDevice(ua) {\n    return /mobile/i.test(ua) ? 'mobile' : 'desktop';\n  }\n  export function isDesktop(ua) {\n    return !/mobile/i.test(ua);\n  }\n  export function isMobile(ua) {\n    return /mobile/i.test(ua);\n  }\n```", "```jsx\n  export default function deviceReducer(state = {}) {\n    return state;\n  }\n```", "```jsx\n  // Dependencies\n  import { combineReducers } from 'redux';\n\n  // Shared Reducers\n  import device from './deviceReducer';\n\n  const rootReducer = combineReducers({\n    device\n  });\n\n export default rootReducer;\n```", "```jsx\n  export default req => ({\n    device: {\n      isMobile: req.isMobile\n    }\n  });\n```", "```jsx\n // Dependencies\n  import { createStore } from 'redux';\n\n  // Root Reducer\n  import rootReducer from '../reducers';\n\n export default function configureStore(initialState) {\n    return createStore(\n      rootReducer,\n      initialState\n    );\n  }\n```", "```jsx\n // Dependencies\n  import serialize from 'serialize-javascript';\n\n  // Environment\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  export default function html(options) {\n    const { title, initialState } = options;\n    let path = '/';\n    let link = '';\n\n    if (isProduction) {\n      path = '/app/';\n      link = `<link rel=\"stylesheet\" href=\"${path}css/main.css\" />`;\n    }\n\n    return `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <title>${title}</title>\n          ${link}\n        </head>\n        <body>\n          <div id=\"root\"></div>\n\n          <script>\n            window.initialState = ${serialize(initialState)};\n          </script>\n          <script src=\"${path}vendor.js\"></script>\n          <script src=\"${path}main.js\"></script>\n        </body>\n      </html>\n    `;\n  }\n```", "```jsx\n // HTML\n  import html from './html';\n\n // Initial State\n  import initialState from './initialState';\n\n  export default function clientRender() {\n    return (req, res) => res.send(html({\n      title: 'Codejobs',\n      initialState: initialState(req)\n    }));\n  }\n```", "```jsx\n  // Dependencies\n  import React from 'react';\n  import { render } from 'react-dom';\n  import { Provider } from 'react-redux';\n  import { AppContainer } from 'react-hot-loader';\n\n // Redux Store\n  import configureStore from './shared/redux/configureStore';\n\n  // Components\n  import App from './client/App';\n\n  // Configuring Redux Store\n  const store = configureStore(window.initialState);\n\n  // Root element\n  const rootElement = document.querySelector('#root');\n\n  // App Wrapper\n  const renderApp = Component => {\n    render(\n      <AppContainer>\n        <Provider store={store}>\n          <Component />\n        </Provider>\n      </AppContainer>,\n      rootElement\n    );\n  };\n\n  // Rendering app\n  renderApp(App);\n\n  // Hot Module Replacement\n  if (module.hot) {\n    module.hot.accept('./client/App', () => {\n      renderApp(require('./client/App').default);\n    });\n  }\n```", "```jsx\n  // Dependencies\n  import React from 'react';\n  import { BrowserRouter, Switch, Route } from 'react-router-dom';\n\n  // Components\n  import About from './components/About';\n  import Home from './components/Home';\n\n  const App = () => (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/about\" component={About} />\n      </Switch>\n    </BrowserRouter>\n  );\n\n  export default App;\n```", "```jsx\n  import React from 'react';\n  import { bool } from 'prop-types';\n  import { connect } from 'react-redux';\n  import styles from './About.scss';\n\n  const About = ({ isMobile }) => (\n    <h1 className={styles.About}>About - {isMobile ? 'mobile' : 'desktop'}</h1>\n  );\n\n  About.propTypes = {\n    isMobile: bool\n  };\n\n export default connect(({ device }) => ({\n    isMobile: device.isMobile\n  }))(About);\n```", "```jsx\n  $color: green;\n\n  .About {\n    color: $color;\n  }\n```", "```jsx\n  const isProduction = process.env.NODE_ENV === 'production';\n  const entry = [];\n\n  if (!isProduction) {\n    entry.push(\n      'webpack-hot-middleware/client?\n       path=http://localhost:3000/__webpack_hmr&reload=true',\n      'react-hot-loader/patch',\n      './src/index.jsx'\n    );\n  } else {\n    entry.push('./src/index.jsx');\n  }\n\n  export default entry;\n```", "```jsx\n // Dependencies\n  import path from 'path';\n\n  export default {\n    filename: '[name].js',\n    path: path.resolve(__dirname, '../../public/app'),\n    publicPath: '/'\n  };\n```", "```jsx\n  // Configuration\n  import devtool from './devtool';\n  import entry from './entry';\n import mode from './mode';\n  import module from './module';\n  import optimization from './optimization';\n  import output from './output';\n  import plugins from './plugins';\n  import resolve from './resolve';\n\n  export {\n    devtool,\n entry,\n mode,\n    module,\n    optimization,\n    output,\n    plugins,\n    resolve\n  };\n```", "```jsx\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  export default !isProduction ? 'development' : 'production';\n```", "```jsx\n  import ExtractTextPlugin from 'extract-text-webpack-plugin';\n  import WebpackNotifierPlugin from 'webpack-notifier';\n  import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';\n  import CompressionPlugin from 'compression-webpack-plugin';\n  import webpack from 'webpack';\n  const isProduction = process.env.NODE_ENV === 'production';\n  const plugins = [];\n  if (isProduction) {\n    plugins.push(\n      new ExtractTextPlugin({\n        allChunks: true,\n        filename: './css/[name].css'\n      }),\n      new CompressionPlugin({\n        asset: '[path].gz[query]',\n        algorithm: 'gzip',\n        test: /\\.js$/,\n        threshold: 10240,\n        minRatio: 0.8\n      })\n    );\n  } else {\n    plugins.push(\n      new webpack.HotModuleReplacementPlugin(),\n      new BundleAnalyzerPlugin(),\n      new WebpackNotifierPlugin({\n        title: 'CodeJobs'\n      })\n    );\n  }\n export default plugins;\n```", "```jsx\n    \"scripts\": {\n      \"build\": \"NODE_ENV=production webpack\",\n      \"**clean**\": \"**rm** -rf public/app\",\n      \"start\": \"**npm run** clean && NODE_ENV=development nodemon src/server --watch src/server --exec babel-node --presets es2015\",\n      \"start-production\": \"npm run clean && npm run build && NODE_ENV=production babel-node src/server --presets es2015\"\n    }\n```", "```jsx\n    // Instead of importing like this \n import { isMobile } from  '../../../shared/utils/device';\n\n    **// Using module resolver you can use an alias like:**\n    **import** { isMobile } **from** '**@utils**/device';\n```", "```jsx\n    npm install babel-plugin-module-resolver\n```", "```jsx\n  {\n    \"presets\": [\"env\", \"react\"],\n    \"env\": {\n      \"development\": {\n        \"plugins\": [\n          \"react-hot-loader/babel\"\n        ]\n      }\n    },\n    \"plugins\": [\n     [\"module-resolver\", {\n       \"root\": [\"./\"],\n       \"alias\": {\n         \"@App\": \"./src/client/App.jsx\",\n         \"@client\": \"./src/client/\",\n         \"@components\": \"./src/client/components\",\n         \"@configureStore\": \"./src/shared/redux/configureStore.js\",\n         \"@reducers\": \"./src/shared/reducers\",\n         \"@server\": \"./src/server/\",\n         \"@utils\": \"./src/shared/utils\",\n         \"@webpack\": \"./webpack.config.babel.js\"\n       }\n     }]\n   ],\n  }\n```"]