["```jsx\n var name = 'Carlos Santana';\n    let age = 30;\n\n    console.log(window.name); // Carlos Santana\n    console.log(window.age);  // undefined\n```", "```jsx\n for (var i = 1 ; i <= 10; i++) {\n      console.log(i); // 1, 2, 3, 4... 10\n    }\n\n    console.log(i); // Will print the last value of i: 10\n```", "```jsx\n for (let i = 1 ; i <= 10; i++) {\n      console.log(i); // 1, 2, 3, 4... 10\n    }\n\n    console.log(i); // Uncaught ReferenceError: i is not defined\n```", "```jsx\n const pi = 3.1416;\n    pi = 5; // Uncaught TypeError: Assignment to constant variable.\n```", "```jsx\n const cryptoCurrencies = ['BTC', 'ETH', 'XRP'];\n\n    // Adding ERT: ['BTC', 'ETH', 'XRP', 'ERT'];\n    cryptoCurrencies.push('ERT'); \n\n // Will remove the first element: ['ETH', 'XRP', 'ERT']; cryptoCurrencies.**shift**();\n\n    **// Modifying an element**\n    cryptoCurrencies[1] = 'LTC'; **// ['ETH', 'LTC', 'ERT'];**\n```", "```jsx\n const person = {\n      name: 'Carlos Santana',\n      age: 30,\n      email: 'carlos@milkzoft.com'\n    };\n\n    // Adding a new node...\n    person.website = 'https://www.codejobs.com';\n\n    // Removing a node...\n    delete person.email;\n\n    // Updating a node...\n    person.age = 29;\n```", "```jsx\n    this.setState({\n      items: [\n        ...this.state.items, // Here we are spreading the current items\n        {\n      task: 'My new task', // This will be a new task in our Todo list.\n        }\n      ]\n    });\n```", "```jsx\n    render() {\n      const props = {};\n\n      props.name = 'Carlos Santana';\n      props.age = 30;\n      props.email = 'carlos@milkzoft.com';\n\n      return <Person {...props} />;\n    }\n```", "```jsx\n function setNumbers(param1, param2, ...args) {\n      // param1 = 1\n      // param2 = 2\n      // args = [3, 4, 5, 6];\n      console.log(param1, param2, ...args); // Log: 1, 2, 3, 4, 5, 6\n    }\n\n    setNumbers(1, 2, 3, 4, 5, 6);\n```", "```jsx\n // Imagine we are on our <Person> component and we are \n // receiving the props (in this.props): name, age and email. render() { // Our props are: \n      // { name: 'Carlos Santana', age: 30, email: \n       'carlos@milkzoft.com' } console.log(this.props); \n      const { name, age, email } = this.props;\n\n      // Now we can use the nodes as constants... console.log(name, age, email);\n\n      return (\n        <ul>\n          <li>Name: {name}</li>\n          <li>Age: {age}</li>\n          <li>Email: {email}</li>\n        </ul> ); }\n\n    // Also the destructuring can be used on function parameters\n    const Person = ({ name, age, email }) => (\n      <ul>\n        <li>Name: {name}</li>\n        <li>Age: {age}</li>\n        <li>Email: {email}</li>\n      </ul>\n    );\n```", "```jsx\n class Person extends Component {\n      showProps = () => {\n        console.log(this.props); // { name, age, email... }\n      }\n\n      render() {\n        return (\n          <div>\n            Consoling props: {this.showProps()}\n          </div>\n        );\n      }\n    }\n```", "```jsx\n render() {\n      const { theme } = this.props;\n\n      return (\n        <div \n className={`base ${theme === 'dark' ? 'darkMode' : \n         'lightMode'}`}        >\n          Some content here...\n        </div>\n      );\n    }\n```", "```jsx\n render() {\n      const tasks = [\n        { task: 'Task 1' },\n        { task: 'Task 2' },\n        { task: 'Task 3' }\n      ];\n\n      return (\n        <ul>\n          {tasks.map((item, key) => <li key={key}>{item.task}</li>}\n        </ul>\n      );\n    }\n```", "```jsx\n    export default function coinsReducer(state = initialState, action) {\n      switch (action.type) {\n        case FETCH_COINS_SUCCESS: {\n          const { payload: coins } = action;\n\n          return Object.assign({}, state, {\n            coins\n          });\n        }\n\n        default:\n         return state;\n      }\n    };\n```", "```jsx\n    import React, { Component } from 'react';\n\n    class Home extends Component {\n      render() {\n        return <h1>I'm Home Component</h1>;\n      }\n    }\n\n    export default Home;\n```", "```jsx\n import React, { Component } from 'react';\n    import PropTypes from 'prop-types';\n    import logo from '../../images/logo.svg';\n\n    class Header extends Component {\n      static propTypes = {\n        title: PropTypes.string.isRequired,\n        url: PropTypes.string\n      };\n\n      render() {\n        const { \n          title = 'Welcome to React', \n          url = 'http://localhost:3000' \n        } = this.props;\n\n        return (\n          <header className=\"App-header\">\n            <a href={url}>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </a>\n            <h1 className=\"App-title\">{title}</h1>\n          </header>\n        );\n      }\n    }\n\n    export default Header;\n```", "```jsx\n    Index.getInitialProps = async () => {\n      const url = 'https://api.coinmarketcap.com/v1/ticker/';\n      const res = await axios.get(url);\n\n      return {\n        coins: res.data\n      };\n    };\n```", "```jsx\n    // Example 1: Returning an array of elements.\n render() {\n      // Now you don't need to wrap list items in an extra element\n      return [\n        <li key=\"1\">First item</li>,\n        <li key=\"2\">Second item</li>,\n        <li key=\"3\">Third item</li>,\n      ];\n    }\n\n    // Example 2: Returning a string\n    render() {\n      return 'Hello World!';\n    }\n```", "```jsx\n    // Example 1: Using empty tags <></>\n render() {\n      return (\n        <>\n          <ComponentA />\n          <ComponentB />\n          <ComponentC />\n        </>\n      );\n    }\n\n    // Example 2: Using React.Fragment\n    render() {\n      return (\n        <React.Fragment>\n          <h1>An h1 heading</h1>\n          Some text here.\n          <h2>An h2 heading</h2>\n          More text here.\n          Even more text here.\n        </React.Fragment>\n      );\n    }\n\n // Example 3: Importing Fragment\n    import React, { Fragment } from 'react';\n    ...\n    render() {\n      return (\n        <Fragment>\n          <h1>An h1 heading</h1>\n          Some text here.\n          <h2>An h2 heading</h2>\n          More text here.\n          Even more text here.\n        </Fragment>\n      );\n    }\n```", "```jsx\n    class ErrorBoundary extends React.Component {\n      constructor(props) {\n        super(props);\n\n        this.state = { \n          hasError: false \n        };\n      }\n\n      componentDidCatch(error, info) {\n        // Display fallback UI\n        this.setState({ \n          hasError: true \n        });\n\n        // You can also log the error to an error reporting service\n        logErrorToMyService(error, info);\n      }\n\n      render() {\n        if (this.state.hasError) {\n          // You can render any custom fallback UI\n          return <h1>Something went wrong.</h1>;\n        }\n\n        return this.props.children;\n      }\n    }\n\n    // **Then you can use it as a regular component:\n**    **render**() {\n   **   <ErrorBoundary>**\n        <MyComponent />\n      **</ErrorBoundary>\n**    }\n```", "```jsx\n   \"scripts\": {\n      \"start\": \"cross-env NODE_ENV=development webpack-dev-server --\n       mode development --open\",\n      \"start-production\": \"cross-env NODE_ENV=production webpack-dev-\n       server --mode production\"\n    }\n```", "```jsx\n import Home from './components/Home/Home';\n```", "```jsx\n // In Mac or Linux\n    app.use(\n      stylus.middleware({\n        src: __dirname + '/stylus',\n        dest: __dirname + '/public/css',\n        compile: (str, path) => {\n          return stylus(str)\n            .set('filename', path)\n            .set('compress', true);\n        }\n      })\n    );\n\n    // In Windows\n    app.use(\n      stylus.middleware({\n        src: __dirname + '\\stylus',\n        dest: __dirname + '\\public\\css',\n        compile: (str, path) => {\n          return stylus(str)\n            .set('filename', path)\n            .set('compress', true);\n        }\n      })\n    );\n\n    // This can be fixed by using path\n    import path from 'path';\n\n   // path.join will generate a valid path for Windows or Linux and Mac\n    app.use(\n      stylus.middleware({\n        src: path.join(__dirname, 'stylus'),\n        dest: path.join(__dirname, 'public', 'css'),\n        compile: (str, path) => {\n          return stylus(str)\n            .set('filename', path)\n            .set('compress', config().html.css.compress);\n        }\n      })\n    );\n```"]