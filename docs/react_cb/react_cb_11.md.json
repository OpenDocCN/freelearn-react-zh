["```jsx\nnpm install --save-dev webpack-node-externals webpack-dev-middleware webpack-hot-middleware webpack-hot-server-middleware webpack-merge babel-cli babel-preset-es2015\n```", "```jsx\n    \"scripts\": {\n      \"clean\": \"rm -rf dist/ && rm -rf public/app\",\n      \"start\": \"npm run clean & NODE_ENV=development \n BABEL_ENV=development \n nodemon src/server --watch src/server --watch src/shared -- \n      exec babel-node --presets es2015\",\n      \"start-analyzer\": \"npm run clean && NODE_ENV=development \n BABEL_ENV=development ANALYZER=true babel-node src/server\"\n    }\n```", "```jsx\n  // Webpack Configuration (Client & Server)\n  import clientConfig from './webpack/webpack.config.client';\n  import serverConfig from './webpack/webpack.config.server';\n\n export default [\n    clientConfig,\n    serverConfig\n  ];\n```", "```jsx\n  // Dependencies\n  import webpackMerge from 'webpack-merge';\n\n  // Webpack Configuration\n  import commonConfig from './webpack.config.common';\n  import {\n    context,\n    devtool,\n    entry,\n    name,\n    output,\n    optimization,\n    plugins,\n    target\n  } from './configuration';\n\n  // Type of Configuration\n  const type = 'client';\n\n  export default webpackMerge(commonConfig(type), {\n    context: context(type),\n    devtool,\n    entry: entry(type),\n    name: name(type),\n    output: output(type),\n    optimization,\n    plugins: plugins(type),\n    target: target(type)\n  });\n```", "```jsx\n // Dependencies\n  import webpackMerge from 'webpack-merge';\n\n  // Webpack Configuration\n  import commonConfig from './webpack.config.common';\n\n  // Configuration\n  import {\n    context,\n    entry,\n    externals,\n    name,\n    output,\n    plugins,\n    target\n  } from './configuration';\n\n  // Type of Configuration\n  const type = 'server';\n\n export default webpackMerge(commonConfig(type), {\n    context: context(type),\n    entry: entry(type),\n    externals: externals(type),\n    name: name(type),\n    output: output(type),\n    plugins: plugins(type),\n    target: target(type)\n  });\n```", "```jsx\n  // Configuration\n  import { module, resolve, mode } from './configuration';\n  export default type => ({\n    module: module(type),\n    resolve,\n    mode\n  });\n```", "```jsx\n  // Dependencies\n  import path from 'path';\n export default type => type === 'server'\n    ? path.resolve(__dirname, '../../src/server')\n    : path.resolve(__dirname, '../../src/client');\n```", "```jsx\n  // Environment\n  const isDevelopment = process.env.NODE_ENV !== 'production';\n\n export default type => {\n    if (type === 'server') {\n      return './render/serverRender.js';\n    }\n\n    const entry = [];\n\n    if (isDevelopment) {\n      entry.push(\n        'webpack-hot-middleware/client',\n        'react-hot-loader/patch'\n      );\n    }\n\n    entry.push('./index.jsx');\n\n    return entry;\n  };\n```", "```jsx\n  // Dependencies\n  import nodeExternals from 'webpack-node-externals';\n\n  export default () => [\n    nodeExternals({\n      whitelist: [/^redux\\/(store|modules)/]\n    })\n  ];\n```", "```jsx\n  // Dependencies\n  import ExtractTextPlugin from 'extract-text-webpack-plugin';\n\n // Environment\n  const isDevelopment = process.env.NODE_ENV !== 'production';\n\n  export default type => {\n    const rules = [\n      {\n        test: /\\.(js|jsx)$/,\n        use: 'babel-loader',\n        exclude: /node_modules/\n      }\n    ];\n\n    if (!isDevelopment || type === 'server') {\n      rules.push({\n        test: /\\.scss$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: [\n            'css-loader?minimize=true&modules=true&localIdentName=\n            [name]__[local]_[hash:base64]',\n            'sass-loader'\n          ]\n        })\n      });\n    } else {\n      rules.push({\n        test: /\\.scss$/,\n        use: [\n          {\n            loader: 'style-loader'\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              modules: true,\n              importLoaders: 1,\n              localIdentName: '[name]__[local]_[hash:base64]',\n              sourceMap: true,\n              minimize: true\n            }\n          },\n          {\n            loader: 'sass-loader'\n          }\n        ]\n      });\n    }\n\n    return {\n      rules\n    };\n  };\n```", "```jsx\n  export default type => type;\n```", "```jsx\n  // Dependencies\n  import path from 'path';\n\n export default type => {\n    if (type === 'server') {\n      return {\n        filename: 'server.js',\n        path: path.resolve(__dirname, '../../dist'),\n        libraryTarget: 'commonjs2'\n      };\n    }\n\n    return {\n      filename: '[name].bundle.js',\n      path: path.resolve(__dirname, '../../public/app'),\n      publicPath: '/'\n    };\n  };\n```", "```jsx\n  // Dependencies\n  import CompressionPlugin from 'compression-webpack-plugin';\n  import ExtractTextPlugin from 'extract-text-webpack-plugin';\n  import webpack from 'webpack';\n  import WebpackNotifierPlugin from 'webpack-notifier';\n  import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';\n\n // Environment\n  const isDevelopment = process.env.NODE_ENV !== 'production';\n\n  // Analyzer\n  const isAnalyzer = process.env.ANALYZER === 'true';\n\n export default type => {\n    const plugins = [\n      new ExtractTextPlugin({\n        filename: '../../public/css/style.css'\n      })\n    ];\n\n    if (isAnalyzer) {\n      plugins.push(\n        new BundleAnalyzerPlugin()\n      );\n    }\n\n    if (isDevelopment) {\n      plugins.push(\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.NoEmitOnErrorsPlugin(),\n        new WebpackNotifierPlugin({\n          title: 'CodeJobs'\n        })\n      );\n    } else {\n      plugins.push(\n        new CompressionPlugin({\n          asset: '[path].gz[query]',\n          algorithm: 'gzip',\n          test: /\\.js$|\\.css$|\\.html$/,\n          threshold: 10240,\n          minRatio: 0.8\n        })\n      );\n    }\n\n    return plugins;\n  };\n```", "```jsx\n  // Dependencies\n  import path from 'path';\n\n  export default {\n    extensions: ['.js', '.jsx'],\n    modules: [\n      'node_modules',\n      path.resolve(__dirname, '../../src/client'),\n      path.resolve(__dirname, '../../src/server')\n    ]\n  };\n```", "```jsx\n export default type => type === 'server' ? 'node' : 'web';\n```", "```jsx\n  // Dependencies\n  import React from 'react';\n  import { \n    BrowserRouter, \n    StaticRouter, \n    Switch, \n    Route \n  } from 'react-router-dom';\n\n // Components\n  import About from '@components/About';\n  import Home from '@components/Home';\n\n  export default ({ server, location, context = {} }) => {\n    const routes = (\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/about\" component={About} />\n      </Switch>\n    );\n\n    // Client Router\n    let router = (\n      <BrowserRouter>\n        {routes}\n      </BrowserRouter>\n    );\n\n    // Server Router\n    if (server) {\n      router = (\n        <StaticRouter location={location} context={context}>\n          {routes}\n        </StaticRouter>\n      );\n    }\n\n    return router;\n  };\n```", "```jsx\n  // Dependencies\n  import express from 'express';\n  import path from 'path';\n  import webpackDevMiddleware from 'webpack-dev-middleware';\n  import webpackHotMiddleware from 'webpack-hot-middleware';\n  import webpackHotServerMiddleware from 'webpack-hot-server-middleware';\n  import webpack from 'webpack';\n\n  // Utils\n  import { isMobile, isBot } from '@utils/device';\n\n  // Client Render\n  import clientRender from './render/clientRender';\n\n  // Webpack Configuration\n  import webpackConfig from '@webpack';\n\n  // Environment\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  // Express Application\n  const app = express();\n\n  // Webpack Compiler\n  const compiler = webpack(webpackConfig);\n\n  // Public directory\n  app.use(express.static(path.join(__dirname, '../../public')));\n\n  // Device Detection\n  app.use((req, res, next) => {\n    req.isMobile = isMobile(req.headers['user-agent']);\n    // We detect if a search bot is accessing...\n    req.isBot = isBot(req.headers['user-agent']);\n\n    next();\n  });\n\n  // Webpack Middleware\n  if (!isProduction) {\n    // Hot Module Replacement\n    app.use(webpackDevMiddleware(compiler));\n    app.use(webpackHotMiddleware(\n      compiler.compilers.find(compiler => compiler.name === 'client'))\n    );\n  } else {\n    // GZip Compression just for Production\n    app.get('*.js', (req, res, next) => {\n      req.url = `${req.url}.gz`;\n      res.set('Content-Encoding', 'gzip');\n      next();\n    });\n  }\n\n  // Client Side Rendering\n  app.use(clientRender());\n\n  if (isProduction) {\n    try {\n      // eslint-disable-next-line\n      const serverRender = require('../../dist/server.js').default; \n\n      app.use(serverRender());\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  // For Server Side Rendering on Development Mode\n  app.use(webpackHotServerMiddleware(compiler));\n\n // Disabling x-powered-by\n  app.disable('x-powered-by');\n\n  // Listen Port...\n  app.listen(3000);\n```", "```jsx\n  // HTML\n  import html from './html';\n\n  // Initial State\n  import initialState from './initialState';\n\n  export default function clientRender() {\n    return (req, res, next) => {\n      if (req.isBot) {\n        return next();\n      }\n\n      res.send(html({\n        title: 'Codejobs',\n        initialState: initialState(req)\n      }));\n    };\n  }\n```", "```jsx\n  // Dependencies\n  import React from 'react';\n  import { renderToString } from 'react-dom/server';\n  import { Provider } from 'react-redux';\n\n  // Redux Store\n  import configureStore from '@configureStore';\n\n  // Components\n  import App from '../../client/App';\n\n  import html from './html';\n\n  // Initial State\n  import initialState from './initialState';\n\n  export default function serverRender() {\n    return (req, res, next) => {\n      // Configuring Redux Store\n      const store = configureStore(initialState(req));\n\n      const markup = renderToString(\n        <Provider store={store}>\n          <App\n            server\n            location={req.url}\n          />\n        </Provider>\n      );\n\n      res.send(html({\n        title: 'Codejobs',\n        markup,\n        initialState: initialState(req)\n      }));\n    };\n  }\n```", "```jsx\n  export function isBot(ua) {\n    const b = /curl|bot|googlebot|google|baidu|bing|msn|duckduckgo|teoma|slurp|yandex|crawler|spider|robot|crawling/i;\n    return b.test(ua);\n  }\n```", "```jsx\n    curl http://localhost:3000\n```", "```jsx\n    ReferenceError: window is not defined\n```", "```jsx\n    export function isBrowser() {\n      return typeof window !== 'undefined';\n    }\n```", "```jsx\n const store = isBrowser() ? configureStore(window.initialState) : {};\n```", "```jsx\n    npm install axios babel-preset-stage-0 react-router-dom redux-devtools-extension redux-thunk\n```", "```jsx\n  import express from 'express';\n\n  const router = express.Router();\n\n  // Mock data, this should come from a database....\n  const todo = [\n    {\n      id: 1,\n      title: 'Go to the Gym'\n    },\n    {\n      id: 2,\n      title: 'Dentist Appointment'\n    },\n    {\n      id: 3,\n      title: 'Finish homework'\n    }\n  ];\n\n  router.get('/todo/list', (req, res, next) => {\n    res.json({\n      response: todo\n    });\n  });\n\n  export default router;\n```", "```jsx\n  ...\n  // Controllers\n  import apiController from './controllers/api';\n  ...\n  // Express Application\n  const app = express();\n\n  // Webpack Compiler\n  const compiler = webpack(webpackConfig);\n\n  // Routes\n  app.use('/api', apiController);\n  ...\n```", "```jsx\n  // Dependencies\n  import React from 'react';\n  import { renderToString } from 'react-dom/server';\n  import { Provider } from 'react-redux';\n  import { matchPath } from 'react-router-dom';\n\n  // Redux Store\n  import configureStore from '@configureStore';\n\n  // Components\n  import App from '../../client/App';\n\n  // HTML\n  import html from './html';\n\n  // Initial State\n  import initialState from './initialState';\n\n  // Routes\n  import routes from '@shared/routes';\n\n  export default function serverRender() {\n    return (req, res, next) => {\n      // Configuring Redux Store\n      const store = configureStore(initialState(req));\n\n      // Getting the promises from the components which has  \n      // initialAction.\n      const promises = routes.paths.reduce((promises, route) => {\n        if (matchPath(req.url, route) && route.component && route.component.initialAction) {          \npromises.push(Promise.resolve(store.dispatch(route.component.initialAction())));\n        }\n\n        return promises;\n      }, []);\n\n      // Resolving our promises\n      Promise.all(promises)\n        .then(() => {\n          // Getting Redux Initial State\n          const initialState = store.getState();\n\n          // Rendering with SSR\n          const markup = renderToString(\n            <Provider store={store}>\n              <App\n                server\n                location={req.url}\n              />\n            </Provider>\n          );\n\n          // Sending our HTML code.\n          res.send(html({\n            title: 'Codejobs',\n            markup,\n            initialState\n          }));\n        })\n        .catch(e => {\n          // eslint-disable-line no-console\n          console.log('Promise Error: ', e); \n        });\n    };\n  }\n```", "```jsx\n  // Actions\n  export const FETCH_TODO = {\n    request: () => 'FETCH_TODO_REQUEST',\n    success: () => 'FETCH_TODO_SUCCESS'\n  };\n```", "```jsx\n  // Base Actions\n  import { request, received } from '@baseActions';\n\n  // Api\n  import api from '../api';\n\n  // Action Types\n  import { FETCH_TODO } from './actionTypes';\n\n  export const fetchTodo = () => dispatch => {\n    const action = FETCH_TODO;\n    const { fetchTodo } = api;\n\n    dispatch(request(action));\n\n    return fetchTodo()\n      .then(response => dispatch(received(action, response.data)));\n  };\n```", "```jsx\n  // Base Actions\n  export const request = ACTION => ({\n    type: ACTION.request()\n  });\n\n  export const received = (ACTION, data) => ({\n    type: ACTION.success(),\n    payload: data\n  });\n```", "```jsx\n export const API = Object.freeze({\n    TODO: 'api/todo/list'\n  });\n```", "```jsx\n  // Dependencies\n  import axios from 'axios';\n\n  // Configuration\n  import config from '@configuration';\n\n  // Utils\n  import { isBrowser } from '@utils/frontend';\n\n  // Constants\n  import { API } from './constants';\n\n  class Api {\n    static fetchTodo() {\n      // For Node (SSR) we have to specify our base domain  \n      // (http://localhost:3000/api/todo/list)\n // For Client Side Render just /api/todo/list.\n      const url = isBrowser()\n        ? API.TODO\n        : `${config.baseUrl}/${API.TODO}`;\n\n      return axios(url);\n    }\n  }\n\n export default Api;\n```", "```jsx\n  // Dependencies\n  import { connect } from 'react-redux';\n  import { bindActionCreators } from 'redux';\n\n  // Components\n  import Layout from '../components/Layout';\n\n  // Actions\n  import { fetchTodo } from '../actions';\n\n  export default connect(({ todo }) => ({\n    todo: todo.list\n  }), dispatch => bindActionCreators(\n    {\n      fetchTodo\n    },\n    dispatch\n  ))(Layout);\n```", "```jsx\n  // Dependencies\n  import React from 'react';\n\n  // Shared Components\n  import Header from '@layout/Header';\n  import Content from '@layout/Content';\n  import Footer from '@layout/Footer';\n\n  // Componenets\n  import Todo from '../components/Todo';\n\n  const Layout = props => (\n    <main>\n      <Header {...props} />\n      <Content>\n        <Todo {...props} />\n      </Content>\n      <Footer {...props} />\n    </main>\n  );\n  export default Layout;\n```", "```jsx\n  // Utils\n  import { getNewState } from '@utils/frontend';\n\n  // Action Types\n  import { FETCH_TODO } from '../actions/actionTypes';\n\n  // Initial State\n  const initialState = {\n    list: []\n  };\n  export default function todoReducer(state = initialState, action) {\n    switch (action.type) {\n      case FETCH_TODO.success(): {\n        const { payload: { response = [] } } = action;\n\n        return getNewState(state, {\n          list: response\n        });\n      }\n\n      default:\n        return state;\n    }\n  }\n```", "```jsx\n  // Dependencies\n  import React, { Component } from 'react';\n\n  // Utils\n  import { isFirstRender } from '@utils/frontend';\n\n  // Styles\n  import styles from './Todo.scss';\n\n  class Todo extends Component {\n    componentDidMount() {\n      const { fetchTodo } = this.props;\n\n      fetchTodo();\n    }\n\n    render() {\n      const {\n        todo\n      } = this.props;\n\n      if (isFirstRender(todo)) {\n        return null;\n      }\n\n      return (\n        <div>\n          <div className={styles.Todo}>\n            <ol>\n              {todo.map((item, key) => \n                <li key={key}>{item.title}</li>)}\n            </ol>\n          </div>\n        </div>\n      );\n    }\n  }\n\n export default Todo;\n```", "```jsx\n  // Dependencies\n  import React from 'react';\n\n  // Actions\n  import { fetchTodo } from './actions';\n\n  // Main Container\n  import Container from './container';\n\n // Main Component\n  const Main = props => <Container {...props} />;\n\n  // Initial Action\n  Main.initialAction = () => fetchTodo();\n\n export default Main;\n```", "```jsx\n mkdir nextjs\n cd nextjs\n npm init -y\n mkdir src\n```", "```jsx\n npm install next react react-dom axios node-sass @zeit/next-sass\n```", "```jsx\n  \"scripts\": {\n    \"start\": \"next start src\",\n    \"dev\": \"next src\",\n    \"build\": \"next build src\"\n  }\n```", "```jsx\n cd src && mkdir pages\n```", "```jsx\n const Index = () => <h1>Home</h1>;\n\n  export default Index;\n```", "```jsx\n npm run dev\n```", "```jsx\n const About = () => <h1>About</h1>;\n\n  export default About;\n```", "```jsx\n const withSass = require('@zeit/next-sass');\n\n  module.exports = withSass();\n```", "```jsx\n  import Document, { Head, Main, NextScript } from 'next/document';\n\n  export default class MyDocument extends Document {\n    render() {\n      return (\n        <html>\n          <Head>\n            <title>Codejobs with Next</title>\n            <link \n rel=\"stylesheet\" \n href=\"/_next/static/style.css\" />\n          </Head>\n\n          <body>\n            <Main />\n            <NextScript />\n          </body>\n        </html>\n      );\n    }\n  }\n```", "```jsx\n  import Link from 'next/link';\n  import './Navbar.scss';\n\n  const Navbar = () => (\n    <div className=\"navbar\">\n      <ul>\n        <li>Codejobs</li>\n        <li><Link href=\"/\">Home</Link></li>\n        <li><Link href=\"/about\">About</Link></li>\n      </ul>\n    </div>\n  )\n export default Navbar;\n```", "```jsx\n .navbar {\n    background: black;\n    color: white;\n    height: 60px;\n\n    ul {\n      padding: 0;\n      margin: 0;\n      list-style: none;\n\n      li {\n        display: inline-block;\n        margin-left: 30px;\n        text-align: center;\n\n        a {\n          display: block;\n          color: white;\n          line-height: 60px;\n          width: 150px;\n\n          &:hover {\n            background: white;\n            color: black;\n          }\n        }\n      }\n    }\n  }\n```", "```jsx\n  import Navbar from './Navbar';\n  import './Layout.scss';\n\n  const Layout = ({ children }) => (\n    <div className=\"layout\">\n      <Navbar />\n\n      <div className=\"wrapper\">\n        {children}\n      </div>\n    </div>\n  )\n\n  export default Layout;\n```", "```jsx\n  body {\n    font-family: verdana;\n    padding: 0;\n    margin: 0;\n  }\n\n  .layout {\n    a {\n      text-decoration: none;\n    }\n\n    .wrapper {\n      margin: 0 auto;\n      width: 96%;\n    }\n  }\n```", "```jsx\n  import axios from 'axios';\n  import Layout from '../components/Layout';\n  import Coins from '../components/Coins';\n\n  const Index = ({ coins }) => (\n    <Layout>\n      <div className=\"index\">\n        <Coins coins={coins} />\n      </div>\n    </Layout>\n  );\n\n  Index.getInitialProps = async () => {\n    const url = 'https://api.coinmarketcap.com/v1/ticker/';\n    const res = await axios.get(url);\n\n    return {\n      coins: res.data\n    };\n  };\n\n export default Index;\n```", "```jsx\n  // Dependencies\n  import React, { Component } from 'react';\n  import { array } from 'prop-types';\n\n  // Styles\n  import './Coins.scss';\n\n  const Coins = ({ coins }) => (\n    <div className=\"Coins\">\n      <h1>Top 100 Coins</h1>\n\n      <ul>\n        {coins.map((coin, key) => (\n          <li key={key}>\n            <span className=\"left\">{coin.rank} {coin.name} <strong>\n            {coin.symbol}</strong></span>\n            <span className=\"right\">${coin.price_usd}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n\n  Coins.propTypes = {\n    coins: array\n  };\n\n export default Coins;\n```", "```jsx\n .Coins {\n    h1 {\n      text-align: center;\n    }\n\n    ul {\n      margin: 0 auto;\n      margin-bottom: 20px;\n      padding: 0;\n      list-style: none;\n      width: 400px;\n\n      li {\n        border-bottom: 1px solid black;\n        text-align: left;\n        padding: 10px;\n        display: flex;\n        justify-content: space-between;\n\n        a {\n          display: block;\n          color: #333;\n          text-decoration: none;\n          background: #5ed4ff;\n\n          &:hover {\n            color: #333;\n            text-decoration: none;\n            background: #baecff;\n          }\n        }\n      }\n    }\n  }\n```"]