["```jsx\nnpm install --save-dev jest jsdom enzyme enzyme-adapter-react-16 identity-obj-proxy\n```", "```jsx\n  {\n    \"name\": \"react-pro\",\n    \"version\": \"1.0.0\",\n    \"scripts\": {\n      \"clean\": \"rm -rf dist/ && rm -rf public/app\",\n      \"start\": \"npm run clean & NODE_ENV=development \n      BABEL_ENV=development nodemon src/server --watch src/server --\n      watch src/shared --exec babel-node --presets es2015\",\n      \"start-analyzer\": \"npm run clean && NODE_ENV=development \n      BABEL_ENV=development ANALYZER=true babel-node src/server\",\n      \"test\": \"node scripts/test.js src --env=jsdom\",\n      \"coverage\": \"node scripts/test.js src --coverage --env=jsdom\"\n    },\n    \"jest\": {\n      \"setupTestFrameworkScriptFile\": \"\n <rootDir>/config/jest/setupTestFramework.js\",\n      \"collectCoverageFrom\": [\n        \"src/**/*.{js,jsx}\"\n      ],\n      \"setupFiles\": [\n        \"<rootDir>/config/jest/browserMocks.js\"\n      ],\n      \"moduleNameMapper\": {\n        \"^.+\\\\.(scss)$\": \"identity-obj-proxy\"\n      }\n    },\n    \"author\": \"Carlos Santana\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n      \"axios\": \"^0.18.0\",\n      \"babel-preset-stage-0\": \"^6.24.1\",\n      \"express\": \"^4.15.4\",\n      \"react\": \"^16.3.2\",\n      \"react-dom\": \"^16.3.2\",\n      \"react-redux\": \"^5.0.6\",\n      \"react-router-dom\": \"^4.2.2\",\n      \"redux\": \"^4.0.0\",\n      \"redux-devtools-extension\": \"^2.13.2\",\n      \"redux-thunk\": \"^2.2.0\"\n    },\n    \"devDependencies\": {\n      \"babel-cli\": \"^6.26.0\",\n      \"babel-core\": \"^6.26.0\",\n      \"babel-eslint\": \"^8.2.3\",\n      \"babel-loader\": \"^7.1.2\",\n      \"babel-plugin-module-resolver\": \"^3.1.1\",\n      \"babel-preset-env\": \"^1.6.0\",\n      \"babel-preset-es2015\": \"^6.24.1\",\n      \"babel-preset-react\": \"^6.24.1\",\n      \"compression-webpack-plugin\": \"^1.0.0\",\n      \"css-loader\": \"^0.28.5\",\n      \"enzyme\": \"^3.3.0\",\n      \"enzyme-adapter-react-16\": \"^1.1.1\",\n      \"eslint\": \"^4.5.0\",\n      \"eslint-plugin-babel\": \"^5.1.0\",\n      \"eslint-plugin-import\": \"^2.7.0\",\n      \"eslint-plugin-jsx-a11y\": \"^6.0.2\",\n      \"eslint-plugin-react\": \"^7.8.2\",\n      \"eslint-plugin-standard\": \"^3.0.1\",\n      \"extract-text-webpack-plugin\": \"4.0.0-beta.0\",\n      \"husky\": \"^0.14.3\",\n      \"identity-obj-proxy\": \"^3.0.0\",\n      \"jest\": \"^23.1.0\",\n      \"jsdom\": \"^11.11.0\",\n      \"node-sass\": \"^4.5.3\",\n      \"nodemon\": \"^1.17.4\",\n      \"react-hot-loader\": \"^4.2.0\",\n      \"redux-mock-store\": \"^1.5.1\",\n      \"sass-loader\": \"^7.0.1\",\n      \"style-loader\": \"^0.21.0\",\n      \"webpack\": \"^4.8.3\",\n      \"webpack-bundle-analyzer\": \"^2.9.0\",\n      \"webpack-dev-middleware\": \"^3.1.3\",\n      \"webpack-hot-middleware\": \"^2.18.2\",\n      \"webpack-hot-server-middleware\": \"^0.5.0\",\n      \"webpack-merge\": \"^4.1.0\",\n      \"webpack-node-externals\": \"^1.6.0\",\n      \"webpack-notifier\": \"^1.6.0\"\n    }\n  }\n```", "```jsx\n  import { configure } from 'enzyme';\n  import Adapter from 'enzyme-adapter-react-16';\n\n  configure({ adapter: new Adapter() });\n```", "```jsx\n  // Browser Mocks\n  const requestAnimationFrameMock = callback => {\n    setTimeout(callback, 0);\n  };\n\n  Object.defineProperty(window, 'requestAnimationFrame', {\n    value: requestAnimationFrameMock\n  });\n\n  const localStorageMock = (() => {\n    let store = {}\n\n    return {\n      getItem: key => store[key] || null,\n      setItem: (key, value) => store[key] = value.toString(),\n      removeItem: key => delete store[key],\n      clear: () => store = {}\n    };\n  })();\n\n  Object.defineProperty(window, 'localStorage', {\n    value: localStorageMock\n  });\n```", "```jsx\n  // Set the NODE_ENV to test\n  process.env.NODE_ENV = 'test';\n\n  // Requiring jest\n  const jest = require('jest');\n\n  // Getting the arguments from the terminal\n  const argv = process.argv.slice(2);\n\n  // Runing Jest passing the arguments\n  jest.run(argv);\n```", "```jsx\n  import React from 'react';\n  import styles from './Home.scss';\n\n  const Home = props => (\n    <h1 className={styles.Home}>Hello {props.name || 'World'}</h1>\n  );\n\n export default Home;\n```", "```jsx\n  // Dependencies\n  import React from 'react';\n  import { shallow } from 'enzyme';\n\n  // Component to test...\n  import Home from './index';\n\n  describe('Home', () => {\n    const subject = shallow(<Home />);\n    const subjectWithProps = shallow(<Home name=\"Carlos\" />);\n\n    it('should render Home component', () => {\n      expect(subject.length).toBe(1);\n    });\n\n    it('should render by default Hello World', () => {\n      expect(subject.text()).toBe('Hello World');\n    });\n\n    it('should render the name prop', () => {\n      expect(subjectWithProps.text()).toBe('Hello Carlos');\n    });\n\n    it('should has .Home class', () => {\n      expect(subject.find('h1').hasClass('Home')).toBe(true);\n    });\n  });\n```", "```jsx\n    npm test\n```", "```jsx\n npm run coverage\n```", "```jsx\n    npm install // This is to install the previous packages\n    npm install redux-mock-store moxios redux-thunk\n```", "```jsx\n  // Dependencies\n  import { connect } from 'react-redux';\n  import { bindActionCreators } from 'redux';\n\n // Components\n  import Layout from '../components/Layout';\n\n  // Actions\n  import { fetchTodo } from '../actions';\n\n  export default connect(({ todo }) => ({\n    todo: todo.list\n  }), dispatch => bindActionCreators(\n    {\n      fetchTodo\n    },\n    dispatch\n  ))(Layout);\n```", "```jsx\n  // Dependencies\n  import React from 'react';\n  import { shallow } from 'enzyme';\n  import configureStore from 'redux-mock-store';\n\n  // Actions\n  import { fetchTodo } from '../actions';\n\n  // Testable Container\n  import Container from './index';\n\n  // Mocking Initial State\n  const mockInitialState = {\n    todo: {\n      list: [\n        {\n          id: 1,\n          title: 'Go to the Gym'\n        },\n        {\n          id: 2,\n          title: 'Dentist Appointment'\n        },\n        {\n          id: 3,\n          title: 'Finish homework'\n        }\n      ]\n    }\n  };\n\n  // Configuring Mock Store\n  const mockStore = configureStore()(mockInitialState);\n\n  // Mocking the Actions\n  jest.mock('../actions', () => ({\n    fetchTodo: jest.fn().mockReturnValue({ type: 'mock-FETCH_TODO_SUCCESS' })\n  }));\n\n  describe('Todo Container', () => {\n    let mockParams;\n    let container;\n\n    beforeEach(() => {\n      fetchTodo.mockClear();\n      mockParams = {};\n      mockStore.clearActions();\n      container = shallow(<Container {...mockParams} store={mockStore} />);\n    });\n\n    it('should dispatch fetchTodo', () => {\n      const { fetchTodo } = container.props();\n\n      fetchTodo();\n\n      const actions = mockStore.getActions();\n\n      expect(actions).toEqual([{ type: 'mock-FETCH_TODO_SUCCESS' }]);\n    });\n\n    it('should map todo and get the todo list from Initial State', () => {\n      const { todo } = container.props();\n      const { todo: { list }} = mockInitialState;\n\n      expect(todo).toEqual(list);\n    });\n  });\n```", "```jsx\n  // Base Actions\n  import { request, received } from '@baseActions';\n\n // Api\n  import api from '../api';\n\n  // Action Types\n  import { FETCH_TODO } from './actionTypes';\n\n  export const fetchTodo = () => dispatch => {\n    const action = FETCH_TODO;\n    const { fetchTodo } = api;\n\n    dispatch(request(action));\n\n    return fetchTodo()\n      .then(response => dispatch(received(action, response.data)));\n  };\n```", "```jsx\n  // Actions\n export const FETCH_TODO = {\n    request: () => 'FETCH_TODO_REQUEST',\n    success: () => 'FETCH_TODO_SUCCESS'\n  };\n```", "```jsx\n  // Dependencies\n  import configureMockStore from 'redux-mock-store';\n  import thunk from 'redux-thunk';\n  import moxios from 'moxios';\n\n  // Action\n  import { fetchTodo } from './index';\n\n  // Action Types\n  import { FETCH_TODO } from './actionTypes';\n\n  // Configuring Store with Thunk middleware\n  const mockStore = configureMockStore([thunk]);\n\n  // Response Mock\n  const todoResponseMock = [\n    {\n      id: 1,\n      title: 'Go to the Gym'\n    },\n    {\n      id: 2,\n      title: 'Dentist Appointment'\n    },\n    {\n      id: 3,\n      title: 'Finish homework'\n    }\n  ];\n\n  describe('fetchTodo action', () => {\n    beforeEach(() => {\n      moxios.install();\n    });\n\n    afterEach(() => {\n      moxios.uninstall();\n    });\n\n    it('should fetch the Todo List', () => {\n      moxios.wait(() => {\n        const req = moxios.requests.mostRecent();\n\n        req.respondWith({\n          status: 200,\n          response: todoResponseMock\n        });\n      });\n\n      const expectedActions = [\n        {\n          type: FETCH_TODO.request()\n        },\n        {\n          type: FETCH_TODO.success(),\n          payload: todoResponseMock\n        }\n      ];\n\n      const store = mockStore({ todo: [] })\n\n      return store.dispatch(fetchTodo()).then(() => {\n        expect(store.getActions()).toEqual(expectedActions);\n      });\n    });\n  });\n```", "```jsx\n  // Utils\n  import { getNewState } from '@utils/frontend';\n\n // Action Types\n  import { FETCH_TODO } from '../actions/actionTypes';\n\n  // Initial State\n  const initialState = {\n    list: []\n  };\n\n  export default function todoReducer(state = initialState, action) {\n    switch (action.type) {\n      case FETCH_TODO.success(): {\n        const { payload: { response = [] } } = action;\n\n        return getNewState(state, {\n          list: response\n        });\n      }\n\n      default:\n        return state;\n    }\n  }\n```", "```jsx\n  // Reducer\n  import todo from './index';\n\n  // Action Types\n  import { FETCH_TODO } from '../actions/actionTypes';\n\n // Initial State\n  const initialState = {\n    list: []\n  };\n\n  describe('Todo List Reducer', () => {\n    it('should return the initial state', () => {\n      const expectedInitialState = todo(undefined, {});\n\n      expect(expectedInitialState).toEqual(initialState);\n    });\n\n    it('should handle FETCH_TODO when is success', () => {\n      const action = {\n        type: FETCH_TODO.success(),\n        payload: {\n          response: [\n            {\n              id: 1,\n              title: 'Go to the Gym'\n            },\n            {\n              id: 2,\n              title: 'Dentist Appointment'\n            },\n            {\n              id: 3,\n              title: 'Finish homework'\n            }\n          ]\n        }\n      };\n\n      const expectedState = {\n        list: action.payload.response\n      };\n\n      const state = todo(initialState, action);\n\n      expect(state).toEqual(expectedState);\n    });\n  });\n```", "```jsx\nnpm install --save-dev redux-devtools-extension \n```", "```jsx\n  // Dependencies\n  import { createStore, applyMiddleware } from 'redux';\n  import thunk from 'redux-thunk';\n  import { composeWithDevTools } from 'redux-devtools-extension';\n\n  // Root Reducer\n  import rootReducer from '@reducers';\n\n export default function configureStore({ initialState, appName, \n  reducer }) {\n    const middleware = [\n      thunk\n    ];\n\n    return createStore(\n      rootReducer,\n      initialState,\n      composeWithDevTools(applyMiddleware(...middleware))\n    );\n  }\n```", "```jsx\n  import React, { Component } from 'react';\n  import styles from './Calculator.scss';\n\n  class Calculator extends Component {\n    state = {\n      number1: 0,\n      number2: 0,\n      result: 0\n    };\n\n    handleOnChange = e => {\n      const { target: { value, name } } = e;\n\n      this.setState({\n        [name]: value\n      });\n    }\n\n    handleResult = () => {\n      this.setState({\n        result: Number(this.state.number1) + Number(this.state.number2)\n      });\n    }\n\n    render() {\n      return (\n        <div className={styles.Calculator}>\n          <h1>Calculator</h1>\n\n          <input\n            name=\"number1\"\n            value={this.state.number1}\n            onChange={this.handleOnChange}\n          />\n\n          {' + '}\n\n          <input\n            name=\"number2\"\n            value={this.state.number2}\n            onChange={this.handleOnChange}\n          />\n\n          <button onClick={this.handleResult}>\n            =\n          </button>\n\n          <input\n            name=\"result\"\n            value={this.state.result}\n          />\n        </div>\n      );\n    }\n  }\n\n  export default Calculator;\n```", "```jsx\n **import** React **from** 'react';\n  **import** { Switch, Route } **from** 'react-router-dom';\n\n **// Components**\n  **import** Calculator **from** '../../client/calculator';\n\n  **const** paths = [\n    {\n      **component**: Calculator,\n      **exact**: true,\n      **path**: '/'\n    }\n  ];\n\n  **const** all = (\n **   <Switch>**\n     ** <Route** **exact** **path**={paths[0].**path**} **component**={paths[0].**component**} />\n    **</Switch>**\n  );\n\n **export default** {\n    paths,\n    all\n  }; \n```", "```jsx\n  .Calculator {\n    padding: 100px;\n\n    input {\n        width: 50px;\n        height: 50px;\n        padding: 40px;\n        font-size: 24px;\n    }\n\n    button {\n        padding: 10px;\n        margin: 10px;\n    }\n  }\n```", "```jsx\n ** // Dependencies**\n  **import** React **from** 'react';\n  **import** { shallow } **from** 'enzyme';\n\n  **// Component to test...**\n  **import** Calculator **from** './index';\n\n  **describe**('Calculator', () => {\n    **const** subject = **shallow**(<Calculator />);\n\n   ** it**('should render Calculator component', () => {\n      **expect**(subject.**length**).**toBe**(1);\n    });\n\n   ** it**('should modify the state onChange', () => {\n      subject.**find**('input[name=\"number1\"]').**simulate**('change', {\n        **target**: {\n          **name**: 'number1',\n          **value**: 5\n        }\n      });\n\n      subject.**find**('input[name=\"number2\"]').**simulate**('change', {\n        **target**: {\n          **name**: 'number2',\n          **value**: 15\n        }\n      });\n\n      **// Getting the values of the number1 and number2 states**\n      **expect**(subject.**state**('number1')).**toBe**(5);\n      **expect**(subject.**state**('number2')).**toBe**(15);\n    });\n\n   ** it**('should perform the sum when the user clicks the = button', \n    () => {\n      **// Simulating the click event**\n      subject.**find**('button').**simulate**('click');\n\n      **// Getting the result value**\n      **expect**(subject.**state**('result')).**toBe**(20);\n    });\n  }); \n```"]