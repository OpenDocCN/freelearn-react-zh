- en: Adding Routes to Our Application with React Router
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React Router在我们的应用程序中添加路由
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下示例：
- en: Implementing React Router v4
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现React Router v4
- en: Creating nested routes and adding parameters to our paths
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建嵌套路由并向我们的路径添加参数
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, we are going to learn how to add dynamic routes in our project
    using React Router v4.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用React Router v4在我们的项目中添加动态路由。
- en: Implementing React Router v4
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现React Router v4
- en: React, unlike Angular, is a library instead of a framework, meaning specific
    functionalities, for example, routing or the `propTypes`, are not part of the
    React core. Instead, routing is handled by a third-party library called React
    Router.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与Angular不同，React是一个库而不是一个框架，这意味着特定功能，例如路由或`propTypes`，不是React核心的一部分。相反，路由由一个名为React
    Router的第三方库处理。
- en: Getting ready
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the code that we did in the *Implementing Airbnb React/JSX Style
    G**uide *recipe in [Chapter 3](2a859e8f-7f11-4696-9e31-7443484a23af.xhtml)*, Handling
    Events, Binding, and Useful React Packages *(`Repository:` `Chapter03/Recipe4/airbnb`)
    to enable linter validation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们在*实施Airbnb React/JSX样式指南*（`Repository：` `Chapter03/Recipe4/airbnb`）中的代码来启用linter验证。
- en: 'The first thing we need to do is to install React Router v4, and we can do
    it with this command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是安装React Router v4，我们可以使用以下命令来完成：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You probably are confused about why we are installing `react-router-dom` instead
    of `react-router`. React Router contains all the common components of `react-router-dom`
    and `react-router-native`. That means that if you are using React for the web,
    you should use `react-router-dom`, and if you are using React Native, you need
    to use `react-router-native`. The `react-router-dom` package was created originally
    to contain version 4, and `react-router` was using version 3\. `react-router-dom`
    has some improvements over `react-router`. They are listed here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会对我们为什么安装`react-router-dom`而不是`react-router`感到困惑。React Router包含了`react-router-dom`和`react-router-native`的所有常见组件。这意味着如果您在Web上使用React，应该使用`react-router-dom`，如果您在使用React
    Native，则需要使用`react-router-native`。`react-router-dom`包最初是为了包含版本4，而`react-router`使用的是版本3。`react-router-dom`比`react-router`有一些改进。它们在这里列出：
- en: Improved `<Link>` component (which renders an `<a>`).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的`<Link>`组件（渲染为`<a>`）。
- en: Includes `<BrowserRouter>`, which interacts with the browser's `window.history`.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`<BrowserRouter>`，它与浏览器的`window.history`交互。
- en: Includes `<NavLink>`, which is a `<Link>` wrapper that knows whether it's active
    or not.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`<NavLink>`，它是一个`<Link>`包装器，知道它是否处于活动状态。
- en: Includes `<HashRouter>`, which uses the hash in the URL to render the components.
    If you have one static page, you should use this component instead of `<BrowserRouter>`.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`<HashRouter>`，它使用URL中的哈希来渲染组件。如果您有一个静态页面，应该使用这个组件而不是`<BrowserRouter>`。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we are going to display some components based on the routes:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将根据路由显示一些组件：
- en: We need to create four functional components (`About`, `Contact`, `Home`, and
    `Error 404`) and name them as `index.jsx` in their directories.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建四个功能组件（`About`，`Contact`，`Home`和`Error 404`）并将它们命名为它们目录中的`index.jsx`。
- en: 'Create the `Home` component:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Home`组件：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'File: src/components/Home/index.jsx'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Home/index.jsx
- en: 'Create the `About` component:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`About`组件：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'File: src/components/About/index.jsx'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/About/index.jsx
- en: 'Create the `Contact` component:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Contact`组件：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'File: src/components/Contact/index.jsx'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Contact/index.jsx
- en: 'Create the `Error 404` component:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Error 404`组件：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'File: src/components/Error/404.jsx'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Error/404.jsx
- en: 'In our `src/index.js` file, we need to include our routes, which we are going
    to create in the next step. We need to import the `BrowserRouter` object from
    `react-router-dom`, and we can rename it Router:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`src/index.js`文件中，我们需要包含我们将在下一步创建的路由。我们需要从`react-router-dom`中导入`BrowserRouter`对象，并将其重命名为Router：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'File: src/index.js'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/index.js
- en: 'Now we need to create our `src/routes.jsx` file, to which we are going to import
    our `App` and `Home` components, and, using the `Route` component, we are going
    to add a route to execute our `Home` component when the user accesses root (/):'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要创建`src/routes.jsx`文件，我们将在其中导入我们的`App`和`Home`组件，并使用`Route`组件为用户访问根路径（/）时添加一个路由来执行我们的`Home`组件：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'File: src/routes.jsx'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/routes.jsx
- en: 'After that, we need to modify our `App.jsx` file to render the route components
    as children:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要修改我们的`App.jsx`文件，将路由组件渲染为子组件：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'File: src/components/App.jsx'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/App.jsx
- en: 'If you run your application, you will see the `Home` component in the root
    (`/`):'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你运行你的应用程序，你会在根路径（/）看到`Home`组件：
- en: '![](assets/87f4c682-e1d0-4b4c-8f68-63b72a9368f4.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/87f4c682-e1d0-4b4c-8f68-63b72a9368f4.png)'
- en: 'Now, let''s add our `Error 404` when the user tries to access to any other
    route:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在用户尝试访问任何其他路由时添加我们的`Error 404`：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'File: src/routes.jsx'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/routes.jsx
- en: 'If you run the application, you will see that it is rendering both components
    (`Home` and `Error 404`). You are probably wondering why:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你运行应用程序，你会看到它同时渲染了两个组件（`Home`和`Error 404`）。你可能想知道为什么：
- en: '![](assets/734a8cf8-4f44-4787-99ad-262483be57aa.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/734a8cf8-4f44-4787-99ad-262483be57aa.png)'
- en: 'It''s because we need to use the `<Switch>` component to execute just one component
    if it matches the path. For this, we need to import the `Switch` component and
    add it as a wrapper in our routes:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是因为我们需要使用`<Switch>`组件来执行路径匹配时的一个组件。为此，我们需要导入`Switch`组件，并将其作为路由的包装器添加进去：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'File: src/routes.jsx'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/routes.jsx
- en: 'Now, if we go to the root (`/`) we will see our `Home` component, and the `Error404`
    won''t be executed at the same time (it will just be executed the `Home` component),
    but if we go to `/somefakeurl`, we will see that the `Home` component is executed
    as well, and this is an issue:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们去到根路径（/），我们会看到我们的`Home`组件，而`Error404`不会同时执行（只会执行`Home`组件），但如果我们去到`/somefakeurl`，我们会看到`Home`组件也被执行了，这是一个问题：
- en: '![](assets/36df8ae5-0ef3-4ab7-8a11-fbb6d9f72d49.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/36df8ae5-0ef3-4ab7-8a11-fbb6d9f72d49.png)'
- en: 'To fix this problem, we need to add the exact prop in the route that we want
    to match exactly. The problem is that `/somefakeurl` will match our root (`/`),
    but if we want to be very specific about the paths, we need to add the exact prop
    to our `Home` route:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要在我们想要精确匹配的路由中添加exact属性。问题在于`/somefakeurl`会匹配我们的根路径（/），但如果我们想要非常具体地匹配路径，我们需要在`Home`路由中添加exact属性：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now if you go to `/somefakeurl`, you will be able to see the `Error404` component:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在如果你去到`/somefakeurl`，你将能够看到`Error404`组件：
- en: '![](assets/9abed89f-2445-4d52-b9f5-0e08c7c53b9e.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9abed89f-2445-4d52-b9f5-0e08c7c53b9e.png)'
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As you can see, it is very easy to implement the React Router library. Now
    we can add more routes for our `About` (`/about`) and `Contact` (`/contact`) components:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，实现React Router库非常容易。现在我们可以为我们的`About`（`/about`）和`Contact`（`/contact`）组件添加更多的路由：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you go to `/about`, you will see this view:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你去到`/about`，你会看到这个视图：
- en: '![](assets/b00156d8-be3d-4bd3-a999-989102fd8bf5.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b00156d8-be3d-4bd3-a999-989102fd8bf5.png)'
- en: 'If you go to `/contact`, you will see this view:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你去到`/contact`，你会看到这个视图：
- en: '![](assets/6cd7a18d-a5f1-4318-b9fd-7a9f8e7142ef.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6cd7a18d-a5f1-4318-b9fd-7a9f8e7142ef.png)'
- en: There's more...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: So far, we have learned how to create simple routes in our project, but in the
    next recipe, we will learn how to include parameters within our routes, how to
    add nested routes, and how to navigate through our site using the `<Link>` component.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何在我们的项目中创建简单的路由，但在下一个教程中，我们将学习如何在我们的路由中包含参数，如何添加嵌套路由，以及如何使用“<Link>”组件在我们的网站中导航。
- en: Adding parameters to our routes
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的路由添加参数
- en: For this recipe, we are going to use the same code as the last recipe, and we
    are going to add some parameters and show how to get them into our components.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们将使用与上一个教程相同的代码，并添加一些参数，展示如何将它们传递到我们的组件中。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we are going to create a simple `Notes` component to display
    all our notes when we visit the `/notes` route, but we will show one note when
    the user visits `/notes/:noteId`(we will filter the note using `noteId`):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将创建一个简单的“Notes”组件，以在访问“/notes”路由时显示所有的笔记，但当用户访问“/notes/:noteId”时，我们将显示一个笔记（我们将使用“noteId”来过滤笔记）：
- en: 'We need to create a new component called Notes (`src/components/Notes/index.jsx`),
    and this is the skeleton of our `Notes` component:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个名为Notes的新组件（`src/components/Notes/index.jsx`），这是我们的“Notes”组件的骨架：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'File: src/components/Notes/index.jsx'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Notes/index.jsx
- en: 'The CSS file is as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS文件如下：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'File: src/components/Notes/Notes.css'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Notes/Notes.css
- en: 'Once we have created our `Notes` component, we need to import it into our `src/routes.jsx`
    file:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们创建了我们的“Notes”组件，我们需要将它导入到我们的“src/routes.jsx”文件中：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'File: src/routes.jsx'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/routes.jsx
- en: 'Now we can see our Notes component if we go to the `/notes` URL:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以在“/notes”URL下看到我们的Notes组件：
- en: '![](assets/28ddd133-d99f-48a0-8552-563e0edf56e1.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/28ddd133-d99f-48a0-8552-563e0edf56e1.png)
- en: 'Now that our `Notes` component is connected to React Router, let''s render
    our notes as a list:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的“Notes”组件已经连接到React Router，让我们将我们的笔记渲染为列表：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'File: src/components/Notes/index.jsx'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Notes/index.jsx
- en: 'You may have noticed that we are using `<Link>` (this will generate an `<a>`
    tag) component that points to `/notes/notes.id`, and this is because we are going
    to add a new nested route into our `src/routes.jsx` file to match the `id` of
    the note:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能已经注意到我们正在使用“<Link>”（这将生成一个“<a>”标签）组件，指向“/notes/notes.id”，这是因为我们将在我们的“src/routes.jsx”文件中添加一个新的嵌套路由来匹配笔记的“id”：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'File: src/routes.jsx'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/routes.jsx
- en: 'React Router has a special prop called `match`, which is an object that includes
    all the information about our executed route, and if we have parameters, we are
    going to be able to see them in the `match` object, like this:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React Router有一个特殊的属性叫做“match”，它是一个包含有关我们执行的路由的所有信息的对象，如果我们有参数，我们将能够在“match”对象中看到它们，就像这样：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'File: src/components/Notes/index.jsx'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Notes/index.jsx
- en: The `match` prop looks like this.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “match”属性看起来像这样。
- en: '![](assets/d677a7d5-47e2-450a-bd95-d7b7b6ed1b66.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/d677a7d5-47e2-450a-bd95-d7b7b6ed1b66.png)
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `match` object contains a lot of useful information. React Router also includes
    the object's history and location. As you can see, we can get all the parameters
    we pass within our routes in the `match` object.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: “match”对象包含了许多有用的信息。React Router还包括了对象的历史和位置。正如你所看到的，我们可以在“match”对象中获取我们在路由中传递的所有参数。
- en: 'If you run the application and go to `/notes` URL, you will see this view:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行应用程序并转到“/notes”URL，你会看到这个视图：
- en: '![](assets/1d4d34cf-550e-4e4f-87ca-81941c259710.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/1d4d34cf-550e-4e4f-87ca-81941c259710.png)
- en: 'If you click on any link (I clicked on My note 2), you will see this view:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击任何链接（我点击了我的笔记2），你会看到这个视图：
- en: '![](assets/a3ba6075-4521-435a-a40b-a10f5e5f6dd7.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/a3ba6075-4521-435a-a40b-a10f5e5f6dd7.png)
- en: 'After this, we can add a menu in our `Header` component to access all our routes:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以在我们的“Header”组件中添加一个菜单来访问所有我们的路由：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'File: src/shared/components/layout/Header.jsx'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/shared/components/layout/Header.jsx
- en: 'After that, we need to modify our `src/components/App.css`file to style our
    menu. Just add the following code at the end of the CSS file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要修改我们的`src/components/App.css`文件来为我们的菜单添加样式。只需在CSS文件的末尾添加以下代码：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'File: src/components/App.css'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/App.css
- en: Now you can see the menu like this: ![](assets/ee4bffaa-aa35-4ea5-a602-85c01efc83b2.png)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到菜单像这样：![](assets/ee4bffaa-aa35-4ea5-a602-85c01efc83b2.png)
