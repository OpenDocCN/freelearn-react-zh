["```jsx\nnpm install redux react-redux \n```", "```jsx\n // Dependencies\n  import { createStore } from 'redux';\n\n // Root Reducer\n  import rootReducer from '../reducers';\n\n  export default function configureStore(initialState) {\n    return createStore(\n      rootReducer,\n      initialState\n    );\n  }\n```", "```jsx\n<body>\n  <div id=\"root\"></div>\n\n  <script>\n    // Detecting the user device\n    const isMobile = /iPhone|Android/i.test(navigator.userAgent);\n\n    // Creating our initialState\n    const initialState = {\n      device: {\n        isMobile\n      }\n    };\n\n    // Saving our initialState to the window object\n    window.initialState = initialState;\n  </script>\n</body>\n```", "```jsx\nexport default function deviceReducer(state = {}) {\n  return state;\n}\n```", "```jsx\n// Dependencies\nimport { combineReducers } from 'redux';\n\n// Shared Reducers\nimport device from './deviceReducer';\n\nconst rootReducer = combineReducers({\n  device\n});\n\nexport default rootReducer;\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\n// Redux Store\nimport configureStore from './shared/redux/configureStore';\n\n// Routes\nimport AppRoutes from './routes';\n\n// Configuring Redux Store\nconst store = configureStore(window.initialState);\n\n// DOM\nconst rootElement = document.getElementById('root');\n\n// App Wrapper\nconst renderApp = Component => {\n  render(\n    <Provider store={store}>\n      <Router>\n        <Component />\n      </Router>\n    </Provider>,\n    rootElement\n  );\n};\n\n// Rendering our App\nrenderApp(AppRoutes);\n```", "```jsx\nimport React from 'react';\nimport { bool } from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst Home = props => {\n  const { isMobile } = props;\n\n  return (\n    <div className=\"Home\">\n      <h1>Home</h1>\n\n      <p>\n        You are using: \n        <strong>{isMobile ? 'mobile' : 'desktop'}</strong>\n      </p>\n    </div>\n  );\n};\n\nHome.propTypes = {\n  isMobile: bool\n};\n\nfunction mapStateToProps(state) {\n  return {\n    isMobile: state.device.isMobile\n  };\n}\n\nfunction mapDispatchToProps() {\n  return {};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n```", "```jsx\nfunction mapStateToProps(state) {\n  return {\n    isMobile: state.device.isMobile\n  };\n}\n```", "```jsx\nconst mapStateToProps = ({ device }) => ({\n  isMobile: device.isMobile\n});\n```", "```jsx\nexport default connect(({ device }) => ({\n  isMobile: device.isMobile\n}), null)(Home);\n```", "```jsx\nconst { isMobile } = props;\n```", "```jsx\nnpm install axios redux-thunk\n```", "```jsx\nexport const FETCH_COINS_REQUEST = 'FETCH_COINS_REQUEST';\nexport const FETCH_COINS_SUCCESS = 'FETCH_COINS_SUCCESS';\nexport const FETCH_COINS_ERROR = 'FETCH_COINS_ERROR';\n```", "```jsx\n// Base Actions\nexport const request = type => ({\n  type\n});\n\nexport const received = (type, payload) => ({\n  type,\n  payload\n});\n\nexport const error = type => ({\n  type\n});\n```", "```jsx\n// Dependencies\nimport axios from 'axios';\n\n// Action Types\nimport {\n  FETCH_COINS_REQUEST,\n  FETCH_COINS_SUCCESS,\n  FETCH_COINS_ERROR\n} from './actionTypes';\n\n// Base Actions\n import { request, received, error } from '../shared/redux/baseActions';\n\nexport const fetchCoins = () => dispatch => {\n  // Dispatching our request action\n  dispatch(request(FETCH_COINS_REQUEST));\n\n  // Axios Data\n  const axiosData = {\n    method: 'GET',\n    url: 'https://api.coinmarketcap.com/v1/ticker/',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  };\n\n  // If everything is correct we dispatch our received action   \n  // otherwise our error action.\n  return axios(axiosData)\n    .then(response => dispatch(received(FETCH_COINS_SUCCESS, response.data)))\n    .catch(err => {\n      // eslint-disable-next-line no-console\n      console.log('AXIOS ERROR:', err.response); \n      dispatch(error(FETCH_COINS_ERROR));\n    });\n};\n```", "```jsx\n// Action Types\nimport {\n  FETCH_COINS_SUCCESS,\n  FETCH_SINGLE_COIN_SUCCESS\n} from '../actions/actionTypes';\n\n// Utils\nimport { getNewState } from '../shared/utils/frontend';\n\n// Initial State\nconst initialState = {\n  coins: []\n};\n\nexport default function coinsReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_COINS_SUCCESS: {\n      const { payload: coins } = action;\n\n      return getNewState(state, {\n        coins\n      });\n    }\n\n    default:\n      return state;\n  }\n};\n```", "```jsx\n// Dependencies\nimport { combineReducers } from 'redux';\n\n// Components Reducers\nimport coins from '../../reducers/coinsReducer';\n\n// Shared Reducers\nimport device from './deviceReducer';\n\nconst rootReducer = combineReducers({\n  coins,\n  device\n});\n\nexport default rootReducer;\n```", "```jsx\nexport function getNewState(state, newState) {\n  return Object.assign({}, state, newState);\n}\n\nexport function isFirstRender(items) {\n  return !items || items.length === 0 || Object.keys(items).length === 0;\n}\n```", "```jsx\n// Dependencies\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\n// Components\nimport Coins from './Coins';\n\n// Actions\nimport { fetchCoins } from '../../actions/coinsActions';\n\n// Mapping our Redux State to Props\nconst mapStateToProps = ({ coins }) => ({\n  coins\n});\n\n// Binding our fetchCoins action.\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    fetchCoins\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Coins);\n```", "```jsx\n// Dependencies\nimport React, { Component } from 'react';\nimport { array } from 'prop-types';\n\n// Utils\nimport { isFirstRender } from '../../shared/utils/frontend';\n\n// Styles\nimport './Coins.css';\n\nclass Coins extends Component {\n  static propTypes = {\n    coins: array\n  };\n\n  componentWillMount() {\n    const { fetchCoins } = this.props;\n\n    // Fetching coins action.\n    fetchCoins();\n  }\n\n  render() {\n    const { coins: { coins } } = this.props;\n\n    // If the coins const is an empty array, \n    // then we return null.\n    if (isFirstRender(coins)) {\n      return null;\n    }\n```", "```jsx\n\n    return (\n      <div className=\"Coins\">\n        <h1>Top 100 Coins</h1>\n\n        <ul>\n          {coins.map((coin, key) => (\n            <li key={key}>\n              <span className=\"left\">\n                {coin.rank} {coin.name} {coin.symbol}\n              </span>\n              <span className=\"right\">${coin.price_usd}</span>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Coins;\n```", "```jsx\n.Coins ul {\n    margin: 0 auto;\n    margin-bottom: 20px;\n    padding: 0;\n    list-style: none;\n    width: 300px;\n}\n\n.Coins ul a {\n    display: block;\n    color: #333;\n    text-decoration: none;\n    background: #5ed4ff;\n}\n\n.Coins ul a:hover {\n    color: #333;\n    text-decoration: none;\n    background: #baecff;\n}\n\n.Coins ul li {\n    border-bottom: 1px solid black;\n    text-align: left;\n    padding: 10px;\n    display: flex;\n    justify-content: space-between;\n}\n```", "```jsx\n// Dependencies\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\n// Root Reducer\nimport rootReducer from '../reducers';\n\nexport default function configureStore(initialState) {\n  const middleware = [\n    thunk\n  ];\n\n  return createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(...middleware)\n  );\n}\n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport logo from '../../images/logo.svg';\n\n// We created a component with a simple arrow function.\nconst Header = props => {\n  const {\n    title = 'Welcome to React',\n    url = 'http://localhost:3000'\n  } = props;\n\n  return (\n    <header className=\"App-header\">\n      <a href={url}>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </a>\n\n      <h1 className=\"App-title\">{title}</h1>\n\n      <ul>\n        <li><Link to=\"/\">Home</Link></li>\n        <li><Link to=\"/about\">About</Link></li>\n        <li><Link to=\"/coins\">Coins</Link></li>\n        <li><Link to=\"/notes\">Notes</Link></li>\n        <li><Link to=\"/contact\">Contact</Link></li>\n      </ul>\n    </header>\n  );\n};\n\n// Even with Functional Components we are able to validate our PropTypes.\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string\n};\n\nexport default Header;\n```", "```jsx\n// Dependencies\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\n// Components\nimport App from './components/App';\nimport About from './components/About';\nimport Coins from './components/Coins';\nimport Contact from './components/Contact';\nimport Home from './components/Home';\nimport Notes from './components/Notes';\nimport Error404 from './components/Error/404';\n\nconst AppRoutes = () => (\n  <App>\n    <Switch>\n      <Route path=\"/\" component={Home} exact />\n      <Route path=\"/about\" component={About} exact />\n      <Route path=\"/coins\" component={Coins} exact />\n      <Route path=\"/contact\" component={Contact} exact />\n      <Route path=\"/notes\" component={Notes} exact />\n      <Route path=\"/notes/:noteId\" component={Notes} exact />\n      <Route component={Error404} />\n    </Switch>\n  </App>\n);\n\nexport default AppRoutes;\n```", "```jsx\n  {\n    \"phrases\": [\n      {\n        \"phrase\": \"A room without books is like a body without a \n       soul.\",\n        \"author\": \"Marcus Tullius Cicero\"\n      },\n      {\n        \"phrase\": \"Two things are infinite: the universe and human \n        stupidity; and I'm not sure about the universe.\",\n        \"author\": \"Albert Einstein\"\n      },\n      {\n        \"phrase\": \"You only live once, but if you do it right, once is \n         enough.\",\n        \"author\": \"Mae West\"\n      },\n      {\n        \"phrase\": \"If you tell the truth, you don't have to remember \n         anything.\",\n        \"author\": \"Mark Twain\"\n      },\n      {\n        \"phrase\": \"Be yourself; everyone else is already taken.\",\n        \"author\": \"Oscar Wilde\"\n      }\n    ]\n  }\n```", "```jsx\n    npm install firebase      \n```", "```jsx\n export const fbConfig = {\n    ref: 'phrases',\n    app: {\n      apiKey: 'AIzaSyASppMJh_6QIGTeXVBeYszzz7iTNTADxRU',\n      authDomain: 'codejobs-2240b.firebaseapp.com',\n      databaseURL: 'https://codejobs-2240b.firebaseio.com',\n      projectId: 'codejobs-2240b',\n      storageBucket: 'codejobs-2240b.appspot.com',\n      messagingSenderId: '278058258089'\n    }\n  };\n```", "```jsx\n  import firebase from 'firebase';\n  import { fbConfig } from '../../config/firebase';\n\n  firebase.initializeApp(fbConfig.app);\n\n export default firebase.database().ref(fbConfig.ref);\n```", "```jsx\n  // Dependencies\n  import React from 'react';\n  import { Route, Switch } from 'react-router-dom';\n\n // Components\n  import App from './components/App';\n  import Error404 from './components/Error/404';\n  import Phrases from './components/Phrases';\n\n  const AppRoutes = () => (\n    <App>\n      <Switch>\n        <Route path=\"/\" component={Phrases} exact />\n        <Route component={Error404} />\n      </Switch>\n    </App>\n  );\n\n export default AppRoutes;\n```", "```jsx\n export const FETCH_PHRASE_REQUEST = 'FETCH_PHRASE_REQUEST';\n  export const FETCH_PHRASE_SUCCESS = 'FETCH_PHRASE_SUCCESS';\n\n  export const ADD_PHRASE_REQUEST = 'ADD_PHRASE_REQUEST';\n\n  export const DELETE_PHRASE_REQUEST = 'DELETE_PHRASE_REQUEST';\n  export const DELETE_PHRASE_SUCCESS = 'DELETE_PHRASE_SUCCESS';\n\n  export const UPDATE_PHRASE_REQUEST = 'UPDATE_PHRASE_REQUEST';\n  export const UPDATE_PHRASE_SUCCESS = 'UPDATE_PHRASE_SUCCESS';\n  export const UPDATE_PHRASE_ERROR = 'UPDATE_PHRASE_ERROR';\n```", "```jsx\n // Firebase Database\n  import database from '../shared/firebase/database';\n\n // Action Types\n import {\n    FETCH_PHRASE_REQUEST,\n    FETCH_PHRASE_SUCCESS,\n    ADD_PHRASE_REQUEST,\n    DELETE_PHRASE_REQUEST,\n    DELETE_PHRASE_SUCCESS,\n    UPDATE_PHRASE_REQUEST,\n    UPDATE_PHRASE_SUCCESS,\n    UPDATE_PHRASE_ERROR\n  } from './actionTypes';\n\n  // Base Actions\n import { request, received } from '../shared/redux/baseActions';\n\n  export const fetchPhrases = () => dispatch => {\n    // Dispatching our FETCH_PHRASE_REQUEST action\n    dispatch(request(FETCH_PHRASE_REQUEST));\n\n    // Listening for added rows\n    database.on('child_added', snapshot => {\n      dispatch(received(\n        FETCH_PHRASE_SUCCESS, \n        { \n          key: snapshot.key, \n          ...snapshot.val() \n        }\n      ));\n    });\n\n    // Listening for updated rows\n    database.on('child_changed', snapshot => {\n      dispatch(received(\n        UPDATE_PHRASE_SUCCESS, \n        { \n          key: snapshot.key, \n          ...snapshot.val() \n        }\n      ));\n    });\n\n    // Lisetining for removed rows\n    database.on('child_removed', snapshot => {\n      dispatch(received(\n        DELETE_PHRASE_SUCCESS, \n        { \n          key: snapshot.key \n        }\n      ));\n    });\n  };\n\n export const addPhrase = (phrase, author) => dispatch => {\n    // Dispatching our ADD_PHRASE_REQUEST action\n    dispatch(request(ADD_PHRASE_REQUEST));\n\n    // Adding a new element by pushing to the ref.\n // NOTE: Once this is executed the listener    // will be on fetchPhrases (child_added).\n    database.push({\n      phrase,\n      author\n    });\n  }\n\n  export const deletePhrase = key => dispatch => {\n    // Dispatching our DELETE_PHRASE_REQUEST action\n    dispatch(request(DELETE_PHRASE_REQUEST));\n\n // Removing element by key\n // NOTE: Once this is executed the listener \n // will be on fetchPhrases (child_removed).\n    database.child(key).remove();\n  }\n\n  export const updatePhrase = (key, phrase, author) => dispatch => {\n    // Dispatching our UPDATE_PHRASE_REQUEST action\n    dispatch(request(UPDATE_PHRASE_REQUEST));\n\n    // Collecting our data...\n    const data = {\n      phrase,\n      author\n    };\n\n    // Updating an element by key and data\n    database\n      // First we select our element by key\n      .child(key) \n      // Updating the data in this point\n      .update(data) \n      // Returning the updated data\n      .then(() => database.once('value')) \n      // Getting the actual values of the snapshat\n      .then(snapshot => snapshot.val()) \n      .catch(error => {\n        // If there is an error we dispatch our error action\n        dispatch(request(UPDATE_PHRASE_ERROR));\n\n        return {\n          errorCode: error.code,\n          errorMessage: error.message\n        };\n      });\n  };\n```", "```jsx\n  // Action Types\n  import {\n    FETCH_PHRASE_SUCCESS,\n    DELETE_PHRASE_SUCCESS,\n    UPDATE_PHRASE_SUCCESS,\n  } from '../actions/actionTypes';\n\n  // Utils\n  import { getNewState } from '../shared/utils/frontend';\n\n  // Initial State\n  const initialState = {\n    phrases: []\n  };\n\n  export default function phrasesReducer(state = initialState, action) {\n    switch (action.type) {\n      case FETCH_PHRASE_SUCCESS: {\n        const { payload: phrase } = action;\n\n        const newPhrases = [...state.phrases, phrase];\n\n        return getNewState(state, {\n          phrases: newPhrases\n        });\n      }\n\n      case DELETE_PHRASE_SUCCESS: {\n        const { payload: deletedPhrase } = action;\n\n        const filteredPhrases = state.phrases.filter(\n          phrase => phrase.key !== deletedPhrase.key\n        );\n\n        return getNewState(state, {\n          phrases: filteredPhrases\n        });\n      }\n\n      case UPDATE_PHRASE_SUCCESS: {\n        const { payload: updatedPhrase } = action;\n\n        const index = state.phrases.findIndex(\n          phrase => phrase.key === updatedPhrase.key\n        );\n\n        state.phrases[index] = updatedPhrase;\n\n        return getNewState({}, {\n          phrases: state.phrases\n        });\n      }\n\n      default:\n       return state;\n    }\n  };\n```", "```jsx\n  // Dependencies\n  import { connect } from 'react-redux';\n  import { bindActionCreators } from 'redux';\n\n  // Components\n  import Phrases from './Phrases';\n\n // Actions\n  import {\n    addPhrase,\n    deletePhrase,\n    fetchPhrases,\n    updatePhrase\n  } from '../../actions/phrasesActions';\n\n  const mapStateToProps = ({ phrases }) => ({\n    phrases: phrases.phrases\n  });\n\n  const mapDispatchToProps = dispatch => bindActionCreators(\n    {\n      addPhrase,\n      deletePhrase,\n      fetchPhrases,\n      updatePhrase\n    },\n    dispatch\n  );\n\n export default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Phrases);\n```", "```jsx\n  // Dependencies\n  import React, { Component } from 'react';\n  import { array } from 'prop-types';\n\n  // Styles\n  import './Phrases.css';\n\n  class Phrases extends Component {\n    static propTypes = {\n      phrases: array\n    };\n\n    state = {\n      phrase: '',\n      author: '',\n      editKey: false\n    };\n\n    componentWillMount() {\n      this.props.fetchPhrases();\n    }\n\n    handleOnChange = e => {\n      const { target: { name, value } } = e;\n\n      this.setState({\n        [name]: value\n      });\n    }\n\n    handleAddNewPhrase = () => {\n      if (this.state.phrase && this.state.author) {\n        this.props.addPhrase(\n          this.state.phrase, \n          this.state.author\n        );\n\n        // After we created the new phrase we clean the states\n        this.setState({\n          phrase: '',\n          author: ''\n        });\n      }\n    }\n\n    handleDeleteElement = key => {\n      this.props.deletePhrase(key);\n    }\n\n    handleEditElement = (key, phrase, author) => {\n      this.setState({\n        editKey: key,\n        phrase,\n        author\n      });\n    }\n\n    handleUpdatePhrase = () => {\n      if (this.state.phrase && this.state.author) {\n        this.props.updatePhrase(\n          this.state.editKey,\n          this.state.phrase,\n          this.state.author\n        );\n\n        this.setState({\n          phrase: '',\n          author: '',\n          editKey: false\n        });\n      }\n    }\n\n    render() {\n      const { phrases } = this.props;\n\n      return (\n        <div className=\"phrases\">\n          <div className=\"add\">\n            <p>Phrase: </p>\n\n            <textarea \n              name=\"phrase\" \n              value={this.state.phrase} \n              onChange={this.handleOnChange}\n            ></textarea>\n\n            <p>Author</p>\n\n            <input \n              name=\"author\" \n              type=\"text\" \n              value={this.state.author} \n              onChange={this.handleOnChange} \n            />\n\n            <p>\n              <button \n                onClick={\n                  this.state.editKey \n                    ? this.handleUpdatePhrase \n                    : this.handleAddNewPhrase\n                }\n              >\n                {this.state.editKey \n                  ? 'Edit Phrase' \n                  : 'Add New Phrase'}\n              </button>\n            </p>\n          </div>\n\n          {phrases && phrases.map(({ key, phrase, author }) => (\n            <blockquote key={key} className=\"phrase\">\n              <p className=\"mark\">\n                \u201c\n              </p>\n\n              <p className=\"text\">\n                {phrase}\n              </p>\n\n              <hr />\n\n              <p className=\"author\">\n                {author}\n              </p>\n\n              <a \n onClick={() => { \n                  this.handleDeleteElement(key);\n                }}\n              >\n                X\n              </a>\n              <a \n                onClick={\n                  () => this.handleEditElement(key, phrase, author)\n                }\n              >\n                Edit\n              </a>\n            </blockquote>\n          ))}\n        </div>\n      );\n    }\n  }\n\n  export default Phrases;\n```", "```jsx\n hr {\n    width: 98%;\n    border: 1px solid white;\n  }\n\n .phrase {\n    background-color: #2db2ff;\n    border-radius: 17px;\n    box-shadow: 2px 2px 2px 2px #E0E0E0;\n    color: white;\n    font-size: 20px;\n    margin-top: 25px;\n    overflow: hidden;\n    border-left: none;\n    padding: 20px;\n  }\n\n .mark {\n    color: white;\n    font-family: \"Times New Roman\", Georgia, Serif;\n    font-size: 100px;\n    font-weight: bold;\n    margin-top: -20px;\n    text-align: left;\n    text-indent: 20px;\n  }\n\n .text {\n    font-size: 30px;\n    font-style: italic;\n    margin: 0 auto;\n    margin-top: -65px;\n    text-align: center;\n    width: 90%;\n  }\n\n .author {\n    font-size: 30px;\n  }\n\n  textarea {\n    width: 50%;\n    font-size: 30px;\n    padding: 10px;\n    border: 1px solid #333;\n  }\n\n  input {\n    font-size: 30px;\n    border: 1px solid #333;\n  }\n\n  a {\n    cursor: pointer;\n    float: right;\n    margin-right: 10px;\n  }\n```", "```jsx\n  {\n    \"phrases\": [\n      {\n        \"phrase\": \"A room without books is like a body without a \n        soul.\",\n        \"author\": \"Marcus Tullius Cicero\"\n      },\n      {\n        \"phrase\": \"Two things are infinite: the universe and human \n         stupidity; and \n         I'm not sure about the universe.\",\n        \"author\": \"Albert Einstein\"\n      },\n      {\n        \"phrase\": \"You only live once, but if you do it right, once is \n        enough.\",\n        \"author\": \"Mae West\"\n      },\n      {\n        \"phrase\": \"If you tell the truth, you don't have to remember \n        anything.\",\n        \"author\": \"Mark Twain\"\n      },\n      {\n        \"phrase\": \"Be yourself; everyone else is already taken.\",\n        \"author\": \"Oscar Wilde\"\n      },\n      {\n        \"phrase\": \"Hasta la vista, baby!\",\n        \"author\": \"Terminator\"\n      }\n    ]\n  }\n```"]