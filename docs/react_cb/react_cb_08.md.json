["```jsx\nnode -v\nv10.8.0\n```", "```jsx\nnpm -v\n6.3.0\n```", "```jsx\nnpm install -g express-generator\n```", "```jsx\nexpress my-first-express-app\n```", "```jsx\n cd my-first-express-app\n npm install\nnpm start \n```", "```jsx\n  var createError = require('http-errors');\n  var express = require('express');\n  var path = require('path');\n  var cookieParser = require('cookie-parser');\n  var logger = require('morgan');\n\n  var indexRouter = require('./routes/index');\n  var usersRouter = require('./routes/users');\n\n  var app = express();\n\n  // view engine setup\n  app.set('views', path.join(__dirname, 'views'));\n  app.set('view engine', 'jade');\n\n  app.use(logger('dev'));\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: false }));\n  app.use(cookieParser());\n  app.use(express.static(path.join(__dirname, 'public')));\n\n  app.use('/', indexRouter);\n  app.use('/users', usersRouter);\n\n  // catch 404 and forward to error handler\n  app.use(function(req, res, next) {\n    next(createError(404));\n  });\n\n  // error handler\n  app.use(function(err, req, res, next) {\n    // set locals, only providing error in development\n    res.locals.message = err.message;\n    res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n    // render the error page\n    res.status(err.status || 500);\n    res.render('error');\n  });\n\n module.exports = app;\n```", "```jsx\n  import createError from 'http-errors';\n  import express from 'express';\n  import path from 'path';\n  import cookieParser from 'cookie-parser';\n  import logger from 'morgan';\n\n  import indexRouter from './routes/index';\n  import usersRouter from './routes/users';\n\n  const app = express();\n\n  // view engine setup\n  app.set('views', path.join(__dirname, 'views'));\n  app.set('view engine', 'jade');\n\n  app.use(logger('dev'));\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: false }));\n  app.use(cookieParser());\n  app.use(express.static(path.join(__dirname, 'public')));\n\n  app.use('/', indexRouter);\n  app.use('/users', usersRouter);\n\n  // catch 404 and forward to error handler\n  app.use((req, res, next) => {\n    next(createError(404));\n  });\n\n  // error handler\n  app.use((err, req, res, next) => {\n    // set locals, only providing error in development\n    res.locals.message = err.message;\n    res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n    // render the error page\n    res.status(err.status || 500);\n    res.render('error');\n  });\n\n  // Listening port\n  app.listen(3000);\n```", "```jsx\n  \"scripts\": {\n    \"start\": \"node app.js\"\n  }\n```", "```jsx\n    npm install -g babel-cli\n npm install babel-preset-es2015\n```", "```jsx\n    {\n      \"presets\": [\"es2015\"]\n    }\n```", "```jsx\n  \"scripts\": {\n    \"start\": \"babel-node app.js\"\n  }\n```", "```jsx\n    npm install nodemon\n```", "```jsx\n  \"scripts\": {\n    \"start\": \"nodemon app.js --exec babel-node\"\n  }\n```", "```jsx\n  // Dependencies\n  import express from 'express';\n  import path from 'path';\n\n  // Controllers\n  import apiController from './controllers/api';\n\n  // Express Application\n  const app = express();\n\n  // Middlewares\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: false }));\n\n  // Routes\n  app.use('/api', apiController);\n\n  // Listening port\n  app.listen(3000);\n```", "```jsx\n  import express from 'express';\n\n  const router = express.Router();\n\n  // Mock data, this should come from a database....\n  const posts = [\n    {\n      id: 1,\n      title: 'My blog post 1',\n      content: '<p>Content</p>',\n      author: 'Carlos Santana'\n    },\n    {\n      id: 2,\n      title: 'My blog post 2',\n      content: '<p>Content</p>',\n      author: 'Cristina Rojas'\n    },\n    {\n      id: 3,\n      title: 'My blog post 3',\n      content: '<p>Content</p>',\n      author: 'Carlos Santana'\n    }\n  ];\n\n  router.get('/', (req, res, next) => {\n    res.send(`\n      <p>API Endpoints:</p>\n      <ul>\n        <li>/api/posts</li>\n        <li>/api/post/:id</li>\n      </ul>\n    `);\n  });\n\n  router.get('/posts', (req, res, next) => {\n    res.json({\n      response: posts\n    });\n  });\n\n  router.get('/post/:id', (req, res, next) => {\n    const { params: { id } } = req;\n\n    const singlePost = posts.find(post => post.id === Number(id));\n\n    if (!singlePost) {\n      res.send({\n        error: true,\n        message: 'Post not found'\n      });\n    }\n\n    res.json({\n      response: [singlePost]\n    });\n  });\n\n export default router;\n```", "```jsx\n    tar -zxvf mongodb-osx-ssl-x86_64-3.6.3.tgz\n```", "```jsx\n    mkdir -p mongodb\n cp -R -n mongodb-osx-ssl-x86_64-3.6.3/ mongodb\n```", "```jsx\n    export PATH=<your-mongodb-install-directory>/bin:$PATH \n```", "```jsx\n /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```", "```jsx\n    brew update\n```", "```jsx\n brew install mongodb\n```", "```jsx\n    brew install mongodb --devel\n```", "```jsx\n    mkdir -p /data/db\n```", "```jsx\n    chmod -R 777 /data\n```", "```jsx\n    mongod\n```", "```jsx\n    mongo --host 127.0.0.1:127017\n```", "```jsx\n    use blog\n```", "```jsx\n   db.posts.save({ title: 'Post 1', slug: 'post-1', content: '<p>Content</p>' })\n```", "```jsx\n   db.posts.find()\n```", "```jsx\n   db.posts.find({ slug: 'post-2' })\n```", "```jsx\n   db.posts.update({ slug: \"post-2\" }, { $set: { title: \"My Updated Post 2\" }})\n```", "```jsx\n   db.posts.remove({ \"_id\": ObjectId(\"5ad2e6ed4fa0d047639da616\") })\n```", "```jsx\n   db.posts.remove({ \"slug\": \"post-1\" })\n```", "```jsx\n npm install mongoose body-parser slug\n```", "```jsx\n  // Dependencies\n  import express from 'express';\n  import path from 'path';\n  import mongoose from 'mongoose';\n  import bodyParser from 'body-parser';\n\n  // Controllers\n  import apiController from './controllers/api';\n\n  // Express Application\n  const app = express();\n\n  // Middlewares\n  app.use(bodyParser.json());\n  app.use(bodyParser.urlencoded({ extended: false }));\n\n  // Mongoose Connection (blog is our database)\n  mongoose.connect('mongodb://localhost/blog');\n\n  // Routes\n  app.use('/api', apiController);\n\n  // Listening port\n  app.listen(3000);\n```", "```jsx\n// Dependencies\nimport mongoose, { Schema } from 'mongoose';\nimport slug from 'slug';\n\n// Defining the post schema...\nconst postSchema = new Schema({\n  title: String,\n  slug: { type: String, unique: true },\n  content: { type: String, required: true },\n  author: String,\n  createdAt: Date\n});\n\n// Adding a custom method...\npostSchema.methods.addAuthor = function(author) {\n /**\n * NOTE: Probably you are thinking, why I'm using function \n   * and not an arrow function?\n * Is because arrow functions does not bind their own context\n * that means this actually refers to the originating context\n */\n  this.author = author;\n\n  return this.author;\n};\n//Before save we create the slug and we add the current date...\npostSchema.pre('save', function(next) {\n  this.slug = slug(this.title, { lower: 'on' });\n  this.createdAt = Date.now();\n\n  next();\n});\n\n// Creating our Model...\nconst Post = mongoose.model('Post', postSchema);\n\nexport default Post;\n```", "```jsx\n  // Dependencies\n  import slugFn from 'slug';\n  import Post from '../models/blog';\n\n export function createPost(title, content, callback) {\n    // Creating a new post...\n    const newPost = new Post({\n      title,\n      content\n    });\n\n    // Adding the post author...\n    newPost.addAuthor('Carlos Santana');\n\n    // Saving the post into the database...\n    newPost.save(error => {\n      if (error) {\n        console.log(error);\n        callback(error, true);\n      }\n\n      console.log('Post saved correctly!');\n      callback(newPost);\n    });\n  }\n\n  // Updating a post...\n  export function updatePost(slug, title, content, callback) {\n    const updatedPost = {\n      title,\n      content,\n      slug: slugFn(title, { lower: 'on' })\n    };\n```", "```jsx\n\n    Post.update({ slug }, updatedPost, (error, affected) => {\n      if (error) {\n        console.log(error);\n        callback(error, true);\n      }\n\n      console.log('Post updated correctly!');\n      callback(affected);\n    });\n  }\n\n  // Removing a post by slug...\n  export function removePost(slug, callback) {\n    Post.remove({ slug }, error => {\n      if (error) {\n        console.log(error);\n        callback(error, true);\n      }\n\n      console.log('Post removed correctly!');\n      callback(true);\n    });\n  }\n\n  // Find all posts...\n  export function findAllPosts(callback) {\n    Post.find({}, (error, posts) => {\n      if (error) {\n        console.log(error);\n\n        return false;\n      }\n\n      console.log(posts);\n      callback(posts);\n    });\n  }\n\n  // Find a single post by slug...\n  export function findBySlug(slug, callback) {\n    Post.find({ slug }, (error, post) => {\n      if (error) {\n        console.log(error);\n\n        return false;\n      }\n\n      console.log(post);\n      callback(post);\n    });\n  }\n```", "```jsx\n  import express from 'express';\n  import {\n    createPost,\n    findAllPosts,\n    findBySlug,\n    removePost,\n    updatePost\n  } from './blog';\n\n  const router = express.Router();\n\n  // GET Endpoints\n  router.get('/', (req, res, next) => {\n    res.send(`\n      <p>API Endpoints:</p>\n      <ul>\n        <li><a href=\"/api/posts\">/api/posts</a></li>\n        <li><a href=\"/api/post/1\">/api/post/:id</a></li>\n      </ul>\n    `);\n  });\n\n  router.get('/posts', (req, res, next) => {\n    findAllPosts(posts => {\n      res.json({\n        response: posts\n      });\n    });\n  });\n\n  router.get('/post/:slug', (req, res, next) => {\n    const { params: { slug } } = req;\n\n    findBySlug(slug, singlePost => {\n      console.log('single', singlePost);\n      if (!singlePost || singlePost.length === 0) {\n        res.send({\n          error: true,\n          message: 'Post not found'\n        });\n      } else {\n        res.json({\n          response: [singlePost]\n        });\n      }\n    });\n  });\n\n  // POST Endpoints\n  router.post('/post', (req, res, next) => {\n    const { title, content } = req.body;\n\n    createPost(title, content, (data, error = false) => {\n      if (error) {\n        res.json({\n          error: true,\n          message: data\n        });\n      } else {\n        res.json({\n          response: {\n            saved: true,\n            post: data\n          }\n        });\n      }\n    });\n  });\n\n  // DELETE Endpoints\n  router.delete('/post/:slug', (req, res, next) => {\n    const { params: { slug } } = req;\n\n    removePost(slug, (removed, error) => {\n      if (error) {\n        res.json({\n          error: true,\n          message: 'There was an error trying to remove this \n          post...'\n        });\n      } else {\n        res.json({\n          response: {\n            removed: true\n          }\n        })\n      }\n    });\n  });\n\n  // PUT Endpoints\n  router.put('/post/:slug', (req, res, next) => {\n    const { params: { slug }, body: { title, content } } = req;\n\n    updatePost(slug, title, content, (affected, error) => {\n      if (error) {\n        res.json({\n          error: true,\n          message: 'There was an error trying to update the post'\n        });\n      } else {\n        res.json({\n          response: {\n            updated: true,\n            affected\n          }\n        })\n      }\n    });\n  });\n\n  export default router;\n```", "```jsx\n    // If you want to change the name of the versionKey\n    new Schema({...}, { versionKey: '_myVersion' });\n```", "```jsx\n    // If you want to remove it you can do:\n    new Schema({...}, { versionKey: false });\n```", "```jsx\n    npm install sequelize **mysql2 slug**\n```", "```jsx\nCREATE DATABASE blog;\n USE blog;\n```", "```jsx\n  export default {\n    db: {\n      dialect: 'mysql', // 'mysql'|'sqlite'|'postgres'|'mssql'\n      host: 'localhost', // Your host, by default is localhost\n      database: 'blog', // Your database name\n      user: 'root', // Your MySQL user, by default is root\n      password: '123456' // Your Db password, sometimes by default                  \n                         //is empty.\n    }\n  };\n```", "```jsx\n  import express from 'express';\n  import {\n    createPost,\n    findAllPosts,\n    findBySlug,\n    removePost,\n    updatePost\n  } from './blog';\n\n  const router = express.Router();\n\n // GET Methods\n  router.get('/', (req, res, next) => {\n    res.send(`\n      <p>API Endpoints:</p>\n      <ul>\n        <li><a href=\"/api/posts\">/api/posts</a></li>\n        <li><a href=\"/api/post/1\">/api/post/:id</a></li>\n      </ul>\n    `);\n  });\n\n  router.get('/posts', (req, res, next) => {\n    findAllPosts(posts => {\n      res.json({\n        response: posts\n      });\n    });\n  });\n\n  router.get('/post/:slug', (req, res, next) => {\n    const { params: { slug } } = req;\n\n    findBySlug(slug, singlePost => {\n      console.log('single', singlePost);\n      if (!singlePost || singlePost.length === 0) {\n        res.send({\n          error: true,\n          message: 'Post not found'\n        });\n      } else {\n        res.json({\n          response: [singlePost]\n        });\n      }\n    });\n  });\n\n  // POST Methods\n  router.post('/post', (req, res, next) => {\n    const { title, content } = req.body;\n\n    createPost(title, content, (data, error = false) => {\n      if (error) {\n        res.json({\n          error: true,\n          details: error\n        });\n      } else {\n        res.json({\n          response: {\n            saved: true,\n            post: data\n          }\n        });\n      }\n    });\n  });\n\n  // DELETE Methods\n  router.delete('/post/:slug', (req, res, next) => {\n    const { params: { slug } } = req;\n\n    removePost(slug, (removed, error) => {\n      if (error) {\n        res.json({\n          error: true,\n          message: 'There was an error trying to remove this post...'\n        });\n      } else {\n        res.json({\n          response: {\n            removed: true\n          }\n        })\n      }\n    });\n  });\n\n  // PUT Methods\n  router.put('/post/:slug', (req, res, next) => {\n    const { params: { slug }, body: { title, content } } = req;\n\n    updatePost(slug, title, content, (affected, error) => {\n      if (error) {\n        res.json({\n          error: true,\n          message: 'There was an error trying to update the post'\n        });\n      } else {\n        res.json({\n          response: {\n            updated: true,\n            affected\n          }\n        })\n      }\n    });\n  });\n\n  export default router;\n```", "```jsx\n  // Dependencies\n  import Sequelize from 'sequelize';\n  import slug from 'slug';\n\n  // Configuration\n  import config from '../config';\n\n  // Connecting to the database\n  const db = new Sequelize(config.db.database, config.db.user, \n  config.db.password, {\n    host: config.db.host,\n    dialect: config.db.dialect,\n    operatorsAliases: false\n  });\n```", "```jsx\n  // This will remove the extra response\n  const queryType = {\n    type: Sequelize.QueryTypes.SELECT\n  };\n\n  // Defining our Post model...\n  const Post = db.define('posts', {\n    id: {\n      type: Sequelize.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    title: {\n      type: Sequelize.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          msg: 'The title is empty',\n        }\n      }\n    },\n    slug: {\n      type: Sequelize.STRING,\n      allowNull: false,\n      unique: true,\n      validate: {\n        notEmpty: {\n          msg: 'The slug is empty',\n        }\n      }\n    },\n    content: {\n      type: Sequelize.TEXT,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          msg: 'The content is empty'\n        }\n      }\n    },\n    author: {\n      type: Sequelize.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          msg: 'Who is the author?',\n        }\n      }\n    },\n    createdAt: {\n      type: Sequelize.DATE,\n      defaultValue: Sequelize.NOW\n    },\n  });\n```", "```jsx\n  // Creating new post...\n export function createPost(title, content, callback) {\n    // .sync({ force: true }), if you pass force this will     \n    // drop the table every time.\n db\n      .sync()\n      .then(() => {\n        Post.create({\n          title,\n          slug: title ? slug(title, { lower: 'on' }) : '',\n          content,\n          author: 'Carlos Santana'\n        }).then(insertedPost => {\n          console.log(insertedPost);\n          callback(insertedPost.dataValues);\n        }).catch(error => {\n          console.log(error);\n          callback(false, error);\n        });\n      });\n  }\n```", "```jsx\n  // Updating a post...\n  export function updatePost(slg, title, content, callback) {\n    Post.update(\n      {\n        title,\n        slug: slug(title, { lower: 'on' }),\n        content\n      },\n      {\n        where: { slug: slg }\n      }\n    ).then(rowsUpdated => {\n      console.log('UPDATED', rowsUpdated);\n      callback(rowsUpdated);\n    }).catch(error => {\n      console.log(error);\n      callback(false, error);\n    });\n  }\n```", "```jsx\n  // Removing a post by slug...\n  export function removePost(slug, callback) {\n    Post.destroy({\n      where: {\n        slug\n      }\n    }).then(rowDeleted => {\n      console.log('DELETED', rowDeleted);\n      callback(rowDeleted);\n    }).catch(error => {\n      console.log(error);\n      callback(false, error);\n    });\n  }\n```", "```jsx\n // Find all posts...\n  export function findAllPosts(callback) {\n    db.query('SELECT * FROM posts', queryType).then(data => {\n      callback(data);\n    });\n  }\n\n  // Find a single post by slug...\n  export function findBySlug(slug, callback) {\n    db.query(`SELECT * FROM posts WHERE slug = '${slug}'`, queryType).then(data => {\n      callback(data);\n    });\n  }\n```", "```jsx\n  // Dependencies\n  import Sequelize from 'sequelize';\n  import slug from 'slug';\n\n  // Configuration\n  import config from '../config';\n\n  // Connecting to the database\n  const db = new Sequelize(config.db.database, config.db.user, \n  config.db.password, {\n    host: config.db.host,\n    dialect: config.db.dialect,\n    operatorsAliases: false // This is to avoid the warning:       \n   //sequelize \n   //deprecated String based operators are now deprecated.\n  });\n\n  // This will remove the extra metadata object\n  const queryType = {\n    type: Sequelize.QueryTypes.SELECT\n  };\n\n  // Defining our Post model...\n  const Post = db.define('posts', {\n    id: {\n      type: Sequelize.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    title: {\n      type: Sequelize.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          msg: 'The title is empty',\n        }\n      }\n    },\n    slug: {\n      type: Sequelize.STRING,\n      allowNull: false,\n      unique: true,\n      validate: {\n        notEmpty: {\n          msg: 'The slug is empty',\n        }\n      }\n    },\n    content: {\n      type: Sequelize.TEXT,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          msg: 'The content is empty'\n        }\n      }\n    },\n    author: {\n      type: Sequelize.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: {\n          msg: 'Who is the author?',\n        }\n      }\n    },\n    createdAt: {\n      type: Sequelize.DATE,\n      defaultValue: Sequelize.NOW\n    },\n  });\n\n  // Creating new post...\n  export function createPost(title, content, callback) {\n    db\n      .sync()\n      .then(() => {\n        Post.create({\n          title,\n          slug: title ? slug(title, { lower: 'on' }) : '',\n          content,\n          author: 'Carlos Santana'\n        }).then(insertedPost => {\n          console.log(insertedPost);\n          callback(insertedPost.dataValues);\n        }).catch((error) => {\n          console.log(error);\n          callback(false, error);\n        });\n      });\n  }\n\n  // Updating a post...\n export function updatePost(slg, title, content, callback) {\n    Post.update(\n      {\n        title,\n        slug: slug(title, { lower: 'on' }),\n        content\n      },\n      {\n        where: { slug: slg }\n      }\n    ).then(rowsUpdated => {\n      console.log('UPDATED', rowsUpdated);\n      callback(rowsUpdated);\n    }).catch(error => {\n      console.log(error);\n      callback(false, error);\n    });\n  }\n\n  // Removing a post by slug...\n  export function removePost(slug, callback) {\n    Post.destroy({\n      where: {\n        slug\n      }\n    }).then(rowDeleted => {\n      console.log('DELETED', rowDeleted);\n      callback(rowDeleted);\n    }).catch(error => {\n      console.log(error);\n      callback(false, error);\n    });\n  }\n\n  // Find all posts...\n  export function findAllPosts(callback) {\n    db.query('SELECT * FROM posts', queryType).then(data => {\n      callback(data);\n    });\n  }\n\n  // Find a single post by slug...\n  export function findBySlug(slug, callback) {\n    db.query(`SELECT * FROM posts WHERE slug = '${slug}'`, queryType).then(data => {\n      callback(data);\n    });\n  }\n```", "```jsx\n    npm install jsonwebtoken\n```", "```jsx\n export default {\n    db: {\n      dialect: 'mysql', // The database engine you want to use\n      host: 'localhost', // Your host, by default is localhost\n      database: 'blog', // Your database name\n      user: 'root', // Your MySQL user, by default is root\n      password: '123456' // Your MySQL password\n    },\n    security: {\n      secretKey: 'C0d3j0bs', // Secret key\n      expiresIn: '1h' // Expiration can be: 30s, 30m, 1h, 7d, etc.\n    }\n  };\n```", "```jsx\n  // Configuration\n  import config from '../config';\n  import Sequelize from 'sequelize';\n\n  export const db = new Sequelize(\n    config.db.database, \n    config.db.user,\n    config.db.password, \n    {\n      host: config.db.host,\n      dialect: config.db.dialect,\n      operatorsAliases: false\n    }\n  );\n```", "```jsx\n    CREATE TABLE users (\n      id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,\n      username varchar(255) NOT NULL,\n      password varchar(255) NOT NULL,\n      email varchar(255) NOT NULL,\n      fullName varchar(255) NOT NULL,\n      PRIMARY KEY (`id`)\n    );\n```", "```jsx\n INSERT INTO users (id, username, password, email, fullName) \n    VALUES (\n      NULL, \n      'czantany', \n SHA1('123456'), \n      'carlos@milkzoft.com', \n      'Carlos Santana'\n    );\n\n    // The SHA1 hash generated for the 123456 password is      \n // 7c4a8d09ca3762af61e59520943dc26494f8941b\n```", "```jsx\n  // Dependencies\n  import Sequelize from 'sequelize';\n\n  // Db Connection\n  import { db } from './db';\n\n  // This will remove the extra response\n  const queryType = {\n    type: Sequelize.QueryTypes.SELECT\n  };\n\n  // Login\n  export function login(username, password, callback) {\n    db.query(`\n      SELECT id, username, email, fullName\n      FROM users\n      WHERE username = '${username}' AND password = '${password}'\n    `, queryType).then(data => callback(data));\n  }\n```", "```jsx\n  // Dependencies\n  import express from 'express';\n  import jwt from 'jsonwebtoken';\n\n  // Models\n  import {\n    createPost,\n    findAllPosts,\n    findBySlug,\n    removePost,\n    updatePost\n  } from '../models/blog';\n  import { login } from '../models/user';\n\n  // Configuration\n  import config from '../config';\n\n  // Extracting the secretKey and the expiresIn\n  const { security: { secretKey, expiresIn } } = config;\n\n  const router = express.Router();\n\n  // Token Validation\n  const validateToken = (req, res, next) => {\n    if (req.headers['access-token']) {\n      // The token should come as 'Bearer <access-token>'\n      req.accessToken = req.headers['access-token'].split(' ')[1];\n\n // We just need the token that's why we split the string by       \n     //space \n      // and we got the token in the position 1 of the array \n      //generated \n      // by the split method.\n      return next();\n    } else {\n      res.status(403).send({ \n error: 'You must send an access-token header...'\n      });\n    }\n  }\n\n  // POST login - This will generate a new token\n  router.post('/login', (req, res) => {\n    const { username, password } = req.body;\n\n    login(username, password, data => {\n      if (Object.keys(data).length === 0) {\n        res.status(403).send({ error: 'Invalid login' });\n      }\n\n      // Creating the token with the \n      // user data + secretKey + expiration time\n      jwt.sign({ data }, secretKey, { expiresIn }, (error, \n accessToken) => {\n        res.json({\n          accessToken\n        });\n      });\n    });\n  });\n\n  // We pass validateToken as middleware and then we verify with   \n  //  req.accessToken\n    router.get('/posts', validateToken, (req, res, next) => {\n      jwt.verify(req.accessToken, secretKey, (error, userData) => {\n        if (error) {\n          console.log(error);\n          res.status(403).send({ error: 'Invalid token' });\n        } else {\n          findAllPosts(posts => {\n            res.json({\n              response: posts,\n              user: userData\n            });\n          });\n        }\n      });\n    });\n\n    // From here all the others endpoints are public...\n    router.get('/post/:slug', (req, res, next) => {\n      const { params: { slug } } = req;\n\n      findBySlug(slug, singlePost => {\n        console.log('single', singlePost);\n        if (!singlePost || singlePost.length === 0) {\n          res.send({\n            error: true,\n            message: 'Post not found'\n          });\n        } else {\n          res.json({\n            response: [singlePost]\n          });\n        }\n      });\n    });\n\n // POST Methods\n    router.post('/post', (req, res, next) => {\n      const { title, content } = req.body;\n\n      createPost(title, content, (data, error = false) => {\n        if (error) {\n          res.json({\n            error: true,\n            details: error\n          });\n        } else {\n          res.json({\n            response: {\n              saved: true,\n              post: data\n            }\n          });\n        }\n      });\n    });\n\n    // DELETE Methods\n    router.delete('/post/:slug', (req, res, next) => {\n      const { params: { slug } } = req;\n\n      removePost(slug, (removed, error) => {\n        if (error) {\n          res.json({\n            error: true,\n            message: 'There was an error trying to remove this \n            post...'\n          });\n        } else {\n          res.json({\n            response: {\n              removed: true\n            }\n          });\n        }\n      });\n    });\n\n    // PUT Methods\n    router.put('/post/:slug', (req, res, next) => {\n      const { params: { slug }, body: { title, content } } = req;\n\n      updatePost(slug, title, content, (affected, error) => {\n        if (error) {\n          res.json({\n            error: true,\n            message: 'There was an error trying to update the post'\n          });\n        } else {\n          res.json({\n            response: {\n              updated: true,\n              affected\n            }\n          });\n        }\n      });\n    });\n\n export default router;\n```"]