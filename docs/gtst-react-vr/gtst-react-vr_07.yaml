- en: Sitting Down with a (Virtual) Teapot
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 坐在（虚拟）茶壶旁
- en: In the last chapter, we found out a lot about polygons and how to use them in
    real-time graphics. We will continue the work with polygons, and learn more about
    texturing them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了很多关于多边形以及如何在实时图形中使用它们的知识。我们将继续使用多边形，并学习更多关于给它们贴图的知识。
- en: 'In this chapter, we will learn the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Basics of how to use Blender
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Blender的基础知识
- en: How to apply basic UV texture mapping
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何应用基本的UV纹理映射
- en: How to export texture maps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何导出纹理映射
- en: How to create an MTL file to properly show real-time OBJ texturing and materials
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建MTL文件以正确显示实时OBJ纹理和材质
- en: Pulling it all together for our teapot gallery
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的茶壶画廊整合一切
- en: Blender is just one of many polygon modelers that you can use to make virtual
    objects for use with WebVR. If you are already familiar with the concepts of polygon
    modeling, and creating and editing UV maps, you wouldn't really need most of this
    chapter. Once we do the UV mapping, we import the model into the world. I've also
    placed the static files for this chapter at: [http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7)
    so you can download them instead of building them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Blender只是许多多边形建模器之一，您可以使用它来制作用于WebVR的虚拟对象。如果您已经熟悉多边形建模的概念，并且创建和编辑UV映射，那么您实际上不需要本章的大部分内容。一旦我们完成UV映射，我们就将模型导入到世界中。我还将本章的静态文件放在了[http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7)，这样您就可以下载它们，而不是自己构建它们。
- en: UV modeling can be tedious. You won't hurt my feelings if you just download
    the files. Please skim through the following though, as we build these models
    we will put them in the virtual world.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: UV建模可能会很乏味。如果您只是下载文件，我不会介意的。但请浏览以下内容，因为我们构建这些模型时，我们将把它们放在虚拟世界中。
- en: The teapot in Blender
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Blender中的茶壶
- en: To learn how to UV map, let's put a teapot in Blender. Today, this will work
    pretty well, but normally a teapot wouldn't fit in a Blender.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要学习如何UV映射，让我们在Blender中放一个茶壶。今天，这将运行得相当顺利，但通常茶壶不会适合在Blender中。
- en: You can download Blender at [blender.org](http://www.blender.org). While there,
    I highly recommend the tutorials on the site at [bit.ly/BlendToots](http://bit.ly/BlendToots).
    Packt also has quite a few good books on Blender. You can find these at: [http://bit.ly/BlenderBooks](http://bit.ly/BlenderBooks).
    You might be a little confused or frustrated with basic cursor movements, and
    selecting if you haven't been through these tutorials; seeing an animation of
    the cursor moving helps more than writing about it would. In particular, please
    watch the cursor selection tutorials under *Getting Started* at: **[http://bit.ly/BlendStart](http://bit.ly/BlendStart).**
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[blender.org](http://www.blender.org)下载Blender。在那里，我强烈推荐网站上的教程[bit.ly/BlendToots](http://bit.ly/BlendToots)。Packt还有很多关于Blender的好书。您可以在[http://bit.ly/BlenderBooks](http://bit.ly/BlenderBooks)找到这些书。如果您还没有通过这些教程，对基本的光标移动和选择可能会感到有些困惑或沮丧；看到光标移动的动画比写作更有帮助。特别是，请观看*入门*下的光标选择教程：[http://bit.ly/BlendStart](http://bit.ly/BlendStart)。
- en: 'To start texturing, we will use the venerable Utah teapot by Martin Newell.
    It is one of the more famous "test models" for computer graphics. This is the
    original Utah teapot, currently on display at the Computer History Museum in Mountain
    View, California (courtesy of Marshall Astor):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始贴图，我们将使用Martin Newell的著名的“犹他州茶壶”。这是计算机图形学中更著名的“测试模型”之一。这是原始的犹他州茶壶，目前在加利福尼亚州山景城的计算机历史博物馆展出（由Marshall
    Astor提供）：
- en: '![](Images/cea99f22-c6bf-43ba-9d63-a22b5c08e0eb.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cea99f22-c6bf-43ba-9d63-a22b5c08e0eb.jpg)'
- en: The computer graphics version was *squished* in a demo and the squish stuck.
    You can read more about this at: [http://bit.ly/DrBlinn](http://bit.ly/DrBlinn).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机图形学版本被*压扁*在演示中，这种压扁是固定的。您可以在[http://bit.ly/DrBlinn](http://bit.ly/DrBlinn)了解更多信息。
- en: 'Here''s the teapot in Blender. You can get here by turning on extra shapes
    in the preferences:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Blender中的茶壶。您可以通过在首选项中打开额外形状来到这里：
- en: 'Click on the menu File, then User Preferences (File->User Preferences), and
    then click on Extra Objects:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击菜单文件，然后用户首选项（文件->用户首选项），然后点击额外对象：
- en: '![](Images/d9c25243-15ab-461b-b28f-c76b97fc0164.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d9c25243-15ab-461b-b28f-c76b97fc0164.png)'
- en: Don't forget to then click the button at the bottom of the screen,  Save User
    Settings, or the objects won't be there the next time you go in. Once you save,
    close the Blender User Preferences window.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记然后点击屏幕底部的按钮“保存用户设置”，否则下次进入时对象将不在那里。保存后，关闭Blender用户首选项窗口。
- en: 'Then, on the menu at the bottom of the 3D window, click on Add->Mesh->Extras->Teapot+:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在3D窗口底部的菜单上，点击“添加->网格->额外->茶壶+”：
- en: '![](Images/7924a823-1062-4737-8076-f3c7e934e84a.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7924a823-1062-4737-8076-f3c7e934e84a.png)'
- en: Once you do that, for instructional purposes only, choose a resolution of 3
    on the pane on the bottom left hand side as shown here.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你这样做了，仅供教学目的，选择左下角窗格上的分辨率为3，如图所示。
- en: '![](Images/60d476ca-e3a2-4cd4-83da-3507fe2e2404.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/60d476ca-e3a2-4cd4-83da-3507fe2e2404.png)'
- en: It is pretty neat that you can increase the resolution of the teapot; this would
    have saved me an hour of poking around on the internet while writing this chapter,
    had I noticed that earlier. We change it to 3 to make the polygons bigger, which
    will be a lot easier to click on while doing this tutorial.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 增加茶壶的分辨率是相当不错的；如果我早点注意到这一点，写这一章节时就可以节省我一个小时在互联网上搜索了。我们将其更改为3，以使多边形更大，这样在进行本教程时更容易点击。
- en: 'Then, you want to click on the teapot (left-click) in the 3D window to select
    it; the teapot will then have an orange outline. Then get back to Edit Mode by
    clicking on the word Object Mode next to the menu item Object, then select Edit
    Mode:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您要在3D窗口中点击茶壶（左键）以选择它；然后茶壶将有一个橙色的轮廓。然后通过点击对象菜单旁边的“对象模式”一词，返回到编辑模式，然后选择“编辑模式”：
- en: '![](Images/565c43a6-b8eb-47d2-8590-2893b57c37a4.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/565c43a6-b8eb-47d2-8590-2893b57c37a4.png)'
- en: Once you are in Edit Mode, we'll need to be able to see the UV map while we
    select polygons on the teapot. Initially, there won't be a UV map though; keep
    following and we'll create one.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你进入编辑模式，我们需要在选择茶壶的多边形时能够看到UV贴图。最初，可能不会有UV贴图；继续跟着我们，我们会创建一个。
- en: With your mouse over the slight line above the timeline window, the bottom window
    of the screen (the area circled in red in the following screenshot), drag the
    window *up*. This will make enough room for the window.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标放在时间轴窗口上方的细线上，在屏幕底部的窗口（以下截图中用红色圈出的区域）上拖动窗口*向上*。这将为窗口留出足够的空间。
- en: '![](Images/1218c37e-12e8-4ad4-a848-0e84e3687ce4.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1218c37e-12e8-4ad4-a848-0e84e3687ce4.png)'
- en: 'We aren''t doing animations, so we don''t need that window, we''ll change it
    to a UV display. To do this, change the timeline display to show UV map information
    by clicking (red arrow) on the small icon of a clock face (wow, remember analog
    clocks?), and choose UV/Image Editor:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不做动画，所以我们不需要那个窗口，我们会把它改成UV显示。要做到这一点，点击时间轴显示的小时钟图标（哇，还记得模拟时钟吗？），选择UV/Image
    Editor：
- en: '![](Images/58e2c261-e51d-4359-b0a2-456fd1651d1f.png)This is just one way of
    changing your window layouts. One of the confusing things with Blender is that
    you can really mess up your UI by accidentally clicking on a few things, but one
    of the great things is that you can make windows, subwindows, pull outs, shelves,
    and much more with a few clicks of the mouse. The way I just showed you is the
    most straightforward way for teaching, but for real work, you should customize
    the windows the way you want to.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/58e2c261-e51d-4359-b0a2-456fd1651d1f.png)这只是改变窗口布局的一种方式。在Blender中令人困惑的一点是，你可能会因为不小心点击了一些东西而真正搞乱你的用户界面，但其中一个很棒的地方是你可以通过鼠标点击轻松地创建窗口、子窗口、拉出、架子等等。我刚刚向你展示的方法是教学中最直接的方式，但对于真正的工作，你应该按照自己的意愿自定义窗口。'
- en: Once you have changed this view, note that you can zoom in, pan, and move the
    window around just like any other Blender window. For how to zoom, pan, and so
    on. you should watch the tutorial video files located at: [http://bit.ly/BlendStart](http://bit.ly/BlendStart)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你改变了这个视图，请注意你可以像其他Blender窗口一样放大、平移和移动窗口。关于如何放大、平移等等，你应该观看位于[http://bit.ly/BlendStart](http://bit.ly/BlendStart)的教程视频文件。
- en: '![](Images/c7a5a7e1-be11-42f2-b8da-ba53509765a2.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c7a5a7e1-be11-42f2-b8da-ba53509765a2.png)'
- en: So, we can see what our texture looks like with our model; click on Open and
    find a texture file you want to map onto your teapot (or model). I'm using `ButcherTile_Lettered.jpg`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所以，我们可以看到我们的模型使用我们的纹理是什么样子的；点击“打开”并找到一个你想要映射到你的茶壶（或模型）上的纹理文件。我正在使用`ButcherTile_Lettered.jpg`。
- en: 'Once you''ve done that, do the first UV unwrapping! In the upper window''s
    menu, click on Mesh->UV Unwrap->Unwrap, like so:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，进行第一次UV展开！在上窗口的菜单中，点击Mesh->UV Unwrap->Unwrap，就像这样：
- en: '![](Images/fd838f50-b071-4ba8-9552-fc1641598535.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fd838f50-b071-4ba8-9552-fc1641598535.png)'
- en: In the bottom window, it'll show you how it has unwrapped the texture.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部窗口，它会显示出纹理的展开情况。
- en: It looks terrible. Your results may vary with different models.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很糟糕。你的结果可能会因不同的模型而有所不同。
- en: '![](Images/f14a37bb-044d-4182-975b-3f2ea1dd80ed.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f14a37bb-044d-4182-975b-3f2ea1dd80ed.png)'
- en: 'Why is this UV map terrible? From a real-time graphics'' standpoint, it''s
    not bad; it packs all the polygons onto just one texture map, which will help
    with video card RAM:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这个UV贴图看起来很糟糕？从实时图形的角度来看，它并不糟糕；它将所有多边形都打包到一个纹理贴图上，这将有助于视频卡的内存：
- en: '![](Images/f315f1e9-805d-42af-b1fb-aa20b20bc79f.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f315f1e9-805d-42af-b1fb-aa20b20bc79f.png)'
- en: For some objects, it may be fine. If you look at the upper-right and lower-right,
    we see the spout and handle, and they look odd. It may look a little funny rendered;
    let's take a look at what it looks like. To do that, we have to assign some textures
    and then export the teapot. (We will cover exporting in a bit; for now, we just
    need to see that we have additional work to do in Blender.)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些物体来说，这可能没问题。如果你看右上角和右下角，我们可以看到壶嘴和手柄，它们看起来有点奇怪。渲染出来可能会有点滑稽；让我们看看它的效果。为了做到这一点，我们必须分配一些纹理，然后导出茶壶。（我们稍后会介绍导出；现在，我们只需要看到我们在Blender中还有额外的工作要做。）
- en: Note that you can get a quick look by rendering inside Blender, but this may
    disappoint you, as Blender will almost certainly render your model totally differently.
    The overall colors and textures will be the same, but the more subtle (and important)
    texture details that React VR, and WebGL are capable of will be lost (or better,
    with an offline, non real-time renderer); conversely, if you really work with
    Blender or look better, rendering can produce phenomenal work.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你可以通过在Blender内部渲染来快速查看，但这可能会让你失望，因为Blender几乎肯定会以完全不同的方式渲染你的模型。总体的颜色和纹理将是相同的，但React
    VR和WebGL能够实现的更微妙（也更重要）的纹理细节将会丢失（或者更好的是，使用离线、非实时渲染器）；相反，如果你真的在Blender中工作或者想要更好的效果，渲染可以产生惊人的作品。
- en: For example, in Blender, using the cycles renderer, it took me 11.03 seconds
    to render our teapot.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Blender中，使用循环渲染器，渲染我们的茶壶花了11.03秒。
- en: In React VR, to maintain at least 60 frames per second, this has to happen in
    less than .016 seconds. Blender took over 600 times longer to generate the same
    image; shouldn't it look better? The teapot doesn't look bad, but the UV mapping
    is just weird.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在React VR中，为了保持至少60帧每秒，这必须在不到0.016秒内完成。而Blender花了600多倍的时间来生成相同的图像；难道它不应该看起来更好吗？茶壶看起来并不差，但UV映射只是很奇怪。
- en: '![](Images/9b253590-7dce-4ade-bf21-b0e3239a6587.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9b253590-7dce-4ade-bf21-b0e3239a6587.png)'
- en: We can see that the squares are stretched a little oddly over the teapot. (If
    you stop and think about what we're doing, we just put a tile pattern on a teapot;
    these are the wonders of computer graphics. I'm using the checkerboard pattern,
    so we can see stretching on the pot. Later on, I'll have a better texture that
    I made with Substance Designer.)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到方块在茶壶上有点奇怪地拉长了。（如果你停下来想想我们在做什么，我们只是在茶壶上放了一个瓷砖图案；这就是计算机图形的奇迹。我正在使用棋盘格图案，所以我们可以看到壶上的拉伸。以后，我会用Substance
    Designer制作一个更好的纹理。）
- en: You can experiment in Blender by clicking on a polygon (in Edit Mode) and see
    where that polygon is in the UV map. In Blender's defense, the map isn't terrible,
    it's just not what we want. Sometimes (nearly all the time), a human is required
    to really make art.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Blender中进行实验，点击多边形（在编辑模式中），看看该多边形在UV映射中的位置。为了辩护Blender，这个映射并不是很糟糕，只是不是我们想要的。有时（几乎总是），需要一个人来真正创作艺术。
- en: Fixing the UV maps for the teapot
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复茶壶的UV映射
- en: To texture the pot a little easier, first let's create separate materials for
    the spout, handle, and lid. This will make our texture maps larger and less "stretched".
    You can also do this by packing textures together in one larger bitmap, which
    honestly is sometimes a little better for VR; the overall approach is the same,
    just more packed into a smaller area.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易地给壶上纹理，首先让我们为壶嘴、手柄和盖子创建单独的材料。这将使我们的纹理地图更大，拉伸得更少。你也可以通过将纹理打包在一个更大的位图中来做到这一点，老实说，有时这对于VR来说更好一些；总体方法是相同的，只是更多地打包在一个较小的区域内。
- en: Let's create four materials for the pot, handle, spout, and lid (you should
    still be in Edit Mode).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为壶、手柄、壶嘴和盖子创建四种材料（你应该仍然处于编辑模式）。
- en: 'Click on the little icon that sort of looks like a shiny globe. Then, click
    on the "+" key four times, as shown, and then on the new key:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击那个看起来有点像闪亮的地球的小图标。然后，点击“+”键四次，如图所示，然后点击“新建”：
- en: '![](Images/1e79d266-1f7f-435b-af00-67f763c45aaa.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1e79d266-1f7f-435b-af00-67f763c45aaa.png)'
- en: 'Once you''ve clicked on the + key four times, you''ll have four slots for the
    materials we are creating. You then click on New to actually add a material. It
    seems slightly clunky, but that''s how Blender works:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你点击了“+”键四次，你将有四个我们正在创建的材料的插槽。然后你点击“新建”来实际添加一个材料。这似乎有点笨拙，但这就是Blender的工作方式：
- en: '![](Images/c681b81f-f816-4361-9236-b4959d235118.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c681b81f-f816-4361-9236-b4959d235118.png)'
- en: 'When you click on New, you will get a Material.001:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“新建”时，你会得到一个Material.001：
- en: '![](Images/f47e3f20-36b1-48b7-8f38-5df633f7670b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f47e3f20-36b1-48b7-8f38-5df633f7670b.png)'
- en: 'You can click on the area in the red circle and change the name. In this way,
    create four materials, as follows:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以点击红圈中的区域并更改名称。这样，创建四种材料，如下所示：
- en: Create a Pot material (will be a ceramic coated metal).
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个壶材料（将是陶瓷涂层金属）。
- en: Create a Lid material (the same texture as the pot).
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个盖子材料（和壶一样的纹理）。
- en: Create a Spout material (let's make that copper).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个壶嘴材料（让我们把它做成铜制的）。
- en: Create a Handle material (let's make that worn rubber).
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个手柄材料（让我们把它做成磨损的橡胶）。
- en: We don't really need to create these materials; you can overlay the same texture
    map on several UVs, but I wanted to do a fresh take on the teapot (which, as we
    can see, was a solid piece of ceramic), and it's instructive to see different
    materials.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不真的需要创建这些材质；你可以在几个UV上叠加相同的纹理贴图，但我想对茶壶进行一次新的尝试（正如我们所看到的，它是一个实心的陶瓷制品），看到不同的材质是有益的。
- en: Now that these extra materials are created, you can move the UVs to map the
    object better. UV mapping is a large subject, and it takes a certain technical
    and artistic skill to do well, or the PC could do it automatically. This is a
    little beyond the scope of this book, but I'll show you a quick and dirty method
    to UV map some common objects. Many of the files you find on the web may not have
    good UV maps applied, so you may find yourself in a situation where you think
    you don't need to learn a modeler, but will use it to correct UV maps (which is
    a pretty high-end activity when it comes to polygon modeling!).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些额外的材质已经创建，你可以移动UV以更好地映射对象。UV映射是一个庞大的主题，需要一定的技术和艺术技能才能做好，或者PC可以自动完成。这超出了本书的范围，但我会向你展示一个快速而粗糙的方法来对一些常见的物体进行UV映射。你在网上找到的许多文件可能没有应用良好的UV映射，所以你可能会发现自己处于这样一种情况，你认为自己不需要学习建模，但会用它来纠正UV映射（这在多边形建模时是一个相当高端的活动！）。
- en: Once you have created the four materials, you can map each section independently
    to its own UV maps; when it is time to present this in our VR world, we will use
    different texture maps for each piece. You can use the same texture map if you
    want to make a single ceramic pot, but our battered metal one may look better.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了这四种材质，你可以将每个部分独立地映射到自己的UV映射上；当我们在VR世界中展示时，我们将为每个部分使用不同的纹理贴图。如果你想制作一个单独的陶瓷壶，你可以使用相同的纹理贴图，但我们破旧的金属壶可能看起来更好。
- en: It's art; beauty is in the eye of the beholder.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是艺术；美在于观者的眼中。
- en: 'Once you''ve established the four materials as we did above, select the polygons
    in each major area and click on Assign to make them part of this material:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你像上面那样确定了四种材质，选择每个主要区域的多边形，然后点击“分配”使它们成为这种材质的一部分：
- en: Press the "A" key on the keyboard (or Select->(De)select All | A) to deselect
    all the polygons. We will then select the ones in each of the areas, the lid,
    handle, spout, and pot (main body).
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下键盘上的“A”键（或选择->（取消）选择所有| A）取消选择所有的多边形。然后我们将选择每个区域的多边形，盖子、把手、壶嘴和壶（主体）。
- en: 'Switch to ''Poly Selection''. Blender has different selection modes–point,
    line, polygon. For this, you want to switch to selecting polygons, by clicking
    on this icon:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到“多边形选择”。Blender有不同的选择模式-点、线、多边形。对于这个，你需要切换到选择多边形，点击这个图标：
- en: '![](Images/bb39fef6-4c4a-4cbe-beac-66c590740113.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/bb39fef6-4c4a-4cbe-beac-66c590740113.png)'
- en: Click on the main pot polygons by using *Shift + click* to select multiple polygons.
    Blender has a wealth of selection tools like box select, and others, per the tutorials
    at: [http://bit.ly/BlendStart](http://bit.ly/BlendStart)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击主壶多边形，使用*Shift + 点击*选择多个多边形。Blender拥有丰富的选择工具，如框选等，可以参考教程：[http://bit.ly/BlendStart](http://bit.ly/BlendStart)
- en: Once you've selected the polygons in the main body, you click on the Assign
    button to assign that polygon to a material, in this case the 'Pot' material.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你选择了主体的多边形，点击“分配”按钮将该多边形分配给一个材质，比如“壶”材质。
- en: '![](Images/1ca11b68-d453-4d9d-8074-347fdd697398.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1ca11b68-d453-4d9d-8074-347fdd697398.png)'
- en: Once you have the polygons assigned, click on View->Front then click on Mesh->UV
    Unwrap->Cylinder Projection. You will then have a UV map in our image editor we
    set up earlier, although it stretches off of the image you could assign.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你分配了多边形，点击“视图->前视”，然后点击“网格->UV展开->圆柱投影”。然后在我们之前设置的图像编辑器中会有一个UV映射，尽管它会从你分配的图像上拉伸出来。
- en: 'To fix this, in the menu on the lower half of the screen, select UVs->Pack
    Islands:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要解决这个问题，在屏幕下半部分的菜单中，选择UVs->Pack Islands：
- en: '![](Images/84ef1212-462e-4063-8b3e-a6602ef5e9a5.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/84ef1212-462e-4063-8b3e-a6602ef5e9a5.png)'
- en: That's a basic texture mapping. You can fiddle with this a lot (and it can be
    frustrating). Blender has a number of useful automatic UV assignment tools; in
    the 3D (modeling) window, as we saw earlier, Mesh->UV Unwrap->(options) offers
    a lot of ways to do the unwrapping. I found that Project from View as well as
    Cylinder Projection, both from a strict top/bottom/left/right view can unwrap
    UVs pretty well. After having said that, some artistry comes into play. The spout,
    lid, and handle are smaller than the body, so you may want to waste some UV space
    and make these smaller if you want your texture to line up more or less with the
    main, pot, and texture.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基本的纹理映射。你可以对此进行很多调整（这可能会让人沮丧）。Blender有许多有用的自动UV分配工具；在3D（建模）窗口中，正如我们之前看到的那样，Mesh->UV
    Unwrap->（选项）提供了许多解包的方法。我发现从视图投影以及圆柱投影，都可以从严格的上/下/左/右视图中很好地展开UV。在说了这些之后，一些艺术性就会发挥作用。壶嘴、壶盖和手柄比壶身小，所以如果你希望你的纹理与主要的壶和纹理更或多或少地对齐，你可能需要浪费一些UV空间并将这些部分缩小。
- en: Or you can download the `teapot2.obj` and `teapot2_Mats.mtl` from the GitHub
    files at: [http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7) and save yourself some
    sanity.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以从GitHub文件中下载`teapot2.obj`和`teapot2_Mats.mtl`，并节省一些理智：[http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7)。
- en: 'These four UV mappings would not be bad (but feel free to learn, study, and
    do better! I''m not an artist!). The UV mapping for the main body, the Pot material
    is shown here:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个UV映射不错（但是请随意学习，研究，做得更好！我不是艺术家！）。主体的UV映射，壶的材质在这里显示：
- en: '![](Images/914310a7-3d31-4dbb-8dfd-1ebb347d5712.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/914310a7-3d31-4dbb-8dfd-1ebb347d5712.png)'
- en: 'The UV Mapping for the Lid material:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 盖子材质的UV映射：
- en: '![](Images/6e8328b9-eee9-45dd-a3e4-b0a4a8d8e48f.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6e8328b9-eee9-45dd-a3e4-b0a4a8d8e48f.png)'
- en: 'The UV mapping for the Handle material (intentionally made smaller, to make
    the squares line up, more or less, with the main pot):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 手柄材质的UV映射（故意缩小，以使方块与主壶更或多或少对齐）：
- en: '![](Images/1f517cbe-5870-4e70-ba01-979dabba3e21.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1f517cbe-5870-4e70-ba01-979dabba3e21.png)'
- en: 'The UV mapping for the Spout material (intentionally made smaller, to make
    the squares line up, more or less, with the main pot):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 壶嘴材质的UV映射（故意缩小，以使方块与主壶更或多或少对齐）：
- en: '![](Images/3f615e41-95ec-45e2-bead-6b691258b85f.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3f615e41-95ec-45e2-bead-6b691258b85f.png)'
- en: 'With these UV assignments, our teapot, displayed twice, rotated slightly between
    each one, looks much better:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些UV分配，我们的茶壶显示两次，在每次之间略微旋转，看起来好多了：
- en: '![](Images/83dd97bd-c0d4-4ac1-a030-6558a7f31993.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/83dd97bd-c0d4-4ac1-a030-6558a7f31993.png)'
- en: You can fiddle with UVs a lot. In the preceding screenshot, if we were mapping
    a texture that was mostly tile squares over the pot, we can see that although
    the handle and the spout match the main body pretty well, the lid, although it
    doesn't look stretched as our first picture did, still looks a little smaller
    than the other squares. The fix for this is to go into the 3D panel, select just
    the lid polygons (first hit "a" until nothing is selected), go to the material
    in the properties tab and click on the Lid material, "select" to select all polygons,
    and then go to the UV window and scale the UV mapped polygons down a little smaller.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以对UV进行很多调整。在前面的截图中，如果我们要在壶上映射大部分是瓷砖方块的纹理，我们可以看到，尽管手柄和壶嘴与主体相匹配得很好，但是盖子，虽然看起来没有我们第一张图片那样拉伸，但仍然比其他方块小一点。解决这个问题的方法是进入3D面板，仅选择盖子多边形（首先按下"a"直到没有选择任何内容），转到属性选项卡中的材质，点击盖子材质，“选择”以选择所有多边形，然后转到UV窗口，将UV映射的多边形缩小一点。
- en: However, in our case, we want to make totally different materials for these
    items anyway, so getting too worried about UVs at this point may be misdirected.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的情况下，无论如何，我们都希望为这些物品制作完全不同的材料，所以在这一点上过于担心UV可能是错误的。
- en: Your mileage may vary.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你的效果可能会有所不同。
- en: Importing materials
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入材料
- en: At the same time, we can use all the capabilities that React VR offers with
    regard to materials. The MTL file, unfortunately, doesn't always have the values
    possible. If you are using a modern material, that has base color, bump map or
    normal map, height, specular (shinyness), or metallic (similar to shinyness) maps,
    I've found that you may need to just hand edit the MTL file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们可以利用React VR在材料方面提供的所有功能。不幸的是，MTL文件并不总是具有可能的值。如果您使用的是现代材料，具有基本颜色、凹凸贴图或法线贴图、高度、镜面（光泽）或金属（类似于光泽）贴图，我发现您可能需要手动编辑MTL文件。
- en: You would think with the wealth of computer graphics programs out there, that
    we wouldn't be at this point. Unfortunately, different rendering systems, especially
    nodal based ones, are too sophisticated for an OBJ exporter to really understand;
    as a result, typically most MTL files (materials) that go along with an OBJ file
    have only the base color as a texture map.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为有这么多的计算机图形程序，我们不会到这一步。不幸的是，不同的渲染系统，特别是基于节点的系统，对于OBJ导出器来说太复杂，无法真正理解；因此，通常随OBJ文件一起使用的大多数MTL文件（材料）只有基本颜色作为纹理贴图。
- en: 'If you are using a program such as Quixel or Substance Designer, most **Physically
    Based Rendering** (**PBR**) materials consist of most of the following texture
    maps (images), which are also supported by the OBJ file format:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Quixel或Substance Designer等程序，大多数**基于物理的渲染**（**PBR**）材料由以下大部分纹理贴图（图像）组成，这也受到OBJ文件格式的支持：
- en: '**Base color**: This is what the material usually looks like, almost always
    exported with most CAD systems to OBJ (MTL) files as `map_Ka`.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本颜色**：这通常是材料的外观，几乎总是与大多数CAD系统一起导出到OBJ（MTL）文件中作为`map_Ka`。'
- en: '**Diffuse map**: Usually the same thing as the base color, it is the "diffuse"
    color of the object. You would implement this as `map_Ka` as well.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漫反射贴图**：通常与基本颜色相同，它是物体的“漫反射”颜色。您可以将其实现为`map_Ka`。'
- en: '**Bump map**: Bump maps are "height" information, but do not physically deform
    the polygons. They will look like they are carved, but if you look closely, the
    polygons will not actually displace. *This may cause an issue in VR*. One of your
    eyes will say *this is dented*, but your stereoscopic depth perception will say
    *no it''s not*. Bumps can, however, make things look really good in the right
    circumstances. This is written as* bump*in the MTL file.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凹凸贴图**：凹凸贴图是“高度”信息，但不会物理变形多边形。它们看起来像是被雕刻的，但如果你仔细看，多边形实际上并没有位移。*这可能会在VR中引起问题*。你的一只眼睛会说*这是凹陷的*，但你的立体深度感知会说*不是*。然而，在适当的情况下，凹凸可以让事物看起来非常好。在MTL文件中写为*bump*。'
- en: '**Height map**:Very similar to bump maps, the height map will usually physically
    displace polygons off of the surface. However, in most web rendering, it will
    displace only the modeled polygons, so it''s far less useful than with offline
    renderers. (Game engines can do microdisplacements, however.)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度贴图**：与凹凸贴图非常相似，高度贴图通常会在物体表面上物理位移多边形。然而，在大多数网络渲染中，它只会位移建模的多边形，因此比离线渲染器要不太有用。（游戏引擎可以进行微位移。）'
- en: '**Normal map:** A normal map is an RGB representation for something similar,
    but more complex than the height or bump maps, which are gray scale. A normal
    map is an RGB map, and can displace polygons to the *left* or *right* in addition
    to up or down. Modern game engines calculate the normal map from a high resolution
    (hundreds of thousands to millions) model to a lower resolution model. It allows
    for an object with simple polygons to look like it is built out of millions of
    polygons. It may or may not physically deform the model (depending on the shader).
    It is not directly supported by the OBJ/MTL file format, but *is* supported by
    WebGL, and thus three.js, although implementation is left as an exercise for the
    reader.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**法线贴图**：法线贴图是一种RGB表示，比高度或凹凸贴图更复杂，后者是灰度。法线贴图是RGB贴图，可以使多边形向*左*或*右*位移，而不仅仅是上下。现代游戏引擎会从高分辨率（数十万到数百万）模型计算法线贴图到低分辨率模型。它使得简单多边形的物体看起来像是由数百万多边形构建而成。它可能会或可能不会在物体上产生物理变形（取决于着色器）。它不受OBJ/MTL文件格式直接支持，但受到WebGL和three.js的支持，尽管实现留给读者自行完成。'
- en: '**Specular map**: This controls (use glTF) how shiny or dull an object is.
    Usually a gray map (no color information). More specifically, a specular map controls
    "if" an area of a texture is shiny or not. This is map_Ns. Map_Ks is also a specular
    map, but controls what color the highlights are. This can be used for "ghost paint"
    on cars, for example.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高光贴图**：这控制着物体的光泽度。通常是灰色贴图（没有颜色信息）。更具体地说，高光贴图控制着纹理的某个区域是否有光泽。这是map_Ns。Map_Ks也是高光贴图，但控制着高光的颜色。例如，可以用于汽车上的“幽灵漆”。'
- en: '**Glossiness**: Not quite the same thing as specular, but is often confused.
    Glossiness is how tight the specular highlight is; it could be broad but shiny,
    like dull rubber, or tight and shiny, like a candy apple, or Chrome. It is basically
    the *value* that is applied to the specular map. Often used with PBR, it is not
    used by the OBJ/MTL file format.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**光泽度**：与高光不完全相同，但经常被混淆。光泽度是指高光的亮度；它可以是宽泛但有光泽，如暗橡胶，也可以是紧致而有光泽，如糖苹果或铬。基本上是应用于高光贴图的*值*。通常与PBR一起使用，不受OBJ/MTL文件格式支持。'
- en: '**Roughness**: Very similar to the specular and glossiness maps, it''s often
    included instead or along with the preceding. Often used with PBR, it is not used
    by the OBJ/MTL file format.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粗糙度**：与高光和光泽度贴图非常相似，通常是替代或与前者一起使用。通常与PBR一起使用，不受OBJ/MTL文件格式支持。'
- en: '**Reflectivity**: Generally speaking, the OBJ file format is used for offline
    rendering, which does raytracing reflections that approximate the way the real
    world works. WebGL, for performance reasons, doesn''t ray trace everything, but
    can simulate reflectivity with a reflection map. In the OBJ file, the amount of
    reflection is static; you can''t directly make patchy reflection. This map is
    coded as *refl* in the OBJ file, but is not simulated by React VR in the OBJ/MTL
    file format.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反射率：一般来说，OBJ文件格式用于离线渲染，进行射线追踪反射，近似模拟真实世界的工作方式。出于性能原因，WebGL并不对所有内容进行射线追踪，但可以使用反射贴图模拟反射。在OBJ文件中，反射的程度是静态的；你无法直接制作斑驳的反射。这个贴图在OBJ文件中被编码为*refl*，但在OBJ/MTL文件格式中，React
    VR不模拟它。
- en: '**Transparency**: Mapped as *d* and *map_d*. (d stood for "density" in the
    original MTL file.) This is not refractive transparency; light will either go
    through or not. It''s useful for things like glass bottles and is not used by
    React VR.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**透明度**：映射为*d*和*map_d*。（d在原始MTL文件中代表“密度”）。这不是折射透明度；光线要么穿过要么不穿过。对于玻璃瓶之类的物体很有用，但React
    VR不使用。'
- en: '**Decal**: This applies a stencil on top of objects, and is very useful for
    avoiding the repeating texture look, and adding words on top. In the MTL, the
    file is coded as *decal*. This can be very useful, and decal is supported in React
    VR. However, I find that most modelers will not export it, so you may need to
    hand edit a material file to include a decal. This is not so bad, as typically
    you''ll have different decals (such as signs, stains, and more) with different
    models in your world.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贴花**：这会在物体顶部应用模板，并且非常有用，可以避免重复的纹理外观，并在顶部添加文字。在MTL中，文件被编码为*decal*。这可能非常有用，并且在React
    VR中支持贴花。但是，我发现大多数建模者不会导出它，因此您可能需要手动编辑材质文件以包含贴花。这并不太糟糕，因为通常您的世界中的不同模型将具有不同的贴花（例如标志、污渍等）。'
- en: Fixing the deck plates
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复甲板板
- en: Now that we have learned how to UV map, let's fix those cubes that we use to
    represent the deck plates. We found out, while doing textures on top of the basic
    React VR objects, that the cube represented the same texture on all six sides
    of the cube. As a result, when we make a thin cube, like we did for the top and
    bottom of the pedestals, or with the deck plates, the texture map looks "squished"
    on the sides.  The red arrow shows the squished texture; it's because we have
    a box that's only .1 high and 5 wide, with a texture that's square (the double
    red arrows), so it looks squished.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何进行UV映射，让我们修复那些用来表示甲板板的立方体。在对基本的React VR对象进行纹理处理时，我们发现，立方体在所有六个面上都表示相同的纹理。因此，当我们制作一个薄的立方体，就像我们为基座的顶部和底部或甲板板所做的那样时，纹理贴图在侧面看起来“挤压”。红色箭头显示了挤压的纹理；这是因为我们有一个高度只有.1，宽度为5的盒子，而纹理是正方形的（双重红色箭头），所以看起来被挤压了。
- en: '![](Images/3744dade-d866-4648-a30c-814e04b1085a.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3744dade-d866-4648-a30c-814e04b1085a.png)'
- en: We can fix that with a cube in Blender. We'll also add the additional texture
    maps that we downloaded.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Blender中用一个立方体来修复这个问题。我们还将添加我们下载的额外纹理贴图。
- en: 'I have Substance Designer, which is a fantastic texturing tool; there are many
    others, such as Quixel. It will output different texture maps depending on how
    you set it up. You can also use any of a variety of packages that will allow you
    to bake textures. WebGL will allow you to use shaders, but this is somewhat complex.
    It is supported through React Native, but this is a bit difficult at this point,
    so let''s cover the case of individual texture maps for the different material
    values. It will all break down to that in the .obj file usually anyway (.obj doesn''t
    have the concept of modern GPU shaders):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我有Substance Designer，这是一个很棒的纹理工具；还有许多其他工具，比如Quixel。它将根据您的设置输出不同的纹理贴图。您还可以使用各种软件包来烘焙纹理。WebGL将允许您使用着色器，但这有些复杂。它通过React
    Native支持，但目前有点困难，因此让我们讨论不同材质值的个别纹理贴图的情况。通常在.obj文件中，这将会分解为这样的情况（.obj没有现代GPU着色器的概念）：
- en: Create a cube in Blender, and resize it (in Edit Mode) so that it is much shorter
    than it is wide or high. This will make our deck plate. In our VR world, we made
    it 5x5x.1, so let's make the Blender cube 5x5x.1.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Blender中创建一个立方体，并调整其大小（在编辑模式中），使其比宽或高短得多。这将成为我们的甲板板。在我们的VR世界中，我们将其设置为5x5x.1，因此让Blender立方体也设置为5x5x.1。
- en: 'Then, we texture map it roughly, as follows:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们粗略地对其进行纹理贴图，如下所示：
- en: '![](Images/d1cebd8a-ccad-4a5c-b6e8-432306bf50a0.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d1cebd8a-ccad-4a5c-b6e8-432306bf50a0.png)'
- en: 'Export it to OBJ and choose the following parameters; the important ones are
    -Z forward, Y up (Y is up!) and Strip Path (otherwise, it''ll include your physical
    disk location, which the Asset call from a web server obviously can''t serve up):'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其导出为OBJ并选择以下参数；重要的参数是-Z向前，Y向上（Y向上！）和Strip Path（否则，它将包括您的物理磁盘位置，显然无法从Web服务器中调用）：
- en: '![](Images/991b6521-104d-4a12-86c4-0b8828b62ee2.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/991b6521-104d-4a12-86c4-0b8828b62ee2.png)'
- en: 'Once this is done, we''ll do it the hard but direct way, which is to modify
    the deck plate''s MTL file to directly include the textures we want:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成这些，我们将以困难但直接的方式来做，即修改甲板板的MTL文件，直接包含我们想要的纹理：
- en: '[PRE0]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Displacement textures are somewhat useless; the current rendering engines will
    apply a displacement map, but will not automatically subdivide any polygons to
    achieve microdisplacement. So you've got to generate geometry with as many polygons
    to whatever you want to displace.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 位移纹理有点无用；当前的渲染引擎会应用位移贴图，但不会自动细分任何多边形以实现微位移。因此，你必须生成具有尽可能多多边形的几何体来进行位移。
- en: If you are generating that many polygons, a better way is to just bake in the
    displacement in your modeling program, and export the polygons already displaced.
    It's the same number of polygons anyway, and you have more control. You can selectively
    decimate (reduce polygon count) with this method as well and still preserve your
    surface detail.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你生成了那么多多边形，更好的方法是在建模程序中直接烘烤位移，并导出已经位移的多边形。这样无论如何都是相同数量的多边形，而且你有更多的控制。你也可以选择性地减少多边形数量，并仍然保留你的表面细节。
- en: Baking displacement will dramatically increase the number of vertices and polygons
    in your scene, of course, so it is a tradeoff. Using displacement maps in offline
    renderers (non–Virtual Reality rendering) is often done to reduce polygon counts,
    but doesn't always work for VR. It is possible that VR shaders will do microdisplacement
    and adaptive subdivision, as the state of the art constantly moves forward.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 烘烤位移会显着增加场景中的顶点和多边形数量，所以这是一个权衡。在离线渲染器（非虚拟现实渲染）中使用位移贴图通常是为了减少多边形数量，但并不总是适用于虚拟现实。可能虚拟现实着色器会进行微位移和自适应细分，因为技术不断前进。
- en: 'If you get a blindingly white texture, or something doesn''t look like you
    expect, double-check the node.js console and look for a 404, like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你得到一个刺眼的白色纹理，或者某些东西看起来不像你期望的那样，双重检查node.js控制台，并寻找404，就像这样：
- en: '`Transforming modules 100.0% (557/557), done.`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transforming modules 100.0% (557/557), done.`'
- en: '`::1 - - [20/Sep/2017:21:57:12 +0000] "GET /static_assets/1_New_Graph_Metallic_Color.jpg
    HTTP/1.1" **404** 57 "http://localhost:8081/vr`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`::1 - - [20/Sep/2017:21:57:12 +0000] "GET /static_assets/1_New_Graph_Metallic_Color.jpg
    HTTP/1.1" **404** 57 "http://localhost:8081/vr`'
- en: '`/?hotreload" "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101
    Firefox/57.0"`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`/?hotreload" "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101
    Firefox/57.0"`'
- en: This means you misspelled the texture name.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你拼错了纹理名称。
- en: Then, we'll use object-oriented design coding to modify the class we created,
    which will update all the deck plates! Make the change to the platform call to
    the new deck plates OBJ file instead of a box.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用面向对象的设计编码来修改我们创建的类，这将更新所有的甲板板！将平台调用更改为新的甲板板OBJ文件，而不是一个盒子。
- en: The finished VR world
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成的虚拟现实世界
- en: 'Your complete code should look like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你的完整代码应该是这样的：
- en: '[PRE1]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: That's a lot to type, and a lot of UV modeling. You can download all of these
    files at: [http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很多要输入的内容，也是很多UV建模。你可以在这里下载所有这些文件：[http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7)
- en: 'In the preceding code, I make use of this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我使用了这个：
- en: '`<Platform MyX=''0'' MyZ=''-5.1''/>`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Platform MyX=''0'' MyZ=''-5.1''/>`'
- en: 'This will work, but it is more correct to do this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是可以的，但更正确的做法是这样的：
- en: '`<Platform MyX={0} MyZ={-5.1}/>`'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Platform MyX={0} MyZ={-5.1}/>`'
- en: 'If you know JSX and React, this will be an obvious goof, but not everyone will
    pick up on it (honestly, as a C++ programmer I missed it at first). Anything inside
    `{}` braces is *code* and anything that is quoted is text. The documentation says
    this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你懂JSX和React，这将是一个明显的错误，但不是每个人都会注意到它（老实说，作为C++程序员，我一开始也没有注意到）。花括号`{}`内的任何内容都是*代码*，而任何带引号的都是文本。文档中说：
- en: '*Props - Components can take arguments such as a name in* `<Greeting name=''Rexxar''/>`*.
    Such arguments are known as properties or props and are accessed through the this.props
    variable. Name, from this example, is accessible as `{this.props.name}`. You can
    read more about this interaction under Components, Props, and State.*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*Props - 组件可以接受参数，例如* `<Greeting name=''Rexxar''/>`*中的名称。这些参数称为属性或props，并通过this.props变量访问。例如，从这个例子中，名称可以作为`{this.props.name}`访问。您可以在组件、props和状态下阅读更多关于这种交互的信息。'
- en: The mention about the argument is only true for text props. For numeric props,
    using the quoted syntax like `'0.5*'*` will seem to work, but have weird consequences.
    We'll see more in [Chapter 11](707dc6f5-9666-4f49-952b-fbcf20fc8afc.xhtml), *Take
    a Walk on the Wild Side*, but basically, for numeric variables, you *should* use
    `{0.5}` (braces).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 关于参数的提及仅适用于文本属性。对于数字属性，使用引号语法如`'0.5*'*`似乎可以工作，但会产生奇怪的后果。我们将在[第11章](707dc6f5-9666-4f49-952b-fbcf20fc8afc.xhtml)中看到更多内容，*走进野生*，但基本上，对于数字变量，您*应该*使用`{0.5}`（大括号）。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to do polygon modeling with Blender, and how
    to override texture assignments and wrap textures around models. We learned to
    make textures that can make your world seem more real.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Blender进行多边形建模，以及如何覆盖纹理分配并将纹理包裹在模型周围。我们学会了制作可以使您的世界看起来更真实的纹理。
- en: However, the world is still static. In the next chapter, you will learn how
    to make things move to really bring your worlds to life.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，世界仍然是静态的。在下一章中，您将学习如何使事物移动，真正让您的世界生动起来。
