- en: Your First VR App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的第一个VR应用程序
- en: Well, four chapters of background. Hopefully you just skimmed the last chapter,
    although I expect you'll be looking at it quite a bit, or the online documentation,
    as you build each of your worlds. Now that you have this background, we are well
    prepared to build the first React VR app. We will start by diving deep into React
    VR components, props, and states.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，四章的背景。希望您刚才浏览了最后一章，尽管我希望您会经常查看它，或者在线文档，因为您构建每个世界时都会用到。既然您已经有了这个背景，我们已经准备好构建第一个React
    VR应用程序了。我们将首先深入研究React VR组件、props和状态。
- en: 'You''ll learn the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习以下主题：
- en: Initial world creation/laying down the React VR framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始世界创建/建立React VR框架
- en: Setting up a good background image
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置一个良好的背景图像
- en: How to fix background images so they are truly equirectangular
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何修复背景图像，使其真正等距圆柱形
- en: Adding VR components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加VR组件
- en: Creating new VR keywords (class construction)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的VR关键词（类构造）
- en: Moving beyond hello world - our first VR world
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越“你好，世界”-我们的第一个VR世界
- en: This actually isn't out first VR app, although we didn't really make the first
    app, the npm installer did. In [Chapter 2](28991838-e243-402c-8dbe-c5be520790b8.xhtml), *Flatland
    and Beyond – VR Programming*, in the *Post Node.JS installation - installing React
    VR* section*,* we installed a simple `Hello World` example.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上不是我们的第一个VR应用程序，尽管我们并没有真正制作第一个应用程序，npm安装程序做了。在[第2章](28991838-e243-402c-8dbe-c5be520790b8.xhtml)，“平面世界与超越-VR编程”中，在“安装Node.JS之后-安装React
    VR”部分，我们安装了一个简单的“Hello World”示例。
- en: We will start by creating a new application (directory). But first, let's talk
    about what we are creating, and for that, you get a special prize!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个新的应用程序（目录）。但首先，让我们谈谈我们正在创建的东西，为此，您将获得特别奖品！
- en: VR world design - or, congrats, you are the new Astronomy Museum curator!
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VR世界设计-或者，恭喜，你是新的天文博物馆馆长！
- en: Any project should start, even if informally, with a design. In this case, you've
    received an email telling you "*Congratulations, you have been chosen as the new
    European Space Agency outdoor Museum Curator!*" For your prize, you don't worry,
    no astronomer's night vision will be harmed during this visit. As the museum curator,
    you may pick different art items than I will; in fact, you could go about creating
    a completely new location as well.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 任何项目都应该开始，即使不正式地，也应该有一个设计。在这种情况下，您收到了一封电子邮件，告诉您“*恭喜，您已被选为新的欧洲航天局户外博物馆馆长！*”关于您的奖品，您不必担心，这次访问期间不会损坏任何天文学家的夜视。作为博物馆馆长，您可以选择与我不同的艺术品；实际上，您也可以创建一个全新的位置。
- en: If we do a good job at that, we will then move into outer space, and be able
    to be the first art museum in orbit. As we're the first, we'll be the best museum
    in orbit.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这方面做得很好，那么我们将进入外太空，并且能够成为轨道上的第一个艺术博物馆。因为我们是第一个，所以我们将是轨道上最好的博物馆。
- en: Creating the base React VR components
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本的React VR组件
- en: React VR has a number of base components and code that has to be installed.
    Nearly 19,987 files and 8,111 directories. You don't have to install all of those
    by hand (and the browser won't download all of them, much of this is framework
    that may or may not be packaged). So, how do we install all this?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: React VR有许多基本组件和代码需要安装。将近19,987个文件和8,111个目录。您不必手动安装所有这些（浏览器也不会下载所有这些，其中许多是可能打包的框架）。那么，我们如何安装所有这些？
- en: 'To install everything takes only one step. We will open a Node.js command prompt,
    navigate to whatever directory you want to place your application in, and create
    a new React VR template. Type the following code once you are in the correct directory:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安装所有内容只需要一步。我们将打开一个Node.js命令提示符，导航到您想要放置应用程序的任何目录，并创建一个新的React VR模板。在进入正确的目录后，键入以下代码：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will install a fresh application called `SpaceGallery`. It''ll start installing
    things:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装一个名为`SpaceGallery`的新应用程序。它将开始安装东西：
- en: '![](Images/2a7908aa-f726-4d77-a4bb-babb3578c521.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2a7908aa-f726-4d77-a4bb-babb3578c521.png)'
- en: 'Note the line:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这一行：
- en: '![](Images/d39e5356-6ff7-4f25-8743-159fc829c619.png)These commands frequently
    take a long time to run, but some of the information they show is important.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/d39e5356-6ff7-4f25-8743-159fc829c619.png)这些命令通常需要很长时间才能运行，但它们显示的一些信息很重要。'
- en: In this case, while I was writing the book some of the tools upgraded, and the
    system told me. I generally recommend upgrading as soon as you get one of these
    notices; if you don't, any bugs you submit won't get quite the attention you would
    like, and new features and bug fixes are frequently added.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，当我写书时，一些工具升级了，系统告诉了我。我通常建议一旦收到这些通知就立即升级；如果不这样做，您提交的任何错误都不会得到您想要的关注，并且经常会添加新功能和错误修复。
- en: Sometimes, however, you'll get warnings about stuff you don't really have control
    over, like the note about `connect@2.30.2`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您会收到关于您无法真正控制的东西的警告，比如关于`connect@2.30.2`的提示。
- en: The React VR init command will process through everything it needs to install,
    including dependencies (and there's a bunch) and then get it all installed. When
    it's done, it'll list out everything and then exit. Don't worry, not all of this
    code will be delivered to the client. The actual download is fairly small, compared
    to a VR game engine such as Unity or Unreal.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: React VR init命令将处理安装所需的所有内容，包括依赖项（有很多），然后将其全部安装。完成后，它将列出所有内容，然后退出。不用担心，不是所有这些代码都会传送到客户端。实际下载相当小，与Unity或Unreal等VR游戏引擎相比。
- en: '![](Images/2a03fa16-315c-4086-90b6-ed4be8a21c29.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2a03fa16-315c-4086-90b6-ed4be8a21c29.png)'
- en: The React VR init command will even tell you what to do to start your world.
    If we start this up, we will see essentially the same *hello world* app that we
    saw in [Chapter 2](28991838-e243-402c-8dbe-c5be520790b8.xhtml), *Flatland and
    Beyond – VR Programming*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: React VR init命令甚至会告诉您如何启动您的世界。如果我们启动它，我们将看到基本上与我们在[第2章](28991838-e243-402c-8dbe-c5be520790b8.xhtml)中看到的*hello
    world*应用程序相同，*平面世界与超越-VR编程*。
- en: First, make sure you've stopped the hello world app that was already running--use
    *Ctrl*+*C*, then `Y` to stop the batch file. Then, using the `cd` command (change
    directory) go into the new `SpaceGallery` directory you created.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保您已经停止了已经在运行的hello world应用程序--使用*Ctrl*+*C*，然后使用`Y`来停止批处理文件。然后，使用`cd`命令（更改目录）进入您创建的新`SpaceGallery`目录。
- en: If nothing you do seems to change your application, no matter what you try,
    it's quite possible you left an npm package running in some other directory. Kill
    all npm sessions and restart it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无论尝试什么都似乎无法改变您的应用程序，很可能您在其他目录中留下了一个npm包在运行。终止所有npm会话并重新启动它。
- en: 'Go ahead and start it up:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 继续启动它：
- en: '![](Images/4b43f174-48d9-493d-98d4-b664374a70a2.png)If you get the error `yarn
    is not recognized as an internal or external command, operable program or batch
    file`*, *you can ignore this error; Yarn is similar to npm. Advanced users can
    use either one you want; as npm is used in the React VR examples, I''ll use that
    in the course of this book.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/4b43f174-48d9-493d-98d4-b664374a70a2.png)如果您收到错误消息`yarn is not recognized
    as an internal or external command, operable program or batch file`*，*您可以忽略此错误；Yarn类似于npm。高级用户可以使用任何一个；由于React
    VR示例中使用了npm，我将在本书中使用它。'
- en: Welcome to open source, sometimes the land of too many options. DuckDuckGo is
    your friend.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到开源世界，有时会有太多的选择。DuckDuckGo是您的朋友。
- en: Let's change the background to get us in the mood.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变背景来让我们进入状态。
- en: Creating the larger world - background image
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建更大的世界-背景图像
- en: This is a *do it* chapter - the previous chapters covered the general background
    of VR. However, now we're actually going to change the background (image).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个*做*章节 - 之前的章节涵盖了VR的一般背景。然而，现在我们实际上要改变背景（图像）。
- en: 'The *chess world* you see in the hello world app is actually a panoramic image used
    in the `Pano` statement (in the `index.vr.js ` file). When I first installed React
    VR, for a second I thought it was some of the geometry included in the default
    world. Here is our view of the `SpaceGallery` app (2D browser view):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你在hello world应用程序中看到的*国际象棋世界*实际上是在`Pano`语句（在`index.vr.js`文件中）中使用的全景图像。当我第一次安装React
    VR时，我以为这是默认世界中包含的一些几何图形。这是我们在`SpaceGallery`应用程序的视图（2D浏览器视图）：
- en: '![](Images/d3c5bb0d-db65-4fc4-a228-18f91d9c7ef7.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d3c5bb0d-db65-4fc4-a228-18f91d9c7ef7.png)'
- en: 'Everything except the hello textbox comes from the `<Pano>` object:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了hello文本框之外，所有内容都来自`<Pano>`对象：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is a specially constructed **spherical panorama** or **equirectangular
    projection**.It is warped to display properly in 360 degrees left/right and 180
    degrees top/bottom (just like latitude and longitude covers +/- 90 and +/- 180,
    a 360x180 spherical image covers an entire sphere).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个特别构造的**球形全景**或**等距投影**。它被扭曲以在360度左/右和180度上/下（就像纬度和经度覆盖+/- 90和+/- 180一样，一个360x180的球形图像覆盖整个球体）。
- en: 'Here is `chess-world.jpg`, which is the file that is included as the background
    every time you make a VR world:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`chess-world.jpg`，这是每次创建VR世界时包含的背景文件：
- en: '![](Images/403f719a-6847-4f89-b9cd-2901d8ff1baa.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/403f719a-6847-4f89-b9cd-2901d8ff1baa.jpg)'
- en: 'A few things to note:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的几点：
- en: This is a very large file. It is 4096x2048 in pixels. Even so, when you look
    around in 3D it will occasionally look grainy. This is because when you look at
    an item on say a fifteen-inch laptop, let's say about 35 centimeters wide, at
    roughly a half a meter distance from your eyes, you are looking at a 1920 pixel
    image and it looks sharp. When you spread that image 360 around you, that equates
    to over 17,000 pixels (2*pi*.5m * 1920 / .35m).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个非常大的文件。它是4096x2048像素。即使如此，当你在3D中四处张望时，它偶尔会显得有点粗糙。这是因为当你在一个15英寸的笔记本电脑上看一个物品时，比如说大约35厘米宽，离你的眼睛大约半米远，你看到的是一个1920像素的图像，看起来很清晰。当你把这个图像360度展开时，相当于超过17,000像素（2*pi*.5m
    * 1920 / .35m）。
- en: Large files will make for slow downloads, even in today's world.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大文件会导致下载速度变慢，即使在今天的世界中也是如此。
- en: Now imagine if that background was a video. VR has very high bandwidth requirements.
    It's the price of admission.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在想象一下，如果背景是一个视频。VR具有非常高的带宽要求。这是入场的价格。
- en: The file looks warped, but when it is displayed in the browser and in your favorite
    HMD, it will look straight.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件看起来是扭曲的，但当它在浏览器和你喜欢的HMD中显示时，它会看起来是直的。
- en: This particular image is great for testing due to the straight lines; if you
    look straight down or straight up, everything will match up.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于直线，这张特定的图像非常适合测试；如果你直视下方或直视上方，一切都会匹配。
- en: You can find 360 degree panoramic photos all over the web, but make sure they
    are spherical 360 by 180 panoramic photos. If they were made by a camera, typically
    things will get weird at the very top and very bottom of the image; many people
    assume you won't look straight down or straight up.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在网上找到360度全景照片，但要确保它们是球形360x180全景照片。如果它们是由相机拍摄的，通常在图像的顶部和底部会出现奇怪的东西；许多人认为你不会直视下方或直视上方。
- en: Map projections are also equirectangular images, so you are probably familiar
    with them and how stretched out things are at the poles. If you use a map projection
    as your background it will look like you are inside a globe.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 地图投影也是等距投影图像，所以你可能熟悉它们以及在极点处拉伸的事物。如果你把一个地图投影作为你的背景，它会看起来像你在一个地球仪里面。
- en: That might be a little weird.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有点奇怪。
- en: It is a good idea to put some geometry that is part of your world directly underneath
    the viewpoint to cover any discontinuities or aberrations in your spherical panoramas.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的世界中直接在视点下方放置一些几何图形是个好主意，以覆盖你的球形全景图中的任何不连续或畸变。
- en: It also helps avoid a floating feeling; because the `Pano` is 2D and infinitely
    far away, stereoscopic depth perception wouldn't show how far away the `Pano`
    is. Objects will seem to move oddly against the floor if you move your point of
    view around in the VR world. Physical geometry through the primitives or model
    statements underneath the point of view may help avoid this and make your world
    look more virtually real.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这也有助于避免漂浮的感觉；因为`Pano`是二维的，而且无限远，立体深度感知无法显示`Pano`有多远。如果你在VR世界中改变你的视角，物体看起来会在地板上奇怪地移动。通过在视角下方的基本几何图形或模型语句来避免这种情况，可以使你的世界看起来更加真实。
- en: 'As we''re talking about a gallery in space, before we get into orbit let''s
    investigate a few new panoramic photos, and use them to prepare our background.
    Feel free to search the web with your favorite search engine for more panoramic
    photos. Here are the steps I followed:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在谈论太空中的一个画廊，在我们进入轨道之前，让我们调查一些新的全景照片，并用它们来准备我们的背景。随意使用你喜欢的搜索引擎在网上搜索更多的全景照片。以下是我遵循的步骤：
- en: 'Let''s go to the **European Space Agency** (**ESO**) and copy a fantastic space
    panoramic image from [http://bit.ly/PanoESO](http://bit.ly/PanoESO).  If you want
    to experiment with different resolutions, they have a range of resolutions on
    this download page. This image is great:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们去**欧洲空间局**（**ESO**）并从[http://bit.ly/PanoESO](http://bit.ly/PanoESO)复制一个奇妙的太空全景图像。如果你想尝试不同的分辨率，他们在下载页面上有一系列分辨率可供选择。这张图片很棒：
- en: '![](Images/7a831c5b-921a-4f16-92c7-037350eb686d.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7a831c5b-921a-4f16-92c7-037350eb686d.jpg)'
- en: Download this to the `static_assets` folder underneath where we created the
    new application, and then open up `index.vr.js`. In that file, make the change
    to the `Pano` statement:`<Pano source={asset('uhd_vlt_circular_cc_eq.jpg')}/>`
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其下载到我们创建新应用程序的`static_assets`文件夹下，然后打开`index.vr.js`。在那个文件中，对`Pano`语句进行更改：`<Pano
    source={asset('uhd_vlt_circular_cc_eq.jpg')}/>`
- en: 'Now refresh your browser and we''re already seeing space:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在刷新你的浏览器，我们已经看到太空了：
- en: '![](Images/a2151c2c-4f55-425c-9583-761a1d6a2123.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a2151c2c-4f55-425c-9583-761a1d6a2123.jpg)'
- en: 'You''ll notice the buildings look a little weird. If we continue to look down,
    the background image looks even stranger:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会注意到建筑物看起来有点奇怪。如果我们继续往下看，背景图片看起来更奇怪：
- en: '![](Images/d66d260e-1841-4dc6-aa3f-d621238789db.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d66d260e-1841-4dc6-aa3f-d621238789db.jpg)'
- en: This is because, if you look closely at the original background image, it's
    actually not 360x180 degrees, but more like 360x90. This is very common with cell
    phones taking panoramic images; very few people capture the top and bottom to
    make it a true 360x180\. A true panoramic picture looks just as warped at the
    bottom as at the top. For example, look at the flat chess world image we saw previously.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是因为，如果你仔细看原始背景图片，它实际上不是360x180度，而更像是360x90度。这在使用手机拍摄全景图像时非常常见；很少有人捕捉顶部和底部使其成为真正的360x180度。真正的全景照片在底部和顶部看起来一样扭曲。例如，看看我们之前看到的平面国际象棋世界图像。
- en: This is fixable. The fix is to just add a black strip (or background color)
    to the bottom of the original 360x90 panormaic photo, like this:![](Images/499200ee-2f3b-4b99-9c20-af922cfc0b34.jpg)Using
    this technique, you can more or less fix any panoramic image, as long as it's
    at least 360x90; these are fairly common even if not marked as such. Now if we
    put this panoramic image in our `Pano` statement, or VR app looks much better:![](Images/047d68ba-4481-4109-a3fd-72751797a96f.jpg)To
    do this, I used a freeware image viewing/editing program called **Irfanview**, although
    you can use Photoshop or any other image editing software. I would highly recommend
    Inkscape or Gimp; they are full featured and free/open source.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是可以修复的。修复方法就是在原始的360x90全景照片底部添加一条黑色条纹（或背景颜色），就像这样：![](Images/499200ee-2f3b-4b99-9c20-af922cfc0b34.jpg)使用这种技术，你可以更或多或少地修复任何全景图像，只要它至少是360x90；即使没有标记，这些也是相当常见的。现在，如果我们把这张全景图像放在我们的`Pano`语句中，或者VR应用看起来会好得多：![](Images/047d68ba-4481-4109-a3fd-72751797a96f.jpg)为了做到这一点，我使用了一个名为**Irfanview**的免费图像查看/编辑程序，尽管你也可以使用Photoshop或任何其他图像编辑软件。我强烈推荐Inkscape或Gimp；它们功能齐全并且是免费/开源的。
- en: 'When we view this in VR and examine the console, we can see an error:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在VR中查看这个并检查控制台时，我们可以看到一个错误：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let's fix that by resizing. Irfanview has a nice fairly fast resize that will
    preserve most of the detail. Just resize (*Ctrl*+*R*) and make it be 2048x2048
    or 2048x1024\. As we added the black stripe to the bottom, we can resize the image
    without stretching it. If you have to, you should clip or extend the bottom of
    the image; it's hard to tell with these 360 projections, but if you alter the
    aspect ratio of the image, the world will look squished when you view it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过调整大小来修复这个问题。Irfanview有一个很好且相当快速的调整大小功能，可以保留大部分细节。只需调整大小（*Ctrl*+*R*），使其成为2048x2048或2048x1024。由于我们在底部添加了黑色条纹，我们可以调整图像的大小而不会拉伸它。如果必要的话，你应该裁剪或延伸图像的底部；这些360度的投影很难分辨，但如果你改变图像的宽高比，当你查看它时，世界看起来会被挤压。
- en: If you get a blank or incorrect background, check the image format and size.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你得到了一个空白或不正确的背景，请检查图像格式和大小。
- en: Cluttering up the world - adding our first VR components
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混乱世界-添加我们的第一个VR组件
- en: Okay, now let's start adding our objects.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们开始添加我们的物体。
- en: In our description at the beginning of the chapter, we mentioned moving to orbit.
    You might wonder why we didn't start with a space background. We will, after we
    create a world on the ground. I found space images as backgrounds can be disorienting,
    without a floor, and we needed to discuss equirectangular images before we float
    about in orbit and up and down become meaningless. So, for now, you've got to
    do a great job at the earth bound gallery before we end up in space.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头的描述中，我们提到了移动到轨道。你可能会想知道为什么我们没有从太空背景开始。我们会的，在我们在地面上创建一个世界之后。我发现太空图像作为背景可能会让人迷失方向，没有地板，我们需要在漂浮和上下变得毫无意义之前讨论等距投影图像。所以，现在，在我们最终到达太空之前，你必须在地球上做出出色的画廊。
- en: This brings up an important point. The `<Pano>` statement is usually described
    as a background. A better way to think of the `<Pano>` statement and background
    images are of the *rest of the world* or the part of the world you can't reach
    out and touch. Whatever your background image is, without any VR objects, it will
    place you *there*. The `<Pano>` really isn't just a background, it's really the
    whole world except for the objects you place.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这带来了一个重要的观点。`<Pano>`语句通常被描述为一个背景。更好的方式是把`<Pano>`语句和背景图像看作是*整个世界*或者你无法触摸的世界的一部分。无论你的背景图像是什么，没有任何VR对象，它都会把你放在*那里*。`<Pano>`实际上不仅仅是一个背景，它实际上是整个世界，除了你放置的对象之外。
- en: This is why your choice of background is important for a sense of presence.
    If you have a weird, or disorienting background, people will feel disoriented.
    This may or may not be what you want; it can also spoil the sense of immersion.
    Also, they can never touch what is in the `Pano`, so if there are objects that
    are close, it may be disorienting.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么你选择的背景对于存在感很重要。如果你选择了奇怪或者令人迷惑的背景，人们会感到迷失方向。这可能是你想要的，也可能破坏了沉浸感。此外，他们永远无法触摸到“全景”中的物体，所以如果有靠近的物体，可能会让人感到迷失方向。
- en: 'So, let''s add a `Plane` for the outdoor gallery floor so that we''re not floating
    against our background. After the first `<View>` statement generated by the code
    generator in `index.vr.js`, add the following `Plane` and `Box` elements:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们为室外画廊的地板添加一个“平面”，这样我们就不会漂浮在我们的背景上。在“index.vr.js”中代码生成器生成的第一个“<View>”语句之后，添加以下“平面”和“盒子”元素：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Before we save and view the world, we'll need the `DeckPlate.jpg` file. You'll
    need to download this file from [http://bit.ly/VR_Chap5](http://bit.ly/VR_Chap5) inside
    the `static_assets` folder and copy it to the `static_assets` folder inside of
    `SpaceGallery`. I created the `DeckPlate.JPG` file with a program called *Substance
    Designer*, by Allegorithmic, located at [http://bit.ly/AllegSub](http://bit.ly/AllegSub)
    via their material sharing site. I found this material [http://bit.ly/MatSciFi01](http://bit.ly/MatSciFi01).
    As you may not have substance player, I exported this image for you as `DeckPlate.jpg`.
    Later on, we will build more complicated models and use other textures to build
    an actual material. You can also use Quixel.se for good effect, if you use Photoshop.
    See the site at [http://bit.ly/QuixelSuite](http://bit.ly/QuixelSuite).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存并查看世界之前，我们需要“DeckPlate.jpg”文件。你需要从[http://bit.ly/VR_Chap5](http://bit.ly/VR_Chap5)下载这个文件，放在“static_assets”文件夹里，并将其复制到“SpaceGallery”文件夹内的“static_assets”文件夹中。我使用了一个叫做Substance
    Designer的程序，由Allegorithmic公司开发，位于[http://bit.ly/AllegSub](http://bit.ly/AllegSub)上的他们的材料分享网站。我在这里找到了这个材料[http://bit.ly/MatSciFi01](http://bit.ly/MatSciFi01)。由于你可能没有substance
    player，我为你导出了这张图片，名为“DeckPlate.jpg”。以后，我们将构建更复杂的模型，并使用其他纹理来构建实际的材料。如果你使用Photoshop，你也可以使用Quixel.se来获得良好的效果。请参阅[http://bit.ly/QuixelSuite](http://bit.ly/QuixelSuite)。
- en: After we've done this, what happens? We hit refresh and we get a blank screen.
    Open up your web developer console. If you're in Firefox, click on Tools | Web
    Developer | Toggle Tools (or *Ctrl*+*Shift*+*I* on a PC).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做之后会发生什么？我们点击刷新，然后得到一个空白屏幕。打开你的网页开发者控制台。如果你使用的是Firefox，点击工具|Web开发者|切换工具（或者在PC上按Ctrl+Shift+I）。
- en: 'The console will open and we see lots of errors, followed by:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台将打开，我们会看到很多错误，然后是：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is a clue that we forgot to add to the `import` directive. When we generated
    the object, it put all the React VR JSX imports that we needed for the hello world.
    Whenever we add a new object or API, we need to make sure React VR knows about
    it. Insert the following lines in bold:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们忘记添加到“import”指令的线索。当我们生成对象时，它会放置我们需要的所有React VR JSX导入，以便进行hello world。每当我们添加新的对象或API时，我们需要确保React
    VR知道它。插入以下粗体行：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In a large project, you may forget this on occasion. Check the console in your
    browser if your scene doesn't change. I also recommend using some code organization
    by adding your `import` declarations either in alphabetical order, or in the order
    you use them. Alphabetical order is easier to quickly scan. You could just import
    everything, but that may add some overhead you don't need.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个大型项目中，你可能偶尔会忘记这一点。如果你的场景没有改变，可以在浏览器中检查控制台。我还建议通过按字母顺序或者你使用它们的顺序添加你的“import”声明来进行一些代码组织。按字母顺序更容易快速扫描。你可以直接导入所有内容，但这可能会增加一些你不需要的开销。
- en: Lighting up the world
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点亮世界
- en: Once we add the import statement, we'll notice the world is somewhat dark; it
    may be hard to see the box and plane we added. To light things up, we'll add both
    an `AmbientLight` and a `DirectionalLight` (sun or moon light) to the image. We're
    going a little unreal in this app as we've got an obviously night time image background,
    but our objects will be lit. Adding an `AmbientLight` as well as a `DirectionalLight`
    is an easy way to fake the natural world. In the real world, objects take on light
    from light reflected off of objects near them. An `AmbientLight` can simulate
    this gentle glow (this is often referred to as global illumination on other rendering
    systems). The direction light simulates either overhead room lighting (many lights,
    like in a classroom) or the light of the sun or moon.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们添加了导入语句，我们会注意到世界有些黑暗；可能很难看到我们添加的盒子和平面。为了照亮事物，我们将添加`AmbientLight`和`DirectionalLight`（太阳或月光）到图像中。在这个应用程序中，我们有一个明显的夜间图像背景，但我们的物体将被照亮。添加`AmbientLight`和`DirectionalLight`是伪造自然世界的一种简单方法。在现实世界中，物体会从附近物体反射的光线中获得光照。`AmbientLight`可以模拟这种柔和的发光（在其他渲染系统中，这经常被称为全局照明）。方向光模拟了室内顶部照明（许多灯光，比如在教室中）或太阳或月亮的光线。
- en: Put your lighting statements at the top of the `render()` statement in your
    app, so that you can easily find them. I would make them the first statements
    after the top level `<View>`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的照明语句放在应用程序的`render()`语句顶部，这样您就可以轻松找到它们。我会把它们放在顶级`<View>`之后的第一条语句。
- en: If lighting is part of an object, such as a desk lamp, keep that light near
    the object (or as a child of the object).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果灯光是物体的一部分，比如一盏台灯，保持灯光靠近物体（或作为物体的子级）。
- en: This will allow you to quickly modify scene lighting.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许您快速修改场景照明。
- en: 'Our `AmbientLight` statement is simple; the `DirectionalLight` takes a little
    more thought but is also pretty straightforward. Code them this way:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`AmbientLight`语句很简单；`DirectionalLight`需要更多的思考，但也很简单。按照这种方式编写它们：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You should be able to see the platforms now, although they look small.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能看到平台了，尽管它们看起来很小。
- en: Don't forget the import statements!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记导入语句！
- en: Why did I have you paste in both a Plane and a Box?
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我让你粘贴`Plane`和`Box`？
- en: They both become the floor of our world, so why did we do both? If you look
    to the right in the VR View, you'll see that the `Box` has a funny looking edge.
    The texture map is equally applied to all six sides, and may look funny when stretched
    for boxes that aren't close in overall dimension. That is one disadvantage to
    the `Box`. The `Plane` doesn't have this problem, but if you get the `Plane` tilted
    the wrong way, you may not see it; the `Plane` is one sided so will be invisible
    if tilted away from the current camera. The `Plane` is also infinitely thin. I
    included both so you could see how they look.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都成为了我们世界的地板，那么为什么我们两者都做了呢？如果你在VR视图中向右看，你会发现`Box`的边缘看起来有点奇怪。纹理映射均匀应用于所有六个面，当拉伸到整体尺寸不接近的盒子时可能看起来很奇怪。这是`Box`的一个缺点。`Plane`没有这个问题，但如果你把`Plane`倾斜错了方向，你可能看不到它；`Plane`是单面的，所以如果倾斜离开当前摄像头，它将是看不见的。`Plane`也是无限薄的。我包括了两者，这样你就可以看到它们的样子。
- en: In the section on transforms, I mentioned how important the order of transforms
    are. This is particularly important with the `Plane` object; if you rotate, then
    translate, the image may be oriented completely wrong, and in the case of a `Plane`,
    invisible.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在变换部分，我提到了变换的顺序是多么重要。这对于`Plane`对象尤其重要；如果你先旋转，然后平移，图像可能会完全错位，在`Plane`的情况下，会变得看不见。
- en: 'To build the entire gallery, we''ll need to include several squares for the
    platforms. Add a little bit of a gap between them. Now, we could do this by copying
    and pasting each `Box` or `Plane` (use whichever one you like!) and updating the
    `translate` statement:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建整个画廊，我们需要为平台包括几个正方形。在它们之间留下一点间隙。现在，我们可以通过复制和粘贴每个 `Box` 或 `Plane`（使用你喜欢的任何一个！）并更新
    `translate` 语句来实现这一点：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There is a better way though; React VR is not just a hardcoded geometry file, but
    rather an actual object-oriented JSX file, and we can make use of that.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个更好的方法；React VR 不仅仅是一个硬编码的几何文件，而是一个真正的面向对象的 JSX 文件，我们可以利用它。
- en: 'Let''s define a new object that is one of our deck plates. We will put everything
    but the position in as components of that object. First (and I pounded my head
    against the table for a while on this), change the first line of your code from:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个新对象，它是我们的甲板板块之一。我们将除了位置之外的所有内容都放入该对象的组件中。首先（我在这个问题上纠结了一段时间），将代码的第一行从：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that this is a different `import` statement than what we're using on the
    second line (and easy to overlook).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是一个不同的 `import` 语句，不同于我们在第二行使用的（很容易忽视）。
- en: If you don't see an object you created, or get an error that a keyword that
    you know is valid isn't recognized, don't forget the `import` directive at the
    top of the file!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看不到你创建的对象，或者得到一个你知道是有效的关键字但却没有被识别的错误，请不要忘记文件顶部的 `import` 指令！
- en: Got Class - consolidating objects as new keywords
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 得到类 - 将对象合并为新关键字
- en: 'Once we''ve importing the React Component, we can define an object as a `class`.
    For this version, we''ll use individual numbers as props (like parameters) and
    then instantiate them as often as we need to. We can paste this code anywhere;
    for now, you can put it in the `index.vr.js` file above the the `export default
    class SpaceGallery extends React.Component` line. Your new `class` is:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们导入了 React 组件，我们就可以将一个对象定义为 `class`。对于这个版本，我们将使用单独的数字作为 props（就像参数），然后根据需要实例化它们。我们可以将这段代码粘贴到任何地方；现在，你可以将它放在
    `index.vr.js` 文件中的 `export default class SpaceGallery extends React.Component`
    行之前。你的新 `class` 是：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To instantiate copies of this, inside your `<View>` use this code (in your
    `SpaceGallery` class):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要实例化此对象的副本，在你的 `<View>` 中使用此代码（在你的 `SpaceGallery` 类中）：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is the most direct way to make prefabs or classes so that you don't have
    to cut and paste endless declarations of `Box` components to make your floor.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是制作预制件或类的最直接方式，这样你就不必剪切和粘贴无休止的 `Box` 组件声明来制作你的地板。
- en: If you're familiar with the React concept of state, don't use state at this
    time. You should use state for values that change over time; we will discuss this
    more in [Chapter 7](c3188254-ca3b-4b7d-af85-97b2c11439a0.xhtml), *Breathe Life
    in Your World*, and especially [Chapter 11](707dc6f5-9666-4f49-952b-fbcf20fc8afc.xhtml),
    *Take a Walk on the Wild Side*. Since this is a static version of the app, you
    don't need it. We will build the platform in the right place with props.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉 React 中状态的概念，这个时候不要使用状态。你应该为随时间变化的值使用状态；我们将在[第7章](c3188254-ca3b-4b7d-af85-97b2c11439a0.xhtml)
    *给你的世界注入生命* 中更多地讨论这一点，特别是[第11章](707dc6f5-9666-4f49-952b-fbcf20fc8afc.xhtml) *走进未知领域*。由于这是应用的静态版本，你不需要它。我们将使用
    props 在正确的位置构建平台。
- en: 'You might think instead of two named parameters, you could make a vector, but
    JavaScript doesn''t have the concept of a vector. You can, with the `{ }` operators,
    paste in the appropriate code, however. An alternative way of creating our slab
    floor segments is as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为，你可以用一个向量来代替两个命名参数，但是 JavaScript 没有向量的概念。但是，你可以使用 `{ }` 运算符，粘贴适当的代码。创建我们的板块地板段的另一种方法如下：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Notice that the `translate` statement does not have square brackets around
    `this.props.MyPos` as it would have with a literal. You then instantiate it like
    this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`translate`语句中没有方括号围绕`this.props.MyPos`，就像使用文字时那样。然后像这样实例化它：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note the extra `{ }` braces and the missing braces in the `translate` statement
    as mentioned. In this case, you need it to create the vector (array).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`translate`语句中额外的`{}`括号和缺少的括号，如前所述。在这种情况下，你需要它来创建向量（数组）。
- en: Putting it all together
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 把所有东西放在一起
- en: We now have a basic platform to put our art on, you've learned how to create
    objects that we can instantiate, we've put basic lighting into the scene--now
    let's add some objects.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个基本的平台来放我们的艺术品，你已经学会了如何创建我们可以实例化的对象，我们已经在场景中放置了基本的照明--现在让我们添加一些物体。
- en: You find out from the powers that be, that you have done a fantastic job and
    can now move the Space Gallery into space. From the link to GitHub, you can download
    a few new files, including `BabbageStation_v6_r5.jpg` . Once we change the `Pano`
    statement with this file, we'll blip right into orbit--none of that shaking in
    your acceleration chair stuff. Nice and quiet.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你从权威人士那里得知，你做得很棒，现在可以把太空画廊移到太空中。从GitHub的链接中，你可以下载一些新文件，包括`BabbageStation_v6_r5.jpg`。一旦我们用这个文件改变`Pano`语句，我们就会直接进入轨道--没有在加速椅子上摇晃的情况。非常安静。
- en: 'Let''s get back to building the gallery. First, let''s consolidate and use
    the `Platform`; your new `index.vr.js` file should be the following once you''ve
    downloaded the new `static_assets`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到建造画廊。首先，让我们巩固并使用“Platform”；一旦你下载了新的“static_assets”，你的新“index.vr.js”文件应该如下：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that your code will be considerably shorter if you used either `Platform`
    or `VecPlat` as your object.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你使用`Platform`或`VecPlat`作为你的对象，你的代码会更短。
- en: Note that I used `MyX='-5.1'` instead of `MyX={5.1}`. This works, but it is
    really incorrect. `{}` is used to insert JS into the code. Basically, if you want
    `MyX` to be a number, use `{'`s in the initialization list. JavaScript will covert,
    but sometimes lead to weird behaviors if you don't pass a number as a number.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我使用了`MyX='-5.1'`而不是`MyX={5.1}`。这样做是可以的，但实际上是不正确的。`{}`用于将JS插入代码中。基本上，如果你想让`MyX`成为一个数字，就在初始化列表中使用`{}`。JavaScript会进行转换，但有时如果你没有将数字作为数字传递，可能会导致奇怪的行为。
- en: You may have noticed that the basic primitives that React VR includes are a
    bit sparse. Without constructive solid geometry, often called Boolean operations,
    or native three.js, there's a limit on what you can create.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，React VR包含的基本原语有点稀疏。没有建设性的实体几何，通常称为布尔运算，或者本地three.js，你可以创建的东西是有限的。
- en: Fortunately, you can import files from other CAD programs. We will cover this
    more in [Chapter 6](3b913e8b-342f-4ffb-b938-c996b41c1ab8.xhtml), *Working with
    Poly and the Gon Family* but for now, you can import a few models that I've included
    in the files for the book at [http://bit.ly/VR_Chap5](http://bit.ly/VR_Chap5).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，你可以从其他CAD程序中导入文件。我们将在第6章《与Poly和Gon家族合作》中更多地介绍这一点，但现在，你可以导入一些我在书中的文件中包含的模型，网址是[http://bit.ly/VR_Chap5](http://bit.ly/VR_Chap5)。
- en: Adding the pedestals
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加基座
- en: Before we put the art in the world, we need to build a pedestal. To make it
    easier to line up, we can create an object as we did before. Let's make a square
    pedestal and put a cap on the top and bottom.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们把艺术品放到世界上之前，我们需要建造一个基座。为了更容易对齐，我们可以像之前一样创建一个对象。让我们制作一个方形基座，并在顶部和底部放一个盖子。
- en: 'If you broke for the day in triumph, go ahead and restart the React VR server;
    to make it easy on ourselves we can copy the URL so that we can paste it into
    our web browser:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为了胜利而结束了一天的工作，那就重新启动React VR服务器吧；为了方便起见，我们可以复制URL，这样我们就可以将其粘贴到我们的网络浏览器中：
- en: '![](Images/de8ffea0-8bb3-4b7d-9405-44dedfc33d75.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/de8ffea0-8bb3-4b7d-9405-44dedfc33d75.png)'
- en: If you have selected the preceding text to paste into your browser, you are
    going to be waiting a long time. Notice in the address bar where it says Select
    npm.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择了前面的文本粘贴到浏览器中，您将等待很长时间。请注意地址栏中显示的“选择npm”。
- en: When you are using the console to start your app, if you "select" any text,
    and keep it selected, it may block the web browser from serving up the content.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用控制台启动应用程序时，如果“选择”任何文本，并保持其选定状态，可能会阻止Web浏览器提供内容。
- en: 'So, instead of a simple cube we used for the floor, we''ll create a square
    `Pedestal` with a top and bottom:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将不再使用简单的立方体作为地板，而是创建一个带有顶部和底部的方形“基座”：
- en: '[PRE15]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, when you try this, you will get an error:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您尝试这样做时，您会收到一个错误：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Remember, this is React VR; with regular React, you would enclose any multiple
    tags in a `<div>` statement. This won''t work here as we are are not dealing with
    HTML; the closest thing is React-Native. So, for VR, we want to wrap multiple
    elements/objects in a `<View>` statement. The correct code is thus:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这是React VR；在常规的React中，您会将多个标签包含在`<div>`语句中。这在这里行不通，因为我们不处理HTML；最接近的是React-Native。因此，对于VR，我们希望将多个元素/对象包装在`<View>`语句中。因此，正确的代码是这样的：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you got the error `Expected a component class, got [object Object]` in your
    web console, you may have accidentally typed view instead of `View`
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Web控制台中收到错误`Expected a component class, got [object Object]`，可能是您意外地输入了view而不是`View`。
- en: 'Now that we''ve set up the `Pedestal` object, paste it into your `index.vr.js`,
    underneath all the platforms:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了“基座”对象，将其粘贴到您的`index.vr.js`中，放在所有平台的下面：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, we have a nice series of `Pedestal`s. The other thing we did was, by careful
    scaling, every object is at the same location, [5.1 ... 0 ... -5.1], in two dimensions.
    This will make it easier to import the various art objects.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一系列漂亮的“基座”。我们所做的另一件事是，通过仔细的缩放，每个物体在二维空间中都位于相同的位置[5.1 ... 0 ... -5.1]。这将使导入各种艺术品更容易。
- en: As we've seen with creating additional classes or components, item composition
    is a bit difficult in React VR. It is not intended to be a full blown 3D modeler;
    it is a VR presentation system. Therefore, any really complicated object should
    be created in a CAD system. There, you will have some type of visual modeling
    that is a lot easier than trying to estimate what the `<Box>` offset will be when
    stacking them.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在创建其他类或组件时所看到的，React VR中的项目组合有点困难。它并不打算成为一个完整的3D建模工具；它是一个VR演示系统。因此，任何真正复杂的对象都应该在CAD系统中创建。在那里，您将拥有某种类型的视觉建模，比起尝试估计堆叠时`<Box>`的偏移量要容易得多。
- en: We will use the Model statement. In Chapter 4, *The React VR Library*, we detailed
    the Model keyword. Time to use it! Add the following lines inside the `<View>`
    statement in the main code, underneath the `Pedestal` it'll be on. Don't forget
    to change the `import` line!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Model语句。在第4章“React VR库”中，我们详细介绍了Model关键字。现在是使用它的时候了！在主代码中的`<View>`语句内部添加以下行，放在它下面的“基座”上。不要忘记更改`import`行！
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: I've created a version of the Utah teapot from internet sources and some of
    my own UV editing in Blender; this is the `'teapot2.obj'` object. Creating objects
    in Blender could be the subject of a whole book, and probably is, so for now,
    you can just download the teapot from the files from the book. They are at [http://bit.ly/VR_Chap5](http://bit.ly/VR_Chap5),
    in the `static_assets` folder.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我从互联网来源和Blender中进行了一些UV编辑，创建了一个版本的犹他茶壶，这是`'teapot2.obj'`对象。在Blender中创建对象可能是一整本书的主题，也可能是，所以现在，您可以从书中的文件中下载茶壶。它们位于[http://bit.ly/VR_Chap5](http://bit.ly/VR_Chap5)的`static_assets`文件夹中。
- en: This one is a little different as it has a rubber handle, blue enamel, and a
    copper spigot. For now, the material file (the .mtl file) has just simple colors,
    but in the next chapter, we will find out how to make these be richly detailed
    with texture maps.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个有点不同，因为它有一个橡胶把手，蓝色珐琅和一个铜龙头。目前，材料文件（.mtl文件）只有简单的颜色，但在下一章中，我们将学习如何使用纹理贴图使它们丰富多彩。
- en: If you get `Model is not defined` it means you forgot to add `Model` to your
    `import` line at the top of your file.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你得到`Model is not defined`，这意味着你忘记在文件顶部的`import`行中添加`Model`。
- en: Go ahead and save that, and you'll see we've added a teapot! However, there
    are a few issues - the deckplates look a bit boring and weird on the edges, and
    we'd like to see the teapot looking a little different. We can do this by creating
    our own models, in the next chapter.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 继续保存，你会看到我们添加了一个茶壶！然而，有一些问题 - 甲板看起来有点无聊，边缘有点奇怪，我们想看到茶壶看起来有点不同。我们可以通过在下一章中创建自己的模型来实现这一点。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congrats! Your gallery is now finished, with one simple object. You've learned
    how to modify our world, change the background to make it look like we're anywhere
    we want, and you've learned how to create groups of objects and instantiate them.
    Next, you will learn how to populate it with more models; read the next chapter
    to find out how!
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你的画廊现在完成了，只有一个简单的物体。你已经学会了如何修改我们的世界，改变背景使它看起来像我们想要的任何地方，还学会了如何创建对象组并实例化它们。接下来，你将学会如何用更多的模型来填充它；阅读下一章以了解详情！
