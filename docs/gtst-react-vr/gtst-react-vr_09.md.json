["```jsx\nf:\\ReactVR>React-vr init GoingNative\n```", "```jsx\n// Auto-generated content.\n// This file contains the boilerplate to set up your React app.\n// If you want to modify your application, start in \"index.vr.js\"\n\n// Auto-generated content.\nimport {VRInstance} from 'react-vr-web';\nimport {Module} from 'react-vr-web';\nimport * as THREE from 'three';\n\nfunction init(bundle, parent, options) {\nconst scene = new THREE.Scene();\nconst cubeModule = new CubeModule();\nconst vr = new VRInstance(bundle, 'GoingNative', parent, {\n // Add custom options here\n cursorVisibility: 'visible',\n nativeModules: [ cubeModule ],\n scene: scene,\n ...options,\n });\n\n const cube = new THREE.Mesh(\n new THREE.BoxGeometry(1, 1, 1),\n new THREE.MeshBasicMaterial()\n );\n cube.position.z = -4;\n scene.add(cube);\n cubeModule.init(cube);\n\n vr.render = function(timestamp) {\n // Any custom behavior you want to perform on each frame goes here\n//animate the cube\n const seconds = timestamp / 1000;\n cube.position.x = 0 + (1 * (Math.cos(seconds)));\n cube.position.y = 0.2 + (1 * Math.abs(Math.sin(seconds)));\n };\n // Begin the animation loop\n vr.start();\n return vr;\n};\n\nwindow.ReactVR = {init};\n```", "```jsx\nexport default class CubeModule extends Module {\n  constructor() {\n    super('CubeModule');\n  }\n  init(cube) {\n    this.cube = cube;\n  }\n  changeCubeColor(color) {\n    this.cube.material.color = new THREE.Color(color);\n  }\n}\n```", "```jsx\n// Native Module defined in vr/client.js const  cubeModule  =  NativeModules.CubeModule;\n```", "```jsx\nclass GoingNative extends React.Component {\n constructor(props) {\n super(props);\n this.state = { btnColor: 'white', cubeColor: 'yellow' };\n cubeModule.changeCubeColor(this.state.cubeColor);\n }\n```", "```jsx\n      <View\n        style={{\n          transform:[{translate: [0, 0, -3]}],\n          layoutOrigin: [0.5, 0, 0],\n          alignItems: 'center',\n        }}>\n```", "```jsx\n  <VrButton\n    style={{\n      backgroundColor: this.state.btnColor,\n      borderRadius: 0.05,\n      margin: 0.05,\n    }}\n    onEnter={() => { this.setState({ btnColor: this.state.cubeColor }) }}\n    onExit={() => { this.setState({ btnColor: 'white' }) }}\n    onClick={() => {\n      let hexColor = Math.floor(Math.random() * 0xffffff).toString(16);\n      // Ensure we always have 6 digits by padding with leading zeros.\n      hexColor = '#' + (('000000' + hexColor).slice(-6));\n      this.setState({ cubeColor: hexColor, btnColor: hexColor });\n      // Asynchronous call to custom native module; sends the new color.\n      cubeModule.changeCubeColor(hexColor);\n    }}\n    onClickSound={asset('freesound__278205__ianstargem__switch-flip-1.wav')}\n  >\n    <Text style={{\n      fontSize: 0.15,\n      paddingTop: 0.025,\n      paddingBottom: 0.025,\n      paddingLeft: 0.05,\n      paddingRight: 0.05,\n      textAlign: 'center',\n      textAlignVertical: 'center',\n    }}>\n      button\n    </Text>\n  </VrButton>\n```", "```jsx\nVrSoundEffects: must load sound before playing ../static_assets/freesound__278205__ianstargem__switch-flip-1.wav\n```", "```jsx\nFailed to fetch audio: ../static_assets/freesound__278205__ianstargem__switch-flip-1.wav\nThe buffer passed to decodeAudioData contains invalid content which cannot be decoded successfully.\n```", "```jsx\nonClickSound={asset('freesound__278205__ianstargem__switch-flip-48kmono.wav')}\n```", "```jsx\nimport React from 'react';\nimport {\n  AppRegistry,\n  Animated,\n  asset,\n  Easing,\n  NativeModules,\n  Pano,\n  Sound,\n  Text,\n  View,\n  VrButton\n} from 'react-vr';\n\nconst cubeModule = NativeModules.CubeModule;\n\nclass GoingNative extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { btnColor: 'white', cubeColor: 'yellow' };\n    cubeModule.changeCubeColor(this.state.cubeColor);\n  }\n  render() {\n    return (\n      <View\n        style={{\n          transform: [{ translate: [0, 0, -3] }],\n          layoutOrigin: [0.5, 0, 0],\n          alignItems: 'center',\n        }}>\n        <Pano source={asset('chess-world.jpg')} />\n        <VrButton\n          style={{\n            backgroundColor: this.state.btnColor,\n            borderRadius: 0.05,\n            margin: 0.05,\n          }}\n          onEnter={() => { this.setState({ btnColor: this.state.cubeColor }) }}\n          onExit={() => { this.setState({ btnColor: 'white' }) }}\n          onClick={() => {\n            let hexColor = Math.floor(Math.random() * 0xffffff).toString(16);\n            // Ensure we always have 6 digits by padding with leading zeros.\n            hexColor = '#' + (('000000' + hexColor).slice(-6));\n            this.setState({ cubeColor: hexColor, btnColor: hexColor });\n            // Asynchronous call to custom native module; sends the new color.\n            cubeModule.changeCubeColor(hexColor);\n          }}\n          onClickSound={asset('freesound__278205__ianstargem__switch-flip-48kmono.wav')}\n        >\n          <Text style={{\n            fontSize: 0.15,\n            paddingTop: 0.025,\n            paddingBottom: 0.025,\n            paddingLeft: 0.05,\n            paddingRight: 0.05,\n            textAlign: 'center',\n            textAlignVertical: 'center',\n          }}>\n            button\n    </Text>\n        </VrButton>\n      </View>\n    );\n  }\n};\n\nAppRegistry.registerComponent('GoingNative', () => GoingNative);\n```", "```jsx\nimport {VRInstance} from 'react-vr-web';\nimport {Module} from 'react-vr-web';\nimport * as THREE from 'three';\n\nfunction init(bundle, parent, options) {\nconst scene = new THREE.Scene();\nconst cubeModule = new CubeModule();\nconst vr = new VRInstance(bundle, 'GoingNative', parent, {\n    cursorVisibility: 'visible',\n    nativeModules: [ cubeModule ],\n    scene: scene,\n    ...options,\n  });\n\n  const cube = new THREE.Mesh(\n    new THREE.BoxGeometry(1, 1, 1),\n    new THREE.MeshBasicMaterial()\n  );\n  cube.position.z = -4;\n  scene.add(cube);\n\n  cubeModule.init(cube);\n\n  vr.render = function(timestamp) {\n    const seconds = timestamp / 1000;\n    cube.position.x = 0 + (1 * (Math.cos(seconds)));\n    cube.position.y = 0.2 + (1 * Math.abs(Math.sin(seconds)));\n  };\n  vr.start();\n  return vr;\n};\n\nwindow.ReactVR = {init};\n\nexport default class CubeModule extends Module {\n  constructor() {\n    super('CubeModule');\n  }\n  init(cube) {\n    this.cube = cube;\n  }\n  changeCubeColor(color) {\n    this.cube.material.color = new THREE.Color(color);\n  }\n}\n\n```", "```jsx\n     <Sphere\n      radius={0.5}\n      widthSegments={20}\n      heightSegments={12}\n      style={{\n        color: 'blue',\n        transform: [{ translate: [-1, 0, -3] }],\n      }}\n      lit />\n    <Sphere\n      radius={1.5}\n      widthSegments={20}\n      heightSegments={12}\n      style={{\n        color: 'crimson',\n        transform: [{ translate: [1, -2, -3] }],\n      }}\n      lit />\n```", "```jsx\n  <AmbientLight  intensity={.3} />\n  <DirectionalLight\n    intensity={.7}\n    style={{ transform: [{\n        rotateZ: 45\n      }]\n    }}\n  />\n```", "```jsx\n var materialTorus;\n var materialCube;\n var torusCamera;\n var cubeCamera;\n var renderFrame;\n var torus;\n var texture;\n var cube;\n```", "```jsx\n  var textureLoader = new THREE.TextureLoader();\n  textureLoader.load('../static_assets/chess-world.jpg', function (texture) {\n    texture.mapping = THREE.UVMapping;\n    scene.background = texture;\n  });\n```", "```jsx\n  torusCamera = new THREE.CubeCamera(.1, 100, 256);\n  torusCamera.renderTarget.texture.minFilter = THREE.LinearMipMapLinearFilter;\n  scene.add(torusCamera);\n\n  cubeCamera = new THREE.CubeCamera(.1, 100, 256);\n  cubeCamera.renderTarget.texture.minFilter = THREE.LinearMipMapLinearFilter;\n  scene.add(cubeCamera);\n\n```", "```jsx\n  materialTorus = new THREE.MeshBasicMaterial({ envMap: torusCamera.renderTarget.texture });\n  materialCube = new THREE.MeshBasicMaterial({ envMap: cubeCamera.renderTarget.texture });\n\n  torus = new THREE.Mesh(new THREE.TorusKnotBufferGeometry(2, .6, 100, 25), materialTorus);\n  torus.position.z = -10; torus.position.x = 1;\n  scene.add(torus);\n\n  cube = new THREE.Mesh( new THREE.BoxGeometry(1, 1, 1), materialCube);\n  cube.position.z = -4;\n  scene.add(cube);\n\n  renderFrame = 0;\n  cubeModule.init(cube);\n```", "```jsx\nvr.render = function (timestamp) {\n    // Any custom behavior you want to perform on each frame goes here\n    const seconds = timestamp / 2000;\n    cube.position.x = 0 + (1 * (Math.cos(seconds)));\n    cube.position.y = 0.2 + (1 * Math.abs(Math.sin(seconds)));\n    cube.position.y = 0.2 + (1 * Math.sin(seconds));\n\n    var time = Date.now();\n    torus.rotation.x += 0.01;\n    torus.rotation.y += 0.02;\n\n    //we need to turn off the reflected objects, \n    //or the camera will be inside.\n    torus.visible = false;\n    torusCamera.position.copy(torus.position);\n    torusCamera.update(vr.player.renderer, scene)\n    materialTorus.envMap = torusCamera.renderTarget.texture;\n    torus.visible = true;\n\n    cube.visible = false;\n    cubeCamera.position.copy(cube.position);\n    cubeCamera.update(vr.player.renderer, scene);\n    materialCube.envMap = cubeCamera.renderTarget.texture;\n    cube.visible = true;\n\n    renderFrame++;\n\n  };\n  // Begin the animation loop\n  vr.start();\n  return vr;\n};\n```"]