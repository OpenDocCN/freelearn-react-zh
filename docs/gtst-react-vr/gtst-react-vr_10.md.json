["```jsx\nreact-vr init MarsInfo\n```", "```jsx\n{\n  \"report\": {\n    \"terrestrial_date\": \"2019-04-21\",\n    \"sol\": 2250,\n    \"ls\": 66.0,\n    \"min_temp\": -80.0,\n    \"min_temp_fahrenheit\": -112.0,\n    \"max_temp\": -27.0,\n    \"max_temp_fahrenheit\": -16.6,\n    \"pressure\": 878.0,\n    \"pressure_string\": \"Higher\",\n    \"abs_humidity\": null,\n    \"wind_speed\": null,\n    \"wind_direction\": \"--\",\n    \"atmo_opacity\": \"Sunny\",\n    \"season\": \"Month 4\",\n    \"sunrise\": \"2019-04-21T11:02:00Z\",\n    \"sunset\": \"2019-04-21T22:47:00Z\"\n  }\n}\n```", "```jsx\nexport default class MarsInfo extends Component {\n    componentDidMount() {\n        fetch(`http://marsweather.ingenology.com/v1/latest/`,\n            {\n                method: 'GET'\n            })\n            .then(console.log(result))\n    }\n\n    render() {\n```", "```jsx\nfetch(`http://marsweather.ingenology.com/v1/latest/`,\n    {\n        method: 'GET',\n        mode: 'cors',\n    })\n```", "```jsx\nvar myHeaders = new Headers();\nmyHeaders.append('Access-Control-Request-Method', 'GET');\nmyHeaders.append('Access-Control-Request-Headers', 'Origin, Content-Type, Accept');\n\nfetch(`http://marsweather.ingenology.com/v1/latest/`,\n    {\n        headers: myHeaders,\n        method: 'GET',\n        mode: 'cors',\n    })\n```", "```jsx\nexport default class MarsInfo extends Component {\n    constructor() {\n        super();\n        this.state = {\n            currentPhoto: 2,\n            photoCollection: { photos: []}\n        };\n    };\n    componentDidMount() {\n        fetch('https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1197&api_key=DEMO_KEY',\n            { method: 'GET' })\n            .then(response => response.json())\n            .then(console.log(\"Got a response\"))\n            .then(json => this.setState({ photoCollection:json }))\n\n    };\n```", "```jsx\n  render() {\n      console.log(\"Render() main thread, photo collection:\", this.state.photoCollection);\n      return (\n```", "```jsx\nconst styles = StyleSheet.create({\n    manifestCard: {\n        flex: 1,\n        flexDirection: 'column',\n        width: 2,\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'green',\n        opacity: 0.8,\n        borderRadius: 0.1,\n        borderColor: '#000',\n        borderWidth: 0.02,\n        padding: 0.1,\n        layoutOrigin: [-1, 0.3],\n        transform: [\n            {\n                rotateY: -30,\n                translate: [1, 0, -2]\n            }\n        ]\n    },\n\n    manifestText: {\n        textAlign: 'center',\n        fontSize: 0.1\n    },\n    frontCard: {\n        flex: 1,\n        flexDirection: 'column',\n        width: 2,\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'green',\n        borderRadius: 0.1,\n        borderColor: '#000',\n        borderWidth: 0.02,\n        padding: 0.05,\n        transform: [{ translate: [-1, 1, -3] }],\n    },\n    panoImage: {\n        width: 500,\n        height: 500,\n        layoutOrigin: [-.5, 0],\n    },\n    baseView: {\n        layoutOrigin: [0, 0],\n    },\n});\n```", "```jsx\nexport default class CameraData extends Component {\n    render() {\n        if (!this.props) {\n            return this.renderLoadingView();\n        }\n        var photos = this.props.photoCollection.photos;\n        if (!photos) {\n            return this.renderLoadingView();\n        }\n        var photo = photos[this.props.currentPhoto];\n        if (!photo) {\n            return this.renderLoadingView();\n        }\n        return this.renderPhoto(photo);\n    };\n\n```", "```jsx\nrenderLoadingView() {\n    console.log('CameraData props during renderLoadingView', this.props);\n    return (\n        <View style={styles.frontCard} >\n            <Text style={styles.manifestText}>Loading</Text>\n            <Text style={styles.manifestText}>image data</Text>\n            <Text style={styles.manifestText}>from NASA</Text>\n            <Text style={styles.manifestText}>...</Text>\n        </View>\n    );\n};\nrenderPhoto(photo) {\nreturn (\n   <View style={styles.baseView}>\n      <CylindricalPanel\n         layer={{\n            width: 1000,\n            height: 1000,\n            density: 4680,\n            radius: 20 }}>\n         <Image\n            source={{ uri: photo.img_src }}\n            style={styles.panoImage}>\n         </Image>\n      </CylindricalPanel>\n      <Model\n         source={{\n            obj: asset('ArrowDown.obj'),\n            mtl: asset('ArrowDown.mtl'), }}\n         lit\n         style={{\n            transform: [{ translate: [-2.5, -1, -5.1] }] }} />\n      <Model\n         source={{\n            obj: asset('ArrowUp.obj'),\n            mtl: asset('ArrowUp.mtl'), }}\n         lit\n         style={{\n            transform: [{ translate: [1.3, -1, -5.1] }] }} />\n      <View style={styles.manifestCard}>\n         <Text style={styles.manifestText}>\n            {photo.camera.full_name}</Text>\n         <Text style={styles.manifestText}>\n            {photo.rover.name} Rover #{photo.rover.id}</Text>\n         <Text style={styles.manifestText}>\n            Landed on: {photo.rover.landing_date}</Text>\n         <Text style={styles.manifestText}>\n            Launched on: {photo.rover.launch_date}</Text>\n         <Text style={styles.manifestText}>\n            Total Photos: {photo.rover.total_photos}</Text>\n         <Text style={styles.manifestText}>\n            Most recent: {photo.rover.max_date} Latest earth date</Text>\n         <Text style={styles.manifestText}>\n            Viewing: {photo.rover.max_sol} Mars Sol</Text>\n         <Text style={styles.manifestText}>\n            Taken: {photo.earth_date} Earth (GMT)</Text>\n      </View>\n   </View>\n);\n}\n}\n```"]