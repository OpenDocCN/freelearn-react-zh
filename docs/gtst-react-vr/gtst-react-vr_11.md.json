["```jsx\nreact-vr init WalkInAMaze\n```", "```jsx\nvar MersenneTwister = require('mersenne-twister');\n```", "```jsx\n  var rng = new MersenneTwister(this.props.Seed);\n```", "```jsx\nnpm install mersenne-twister --save\n```", "```jsx\nnpm install react-vr-gaze-button --save\n```", "```jsx\nx1xxxxxxx\nx   x   x\nxxx x x x\nx x   x x\nx xxxxx x\nx x   x x\nx x x x x\nx   x   2\nxxxxxxxxx\n```", "```jsx\nimport Hedge from './Hedge.js';\nimport Floor from './Hedge.js';\nimport Gem from './Gem.js';\n```", "```jsx\n<Floor X={-2} Y={-4}/>\n```", "```jsx\nimport Maze from './vr/components/Maze.js';\n```", "```jsx\n        mazeHedges.push(<Floor {...cellLoc} />);\n```", "```jsx\n<Maze SizeX='4' SizeZ='4' CellSpacing='2.1' Seed='7' />\n```", "```jsx\nfor (var j = 0; j < this.props.SizeX + 2; j++) {\n```", "```jsx\n<Pedestal MyX='0.0' MyZ='-5.1'/>\n```", "```jsx\n transform: [ { translate: [ this.props.MyX, -1.7, this.props.MyZ] } ]\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n    asset,\n    Box,\n    Model,\n    Text,\n    View\n} from 'react-vr';\n\nexport default class Gem extends Component {\n    constructor() {\n        super();\n        this.state = {\n            Height: -3 };\n    }\n    render() {\n        return (\n            <Model\n                source={{\n                    gltf2: asset('TeleportGem.gltf'),\n                }}\n                style={{\n                    transform: [{ translate: [this.props.X, this.state.Height, this.props.Z] }]\n                }}\n            />\n        );\n    }\n}\n```", "```jsx\n <Model\n source={{ gltf2: asset('TeleportGem2.gltf'),}}\n...\n```", "```jsx\nnpm install react-vr-gaze-button\n```", "```jsx\nimport GazeButton from 'react-vr-gaze-button'\nexport default class Gem extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      Height: -3,\n      buttonIsClicked: false\n    };\n  }\n  onGemClicked() {\n    this.setState({ buttonIsClicked: true });\n    console.log(\"Clicked on gem \" + this.props.X + \" x \" + this.props.Z);\n  }\n  render() {\n    const { buttonIsClicked } = this.state\n    return (\n      <GazeButton onClick={() => this.onGemClicked()}\n        duration={2000}>\n        {time => (\n\n          <Model\n            source={{\n              gltf2: asset('TeleportGem.gltf'),\n            }}\n            style={{\n              transform: [{ translate: [0, -1, 0] }]\n            }}\n            style={{\n              transform: [{ translate: \n                [this.props.X, this.state.Height, this.props.Z] }]\n            }}\n          />\n        )}\n      </GazeButton>\n    );\n  }\n}\n```", "```jsx\nnpm install --save simple-raycaster\n```", "```jsx\nimport * as SimpleRaycaster from \"simple-raycaster\";\n```", "```jsx\n    raycasters: [\n         SimpleRaycaster // Add SimpleRaycaster to the options\n    ],\n    cursorVisibility: \"auto\", // Add cursorVisibility\n```", "```jsx\nconstructor(props) {\n  super(props);\n  this.state = {\n    // ... existing member state initialization\n  }\n  this.handleClickGem = this.handleClickGem.bind(this); \n};\n\nonClickFloor(X, Z) {\n  this.setState({ newX: X, newZ: Z });\n}\n\nhandleClickGem(X, Z) {\n  this.setState({ newX: X, newZ: Z });\n};\n```", "```jsx\n    onGemClicked() {\n        this.setState({ buttonIsClicked: true });\n        //send it to the parent\n        this.props.onClickGem(this.props.X, this.props.Z);\n    }\n```", "```jsx\n... \nmazeHedges.push(<Gem {...cellLoc}\n onClickGem={this.handleClickGem}\n  />);\n```", "```jsx\nconstructor(props) {\n  super(props);\n  // existing code here doesn't change\n  // at the bottom:\n  this.handleClickGem = this.handleClickGem.bind(this);\n}\n\nhandleClickGem(X, Z) {\n  this.props.onClickGem(X, Z);\n}\n```", "```jsx\n<Maze sizeX={this.state.sizeX} sizeZ={this.state.sizeZ} \n  cellSpacing={this.state.cellSpacing} seed={this.state.seed}\n  onClickGem={this.handleClickGem} />\n```", "```jsx\nhandleClickGem(X, Z) {\n        this.setState({ startX: -X, startZ: -Z });\n    };\n```"]