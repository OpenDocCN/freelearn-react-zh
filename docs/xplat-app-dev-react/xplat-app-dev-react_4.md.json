["```jsx\nreact-native init --version=\"0.46.4\" birdGame\n```", "```jsx\n/*** package.json ***/\n\n{\n  \u201cname\": \u201cbirdGame\",\n  \u201cversion\": \u201c0.0.1\",\n  \u201cprivate\": true,\n  \u201cscripts\": {\n    \u201cstart\": \u201cnode node_modules/react-native/local-cli/cli.js start\",\n    \u201ctest\": \u201cjest\"\n  },\n  \u201cdependencies\": {\n    \u201creact\": \u201c16.0.0-alpha.12\",\n    \u201creact-native\": \u201c0.46.4\",\n    \u201creact-native-sound\": \u201c^0.10.3\",\n    \u201creact-redux\": \u201c^4.4.5\",\n    \u201credux\": \u201c^3.5.2\"\n  },\n  \u201cdevDependencies\": {\n    \u201cbabel-jest\": \u201c20.0.3\",\n    \u201cbabel-preset-react-native\": \u201c2.1.0\",\n    \u201cjest\": \u201c20.0.4\",\n    \u201creact-test-renderer\": \u201c16.0.0-alpha.12\"\n  },\n  \u201cjest\": {\n    \u201cpreset\": \u201creact-native\"\n  }\n}\n```", "```jsx\n/*** index.ios.js and index.android.js ***/ \n\nimport { AppRegistry } from 'react-native';\nimport App from './src/main';\n\nAppRegistry.registerComponent('birdGame', () => App);\n```", "```jsx\n/*** src/main.js ***/\n\nimport React from \u201creact\";\nimport { createStore, combineReducers } from \u201credux\";\nimport { Provider } from \u201creact-redux\";\n\nimport gameReducer from \u201c./reducers/game\";\nimport GameContainer from \u201c./components/GameContainer\";\n\nlet store = createStore(combineReducers({ gameReducer }));\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <GameContainer />\n      </Provider>\n    );\n  }\n}\n```", "```jsx\nnextFrame() {\nif (this.props.gameOver) return;\n    var elapsedTime = new Date() - this.time;\n    this.time = new Date();\n    this.props.tick(elapsedTime);\nthis.animationFrameId = \n      requestAnimationFrame(this.nextFrame.bind(this));\n}\n```", "```jsx\nstart() {\ncancelAnimationFrame(this.animationFrameId);\n    this.props.start();\n    this.props.bounce();\n    this.time = new Date();\n    this.setState({ gameOver: false });\nthis.animationFrameId = \n      requestAnimationFrame(this.nextFrame.bind(this));\n}\n```", "```jsx\nrender() {\n    const {\n      rockUp,\n      rockDown,\n      ground,\n      ground2,\n      parrot,\n      isStarted,\n      gameOver,\n      bounce,\n      score\n    } = this.props;\n\n    return (\n      <TouchableOpacity\nonPress={\n          !isStarted || gameOver ? this.start.bind(this) : \n            bounce.bind(this)\n        }\n        style={styles.screen}\nactiveOpacity={1}\n      >\n        <Image\n          source={require(\u201c../../images/bg.png\")}\n          style={[styles.screen, styles.image]}\n        />\n        <RockUp\n          x={rockUp.position.x * W} //W is a responsiveness factor \n                                    //explained in the 'constants' section\n          y={rockUp.position.y}\n          height={rockUp.size.height}\n          width={rockUp.size.width}\n        />\n        <Ground\n          x={ground.position.x * W}\n          y={ground.position.y}\n          height={ground.size.height}\n          width={ground.size.width}\n        />\n        <Ground\n          x={ground2.position.x * W}\n          y={ground2.position.y}\n          height={ground2.size.height}\n          width={ground2.size.width}\n        />\n        <RockDown\n          x={rockDown.position.x * W}\n          y={rockDown.position.y * H} //H is a responsiveness factor  \n                                      //explained in the 'constants' \n                                      //section\n          height={rockDown.size.height}\n          width={rockDown.size.width}\n        />\n        <Parrot\n          x={parrot.position.x * W}\n          y={parrot.position.y * H}\n          height={parrot.size.height}\n          width={parrot.size.width}\n        />\n        <Score score={score} />\n        {!isStarted && <Start />}\n        {gameOver && <GameOver />}\n        {gameOver && isStarted && <StartAgain />}\n      </TouchableOpacity>\n    );\n  }\n```", "```jsx\n    /*** src/components/GameContainer.js ***/\n\n    import React, { Component } from \u201creact\";\n    import { connect } from \u201creact-redux\";\n    import { bindActionCreators } from \u201credux\";\n    import { TouchableOpacity, Image, StyleSheet } from \u201creact-native\";\n\n    import * as Actions from \u201c../actions\";\n    import { W, H } from \u201c../constants\";\n    import Parrot from \u201c./Parrot\";\n    import Ground from \u201c./Ground\";\n    import RockUp from \u201c./RockUp\";\n    import RockDown from \u201c./RockDown\";\n    import Score from \u201c./Score\";\n    import Start from \u201c./Start\";\n    import StartAgain from \u201c./StartAgain\";\n    import GameOver from \u201c./GameOver\";\n\n    class Game extends Component {\n    constructor() {\n        super();\n        this.animationFrameId = null;\n        this.time = new Date();\n      }\n\n      nextFrame() {\n         ...\n      }\n\n      start() {\n         ...\n      }\n\n    componentWillUpdate(nextProps, nextState) {\n        if (nextProps.gameOver) {\n          this.setState({ gameOver: true });\n          cancelAnimationFrame(this.animationFrameId);\n        }\n      }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return !nextState.gameOver;\n      }\n\n      render() {\n\n         ...\n\n      }\n    }\n\n    const styles = StyleSheet.create({\n      screen: {\n        flex: 1,\n        alignSelf: \u201cstretch\",\n        width: null\n      },\n      image: {\n        resizeMode: \u201ccover\"\n      }\n    });\n\n    function mapStateToProps(state) {\n      const sprites = state.gameReducer.sprites;\n      return {\n    parrot: sprites[0],\n        rockUp: sprites[1],\n        rockDown: sprites[2],\n        gap: sprites[3],\n        ground: sprites[4],\n        ground2: sprites[5],\n        score: state.gameReducer.score,\n        gameOver: state.gameReducer.gameOver,\n        isStarted: state.gameReducer.isStarted\n      };\n    }\n    function mapStateActionsToProps(dispatch) {\n      return bindActionCreators(Actions, dispatch);\n    }\n\n    export default connect(mapStateToProps, mapStateActionsToProps)(Game);\n    ```", "```jsx\n/*** src/actions/index.js ***/\n\nexport function start() {\n  return { type: \u201cSTART\" };\n}\n\nexport function tick(elapsedTime) {\n  return { type: \u201cTICK\", elapsedTime };\n}\n\nexport function bounce() {\n  return { type: \u201cBOUNCE\" };\n}\n```", "```jsx\n/*** src/reducers/index.js ***/\n\nimport {\n  sprites,\n  moveSprites,\n  checkForCollision,\n  getUpdatedScore,\n  bounceParrot\n} from \u201c../sprites\";\n\nconst initialState = {\n  score: 0,\n  gameOver: false,\n  isStarted: false,\n  sprites\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case \u201cTICK\":\n      return {\n        ...state,\n        sprites: moveSprites(state.sprites, action.elapsedTime),\n        gameOver: checkForCollision(state.sprites[0], \n        state.sprites.slice(1)),\n        score: getUpdatedScore(state.sprites, state.score)\n      };\n    case \u201cBOUNCE\":\n      return {\n        ...state,\n        sprites: bounceParrot(state.sprites)\n      };\n    case \u201cSTART\":\n      return {\n        ...initialState,\n        isStarted: true\n      };\n    default:\n      return state;\n  }\n};\n```", "```jsx\n/*** src/sprites.js ***/\n\nimport sound from \u201creact-native-sound\";\n\nconst coinSound = new sound(\u201ccoin.wav\", sound.MAIN_BUNDLE);\nlet heightOfRockUp = 25;\nlet heightOfRockDown = 25;\nlet heightOfGap = 30;\nlet heightOfGround = 20;\n\nexport const sprites = [\n   ...\n];\n\nfunction prepareNewRockSizes() {\n  ...\n}\n\nfunction getRockProps(type) {\n  ...\n}\n\nexport function moveSprites(sprites, elapsedTime = 1000 / 60) {\n  ...\n}\n\nexport function bounceParrot(sprites) {\n  ...\n}\n\nfunction hasCollided(mainSprite, sprite) {\n  ...\n}\n\nexport function checkForCollision(mainSprite, sprites) {\n  ...\n}\n\nexport function getUpdatedScore(sprites, score) {\n  ...\n}\n```", "```jsx\nexport const sprites = [\n  {\n\n    type: \u201cparrot\",\n    position: { x: 50, y: 55 },\n    velocity: { x: 0, y: 0 },\n    size: { width: 10, height: 8 }\n  },\n  {\n    type: \u201crockUp\",\n    position: { x: 110, y: 0 },\n    velocity: { x: -1, y: 0 },\n    size: { width: 15, height: heightOfRockUp }\n  },\n  {\n    type: \u201crockDown\",\n    position: { x: 110, y: heightOfRockUp + 30 },\n    velocity: { x: -1, y: 0 },\n    size: { width: 15, height: heightOfRockDown }\n  },\n  {\n    type: \u201cgap\",\n    position: { x: 110, y: heightOfRockUp },\n    velocity: { x: -1, y: 0 },\n    size: { width: 15, height: 30 }\n  },\n  {\n    type: \u201cground\",\n    position: { x: 0, y: 80 },\n    velocity: { x: -1, y: 0 },\n    size: { width: 100, height: heightOfGround }\n  },\n  {\n    type: \u201cground\",\n    position: { x: 100, y: 80 },\n    velocity: { x: -1, y: 0 },\n    size: { width: 100, height: heightOfGround }\n  }\n];\n```", "```jsx\nfunction prepareNewRockSizes() {\n  heightOfRockUp = 10 + Math.floor(Math.random() * 40);\n  heightOfRockDown = 50 - heightOfRockUp;\n  heightOfGap = 30;\n}\n```", "```jsx\nfunction getRockProps(type) {\n  switch (type) {\n    case \u201crockUp\":\n      return { y: 0, height: heightOfRockUp };\n    case \u201crockDown\":\n      return { y: heightOfRockUp + heightOfGap, \n               height: heightOfRockDown };\n    case \u201cgap\":\n      return { y: heightOfRockUp, height: heightOfGap };\n  }\n}\n```", "```jsx\nexport function moveSprites(sprites, elapsedTime = 1000 / 60) {\n  const gravity = 0.0001;\n  let newSprites = [];\n\n  sprites.forEach(sprite => {\n    if (sprite.type === \u201cparrot\") {\n      var newParrot = {\n        ...sprite,\n        position: {\n          x: sprite.position.x,\n          y:\n            sprite.position.y +\n            sprite.velocity.y * elapsedTime +\n            0.5 * gravity * elapsedTime * elapsedTime\n        },\n        velocity: {\n          x: sprite.velocity.x,\n          y: sprite.velocity.y + elapsedTime * gravity\n        }\n      };\n      newSprites.push(newParrot);\n    } else if (\n      sprite.type === \u201crockUp\" ||\n      sprite.type === \u201crockDown\" ||\n      sprite.type === \u201cgap\"\n    ) {\n      let rockPosition,\n        rockSize = sprite.size;\n      if (sprite.position.x > 0 - sprite.size.width) {\n        rockPosition = {\n          x: sprite.position.x + sprite.velocity.x,\n          y: sprite.position.y\n        };\n      } else {\n        rockPosition = { x: 100, y: getRockProps(sprite.type).y };\n        rockSize = { width: 15, \n                     height: getRockProps(sprite.type).height };\n      }\n      var newRock = {\n        ...sprite,\n        position: rockPosition,\n        size: rockSize\n      };\n      newSprites.push(newRock);\n    } else if (sprite.type === \u201cground\") {\n      let groundPosition;\n      if (sprite.position.x > -97) {\n        groundPosition = { x: sprite.position.x + sprite.velocity.x,\n                           y: 80 };\n      } else {\n        groundPosition = { x: 100, y: 80 };\n      }\n      var newGround = { ...sprite, position: groundPosition };\n      newSprites.push(newGround);\n    }\n  });\n  return newSprites;\n}\n```", "```jsx\nvar newParrot = {\n        ...sprite,\n        position: {\n          x: sprite.position.x,\n          y:\n            sprite.position.y +\n            sprite.velocity.y * elapsedTime +\n            0.5 * gravity * elapsedTime * elapsedTime\n        },\n        velocity: {\n          x: sprite.velocity.x,\n          y: sprite.velocity.y + elapsedTime * gravity\n        }\n     }\n```", "```jsx\nexport function bounceParrot(sprites) {\n  var newSprites = [];\n  var sprite = sprites[0];\n  var newParrot = { ...sprite, velocity: { x: sprite.velocity.x,\n                    y: -0.05 } };\n  newSprites.push(newParrot);\n  return newSprites.concat(sprites.slice(1));\n}\n```", "```jsx\nfunction hasCollided(mainSprite, sprite) {\n  /*** \n   *** we will check if 'mainSprite' has entered in the\n   *** space occupied by 'sprite' by comparing their\n   *** position, width and height \n   ***/\n\n  var mainX = mainSprite.position.x;\n  var mainY = mainSprite.position.y;\n  var mainWidth = mainSprite.size.width;\n  var mainHeight = mainSprite.size.height;\n\n  var spriteX = sprite.position.x;\n  var spriteY = sprite.position.y;\n  var spriteWidth = sprite.size.width;\n  var spriteHeight = sprite.size.height;\n\n  /*** \n   *** this if statement checks if any border of mainSprite\n   *** sits within the area covered by sprite \n   ***/\n\n  if (\n    mainX < spriteX + spriteWidth &&\n    mainX + mainWidth > spriteX &&\n    mainY < spriteY + spriteHeight &&\n    mainHeight + mainY > spriteY\n  ) {\n    return true;\n  }\n}\n\nexport function checkForCollision(mainSprite, sprites) {\n  /*** \n   *** loop through all sprites in the sprites array\n   *** checking, for each of them, if there is a\n   *** collision with the mainSprite (parrot)\n   ***/\n\n  return sprites.filter(sprite => sprite.type !== \u201cgap\").find(sprite => {\n    return hasCollided(mainSprite, sprite);\n  });\n}\n```", "```jsx\nexport function getUpdatedScore(sprites, score) {\n  var parrot = sprites[0];\n  var gap = sprites[3];\n\n  var parrotXPostion = parrot.position.x;\n  var gapXPosition = gap.position.x;\n  var gapWidth = gap.size.width;\n\n  if (parrotXPostion === gapXPosition + gapWidth) {\n    coinSound.play();\n    score++;\n    prepareNewRockSizes();\n  }\n\n  return score;\n}\n```", "```jsx\n/*** src/constants.js ***/\n\nimport { Dimensions } from \u201creact-native\";\n\nvar { width, height } = Dimensions.get(\u201cwindow\");\n\nexport const W = width / 100;\nexport const H = height / 100;\n```", "```jsx\n/*** src/components/parrot.js ***/\n\nimport React from \u201creact\";\nimport { Image } from \u201creact-native\";\nimport { W, H } from \u201c../constants\";\n\nexport default class Parrot extends React.Component {\n  constructor() {\n    super();\n    this.state = { wings: \u201cdown\" };\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (this.props.y < nextProps.y) {\n      this.setState({ wings: \u201cup\" });\n    } else if (this.props.y > nextProps.y) {\n      this.setState({ wings: \u201cdown\" });\n    }\n  }\n\n  render() {\n    let parrotImage;\n    if (this.state.wings === \u201cup\") {\n      parrotImage = require(\u201c../../images/parrot1.png\");\n    } else {\n      parrotImage = require(\u201c../../images/parrot2.png\");\n    }\n    return (\n      <Image\n        source={parrotImage}\n        style={{\n          position: \u201cabsolute\",\n          resizeMode: \u201ccontain\",\n          left: this.props.x,\n          top: this.props.y,\n          width: 12 * W,\n          height: 12 * W\n        }}\n      />\n    );\n  }\n}\n```", "```jsx\n/*** src/components/RockUp.js ***/\n\nimport React, { Component } from \u201creact\";\nimport { Image } from \u201creact-native\";\n\nimport { W, H } from \u201c../constants\";\n\nexport default class RockUp extends Component {\n  render() {\n    return (\n      <Image\n        resizeMode=\"stretch\"\n        source={require(\u201c../../images/rock-down.png\")}\n        style={{\n          position: \u201cabsolute\",\n          left: this.props.x,\n          top: this.props.y,\n          width: this.props.width * W,\n          height: this.props.height * H\n        }}\n      />\n    );\n  }\n}\n```", "```jsx\n/*** src/components/RockDown.js ***/\n\nimport React, { Component } from \u201creact\";\nimport { Image } from \u201creact-native\";\n\nimport { W, H } from \u201c../constants\";\n\nexport default class RockDown extends Component {\n  render() {\n    return (\n      <Image\n        resizeMode=\"stretch\"\n        source={require(\u201c../../images/rock-up.png\")}\n        style={{\n          position: \u201cabsolute\",\n          left: this.props.x,\n          top: this.props.y,\n          width: this.props.width * W,\n          height: this.props.height * H\n        }}\n      />\n    );\n  }\n}\n```", "```jsx\n/*** src/components/Ground.js ***/\n\nimport React, { Component } from \u201creact\";\nimport { Image } from \u201creact-native\";\n\nimport { W, H } from \u201c../constants\";\n\nexport default class Ground extends Component {\n  render() {\n    return (\n      <Image\n        resizeMode=\"stretch\"\n        source={require(\u201c../../images/ground.png\")}\n        style={{\n          position: \u201cabsolute\",\n          left: this.props.x,\n          top: this.props.y * H,\n          width: this.props.width * W,\n          height: this.props.height * H\n        }}\n      />\n    );\n  }\n}\n```", "```jsx\n/*** src/components/Score.js ***/\n\nimport React, { Component } from \u201creact\";\nimport { View, Image } from \u201creact-native\";\n\nimport { W, H } from \u201c../constants\";\n\nexport default class Score extends Component {\ngetSource(num) {\n    switch (num) {\n      case \u201c0\":\n        return require(\u201c../../images/0.png\");\n      case \u201c1\":\n        return require(\u201c../../images/1.png\");\n      case \u201c2\":\n        return require(\u201c../../images/2.png\");\n      case \u201c3\":\n        return require(\u201c../../images/3.png\");\n      case \u201c4\":\n        return require(\u201c../../images/4.png\");\n      case \u201c5\":\n        return require(\u201c../../images/5.png\");\n      case \u201c6\":\n        return require(\u201c../../images/6.png\");\n      case \u201c7\":\n        return require(\u201c../../images/7.png\");\n      case \u201c8\":\n        return require(\u201c../../images/8.png\");\n      case \u201c9\":\n        return require(\u201c../../images/9.png\");\n      default:\n        return require(\u201c../../images/0.png\");\n    }\n  }\n\n  render() {\n    var scoreString = this.props.score.toString();\n    var scoreArray = [];\n    for (var index = 0; index < scoreString.length; index++) {\n      scoreArray.push(scoreString[index]);\n    }\n\n    return (\n      <View\n        style={{\n          position: \u201cabsolute\",\n          left: 47 * W,\n          top: 10 * H,\n          flexDirection: \u201crow\"\n        }}\n      >\n        {scoreArray.map(\n          function(item, i) {\n            return (\n              <Image\n                style={{ width: 10 * W }}\n                key={i}\n                resizeMode=\"contain\"\n                source={this.getSource(item)}\n              />\n            );\n          }.bind(this)\n        )}\n      </View>\n    );\n  }\n}\n```", "```jsx\n    /*** src/components/Start.js ***/\n\n    import React, { Component } from \u201creact\";\n    import { Text, View, StyleSheet, Image } from \u201creact-native\";\n\n    import { W, H } from \u201c../constants\";\n\n    export default class Start extends Component {\n      render() {\n        return (\n          <View style={{ position: \u201cabsolute\", left: 20 * W, top: 3 * H }}>\n            <Image\n              resizeMode=\"contain\"\n              source={require(\u201c../../images/logo.png\")}\n              style={{ width: 60 * W }}\n            />\n            <Image\n              resizeMode=\"contain\"\n              style={{ marginTop: 15, width: 60 * W }}\n              source={require(\u201c../../images/tap.png\")}\n            />\n          </View>\n        );\n      }\n    }\n    ```", "```jsx\n/*** src/components/GameOver.js ***/\n\nimport React, { Component } from \u201creact\";\nimport { Image } from \u201creact-native\";\n\nimport { W, H } from \u201c../constants\";\n\nexport default class GameOver extends Component {\n  render() {\n    return (\n      <Image\n        style={{\n          position: \u201cabsolute\",\n          left: 15 * W,\n          top: 30 * H\n        }}\n        resizeMode=\"stretch\"\n        source={require(\u201c../../images/game-over.png\")}\n      />\n    );\n  }\n}\n```", "```jsx\n/*** src/components/StartAgain.js ***/\n\nimport React, { Component } from \u201creact\";\nimport { Text, View, StyleSheet, TouchableOpacity, Image } \nfrom \u201creact-native\";\n\nimport { W, H } from \u201c../constants\";\n\nexport default class StartAgain extends Component {\n  render() {\n    return (\n      <Image\n        style={{ position: \u201cabsolute\", left: 35 * W, top: 40 * H }}\n        resizeMode=\"contain\"\n        source={require(\u201c../../images/reset.png\")}\n      />\n    );\n  }\n}\n```"]