["```jsx\n**react-native init --version=\"0.44.0\" imageShare**\n\n```", "```jsx\n/*** index.ios.js and index.android.js ***/ \n\nimport { AppRegistry } from 'react-native';\nimport App from './src/main';\n\nAppRegistry.registerComponent('imageShare', () => App);\n```", "```jsx\n/*** package.json ***/\n\n{\n        \"name\": \"imageShare\",\n        \"version\": \"0.0.1\",\n        \"private\": true,\n        \"scripts\": {\n                \"start\": \"node node_modules/react-native/\n                local-cli/cli.js start\",\n                \"test\": \"jest\"\n        },\n        \"dependencies\": {\n                \"native-base\": \"^2.1.5\",\n                \"react\": \"16.0.0-alpha.6\",\n                \"react-native\": \"0.44.0\",\n                \"react-native-camera\": \"^0.8.0\",\n                \"react-navigation\": \"^1.0.0-beta.9\",\n                \"react-redux\": \"^5.0.5\",\n                \"redux\": \"^3.6.0\",\n                \"redux-thunk\": \"^2.2.0\"\n        },\n        \"devDependencies\": {\n                \"babel-jest\": \"20.0.3\",\n                \"babel-preset-react-native\": \"1.9.2\",\n                \"jest\": \"20.0.3\",\n                \"react-test-renderer\": \"16.0.0-alpha.6\"\n        },\n        \"jest\": {\n                \"preset\": \"react-native\"\n        }\n}\n```", "```jsx\nreact-native link react-native-camera\n```", "```jsx\n<key>NSCameraUsageDescription</key>\n<string>imageShare requires access to the camera on this device to perform this action</string>\n<key>NSPhotoLibraryUsageDescription</key>\n<string>imageShare requires access to the image library on this device to perform this action</string>\n```", "```jsx\n/*** src/main.js ***/\n\nimport React from 'react';\nimport { DrawerNavigator,TabNavigator } from 'react-navigation';\nimport { Platform } from 'react-native';\n\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport imagesReducer from './reducers/images';\n\nimport ImagesList from './screens/ImagesList.js';\nimport MyImages from './screens/MyImages.js';\nimport Camera from './screens/Camera.js';\n\nlet Navigator;\nif(Platform.OS === 'ios'){\n  Navigator = TabNavigator({\n    ImagesList: { screen: ImagesList },\n    MyImages: { screen: MyImages },\n    Camera: { screen: Camera }\n  }, {\n    tabBarOptions: {\n      inactiveTintColor: '#aaa',\n      activeTintColor: '#000',\n      showLabel: false\n    }\n  });\n} else {\n  Navigator = DrawerNavigator({\n    ImagesList: { screen: ImagesList },\n    MyImages: { screen: MyImages },\n    Camera: { screen: Camera }\n  });\n}let store = createStore(combineReducers({ imagesReducer }), applyMiddleware(thunk));\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Navigator/>\n      </Provider>\n    )\n  }\n}\n```", "```jsx\n<Provider store={store}>\n   <Navigator/>\n</Provider>\n```", "```jsx\nlet Navigator;\nif(Platform.OS === 'ios'){\n  Navigator = TabNavigator({\n\n    ...\n\n  });\n} else {\n  Navigator = DrawerNavigator({\n\n    ...\n\n  });\n}\n```", "```jsx\n/*** src/components/ImagesList ***/\n\nimport React from 'react';\nimport { View, ScrollView } from 'react-native';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as Actions from '../actions';\nimport { Icon } from 'native-base';\n\nimport Header from '../components/Header';\nimport Gallery from '../components/Gallery';\nimport ActivityIndicator from '../components/ActivityIndicator';\n\nclass ImagesList extends React.Component {\n  static navigationOptions = {\n    tabBarIcon: ({ tintColor }) => (\n      <Icon name='list' style={{fontSize: 40, color: tintColor}}/>\n    ),\n    drawerLabel: 'All Images'\n  };\n\n  componentWillMount() {\n    this.props.fetchImages();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if(!this.props.addingImage && nextProps.addingImage) {\n      this.scrollable.scrollTo({y: 0});\n    }\n  }\n\n  render() {\n    return (\n      <View style={{flex: 1}}>\n        <Header onMenuButtonPress={() => \n        this.props.navigation.navigate('DrawerOpen')}\n        onCameraButtonPress={() => \n        this.props.navigation.navigate('Camera')}/>\n<ScrollView ref={(scrollable) => {\n            this.scrollable = scrollable;\n          }}>\n          { this.props.addingImage && <ActivityIndicator \n            message='Adding image' /> }\n          <Gallery imageList={this.props.images} loading=\n          {this.props.fetchingImages}/>\n        </ScrollView>\n      </View>\n    );\n  }\n}\n\nfunction mapStateToProps(state) { return { images: state.imagesReducer.images, addingImage: state.imagesReducer.addingImage, fetchingImages: state.imagesReducer.fetchingImages } }\nfunction mapStateActionsToProps(dispatch) { return bindActionCreators(Actions, dispatch) }\n\nexport default connect(mapStateToProps, mapStateActionsToProps)(ImagesList);\n```", "```jsx\nfunction mapStateToProps(state) {\n  return {\n    images: state.imagesReducer.images,\n    addingImage: state.imagesReducer.addingImage,\n    fetchingImages: state.imagesReducer.fetchingImages\n  };\n}\nfunction mapStateActionsToProps(dispatch) {\n  return bindActionCreators(Actions, dispatch);\n}\n\nexport default connect(mapStateToProps, mapStateActionsToProps)(ImagesList);\n```", "```jsx\ncomponentWillMount() { \n   this.props.fetchImages(); \n}\n```", "```jsx\ncomponentWillReceiveProps(nextProps) {\n  if(!this.props.addingImage && nextProps.addingImage) {\n    this.scrollable.scrollTo({y: 0});\n  }\n}\n```", "```jsx\n/*** src/components/Gallery ***/\n\nimport React from 'react';\nimport { List, ListItem, Text, Icon, Button, Container, Content }\n from 'native-base';\nimport { Image, Dimensions, View, Share, ActivityIndicator, StyleSheet } from 'react-native';\n\nvar {height, width} = Dimensions.get('window');\n\nexport default class Gallery extends React.Component {\n  _share(image) {\n   Share.share({message: image.src, title: 'Image from: ' + \n                image.user.name}) \n  }\n\n  render() {\n    return (\n      <View>\n        <List style={{margin: -15}}>\n          {\n            this.props.imageList && this.props.imageList.map((image) =>  \n            {\n              return (\n                <ListItem \n                    key={image.id} \n                    style={{borderBottomWidth: 0, \n                    flexDirection: 'column', marginBottom: -20}}>\n                  <View style={styles.user}>\n                    <Image source={{uri: image.user.pic}} \n                     style={styles.userPic}/>\n                    <Text style={{fontWeight: 'bold'}}>\n                    {image.user.name}</Text>\n                  </View>\n                  <Image source={{uri: image.src}} \n                  style={styles.image}/>\n                  <Button style={{position: 'absolute', right: 15, \n                  top: 25}} transparent \n                  onPress={this._share.bind(this, image)}>\n                    <Icon name='ios-more' style={{fontSize: 20, \n                    color: 'black'}}/>\n                  </Button>\n                </ListItem>\n              );\n            })\n          }\n        </List>\n        {\n          this.props.loading &&\n          <View style={styles.spinnerContainer}>\n            <ActivityIndicator/>\n          </View>\n        }\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  user: {\n    flexDirection: 'row',\n    alignSelf: 'flex-start',\n    padding: 10\n  },\n  userPic: {\n    width: 50,\n    height: 50,\n    resizeMode: 'cover',\n    marginRight: 10,\n    borderRadius: 25\n  },\n  image: {\n    width: width,\n    height: 300,\n    resizeMode: 'cover'\n  },\n  spinnerContainer: {\n    justifyContent: 'center',\n    height: (height - 50)\n  }\n});\n```", "```jsx\n_share(image) {\n  Share.share({message: image.src, title: 'Image from: ' \n               + image.user.name}) \n}\n```", "```jsx\n/*** src/components/Header ***/\n\nimport React from 'react';\nimport { View, Image, StyleSheet } from 'react-native';\nimport { Icon, Button } from 'native-base';\nimport { Platform } from 'react-native';\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        {\n          Platform.OS === 'android' &&\n          <Button transparent onPress={this.props.onMenuButtonPress}>\n            <Icon android='md-menu' style={styles.menuIcon}/>\n          </Button>\n        }\n        <Image source={require('../../img/logo.png')} \n          style={styles.logo} />\n        {\n          Platform.OS === 'android' &&\n          <Button onPress={this.props.onCameraButtonPress} transparent>\n            <Icon name='camera' style={styles.cameraIcon}/>\n          </Button>\n        }\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n    borderBottomWidth: 1,\n    borderBottomColor: '#ccc'\n  },\n  menuIcon: {\n    fontSize: 30,\n    color: 'black'\n  },\n  logo: {\n    height: 25,\n    resizeMode: 'contain',\n    margin: 10\n  },\n  cameraIcon: {\n    fontSize: 30,\n    color: 'black'\n  }\n});\n```", "```jsx\n/*** src/components/ActivityIndicator ***/\n\nimport React from 'react';\nimport { ActivityIndicator, View, Text, StyleSheet } \nfrom 'react-native';\n\nexport default class CustomActivityIndicator extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <ActivityIndicator style={{marginRight: 10}}/>\n        <Text>{this.props.message}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    padding: 10,\n    backgroundColor: '#f0f0f0'\n  }\n});\n```", "```jsx\n/*** src/screens/Camera ***/\n\nimport React, { Component } from 'react';\nimport {\n  Dimensions,\n  StyleSheet,\n  Text,\n  TouchableHighlight,\n  View\n} from 'react-native';\nimport { Button, Icon } from 'native-base';\nimport Camera from 'react-native-camera';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as Actions from '../actions';\n\nclass CameraScreen extends Component {\n  static navigationOptions = {\n    tabBarIcon: ({ tintColor }) => (\n      <Icon name='camera' style={{fontSize: 40, color: tintColor}}/>\n    ),\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Camera\n          ref={(cam) => {\n            this.camera = cam;\n          }}\n          style={styles.preview}\n          aspect={Camera.constants.Aspect.fill}>\n          <Button onPress={this.takePicture.bind(this)} \n          style={styles.cameraButton} transparent>\n            <Icon name='camera' style={{fontSize: 70,\n            color: 'white'}}/>\n          </Button>\n        </Camera>\n        <Button onPress={() => \n         this.props.navigation.navigate('ImagesList')} \n         style={styles.backButton} transparent>\n          <Icon ios='ios-arrow-dropleft' android='md-arrow-dropleft' \n           style={{fontSize: 30, color: 'white'}}/>\n        </Button>\n      </View>\n    );\n  }\n\n  takePicture() {\n    const options = {};\n    this.camera.capture({metadata: options})\n      .then((data) => {\n        this.props.addImage(data);\n        this.props.navigation.navigate('ImagesList');\n      })\n      .catch(err => console.error(err));\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n  preview: {\n    flex: 1,\n    justifyContent: 'flex-end',\n    padding: 20\n  },\n  capture: {\n    flex: 0,\n    backgroundColor: '#fff',\n    borderRadius: 5,\n    color: '#000',\n    padding: 10,\n    margin: 40\n  },\n  cameraButton: {\n    flex: 0, \n    alignSelf: 'center'\n  },\n  backButton: {\n    position: 'absolute',\n    top:20\n  }\n});\n\nfunction mapStateToProps(state) { return {} }\nfunction mapStateActionsToProps(dispatch) { return bindActionCreators(Actions, dispatch) }\n\nexport default connect(mapStateToProps, mapStateActionsToProps)(CameraScreen);\n```", "```jsx\n<Camera\n   ref={(cam) => {\n     this.camera = cam;\n   }}\n   style={styles.preview}\n   aspect={Camera.constants.Aspect.fill}>\n\n...\n\n</Camera>\n```", "```jsx\ntakePicture() {\n    const options = {};\n    this.camera.capture({metadata: options})\n    .then((data) => {\n      this.props.addImage(data);\n      this.props.navigation.navigate('ImagesList');\n    })\n    .catch(err => console.error(err));\n}\n```", "```jsx\n/*** src/screens/MyImages ***/\n\nimport React from 'react';\nimport { \n  Image,\n  TouchableOpacity,\n  Text,\n  View,\n  ActivityIndicator,\n  Dimensions \n} from 'react-native';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as Actions from '../actions';\nimport { Icon } from 'native-base';\n\nimport Header from '../components/Header';\nimport ImagesGrid from '../components/ImagesGrid';\n\nvar {height, width} = Dimensions.get('window');\n\nclass MyImages extends React.Component {\n  static navigationOptions = {\n    drawerLabel: 'My Images',\n    tabBarIcon: ({ tintColor }) => (\n      <Icon name='person' style={{fontSize: 40, color: tintColor}}/>\n    )\n  };\n\n  componentWillMount() {\n    this.props.fetchImages(this.props.user.name);\n  }\n\n  render() {\n    return (\n      <View>\n        <Header onMenuButtonPress={() => \n        this.props.navigation.navigate('DrawerOpen')} \n        onCameraButtonPress={() => \n        this.props.navigation.navigate('Camera')}/>\n        {\n          this.props.fetchingImages &&\n          <View style={{justifyContent: 'center', \n           height: (height - 50)}}>\n            <ActivityIndicator/>\n          </View>\n        }\n        <ImagesGrid images={this.props.images}/>\n      </View>\n    );\n  }\n}\n\nfunction mapStateToProps(state) { return { images: state.imagesReducer.userImages, user: state.imagesReducer.user, fetchingImages: state.imagesReducer.fetchingUserImages } }\nfunction mapStateActionsToProps(dispatch) { return bindActionCreators(Actions, dispatch) }\n\nexport default connect(mapStateToProps, mapStateActionsToProps)(MyImages);\n```", "```jsx\n/*** src/components/ImageGrid ***/\n\nimport React from 'react';\nimport { \n  Image,\n  TouchableOpacity, \n  ScrollView, \n  Dimensions, \n  View,\n  StyleSheet\n} from 'react-native';\n\nvar {height, width} = Dimensions.get('window');\n\nexport default class ImagesGrid extends React.Component {\n  render() {\n    return (\n      <ScrollView>\n        <View style={styles.imageContainer}>\n          {\n            this.props.images && \n            this.props.images.map(img => {\n              return (<Image style={styles.image} \n              key={img.id} source={{uri: img.src}}/>);\n            })\n          }\n        </View>\n      </ScrollView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  imageContainer: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    flexWrap: 'wrap'\n  },\n  image: {\n    width: (width/3 - 2),\n    margin: 1,\n    height: (width/3 - 2),\n    resizeMode: 'cover'\n  }\n});\n```", "```jsx\n/*** src/actions/index ***/\n\nimport api from '../api';\n\nexport function fetchImages(userId = null) {\n  let actionName, actionNameSuccess, actionNameError;\n  if(userId) {\n    actionName = 'FETCH_USER_IMAGES';\n    actionNameSuccess = 'FETCH_USER_IMAGES_SUCCESS';\n    actionNameError = 'FETCH_USER_IMAGES_ERROR';\n  } else {\n    actionName = 'FETCH_IMAGES';\n    actionNameSuccess = 'FETCH_IMAGES_SUCCESS';\n    actionNameError = 'ADD_IMAGE_ERROR';\n  }\n\n  return dispatch => {\n    dispatch({ type: actionName });\n    api\n      .fetchImages(userId)\n      .then(images => {\n        dispatch({ \n          type: actionNameSuccess,\n          images\n        })  \n      })\n      .catch(error => {\n        dispatch({ \n          type: actionNameError,\n          error\n        });  \n      });\n  };\n}\n\nexport function addImage(data = null) {\n  return dispatch => {\n    dispatch({ type: 'ADD_IMAGE' });\n    api\n      .addImage()\n      .then(imageSrc => {\n        dispatch({ \n          type: 'ADD_IMAGE_SUCCESS',\n          imageSrc\n        });  \n      })\n      .catch(error => {\n        dispatch({ \n          type: 'ADD_IMAGE_ERROR',\n          error\n        });  \n      });\n  };\n}\n```", "```jsx\nexport function addImage(data = null) {\n  return dispatch => {\n    dispatch({ type: 'ADD_IMAGE' });\n    api\n      .addImage()\n      .then(imageSrc => {\n        dispatch({ \n          type: 'ADD_IMAGE_SUCCESS',\n          imageSrc\n        }); \n      })\n      .catch(error => {\n        dispatch({ \n          type: 'ADD_IMAGE_ERROR',\n          error\n        }); \n      });\n  };\n}\n```", "```jsx\n/*** src/reducers/index ***/\n\nconst initialState = {\n  images: null,\n  userImages: null,\n  error: null,\n  user: {\n    id: 78261,\n    name: 'Sharer1',\n    pic: 'https://cdn.pixabay.com/photo/2015/07/20/12/53/\n          man-852762_960_720.jpg'\n  }\n}\n\nexport default function (state = initialState, action) {\n  switch(action.type){\n    case 'FETCH_IMAGES': \n      return Object.assign({}, state, {\n        images: [],\n        fetchingImages: true,\n        error: null\n      });\n    case 'FETCH_IMAGES_SUCCESS': \n      return Object.assign({}, state, {\n        fetchingImages: false,\n        images: action.images,\n        error: null\n      });\n    case 'FETCH_IMAGES_ERROR': \n      return Object.assign({}, state, {\n        fetchingImages: false,\n        images: null,\n        error: action.error\n      });\n    case 'FETCH_USER_IMAGES': \n      return Object.assign({}, state, {\n        userImages: [],\n        fetchingUserImages: true,\n        error: null\n      });\n    case 'FETCH_USER_IMAGES_SUCCESS': \n      return Object.assign({}, state, {\n        fetchingUserImages: false,\n        userImages: action.images,\n        error: null\n      });\n    case 'FETCH_USER_IMAGES_ERROR': \n      return Object.assign({}, state, {\n        fetchingUserImages: false,\n        userImages: null,\n        error: action.error\n      });\n    case 'ADD_IMAGE': \n      return Object.assign({}, state, {\n        addingImage: true,\n        error: null\n      });\n    case 'ADD_IMAGE_SUCCESS': \n      let image = {\n        id: Math.floor(Math.random() * 99999999),\n        src: action.imageSrc, \n        user: state.user\n      }\n      return Object.assign({}, state, {\n        addingImage: false,\n        images: [image].concat(state.images),\n        userImages: [image].concat(state.images),\n        error: null\n      });\n    case 'ADD_IMAGE_ERROR': \n      return Object.assign({}, state, {\n        addingImage: false,\n        error: action.error\n      });\n    default:\n      return state;\n  }\n}\n```", "```jsx\nconst initialState = {\n  images: null,\n  userImages: null,\n  error: null,\n  user: {\n    id: 78261,\n    name: 'Sharer1',\n    pic: 'https://cdn.pixabay.com/photo/2015/07/20/12/53/\n          man-852762_960_720.jpg'\n  }\n}\n```", "```jsx\nexport default function (state = initialState, action) {\n\n  ...\n\n}\n```", "```jsx\ncase 'FETCH_IMAGES_SUCCESS': \n  return Object.assign({}, state, {\n    fetchingImages: false,\n    images: action.images,\n    error: null\n  });\n```", "```jsx\n/*** src/api/index ***/\n\nexport default {\n  addImage: function(image) {\n    return new Promise((resolve, reject) => {\n      setTimeout(()=>{\n        resolve( '<imgUrl>' );\n      }, 3000)\n    })\n  },\n  fetchImages: function(user = null){\n    const images = [\n\n      {id: 1, src: '<imgUrl>', user: {pic: '<imgUrl>', name: 'Naia'}},\n      {id: 2, src: '<imgUrl>', user: {pic: '<imgUrl>', \n       name: 'Mike_1982'}},\n      {id: 5, src: '<imgUrl>', user: {pic: '<imgUrl>', \n       name: 'Sharer1'}},\n      {id: 3, src: '<imgUrl>', user: {pic: '<imgUrl>', name: 'Naia'}},\n      {id: 6, src: '<imgUrl>', user: {pic: '<imgUrl>', \n       name: 'Sharer1'}},\n      {id: 4, src: '<imgUrl>', user: {pic: '<imgUrl>', \n       name: 'Sharer1'}},\n      {id: 7, src: '<imgUrl>', user: {pic: '<imgUrl>', \n       name: 'Sharer1'}}\n\n    ]\n    return new Promise((resolve, reject) => {\n      setTimeout(()=>{\n        resolve( images.filter(img => !user || user === img.user.name)   \n      );\n      }, 1500);\n    })\n  }\n}\n```"]