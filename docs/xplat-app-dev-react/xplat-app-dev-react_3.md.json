["```jsx\nimport firebase from 'firebase';\n\nvar firebaseConfig = {\n  apiKey: \u201c<Your Firebase API key>\",\n  authDomain: \u201c<Your Firebase Auth domain>\",\n  databaseURL: \u201c<Your Firebase database URL>\",\n  projectId: \u201c<Your Firebase projectId>\",\n  storageBucket: \u201c<Your Firebase storageBucket>\",\n  messagingSenderId: \u201c<Your messaging SenderId>\"\n};\n\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);\n```", "```jsx\n{\n  \u201cchats\" : {\n    \u201c--userId1--\" : {\n      \u201c--userId2----userId1--\" : {\n        \u201ccontactId\" : \u201c--userId2--\",\n        \u201cimage\" : \u201chttps://images.com/person2.jpg\",\n        \u201cname\" : \u201cJason\"\n      }\n    },\n    \u201c--userId2--\" : {\n      \u201c--userId2----userId1--\" : {\n        \u201ccontactId\" : \u201c--userId1--\",\n        \u201cimage\" : \u201chttps://images.com/person1.jpg\",\n        \u201cname\" : \u201cJohn\"\n      }\n    }\n  },\n  \u201cmessages\" : {\n    \u201c--userId2----userId1--\" : {\n      \u201c-KpEwU8sr01vHSy3qvRY\" : {\n        \u201c_id\" : \u201c2367ad00-301d-46b5-a7b5-97cb88781489\",\n        \u201ccreatedAt\" : 1500284842672,\n        \u201ctext\" : \u201cHey man!\",\n        \u201cuser\" : {\n          \u201c_id\" : \u201c--userId2--\",\n          \u201cname\" : \u201cJason\"\n        }\n      }\n    }\n  },\n  \u201cusers\" : {\n    \u201c--userId1--\" : {\n      \u201cname\" : \u201cJohn\",\n      \u201cnotificationsToken\" : \u201c\"\n    },\n    \u201c--userId2--\" : {\n      \u201cname\" : \u201cJason\",\n      \u201cnotificationsToken\" : \u201c--notificationsId1--\"\n    }\n  }\n}\n```", "```jsx\nfirebaseApp.database().ref('/users/' + userId).on('value', (snapshot) => {\n  const userObj = snapshot.val();\n  this.name = userObj.name;\n  this.avatar = userObj.avatar;\n});\n```", "```jsx\nimport firebase from 'firebase';\nimport { firebaseApp } from '../firebase';\n\nfirebaseApp.database().ref('/users/' + userId).once('value')\n.then((snapshot) => {\n  const userObj = snapshot.val();\n  this.name = userObj.name;\n  this.avatar = userObj.avatar;\n});\n```", "```jsx\nfirebaseApp.database().ref('/users/' + userId).update({\n  name: userName\n});\n```", "```jsx\nfirebaseApp.database().ref('/users/' + userId).set({\n  name: userName,\n  avatar: avatarURL\n});\n```", "```jsx\nfirebaseApp.database().ref('/messages/' + chatId).push().set(message);\n```", "```jsx\nfirebase.auth().signInWithEmailAndPassword(username, password)\n  .then(() => {\n        //user is logged in\n  })\n  .catch(() => {\n        //error logging in\n  })\n})\n```", "```jsx\nfirebase.auth().createUserWithEmailAndPassword(email, password)\n.then((user) => {\n   //user is registered\n})\n.catch((error) => {\n   //error registering\n})\n```", "```jsx\nfirebase.auth().onAuthStateChanged((user) => {\n  //user has logged in or out\n}\n```", "```jsx\nreact-native init --version=\"0.45.1\" messagingApp\n```", "```jsx\n/*** package.json ***/\n\n{\n        \u201cname\": \u201cmessagingApp\",\n        \u201cversion\": \u201c0.0.1\",\n        \u201cprivate\": true,\n        \u201cscripts\": {\n                \u201cstart\": \u201cnode node_modules/react-native/local-cli\n                         /cli.js start\",\n                \u201ctest\": \u201cjest\"\n        },\n        \u201cdependencies\": {\n                \u201cfirebase\": \u201c^4.1.3\",\n                \u201cmobx\": \u201c^3.2.0\",\n                \u201cmobx-react\": \u201c^4.2.2\",\n                \u201creact\": \u201c16.0.0-alpha.12\",\n                \u201creact-native\": \u201c0.45.1\",\n                \u201creact-native-fcm\": \u201c^7.1.0\",\n                \u201creact-native-gifted-chat\": \u201c^0.2.0\",\n                \u201creact-native-keyboard-aware-scroll-view\": \u201c^0.2.9\",\n                \u201creact-native-vector-icons\": \u201c^4.2.0\",\n                \u201creact-navigation\": \u201c^1.0.0-beta.11\"\n        },\n        \u201cdevDependencies\": {\n                \u201cbabel-jest\": \u201c20.0.3\",\n                \u201cbabel-plugin-transform-decorators-legacy\": \u201c^1.3.4\",\n                \u201cbabel-preset-react-native\": \u201c2.1.0\",\n                \u201cjest\": \u201c20.0.4\",\n                \u201creact-test-renderer\": \u201c16.0.0-alpha.12\"\n        },\n        \u201cjest\": {\n                \u201cpreset\": \u201creact-native\"\n        }\n}\n```", "```jsx\n/*** index.ios.js and index.android.js ***/ \n\nimport React from 'react'\nimport { AppRegistry } from 'react-native';\nimport App from './src/main';\n\nimport { Provider } from 'mobx-react/native';\nimport { chats, users } from './src/stores';\n\nclass MessagingApp extends React.Component {\n  render() {\n    return (\n      <Provider users={users} chats={chats}>\n        <App/>\n      </Provider>\n    )\n  }\n}\n\nAppRegistry.registerComponent('messagingApp', () => MessagingApp);\n```", "```jsx\n/*** src/main.js ***/\n\nimport React from 'react'\nimport { DrawerNavigator,TabNavigator } from 'react-navigation'\nimport { Platform, View } from 'react-native'\nimport { observer, inject } from 'mobx-react/native'\n\nimport Login from './screens/Login'\nimport Chats from './screens/Chats'\nimport Profile from './screens/Profile'\nimport Search from './screens/Search'\nimport { users, chats } from './stores'\n\nlet Navigator;\nif(Platform.OS === 'ios'){\n  Navigator = TabNavigator({\n    Chats: { screen: Chats },\n    Search: { screen: Search },\n    Profile: { screen: Profile }\n  }, {\n    tabBarOptions: {\n      inactiveTintColor: '#aaa',\n      activeTintColor: '#000',\n      showLabel: true\n    }\n  });\n} else {\n  Navigator = DrawerNavigator({\n    Chats: { screen: Chats },\n    Search: { screen: Search },\n    Profile: { screen: Profile }\n  });\n}\n\n@inject('users') @observer\nexport default class App extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    if(this.props.users.isLoggedIn){\n      return <Navigator/>\n    } else {\n      return <Login/>\n    }\n  }\n}\n```", "```jsx\n@inject('users') @observer\n```", "```jsx\n/*** src/stores/users.js ***/\n\nimport {observable, computed, map, toJS, action} from 'mobx';\nimport chats from './chats'\nimport firebase from 'firebase';\nimport { firebaseApp } from '../firebase';\nimport notifications from '../notifications'\n\nclass Users {\n        @observable id = null;\n        @observable isLoggedIn = false;\n        @observable name = null;\n        @observable avatar = null;\n        @observable notificationsToken = null;\n        @observable loggingIn = false;\n        @observable registering = false;\n        @observable loggingError = null;\n        @observable registeringError = null;\n\n        @action login = function(username, password) {\n                //login with Firebase email/password method\n        }\n\n        @action logout = function() {\n                //logout from Firebase authentication service\n        }\n\n        @action register = function(email, password, name) {\n                //register through firebase authentication service\n        }\n\n        @action setNotificationsToken(token) {\n                //store the notifications token for this device\n        }\n\n        searchUsers(name) {\n                //helper for searching users by name in the database\n        }\n\n        constructor() {\n                this.bindToFirebase();\n        }\n\n        bindToFirebase() {\n                //Initialise connection to Firebase user \n                //authentication status and data\n        }\n}\n\nconst users = new Users();\n\nexport default users;\n```", "```jsx\n@action login = function(username, password) {\n        this.loggingIn = true;\n        this.loggingError = null;\n        firebase.auth().signInWithEmailAndPassword(username, password)\n        .then(() => {\n                this.loggingIn = false;\n                notifications.init((notificationsToken) => {\n                        this.setNotificationsToken(notificationsToken);\n                });\n        })\n        .catch((error) => {\n                this.loggingIn = false;\n                this.loggingError = error.message;\n        });\n}\n```", "```jsx\n@action logout = function() {\n        notifications.unbind();\n        this.setNotificationsToken('');\n        firebase.auth().signOut();\n}\n```", "```jsx\n@action register = function(email, password, name) {\n        if(!name || name == '') {\n                this.registering = false;\n                this.registeringError = 'Name was not entered';\n                return;\n        }\n        this.registering = true;\n        this.registeringError = null;\n        firebase.auth().createUserWithEmailAndPassword(email, password)\n        .then((user) => {\n                this.registering = false;\n                notifications.init((notificationsToken) => {\n                        this.setNotificationsToken(notificationsToken);\n                });\n                firebaseApp.database().ref('/users/' + user.uid).set({\n                        name: name\n                });\n        })\n        .catch((error) => {\n                this.registering = false;\n                this.registeringError = error.message;\n        })\n}\n```", "```jsx\n@action setNotificationsToken(token) {\n        if(!this.id) return;\n        this.notificationsToken = token;\n        firebaseApp.database().ref('/users/' + this.id).update({\n                notificationsToken: token\n        });\n}\n```", "```jsx\nsearchUsers(name) {\n        return new Promise(function(resolve) {\n                firebaseApp.database().ref('/users/').once('value')\n                .then(function(snapshot) {\n                        let foundUsers = [];\n                        const users = snapshot.val();\n                        for(var id in users) {\n                                if(users[id].name === name) {\n                                        foundUsers.push({\n                                                name: users[id].name,\n                                                avatar: \n                                                users[id].avatar,\n                                                notificationsToken:  \n                                                users[id].\n                                                notificationsToken,\n                                                id\n                                        });\n                                }\n                        }\n                        resolve(foundUsers);\n                });\n        });\n}\n```", "```jsx\nbindToFirebase() {\n  return firebase.auth().onAuthStateChanged((user) => {\n    if(this.chatsBind && typeof this.chatsBind.off === 'function')  \n      this.chatsBind.off();\n    if(this.userBind && typeof this.userBind.off === 'function') \n      this.userBind.off();\n\n    if (user) {\n      this.id = user.uid;\n      this.isLoggedIn = true;\n      this.chatsBind = chats.bindToFirebase(user.uid);\n      this.userBind = firebaseApp.database().ref('/users/' + this.id).\n                                             on('value', (snapshot) =>  \n    {\n        const userObj = snapshot.val();\n        if(!userObj) return;\n        this.name = userObj.name;\n        this.avatar = userObj.avatar;\n      });\n    } else {\n      this.id = null;\n      this.isLoggedIn = false;\n      this.userBind = null;\n      this.name = null;\n      this.avatar = null;\n    }\n  });\n}\n```", "```jsx\n/*** src/stores/chats.js ***/\n\nimport { observable, computed, map, toJS, action } from 'mobx';\nimport { AsyncStorage } from 'react-native'\n\nimport { firebaseApp } from '../firebase'\nimport notifications from '../notifications'\n\nclass Chats {\n  @observable list;\n  @observable selectedChatMessages;\n  @observable downloadingChats = false;\n  @observable downloadingChat = false;\n\n  @action addMessages = function(chatId, contactId, messages) {\n    //add a list of messages to a chat\n  }\n\n  @action selectChat = function(id) {\n    //set a chat as selected and retrieve all the messages for it\n  }\n\n  @action add(user1, user2) {\n    //add a new chat to the list of chats for the users in it\n  }\n\n  bindToFirebase(userId) {\n    //listen for the list of chats in Firebase to update the \n    @observable list\n  }\n}\n\nconst chats = new Chats()\nexport default chats;\n```", "```jsx\n@action addMessages = function(chatId, contactId, messages) {\n  if(!messages || messages.length < 1) return;\n\n  messages.forEach((message) => {\n    let formattedMessage = {\n      _id: message._id,\n      user: {\n        _id: message.user._id,\n      }\n    };\n    if(message.text) formattedMessage.text = message.text;\n    if(message.createdAt) formattedMessage.createdAt = \n      message.createdAt/1;\n    if(message.user.name) formattedMessage.user.name = \n      message.user.name;\n    if(message.user.avatar) formattedMessage.user.avatar = \n      message.user.avatar;\n    if(message.image) formattedMessage.image = message.image;\n\n    //add the message to the chat\n    firebaseApp.database().ref('/messages/' + \n      chatId).push().set(formattedMessage);\n\n    //notify person on the chat room\n    firebaseApp.database().ref('/users/' + contactId).once('value')\n    .then(function(snapshot) {\n      var notificationsToken = snapshot.val().notificationsToken;\n      notifications.sendNotification(notificationsToken, {\n        sender: message.user.name,\n        text: message.text,\n        image: message.user.image,\n        chatId\n      });\n    });\n  });\n}\n```", "```jsx\n@action selectChat = function(id) {\n  this.downloadingChat = true;\n  if(this.chatBind && typeof this.chatBind.off === 'function') \n  this.chatBind.off();\n  this.chatBind = firebaseApp.database().ref('/messages/' + id)\n  .on('value', (snapshot) => {\n    this.selectedChatMessages = [];\n    this.downloadingChat = false;\n    const messagesObj = snapshot.val();\n    for(var id in messagesObj) {\n      this.selectedChatMessages.push({\n        _id: id,\n        text: messagesObj[id].text,\n        createdAt: messagesObj[id].createdAt,\n        user: {\n          _id: messagesObj[id].user._id,\n          name: messagesObj[id].user.name,\n          avatar: messagesObj[id].user.avatar\n        },\n        image: messagesObj[id].image\n      });\n    }\n  });\n}\n```", "```jsx\n@action add(user1, user2) {\n  return new Promise(function(resolve, reject) {\n    firebaseApp.database().ref('/chats/' + user1.id + '/' + user1.id + \n    user2.id).set({\n      name: user2.name,\n      image: user2.avatar,\n      contactId: user2.id\n    }).then(() => {\n      firebaseApp.database().ref('/chats/' + user2.id + '/'\n                                 + user1.id + \n      user2.id).set({\n        name: user1.name,\n        image: user1.avatar,\n        contactId: user1.id\n      }).then(() => {\n        resolve();\n      })\n    })\n  });\n}\n```", "```jsx\nbindToFirebase(userId) {\n  this.downloadingChats = true;\n  return firebaseApp.database().ref('/chats/' + userId).\n                                on('value', (snapshot) => {\n    this.downloadingChats = false;\n    const chatsObj = snapshot.val();\n    this.list = [];\n    for(var id in chatsObj) {\n      this.list.push({\n        id,\n        name: chatsObj[id].name,\n        image: chatsObj[id].image,\n        contactId: chatsObj[id].contactId\n      });\n    }\n  });\n}\n```", "```jsx\n/*** src/stores/index.js ***/\n\nimport users from './users';\nimport chats from './chats';\n\nexport {\n  users,\n  chats\n};\n```", "```jsx\n/*** src/notifications.js ***/\n\nimport {Platform} from 'react-native';\nimport FCM, {FCMEvent, RemoteNotificationResult, WillPresentNotificationResult, NotificationType} from 'react-native-fcm';\n\nlet notificationListener = null;\nlet refreshTokenListener = null;\nconst API_URL = 'https://fcm.googleapis.com/fcm/send';\nconst FirebaseServerKey = '<Your Firebase Server Key>';\n\nconst init = (cb) => {\n  FCM.requestPermissions();\n  FCM.getFCMToken().then(token => {\n    cb(token)\n  });\n  refreshTokenListener = FCM.on(FCMEvent.RefreshToken, (token) => {\n    cb(token);\n  });\n}\n\nconst onNotification = (cb) => {\n  notificationListener = FCM.on(FCMEvent.Notification, (notif) => {\n      cb(notif);\n\n      if(Platform.OS ==='ios'){\n        switch(notif._notificationType){\n          case NotificationType.Remote:\n            notif.finish(RemoteNotificationResult.NewData)\n            break;\n          case NotificationType.NotificationResponse:\n            notif.finish();\n            break;\n          case NotificationType.WillPresent:\n            notif.finish(WillPresentNotificationResult.All)\n            break;\n        }\n      }\n  })\n}\n\nconst unbind = () => {\n  if(notificationListener) notificationListener.remove();\n  if(refreshTokenListener) refreshTokenListener.remove();\n}\n\nconst sendNotification = (token, data) => {\n  let body = JSON.stringify({\n    \u201cto\": token,\n    \u201cnotification\": {\n                \u201ctitle\": data.sender || '',\n                \u201cbody\": data. text || '',\n                \u201csound\": \u201cdefault\"\n        },\n    \u201cdata\": {\n      \u201cname\": data.sender,\n      \u201cchatId\": data.chatId,\n      \u201cimage\": data.image\n    },\n        \u201cpriority\": 10\n  });\n\n  let headers = new Headers({\n                \u201cContent-Type\": \u201capplication/json\",\n                \u201cContent-Length\": parseInt(body.length),\n                \u201cAuthorization\": \u201ckey=\" + FirebaseServerKey\n  });\n\n  fetch(API_URL, { method: \u201cPOST\", headers, body })\n        .then(response => console.log(\u201cSend response\", response))\n        .catch(error => console.log(\u201cError sending \u201c, error));\n}\n\nexport default { init, onNotification, sendNotification, unbind }\n```", "```jsx\n/*** src/screens/Login.js ***/\n\nimport React, { PropTypes } from 'react'\nimport {\n  ScrollView,\n  TextInput,\n  Button,\n  Text,\n  View,\n  Image,\n  ActivityIndicator\n} from 'react-native';\nimport { observer, inject } from 'mobx-react/native'\nimport Icon from 'react-native-vector-icons/FontAwesome'\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'\n\nimport LoginForm from '../components/LoginForm'\nimport RegistrationForm from '../components/RegistrationForm'\n\n@inject('users') @observer\nclass Login extends React.Component {\n  onLogin(email, password) {\n    this.props.users.login(email, password);\n  }\n\n  onPressRegister(email, password, name) {\n    this.props.users.register(email, password, name);\n  }\n\n  render() {\n    return (\n      <KeyboardAwareScrollView style={{padding: 20, marginTop: 20, \n        backgroundColor: '#eee'}}>\n        <Icon name=\"comments\" size={60} color='#ccc' \n          style={{alignSelf: 'center', paddingBottom: 20}}/>\n        <View style={{alignItems: 'center', marginBottom: 20}}>\n          <Text>- please, login to continue -</Text>\n        </View>\n        <LoginForm\n          onPress={this.onLogin.bind(this)}\n          busy={this.props.users.loggingIn}\n          loggingError={this.props.users.loggingError}\n        />\n        <View style={{alignItems: 'center', marginTop: 20, \n                      marginBottom: 20}}>\n          <Text>- or register -</Text>\n        </View>\n        <RegistrationForm\n          onPress={this.onPressRegister.bind(this)}\n          busy={this.props.users.registering}\n          registeringError={this.props.users.registeringError}\n        />\n      </KeyboardAwareScrollView>\n    )\n  }\n}\n\nexport default Login;\n```", "```jsx\n/*** src/components/LoginForm.js ***/\n\nimport React, { PropTypes } from 'react'\nimport {\n  TextInput,\n  Button,\n  Text,\n  View,\n  Image,\n  ActivityIndicator\n} from 'react-native';\n\nclass LoginForm extends React.Component {\n  state= {\n    loginEmail: '',\n    loginPassword: ''\n  }\n\n  onPressLogin() {\n    this.props.onPress(this.state.loginEmail, \n    this.state.loginPassword);\n  }\n\n  render() {\n    return (\n        <View style={{backgroundColor: 'white', padding: 15, \n                      borderRadius: 10}}>\n          {\n            this.props.loggingError &&\n            <View style={{backgroundColor: '#fcc', borderRadius: 5, \n              alignItems: 'center', marginBottom: 10}}>\n              <Text>{this.props.loggingError}</Text>\n            </View>\n          }\n          <TextInput\n            autoCapitalize='none'\n            autoCorrect={false}\n            keyboardType='email-address'returnKeyType='next'\n            style={{height: 40}}\n            onChangeText={(loginEmail) => this.setState({loginEmail})}\n            value={this.state.loginEmail}\n            placeholder='email'\n            onSubmitEditing={(event) => {\n              this.refs.loginPassword.focus();\n            }}\n          />\n          <TextInput\n            ref='loginPassword'\n            style={{height: 40}}\n            onChangeText={(loginPassword) => \n            this.setState({loginPassword})}\n            value={this.state.loginPassword}\n            secureTextEntry={true}\n            placeholder='password'\n          />\n          {\n            this.props.busy ?\n            <ActivityIndicator/>\n            :\n            <Button\n              onPress={this.onPressLogin.bind(this)}\n              title='Login'\n            />\n          }\n        </View>\n      )\n  }\n}\n\nexport default LoginForm;\n```", "```jsx\nonSubmitEditing={(event) => {\n  this.refs.loginPassword.focus();\n}}\n```", "```jsx\n/*** src/components/RegistrationForm ***/\n\nimport React, { PropTypes } from 'react'\nimport {\n  ScrollView,\n  TextInput,\n  Button,\n  Text,\n  View,\n  Image,\n  ActivityIndicator\n} from 'react-native';\n\nclass RegisterForm extends React.Component {\n  state= {\n    registerEmail: '',\n    registerPassword: '',\n    registerName: ''\n  }\n\n  onPressRegister() {\n    this.props.onPress(this.state.registerEmail, \n    this.state.registerPassword, this.state.registerName);\n  }\n\n  render() {\n    return (\n      <View style={{backgroundColor: 'white', padding: 15, \n                    borderRadius: 10}}>\n        {\n          this.props.registeringError &&\n          <View style={{backgroundColor: '#fcc', borderRadius: 5, \n            alignItems: 'center', marginBottom: 10}}>\n            <Text>{this.props.registeringError}</Text>\n          </View>\n        }\n        <TextInput\n          autoCapitalize='none'\n          autoCorrect={false}\n          keyboardType='email-address'\n          returnKeyType='next'\n          style={{height: 40}}\n          onChangeText={(registerEmail) => \n          this.setState({registerEmail})}\n          value={this.state.registerEmail}\n          placeholder='email'\n          onSubmitEditing={(event) => {\n            this.refs.registerName.focus();\n          }}\n        />\n        <TextInput\n          ref='registerName'\n          style={{height: 40}}\n          onChangeText={(registerName) => \n          this.setState({registerName})}\n          returnKeyType='next'\n          value={this.state.registerName}\n          placeholder='name'\n          onSubmitEditing={(event) => {\n            this.refs.registerPassword.focus();\n          }}\n        />\n        <TextInput\n          ref='registerPassword'\n          style={{height: 40}}\n          onChangeText={(registerPassword) => \n          this.setState({registerPassword})}\n          value={this.state.registerPassword}\n          secureTextEntry={true}\n          placeholder='password'\n        />\n        {\n          this.props.busy ?\n          <ActivityIndicator/>\n          :\n          <Button\n            onPress={this.onPressRegister.bind(this)}\n            title='Register'\n          />\n        }\n      </View>\n    )\n  }\n}\n\nexport default RegisterForm;\n```", "```jsx\n/*** src/screens/Chats.js ***/\n\nimport React, { PropTypes } from 'react'\nimport { View, Text, FlatList, ActivityIndicator } from 'react-native'\nimport { observer, inject } from 'mobx-react/native'\nimport { StackNavigator } from 'react-navigation'\nimport Icon from 'react-native-vector-icons/FontAwesome'\nimport notifications from '../notifications'\n\nimport ListItem from '../components/ListItem'\nimport Chat from './Chat'\n\n@inject('chats') @observer\nclass ChatList extends React.Component {\n  imgPlaceholder = \n  'https://cdn.pixabay.com/photo/2017/03/21/02/00/user-\n                    2160923_960_720.png'\n\n  componentWillMount() {\n    notifications.onNotification((notif)=>{\n      this.props.navigation.goBack();\n      this.props.navigation.navigate('Chat', {\n        id: notif.chatId,\n        name: notif.name || '',\n        image: notif.image || this.imgPlaceholder\n      })\n    });\n  }\n\n  render () {\n    return (\n      <View>\n        {\n          this.props.chats.list &&\n          <FlatList\n            data={this.props.chats.list.toJS()}\n            keyExtractor={(item, index) => item.id}\n            renderItem={({item}) => {\n              return (\n                <ListItem\n                  text={item.name}\n                  image={item.image || this.imgPlaceholder}\n                  onPress={() => this.props.navigation.navigate('Chat', \n                  {\n                    id: item.id,\n                    name: item.name,\n                    image: item.image || this.imgPlaceholder,\n                    contactId: item.contactId\n                  })}\n                />\n              )\n            }}\n          />\n        }\n        {\n          this.props.chats.downloadingChats &&\n          <ActivityIndicator style={{marginTop: 20}}/>\n        }\n      </View>\n    )\n  }\n}\n\nconst Navigator = StackNavigator({\n  Chats: {\n    screen: ChatList,\n    navigationOptions: ({navigation}) => ({\n      title: 'Chats',\n    }),\n  },\n  Chat: {\n    screen: Chat\n  }\n});\n\nexport default class Chats extends React.Component {\n  static navigationOptions = {\n    tabBarLabel: 'Chats',\n    tabBarIcon: ({ tintColor }) => (\n      <Icon name=\"comment-o\" size={30} color={tintColor}/>\n    )\n  };\n\n  render() {\n      return <Navigator />\n  }\n}\n```", "```jsx\n/*** src/components/ListItem.js ***/\n\nimport React, { PropTypes } from 'react'\nimport { View, Image, Text, TouchableOpacity } from 'react-native'\nimport Icon from 'react-native-vector-icons/FontAwesome'\n\nconst ListItem = (props) => {\n  return (\n    <TouchableOpacity onPress={props.onPress}>\n      <View style={{height: 60, borderColor: '#ccc', \n                    borderBottomWidth: 1, \n        marginLeft: 10, flexDirection: 'row'}}>\n        <View style={{padding: 15, paddingTop: 10}}>\n          <Image source={{uri: props.image}} style={{width: 40, \n                                                     height: 40, \n            borderRadius: 20, resizeMode: 'cover'}}/>\n        </View>\n        <View style={{padding: 15, paddingTop: 20}}>\n          <Text style={{fontSize: 15}}>{ props.text }</Text>\n        </View>\n        <Icon name=\"angle-right\" size={20} color=\"#aaa\" \n          style={{position: 'absolute', right: 20, top: 20}}/>\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nexport default ListItem\n```", "```jsx\n/*** src/screens/Chat.js ***/\n\nimport React, { PropTypes } from 'react'\nimport { View, Image, ActivityIndicator } from 'react-native';\nimport { observer, inject } from 'mobx-react/native'\nimport { GiftedChat } from 'react-native-gifted-chat'\n\n@inject('chats', 'users') @observer\nclass Chat extends React.Component {\n  static navigationOptions = ({ navigation, screenProps }) => ({\n    title: navigation.state.params.name,\n    headerRight: <Image source={{uri: navigation.state.params.image}} \n    style={{\n      width: 30,\n      height: 30,\n      borderRadius: 15,\n      marginRight: 10,\n      resizeMode: 'cover'\n    }}/>\n  })\n\n  onSend(messages) {\n    this.props.chats.addMessages(this.chatId, this.contactId, \n    messages);\n  }\n\n  componentWillMount() {\n    this.contactId = this.props.navigation.state.params.contactId;\n    this.chatId = this.props.navigation.state.params.id;this.props.chats.selectChat(this.chatId);\n  }\n\n  render () {\n    var messages = this.props.chats.selectedChatMessages;\n    if(this.props.chats.downloadingChat) {\n      return <View><ActivityIndicator style={{marginTop: 20}}/></View>\n    }\n\n    return (\n      <GiftedChat\n        onSend={(messages) => this.onSend(messages)}\n        messages={messages ? messages.toJS().reverse() : []}\n        user={{\n          _id: this.props.users.id,\n          name: this.props.users.name,\n          avatar: this.props.users.avatar\n        }}\n      />\n    )\n  }\n}\n\nexport default Chat;\n```", "```jsx\nimport React, { PropTypes } from 'react'\nimport { View, TextInput, Button, FlatList } from 'react-native'\nimport Icon from 'react-native-vector-icons/FontAwesome'\nimport { observer, inject } from 'mobx-react/native'\n\nimport ListItem from '../components/ListItem'\n\n@inject('users', 'chats') @observer\nclass Search extends React.Component {\n  imgPlaceholder = 'https://cdn.pixabay.com/photo/2017/03/21/02/00/user-\n                   2160923_960_720.png'\n\n  state = {\n    name: '',\n    foundUsers: null\n  }\n\n  static navigationOptions = {\n    tabBarLabel: 'Search',\n    tabBarIcon: ({ tintColor }) => (\n      <Icon name=\"search\" size={30} color={tintColor}/>\n    )\n  };\n\n  onPressSearch() {\n    this.props.users.searchUsers(this.state.name)\n    .then((foundUsers) => {\n      this.setState({ foundUsers });\n    });\n  }\n\n  onPressUser(user) {\n    //open a chat with the selected user\n  }\n\n  render () {\n    return (\n      <View>\n        <View style={{padding: 20, marginTop: 20, \n                      backgroundColor: '#eee'}}>\n          <View style={{backgroundColor: 'white', padding: 15, \n                        borderRadius: 10}}>\n            <TextInput\n              style={{borderColor: 'gray', borderBottomWidth: 1, \n                      height: 40}}\n              onChangeText={(name) => this.setState({name})}\n              value={this.state.name}\n              placeholder='Name of user'\n            />\n            <Button\n              onPress={this.onPressSearch.bind(this)}\n              title='Search'\n            />\n          </View>\n        </View>\n        {\n          this.state.foundUsers &&\n          <FlatList\n            data={this.state.foundUsers}\n            keyExtractor={(item, index) => index}\n            renderItem={({item}) => {\n              return (\n                <ListItem\n                  text={item.name}\n                  image={item.avatar || this.imgPlaceholder}\n                  onPress={this.onPressUser.bind(this, item)}\n                />\n              )\n            }}\n          />\n        }\n      </View>\n    )\n  }\n}\n\nexport default Search;\n```", "```jsx\nonPressUser(user) {\n  this.props.chats.add({\n    id: this.props.users.id,\n    name: this.props.users.name,\n    avatar: this.props.users.avatar || this.imgPlaceholder,\n    notificationsToken: this.props.users.notificationsToken || ''\n  }, {\n    id: user.id,\n    name: user.name,\n    avatar: user.avatar || this.imgPlaceholder,\n    notificationsToken: user.notificationsToken || ''\n  });\n\n  this.props.navigation.navigate('Chats', {});\n}\n```", "```jsx\nimport React, { PropTypes } from 'react'\nimport { View, Image, Button, Text } from 'react-native'\nimport { observer, inject } from 'mobx-react/native'\nimport Icon from 'react-native-vector-icons/FontAwesome'\n\nimport notifications from '../notifications'\n\n@inject('users') @observer\nclass Profile extends React.Component {\n  static navigationOptions = {\n    tabBarLabel: 'Profile',\n    tabBarIcon: ({ tintColor }) => (\n      <Icon name=\"user\" size={30} color={tintColor}/>\n    ),\n  };\n\n  imgPlaceholder = \n  'https://cdn.pixabay.com/photo/2017/03/21/02/00/user-\n                    2160923_960_720.png'\n\n  onPressLogout() {\n    this.props.users.logout();\n  }\n\n  render () {\n    return (\n        <View style={{ padding: 20 }}>\n          {\n              this.props.users.name &&\n              <View style={{ flexDirection: 'row', alignItems: 'center' \n          }}>\n                <Image\n                  source={{uri: this.props.users.avatar || \n                  this.imgPlaceholder}}\n                  style={{width: 100, height: 100, borderRadius: 50, \n                          margin: 20, resizeMode: 'cover'}}\n                />\n                <Text style={{fontSize: 25}}>{this.props.users.name}\n               </Text>\n              </View>\n          }\n          <Button\n            onPress={this.onPressLogout.bind(this)}\n            title=\"Logout\"\n          />\n        </View>\n    )\n  }\n}\n\nexport default Profile;\n```"]