["```jsx\nconst someObject = {\n    x: \"1\",\n  y: 2,\n  z: {\n        a: 1,\n  b: 2,\n  c: {\n            x1: 1,\n  x2: 2\n  }\n    }\n};\n```", "```jsx\nfunction naiveSpreadClone(obj) { // objects are passed by reference\n    return { ...obj };\n    // copy one level deep ( nested z cloned by reference ) }\nconst someObject2 = naiveSpreadClone(someObject); // invoke func someObject2.z.a = 10; // mutate two levels deep console.log(someObject2.z.a); // logs 10 console.log(someObject.z.a)**; //** **logs 10\n// nested object in original someObject mutated too!** \n```", "```jsx\nfunction controlledSpreadClone(obj) {\n    return { ...obj, z: { ...obj.z } }; // copy 2 levels deep }\n\nconst someObject2 = controlledSpreadClone(someObject); someObject2.z.a = 10; // mutation only in copied object console.log(someObject2.z.a); // logs 10 console.log(someObject.z.a)**; // logs 1** \n```", "```jsx\nconst example = someArray => someFunc => someFunc(someArray);\n```", "```jsx\nconst memoize = yourFunction => {\n  const cache = {};\n\n  return (...args) => {\n    const cacheKey = JSON.stringify(args);\n    if (!cache[cacheKey]) {\n        cache[cacheKey] = yourFunction(...args);\n    }\n    return cache[cacheKey];\n  };\n};\n```", "```jsx\n let globalValue = 0;\n\n const inc1 = (num) => { // Referentially opaque (has side effects)\n   globalValue += 1;\n   return num + globalValue;\n }\n\n const inc2 = (num) => { // Referentially transparent\n   return num + 1;\n }\n```", "```jsx\ninc(4) + inc(4) * 5\n\n// With referentially transparent function you can simplify to:\ninc(4) * ( 1 + 1*5 )\n// and even to\ninc(4) * 6\n```", "```jsx\nexport const tasksSelector = state => state.tasks;   export const tasksEntitiesSelector = createSelector(\n    tasksSelector,\n  tasks => (tasks ? tasks.get('entities') : null)\n); \nexport const getTaskById = taskId => createSelector(\n    tasksEntitiesSelector,\n  entities => (entities\n        ? entities.find(task => task.id === taskId)\n        : null)\n);  \n```", "```jsx\nimport Maybe from '../../../../utils/Maybe';   export const tasksSelector = state => Maybe(state).map(x => x.tasks);   export const tasksEntitiesSelector = createSelector(\n    tasksSelector,\n  maybeTasks => maybeTasks.map(tasks => tasks.get('entities'))\n);   export const getTaskById = taskId => createSelector(\n    tasksEntitiesSelector,\n  entities => entities.map(e => e.find(task => task.id === taskId))\n);\n```", "```jsx\nconst Maybe = (value) => {\n    const Nothing = {\n        // Some trivial implementation   };\n  const Something = val => ({\n        // Some trivial implementation\n    });    return (typeof value === 'undefined' || value === null)\n        ? Nothing\n        : Something(value); };\n```", "```jsx\n// src / Chapter 9 / Example 1 / src / utils / Maybe.js\nconst Maybe = (value) => {\n    const Nothing = {\n        map: () => this,\n  isNothing: () => true,\n  val: () => null\n  };\n  const Something = val => ({\n        map: fn => Maybe(fn.call(this, val)),\n  isNothing: () => false,\n  val: () => val\n    });    return (typeof value === 'undefined' || value === null)\n        ? Nothing\n        : Something(value); };   export default Maybe;\n```", "```jsx\n// src / Chapter 9 / Example 1\n//         src/features/tasks/containers/TaskDetailsContainer.js \nconst mapStateToProps = (state, ownProps) => ({\n task: getTaskById(ownProps.taskId)(state).val()\n});\n```", "```jsx\n// for all x, fn\nMaybe(x).map(fn) == Maybe(fn(x))\n```", "```jsx\n// for all x\nMaybe(x).map(x => x) == Maybe(x)\n```", "```jsx\n// for all x, fn, gn\nMaybe(x).map(fn).map(gn) == Maybe(x).map(x => gn(fn(x)));\n```", "```jsx\n// Left identity example\nMaybe(\"randomtext\")\n.map(str => String.prototype.toUpperCase.call(str))\n.val() // RANDOMTEXT\n Maybe(String.prototype.toUpperCase.call(\"randomtext\"))\n.val()) // RANDOMTEXT\n\n// Right identity example\nMaybe(\"randomtext\").map(str => str).val() // randomtext\nMaybe(\"randomtext\").val() // randomtext\n\n// Associativity\nconst f = str => str.replace('1', 'one'); const g = str => str.slice(1); \nMaybe(\"1 2 3\").map(f).map(g).val() // ne 2 3\nMaybe(\"1 2 3\").map(str => g(f(str))).val() // ne 2 3\n```", "```jsx\nconst add5 = x => x + 5; // function\nconst applyTwice = (f, x) => f(f(x)); // higher order function\n\napplyTwice(add5, 7); // 17\n```", "```jsx\nsomeArray.map(function callback(currentValue, index, array){\n    // Return new element\n});\n\n// or in the shorter form\nsomeArray.map((currentValue, index, array) => { //... });\n```", "```jsx\nsomeArray.filter(function callback(currentValue, index, array){\n    // Returns true or false\n});\n\n// or in the shorter form\nsomeArray.filter((currentValue, index, array) => { //... });\n```", "```jsx\nsomeArray.reduce(\n    function callback(previousValue, currentValue, index, array){\n        // Returns whatever\n    },\n    initialValue\n);\n\n// or in the shorter form\nsomeArray.reduce((previousValue, currentValue, index, array) => {\n    // ... \n}, initialValue);\n\n// previousValue is usually referred as accumulator or short acc\n// reduce callback is also referred as fold function\n```", "```jsx\nsomeArray\n    .map(...)\n    .filter(...)\n    .map(...)\n    .reduce(...)\n```", "```jsx\n// Redux library code\n// redux/src/createStore.js\n\nlet currentReducer = reducer\nlet currentState = preloadedState\nlet currentListeners = []\nlet nextListeners = currentListeners\nlet isDispatching = false\n\n// Check yourself:\n[https://github.com/reduxjs/redux/blob/1448a7c565801029b67a84848582c6e61822f572/src/createStore.js](https://github.com/reduxjs/redux/blob/1448a7c565801029b67a84848582c6e61822f572/src/createStore.js) [](https://github.com/reduxjs/redux/blob/1448a7c565801029b67a84848582c6e61822f572/src/createStore.js) \n```", "```jsx\n\nlet didWarnAboutMaps = false; \n// (...)\n\nif (__DEV__) {   if (iteratorFn === children.entries) {\n    warning(\n      didWarnAboutMaps,\n  'Using Maps as children is unsupported (...)'   );\n  didWarnAboutMaps = true**;**\n  }\n}\n\n// Check yourself\nhttps://github.com/facebook/react/blob/f9358c51c8de93abe3cdd0f4720b489befad8c48/packages/react/src/ReactChildren.js\n```"]