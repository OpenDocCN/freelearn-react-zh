["```jsx\n// Code example from React readme. Comments added for clarity.\n\n// JavaScript pure function\n// for a given input always returns the same output\nfunction NameBox(name) {\n    return { fontWeight: 'bold', labelContent: name };  }\n\n// Example with input\n'Sebastian Markb\u00e5ge' ->\n{ fontWeight: 'bold', labelContent: 'Sebastian Markb\u00e5ge' };\n```", "```jsx\n// src/ Chapter_3/ Example_1_three_ways_to_define_styles/ App.js\n\nexport default () => (\n    <View>\n <Text style={{ color: 'green' }}>inline object green</Text>\n <Text style={styles.green}>styles.green green</Text>\n <Text style={[styles.green, styles.bigred]}>\n  [styles.green, styles.bigred] // big red\n        </Text>\n <Text style={[styles.bigred, styles.green]}>\n  [styles.bigred, styles.green] // big green\n        </Text>\n </View> );   const styles = StyleSheet.create({\n    green: {\n        color: 'green'\n  },\n  bigred: {\n        color: 'red',\n  fontSize: 35\n  }\n});\n```", "```jsx\n<View>\n <Text  style={[\n            styles.linkStyle,\n  this.props.isActive && styles.activeLink\n        ]}\n    >\n  Some link\n    </Text> </View> \n```", "```jsx\n// src/ Chapter_3/ Example_2_Inheritance_of_Text_component/ App.js\n\nexport default () => (\n    <View style={styles.container}>\n <Text style={styles.green}>\n  some green text\n            <Text style={styles.big}>\n  some big green text\n            </Text>\n </Text> </View> );   const styles = StyleSheet.create({\n    container: {\n        marginTop: 40\n    },\n    green: {\n        color: **'green'**\n  },\n  big: {\n        fontSize: **35**\n  }\n});\n```", "```jsx\n// src/ Chapter_3/ Example_3/ src/ AppText.js\n\nconst AppText = ({ children, ...props }) => (\n    <Text style={styles.appText} {...props}>\n  {children}\n    </Text> );  // ... propTypes and defaultProps omitted for clarity   const styles = StyleSheet.create({\n    appText: {\n        fontFamily: **'Verdana'**\n  }\n});   export default AppText;\n```", "```jsx\n// src / Chapter 3 / Example 3 / App.js\nexport default () => (\n    <View style={styles.container}>\n **<AppText>**  some text, Verdana font\n            <Text style={styles.big}**>**\n  some big text, Verdana font\n            </Text>  **</AppText>** <Text style={styles.big}>\n  some normal big text\n        </Text>\n </View> );\n```", "```jsx\n// src / Chapter 3 / Example 3 / src / HeaderText.js\nconst HeaderText = ({ children, ...props }) => (\n    <**AppText**>\n <Text style={styles.headerText} {...props}>\n  {children}\n        </Text>\n </**AppText**> );\n// ...\nconst styles = StyleSheet.create({\n    headerText: {\n        fontSize: 30\n  }\n});\n```", "```jsx\n// src/ Chapter 3/ Example 4/ App.js\n\nexport default () => {\n    const { height, width } = Dimensions.get('window');\n  return (\n        <View style={{ marginTop: 40 }}>\n <Text>Width: {width}, Height: {height}</Text>\n <View  style={{\n                    width: width / 4,\n  height: height / 3**,**\n  backgroundColor: 'steelblue'\n  }}\n            />\n <View style={styles.powderblue} />\n </View>  ); };   const styles = StyleSheet.create({\n    powderBlueBox: {\n        width: Dimensions.get('window').width / 2,\n  height: Dimensions.get('window').height / 5,\n  backgroundColor: 'powderblue'\n  }\n});\n```", "```jsx\n// src/ Chapter_3/ Example_5_Listening_on_dimensions_change/ App.js\n\nexport default class LogDimensionChanges extends React.Component {\n    state = { window: Dimensions.get('window') };\n  componentWillMount() {\n        // This lifecycle hook runs before component\n        // is render for the first time\n        Dimensions.addEventListener('change', this.handler)**;**\n  }\n    componentWillUnmount() {\n        // This lifecycle hook runs after unmount\n        // that is when component is removed\n        // It is important to remove listener to prevent memory leaks\n  Dimensions.removeEventListener('change', this.handler)**;**\n  }\n    handler = dims => this.setState(dims);    render() {\n        const { width, height } = this.state.window**;**\n  return (\n            ...  <View  style={{\n                        width: width / 4,\n  height: height / 3,\n  backgroundColor: 'steelblue'\n  }}\n                />\n <View style={styles.powderBlueBox} />\n ...  );\n  }\n}\n\nconst styles = StyleSheet.create({\n    powderBlueBox: {\n        width: Dimensions.get('window').width / 2,\n  height: Dimensions.get('window').height / 5,\n  backgroundColor: 'powderblue'\n  }\n});\n```", "```jsx\ndynamicStyles(newWidth, newHeight) {\n    return {\n        // calculate styles using passed newWidth, newHeight\n    }\n}\n...\nrender = () => (\n<View\n    style={\n        this.dynamicStyles(this.state.window.width, this.state.window.height)\n    }\n>\n...\n</View>\n)\n```", "```jsx\n<View\n  style={[\n        styles.powderBlueBox,\n  {\n            width: this.state.window.width / 2,\n  height: this.state.window.height / 5 }\n    ]}\n/>\n```", "```jsx\nconst powderBlueBox = StyleSheet.flatten([\n    styles.powderBlueBox, {\n        width: this.state.window.width / 4,\n  height: this.state.window.height / 5\n  }\n]);   return (\n    ...  <View style={powderBlueBox} />\n ... );\n```", "```jsx\n// src/ Chapter 3/ Example_6/ App.js\n\nexport default () => (\n    <View>\n <View style={[styles.box]}>\n <Text style={styles.text}>B1</Text>\n </View> <View style={[styles.box, {\n            left: 80,\n  top: 80**,**\n  backgroundColor: 'steelblue'\n  }]}\n        >\n <Text style={styles.text}>B2</Text>\n </View> <View style={[styles.box, {\n            left: 120,\n  top: 120**,**\n  backgroundColor: 'powderblue'\n  }]}\n        >\n <Text style={styles.text}>B3</Text>\n </View> </View> );   const styles = StyleSheet.create({\n    box: {\n        position: 'absolute'**,**\n  top: 40,\n  left: 40**,**\n  width: 100,\n  height: 100,\n  backgroundColor: 'red'\n  },\n  text: {\n        color: '#ffffff',\n  fontSize: 80\n  }\n});\n```", "```jsx\n<View style={[styles.box, {\n    position: 'relative'**,**\n  backgroundColor: 'steelblue' }]}\n>\n <Text style={styles.text}>B2</Text> </View>\n```", "```jsx\n// src/ Chapter_3/ Example_8/ App.js\nexport default () => (\n    <View style={{ flex: 1 }}>\n <View  style={{ backgroundColor: 'powderblue', height: 50 }}\n        />\n </View> );\n```", "```jsx\n// src/ Chapter_3/ Example_8/ App.js\n\nexport default () => (\n    <View style={{ flex: 1 }}>\n <**View**  style={{ backgroundColor: 'powderblue', height: 50 }}\n        />\n <**View**  style={{ backgroundColor: 'skyblue', height: 50 }}\n        />\n <**View**  style={{ backgroundColor: 'steelblue', height: 50 }}\n        />\n </View> );  \n```", "```jsx\n<View\n  style={{ backgroundColor: 'skyblue', flex: 1 }}\n/>\n```", "```jsx\n// src / Chapter 3 / Example 9 / App.js\n...\n<View\n  style={{\n        backgroundColor: 'steelblue',\n  height: 70,\n  flexDirection: **'row'**\n  }}\n>\n <View><Text style={{ fontSize: 40 }}>Home</Text></View>\n <View><Text style={{ fontSize: 40 }}>Search</Text></View>\n <View><Text style={{ fontSize: 40 }}>About</Text></View> </View>\n...\n```", "```jsx\n...\n    style={{\n        backgroundColor: 'steelblue',\n  height: 70,\n  justifyContent: 'space-between'**,**\n  flexDirection: **'row'**\n  }}\n...\n```", "```jsx\npaddingLeft: 10, paddingRight: 10\n```", "```jsx\n// src / Chapter 3 / Example 10 / App.js\n...\n    style={{\n        backgroundColor: 'steelblue',\n  height: 100,\n  alignItems: 'center'**,**\n  justifyContent: 'space-between',\n  flexDirection: 'row',\n  paddingLeft: 10,\n  paddingRight: 10\n  }}\n...\n```", "```jsx\nheader: {\n    height: 45,\n  borderBottomColor: '#000000',\n  borderBottomWidth: 1,\n  paddingLeft: 10,\n  paddingRight: 10,\n  marginBottom: 10 },\n// All the other styles are available in\n// src/ Chapter_3/ Example_11/ App.js\n```", "```jsx\nyarn add @expo/vector-icons\n```", "```jsx\n// src/ Chapter_3/ Example_11/ App.js\n<View style={styles.footer}>\n <Ionicons name=\"md-home\" size={32} color=\"white\" />\n <Ionicons name=\"md-search\" size={32} color=\"white\" />\n <Ionicons name=\"md-notifications\" size={32} color=\"white\" /> </View> \n```", "```jsx\nimport data from './tasks.json';\n\n// ... header\n<**ScrollView** style={styles.content}>\n <**TaskList** tasks={data.tasks} /> </**ScrollView**>\n// ... footer\n```", "```jsx\n{\n  \"tasks\": [\n    {\n      \"name\": \"Task 1\",\n  \"description\": \"Task 1 description...\",\n  \"likes\": 239\n  },\n //... more comma separated tasks here\n  ]\n}\n```", "```jsx\nconst TaskList = ({ tasks }) => (\n    <View>\n  {tasks.map(task => (\n            <View key={task.name}>\n <Text>{task.name}</Text>\n <Text>{task.description}</Text>\n <LikeCounter likes={task.likes} />\n </View>  ))}\n    </View> );\n// separate component for each task is not created for book clarity \n```", "```jsx\n<Text\n  style={styles.text}\n    numberOfLines={1}\n    **adjustsFontSizeToFit** >\n  {this.state.likeCount}\n</Text>\n```", "```jsx\n<Text style={styles.text}>\n  {\n        this.state.likeCount.toString().length > 4\n  ? `${this.state.likeCount.toString().substring(0, 4)}**...`**\n  : this.state.likeCount\n  }\n</Text>\n```", "```jsx\nconst likes = this.state.likeCount.toString();\n...\n<Text style={styles.text}>\n  {\n        likes.length > 3\n  ? `${likes.substring(0, likes.length - 3)}**K`**\n  : likes   }\n</Text>\n```", "```jsx\n// src / Chapter 3 / Example 12 / src / LikeCounter.js\n\nkiloText = (nr, nrK = 0) => (nr.length > 3\n  ? this.kiloText(nr.substring(0, nr.length - 3), nrK + 1)\n    : nr + Array(nrK).fill('K').join(''))\n```", "```jsx\n<Text style={styles.text}>\n  {this.kiloText(likes)}\n</Text> \n```", "```jsx\nstate = {\n    fadeIn: new Animated.Value(0)\n}\n```", "```jsx\n// src/ Chapter_3/ Example_13/ src/ App.js\nclass App extends React.Component {\n    state = {\n        fadeIn: new Animated.Value(0)\n    }\n\n    componentDidMount() {\n        this.fadeInApp();\n  }\n\n    fadeInApp() {\n        Animated.timing(\n this.state.fadeIn,\n  {\n toValue: 1,\n  duration: 2000,\n  easing: Easing.linear\n  }\n ).start()**;**\n  }\n\n    render = () => (\n        <**Animated.View**\n  style={[\n                styles.appContainer,\n  { opacity: this.state.fadeIn }\n            ]}\n        >\n ... // rest of render removed for clarity  </**Animated.View**>  )\n}\n```", "```jsx\n// src/ Chapter_3/ Example_14/ App.js\n// ...\nanimate(easing) {\n    this.easeValue.setValue(20);\n  Animated.timing(\n        this.easeValue,\n  {\n            toValue: 300,\n  duration: 2000,\n  easing\n        }\n    ).start(); }\n\nonPress = easingName => this.animate(Easing[easingName.toLowerCase()]);\n// ... \n```", "```jsx\n// ...\ngetFadeInAnimation = animatedVal =>\n    Animated.timing(animatedVal, { toValue: 1, duration: 5000 });   componentDidMount() {\n    const animations = Boxes.map(box =>\n        this.getFadeInAnimation(this.state[box]));\n  Animated.stagger(10, animations).start(); }\n// ...\n```", "```jsx\n// src / Chapter 3 / Example 16 / App.js\nconstructor() {\n    // ...   let FPScounter = 0;\n setInterval(() => FPScounter++, 16)**;**\n  setInterval(() => {\n        this.setState({ fps: FPScounter });\n  FPScounter = 0;\n  }, 1000); }  // ... render = () => (\n    // ...  <Text>FPS: {this.state.fps}</Text>\n // ...  );\n// makes sure these measures are only done in dev environment\n// and never leak to the production app!\n// Beware: This example is not really very accurate and performant\n// I have made it to illustrate the idea\n```"]