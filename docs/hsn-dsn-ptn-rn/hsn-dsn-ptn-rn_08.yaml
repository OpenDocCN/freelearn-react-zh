- en: JavaScript and ECMAScript Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 和 ECMAScript 模式
- en: In this chapter, we will go back to the heart of the JavaScript language. Some
    of the patterns here can be reused across many different languages, such as Java,
    C++, and Python. It is vital to fill your toolbox with such powerful things. This
    time, we will implement well-known design patterns in JavaScript and see how we
    can benefit from them, especially within the React Native environment. As a little
    addition, we will learn a new library, called Ramda, which is known for its great
    functionalities that can help us to write much shorter and concise code. You will
    also get to know the fundamentals of functional programming, which will be the
    topic of the next chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回到 JavaScript 语言的核心。这里的一些模式可以在许多不同的语言中重复使用，例如 Java、C++ 和 Python。用这样强大的东西填充您的工具箱是至关重要的。这一次，我们将在
    JavaScript 中实现众所周知的设计模式，并看看我们如何从中受益，特别是在 React Native 环境中。作为一个小补充，我们将学习一个名为 Ramda
    的新库，它以其出色的功能而闻名，可以帮助我们编写更短、更简洁的代码。您还将了解函数式编程的基础知识，这将是下一章的主题。
- en: 'In this chapter, you will learn about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Selector patterns
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器模式
- en: Currying patterns
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柯里化模式
- en: The Ramda library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ramda 库
- en: Basics of functional programming
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数式编程基础
- en: JavaScript and functional programming
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 和函数式编程
- en: Functional programming basically means using functions in a certain way to write
    a logical piece of code. Most languages allow functions to be really complex and
    hard to understand. Functional programming, however, puts constraints on functions
    in order to be able to compose them and mathematically prove something about their
    behaviour.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程基本上意味着以某种方式使用函数来编写逻辑代码。大多数语言允许函数变得非常复杂和难以理解。然而，函数式编程对函数施加了约束，以便能够组合它们并在数学上证明它们的行为。
- en: One of the constraints is the regulation of communication with the external
    world (for instance, side effects, such as data fetching). Some assert that no
    matter how many times we call a function with the same arguments, it will return
    the exact same value. All of these constraints will give us certain benefits.
    You can name some of these benefits already, such as time-traveling, which uses pure
    reducers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个约束是规范与外部世界的通信（例如，副作用，如数据获取）。有人断言，无论我们用相同的参数调用函数多少次，它都会返回完全相同的值。所有这些约束都将给我们带来一定的好处。您已经可以列举一些这些好处，比如时间旅行，它使用纯减速器。
- en: In this chapter, we will learn a bunch of useful functions that will ease us into
    [Chapter 9](0577761c-9fca-49f2-98ad-2d217e00e974.xhtml), *Elements of Functional
    Programming Patterns*. We will also elaborate more on the exact constraints and
    their benefits.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习一些有用的函数，这将使我们更容易进入[第9章](0577761c-9fca-49f2-98ad-2d217e00e974.xhtml)，*函数式编程模式的要素*。我们还将更详细地阐述确切的约束及其好处。
- en: ES6 map, filter, and reduce
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ES6 的 map、filter 和 reduce
- en: This section is aimed at refreshing our knowledge on the `map`, `filter`, and
    `reduce` functions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在刷新我们对 `map`、`filter` 和 `reduce` 函数的了解。
- en: Usually, common language functions need to be extremely performant, which is
    a topic that spans beyond this book. Avoid reimplementing what is in the language
    already. Some of the examples in this chapter are here only for learning purposes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，常见的语言函数需要非常高的性能，这是一个超出本书范围的话题。避免重新实现语言中已有的功能。本章中的一些示例仅用于学习目的。
- en: '`reduce` is most likely often neglected, hence, we will focus on it. Usually,
    `reduce` (as the name suggests) is used to reduce a collection in size to a smaller
    one, or even a single variable.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`reduce` 很可能经常被忽视，因此我们将重点关注它。通常，`reduce`（顾名思义）用于将集合的大小减小到更小的集合，甚至是单个变量。'
- en: 'Here is the reduce function declaration:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 reduce 函数的声明：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The callback takes four arguments: `previousValue`, `currentValue`, `index`,
    and `array`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数接受四个参数：`previousValue`、`currentValue`、`index`和`array`。
- en: 'To quickly remind you how the `reduce` function works, let''s look at the following 
    example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速提醒一下`reduce`函数的工作原理，让我们看下面的例子：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`reduce` iterates over the collection. At each step, it calls the function
    on the element iterator it is at. Then it remembers the function output and passes
    to the next element. This remembered output is the first function argument; in
    the preceding example, it is the accumulator (`acc`) variable. It remembers the
    result of the previously run function, applies the `reducer` function and passes
    along to the following step. This is very similar to how the Redux library operates
    on the state.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`reduce`在集合上进行迭代。在每一步，它调用函数来处理它所在的元素迭代器。然后它记住函数的输出并传递给下一个元素。这个记住的输出是第一个函数参数；在前面的例子中，它是累加器（`acc`）变量。它记住了先前运行函数的结果，应用`reducer`函数并传递到下一步。这与Redux库在状态上的操作非常相似。'
- en: The second argument of the `reduce` function is the initial value of the accumulator;
    in the preceding example, we start with zero.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`reduce`函数的第二个参数是累加器的初始值；在前面的例子中，我们从零开始。'
- en: 'Let''s rise the bar and implement an `average` function using `reduce`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们提高难度，使用`reduce`来实现一个`average`函数：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we do a trick with the `if` statement. If the element is the
    last one in the array, then we want to calculate `average` instead of the `sum`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们在`if`语句中做了一个小技巧。如果元素是数组中的最后一个元素，那么我们想要计算`average`而不是`sum`。
- en: Using reduce to reimplement filter and map
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用reduce重新实现filter和map
- en: It's time for a little challenge. Did you know that you can implement both `map`
    and `filter` with `reduce`?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是一个小挑战的时候了。你知道吗，你可以使用`reduce`来实现`map`和`filter`两个函数吗？
- en: 'Before we begin, let''s do a quick recap how the `filter` function works:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我们快速回顾一下`filter`函数的工作原理：
- en: '![](Images/aaeb5354-b0a9-4851-9e2e-bcb46f67903b.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/aaeb5354-b0a9-4851-9e2e-bcb46f67903b.png)'
- en: How the filter function works on collection
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤函数在集合上的工作原理
- en: 'Suppose we have a `task` collection and want to filter only tasks with `type`
    equal to `1`, as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个`task`集合，想要筛选出`type`等于`1`的任务，如下所示：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With a standard filter function, you would simply write the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标准的filter函数，你只需要写下面的代码：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: But now, imagine there was no `filter` function and, so far, you only had `reduce`
    in your toolbox.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但是现在，想象一下如果没有`filter`函数，到目前为止，你的工具箱中只有`reduce`。
- en: 'You could do the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样做：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The trick is to make the accumulator into a collection. The previous value is
    always a collection, starting from the empty array. Step by step, we either add
    tasks to the accumulator or simply return the accumulator if the task fails to
    pass the filter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 技巧是将累加器变成一个集合。前一个值始终是一个集合，从空数组开始。一步一步地，我们要么将任务添加到累加器中，要么如果任务未能通过筛选，则简单地返回累加器。
- en: 'What about implementing the `map` function? `map` just transforms each element
    into a new element by applying a mapping function that is passed to it:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如何实现`map`函数呢？`map`只是通过应用传递给它的映射函数，将每个元素转换为一个新元素：
- en: '![](Images/4406e918-8437-4cda-beed-c5d8c4f71a4f.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/4406e918-8437-4cda-beed-c5d8c4f71a4f.png)'
- en: How the map function works on collection
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 映射函数在集合上的工作原理
- en: 'Let''s do it using `reduce`, as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`reduce`来做，如下所示：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, we just collect every item again into the same collection,
    but before adding it into the array, we apply a mapping function on it. In this
    example, the mapping function is defined under the name `someFunc`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只是再次将每个项目收集到相同的集合中，但在将其添加到数组之前，我们对其应用了一个映射函数。在这个例子中，映射函数被定义为`someFunc`。
- en: Counting items in an array
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在数组中计算项目数量
- en: 'Our next example is about counting the items in an array. Let''s say you have
    an array of house items. You need to count how many of each you own. Using the
    `reduce` function, the expected outcome is an object with items as keys and a
    count of particular items as values, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个例子是关于计算数组中的项数。假设你有一个房屋物品的数组。你需要计算你拥有的每种物品的数量。使用`reduce`函数，预期的结果是一个具有物品作为键和特定物品计数作为值的对象，如下所示：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is quite tricky: the part `(acc[elem] || 0)` means we either take the
    value of `acc[elem]`, if it is defined, or otherwise, `0`. This way, we check
    for the first element of its kind. Also, `{ [elem]: something }` is syntax used
    to define a key with the name that is stored in the `elem` variable.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '这很棘手：`(acc[elem] || 0)`部分意味着我们要么取`acc[elem]`的值，如果它被定义了，要么取`0`。这样，我们就可以检查其种类的第一个元素。另外，`{
    [elem]: something }`是用来定义一个以存储在`elem`变量中的名称为键的语法。'
- en: The preceding example is helpful when you work with serialized data that came
    from an external API. Sometimes you need to transform it in order to cache it,
    so it avoids unnecessary re-rendering.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子在你处理来自外部API的序列化数据时很有帮助。有时你需要对其进行转换以进行缓存，以避免不必要的重新渲染。
- en: The next example introduces a new word—**flattening**. When we flatten a collection,
    it means it is a nested collection in a collection and we want it to make it flat.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个例子介绍了一个新词—**展开**。当我们展开一个集合时，意味着它是一个嵌套在集合中的集合，我们希望将其变平。
- en: 'For instance, a collection such as `[[1, 2, 3], [4, 5, 6], [7, 8, 9]]` becomes `[1,
    2, 3, 4, 5, 6, 7, 8, 9]` after flattening. This is done as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个集合，比如`[[1, 2, 3], [4, 5, 6], [7, 8, 9]]`在展开后变成了`[1, 2, 3, 4, 5, 6, 7, 8,
    9]`。这是通过以下方式完成的：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This example is essential to understand flattening in the more complex examples
    that we will use in [Chapter 9](0577761c-9fca-49f2-98ad-2d217e00e974.xhtml), *Elements
    of Functional Programming Patterns*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子对于理解我们将在[第9章](0577761c-9fca-49f2-98ad-2d217e00e974.xhtml)，*函数式编程模式的元素*中使用的更复杂的例子中的展开是至关重要的。
- en: The iterator pattern
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代器模式
- en: In the previous section, we traversed many different collections, even nested
    ones. Now, it's time to learn more about the iterator pattern. This pattern especially
    shines if you plan to use the Redux Saga library.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们遍历了许多不同的集合，甚至是嵌套的集合。现在，是时候更多地了解迭代器模式了。如果你打算使用Redux Saga库，这种模式尤其闪耀。
- en: If you jumped straight to this chapter, I highly advise you to read the section
    that introduces iterator patterns in [Chapter 6](d4c32a64-637b-4e0d-a508-9f239913d5cc.xhtml), *Data
    Transfer Patterns*. That chapter also covers the Redux Saga library and generators.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你直接跳到这一章，我强烈建议你阅读介绍迭代器模式的部分[第6章](d4c32a64-637b-4e0d-a508-9f239913d5cc.xhtml)，*数据传输模式*。该章还涵盖了Redux
    Saga库和生成器。
- en: 'To recap, in JavaScript, an iterator is an object that knows how to traverse
    items of a collection one at a time. It must expose the `next()` function, which
    returns the next item of a collection. The collection can be whatever it wants.
    It can even be an infinite collection, such as the Fibonacci numbers, as seen
    here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，在JavaScript中，迭代器是一个知道如何逐个遍历集合项的对象。它必须公开`next()`函数，该函数返回集合的下一个项。集合可以是任何想要的东西。它甚至可以是一个无限集合，比如斐波那契数列，就像这里看到的那样：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Before you can use this, you need to create an instance of a class:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在你使用这个之前，你需要创建一个类的实例：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This could quickly get boring, as it smells like an academic example. But it
    is not. It is useful to show you the algorithm with which we will recreate with
    closure and the `Symbol` iterator.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能很快变得无聊，因为它看起来像一个学术例子。但它并不是。它很有用，可以向你展示我们将使用闭包和`Symbol`迭代器重新创建的算法。
- en: Defining a custom iterator
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义一个自定义迭代器
- en: 'As a quick recap on symbols in JavaScript: `CallingSymbol()` returns a unique
    symbol value. A symbol value should be treated as an ID, for instance, as an ID
    to be used as a key in an object.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 快速回顾一下JavaScript中的符号：`CallingSymbol()`返回一个唯一的符号值。符号值应该被视为一个ID，例如，作为一个在对象中用作键的ID。
- en: 'To define an iterator for a collection, you need to specify the special key, `Symbol.iterator`.
    If such a symbol is defined, we say that the collection is iterable. See the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要为集合定义一个迭代器，您需要指定特殊的键`Symbol.iterator`。如果定义了这样一个符号，我们说这个集合是可迭代的。看下面的例子：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s now create a custom `iterator` for the Fibonacci collection. The Fibonacci
    sequence is characterized by the fact that every number after the first two is
    the sum of the two preceding ones (the beginning of the sequence is 1, 1, 2, 3,
    5, 8, 13, 21, 34, 55, 89, 144, ...):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为斐波那契数列创建一个自定义的`iterator`。斐波那契数列的特点是每个数字都是前两个数字的和（序列的开头是1, 1, 2, 3, 5,
    8, 13, 21, 34, 55, 89, 144, ...）：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To easily traverse iterable collections, we can use the handy `for...of` loop:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了轻松遍历可迭代的集合，我们可以使用方便的`for...of`循环：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Using generators as a factory for iterators
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用生成器作为迭代器的工厂
- en: We will also need to know how to use generators (for instance, for Redux Saga),
    so we should get fluent in writing them. It turns out they can act like a factory
    for the iterators that we have learned already.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要知道如何使用生成器（例如，对于Redux Saga），所以我们应该熟练地编写它们。事实证明它们可以像迭代器的工厂一样工作，我们已经学会了如何使用迭代器。
- en: 'A quick recap on generators—they are functions with `*` and `yield` operators
    within their scope, such as, `function* minGenExample() { yield "a"; }`. Such
    functions execute until the `yield` keyword is encountered. Then, the function
    returns with the `yield` value. Functions can have many `yields`, and on their
    first call, return `Generator`. Such a generator is iterable. Look at the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 关于生成器的快速回顾——它们是带有`*`和`yield`操作符的函数，比如，`function* minGenExample() { yield "a";
    }`。这样的函数执行直到遇到`yield`关键字。然后，函数返回`yield`值。函数可以有多个`yield`，在第一次调用时返回`Generator`。这样的生成器是可迭代的。看下面的例子：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can now use this knowledge to reimplement Fibonacci as a generator:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以利用这个知识重新实现斐波那契数列作为一个生成器：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: That's it. We used generator function syntax to simplify things for ourselves.
    The generator function is like a factory for iterators. Once invoked, it will
    provide you with a new generator that you can iterate over like any other collection.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们使用生成器函数语法来简化自己的事情。生成器函数就像迭代器的工厂。一旦调用，它将为您提供一个新的生成器，您可以像任何其他集合一样对其进行迭代。
- en: 'The piece of code that handles Fibonacci numbers can be simplified. The shortest
    way I could write this is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 处理斐波那契数的代码可以简化。我能写的最简洁的方式如下：
- en: '`function* fib() {`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`function* fib() {`'
- en: '`  let n1 = 1, n2 = 1;`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`  let n1 = 1, n2 = 1;`'
- en: '`  while (true) {`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`  while (true) {`'
- en: '`    yield n1;`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`    yield n1;`'
- en: '`    [n1, n2] = [n2, n1 + n2];`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`    [n1, n2] = [n2, n1 + n2];`'
- en: '`  }`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`  }`'
- en: '`}`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: Making an API call to fetch task details with a generator
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用生成器调用API以获取任务详情
- en: 'We have already tried generators and we have successfully fetched tasks using
    them. Now, we will repeat the process, but with a slightly different goal: to
    fetch the data of a single task. To achieve this, I have made a few changes to
    the code base and prepared the parts of code to keep your eyes on generators only:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经尝试过生成器，并成功使用它们获取了任务。现在，我们将重复这个过程，但目标略有不同：获取单个任务的数据。为了实现这一点，我对代码进行了一些修改，并准备了代码的部分，让你只关注生成器：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This generator takes care of the API call first. The endpoint is calculated
    using the payload from a dispatched action. A string template is used for convenience.
    Then, based on the outcome, we either dispatch a success action or an error action:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个生成器首先处理API调用。端点是使用分派的动作的有效负载计算出来的。为了方便起见，使用了字符串模板。然后，根据结果，我们要么分派成功动作，要么分派错误动作：
- en: '![](Images/3c663de8-7432-4a98-8402-c20e521ee25e.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3c663de8-7432-4a98-8402-c20e521ee25e.png)'
- en: This is an example of the Task Details screen. Feel free to work on the styles.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是任务详细信息屏幕的示例。请随意处理样式。
- en: Please pay attention to the numerous yields in the generator. We stop function
    execution with every yield. In our example, the execution is resumed on a finished
    `call` effect. Then, we can proceed, knowing the result of the call.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意生成器中的许多`yield`。每次`yield`都会停止函数执行。在我们的例子中，执行会在完成的`call`效果上恢复。然后，我们可以继续，知道调用的结果。
- en: 'But why would we want to stop? Is there any use case for this? First of all,
    it''s more powerful than simple promises and async/await (there will be more on
    this in the following section). Secondly, it is handy to stop and wait for certain
    things to happen. Imagine, for example, that we want to wait until the creation
    of three tasks to display a congratulations message, as seen here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但为什么我们要停下来呢？有没有这样的用例？首先，它比简单的承诺和异步/等待更强大（在下一节中将会更多介绍）。其次，停下来等待某些事情发生是很方便的。例如，想象一下，我们想等到创建三个任务后才显示祝贺消息，就像这样：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This example is for playground purposes only. Pay attention to the fact that
    the task creation counter is within the generator function. Hence, is not saved
    in any backend system. On app refresh, the counter will reset. If you build any
    reward system for your application, keep such issues under consideration.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子仅用于游乐场目的。请注意任务创建计数器在生成器函数内。因此，它不会保存在任何后端系统中。在应用程序刷新时，计数器将重置。如果您为应用程序构建任何奖励系统，请考虑这些问题。
- en: Alternatives to generators
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成器的替代方案
- en: A popular alternative that has been in JavaScript for years is that of promises.
    The promises use a very similar concept to generators. The syntactic sugar allows
    you to await the promise. If you want this syntactic sugar, then your function
    needs to be `async`. Do you see any similarity? Yeah, I would risk saying that
    promises are a less powerful variation of generators.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中多年来一直存在的一个流行的替代方案是承诺。承诺使用了与生成器非常相似的概念。语法糖允许您等待承诺。如果您想要这种语法糖，那么您的函数需要是`async`的。您看到了任何相似之处吗？是的，我愿意说承诺是生成器的一个不太强大的变体。
- en: If you do use promises, take a look at a new loop called **`for await of`**.
    You may find it handy. Another feature worth checking is **asynchronous iterators**.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用承诺，请看一下名为**`for await of`**的新循环。您可能会发现它很方便。另一个值得检查的功能是**异步迭代器**。
- en: Selectors
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择器
- en: 'In the previous section, we worked with async data again. This data has been
    pushed to the application''s Redux store. We have accessed it numerous times in
    `mapStateToProps` functions, for example, in the task list container:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们再次处理了异步数据。这些数据已被推送到应用程序的Redux存储中。我们在`mapStateToProps`函数中多次访问它，例如，在任务列表容器中：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This one is not looking very ugly, but for the task details page, it already
    is getting out of control. Consider the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个看起来并不是很丑陋，但对于任务详细页面来说，它已经有些失控了。考虑以下内容：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We do numerous checks and then transformations. This flow happens on every re-render.
    Could we somehow remember the calculations if the data did not change? Yes we
    can—here come cached selectors to the rescue.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进行了许多检查和转换。这个流程在每次重新渲染时都会发生。如果数据没有改变，我们是否可以记住计算结果？是的，我们可以——缓存选择器来拯救我们。
- en: Selecting from the Redux store
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Redux存储中选择
- en: 'Let''s face it, we did not have any abstraction on accessing the store so far.
    This means that every `mapStateToProps` function accessed it on its own. In case
    of store shape change, all `mapStateToProps` functions could be affected. The
    first step is to separate the concerns and provide selectors, instead of straightforward
    object access:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 面对现实吧，到目前为止我们还没有对访问存储进行任何抽象。这意味着每个`mapStateToProps`函数都是单独访问它的。如果存储结构发生变化，所有`mapStateToProps`函数都可能受到影响。第一步是分离关注点，并提供选择器，而不是直接对象访问：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The implementation is just the same as before, with the simple exception that
    we can reuse the code in many places:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 实现与之前完全相同，唯一的例外是我们可以在许多地方重用代码：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Even in this little example, we access `tasksSelector` twice in every other
    selector. If `tasksSelector` was expensive, it would be really inefficient. However,
    we will now shield ourselves from such  a scenario by caching the selectors.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在这个小例子中，我们在每个其他选择器中两次访问`tasksSelector`。如果`tasksSelector`很昂贵，那将会非常低效。然而，现在我们将通过缓存选择器来保护自己免受这种情况的影响。
- en: Caching the selectors
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存选择器
- en: 'To cache the selector, we will use the **memoization** function. Such a function
    recomputes the value once the function''s input reference changes. To save us
    time, we will use a popular library that implements this memoization function
    for us. The library is called `reselect`. In `reselect`, the reference change
    is checked with strong equality (**===**), but you can change the equality function
    to your own if you need. Add the library with the following command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缓存选择器，我们将使用**memoization**函数。这样的函数一旦函数的输入引用发生变化就会重新计算值。为了节省时间，我们将使用一个流行的库来为我们实现这个memoization函数。这个库叫做`reselect`。在`reselect`中，引用变化是通过强相等性（**===**）来检查的，但如果需要，你可以更改相等函数。使用以下命令添加这个库：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With that, we are ready to cache:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就准备好缓存了：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Learning functions from the Ramda library
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Ramda库学习函数
- en: Map, filter, reduce, iterators, generators, and selectors. Not too much, right?
    Don't get too scared, can you speak English using only 10 words? No? Okay, then
    we can proceed with learning some new words that will make us more fluent in JavaScript
    programming.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 映射，过滤，减少，迭代器，生成器和选择器。不算太多，对吧？不要太害怕，你能用只有10个单词的英语说话吗？不行？好吧，那么我们可以继续学习一些新的单词，这些单词将使我们在JavaScript编程中更加流利。
- en: Composing functions
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合函数
- en: 'One of the most advertised features of HOCs is their composability. Taking,
    for instance, the `withLogger`, `withAnalytics`, and `withRouter` HOCs, we can
    compose them in the following fashion:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 高阶组件（HOCs）最广告的特性之一是它们的可组合性。例如，`withLogger`，`withAnalytics`和`withRouter` HOCs，我们可以以以下方式组合它们：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The Ramda library takes composability to the next level. Unfortunately, I find
    many developers hardly understand it. Let''s look at an equivalent example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Ramda库将可组合性提升到了一个新的水平。不幸的是，我发现许多开发人员几乎不理解它。让我们看一个等价的例子：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: What most people find hard about Ramda `compose` is understanding how it works.
    It generally applies functions from right to left, meaning that it first evaluates
    `withRouter` and then forwards results to `withAnalytics`, and so on. The most
    important thing about the functions is that only the first one (`withRouter`)
    can have multiple arguments. Every following function needs to operate on the
    result of the previous one.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人对Ramda `compose`的难点在于理解它的工作原理。它通常从右到左应用函数，这意味着它首先评估`withRouter`，然后将结果转发给`withAnalytics`，依此类推。函数的最重要的一点是，只有第一个函数（`withRouter`）可以有多个参数。每个后续函数都需要在前一个函数的结果上操作。
- en: The Ramda `compose` function composes functions from right to left. To compose
    functions from left to right you can use the Ramda `pipe` function.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Ramda `compose`函数从右到左组合函数。要从左到右组合函数，可以使用Ramda `pipe`函数。
- en: The importance of this example to your React or React Native code base is the
    fact that you don't need `reselect` or any other library to compose things. You
    can do it on your own. This will come in handy in use cases such as the `reselect`
    library, which expects you to compose selectors. Spend some time getting used
    to it.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子对你的React或React Native代码库的重要性在于，你不需要`reselect`或任何其他库来组合事物。你可以自己做。这在使用`reselect`库等用例中会很方便，该库希望你组合选择器。花一些时间适应它。
- en: Fighting the confusing code
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对抗混乱的代码
- en: The next interesting pattern I see in code written by skilled Ramda users is
    so-called **pointfree** code. It means there is only one single place where we
    pass all data. As beautiful as it sounds, I wouldn't recommend you to be so strict
    about it. But there is a nice thing we can derive from this approach.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我在熟练使用Ramda的用户编写的代码中看到的下一个有趣的模式是所谓的**pointfree**代码。这意味着只有一个地方我们传递所有数据。尽管听起来很美好，但我不建议你对此如此严格。但是，我们可以从这种方法中得到一个好处。
- en: 'Consider refactoring your code from this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑将你的代码从这个重构成：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You could refactor it to this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以重构成这样：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This will hide the obvious part. The most common problem is that it starts to
    act like a magic box, where only we know how to pass data to it. If you use a
    type system such as TypeScript or Flow, it will be much easier to quickly look
    it up if you have no idea. But, surprisingly, many developers will freak out at
    this point. The less they understand about how `compose` works (particularly the
    right to left function application), the more likely they will have no idea what
    to pass to this function.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这将隐藏明显的部分。最常见的问题是它开始像一个魔盒，只有我们知道如何向它传递数据。如果你使用像TypeScript或Flow这样的类型系统，当你完全不知道时，很容易快速查找它。但令人惊讶的是，许多开发人员会在这一点上感到恐慌。他们对`compose`的工作方式了解得越少（特别是右到左的函数应用），他们就越有可能不知道要传递什么给这个函数。
- en: 'Consider this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个：
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now compare the previous example to this freak version of `compose`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将上一个例子与这个`compose`的疯狂版本进行比较：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the first example, you will probably be able to understand what is happening
    in less than 30 seconds. In the second example, it may take over one minute for
    a beginner to understand the code. This is unacceptable.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个例子中，你可能能在不到30秒内理解发生了什么。在第二个例子中，一个初学者可能需要超过一分钟才能理解这段代码。这是不可接受的。
- en: Currying functions
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 柯里化函数
- en: Okay, bearing in mind the challenges from the previous section, let's now focus
    on the other side of a coin. In brownfield applications, we may bump into the
    problem that it is very risky or time-consuming to modify a function that we would
    like to use in a different way.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，考虑到上一节的挑战，现在让我们关注另一面。在旧应用程序中，我们可能会遇到这样的问题，即修改我们想以不同方式使用的函数非常危险或耗时。
- en: Brownfield applications are applications that were developed in the past and
    are fully functional. Some of these applications may be built using old patterns
    or approaches. We cannot usually afford to rewrite them to the latest trend, such
    as React Native. If they are battle-tested, why would we even bother? Hence, we
    will need to find a way to connect both worlds if we decide that a new trend will
    give us enough of a benefit by switching to it for its new features.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Brownfield应用程序是过去开发并且完全功能的应用程序。其中一些应用程序可能是使用旧模式或方法构建的。我们通常无法承担将它们重写为最新趋势，比如React
    Native。如果它们经过了实战测试，我们为什么还要费心呢？因此，如果我们决定新趋势会给我们带来足够的好处，我们将需要找到一种方法来连接两个世界，以便切换到它的新功能。
- en: 'Imagine a function that expects you to pass two parameters, but you would like
    to pass one, and then the other later on:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个函数，它希望你传递两个参数，但你想先传一个，然后再传另一个：
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This is tricky if you don''t want to modify the function. However, we could
    write a `util` function that would do this for us:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想修改函数，这可能有些棘手。但是，我们可以编写一个`util`函数来为我们做这件事：
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Awesome. But why bother to write a helper in every such case? It''s time to
    introduce `curry`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。但为什么要在每种情况下都写一个辅助函数呢？是时候介绍`curry`了：
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: That's it. We made it behave just like we wanted, and we didn't even change
    a single line in the brownfield app function (`oldFunc` or `notCurriedFunc`).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们使它的行为就像我们想要的那样，并且甚至没有改变布朗场应用程序函数（`oldFunc`或`notCurriedFunc`）中的一行代码。
- en: If there are only one or two places in your app where you would use `curry`,
    think twice. Will there be more use cases in the future? If not, it is probably
    overkill to use it. Use the helper arrow functions, as shown previously.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序中只有一两个地方需要使用`curry`，请三思。将来会有更多的用例吗？如果没有，那么使用它可能是过度的。使用辅助箭头函数，如前所示。
- en: Flipping
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 翻转
- en: 'It is nice that we can `curry` a function, but what if we wanted to pass arguments
    in a different sequence? For the change of the first two arguments, there is a
    handy function called `flip`, demonstrated here:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以`curry`一个函数，这很好，但如果我们想以不同的顺序传递参数怎么办？对于前两个参数的更改，有一个方便的函数叫做`flip`，在这里演示：
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If we needed to reverse all of the arguments, unfortunately there is no such
    function. But we can write it out nonetheless for our use case:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要颠倒所有参数，遗憾的是没有这样的函数。但是无论如何，我们可以为我们的用例编写它：
- en: '[PRE34]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we dived into the world of different patterns that are commonly
    found in modern JavaScript, such as iterators, generators, useful reduce use cases,
    selectors, and function composition.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了现代JavaScript中常见的不同模式，如迭代器、生成器、有用的reduce用例、选择器和函数组合。
- en: You have also learnt a handful of functions from the Ramda library. Ramda deserves
    much more attention than a few pages of simple use cases. Please have a look at
    it in your free time.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您还学习了Ramda库中的一些函数。 Ramda值得比几页简单用例更多的关注。请在空闲时间查看它。
- en: In the next chapter, we will use what we have learned here to look at functional
    programming and its benefits.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将运用在这里学到的知识来探讨函数式编程及其好处。
- en: Further reading
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Iterators and generators article in the Mozilla guide:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mozilla指南中的迭代器和生成器文章：
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)'
- en: 'Reselect documentation FAQ:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reselect文档常见问题解答：
- en: '[https://github.com/reduxjs/reselect#faq](https://github.com/reduxjs/reselect#faq).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/reduxjs/reselect#faq](https://github.com/reduxjs/reselect#faq).'
- en: 'Old-school design patterns that are not only used in JavaScript:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不仅在JavaScript中使用的老式设计模式：
- en: '[https://medium.com/@tkssharma/js-design-patterns-quick-look-fbc9ebfaf9aa](https://medium.com/@tkssharma/js-design-patterns-quick-look-fbc9ebfaf9aa).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://medium.com/@tkssharma/js-design-patterns-quick-look-fbc9ebfaf9aa](https://medium.com/@tkssharma/js-design-patterns-quick-look-fbc9ebfaf9aa).'
- en: 'TC39 proposal for asynchronous iterators for JavaScript:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript的异步迭代器的TC39提案：
- en: '[https://github.com/tc39/proposal-async-iteration](https://github.com/tc39/proposal-async-iteration).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/tc39/proposal-async-iteration](https://github.com/tc39/proposal-async-iteration).'
