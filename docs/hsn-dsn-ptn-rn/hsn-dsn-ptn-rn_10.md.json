["```jsx\nexport default class Singleton {\n    static instance;    constructor() {\n        if (Singleton.instance) {\n            return Singleton.instance;\n  }\n\n        this.instance = this;\n  }\n}\n```", "```jsx\nexport default class Singleton {\n    static instance;    constructor() {\n        if (Singleton.instance) {\n            return Singleton.instance;\n  }\n\n        this.name = 'DEFAULT_NAME';\n  this.instance = this;\n  }\n\n    getName() {\n        return this.name;\n  }\n\n    setName(name) {\n        this.name = name;\n  }\n}\n```", "```jsx\nclass Singleton {\n    static instance;\n  constructor() {\n        if (Singleton.instance) {\n            return Singleton.instance;\n  }\n   this.instance = this;\n  }\n}\n\nexport default new Singleton();\n```", "```jsx\nexport default {\n    apiRoot: API_URL,\n    fetchData() {\n        // ...\n    },\n};\n```", "```jsx\n// ./apiSingleton.js\nexport const apiRoot = API_URL;\nexport const fetchData = () => {\n    // ...\n}\n\n// Then import as shown below\nimport * as API from './apiSingleton'\n```", "```jsx\nimport AddTaskContainer from '../path/to/AddTaskContainer'; import TaskListContainer from '../path/to/TaskListContainer';   export const TasksSection = () => (\n    <View>\n <AddTaskContainer /> <TaskListContainer /> </View> ); \n```", "```jsx\nexport const TasksSection = ({\n    AddTaskContainer,\n    TaskListContainer\n}) => (\n    <View>\n <AddTaskContainer /> <TaskListContainer /> </View> );\n```", "```jsx\n// src/Chapter_10/Example_1/src/features/tasks/stories/story.js\n\nstoriesOf('TaskList', module)\n    .addDecorator(getStory => (  <ScrollView style={generalStyles.content}>{getStory()}</ScrollView>   ))\n    .add('with one task', () => (\n        <TaskList\n  tasks={Immutable.List([exampleData.tasks[0]])}\n            hasError={false}\n            isLoading={false}\n        />\n  ))\n    .add('with 7 tasks', () => (\n        <TaskList\n  tasks={Immutable.List(exampleData.tasks)}\n            hasError={false}\n            isLoading={false}\n        />\n    ));\n```", "```jsx\nInvariant Violation: withNavigation can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.\n - Runtime error in application\n```", "```jsx\n// src/ Chapter_10/ Example_1/ src/ components/ NavigateButton.js\n\nexport default withNavigation(NavigateButton);\n```", "```jsx\n// src/ Chapter_10/ Example_1/ src/ features/ tasks/ stories/ story.js\nstoriesOf('TaskList', module)\n    .addDecorator(getStory => (\n        <**NavigationProvider**\n  value={{\n                navigate: action('navigate')\n            }}\n        >\n <ScrollView style={generalStyles.content}>{getStory()}</ScrollView>\n </**NavigationProvider**>  ))\n    .add('with one task', () => (\n        // ...   ))\n    .add('with 7 tasks', () => (\n        // ...   ));\n```", "```jsx\n// src/Chapter_10/Example_1/src/features/tasks/views/TaskList.js\n\nconst TaskList = ({\n    tasks, isLoading, hasError, errorMsg, NavButton\n}) => (\n    <View style={styles.taskList}>\n        // ...  <View style={styles.taskActions}>\n <**NavButton**  data={{ taskId: task.id }}\n                        to=\"Task\"\n  text=\"Details\"\n  />\n </View>\n        // ...\n    </View> ); \n```", "```jsx\n// src/Chapter_10/Example_1/src/features/tasks/containers/TaskList.js\nimport NavButton from '../../../components/NavigateButton';    const mapStateToProps = state => ({\n    // ...   NavButton\n});   const TasksContainer = connect(mapStateToProps)(fetchTasks(TaskListView));\n```", "```jsx\n// src/Chapter_10/Example_1/src/components/NavigateButton/index.js\n\n// container for NavButtonView\n\nimport { withNavigation } from 'react-navigation'; import NavButtonView from './view';   export default withNavigation(NavButtonView); \n```", "```jsx\n// src/Chapter_10/Example_1/src/components/NavigateButton/story.js\n\nimport {\n    withBackText,\n  withDetailsText,\n  withEmojisText } from './examples';\n// ... \nstoriesOf('**NavButton**', module)\n    .addDecorator(scrollViewDecorator)\n    .add('with details text', withDetailsText)\n    .add('with back text', withBackText)\n    .add('with emojis text', withEmojisText); \n// src/Chapter_10/Example_1/src/components/NavigateButton/examples.js\n// ...\nexport const withDetailsText = () => (\n    <NavButton\n  navigation={{ navigate: () => action('navigate') }}\n        text=\"Details\"\n  to=\"\"\n  data={{}}\n    /> );\n```", "```jsx\n// src/Chapter_10/Example_2/src/features/tasks/stories/story.js\n\nimport NavButtonExample from '../../../components/NavigateButton/examples';   storiesOf('TaskList', module)\n    .addDecorator(scrollViewDecorator)\n    .add('with one task', () => (\n        <TaskList\n  tasks={Immutable.List([exampleData.tasks[0]])}\n            hasError={false}\n            isLoading={false}\n            NavButton={NavButtonExample}\n        />\n  ))\n    // ... rest of the TaskList stories\n```", "```jsx\n// src/ Chapter_10/ Example_2/ src/ utils/ scrollViewDecorator.js\n\nconst scrollViewDecorator = getStory => (\n    <ScrollView style={generalStyles.content}>{getStory()}</ScrollView> ); \n```", "```jsx\n// src/ Chapter_10/ Example_3/ src/ features/ language/ context.js\nimport { createContext } from 'react'; import { LANG_ENGLISH } from './constants';  // First function argument represents default value const { Provider, Consumer } = createContext(LANG_ENGLISH);   export const LanguageProvider = Provider; export const LanguageConsumer = Consumer;\n```", "```jsx\nsrc/Chapter_10/Example_3/src/features/language/hocs/withLanguageProvider.js\n\nconst withLanguageProvider = WrappedComponent => connect(state => ({\n    language: languageSelector(state)\n}))(({ language, ...otherProps }) => (\n    <LanguageProvider value={language}**>**\n <WrappedComponent {...otherProps} />\n **</LanguageProvider>** ));   export default withLanguageProvider;\n```", "```jsx\nwithStoreProvider(withLanguageProvider(createDrawerNavigator({\n    Home: TabNavigation,\n  Profile: ProfileScreen,\n  Settings: SettingsScreen\n})));\n```", "```jsx\n// src/Chapter_10/Example_3/src/features/tasks/views/TaskList.js\n// ...\n\n**<LanguageConsumer>**\n  {language => (\n        <Text style={styles.selectedLanguage}>\n  Selected language: {language}\n        </Text>\n  )}\n</LanguageConsumer>\n```", "```jsx\nimport { Provider } from 'react-redux';\n// ... <**Provider** store={store}>\n <WrappedComponent {...props} /> </**Provider**>\n```", "```jsx\nclass Provider extends Component {\n    getChildContext() {\n        return { [storeKey]: this[storeKey], [subscriptionKey]: null }\n    }\n\n    constructor(props, context) {\n        super(props, context)\n        this[storeKey] = props.store**;**\n  }\n\n    render() {\n        return Children.only(this.props.children)\n    }\n}\n\n// Full implementation available in react-redux source files\n// https://github.com/reduxjs/react-redux/blob/73691e5a8d016ef9490bb20feae8671f3b8f32eb/src/components/Provider.js\n```"]