["```jsx\nexport default () => <Text style={{marginTop: 30}}>Example Text!</Text>\n```", "```jsx\nexport default function() {\n    return React.createElement(\n        Text,\n  {style: {marginTop: 30}},\n  'Example Text!'\n  ); }\n```", "```jsx\n// good\n<Button onPress={handlePress} />\n\n// bad\n<Button onPress={handlePress}></Button> \n```", "```jsx\n// bad\nfunction HelloComponent(props) {   if (isSomeCondition) {\nreturn <p>Hello!</p>;   }\nreturn null;  }\n\n// bad\nconst HelloComponent = () => {\n  return isSomeCondition ? <p>Hello!</p> : null\n};\n\n// ok (probably it will require some logic before return)\nconst HelloComponent = () => { return isSomeCondition && <p>Hello!</p> };\n\n// almost good (isSomeCondition can be passed using props)\nconst HelloComponent = () => isSomeCondition && <p>Hello!</p>;\n\n// best: use above solution but within encapsulating component\n// this way HelloComponent is not tightly tied to isSomeCondition\n\nconst HelloComponent = () => <p>Hello!</p>;\nconst SomeComponent = () => (\n    // <== here some component JSX ...\n   isSomeCondition && <HelloComponent />\n    // <== the rest of encapsulating component markup here\n);\n```", "```jsx\nconst SomeComponent = (props) => (\n<View>\n <Text>{props.isLoggedIn ? 'Log In' : 'Log Out'}</Text>\n </View> );\n```", "```jsx\nconst SomeComponent = ({ isLoggedIn, ...otherProps }) => (\n<View>\n <Text>{isLoggedIn ? 'Log In' : 'Log Out'}</Text>\n </View> );\n```", "```jsx\n// recommended const OtherComponent = () => (\n    <SomeComponent isLoggedIn />\n);\n\n// not recommended\nconst OtherComponent = () => (\n    <SomeComponent isLoggedIn={true} />\n);\n```", "```jsx\nconst SomeButton = ({ type , ...other }) => {\nconst className = type === \"blue\" ? \"BlueButton\" : \"GrayButton\";\n  return <button className={className} {...other} />; }; \n```", "```jsx\n// bad\nsomeSection.js\n// good\nSomeSection.js or SomeSection.jsx\n// Current Airbnb style guide recommends .jsx extension though.\n```", "```jsx\n// bad\nimport App from './App/App';\n\n// bad\nimport App from './App/index';\n\n// good\nimport App from './App';\n```", "```jsx\n// Excerpt from\n// https://github.com/airbnb/javascript/tree/master/react#naming\n// bad\nexport default function withFoo(WrappedComponent) {\n return function WithFoo(props) {\n return <WrappedComponent {...props} foo />;\n  }\n}\n\n// good\nexport default function withFoo(WrappedComponent) {\n  function WithFoo(props) {\n return <WrappedComponent {...props} foo />;\n  }\n\n  const wrappedComponentName = WrappedComponent.displayName\n || WrappedComponent.name\n || 'Component';\n\n  WithFoo.displayName = `withFoo(${wrappedComponentName})`;\n return WithFoo;\n}\n```", "```jsx\nimport PropTypes from 'prop-types';\n\n// ...  HelloBox.propTypes = {\n isExpanded: PropTypes.bool.isRequired,\n  expandOrCollapse: PropTypes.func.isRequired,\n  containerStyles: PropTypes.object,\n  expandedTextStyles: PropTypes.object }; \n```", "```jsx\nHelloBox.defaultProps = {\n    containerStyles: styles.container,\n  expandedTextStyles: styles.text }; \n```", "```jsx\nWarning: Failed prop type: Invalid prop `containerStyles` of type `number` supplied to `HelloBox`, expected `object`.\n```", "```jsx\nstyles.container\n```", "```jsx\nHelloBox.propTypes = {\n    isExpanded: PropTypes.bool.isRequired,\n  expandOrCollapse: PropTypes.func.isRequired,\n  containerStyles: PropTypes.oneOfType([\n PropTypes.object,\n        PropTypes.number\n ])**,**\n  expandedTextStyles: PropTypes.oneOfType([\n PropTypes.object,\n        PropTypes.number\n ])\n};\n```", "```jsx\nexport const HelloBox = ({\n    isExpanded,\n  expandOrCollapse,\n  containerStyles,\n  expandedTextStyles\n}) => (\n    <View style={containerStyles}>\n <HelloText onPress={() => expandOrCollapse()}>...</HelloText>\n <HelloText onPress={() => expandOrCollapse()}>...</HelloText>\n  {\n            isExpanded &&\n            <HelloText style={expandedTextStyles}>\n                ...\n            </HelloText>\n  }\n    </View> );\n```", "```jsx\n// Chapter 2 / Example 3 / src / TaskList.js\nexport const TaskList = ({tasks, containerStyles}) => (\n    <View style={containerStyles}>\n  {tasks.map(task => // problems if task list is huge\n            <ExpandableTask\n  key={task.name + task.description}\n                name={task.name}\n                description={task.description}\n            />\n  )}\n    </View> );\n```", "```jsx\n// Chapter 2 / Example 4 / src / TaskList.js import React from 'react'; import Task from './Task'; import PropTypes from 'prop-types'; import {StyleSheet, Text, ScrollView, View} from 'react-native'; import makeExpandable from './makeExpandable';   const ExpandableTask = makeExpandable(Task);   export const TaskList = ({tasks, containerStyles}) => (\n     <**ScrollView** contentContainerStyle={containerStyles}>\n  {tasks.map(task =>\n             <ExpandableTask key={task.name + task.description}\n                name={task.name}\n                description={task.description}\n             />\n  )}\n </**ScrollView**> );   const styles = StyleSheet.create({\n container: {\n backgroundColor: '#fff'     }\n});   TaskList.propTypes = {\n tasks: PropTypes.arrayOf(PropTypes.shape({\n name: PropTypes.string.isRequired,\n description: PropTypes.string.isRequired\n  })),\n  containerStyles: PropTypes.oneOfType([\n         PropTypes.object,\n  PropTypes.number\n     ])\n};   TaskList.defaultProps = {\n tasks: [],\n containerStyles: styles.container };   export default TaskList;  \n```", "```jsx\n// Chapter 2_View patterns/ Example 5/src /Task.js // ...\n**<Image** // styles just to make it smaller in the example  style={{width: 100, height: 100}}\n source={require(\"./**react.png**\")}\n**/>**\n// ... \n```", "```jsx\n// Chapter 2 / Example 6 / src / TextInputExample.js\nexport default class TextInputExample extends React.Component {\n    state = {\n        name: null\n  };    render = () => (\n        <View style={styles.container}>\n  {this.state.name && (\n                <Text style={styles.text}>\n  Hello {this.state.name}\n                </Text>\n  )}\n            <Text>Hands-On Design Patterns with React Native</Text>\n <Text>Chapter 2: View Patterns</Text>\n <Text style={styles.text}>\n  Enter your name below and see what happens.\n            </Text>\n <TextInput  style={styles.input}\n onChangeText={name => this.setState({name})}\n            **/>**\n </View>  ); }\n// ... styles skipped for clarity in a book, check source files.\n```", "```jsx\n// Chapter 2 / Example 7 / src / LikeCounter.js\nclass LikeCounter extends React.Component {\n    state = {\n        likeCount: 0\n  }\n    // like/unlike function to increase/decrease like count in state\n    like = () => this.setState({likeCount: this.state.likeCount + 1})\n    unlike = () => this.setState({likeCount: this.state.likeCount - 1})\n\n    render = () => (\n        <View style={styles.container}>\n <Button  onPress={this.unlike}\n                title=\"Unlike\"\n  />\n <Text style={styles.text}>{this.state.likeCount}</Text>\n <Button  onPress={this.like}\n                title=\"Like\"\n  />\n </View>  ); }\n// Styles omitted for clarity\n```", "```jsx\nclass LikeCounter extends React.Component {\n    state = {\n        likeCount: 0\n  }\n    like = () => this.setState({likeCount: this.state.likeCount + 1})\n    unlike = () => this.setState({likeCount: this.state.likeCount - 1})\n\n    render = () => (\n        <View style={styles.container}>\n <TouchableOpacity  style={styles.button}\n onPress={this.unlike}\n            **>**\n <Text>Unlike</Text>\n **</TouchableOpacity>** <Text style={styles.text}>{this.state.likeCount}</Text>\n <TouchableOpacity  style={styles.button}\n onPress={this.like}\n            **>**\n <Text>Like</Text>\n **</TouchableOpacity>** </View>  ); }\n```", "```jsx\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n  paddingTop: 20,\n  paddingLeft: 20\n  },   button: {\n alignItems: 'center', // horizontally centered\n  justifyContent: 'center', // vertically centered\n  backgroundColor: '#DDDDDD',\n  padding: 20\n  }**,**\n  text: {\n        fontSize: 45\n  }\n}); \n```", "```jsx\n// Chapter 2_ View patterns/Example 6/src/TextInputExample.js\n\nexport default class TextInputExample extends React.Component {\n    state = {\n name: null\n  }**;**    render = () => (\n        <View style={styles.container}>\n  {this.state.name && (\n                <Text style={styles.text}>\n  Hello {this.state.name}\n                </Text>\n  )}  ...  <TextInput  style={styles.input}\n                onChangeText={name => this.setState({name})}\n            />\n </View>  ); }\n```", "```jsx\n// Chapter 2 / Example 9 / src / LoginForm.js\n\nexport default class LoginForm extends React.Component {\n    // Initial state for our components\n  state = {\n        login: this.props.initLogin || '', // remembered login or ''\n  password: ''\n  };\n  // Submit handler when the Login button is pressed\n  submit = () => {\n        console.log(this.state.login);\n  console.log(this.state.password);\n  };    render() {\n        return (\n            <View style={styles.container}>\n <View> <TextInput  style={styles.input}\n                        placeholder={'Login'}\n                        onChangeText={login => this.setState({login})}\n                    />\n </View> <View> <TextInput  style={styles.input}\n                        placeholder={'Password'}\n                        onChangeText={\n                            password => this.setState({password})\n                        }\n                        secureTextEntry={true} // hide password\n  />\n </View> <View> <Button  onPress={this.submit}\n                        title=\"Login\"\n  />\n </View> </View>  );\n  }\n}\n```", "```jsx\n// Chapter 2 / Example 10 / App.js\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);    this.inputRef = React.createRef()**;**\n  }\n\n    render = () => (\n        <TextInput style={{height:50}} ref={ref => this.inputRef = ref} **/>**\n  );    componentDidMount() {\n        this.inputRef.focus()**;**\n  }\n}\n```", "```jsx\ntry {\n    // helloWorld function can potentially throw error\n    helloWorld(); } catch (error) {\n    // If helloWorld throws error\n    // we catch it and handle gracefully\n    // ... }\n```", "```jsx\nclass AppErrorBoundary extends React.Component {\n    state = { hasError: false };    componentDidCatch() {\n        this.setState({ hasError: true });\n  }\n\n    render = () => (\n        this.state.hasError\n  ? <Text>Something went wrong.</Text>\n  : this.props.children\n  )\n}\n\nexport default () => (\n    <AppErrorBoundary>  <LoginForm /> </AppErrorBoundary**>** )\n```", "```jsx\n// Chapter 2_View patterns/Example 11/ App.js\n...\n**componentDidCatch**(error) {\n    this.setState({\n        hasError: true,\n  errorMsg: error\n    }); }\n\nrender = () => (\n    this.state.hasError\n  ? (\n            <View>\n <Text>Something went wrong.</Text>\n <Text>{this.state.errorMsg.toString()}**</Text>**\n </View>  )\n        : this.props.children )\n...\n```", "```jsx\n...\n    <AppErrorBoundary>  <LikeCounter /> </AppErrorBoundary**>** <AppErrorBoundary>  <LikeCounter /> </AppErrorBoundary**>** **...** \n```", "```jsx\n...\n    <AppErrorBoundary>  <LikeCounter /> <LikeCounter /> </AppErrorBoundary**>** **...**\n```", "```jsx\n// Chapter 2_View patterns/Example 12/App.js\n...\nimport createReactClass from **'create-react-class'**;\n\nconst LoggerMixin = {\n    componentDidMount: function() { // uses lifecycle method to log\n        console.log('Component has been rendered successfully!');\n  }\n};   export default createReactClass({\n    mixins: [LoggerMixin]**,**   render: function() {\n        return (\n            <View>\n <Text>Some text in a component with mixin.</Text>\n </View>  );\n  }\n});\n```", "```jsx\n...\nmixins: [LoggerMixin, LoggerMixin2],\n...\n```", "```jsx\n// Chapter 2_View patterns/ Example 13/ App.js\nconst withLogger = (ComponentToEnrich, logText) =>\n    class WithLogger extends React.Component {\n        componentDidMount = () => console.log(\n            logText || 'Component has been rendered successfully!'\n  );    render = () => <ComponentToEnrich {...this.props} />;\n  };   const App = () => (\n    <View style={styles.container}>\n <Text>Some text in a component with mixin.</Text>\n </View> );   export default withLogger(withLogger(App), 'Some other log msg');\n```", "```jsx\nyarn add --dev eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y babel-eslint\n```", "```jsx\n\"scripts\": {\n...\n \"lint\": \"./node_modules/eslint/bin/eslint.js src\"\n...\n}\n```", "```jsx\n./node_modules/eslint/bin/eslint.js --init\n```", "```jsx\nHow would you like to configure ESLint? Use a popular style guide\nWhich style guide do you want to follow? Airbnb\nDo you use React? Yes\nWhat format do you want your config file to be in? JSON\n```", "```jsx\n{\n  \"rules\": {\n    \"react/jsx-filename-extension\": [1, { \"extensions\": [\".js\"] }],\n  \"comma-dangle\": [\"error\", \"never\"],\n    \"no-use-before-define\": [\"error\", { \"variables\": false }],\n  \"indent\": [\"error\", 4],\n  \"react/jsx-indent\": [\"error\", 4],\n    \"react/jsx-indent-props\": [\"error\", 4]\n  },\n  \"parser\": \"babel-eslint\", // usage with babel transpiler\n  \"extends\": \"airbnb\" }\n```", "```jsx\nyarn run lint \n```", "```jsx\n// My preference\nconst hero = {\n  firstName: 'Dana',\n  lastName: 'Scully'\n};\n\nconst heroes = [\n  'Batman',\n  'Superman'\n];\n\n// Airbnb style guide\nconst hero = {\n  firstName: 'Dana',\n  lastName: 'Scully',\n};\n\nconst heroes = [\n  'Batman',\n  'Superman',\n];\n```", "```jsx\n$ yarn run lint\nyarn run v1.5.1 $ ./node_modules/eslint/bin/eslint.js src\n\n/Users/mateuszgrzesiukiewicz/Work/reactnativebook/src/Chapter 2: View patterns/Example 14: Linter/src/LoginForm.js\n2:8 error    A space is required after '{' object-curly-spacing\n2:44 error    A space is required before '}' object-curly-spacing\n7:27 error    'initLogin' is missing in props validation    react/prop-types\n12:9 warning  Unexpected console statement                  no-console\n13:9 warning  Unexpected console statement                  no-console\n22:37 error    Curly braces are unnecessary here             react/jsx-curly-brace-presence\n23:62 error    A space is required after '{' object-curly-spacing\n23:68 error    A space is required before '}' object-curly-spacing\n29:37 error    Curly braces are unnecessary here             react/jsx-curly-brace-presence\n31:55 error    A space is required after '{' object-curly-spacing\n31:64 error    A space is required before '}' object-curly-spacing\n33:25 error    Value must be omitted for boolean attributes  react/jsx-boolean-value\n49:20 error    Unexpected trailing comma                     comma-dangle\n\n 13 problems (11 errors, 2 warnings)\n10 errors, 0 warnings potentially fixable with the `--fix` option.\n```", "```jsx\n$ yarn run lint -- --fix\n```", "```jsx\n7:27 error 'initLogin' is missing in props validation react/prop-types\n12:9 warning Unexpected console statement no-console\n13:9 warning Unexpected console statement no-console\n```", "```jsx\nLoginForm.propTypes = {\n    initLogin: PropTypes.string\n};\n```", "```jsx\nerror: propType \"initLogin\" is not required, but has no corresponding defaultProp declaration react/require-default-props\n```", "```jsx\nLoginForm.defaultProps = {\n    initLogin: '' };\n```", "```jsx\nerror 'prop-types' should be listed in the project's dependencies. Run 'npm i -S prop-types' to add it import/no-extraneous-dependencies\n```", "```jsx\nyarn add prop-types\n```"]