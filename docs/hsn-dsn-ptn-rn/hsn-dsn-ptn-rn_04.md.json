["```jsx\nyarn add flux immutable\n```", "```jsx\n// src / Chapter 4_ Flux patterns / Example 1 / src / data / AppDispatcher.js\nimport { Dispatcher } from 'flux';   export default new Dispatcher(); \n```", "```jsx\n// src / Chapter 4_ Flux patterns / Example 1 / src / data / TasksActionTypes.js\n**const** ActionTypes = {\n ADD_TASK: 'ADD_TASK' }**;**   export default ActionTypes; \n```", "```jsx\n// src / Chapter 4_ Flux patterns / Example 1 / src / data / TaskActions.js\nimport TasksActionTypes from './TasksActionTypes'; import AppDispatcher from './AppDispatcher';   const Actions = {\n    addTask(task) {\n AppDispatcher.dispatch({\n type: TasksActionTypes.ADD_TASK,\n  task\n });\n  }\n};   export default Actions; \n```", "```jsx\n// src / Chapter 4_ Flux patterns / Example 1 / src / data / TaskStore.js\nimport Immutable from 'immutable'; import { ReduceStore } from 'flux/utils'; import TasksActionTypes from './TasksActionTypes'; import AppDispatcher from './AppDispatcher';   class TaskStore extends ReduceStore {\n    constructor() {\n        super(AppDispatcher)**;**\n  }\n\n    getInitialState() {\n        return Immutable.List([]);\n  }\n\n    reduce(state, action) {\n switch (action.type) {\n case TasksActionTypes.ADD_TASK:\n return state; // <= placeholder, to be replaced!!!   default:\n return state;\n  }\n }\n}\n\nexport default new TaskStore(); \n```", "```jsx\nreduce(state, action) {\n    switch (action.type) {\n    case TasksActionTypes.ADD_TASK:\n        if (!action.task.name) {\n            return state;\n  }\n        return state.push({\n            name: action.task.name,\n  description: action.task.description,\n  likes: 0\n  });\n  default:\n        return state;\n  }\n}\n```", "```jsx\n// src / Chapter 4 / Example 1 / src / App.js\nimport { Container } from 'flux/utils'; import TaskStore from './data/TaskStore'; import AppView from './views/AppView';   const getStores = () => [TaskStore]; const getState = () => ({ tasks: TaskStore.getState() })**;**   export default Container.createFunctional(AppView, getStores, getState);\n```", "```jsx\n// src / Chapter 4_ Flux patterns / Example 1 / src / data / TaskStore.js\nimport data from './tasks.json';\n\nclass TaskStore extends ReduceStore {\n// ...\n    getInitialState() {\n return Immutable.List([...data.tasks]);\n  }\n// ...\n```", "```jsx\n// src / Chapter 4_ Flux patterns / Example 1 / src / views / AddTaskForm.js\n\nexport const INITIAL_ADD_TASK_FORM_STATE = {\n    name: '',\n  description: '' };   class AddTaskForm extends React.Component {\n    constructor(props) {\n        super(props);\n  this.handleSubmit.bind(this);\n  }\n\n    state = INITIAL_ADD_TASK_FORM_STATE**;**    handleSubmit = () => {\n TaskActions.addTask({\n name: this.state.name,\n  description: this.state.description\n  });\n  this.setState(INITIAL_ADD_TASK_FORM_STATE);\n  }**;**    render = () => (\n        <View style={styles.container}>\n <**TextInput**  style={styles.input}\n                placeholder=\"Name\"\n  onChangeText={name => this.setState({ name })}\n                value={this.state.name}\n            />\n <**TextInput**  style={styles.input}\n                placeholder=\"Description\"\n  onChangeText={d => this.setState({ description: d })}\n                value={this.state.description}\n            />\n <**Button**  title=\"Add task\"\n  onPress={() => this.handleSubmit()}\n            />\n </View>  ); }\n\n// ... styles\n```"]