["```jsx\nyarn add redux react-redux\n```", "```jsx\n// Chapter 5 / Example 1 / src / flux / AppActionTypes.js\n\nconst ActionTypes = {\n    INC_COUNTER: 'INC_COUNTER',\n  DEC_COUNTER: 'DEC_COUNTER' };   export default ActionTypes; \n```", "```jsx\n// Chapter 5 / Example 1 / src / flux / AppStore.js\n\nimport { combineReducers, createStore } from 'redux'; import counterReducer from '../reducers/counterReducer';   const rootReducer = combineReducers({\n    count: counterReducer            // reducer created later on });   const store = createStore(rootReducer);   export default store; \n```", "```jsx\n// Chapter 5 / Example 1 / src / reducers / counterReducer.js\n\nimport types from '../flux/AppActionTypes';   const counterReducer = (state = 0, action) => {\n    switch (action.type) {\n    case types.INC_COUNTER:\n        return state + 1;\n  case types.DEC_COUNTER:\n        return state - 1;\n  default:\n        return state;\n  }\n};   export default counterReducer; \n```", "```jsx\n// Chapter 5 / Example 1 / src / flux / AppDispatcher.js\nimport store from './AppStore';   export default store.dispatch;  \n```", "```jsx\n// Chapter 5 / Example 1 / src / views / CounterView.js\n\nconst CounterView = ({ inc, dec, count }) => (\n    <View style={styles.panel}>\n <Button title=\"-\" onPress={dec} />\n <Text>{count}</Text>\n <Button title=\"+\" onPress={inc} />\n </View> );   const styles = StyleSheet.create({\n    panel: {\n        // Check chapter 3: \"Style patterns\" to learn more on styling\n        flex: 1,\n  marginTop: 40,\n  flexDirection: 'row'\n  }, });   export default CounterView;\n```", "```jsx\n// Chapter 5 / Example 1 / src / Counter.js const increaseAction = () => dispatch({ type: types.INC_COUNTER }); const decreaseAction = () => dispatch({ type: types.DEC_COUNTER });\n```", "```jsx\n// Chapter 5 / Example 1 / src / Counter.js\n... import { Provider, connect } from 'react-redux'; ...    const mapStateToProps = state => ({\n    count: state.count,\n  inc: increaseAction,\n  dec: decreaseAction });   const CounterContainer = connect(mapStateToProps)(CounterView);   const CounterApp = () => (\n    <Provider store={store}><CounterContainer /></Provider> );   export default CounterApp; \n```", "```jsx\nconst ActionTypes = {\n    ADD_TASK: 'ADD_TASK' };   export default ActionTypes;\n```", "```jsx\n// Chapter 5 / Example 2 / src / data / AppStore.js  const rootReducer = combineReducers({ tasks: taskReducer}); const store = createStore(rootReducer); export default store;\n```", "```jsx\n// Chapter 5 / Example 2 / src / data / AppDispatcher.js import store from './AppStore';  export default store;\n// ATTENTION: To stay consistent with Flux API\n// and previous implementation, I return store.\n// Store contains dispatch function that is expected. \n```", "```jsx\n// Chapter 5 / Example 2 / src / reducers / taskReducer.js\n...\nimport data from '../data/tasks.json';\n\nconst taskReducer = (state = Immutable.List([...data.tasks]), action) => {\n    switch (action.type) {\n    case TasksActionTypes.ADD_TASK:\n        if (!action.task.name) {\n            return state;\n  }\n        return state.push({\n            name: action.task.name,\n  description: action.task.description,\n  likes: 0\n  });\n  default:\n        return state;\n  }\n};   export default taskReducer;\n```", "```jsx\n// Chapter 5 / Example 2 / src / App.js   const mapStateToProps = state => ({ tasks: state.tasks }); const AppContainer = connect(mapStateToProps)(AppView); const TasksApp = () => (\n    <Provider store={store}><AppContainer /></Provider> );   export default TasksApp; \n```", "```jsx\n// Chapter 5 / Example 3 / src / views / AddTaskForm.js\nclass AddTaskForm extends React.Component {\n    // ...\n    handleSubmit = () => {\n        if (this.props.taskForm.name) {\n            TaskActions.addTask({\n                name: this.props.taskForm.name,\n  description: this.props.taskForm.description\n  });\n  this.nameInput.clear();\n  this.descriptionInput.clear()**;**\n  }\n    };    render = () => (\n        <View style={styles.container}>\n <TextInput  style={styles.input}\n                placeholder=\"Name\"\n  ref={(input) => { this.nameInput = input; }}\n                onChangeText={\n name => TaskActions.taskFormChange({\n name,\n  description: this.props.taskForm.description\n  })\n }\n                value={this.props.taskForm.name}\n            />\n <TextInput  style={styles.input}\n                placeholder=\"Description\"\n  ref={(input) => { this.descriptionInput = input; }}\n onChangeText={\n desc => TaskActions.taskFormChange({\n name: this.props.taskForm.name,\n  description: desc\n })\n }\n value={this.props.taskForm.description}\n            />\n <Button  title=\"Add task\"\n  onPress={() => this.handleSubmit()}\n            />\n </View>  ); }\n```", "```jsx\n// Chapter 5 / Example 3 / src / reducers / taskFormReducer.js export const INITIAL_ADD_TASK_FORM_STATE = {\n    name: '',\n  description: '' };   const taskFormReducer = (\n    state = INITIAL_ADD_TASK_FORM_STATE,\n  action\n) => {\n    switch (action.type) {\n    case TasksActionTypes.TASK_FORM_CHANGE:\n        return action.newFormState;\n  default:\n        return state;\n  }\n};   export default taskFormReducer; \n```", "```jsx\n// Chapter 5 / Example 3 / src / data / TasksActionTypes.js\nconst ActionTypes = {\n    ADD_TASK: 'ADD_TASK',\n  TASK_FORM_CHANGE: 'TASK_FORM_CHANGE' };\n```", "```jsx\n// Chapter 5 / Example 3 / src / data / TaskActions.js\nconst Actions = {\n    // ...   taskFormChange(newFormState) {\n        AppDispatcher.dispatch({\n            type: TasksActionTypes.TASK_FORM_CHANGE,\n  newFormState\n        });\n  }\n};\n```", "```jsx\n// Chapter 5 / Example 3 / src / data / AppStore.js\nconst rootReducer = combineReducers({\n    tasks: taskReducer,\n  taskForm: taskFormReducer });\n```", "```jsx\n// Chapter 5 / Example 3 / src / App.js\nconst mapStateToProps = state => ({\n    tasks: state.tasks,\n  taskForm: state.taskForm }); \n```", "```jsx\n// Chapter 5 / Example 3 / src / views / AppView.js\nconst AppView = props => (\n        // ...  <AddTaskForm taskForm={props.taskForm} />\n // ...  );\n```", "```jsx\nyarn add mobx mobx-react\n```", "```jsx\n// Chapter 5 / Example 4 / src / data / TaskStore.js\nimport { configure, observable, action } from 'mobx'; import data from './tasks.json';   // don't allow state modifications outside actions configure({ enforceActions: true });   export class TaskStore {\n    @observable tasks = [...data.tasks]; // default state    @action addTask(task) {\n        this.tasks.push({\n            name: task.name,\n  description: task.description,\n  likes: 0\n  });\n  }\n}\n\nconst observableTaskStore = new TaskStore(); export default observableTaskStore; \n```", "```jsx\n// Chapter 5 / Example 4 / src / App.js\n// ... import { Provider as MobXProvider  } from 'mobx-react/native'; // ... const App = () => (\n    <MobXProvider store={TaskStore}>\n <AppView /> </MobXProvider> ); export default App; \n```", "```jsx\n// Chapter 5 / Example 4 / src / views / AppView.js\n\nimport { inject, observer } from 'mobx-react/native'; \n@inject('store') @observer class AppView extends React.Component {\n render = () => (\n     // ...\n     <AddTaskForm />  <TaskList tasks={this.props.store.tasks} />\n     // ...   ); }\n```", "```jsx\n// Chapter 5 / Example 4 / src / views / AddTaskForm.js\n// ...\n\n@inject('store') @observer class AddTaskForm extends React.Component {\n    // ...   handleSubmit = () => {\n        this.props.store.addTask({\n            name: this.state.name,\n  description: this.state.description\n  });\n // ...   };\n    // ...  }\n```", "```jsx\nAppView.wrappedComponent.propTypes = {\n    store: PropTypes.shape({\n        tasks: PropTypes.arrayOf(PropTypes.shape({\n            name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  likes: PropTypes.number.isRequired\n  })).isRequired\n    }).isRequired\n}; \n```", "```jsx\nAddTaskForm.wrappedComponent.propTypes = {\n    store: PropTypes.shape({\n        addTask: PropTypes.func.isRequired\n  }).isRequired\n};\n```", "```jsx\nimport { AsyncStorage } from 'react-native';  try { await AsyncStorage.setItem('@MyStore:key', 'value');\n} catch (error) { // Error saving data } \n```", "```jsx\ntry { const  value = await AsyncStorage.getItem('@MyStore:key'); } catch (error) { // Error retrieving data } \n```", "```jsx\nyarn add redux-persist redux-persist-transform-immutable\n```", "```jsx\n// Chapter 5 / Example 5 / src / data / AppStore.js\n// ... import { persistStore, persistReducer } from 'redux-persist';\nimport immutableTransform from 'redux-persist-transform-immutable'; import storage from 'redux-persist/lib/storage';   const persistConfig = {\n    transforms: [immutableTransform()],\n key: 'root',\n  storage }**;**   const rootReducer = combineReducers({\n    // ...  }); const persistedReducer = persistReducer(persistConfig, rootReducer)\nconst store = createStore(persistedReducer); export const persistor = persistStore(store)**;** export default store; \n```", "```jsx\n// Chapter 5 / Example 5 / src / App.js\nimport store, { persistor } from './data/AppStore'; // ... const TasksApp = () => (\n    <Provider store={store}>\n <PersistGate loading={null} persistor={persistor}>\n <AppContainer /> </PersistGate> </Provider> ); \n```"]