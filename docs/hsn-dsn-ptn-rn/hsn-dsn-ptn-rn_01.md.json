["```jsx\n// src/ Chapter 1/ Example 1_Hello World/ App.js\n\n**export default class** App extends React.Component {\n render() {\n return (\n        <View style={styles.container}>\n <Text>Hands-On Design Patterns with React Native</Text>\n <Text>Chapter 1: React Component Patterns</Text>\n <Text style={styles.text}>You are ready to start the journey. \n          Fun fact is, this text is rendered by class component called \n          App. Check App.js if you want to look it up.</Text>\n </View>  );\n  }\n}\n```", "```jsx\nconst App = () => (\n    <View style={styles.container}>  <Text>Hands-On Design Patterns with React Native</Text>  <Text>Chapter 1: React Component Patterns</Text>  <Text style={styles.text}>You are ready to start the journey. Fun \n      fact is, this text is rendered by Functional Component called \n      App. Check App.js if you want to look it up.</Text>  </View>  );\nexport default App;\n```", "```jsx\n// src/ Chapter 1/ Example_2_Functional_Components/ App.js\n\nexport default **function** App() {\n  return (\n      <View style={styles.container}>\n  ...\n      </View>\n  ); }\n```", "```jsx\n// src/ Chapter 1/ Example_3_Functional_Components_with_props/ App.js\n\nconst HelloText = ({children, ...otherProps}) => (\n    <Text {...otherProps}>{children}**</Text>** ); const App = () => (\n    <View style={styles.container}>\n <HelloText>  Hands-On Design Patterns with React Native\n        </HelloText>\n <HelloText>Chapter 1: React Component Patterns</HelloText>\n <HelloText style={styles.text}>\n  You are ready to start the journey. Fun fact is, this text\n            is rendered by Functional Component called HelloText.\n            Check App.js if you want to look it up.\n        </HelloText>\n </View> ); export default App;\n```", "```jsx\n// src/ Chapter 1/ Example_4_Stateful_expandable_component/ App.js export default class App extends React.Component {\n    constructor() {\n        super();\n  this.state = {\n            // default state on first render\n  expanded: **false**\n  }\n    }\n\n    expandOrCollapse() {\n        // toggle expanded: true becomes false, false becomes true\n  this.setState({expanded: !this.state.expanded})**;**\n  }\n\n    render = () => (\n        <View style={styles.container}>\n <HelloText onPress={() => this.expandOrCollapse()}>\n  Hands-On Design Patterns with React Native\n            </HelloText>\n <HelloText onPress={() => this.expandOrCollapse()}>\n  Chapter 1: React Component Patterns\n            </HelloText>\n  {\n                this.state.expanded &&\n                <HelloText style={styles.text}>\n  You can expand and collapse this text by clicking\n                    the Title or Chapter text. Bonus: Check Chapter 4\n                    to learn how to animate expanding andcollapsing.\n                </HelloText>\n  }\n        </View>\n  );\n}\n```", "```jsx\n// src/ Chapter 1/ Example 5_Task_list/ App.js export default class App extends React.Component {\n  constructor() {\n    super();\n    // Set the initial state, tasks is an array of strings\n  this.state = {\n tasks: ['123', '456']\n }\n  }\n\n  render = () => (\n      <View style={styles.container}>\n  {\n          this.state.tasks\n  .map((task, index) => (\n <Text key={index} style={styles.text}>{task}</Text>\n  ))\n        }\n      </View>\n  );\n}\n```", "```jsx\n// src/ Chapter 1/ Example_6_Component_composition_red_text/ App.js\n\nconst WarningText = ({style, ...otherProps}) => (\n    <**Text** style={[style, {color: 'orange'}]} {...otherProps} /> );   export default class App extends React.Component {\n    render = () => (\n        <**View** style={styles.container}>\n <**Text** style={styles.text}>Normal text</**Text**>\n <**WarningText** style={styles.text}>Warning</**WarningText**>\n </**View**>  ); }\n```", "```jsx\nconst AppLayout = ({Header, MainContent, Footer}) => (\n    // **These three props can be any component that we pass.**\n    // You can think of it as a function that\n    // can accept any kind of parameter passed to it.\n    <View style={styles.container}>\n        <View style={styles.layoutHeader}>{Header}</View>\n        <View style={styles.layoutContent}>{MainContent}</View>\n        <View style={styles.layoutFooter}>{Footer}</View>\n    </View>\n);\n```", "```jsx\nconst WelcomeHeader = () => <View><Text>Header</Text></View>;\nconst WelcomeContent = () => <View><Text>Content</Text></View>;\nconst WelcomeFooter = () => <View><Text>Footer</Text></View>;\n```", "```jsx\nconst WelcomeScreen = () => (\n    <AppLayout\n        Header={<WelcomeHeader />}\n MainContent={<WelcomeContent />}\n Footer={<WelcomeFooter />}\n    />\n);\n```", "```jsx\n// src/ Chapter 1/ Example_7_App_layout_and_Welcome_screen/ App.js\n\n// root component\nexport default class App extends React.Component {\n render = () => <WelcomeScreen />; }\n\n// styles\nconst styles = StyleSheet.create({\n container: {\n         flex: 1,\n  marginTop: 20\n    },\n layoutHeader: {\n width: '100%',\n height: 100,\n backgroundColor: 'powderblue'\n    },\n layoutContent: {\n flex: 1,\n width: '100%',\n backgroundColor: 'skyblue'\n    },\n layoutFooter: {\n width: '100%',\n height: 100,\n backgroundColor: 'steelblue'\n    }\n});\n```", "```jsx\nit('renders', () => {\n  const rendered = renderer.create(<App />).toJSON();\n  expect(rendered).toMatchSnapshot(); });\n```", "```jsx\nyarn test -- --coverage\n```", "```jsx\nFile |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s\nAll files|    66.67 |       50 |       50 |    66.67\nApp.js   |    66.67 |       50 |       50 |    66.67 | 18,23,26\n```", "```jsx\nconst HelloText = ({children, ...otherProps}) => (\n    <Text {...otherProps}>{children}</Text> ); \n```", "```jsx\n// src/ Chapter_1_React_component_patterns/\n// Example_9_Refactoring_to_presentational_component/ App.js\n// Text has been replaced with \"...\" to save space.\n\n**export const** HelloBox = ({ isExpanded, expandOrCollapse }) => (\n    <View style={styles.container}>\n <HelloText onPress={() => expandOrCollapse()}>...</HelloText>\n <HelloText onPress={() => expandOrCollapse()}>...</HelloText>\n  {\n            isExpanded &&\n            <HelloText style={styles.text}>...</HelloText>\n  }\n    </View> );\n```", "```jsx\nrender = () => (\n    **<HelloBox**\n  isExpanded={this.state.expanded}\n        expandOrCollapse={this.expandOrCollapse}\n    **/>** );\n```", "```jsx\nthis.expandOrCollapse = this.expandOrCollapse.bind(this); \n```", "```jsx\n// src/ Chapter_1/ Example_10_Decoupling_styles/ App.js\n\nexport const HelloBox = ({\n    isExpanded,\n  expandOrCollapse,\n  containerStyles,\n  expandedTextStyles\n}) => (\n    <View style={containerStyles || styles.container}>\n <HelloText onPress={() => expandOrCollapse()}>...</HelloText>\n <HelloText onPress={() => expandOrCollapse()}>...</HelloText>\n  {\n            isExpanded &&\n            <HelloText style={expandedTextStyles || styles.text}>\n                ...\n            </HelloText>\n  }\n    </View> );\n```", "```jsx\nrender = () => (\n    <HelloBox   isExpanded={this.state.expanded}\n        expandOrCollapse={this.expandOrCollapse}\n        expandedTextStyles={{ color: 'red' }}\n    /> );\n```", "```jsx\n// src/ Chapter_1/ Example_12_Higher_order_component_makeExpandable/ App.js\n const makeExpandable = (ComponentToEnrich) => (\n    class HelloBoxContainer extends React.Component {\n        constructor() {\n            super();\n  this.state = {\n                // default state on first render\n  expanded: false\n  };\n  this.expandOrCollapse = this.expandOrCollapse.bind(this);\n  }\n\n        expandOrCollapse() {\n            // toggle expanded: true becomes false, false becomes true\n  this.setState({expanded: !this.state.expanded});\n  }\n\n        render = () => (\n            <**ComponentToEnrich**\n  isExpanded={this.state.expanded}\n                expandOrCollapse={this.expandOrCollapse}\n            />\n  );\n  }\n);\n```", "```jsx\nexport default makeExpandable(HelloBox);\n```", "```jsx\nbox: {\n    width: 100,\n  height: 100,\n  backgroundColor: 'powderblue', }\n```", "```jsx\n// src/ Chapter_1/\n// Example_13_Higher_order_component_show_hide_button/ App.js\n\nexport const SomeSection = ({\n    isExpanded,\n  expandOrCollapse,\n  containerStyles,\n  boxStyle\n}) => (\n    <View style={containerStyles || styles.container}>\n <Button\n            onPress={expandOrCollapse}\n title={isExpanded ? \"Hide\" : \"Show\"}\n color=\"#841584\"\n        />\n        {isExpanded && <View style={boxStyle || styles.box} />}\n    </View> );\n\nexport default makeExpandable(SomeSection);\n```", "```jsx\nexport const SomeSection = ({\n    showHideBox,\n  isVisible,\n  containerStyles,\n  boxStyle\n}) => {...};\n```", "```jsx\n// src/ Chapter_1/ Example_14_Flexible_prop_names_in_HOC/ App.js\nrender = () => {\n  const props = {\n    [propNames && propNames.isExpanded || 'isExpanded']: this.state.expanded,\n  [propNames && propNames.expandOrCollapse || 'expandOrCollapse']: this.expandOrCollapse\n  };\n  return <ComponentToEnrich {...props} /> }; \n```", "```jsx\nconst makeExpandable = (ComponentToEnrich, propNames) => (\n    ...\n)\n```", "```jsx\nexport default makeExpandable(SomeSection, {\n    isExpanded: 'isVisible',\n  expandOrCollapse: **'showHideBox'** }); \n```", "```jsx\nmakeExpandable(mapPropNames(SomeSection)); \n```", "```jsx\n// src/ Chapter_1/ Example_15_HOC_Composition/ App.js\n\nconst mapPropNames = (Component) => (props) => (\n    <Component\n        {...props}\n  isVisible={props.isExpanded}\n showHideBox={props.expandOrCollapse}\n    />  );\n```", "```jsx\n// src/ Chapter_1/ Example_16_Useful_HOCs/ App.js\n\nconst logPropChanges = Component => props => {\n    console.log('[Actual props]:', props)**;**\n  return <Component {...props} />; };\n// Use: makeExpandable(logPropChanges(mapPropNames(SomeSection))); \n```", "```jsx\n// src/ Chapter_1/ Example_16_Useful_HOCs/ App.js\n\nimport {ActivityIndicator} from 'react-native';\nconst withSpinner = Component => props => (\n    props.shouldSpin\n        ? <View style={styles.container}>\n <Text>Your fav spinner f.in. on data load.</Text>\n <**ActivityIndicator** size=\"large\" color=\"#0000ff\" />\n </View>  : <Component {...props} /> );\n// Needs a HOC that provides prop shouldSpin (true/false)\n```", "```jsx\nconst withModalOpener = Component => props => (\n    // Replace with your favourite Modal box implementation\n  <Component {...props} openModal={() => console.log('opening...')} /> );\n```", "```jsx\n// src/ Chapter_1/ Example_16_Useful_HOCs/ App.js\n\nconst withModalOpener = OriginalComponent => (\n    class ModalExample extends React.Component {\n        // Check this shorter way to init state\n        state = {\n modalVisible: true,\n        }**;**    setModalVisible(visible) {\n            this.setState({modalVisible: visible})**;**\n  }\n\n        render() {\n            return (\n                // Replace with your favourite Modal box implementation\n  <View style={styles.container}>\n <OriginalComponent  {...this.props}\n                        openModal={() => this.setModalVisible(true)}\n                        closeModal={() =>\n                     this.setModalVisible(false)}\n                    />\n <**Modal**  animationType=\"slide\"\n  visible={this.state.modalVisible}\n                        onRequestClose={() => {\n                            alert('Modal has been closed.');\n  }}>\n <View style={styles.container}>\n <Text>Example modal!</Text>   <TouchableHighlight  onPress={() => {\n                                    this.setModalVisible(false);\n  }}>\n <Text style={{fontSize: 30}}>\n  Hide Modal\n                                </Text>\n </TouchableHighlight> </View> </**Modal**> </View>  );\n  }\n    }\n); \n```"]