["```jsx\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextInput, View } from 'react-native';\nimport { fromJS } from 'immutable';\n\nimport styles from './styles';\n\n// A Generic \"<Input>\" component that we can use in our app.\n// It's job is to wrap the \"<TextInput>\" component in a \"<View>\"\n// so that we can render a label, and to apply styles to the\n// appropriate components.\nconst Input = props => (\n  <View style={styles.textInputContainer}>\n    <Text style={styles.textInputLabel}>{props.label}</Text>\n    <TextInput style={styles.textInput} {...props} />\n  </View>\n);\n\nInput.propTypes = {\n  label: PropTypes.string\n};\n\nexport default class CollectingTextInput extends Component {\n  // This state is only relevant for the \"input events\"\n  // component. The \"changedText\" state is updated as\n  // the user types while the \"submittedText\" state is\n  // updated when they're done.\n  state = {\n    data: fromJS({\n      changedText: '',\n      submittedText: ''\n    })\n  };\n\n  // Getter for \"Immutable.js\" state data...\n  get data() {\n    return this.state.data;\n  }\n\n  // Setter for \"Immutable.js\" state data...\n  set data(data) {\n    this.setState({ data });\n  }\n\n  render() {\n    const { changedText, submittedText } = this.data.toJS();\n\n    return (\n      <View style={styles.container}>\n        {/* The simplest possible text input. */}\n        <Input label=\"Basic Text Input:\" />\n\n        {/* The \"secureTextEntry\" property turns\n             the text entry into a password input\n             field. */}\n        <Input label=\"Password Input:\" secureTextEntry />\n\n        {/* The \"returnKeyType\" property changes\n             the return key that's displayed on the\n             virtual keyboard. In this case, we want\n             a \"search\" button. */}\n        <Input label=\"Return Key:\" returnKeyType=\"search\" />\n\n        {/* The \"placeholder\" property works just\n             like it does with web text inputs. */}\n        <Input label=\"Placeholder Text:\" placeholder=\"Search\" />\n\n        {/* The \"onChangeText\" event is triggered as\n             the user enters text. The \"onSubmitEditing\"\n             event is triggered when they click \"search\". */}\n        <Input\n          label=\"Input Events:\"\n          onChangeText={e => {\n            this.data = this.data.set('changedText', e);\n          }}\n          onSubmitEditing={e => {\n            this.data = this.data.set(\n              'submittedText',\n              e.nativeEvent.text\n            );\n          }}\n          onFocus={() => {\n            this.data = this.data\n              .set('changedText', '')\n              .set('submittedText', '');\n          }}\n        />\n\n        {/* Displays the captured state from the\n             \"input events\" text input component. */}\n        <Text>Changed: {changedText}</Text>\n        <Text>Submitted: {submittedText}</Text>\n      </View>\n    );\n  }\n} \n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Picker, Text } from 'react-native';\nimport styles from './styles';\n\n// The \"<Select>\" component provides an\n// abstraction around the \"<Picker>\" component.\n// It actually has two outer views that are\n// needed to get the styling right.\nconst Select = props => (\n  <View style={styles.pickerHeight}>\n    <View style={styles.pickerContainer}>\n      {/* The label for the picker... */}\n      <Text style={styles.pickerLabel}>{props.label}</Text>\n      <Picker style={styles.picker} {...props}>\n        {/* Maps each \"items\" value to a\n             \"<Picker.Item>\" component. */}\n        {props.items.map(i => <Picker.Item key={i.label} {...i} />)}\n      </Picker>\n    </View>\n  </View>\n);\n\nSelect.propTypes = {\n  items: PropTypes.array,\n  label: PropTypes.string\n};\n\nexport default Select; \n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Picker, Text } from 'react-native';\nimport styles from './styles';\n\n// The \"<Select>\" component provides an\n// abstraction around the \"<Picker>\" component.\n// It actually has two outer views that are\n// needed to get the styling right.\nconst Select = props => (\n  <View>\n    {/* The label for the picker... */}\n    <Text style={styles.pickerLabel}>{props.label}</Text>\n    <Picker {...props}>\n      {/* Maps each \"items\" value to a\n           \"<Picker.Item>\" component. */}\n      {props.items.map(i => <Picker.Item key={i.label} {...i} />)}\n    </Picker>\n  </View>\n);\n\nSelect.propTypes = {\n  items: PropTypes.array,\n  label: PropTypes.string\n};\n\nexport default Select;\n```", "```jsx\nimport { StyleSheet } from 'react-native'; \n\nexport default StyleSheet.create({ \n  container: { \n    flex: 1, \n    flexDirection: 'row', \n    flexWrap: 'wrap', \n    justifyContent: 'space-around', \n    alignItems: 'center', \n    backgroundColor: 'ghostwhite', \n  }, \n\n  // The outtermost container, needs a height. \n  pickerHeight: { \n    height: 175, \n  }, \n\n  // The inner container lays out the picker \n  // components and sets the background color. \n  pickerContainer: { \n    flex: 1, \n    flexDirection: 'column', \n    alignItems: 'center', \n    marginTop: 40, \n    backgroundColor: 'white', \n    padding: 6, \n    height: 240, \n  }, \n\n  pickerLabel: { \n    fontSize: 14, \n    fontWeight: 'bold', \n  }, \n\n  picker: { \n  width: 100, \n    backgroundColor: 'white', \n  }, \n\n  selection: { \n    width: 200, \n    marginTop: 230, \n    textAlign: 'center', \n  }, \n}); \n```", "```jsx\nimport React, { Component } from 'react';\nimport { View, Text } from 'react-native';\nimport { fromJS } from 'immutable';\n\nimport styles from './styles';\nimport Select from './Select';\n\nexport default class SelectingOptions extends Component {\n  // The state is a collection of \"sizes\" and\n  // \"garments\". At any given time there can be\n  // selected size and garment.\n  state = {\n    data: fromJS({\n      sizes: [\n        { label: '', value: null },\n        { label: 'S', value: 'S' },\n        { label: 'M', value: 'M' },\n        { label: 'L', value: 'L' },\n        { label: 'XL', value: 'XL' }\n      ],\n      selectedSize: null,\n      garments: [\n        { label: '', value: null, sizes: ['S', 'M', 'L', 'XL'] },\n        { label: 'Socks', value: 1, sizes: ['S', 'L'] },\n        { label: 'Shirt', value: 2, sizes: ['M', 'XL'] },\n        { label: 'Pants', value: 3, sizes: ['S', 'L'] },\n        { label: 'Hat', value: 4, sizes: ['M', 'XL'] }\n      ],\n      availableGarments: [],\n      selectedGarment: null,\n      selection: ''\n    })\n  };\n\n  // Getter for \"Immutable.js\" state data...\n  get data() {\n    return this.state.data;\n  }\n\n  // Setter for \"Immutable.js\" state data...\n  set data(data) {\n    this.setState({ data });\n  }\n\n  render() {\n    const {\n      sizes,\n      selectedSize,\n      availableGarments,\n      selectedGarment,\n      selection\n    } = this.data.toJS();\n\n    // Renders two \"<Select>\" components. The first\n    // one is a \"size\" selector, and this changes\n    // the available garments to select from.\n    // The second selector changes the \"selection\"\n    // state to include the selected size\n    // and garment.\n    return (\n      <View style={styles.container}>\n        <Select\n          label=\"Size\"\n          items={sizes}\n          selectedValue={selectedSize}\n          onValueChange={size => {\n            this.data = this.data\n              .set('selectedSize', size)\n              .set('selectedGarment', null)\n              .set(\n                'availableGarments',\n                this.data\n                  .get('garments')\n                  .filter(i => i.get('sizes').includes(size))\n              );\n          }}\n        />\n        <Select\n          label=\"Garment\"\n          items={availableGarments}\n          selectedValue={selectedGarment}\n          onValueChange={garment => {\n            this.data = this.data.set('selectedGarment', garment).set(\n              'selection',\n              this.data.get('selectedSize') +\n                ' ' +\n                this.data\n                  .get('garments')\n                  .find(i => i.get('value') === garment)\n                  .get('label')\n            );\n          }}\n        />\n        <Text style={styles.selection}>{selection}</Text>\n      </View>\n    );\n  }\n} \n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Switch } from 'react-native';\n\nimport styles from './styles';\n\n// A fairly straightforward wrapper component\n// that adds a label to the React Native\n// \"<Switch>\" component.\nconst CustomSwitch = props => (\n  <View style={styles.customSwitch}>\n    <Text>{props.label}</Text>\n    <Switch {...props} />\n  </View>\n);\n\nCustomSwitch.propTypes = {\n  label: PropTypes.string\n};\n\nexport default CustomSwitch; \n```", "```jsx\nimport React, { Component } from 'react';\nimport { View } from 'react-native';\nimport { fromJS } from 'immutable';\n\nimport styles from './styles';\nimport Switch from './Switch';\n\nexport default class TogglingOnAndOff extends Component {\n  state = {\n    data: fromJS({\n      first: false,\n      second: false\n    })\n  };\n\n  // Getter for \"Immutable.js\" state data...\n  get data() {\n    return this.state.data;\n  }\n\n  // Setter for \"Immutable.js\" state data...\n  set data(data) {\n    this.setState({ data });\n  }\n\n  render() {\n    const { first, second } = this.state.data.toJS();\n\n    return (\n      <View style={styles.container}>\n        {/* When this switch is turned on, the\n             second switch is disabled. */}\n        <Switch\n          label=\"Disable Next Switch\"\n          value={first}\n          disabled={second}\n          onValueChange={v => {\n            this.data = this.data.set('first', v);\n          }}\n        />\n\n        {/* When this switch is turned on, the\n             first switch is disabled. */}\n        <Switch\n          label=\"Disable Previous Switch\"\n          value={second}\n          disabled={first}\n          onValueChange={v => {\n            this.data = this.data.set('second', v);\n          }}\n        />\n      </View>\n    );\n  }\n} \n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, View, DatePickerIOS } from 'react-native';\n\nimport styles from './styles';\n\n// A simple abstraction that adds a label to\n// the \"<DatePickerIOS>\" component.\nconst DatePicker = props => (\n  <View style={styles.datePickerContainer}>\n    <Text style={styles.datePickerLabel}>{props.label}</Text>\n    <DatePickerIOS mode=\"date\" {...props} />\n  </View>\n);\n\nDatePicker.propTypes = {\n  label: PropTypes.string\n};\n\nexport default DatePicker; \n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, View, DatePickerAndroid } from 'react-native';\n\nimport styles from './styles';\n\n// Opens the \"DatePickerAndroid\" dialog and handles\n// the response. The \"onDateChange\" function is\n// a callback that's passed in from the container\n// component and expects a \"Date\" instance.\nconst pickDate = (options, onDateChange) => {\n  DatePickerAndroid.open(options).then(date =>\n    onDateChange(new Date(date.year, date.month, date.day))\n  );\n};\n\n// Renders a \"label\" and the \"date\" properties.\n// When the date text is clicked, the \"pickDate()\"\n// function is used to render the Android\n// date picker dialog.\nconst DatePicker = ({ label, date, onDateChange }) => (\n  <View style={styles.datePickerContainer}>\n    <Text style={styles.datePickerLabel}>{label}</Text>\n    <Text onPress={() => pickDate({ date }, onDateChange)}>\n      {date.toLocaleDateString()}\n    </Text>\n  </View>\n);\n\nDatePicker.propTypes = {\n  label: PropTypes.string,\n  date: PropTypes.instanceOf(Date),\n  onDateChange: PropTypes.func.isRequired\n};\n\nexport default DatePicker; \n```", "```jsx\nimport React, { Component } from 'react';\nimport { View } from 'react-native';\n\nimport styles from './styles';\n\n// Imports our own platform-independent \"DatePicker\"\n// and \"TimePicker\" components.\nimport DatePicker from './DatePicker';\nimport TimePicker from './TimePicker';\n\nexport default class CollectingDateTimeInput extends Component {\n  state = {\n    date: new Date(),\n    time: new Date()\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <DatePicker\n          label=\"Pick a date, any date:\"\n          date={this.state.date}\n          onDateChange={date => this.setState({ date })}\n        />\n        <TimePicker\n          label=\"Pick a time, any time:\"\n          date={this.state.time}\n          onTimeChange={time => this.setState({ time })}\n        />\n      </View>\n    );\n  }\n} \n```"]