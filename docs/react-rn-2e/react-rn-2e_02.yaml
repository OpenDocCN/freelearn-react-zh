- en: Rendering with JSX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSX渲染
- en: 'This chapter will introduce you to JSX. We''ll start by covering the basics:
    what is JSX? Then, you''ll see that JSX has built-in support for HTML tags, as
    you would expect, so we''ll run through a few examples here. After having looked
    at some JSX code, we''ll discuss how it makes describing the structure of UIs
    easy for us. Then, we''ll jump into building our own JSX elements, and using JavaScript
    expressions for dynamic content. Finally, you''ll learn how to use fragments to
    produce less HTML—a new React 16 feature.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍JSX。我们将从基础知识开始：什么是JSX？然后，您会发现JSX内置支持HTML标记，正如您所期望的那样，所以我们将在这里运行一些示例。在查看了一些JSX代码之后，我们将讨论它如何使我们轻松描述UI的结构。然后，我们将开始构建我们自己的JSX元素，并使用JavaScript表达式进行动态内容。最后，您将学习如何使用片段来产生更少的HTML——这是React
    16的一个新功能。
- en: Ready?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗？
- en: What is JSX?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是JSX？
- en: In this section, we'll implement the obligatory *hello world* JSX application.
    At this point, we're just dipping our toes into the water; more in-depth examples
    will follow. We'll also discuss what makes this syntax work well for declarative
    UI structures.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将实现义不容辞的*你好世界*JSX应用程序。在这一点上，我们只是在试水；更深入的例子将会接下来。我们还将讨论什么使这种语法适合声明式UI结构。
- en: Hello JSX
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好JSX
- en: 'Without further ado, here''s your first JSX application:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 话不多说，这是你的第一个JSX应用程序：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's walk through what's happening here. First, we need to import the relevant
    bits. The `render()` function is what really matters in this example, as it takes
    JSX as the first argument and renders it to the DOM node passed as the second
    argument.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这里发生了什么。首先，我们需要导入相关的部分。`render()`函数是这个例子中真正重要的部分，因为它将JSX作为第一个参数并将其呈现到作为第二个参数传递的DOM节点上。
- en: The actual JSX content in this example renders a paragraph with some bold text
    inside. There's nothing fancy going on here, so we could have just inserted this
    markup into the DOM directly as a plain string. However, there's a lot more to
    JSX than what's shown here. The aim of this example was to show the basic steps
    involved in getting JSX rendered onto the page. Now, let's talk a little bit about
    declarative UI structure.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，实际的JSX内容呈现了一个段落，里面有一些加粗的文本。这里没有什么花哨的东西，所以我们可以直接将这个标记插入到DOM中作为普通字符串。然而，JSX比这里展示的更复杂。这个例子的目的是展示将JSX呈现到页面上所涉及的基本步骤。现在，让我们稍微谈一下声明式UI结构。
- en: JSX is transpiled into JavaScript statements; browsers have no idea what JSX
    is. I would highly recommend downloading the companion code for this book from
    [https://github.com/PacktPublishing/React-and-React-Native-Second-Edition](https://github.com/PacktPublishing/React-and-React-Native-Second-Edition), and
    running it as you read along. Everything transpiles automatically for you; you
    just need to follow the simple installation steps.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: JSX被转译成JavaScript语句；浏览器不知道JSX是什么。我强烈建议您从[https://github.com/PacktPublishing/React-and-React-Native-Second-Edition](https://github.com/PacktPublishing/React-and-React-Native-Second-Edition)下载本书的配套代码，并在阅读时运行它。一切都会自动转译给您；您只需要遵循简单的安装步骤。
- en: Declarative UI structure
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明式UI结构
- en: Before we continue forward with our code examples, let's take a moment to reflect
    on our *hello world* example. The JSX content was short and simple. It was also
    **declarative**, because it described what to render, not how to render it. Specifically,
    by looking at the JSX, you can see that this component will render a paragraph,
    and some bold text within it. If this were done imperatively, there would probably
    be some more steps involved, and they would probably need to be performed in a
    specific order.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行代码示例之前，让我们花一点时间来反思我们的*hello world*示例。 JSX内容简短而简单。它也是**声明性**的，因为它描述了要渲染的内容，而不是如何渲染它。具体来说，通过查看JSX，您可以看到此组件将呈现一个段落，并在其中呈现一些粗体文本。如果这是以命令式方式完成的，可能会涉及一些更多的步骤，并且它们可能需要按特定顺序执行。
- en: The example we just implemented should give you a feel for what declarative
    React is all about. As we move forward in this chapter and throughout the book,
    the JSX markup will grow more elaborate. However, it's always going to describe
    what is in the user interface. Let's move on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚实施的示例应该让您了解声明性React的全部内容。随着我们在本章和整本书中的继续前进，JSX标记将变得更加复杂。但是，它始终将描述用户界面中的内容。让我们继续。
- en: Just like HTML
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 就像HTML一样
- en: At the end of the day, the job of a React component is to render HTML into the
    DOM browser. This is why JSX has support for HTML tags, out of the box. In this
    section, we'll look at some code that renders a few of the available HTML tags.
    Then, we'll cover some of the conventions that are typically followed in React
    projects when HTML tags are used.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 归根结底，React组件的工作是将HTML渲染到DOM浏览器中。这就是为什么JSX默认支持HTML标记。在本节中，我们将查看一些代码，用于渲染一些可用的HTML标记。然后，我们将介绍在React项目中使用HTML标记时通常遵循的一些约定。
- en: Built-in HTML tags
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置HTML标记
- en: 'When we render JSX, element tags are referencing React components. Since it
    would be tedious to have to create components for HTML elements, React comes with
    HTML components. We can render any HTML tag in our JSX, and the output will be
    just as we''d expect. Now, let''s try rendering some of these tags:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们渲染JSX时，元素标记引用的是React组件。由于为HTML元素创建组件将是繁琐的，React带有HTML组件。我们可以在我们的JSX中渲染任何HTML标记，输出将如我们所期望的那样。现在，让我们尝试渲染一些这些标记：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Don't worry about the rendered output for this example; it doesn't make sense.
    All we're doing here is making sure that we can render arbitrary HTML tags, and
    they render as expected.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心此示例的渲染输出；这没有意义。我们在这里所做的一切只是确保我们可以渲染任意HTML标记，并且它们会按预期渲染。
- en: You may have noticed the surrounding `<div>` tag, grouping together all of the
    other tags as its children. This is because React needs a root component to render.
    Later in the chapter, you'll learn how to render adjacent elements without wrapping
    them in a parent element.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到周围的`<div>`标签，将所有其他标签分组为其子标签。这是因为React需要一个根组件来渲染。在本章的后面，你将学习如何渲染相邻的元素，而不需要将它们包装在父元素中。
- en: HTML tag conventions
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML标记约定
- en: When you render HTML tags in JSX markup, the expectation is that you'll use
    lowercase for the tag name. In fact, capitalizing the name of an HTML tag will
    fail. Tag names are case sensitive and non-HTML elements are capitalized. This
    way, it's easy to scan the markup and spot the built-in HTML elements versus everything
    else.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在JSX标记中渲染HTML标记时，期望是您将使用小写来表示标记名称。事实上，大写HTML标记的名称将失败。标记名称是区分大小写的，而非HTML元素是大写的。这样，很容易扫描标记并找到内置的HTML元素与其他所有内容。
- en: 'You can also pass HTML elements any of their standard properties. When you
    pass them something unexpected, a warning about the unknown property is logged.
    Here''s an example that illustrates these ideas:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以传递HTML元素的任何标准属性。当您传递意外的内容时，将记录有关未知属性的警告。以下是一个说明这些想法的示例：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Later on in the book, I'll cover property validation for the components that
    you make. This avoids silent misbehavior as seen with the `foo` property in this
    example.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在书的后面，我将介绍你制作的组件的属性验证。这可以避免类似于这个例子中`foo`属性的静默错误行为。
- en: Describing UI structures
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述UI结构
- en: 'JSX is the best way to describe complex UI structures. Let''s look at some
    JSX markup that declares a more elaborate structure than a single paragraph:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: JSX是描述复杂UI结构的最佳方式。让我们看一些声明比单个段落更复杂结构的JSX标记：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, there are a lot of semantic elements in this markup, describing
    the structure of the UI. The key is that this type of complex structure is easy
    to reason about, and we don't need to think about rendering specific parts of
    it. But before we start implementing dynamic JSX markup, let's create some of
    our own JSX components.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在这个标记中有很多语义元素，描述了UI的结构。关键在于这种复杂结构很容易理解，我们不需要考虑渲染它的特定部分。但在我们开始实现动态JSX标记之前，让我们创建一些自己的JSX组件。
- en: 'Here is what the rendered content looks like:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染的内容：
- en: '![](Images/7c723ef2-ec1d-43ba-987f-d6703b8193f6.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7c723ef2-ec1d-43ba-987f-d6703b8193f6.png)'
- en: Creating your own JSX elements
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你自己的JSX元素
- en: Components are the fundamental building blocks of React. In fact, components
    are the vocabulary of JSX markup. In this section, we'll see how to encapsulate
    HTML markup within a component. We'll build examples that show you how to nest
    custom JSX elements and how to namespace your components.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是React的基本构建块。事实上，组件是JSX标记的词汇。在本节中，我们将看到如何在组件中封装HTML标记。我们将构建示例，向你展示如何嵌套自定义JSX元素以及如何为你的组件命名空间。
- en: Encapsulating HTML
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 封装HTML
- en: 'The reason that you want to create new JSX elements is so that we can encapsulate
    larger structures. This means that instead of having to type out complex markup,
    you can use your custom tag. The React component returns the JSX that replaces
    the element. Let''s look at an example now:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你想创建新的JSX元素的原因是为了封装更大的结构。这意味着你可以使用自定义标签，而不是输入复杂的标记。React组件返回替换元素的JSX。现在让我们看一个例子：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s what the rendered output looks like:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染的输出：
- en: '![](Images/70ef79a1-882c-478e-a6d4-cc8fd5fb9e8d.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/70ef79a1-882c-478e-a6d4-cc8fd5fb9e8d.png)'
- en: This is the first React component that you've implemented, so let's take a moment
    to dissect what's going on here. You've created a class called `MyComponent` that
    extends the `Component` class from React. This is how you create a new JSX element.
    As you can see in the call to `render()`, you're rendering a `<MyComponent>` element.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你实现的第一个React组件，所以让我们花点时间来分析一下这里发生了什么。你创建了一个名为`MyComponent`的类，它继承自React的`Component`类。这是你创建一个新的JSX元素的方式。正如你在`render()`中看到的，你正在渲染一个`<MyComponent>`元素。
- en: The HTML that this component encapsulates is returned by the `render()` method.
    In this case, when the JSX `<MyComponent>` is rendered by `react-dom`, it's replaced
    by a `<section>` element, and everything within it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '这个组件封装的HTML是由`render()`方法返回的。在这种情况下，当JSX `<MyComponent>`被`react-dom`渲染时，它被一个`<section>`元素替换，并且其中的所有内容。 '
- en: When React renders JSX, any custom elements that you use must have their corresponding
    React component within the same scope. In the preceding example, the `MyComponent` class
    was declared in the same scope as the call to `render()`, so everything worked
    as expected. Usually, you'll import components, adding them to the appropriate
    scope. You'll see more of this as you progress through the book.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当React渲染JSX时，你使用的任何自定义元素必须在同一个作用域内具有相应的React组件。在前面的例子中，`MyComponent`类在`render()`调用的同一个作用域中声明，所以一切都按预期工作。通常，你会导入组件，将它们添加到适当的作用域中。随着你在书中的进展，你会看到更多这样的情况。
- en: Nested elements
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套元素
- en: 'Using JSX markup is useful for describing UI structures that have parent-child
    relationships. For example, a `<li>` tag is only useful as the child of a `<ul>`
    or `<ol>` tag—you''re probably going to make similar nested structures with your
    own React components. For this, you need to use the `children` property. Let''s
    see how this works. Here''s the JSX markup:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JSX标记有助于描述具有父子关系的UI结构。例如，`<li>`标记只有作为`<ul>`或`<ol>`标记的子标记才有用-您可能会使用自己的React组件创建类似的嵌套结构。为此，您需要使用`children`属性。让我们看看这是如何工作的。以下是JSX标记：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You''re importing two of your own React components: `MySection` and `MyButton`.
    Now, if you look at the JSX markup, you''ll notice that `<MyButton>` is a child
    of `<MySection>`. You''ll also notice that the `MyButton` component accepts text
    as its child, instead of more JSX elements. Let''s see how these components work,
    starting with `MySection`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您正在导入两个自己的React组件：`MySection`和`MyButton`。现在，如果您查看JSX标记，您会注意到`<MyButton>`是`<MySection>`的子代。您还会注意到`MyButton`组件接受文本作为其子代，而不是更多的JSX元素。让我们看看这些组件是如何工作的，从`MySection`开始：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This component renders a standard `<section>` HTML element, a heading, and then
    `{this.props.children}`. It's this last construct that allows components to access
    nested elements or text, and to render it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件呈现了一个标准的`<section>`HTML元素，一个标题，然后是`{this.props.children}`。正是这个构造允许组件访问嵌套元素或文本，并将其呈现出来。
- en: The two braces used in the preceding example are used for JavaScript expressions.
    I'll touch on more details of the JavaScript expression syntax found in JSX markup
    in the following section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中使用的两个大括号用于JavaScript表达式。我将在下一节中详细介绍在JSX标记中找到的JavaScript表达式语法的更多细节。
- en: 'Now, let''s look at the `MyButton` component:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下`MyButton`组件：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This component is using the exact same pattern as `MySection`; take the `{this.props.children}`
    value, and surround it with meaningful markup. React handles the messy details
    for you. In this example, the button text is a child of `MyButton`, which is,
    in turn, a child of `MySection`. However, the button text is transparently passed
    through `MySection`. In other words, we didn''t have to write any code in `MySection`
    to make sure that `MyButton` got its text. Pretty cool, right? Here''s what the
    rendered output looks like:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件使用与`MySection`完全相同的模式；获取`{this.props.children}`的值，并用有意义的标记包围它。React会为您处理混乱的细节。在这个例子中，按钮文本是`MyButton`的子代，而`MyButton`又是`MySection`的子代。但是，按钮文本是透明地通过`MySection`传递的。换句话说，我们不需要在`MySection`中编写任何代码来确保`MyButton`获得其文本。很酷，对吧？渲染输出如下所示：
- en: '![](Images/8ac4edd8-81cc-432a-b3ed-55d7e862e629.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8ac4edd8-81cc-432a-b3ed-55d7e862e629.png)'
- en: Namespaced components
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名空间组件
- en: The custom elements that you've created so far have used simple names. Sometimes,
    you might want to give a component a namespace. Instead of writing `<MyComponent>`
    in your JSX markup, you would write `<MyNamespace.MyComponent>`. This makes it
    clear to anyone that `MyComponent` is part of `MyNamespace`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您创建的自定义元素都使用了简单的名称。有时，您可能希望给组件一个命名空间。在您的JSX标记中，您将写入`<MyNamespace.MyComponent>`而不是`<MyComponent>`。这样可以清楚地告诉任何人`MyComponent`是`MyNamespace`的一部分。
- en: 'Typically, `MyNamespace` would also be a component. The idea with **namespacing**
    is to have a namespace component render its child components using the namespace
    syntax. Let''s take a look at an example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`MyNamespace`也将是一个组件。**命名空间**的想法是使用命名空间语法呈现其子组件。让我们来看一个例子：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This markup renders a `<MyComponent>` element with two children. The key here
    is that instead of writing `<First>`, we write `<MyComponent.First>`, and the
    same with `<MyComponent.Second>`. The idea is that we want to explicitly show
    that `First` and `Second` belong to `MyComponent`, within the markup.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标记呈现了一个带有两个子元素的`<MyComponent>`元素。关键在于，我们不是写`<First>`，而是写`<MyComponent.First>`，`<MyComponent.Second>`也是一样。这个想法是我们想要明确地显示`First`和`Second`属于`MyComponent`，在标记内部。
- en: I personally don't depend on namespaced components like these, because I'd rather
    see which components are in use by looking at the `import` statements at the top
    of the module. Others would rather import one component and explicitly mark the
    relationship within the markup. There is no correct way to do this; it's a matter
    of personal taste.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人不依赖于这样的命名空间组件，因为我宁愿通过查看模块顶部的`import`语句来看哪些组件正在使用。其他人可能更愿意导入一个组件，并在标记中明确标记关系。没有正确的做法；这是个人品味的问题。
- en: 'Now, let''s take a look at the `MyComponent` module:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下`MyComponent`模块：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This module declares `MyComponent` as well as the other components that fall
    under this namespace (`First` and `Second`). The idea is to assign the components
    to the namespace component (`MyComponent`) as class properties. There are a number
    of things that you could change in this module. For example, you don't have to
    directly export `First` and `Second` since they're accessible through `MyComponent`.
    You also don't need to define everything in the same module; you could import
    `First` and `Second` and assign them as class properties. Using namespaces is
    completely optional, and if you use them, you should use them consistently.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块声明了`MyComponent`以及属于这个命名空间的其他组件（`First`和`Second`）。这个想法是将组件分配给命名空间组件（`MyComponent`）作为类属性。在这个模块中有很多可以改变的东西。例如，你不必直接导出`First`和`Second`，因为它们可以通过`MyComponent`访问。你也不需要在同一个模块中定义所有东西；你可以导入`First`和`Second`并将它们分配为类属性。使用命名空间是完全可选的，如果你使用它们，应该一致地使用它们。
- en: Using JavaScript expressions
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript表达式
- en: As you saw in the preceding section, JSX has special syntax that allows you
    to embed JavaScript expressions. Any time React renders JSX content, expressions
    in the markup are evaluated. This is the dynamic aspect of JSX, and in this section,
    you'll learn how to use expressions to set property values and element text content.
    You'll also learn how to map collections of data to JSX elements.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的部分中看到的，JSX有特殊的语法，允许你嵌入JavaScript表达式。每当React渲染JSX内容时，标记中的表达式都会被评估。这是JSX的动态方面，在本节中，你将学习如何使用表达式来设置属性值和元素文本内容。你还将学习如何将数据集合映射到JSX元素。
- en: Dynamic property values and text
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态属性值和文本
- en: 'Some HTML property or text values are static, meaning that they don''t change
    as the JSX is re-rendered. Other values, the values of properties or text, are
    based on data that''s found elsewhere in the application. Remember, React is just
    the view layer. Let''s look at an example so that you can get a feel for what
    the JavaScript expression syntax looks like in JSX markup:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一些HTML属性或文本值是静态的，意味着它们在JSX重新渲染时不会改变。其他值，即属性或文本的值，是基于应用程序中其他地方找到的数据。记住，React只是视图层。让我们看一个例子，这样你就可以感受一下在JSX标记中JavaScript表达式语法是什么样子的：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Anything that is a valid JavaScript expression, including nested JSX, can go
    in between the braces: `{}`. For properties and text, this is often a variable
    name or object property. Notice in this example that the `!enabled` expression
    computes a Boolean value. Here''s what the rendered output looks like:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 任何有效的JavaScript表达式，包括嵌套的JSX，都可以放在大括号`{}`之间。对于属性和文本，这通常是一个变量名或对象属性。请注意，在这个例子中，`!enabled`表达式计算出一个布尔值。渲染输出如下所示：
- en: '![](Images/219285aa-1d17-4bcd-8f4a-d210c2c8466a.png)If you''re following along
    with the downloadable companion code, which I strongly recommend doing, try playing
    with these values, and seeing how the rendered HTML changes.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/219285aa-1d17-4bcd-8f4a-d210c2c8466a.png)如果你正在使用可下载的配套代码进行跟进，我强烈建议你这样做，尝试玩玩这些值，看看渲染的HTML如何改变。'
- en: Mapping collections to elements
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将集合映射到元素
- en: Sometimes, you need to write JavaScript expressions that change the structure
    of your markup. In the preceding section, you learned how to use JavaScript expression
    syntax to dynamically change the property values of JSX elements. What about when
    you need to add or remove elements based on JavaScript collections?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你需要编写JavaScript表达式来改变你的标记结构。在前面的部分中，你学会了如何使用JavaScript表达式语法来动态改变JSX元素的属性值。那么当你需要根据JavaScript集合添加或删除元素时呢？
- en: Throughout the book, when I refer to a JavaScript **collection**, I'm referring
    to both plain objects and arrays. Or, more generally, anything that's iterable.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，当我提到JavaScript**集合**时，我指的是普通对象和数组。或者更一般地说，任何可迭代的东西。
- en: 'The best way to dynamically control JSX elements is to map them from a collection.
    Let''s look at an example of how this is done:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 动态控制JSX元素的最佳方式是从集合中映射它们。让我们看一个如何做到这一点的例子：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first collection is an array called `array`, populated with string values.
    Moving down to the JSX markup, you can see the call to `array.map()`, which will
    return a new array. The mapping function is actually returning a JSX element (`<li>`),
    meaning that each item in the array is now represented in the markup.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个集合是一个名为`array`的数组，其中包含字符串值。在JSX标记中，你可以看到对`array.map()`的调用，它将返回一个新数组。映射函数实际上返回了一个JSX元素（`<li>`），这意味着数组中的每个项目现在在标记中表示。
- en: The result of evaluating this expression is an array. Don't worry; JSX knows
    how to render arrays of elements.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 评估这个表达式的结果是一个数组。别担心；JSX知道如何渲染元素数组。
- en: The object collection uses the same technique, except you have to call `Object.keys()`
    and then map this array. What's nice about mapping collections to JSX elements
    on the page is that you can drive the structure of React components based on collection
    data. This means that you don't have to rely on imperative logic to control the
    UI.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对象集合使用相同的技术，只是你需要调用`Object.keys()`，然后映射这个数组。将集合映射到页面上的JSX元素的好处是，你可以根据集合数据驱动React组件的结构。这意味着你不必依赖命令式逻辑来控制UI。
- en: 'Here''s what the rendered output looks like:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染输出如下：
- en: '![](Images/56381615-16d4-4762-b848-03fee269794e.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/56381615-16d4-4762-b848-03fee269794e.png)'
- en: Fragments of JSX
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSX片段的片段
- en: React 16 introduces the concept of **JSX fragments**. Fragments are a way to
    group together chunks of markup without having to add unnecessary structure to
    your page. For example, a common approach is to have a React component return
    content wrapped in a `<div>` element. This element serves no real purpose and
    adds clutter to the DOM.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: React 16引入了**JSX片段**的概念。片段是一种将标记块组合在一起的方式，而无需向页面添加不必要的结构。例如，一种常见的方法是让React组件返回包裹在`<div>`元素中的内容。这个元素没有实际目的，只会给DOM添加混乱。
- en: 'Let''s look at an example. Here are two versions of a component. One uses a
    wrapper element and one uses the new fragment feature:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。这里有一个组件的两个版本。一个使用包装元素，另一个使用新的片段功能：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The two elements rendered are `<WithoutFragments>` and `<WithFragments>`. Here''s
    what they look like when rendered:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染的两个元素分别是`<WithoutFragments>`和`<WithFragments>`。渲染时的样子如下：
- en: '![](Images/c8442577-0a54-49a6-a35c-121afc44bc51.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c8442577-0a54-49a6-a35c-121afc44bc51.png)'
- en: Let's compare the two approaches now.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们比较这两种方法。
- en: Wrapper elements
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包装元素
- en: 'The first approach is to wrap sibling elements in a `<div>`. Here''s what the
    source looks like:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是将兄弟元素包装在`<div>`中。以下是源代码的样子：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The essence of this component are the `<h1>` and the `<p>` tags. Yet, in order
    to return them from `render()`, you have to wrap them with a `<div>`. Indeed,
    inspecting the DOM using your browser dev tools reveals that this `<div>` does
    nothing but add another level of structure:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件的本质是`<h1>`和`<p>`标签。然而，为了从`render()`中返回它们，你必须用`<div>`包装它们。实际上，使用浏览器开发工具检查DOM会发现这个`<div>`除了增加了另一层结构外并没有做任何事情。
- en: '![](Images/c91d419c-89ef-4e2f-af12-b4c7bb13bbbc.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c91d419c-89ef-4e2f-af12-b4c7bb13bbbc.png)'
- en: Now, imagine an app with lots of these components—that's a lot of pointless
    elements!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，想象一个有很多这些组件的应用程序，那就是很多无意义的元素！
- en: Avoiding unnecessary tags using fragments
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免使用片段的不必要标签
- en: 'Let''s take a look at the `WithFragments` component now:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下`WithFragments`组件：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Instead of wrapping the component content in a `<div>`, the `<Fragment>` element
    is used. This is a special type of element that indicates that only its children
    need to be rendered. You can see the difference compared to the `WithoutFragments`
    component if you inspect the DOM:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是将组件内容包装在`<div>`中，使用了`<Fragment>`元素。这是一种特殊类型的元素，表示只需要渲染它的子元素。如果你检查DOM，你可以看到与`WithoutFragments`组件相比的区别：
- en: '![](Images/4aa026e6-9dc9-42bb-a7bb-80bc05082936.png)Notice how you had to import
    `Fragment` from React in the previous example? This is because not all transpilers
    such as Babel understand the Fragment element yet. In future versions, there will
    actually be a shorthand way to express fragments in JSX: `<>My Content</>`. But
    for now, `React.Fragment` should work with all React tooling.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/4aa026e6-9dc9-42bb-a7bb-80bc05082936.png)注意在前面的例子中你不得不从React中导入`Fragment`吗？这是因为并非所有的转译器（如Babel）都能理解Fragment元素。在未来的版本中，实际上会有一种简写的方式来在JSX中表示片段：`<>My
    Content</>`。但是目前，`React.Fragment`应该可以在所有的React工具中使用。'
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned the basics of JSX, including its declarative structure
    and why this is a good thing. Then, you wrote some code to render some basic HTML
    and learned about describing complex structures using JSX.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了JSX的基础知识，包括其声明性结构以及为什么这是一件好事。然后，你编写了一些代码来渲染一些基本的HTML，并学习了如何使用JSX描述复杂的结构。
- en: Next, you spent some time learning about extending the vocabulary of JSX markup
    by implementing your own React components, the fundamental building blocks of
    your UI. Then, you learned how to bring dynamic content into JSX element properties,
    and how to map JavaScript collections to JSX elements, eliminating the need for
    imperative logic to control the UI display. Finally, you learned how to render
    fragments of JSX content using new React 16 functionality.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你花了一些时间学习了通过实现自己的React组件来扩展JSX标记的词汇量，这是UI的基本构建块。然后，你学习了如何将动态内容带入到JSX元素属性中，以及如何将JavaScript集合映射到JSX元素，消除了控制UI显示的命令式逻辑的需要。最后，你学习了如何使用新的React
    16功能来渲染JSX内容的片段。
- en: Now that you have a feel for what it's like to render UIs by embedding declarative
    XML in your JavaScript modules, it's time to move on to the next chapter, where
    we'll take a deeper look at component properties and state.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经感受到了在JavaScript模块中嵌入声明性XML来渲染UI的感觉，是时候进入下一章了，在那里我们将更深入地了解组件属性和状态。
- en: Test your knowledge
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: Can you use all of the standard HTML tags as JSX elements?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以将所有标准的HTML标签作为JSX元素使用吗？
- en: Yes, but you have to import any HTML tags that you want to use from react-dom
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，但你必须从react-dom中导入你想要使用的任何HTML标签
- en: No, you have to implement your own React components that render HTML content
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，你必须实现自己的React组件来渲染HTML内容
- en: Yes, React supports this out of the box
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，React支持这个功能
- en: How do you access child elements from your component?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何访问组件的子元素？
- en: Child JSX elements are always accessible via the `children` property
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子 JSX 元素始终可以通过 `children` 属性访问
- en: Child JSX elements are passed as arguments to the `render()` method
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子 JSX 元素作为参数传递给 `render()` 方法
- en: There is no way to access child elements from within a component
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无法从组件内部访问子元素
- en: What does the `Fragment` component from React do?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Fragment` 组件从 React 做什么？'
- en: It renders its children more efficiently
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它更有效地呈现其子元素
- en: It creates a reusable piece of markup that can then be reused throughout the
    app
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它创建一个可重复使用的标记片段，然后可以在整个应用程序中重复使用
- en: It acts as a container component by negating the need to render pointless elements,
    such as container divs
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它通过消除渲染无意义的元素（如容器 div）来充当容器组件
- en: Further reading
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Check out the following links for more information:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以获取更多信息：
- en: '[https://reactjs.org/docs/introducing-jsx.html](https://reactjs.org/docs/introducing-jsx.html)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/introducing-jsx.html](https://reactjs.org/docs/introducing-jsx.html)'
- en: '[https://reactjs.org/docs/fragments.html](https://reactjs.org/docs/fragments.html)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/fragments.html](https://reactjs.org/docs/fragments.html)'
