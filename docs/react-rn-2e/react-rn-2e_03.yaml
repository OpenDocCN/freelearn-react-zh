- en: Component Properties, State, and Context
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件属性，状态和上下文
- en: 'React components rely on JSX syntax, which is used to describe the structure
    of the UI. JSX will only get you so far—you need data to fill in the structure
    of your React components. The focus of this chapter is component data, which comes
    in two main varieties: *properties* and *state*. Another option for passing data
    to components is via a context.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React组件依赖于JSX语法，用于描述UI的结构。JSX只能带你走这么远 - 你需要数据来填充React组件的结构。本章的重点是组件数据，它有两种主要的变体：*属性*和*状态*。向组件传递数据的另一种选择是通过上下文。
- en: I'll start things off by defining what is meant by properties and state. Then,
    I'll walk through some examples that show you the mechanics of setting component
    state, and passing component properties. Toward the end of this chapter, we'll
    build on your new-found knowledge of props and state and introduce functional
    components and the container pattern. Finally, you'll learn about context and
    when it makes a better choice than properties for passing data to components.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我将首先定义属性和状态的含义。然后，我将通过一些示例来演示设置组件状态和传递组件属性的机制。在本章的末尾，我们将建立在您对props和state的新知识的基础上，并介绍功能组件和容器模式。最后，您将了解上下文以及何时选择它比属性更好地向组件传递数据。
- en: What is component state?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件状态是什么？
- en: React components declare the structure of UI elements using JSX. But, components
    need data if they are to be useful. For example, your component JSX might declare
    a `<ul>` that maps a JavaScript collection to `<li>` elements. Where does this
    collection come from?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: React组件使用JSX声明UI元素的结构。但是，如果组件要有用，它们需要数据。例如，您的组件JSX可能声明一个`<ul>`，将JavaScript集合映射到`<li>`元素。这个集合是从哪里来的？
- en: '**State** is the dynamic part of a React component. You can declare the initial
    state of a component, which changes over time.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**状态**是React组件的动态部分。您可以声明组件的初始状态，随着时间的推移而改变。'
- en: 'Imagine that you''re rendering a component where a piece of its state is initialized
    to an empty array. Later on, this array is populated with data. This is called
    a **change in state**, and whenever you tell a React component to change its state,
    the component will automatically re-render itself. The process is visualized here:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您正在渲染一个组件，其中其状态的一部分被初始化为空数组。稍后，该数组将被填充数据。这被称为**状态变化**，每当您告诉React组件更改其状态时，组件将自动重新渲染自身。该过程在这里可视化：
- en: '![](Images/710f0e3c-dd8c-4453-b746-81925f964f61.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/710f0e3c-dd8c-4453-b746-81925f964f61.png)'
- en: The state of a component is something that either the component itself can set,
    or other pieces of code, outside of the component. Now we'll look at component
    properties and how they differ from component state.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的状态是组件本身可以设置的东西，或者是组件外的其他代码片段。现在我们将看看组件属性以及它们与组件状态的区别。
- en: What are component properties?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件属性是什么？
- en: '**Properties** are used to pass data into your React components. Instead of
    calling a method with new state as the argument, properties are passed only when
    the component is rendered. That is, you pass property values to JSX elements.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**用于将数据传递给您的React组件。与使用新状态作为参数调用方法不同，属性仅在组件呈现时传递。也就是说，您将属性值传递给JSX元素。'
- en: In the context of JSX, properties are called **attributes**, probably because
    that's what they're called in XML parlance. In this book, properties and attributes
    are synonymous with one another.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在JSX的上下文中，属性被称为**属性**，可能是因为在XML术语中是这样称呼它们的。在本书中，属性和属性是同义词。
- en: 'Properties are different than state because they don''t change after the initial
    render of the component. If a property value has changed, and you want to re-render
    the component, then we have to re-render the JSX that was used to render it in
    the first place. The React internals take care of making sure this is done efficiently.
    Here''s a diagram of rendering and re-rendering a component using properties:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 属性与状态不同，因为它们在组件初始渲染后不会改变。如果属性值已更改，并且你想重新渲染组件，那么我们必须重新渲染用于首次渲染的JSX。React内部会确保这样做的效率。下面是使用属性渲染和重新渲染组件的图示：
- en: '![](Images/b6424cc1-3cd8-4039-b8df-3ff501aa0ce9.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b6424cc1-3cd8-4039-b8df-3ff501aa0ce9.png)'
- en: This looks a lot different than a stateful component. The real difference is
    that with properties, it's often a parent component that decides when to render
    the JSX. The component doesn't actually know how to re-render itself. As you'll
    see throughout this book, this type of top-down flow is easier to predict than
    state that changes all over the place.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来与有状态的组件有很大不同。真正的区别在于，对于属性来说，往往是父组件决定何时渲染JSX。组件实际上不知道如何重新渲染自己。正如你将在本书中看到的那样，这种自上而下的流程比在各个地方更改状态更容易预测。
- en: Let's make sense of these two concepts by writing some code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过编写一些代码来理解这两个概念。
- en: Setting component state
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置组件状态
- en: In this section, you're going to write some React code that sets the state of
    components. First, you'll learn about the initial state—this is, the default state
    of a component. Next, you'll learn how to change the state of a component, causing
    it to re-render itself. Finally, you'll see how a new state is merged with an existing
    state.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将编写一些设置组件状态的React代码。首先，你将了解初始状态——这是组件的默认状态。接下来，你将学习如何改变组件的状态，导致它重新渲染自己。最后，你将看到新状态如何与现有状态合并。
- en: Initial component state
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始组件状态
- en: The initial state of a component isn't actually required, but if your component
    uses state, it should be set. This is because if the component expects certain
    state properties to be there and they aren't, then the component will either fail
    or render something unexpected. Thankfully, it's easy to set the initial component
    state.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的初始状态实际上并不是必需的，但如果你的组件使用状态，应该设置初始状态。这是因为如果组件期望某些状态属性存在，而它们不存在，那么组件要么会失败，要么会渲染出意外的东西。幸运的是，设置初始组件状态很容易。
- en: 'The initial state of a component should always be an object with one or more
    properties. For example, you might have a component that uses a single array as
    its state. This is fine, but just make sure that you set the initial array as
    a property of the state object. Don''t use an array as the state. The reason for
    this is simple: consistency. Every React component uses a plain object as its
    state.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的初始状态应该始终是一个具有一个或多个属性的对象。例如，你可能有一个使用单个数组作为状态的组件。这没问题，但确保将初始数组设置为状态对象的属性。不要将数组用作状态。原因很简单：一致性。每个React组件都使用普通对象作为其状态。
- en: 'Let''s turn our attention to some code now. Here''s a component that sets an
    initial state object:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们把注意力转向一些代码。这是一个设置初始状态对象的组件：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you look at the JSX that''s returned by `render()`, you can actually see
    the state values that this component depends on—`first` and `second`. Since you''ve
    set these properties up in the initial state, you''re safe to render the component,
    and there won''t be any surprises. For example, you could render this component
    only once, and it would render as expected, thanks to the initial state:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查看`render()`返回的JSX时，你实际上可以看到这个组件依赖的状态值——`first`和`second`。由于你在初始状态中设置了这些属性，所以可以安全地渲染组件，不会有任何意外。例如，你可以只渲染这个组件一次，它会按预期渲染，多亏了初始状态：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here''s what the rendered output looks like:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染输出如下所示：
- en: '![](Images/f6cbbd99-c074-4366-b7da-d285cdc4722c.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f6cbbd99-c074-4366-b7da-d285cdc4722c.png)'
- en: Setting the initial state isn't very exciting, but it's important nonetheless.
    Let's make the component re-render itself when the state is changed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 设置初始状态并不是很令人兴奋，但它仍然很重要。让组件在状态改变时重新渲染自己。
- en: Setting component state
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置组件状态
- en: 'Let''s create a component that has some initial state. You''ll then render
    this component, and update its state. This means that the component will be rendered
    twice. Let''s take a look at the component:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个具有一些初始状态的组件。然后渲染这个组件，并更新它的状态。这意味着组件将被渲染两次。让我们来看看这个组件：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The JSX of this component depends on two state values—`heading` and `content`.
    The component also sets the initial values of these two state values, which means
    that it can be rendered without any unexpected gotchas. Now, let''s look at some
    code that renders the component, and then re-renders it by changing the state:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件的JSX取决于两个状态值——`heading`和`content`。该组件还设置了这两个状态值的初始值，这意味着它可以在没有任何意外情况的情况下被渲染。现在，让我们看一些代码，渲染组件，然后通过改变状态重新渲染它：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The component is first rendered with its default state. However, the interesting
    spot in this code is the `setTimeout()` call. After 3 seconds, it uses `setState()`
    to change the two state property values. Sure enough, this change is reflected
    in the UI. Here''s what the initial state looks like when rendered:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先使用默认状态渲染组件。然而，这段代码中有趣的地方是`setTimeout()`的调用。3秒后，它使用`setState()`来改变两个状态属性的值。果然，这个改变在UI中得到了体现。在渲染时，初始状态如下所示：
- en: '![](Images/42c4bd4e-78b1-424d-a47e-09eb21bcefcd.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/42c4bd4e-78b1-424d-a47e-09eb21bcefcd.png)'
- en: 'Here''s what the rendered output looks like after the state change:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在状态改变后，渲染输出如下：
- en: '![](Images/acde8faf-2d3e-44d7-b06f-66c69d96140b.png)This example highlights
    the power of having declarative JSX syntax to describe the structure of the UI
    component. You declare it once, and update the state of the component over time
    to reflect changes in the application as they happen. All the DOM interactions
    are optimized and hidden from view.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/acde8faf-2d3e-44d7-b06f-66c69d96140b.png)这个例子突出了具有声明性JSX语法来描述UI组件结构的强大功能。你只需声明一次，然后随着应用程序中的变化随时间更新组件的状态以反映这些变化。所有DOM交互都经过优化并隐藏在视图之外。'
- en: In this example, you replaced the entire component state. That is, the call
    to `setState()` passed in the same object properties found in the initial state.
    But, what if you only want to update part of the component state?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你替换了整个组件状态。也就是说，调用`setState()`传入了与初始状态中找到的相同对象属性。但是，如果你只想更新组件状态的一部分呢？
- en: Merging component state
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并组件状态
- en: 'When you set the state of a React component, you''re actually merging the state
    of the component with the object that you pass to `setState()`. This is useful
    because it means that you can set part of the component state while leaving the
    rest of the state as it is. Let''s look at an example now. First, a component
    with some state:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当你设置React组件的状态时，实际上是将组件的状态与传递给`setState()`的对象进行合并。这很有用，因为这意味着你可以设置组件状态的一部分，同时保持其余状态不变。现在让我们来看一个例子。首先，一个带有一些状态的组件：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This component renders the keys and values of its state—except for `doneMessage`.
    Each value defaults to `loading...`. Let''s write some code that sets the state
    of each state property individually:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件呈现其状态的键和值——除了`doneMessage`。每个值默认为`loading...`。让我们编写一些代码，分别设置每个状态属性的状态：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The takeaway from this example is that you can set individual state properties
    on components. It will efficiently re-render itself. Here''s what the rendered
    output looks like for the initial component state:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从此示例中可以得出的结论是，您可以在组件上设置单个状态属性。它将有效地重新呈现自身。以下是初始组件状态的呈现输出：
- en: '![](Images/c2f5e541-d867-419e-8a75-ab4f73b099ee.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c2f5e541-d867-419e-8a75-ab4f73b099ee.png)'
- en: 'Here''s what the output looks like after two of the `setTimeout()` callbacks
    have run:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是两个`setTimeout()`回调运行后输出的样子：
- en: '![](Images/b0582be3-d3d4-4649-8254-69312bbd8f98.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b0582be3-d3d4-4649-8254-69312bbd8f98.png)'
- en: The fourth call to `setState()` looks different from the first three. Instead
    of passing a new object to merge into the existing state, you can pass a function.
    This function takes a state argument—the current state of the component. This
    is useful when you need to base state changes on current state values. In this
    example, the `doneMessage` value is used to set the value of `fourth`. The function
    then returns the new state of the component. It's up to you to merge existing
    state values into the new state. You can use the spread operator to do this (`...state`).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对`setState()`的第四次调用与前三次不同。您可以传递一个函数，而不是传递一个新对象以合并到现有状态中。此函数接受一个状态参数-组件的当前状态。当您需要基于当前状态值进行状态更改时，这将非常有用。在此示例中，`doneMessage`值用于设置`fourth`的值。然后函数返回组件的新状态。您需要将现有状态值合并到新状态中。您可以使用扩展运算符来执行此操作（`...state`）。
- en: Passing property values
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传递属性值
- en: Properties are like state data that gets passed into components. However, properties
    are different from state in that they're only set once, when the component is
    rendered. In this section, you'll learn about *default property values*. Then,
    we'll look at *setting property values*. After this section, you should be able
    to grasp the differences between component state and properties.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 属性就像传递到组件中的状态数据。但是，属性与状态不同之处在于它们只在组件呈现时设置一次。在本节中，您将了解*默认属性值*。然后，我们将看看*设置属性值*。在本节之后，您应该能够理解组件状态和属性之间的区别。
- en: Default property values
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认属性值
- en: 'Default property values work a little differently than default state values.
    They''re set as a class attribute called `defaultProps`. Let''s take a look at
    a component that declares default property values:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认属性值的工作方式与默认状态值略有不同。它们被设置为一个名为`defaultProps`的类属性。让我们看一个声明默认属性值的组件：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Why not just set the default property values as an instance property, like you
    would with default state? The reason is that *properties are immutable*, and there's
    no need for them to be kept as an instance property value. State, on the other
    hand, changes all the time, so the component needs an instance level reference
    to it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不像默认状态一样将默认属性值设置为实例属性？原因是*属性是不可变的*，它们不需要保留为实例属性值。另一方面，状态不断变化，因此组件需要对其进行实例级引用。
- en: 'You can see that this component sets default property values for `disabled`
    and `text`. These values are only used if they''re not passed in through the JSX
    markup used to render the component. Let''s go ahead and render this component
    without any properties, to make sure that the `defaultProps` values are used:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，此组件为`disabled`和`text`设置了默认属性值。只有在通过用于呈现组件的JSX标记未传递这些值时，才会使用这些值。让我们继续呈现此组件，而不使用任何属性，以确保使用`defaultProps`值：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The same principle of always having default state applies with properties. You
    want to be able to render components without having to know in advance what the
    dynamic values of the component are.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 始终具有默认状态的相同原则也适用于属性。您希望能够呈现组件，而无需预先知道组件的动态值是什么。
- en: Setting property values
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置属性值
- en: 'First, let''s create a couple of components that expect different types of
    property values:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一些期望不同类型的属性值的组件：
- en: In Chapter 7, *Validating Component Properties*, I'll go into more detail on
    validating the property values that are passed to components.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在第7章*验证组件属性*中，我将更详细地讨论验证传递给组件的属性值。
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This simple button component expects a boolean `disabled` property and a string `text`
    property. Let''s create one more component that expects an array property value:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的按钮组件期望一个布尔类型的`disabled`属性和一个字符串类型的`text`属性。让我们再创建一个期望一个数组属性值的组件：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can pass just about anything you want as a property value via JSX, just
    as long as it''s a valid JavaScript expression. Now let''s write some code to
    set these property values:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过JSX传递几乎任何你想要的东西作为属性值，只要它是一个有效的JavaScript表达式。现在让我们编写一些代码来设置这些属性值：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `render()` function looks like it's creating new React component instances
    every time it's called. React is smart enough to figure out that these components
    already exist, and that it only needs to figure out what the difference in output
    will be with the new property values.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`render()`函数看起来像是每次调用时都在创建新的React组件实例。React足够聪明，能够弄清楚这些组件已经存在，并且只需要弄清楚使用新的属性值时输出的差异是什么。'
- en: Another takeaway from this example is that you have an `appState` object that
    holds onto the state of the application. Pieces of this state are then passed
    into components as properties, when the components are rendered. State has to
    live somewhere, and in this case, it's outside of the component. I'll build on
    this topic in the next section, when you will learn how to implement stateless
    functional components.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个例子中得出的另一个要点是，你有一个`appState`对象，它保存了应用程序的状态。然后将这个状态的部分作为属性传递给组件，当组件被渲染时。状态必须存在于某个地方，在这种情况下，它在组件之外。我将在下一节中继续讨论这个话题，届时你将学习如何实现无状态的功能组件。
- en: Stateless components
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无状态组件
- en: The components you've seen so far in this book have been classes that extend
    the base `Component` class. It's time to learn about **functional components**
    in React. In this section, you'll learn what a functional component is by implementing
    one. Then, you'll learn how to set default property values for stateless functional
    components.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中你所见过的组件都是扩展了基础的`Component`类的类。现在是时候学习React中的**功能性组件**了。在本节中，你将通过实现一个功能性组件来学习什么是功能性组件。然后，你将学习如何为无状态的功能性组件设置默认属性值。
- en: Pure functional components
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纯函数组件
- en: A functional React component is just what it sounds like—a function. Picture
    the `render()` method of any React component that you've seen. This method, in
    essence, is the component. The job of a functional React component is to return
    JSX, just like a class-based React component. The difference is that this is all
    a functional component can do. It has no state and no lifecycle methods.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个功能性的React组件就像它听起来的那样——一个函数。想象一下你见过的任何React组件的`render()`方法。这个方法本质上就是组件。一个功能性的React组件的工作是返回JSX，就像基于类的React组件一样。不同之处在于，这是一个功能性组件可以做的全部。它没有状态和生命周期方法。
- en: Why would you want to use functional components? It's a matter of simplicity
    more than anything else. If your component renders some JSX and does nothing else,
    then why bother with a class when a function is simpler?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要使用函数组件？这更多是简单性的问题。如果你的组件只渲染一些JSX而不做其他事情，那么为什么要使用类，而不是一个函数更简单呢？
- en: A **pure function** is a function without side effects. That is to say, called
    with a given set of arguments, the function always produces the same output. This
    is relevant for React components because, given a set of properties, it's easier
    to predict what the rendered content will be. Functions that always return the
    same value with a given argument values are easier to test as well.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**纯函数**是没有副作用的函数。也就是说，给定一组参数调用函数时，函数总是产生相同的输出。这对于React组件是相关的，因为给定一组属性，更容易预测渲染的内容会是什么。总是返回相同值的函数在测试时也更容易。'
- en: 'Let''s look at a functional component now:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一个函数组件：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Concise, isn''t it? This function returns a `<button>` element, using the properties
    passed in as arguments (instead of accessing them through `this.props`). This
    function is pure because the same content is rendered if the same `disabled` and
    `text` property values are passed. Now, let''s see how to render this component:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 简洁明了，不是吗？这个函数返回一个`<button>`元素，使用传入的属性作为参数（而不是通过`this.props`访问它们）。这个函数是纯的，因为如果传入相同的`disabled`和`text`属性值，就会渲染相同的内容。现在，让我们看看如何渲染这个组件：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There's zero difference between class-based and function-based React components,
    from a JSX point of view. The JSX looks exactly the same whether the component
    was declared using class or function syntax.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从JSX的角度来看，基于类和基于函数的React组件没有任何区别。无论是使用类还是函数语法声明的组件，JSX看起来都是一样的。
- en: The convention is to use arrow function syntax to declare functional React components.
    However, it's perfectly valid to declare them using traditional JavaScript function
    syntax, if that's better suited to your style.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 惯例是使用箭头函数语法来声明功能性的React组件。然而，如果传统的JavaScript函数语法更适合你的风格，也是完全有效的。
- en: 'Here''s what the rendered HTML looks like:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染后的HTML如下所示：
- en: '![](Images/ce97845e-5e19-4a46-953d-82a3e96c2e96.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ce97845e-5e19-4a46-953d-82a3e96c2e96.png)'
- en: Defaults in functional components
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数组件中的默认值
- en: 'Functional components are lightweight; they don''t have any state or lifecycle.
    They do, however, support some **metadata** options. For example, you can specify
    the default property values of functional components the same way you would with
    a class component. Here''s an example of what this looks like:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 函数组件很轻量；它们没有任何状态或生命周期。然而，它们支持一些**元数据**选项。例如，你可以像类组件一样指定函数组件的默认属性值。下面是一个示例：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `defaultProps` property is defined on a function instead of a class. When
    React encounters a functional component with this property, it knows to pass in
    the defaults if they're not provided via JSX.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`defaultProps`属性是在函数上定义的，而不是在类上。当React遇到具有此属性的函数组件时，它知道如果没有通过JSX提供默认值，就会传递默认值。'
- en: Container components
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器组件
- en: In this section, you're going to learn the concept of **container components**.
    This is a common React pattern, and it brings together many of the concepts that
    you've learned about state and properties.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将学习**容器组件**的概念。这是一个常见的React模式，它汇集了你所学到的关于状态和属性的许多概念。
- en: 'The basic premise of container components is simple: don''t couple data fetching
    with the component that renders the data. The container is responsible for fetching
    the data and passing it to its child component. It contains the component responsible
    for rendering the data.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 容器组件的基本原则很简单：不要将数据获取与渲染数据的组件耦合在一起。容器负责获取数据并将其传递给其子组件。它包含负责渲染数据的组件。
- en: 'The idea is that you should be able to achieve some level of **substitutability**
    with this pattern. For example, a container could substitute its child component.
    Or, a child component could be used in a different container. Let''s see the container
    pattern in action, starting with the container itself:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模式的目的是让你能够在一定程度上实现**可替换性**。例如，一个容器可以替换它的子组件。或者，一个子组件可以在不同的容器中使用。让我们看看容器模式的实际应用，从容器本身开始：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The job of this component is to fetch data and to set its state. Any time the
    state is set, `render()` is called. This is where the *child component* comes
    in. The state of the container is passed to the child as properties. Let''s take
    a look at the `MyList` component next:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件的工作是获取数据并设置它的状态。每当状态被设置时，`render()`就会被调用。这就是*子组件*的作用。容器的状态被传递给子组件作为属性。接下来让我们来看一下`MyList`组件：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`MyList` is a functional component that expects an `items` property. Let''s
    see how the container component is actually used:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyList`是一个期望有一个`items`属性的函数组件。让我们看看容器组件实际上是如何使用的：'
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Container component design will be covered in more depth in [Chapter 5](1e488811-5fba-4e61-a5b7-7b0a1da4ec0b.xhtml),
    *Crafting Reusable Components*. The idea of this example was to give you a feel
    for the interplay between state and properties in React components.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 容器组件设计将在[第5章](1e488811-5fba-4e61-a5b7-7b0a1da4ec0b.xhtml)中更深入地介绍，*Crafting Reusable
    Components*。这个例子的目的是让你感受一下在React组件中状态和属性之间的相互作用。
- en: 'When you load the page, you''ll see the following content rendered after the
    3 seconds it takes to simulate an HTTP request:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当你加载页面时，你会在模拟HTTP请求需要3秒后看到以下内容被渲染出来：
- en: '![](Images/26ac6029-21c3-4f11-9b88-6725adf88629.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/26ac6029-21c3-4f11-9b88-6725adf88629.png)'
- en: Providing and consuming context
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供和消费上下文
- en: As your React application grows, it will use more components. Not only will
    it have more components, but the structure of your application will change so
    that components are nested more deeply. The components that are nested at the
    deepest level still need to have data passed to them. Passing data from a parent
    component to a child component isn't a big deal. The challenge is when you have
    to start using components as indirection for passing data around your app.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你的React应用程序的增长，它将使用更多的组件。它不仅会有更多的组件，而且你的应用程序的结构将发生变化，使得组件嵌套更深。嵌套在最深层级的组件仍然需要传递数据给它们。从父组件向子组件传递数据并不是什么大问题。挑战在于当你不得不开始使用组件作为传递数据的间接方式时。
- en: For data that needs to make its way to any component in your app, you can create
    and use a context. There are two key concepts to remember when using contexts
    in React—providers and consumers. A **context provider** creates data and makes
    sure that it's available to any React components. A **context consumer** is a
    component that uses this data within the context.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要传递到应用程序中任何组件的数据，你可以创建并使用一个上下文。在使用React中上下文时，有两个关键概念要记住——提供者和消费者。**上下文提供者**创建数据并确保它对任何React组件都可用。**上下文消费者**是一个在上下文中使用这些数据的组件。
- en: You might be wondering whether or not context is just another way of saying
    global data in a React application. Essentially, this is exactly what contexts
    are used for. Using the React approach to wrapping components with a context works
    better than creating global data because you have better control of how your data
    flows down through your components. For example, you can have nested contexts
    and a number of other advanced use cases. But for now, let's just focus on simple
    usage.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道上下文是否只是在React应用程序中说全局数据的另一种方式。基本上，这正是上下文的用途。使用React的方法将组件与上下文包装在一起比创建全局数据更好，因为你可以更好地控制数据如何流经你的组件。例如，你可以有嵌套的上下文和许多其他高级用例。但现在，让我们只关注简单的用法。
- en: Let's say that you have some application data that determines permissions for
    given application features. This data could be fetched from an API or it could
    be hardcoded. In either case, the requirement is that you don't want to have to
    pass all of this permission data through the component tree. It would be nice
    if the permission data were just there, for any component that needs it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一些应用程序数据，用于确定给定应用程序功能的权限。这些数据可以从API中获取，也可以是硬编码的。无论哪种情况，要求是您不希望通过组件树传递所有这些权限数据。如果权限数据只需存在，供任何需要它的组件使用，那就太好了。
- en: 'Starting at the very top of the component tree, let''s look at `index.js`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从组件树的顶部开始，让我们看一下`index.js`：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `<App>` component is the child of the `<PermissionProvider>` component.
    This means that the permission context has been provided to the `<App>` component
    and any of its children, all the way down the tree. Let''s take a look at the
    `PermissionContext.js` module where the permission context is defined:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`<App>`组件是`<PermissionProvider>`组件的子组件。这意味着权限上下文已经提供给了`<App>`组件及其所有子组件，一直到树的最底部。让我们看一下定义权限上下文的`PermissionContext.js`模块。'
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `createContext()` function is used to create the actual context. The return
    value is an object containing two components—`Provider` and `Consumer`. Next,
    there's a simple abstraction for the permission provider that's to be used all
    throughout the app. The state contains the actual data that components might want
    to use. In this example, if the value is true, the feature should be displayed
    as normal. If it's false, then the feature doesn't have permission to render.
    Here, the state is only set once, but since this is a regular React component,
    you could set the state the same way you would set the state on any other component.
    The value that's rendered is the `<Provider>` component. This provides any children
    with context data, set via the `value` property.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`createContext()`函数用于创建实际的上下文。返回值是一个包含两个组件——`Provider`和`Consumer`的对象。接下来，有一个用于整个应用程序的权限提供者的简单抽象。状态包含组件可能想要使用的实际数据。在这个例子中，如果值为true，则应该正常显示该功能。如果为false，则该功能没有权限进行渲染。在这里，状态只设置一次，但由于这是一个常规的React组件，您可以像在任何其他组件上设置状态一样设置状态。渲染的值是`<Provider>`组件。这通过`value`属性为任何子组件提供上下文数据。'
- en: Next, there's a small abstraction for permission consumers. Instead of having
    every component that needs to test for permissions implement the same logic over
    and over, the `PermissionConsumer` component can do it. The child of the `<Consumer>`
    component is always a function that takes the context data as an argument. In
    this example, the `PermissionConsumer` component has a `name` prop, for the name
    of the feature. This is compared with the value from the context and if it's false,
    nothing is rendered.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，有一个用于权限消费者的小抽象。不是让每个需要测试权限的组件一遍又一遍地实现相同的逻辑，`PermissionConsumer`组件可以做到。`<Consumer>`组件的子组件始终是一个以上下文数据作为参数的函数。在这个例子中，`PermissionConsumer`组件有一个`name`属性，用于功能的名称。这与上下文中的值进行比较，如果为false，则不会渲染任何内容。
- en: 'Now let''s look at the `App` component:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下`App`组件：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This component renders three components that are features and each need to check
    for permissions. Without the context functionality of React, you would have to
    pass this data as properties to each of these components through this component.
    If `<First>` had children or grandchildren that needed to check permissions, the
    same property-passing mechanism can get quite messy.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件渲染了三个需要检查权限的功能组件。如果没有React的上下文功能，您将不得不通过这个组件将这些数据作为属性传递给每个组件。如果`<First>`有需要检查权限的子组件或孙子组件，相同的属性传递机制可能会变得非常混乱。
- en: 'Now let''s take a look at the `<First>` component (the `<Second>` and `<Third>`
    are almost exactly the same):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下`<First>`组件（`<Second>`和`<Third>`几乎完全相同）：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This is where the `PermissionConsumer` component is put to use. You just need
    to supply it with a `name` property, and the child component is the component
    that is rendered if the permission check passes. The `<PermissionConsumer>` component
    can be used anywhere, and there''s no need to pass data in order to use it. Here''s
    what the rendered output of these three components looks like:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`PermissionConsumer`组件的用法。您只需要为其提供一个`name`属性，如果权限检查通过，则子组件将被渲染。`<PermissionConsumer>`组件可以在任何地方使用，无需传递数据即可使用。以下是这三个组件的渲染输出：
- en: '![](Images/e83d35dc-0f8a-4cd7-af4f-8b26ba753c59.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e83d35dc-0f8a-4cd7-af4f-8b26ba753c59.png)'
- en: The second component isn't rendered because its permission in the `PermissionProvider`
    component is set to false.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个组件没有被渲染，因为它在`PermissionProvider`组件中的权限被设置为false。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about state and properties in React components.
    You started off by defining and comparing the two concepts. Then, you implemented
    several React components and manipulated their state. Next, you learned about
    properties by implementing code that passed property values from JSX to the component.
    Next, you were introduced to the concept of a container component, used to decouple
    data fetching from rendering content. Finally, you learned about the new context
    API in React 16 and how to use it to avoid introducing indirection in your components.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了React组件中的状态和属性。您首先定义并比较了这两个概念。然后，您实现了几个React组件并操纵了它们的状态。接下来，您通过实现了从JSX传递属性值到组件的代码来了解了属性。然后，您了解了容器组件的概念，用于将数据获取与呈现内容解耦。最后，您了解了React
    16中的新上下文API以及如何使用它来避免在组件中引入间接性。
- en: In the next chapter, you'll learn about handling user events in React components.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何处理React组件中的用户事件。
- en: Test your knowledge
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的知识
- en: Why is it always a good idea to initialize the state of a component?
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么始终初始化组件的状态是个好主意？
- en: Because if you don't, React will throw an error when you try to render.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为如果不这样做，当您尝试渲染时，React将抛出错误。
- en: Because React won't know what types you have in your component state and won't
    be able to optimize rendering.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为React不知道您在组件状态中有什么类型，并且无法优化渲染。
- en: Because if the `render()` method expects state values, you need to make sure
    they're always there to avoid unexpected rendering behavior.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为如果`render()`方法期望状态值，您需要确保它们始终存在，以避免意外的渲染行为。
- en: When should you use properties instead of state?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么时候应该使用属性而不是状态？
- en: State should only be used for values that can change. For everything else, properties
    should be used.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 状态应该只用于可以更改的值。对于其他所有情况，应该使用属性。
- en: You should avoid state wherever possible.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽量避免使用状态。
- en: You should only use properties to update existing state.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该只使用属性来更新现有状态。
- en: What is a context in React?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是React中的上下文？
- en: Context is how you pass event handler functions to different components in your
    app.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上下文是您如何将事件处理程序函数传递给应用程序中的不同组件的方法。
- en: Context is used to avoid transient properties. Contexts are used to share common
    data with a select number of components.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上下文用于避免瞬态属性。上下文用于与少数组件共享公共数据。
- en: Context is like state that's shared between components.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上下文就像在组件之间共享的状态。
- en: Further reading
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Visit following links for more information:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下链接获取更多信息：
- en: '[https://reactjs.org/docs/react-component.html#instance-properties-1](https://reactjs.org/docs/react-component.html#instance-properties-1)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/react-component.html#instance-properties-1](https://reactjs.org/docs/react-component.html#instance-properties-1)'
- en: '[https://reactjs.org/docs/react-without-es6.html#setting-the-initial-state](https://reactjs.org/docs/react-without-es6.html#setting-the-initial-state)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/react-without-es6.html#setting-the-initial-state](https://reactjs.org/docs/react-without-es6.html#setting-the-initial-state)'
- en: '[https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html)'
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)'
