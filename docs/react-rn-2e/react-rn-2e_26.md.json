["```jsx\nimport {\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString\n} from 'graphql';\nimport {\n  connectionArgs,\n  connectionDefinitions,\n  connectionFromArray,\n  cursorForObjectInConnection,\n  fromGlobalId,\n  globalIdField,\n  mutationWithClientMutationId,\n  nodeDefinitions,\n  toGlobalId\n} from 'graphql-relay';\n\nimport {\n  Todo,\n  User,\n  addTodo,\n  changeTodoStatus,\n  getTodo,\n  getTodos,\n  getUser,\n  getViewer,\n  markAllTodos,\n  removeCompletedTodos,\n  removeTodo,\n  renameTodo\n} from './database';\n\nconst { nodeInterface, nodeField } = nodeDefinitions(\n  globalId => {\n    const { type, id } = fromGlobalId(globalId);\n    if (type === 'Todo') {\n      return getTodo(id);\n    }\n    if (type === 'User') {\n      return getUser(id);\n    }\n    return null;\n  },\n  obj => {\n    if (obj instanceof Todo) {\n      return GraphQLTodo;\n    }\n    if (obj instanceof User) {\n      return GraphQLUser;\n    }\n    return null;\n  }\n);\n\nconst GraphQLTodo = new GraphQLObjectType({\n  name: 'Todo',\n  fields: {\n    id: globalIdField(),\n    complete: { type: GraphQLBoolean },\n    text: { type: GraphQLString }\n  },\n  interfaces: [nodeInterface]\n});\n\nconst {\n  connectionType: TodosConnection,\n  edgeType: GraphQLTodoEdge\n} = connectionDefinitions({ nodeType: GraphQLTodo });\n\nconst GraphQLUser = new GraphQLObjectType({\n  name: 'User',\n  fields: {\n    id: globalIdField(),\n    todos: {\n      type: TodosConnection,\n      args: {\n        status: {\n          type: GraphQLString,\n          defaultValue: 'any'\n        },\n        ...connectionArgs\n      },\n      resolve: (obj, { status, ...args }) =>\n        connectionFromArray(getTodos(status), args)\n    },\n    numTodos: {\n      type: GraphQLInt,\n      resolve: () => getTodos().length\n    },\n    numCompletedTodos: {\n      type: GraphQLInt,\n      resolve: () => getTodos('completed').length\n    }\n  },\n  interfaces: [nodeInterface]\n});\n\nconst GraphQLRoot = new GraphQLObjectType({\n  name: 'Root',\n  fields: {\n    viewer: {\n      type: GraphQLUser,\n      resolve: getViewer\n    },\n    node: nodeField\n  }\n});\n\nconst GraphQLAddTodoMutation = mutationWithClientMutationId({\n  name: 'AddTodo',\n  inputFields: {\n    text: { type: new GraphQLNonNull(GraphQLString) }\n  },\n  outputFields: {\n    viewer: {\n      type: GraphQLUser,\n      resolve: getViewer\n    },\n    todoEdge: {\n      type: GraphQLTodoEdge,\n      resolve: ({ todoId }) => {\n        const todo = getTodo(todoId);\n        return {\n          cursor: cursorForObjectInConnection(getTodos(), todo),\n          node: todo\n        };\n      }\n    }\n  },\n  mutateAndGetPayload: ({ text }) => {\n    const todoId = addTodo(text);\n    return { todoId };\n  }\n});\n\nconst GraphQLChangeTodoStatusMutation = mutationWithClientMutationId({\n  name: 'ChangeTodoStatus',\n  inputFields: {\n    id: { type: new GraphQLNonNull(GraphQLID) },\n    complete: { type: new GraphQLNonNull(GraphQLBoolean) }\n  },\n  outputFields: {\n    viewer: {\n      type: GraphQLUser,\n      resolve: getViewer\n    },\n    todo: {\n      type: GraphQLTodo,\n      resolve: ({ todoId }) => getTodo(todoId)\n    }\n  },\n  mutateAndGetPayload: ({ id, complete }) => {\n    const { id: todoId } = fromGlobalId(id);\n    changeTodoStatus(todoId, complete);\n    return { todoId };\n  }\n});\n\nconst GraphQLMarkAllTodosMutation = mutationWithClientMutationId({\n  name: 'MarkAllTodos',\n  inputFields: {\n    complete: { type: new GraphQLNonNull(GraphQLBoolean) }\n  },\n  outputFields: {\n    viewer: {\n      type: GraphQLUser,\n      resolve: getViewer\n    },\n    changedTodos: {\n      type: new GraphQLList(GraphQLTodo),\n      resolve: ({ changedTodoIds }) => changedTodoIds.map(getTodo)\n    }\n  },\n  mutateAndGetPayload: ({ complete }) => {\n    const changedTodoIds = markAllTodos(complete);\n    return { changedTodoIds };\n  }\n});\n\nconst GraphQLRemoveCompletedTodosMutation = mutationWithClientMutationId(\n  {\n    name: 'RemoveCompletedTodos',\n    outputFields: {\n      viewer: {\n        type: GraphQLUser,\n        resolve: getViewer\n      },\n      deletedIds: {\n        type: new GraphQLList(GraphQLString),\n        resolve: ({ deletedIds }) => deletedIds\n      }\n    },\n    mutateAndGetPayload: () => {\n      const deletedTodoIds = removeCompletedTodos();\n      const deletedIds = deletedTodoIds.map(\n        toGlobalId.bind(null, 'Todo')\n      );\n      return { deletedIds };\n    }\n  }\n);\n\nconst GraphQLRemoveTodoMutation = mutationWithClientMutationId({\n  name: 'RemoveTodo',\n  inputFields: {\n    id: { type: new GraphQLNonNull(GraphQLID) }\n  },\n  outputFields: {\n    viewer: {\n      type: GraphQLUser,\n      resolve: getViewer\n    },\n    deletedId: {\n      type: GraphQLID,\n      resolve: ({ id }) => id\n    }\n  },\n  mutateAndGetPayload: ({ id }) => {\n    const { id: todoId } = fromGlobalId(id);\n    removeTodo(todoId);\n    return { id };\n  }\n});\n\nconst GraphQLRenameTodoMutation = mutationWithClientMutationId({\n  name: 'RenameTodo',\n  inputFields: {\n    id: { type: new GraphQLNonNull(GraphQLID) },\n    text: { type: new GraphQLNonNull(GraphQLString) }\n  },\n  outputFields: {\n    todo: {\n      type: GraphQLTodo,\n      resolve: ({ todoId }) => getTodo(todoId)\n    }\n  },\n  mutateAndGetPayload: ({ id, text }) => {\n    const { id: todoId } = fromGlobalId(id);\n    renameTodo(todoId, text);\n    return { todoId };\n  }\n});\n\nconst GraphQLMutation = new GraphQLObjectType({\n  name: 'Mutation',\n  fields: {\n    addTodo: GraphQLAddTodoMutation,\n    changeTodoStatus: GraphQLChangeTodoStatusMutation,\n    markAllTodos: GraphQLMarkAllTodosMutation,\n    removeCompletedTodos: GraphQLRemoveCompletedTodosMutation,\n    removeTodo: GraphQLRemoveTodoMutation,\n    renameTodo: GraphQLRenameTodoMutation\n  }\n});\n\nexport default new GraphQLSchema({\n  query: GraphQLRoot,\n  mutation: GraphQLMutation\n});\n\n```", "```jsx\nconst GraphQLAddTodoMutation = mutationWithClientMutationId({\n  name: 'AddTodo',\n  inputFields: {\n    text: { type: new GraphQLNonNull(GraphQLString) }\n  },\n  outputFields: {\n    viewer: {\n      type: GraphQLUser,\n      resolve: getViewer\n    },\n    todoEdge: {\n      type: GraphQLTodoEdge,\n      resolve: ({ todoId }) => {\n        const todo = getTodo(todoId);\n        return {\n          cursor: cursorForObjectInConnection(getTodos(), todo),\n          node: todo\n        };\n      }\n    }\n  },\n  mutateAndGetPayload: ({ text }) => {\n    const todoId = addTodo(text);\n    return { todoId };\n  }\n}); \n```", "```jsx\nexport default new GraphQLSchema({\n  query: GraphQLRoot,\n  mutation: GraphQLMutation\n}); \n```", "```jsx\nimport React from 'react';\nimport { View, Text } from 'react-native';\nimport { Network } from 'relay-local-schema';\nimport { Environment, RecordSource, Store } from 'relay-runtime';\nimport { QueryRenderer, graphql } from 'react-relay';\n\nimport schema from './data/schema';\nimport styles from './styles';\nimport TodoInput from './TodoInput';\nimport TodoList from './TodoList';\n\nif (typeof Buffer === 'undefined')\n  global.Buffer = require('buffer').Buffer;\n\nconst environment = new Environment({\n  network: Network.create({ schema }),\n  store: new Store(new RecordSource())\n});\n\nexport default () => (\n  <QueryRenderer\n    environment={environment}\n    query={graphql`\n      query App_Query($status: String!) {\n        viewer {\n          ...TodoList_viewer\n        }\n      }\n    `}\n    variables={{ status: 'any' }}\n    render={({ error, props }) => {\n      if (error) {\n        return <Text>Error!</Text>;\n      }\n      if (!props) {\n        return <Text>Loading...</Text>;\n      }\n      return (\n        <View style={styles.container}>\n          <TodoInput environment={environment} {...props} />\n          <TodoList {...props} />\n        </View>\n      );\n    }}\n  />\n); \n```", "```jsx\nconst environment = new Environment({\n  network: Network.create({ schema }),\n  store: new Store(new RecordSource())\n});\n```", "```jsx\nquery={graphql`\n  query App_Query($status: String!) {\n    viewer {\n      ...TodoList_viewer\n    }\n  }\n`}\n```", "```jsx\nvariables={{ status: 'any' }}\n```", "```jsx\nrender={({ error, props }) => {\n  if (error) {\n    return <Text>Error!</Text>;\n  }\n  if (!props) {\n    return <Text>Loading...</Text>;\n  }\n  return (\n    <View style={styles.container}>\n      <TodoInput environment={environment} {...props} />\n      <TodoList {...props} />\n    </View>\n  );\n}}\n```", "```jsx\nimport React, { Component } from 'react';\nimport { TextInput } from 'react-native';\n\nimport styles from './styles';\nimport AddTodoMutation from './mutations/AddTodoMutation';\n\nexport default class App extends Component {\n  onSubmitEditing = ({ nativeEvent: { text } }) => {\n    const { environment, viewer } = this.props;\n    AddTodoMutation.commit(environment, viewer, text);\n  };\n\n  render() {\n    return (\n      <TextInput\n        style={styles.textInput}\n        placeholder=\"What needs to be done?\"\n        onSubmitEditing={this.onSubmitEditing}\n      />\n    );\n  }\n} \n```", "```jsx\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { View } from 'react-native';\nimport { createFragmentContainer, graphql } from 'react-relay';\n\nimport Todo from './Todo';\n\nclass TodoList extends Component {\n  static propTypes = {\n    viewer: PropTypes.object.isRequired,\n    relay: PropTypes.object.isRequired\n  };\n\n  static contextTypes = {\n    relay: PropTypes.shape({\n      variables: PropTypes.shape({\n        status: PropTypes.string.isRequired\n      }).isRequired\n    }).isRequired\n  };\n\n  render() {\n    const { viewer } = this.props;\n    return (\n      <View>\n        {viewer.todos.edges.map(edge => (\n          <Todo key={edge.node.id} viewer={viewer} todo={edge.node} />\n        ))}\n      </View>\n    );\n  }\n}\n\nexport default createFragmentContainer(\n  TodoList,\n  graphql`\n    fragment TodoList_viewer on User {\n      todos(status: $status, first: 2147483647)\n        @connection(key: \"TodoList_todos\") {\n        edges {\n          node {\n            id\n            complete\n            ...Todo_todo\n          }\n        }\n      }\n      id\n      numTodos\n      numCompletedTodos\n      ...Todo_viewer\n    }\n  `\n); \n```", "```jsx\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { createFragmentContainer, graphql } from 'react-relay';\nimport { Text, View, Switch } from 'react-native';\n\nimport ChangeTodoStatusMutation from './mutations/ChangeTodoStatusMutation';\nimport styles from './styles';\n\nconst completeStyleMap = new Map([\n  [true, { textDecorationLine: 'line-through' }],\n  [false, {}]\n]);\n\nclass Todo extends Component {\n  static propTypes = {\n    viewer: PropTypes.object.isRequired,\n    todo: PropTypes.object.isRequired,\n    relay: PropTypes.object.isRequired\n  };\n\n  onValueChange = value => {\n    const { relay, viewer, todo } = this.props;\n\n    ChangeTodoStatusMutation.commit(\n      relay.environment,\n      viewer,\n      todo,\n      value\n    );\n  };\n\n  render() {\n    const {\n      todo: { text, complete }\n    } = this.props;\n\n    return (\n      <View style={styles.todoItem}>\n        <Switch value={complete} onValueChange={this.onValueChange} />\n        <Text style={completeStyleMap.get(complete)}>{text}</Text>\n      </View>\n    );\n  }\n}\n\nexport default createFragmentContainer(Todo, {\n  viewer: graphql`\n    fragment Todo_viewer on User {\n      id\n    }\n  `,\n  todo: graphql`\n    fragment Todo_todo on Todo {\n      id\n      complete\n      text\n    }\n  `\n}); \n```"]