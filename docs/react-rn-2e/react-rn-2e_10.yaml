- en: Server-Side React Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端React组件
- en: Everything that you've learned so far in this book has been React code that
    runs in web browsers. React isn't confined to the browser for rendering, and in
    this chapter, you'll learn how to render components from a Node.js server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你在本书中学到的所有内容都是在Web浏览器中运行的React代码。React并不局限于浏览器进行渲染，在本章中，你将学习如何从Node.js服务器渲染组件。
- en: The first section of this chapter briefly touches upon high-level server rendering
    concepts. The next four sections go into depth, teaching you how to implement
    the most crucial aspects of server-side rendering with React and Next.js.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一部分简要介绍了高级服务器渲染概念。接下来的四个部分将深入探讨，教你如何使用React和Next.js实现服务器端渲染的最关键方面。
- en: What is isomorphic JavaScript?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是同构JavaScript？
- en: Another term for **server-side rendering** is **isomorphic JavaScript**. This
    is a fancy way of saying JavaScript code that can run in the browser and in Node.js
    without modification. In this section, you'll learn the basic concepts of isomorphic
    JavaScript before diving into code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器端渲染**的另一个术语是**同构JavaScript**。这是一种花哨的说法，表示JavaScript代码可以在浏览器和Node.js中运行，而无需修改。在本节中，你将学习同构JavaScript的基本概念，然后深入到代码中。'
- en: The server is a render target
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器是一个渲染目标
- en: The beauty of React is that it's a small abstraction layer that sits on top
    of a rendering target. So far, the target has been the browser, but it can also
    be the server. The render target can be anything, just as long as the correct
    translation calls are implemented behind the scenes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: React的美妙之处在于它是一个小的抽象层，位于渲染目标的顶部。到目前为止，目标一直是浏览器，但也可以是服务器。渲染目标可以是任何东西，只要在幕后实现了正确的翻译调用。
- en: 'In the case of rendering on the server, components are rendered to strings.
    The server can''t actually display rendered HTML; all it can do is send the rendered
    markup to the browser. The idea is illustrated in the following diagram:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上进行渲染时，组件被渲染为字符串。服务器实际上无法显示渲染的HTML；它所能做的就是将渲染的标记发送到浏览器。这个想法在下图中有所说明：
- en: '![](Images/77166a87-3979-4c13-ba5d-00af63f94795.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/77166a87-3979-4c13-ba5d-00af63f94795.png)'
- en: It's possible to render a React component on the server and send the rendered
    output to the browser. The question is, why would you want to do this on the server
    instead of in the browser?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上渲染React组件并将渲染输出发送到浏览器是可能的。问题是，为什么你想在服务器上这样做，而不是在浏览器上呢？
- en: Initial load performance
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始加载性能
- en: The main motivation behind server-side rendering, for me personally, is improved
    performance. In particular, the initial rendering just feels faster for the user
    and this translates to an overall better user experience. It doesn't matter how
    fast your application is once it's loaded and ready to go; it's the initial load
    time that leaves a lasting impression on your users.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对我个人来说，服务器端渲染背后的主要动机是提高性能。特别是，初始渲染对用户来说感觉更快，这会转化为更好的用户体验。一旦应用程序加载并准备就绪，它有多快并不重要；初始加载时间对用户留下了深刻的印象。
- en: 'There are three reasons that this approach means better performance for the
    initial load:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有三个原因可以提高初始加载的性能：
- en: The rendering that takes place on the server is generating a string; there's
    no need to compute a difference or to interact with the DOM in any way. Producing
    a string of rendered markup is inherently faster than rendering components in
    the browser.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务器上进行的渲染生成了一个字符串；不需要计算差异或以任何方式与DOM交互。生成一串渲染标记的速度本质上比在浏览器中渲染组件要快。
- en: The rendered HTML is displayed as soon as it arrives. Any JavaScript code that
    needs to run on the initial load is run after the user is already looking at the
    content.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 呈现的HTML一旦到达就会显示。任何需要在初始加载时运行的JavaScript代码都是在用户已经看到内容之后运行的。
- en: There are fewer network requests to fetch data from the API, because these have
    already happened on the server and the server typically has vastly more resources
    than a single client.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从API获取数据的网络请求更少，因为这些请求已经在服务器上发生，而服务器通常比单个客户端拥有更多的资源。
- en: 'The following diagram illustrates these performance ideas:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了这些性能思想：
- en: '![](Images/8c12fc51-253b-43fa-871b-cdae1b6a5f38.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8c12fc51-253b-43fa-871b-cdae1b6a5f38.png)'
- en: Sharing code between the server and the browser
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在服务器和浏览器之间共享代码
- en: There's a good chance that your application will need to talk to API endpoints
    that are out of your control, for example, an application that is composed from
    many different microservice endpoints. It's rare that you can use data from these
    services without modification. Rather, you have to write code that transforms
    data so that it's usable by your React components.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序很有可能需要与你无法控制的API端点进行通信，例如，由许多不同的微服务端点组成的应用程序。很少有可能直接使用这些服务的数据而不经过修改。相反，你需要编写代码来转换数据，以便React组件可以使用。
- en: If you're rendering your components on a Node.js server, then this data transformation
    code will be used by both the client and the server, because on the initial load,
    the server will need to talk to the API, and later on, the component in the browser
    will need to talk to the API.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Node.js服务器上呈现你的组件，那么这个数据转换代码将被客户端和服务器同时使用，因为在初始加载时，服务器需要与API通信，而后来浏览器中的组件需要与API通信。
- en: It's not just about transforming the data that's returned from these services
    either. For example, you have to think about providing input to them as well,
    like when creating or modifying resources.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅仅是关于转换从这些服务返回的数据。例如，你还需要考虑提供给它们的输入，比如创建或修改资源时。
- en: The fundamental adjustment that you'll need to make as a React programmer is
    to assume that any given component that you implement will need to be rendered
    on the server. This may seem like a minor adjustment, but the devil is in the
    detail. Speaking of which, let's jump into some code examples now.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为React程序员，你需要做的基本调整是假设你实现的任何组件都需要在服务器上呈现。这可能看起来像是一个小的调整，但细节中藏着魔鬼。说到细节，现在让我们来看一些代码示例。
- en: Rendering to strings
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 呈现为字符串
- en: 'Rendering components in Node.js means rendering to strings, instead of trying
    to figure out the best way to insert them into the DOM. The string content is
    then returned to the browser, which displays this to the user immediately. Let''s
    look at an example. First, the component to render:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js中呈现组件意味着呈现为字符串，而不是试图找出将它们插入DOM的最佳方法。然后将字符串内容返回给浏览器，浏览器立即显示给用户。让我们来看一个例子。首先，要呈现的组件：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, let''s implement the server that will render this component when the
    browser asks for it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们实现服务器，当浏览器请求时，它将呈现这个组件：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now if you visit [http://127.0.0.1:8080](http://127.0.0.1:8080) in your browser,
    you''ll see the rendered component content:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你在浏览器中访问[http://127.0.0.1:8080](http://127.0.0.1:8080)，你会看到呈现的组件内容：
- en: '![](Images/5aef47b3-ea22-473b-a86f-b38551709050.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5aef47b3-ea22-473b-a86f-b38551709050.png)'
- en: There are two things to pay attention to with this example. First, there's the
    `doc()` function. This creates the basic HTML document template with a placeholder
    for rendered React content. The second is the call to `renderToString()` , which
    is just like the `render()` call that you're used to. This is called in the server
    request handler and the rendered string is sent to the browser.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中有两件事情需要注意。首先是`doc()`函数。它创建了带有渲染的React内容占位符的基本HTML文档模板。第二个是对`renderToString()`的调用，就像你习惯的`render()`调用一样。这是在服务器请求处理程序中调用的，渲染的字符串被发送到浏览器。
- en: Backend routing
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后端路由
- en: In the preceding example, you implemented a single request handler in the server
    that responded to requests for the root URL (`/`). Your application is going to
    need to handle more than a single route. You learned how to use the `react-router`
    package for routing in the previous chapter. Now, you're going to see how to use
    the same package in Node.js.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的例子中，你在服务器上实现了一个单一的请求处理程序，用于响应根URL(`/`)的请求。你的应用程序需要处理不止一个路由。在上一章中，你学会了如何在路由中使用`react-router`包。现在，你将看到如何在Node.js中使用相同的包。 '
- en: 'First, let''s take a look at the main `App` component:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下主要的`App`组件：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are three routes that this application handles:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序处理三条路线：
- en: '`/`: The home page'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/`：首页'
- en: '`/first`: The first page of content'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/first`：第一页内容'
- en: '`/second`: The second page of content'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/second`：第二页内容'
- en: The `App` content is divided into `<header>` and `<main>` elements. In each
    of these sections, there is a `<Route>` component that handles the appropriate
    content. For example, the main content for the `/` route is handled by a `render()`
    function that renders links to `/first` and `/second`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`App`内容分为`<header>`和`<main>`元素。在每个部分中，都有一个处理适当内容的`<Route>`组件。例如，`/`路由的主要内容由一个`render()`函数处理，该函数呈现到`/first`和`/second`的链接。'
- en: 'This component will work fine on the client, but will it work on the server?
    Let''s implement that now:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件在客户端上可以正常工作，但在服务器上会工作吗？让我们现在实现一下：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You now have both frontend and backend routing! How does this work exactly?
    Let's start with the request handler path. This has changed this so that it's
    now a wildcard (`/*`). Now this handler is called for every request.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了前端和后端路由！这到底是如何工作的？让我们从请求处理程序路径开始。这已经改变了，现在是通配符(`/*`)。现在这个处理程序会对每个请求进行调用。
- en: On the server, the `<StaticRouter>` component is used instead of the `<BrowserRouter>`
    component. The `<App>` component is the child, which means that the `<Route>`
    components within will be passed data from `<StaticRouter>`. This is how `<App>`
    knows to render the correct content based on the URL.  The resulting `html` value
    that results from calling `renderToString()` can then be used as part of the document
    that's sent to the browser as a response.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上，使用`<StaticRouter>`组件代替`<BrowserRouter>`组件。`<App>`组件是子组件，这意味着其中的`<Route>`组件将从`<StaticRouter>`传递数据。这就是`<App>`如何知道根据URL呈现正确的内容。调用`renderToString()`得到的`html`值可以作为发送给浏览器的响应文档的一部分。
- en: 'Now your application is starting to look like a real end-to-end React rendering
    solution. This is what the server renders if you hit the root URL `/`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的应用程序开始看起来像一个真正的端到端的React渲染解决方案。这是服务器在你访问根URL`/`时呈现的内容：
- en: '![](Images/03d2aca6-d30c-4897-b196-9aa3731215e8.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/03d2aca6-d30c-4897-b196-9aa3731215e8.png)'
- en: 'If you hit the `/second` URL, the Node.js server will render the correct component:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问`/second` URL，Node.js服务器将呈现正确的组件：
- en: '![](Images/7d9175f8-7617-4d54-b069-a128b4861e32.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7d9175f8-7617-4d54-b069-a128b4861e32.png)'
- en: If you navigate from the main page to the first page, the request goes back
    to the server. We need to figure out how to get the frontend code to the browser
    so that it can take over after the initial render.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从主页导航到第一页，则请求将返回到服务器。我们需要弄清楚如何将前端代码传递到浏览器，以便它可以在初始呈现后接管。
- en: Frontend reconciliation
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前端协调
- en: The only thing that was missing from the last example was the client JavaScript
    code. The user wants to use the application and the server needs to deliver the
    client code bundle. How would this work? Routing has to work in the browser and
    on the server, without modification to the routes. In other words, the server
    handles routing in the initial request, then the browser takes over as the user
    starts clicking things and moving around in the application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个示例中缺少的唯一内容是客户端JavaScript代码。用户希望使用应用程序，服务器需要传递客户端代码包。这将如何工作？路由必须在浏览器和服务器上工作，而不需要修改路由。换句话说，服务器处理初始请求的路由，然后浏览器在用户开始点击和在应用程序中移动时接管。
- en: 'Let''s create the `index.js` module for this example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个示例创建`index.js`模块：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This looks like most other `index.js` files that you've seen so far in this
    book. You render the `<App>` component in the root element in the HTML document.
    In this case, you're using the `hydrate()` function instead of the `render()`
    function. The two functions have the same end result — rendered JSX content in
    the browser window. The `hydrate()` function is different because it expects rendered
    component content to already be in place. This means that it will perform less
    work, because it will assume that the markup is correct and doesn't need to be
    updated on the initial render.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来像本书中迄今为止您所见过的大多数`index.js`文件。您在HTML文档的根元素中呈现`<App>`组件。在这种情况下，您使用`hydrate()`函数而不是`render()`函数。这两个函数的最终结果是相同的——在浏览器窗口中呈现的JSX内容。`hydrate()`函数不同，因为它期望已经放置了呈现的组件内容。这意味着它将执行更少的工作，因为它将假定标记是正确的，不需要在初始呈现时进行更新。
- en: Only in development mode will React examine the entire DOM tree of the server-rendered
    content to make sure that the correct content is displayed. If there's a mismatch
    between the existing content and the output of the React components, you'll see
    warnings that show you where these mismatches happened so that you can go fix
    them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在开发模式下，React才会检查服务器呈现内容的整个DOM树，以确保显示正确的内容。如果现有内容与React组件的输出之间存在不匹配，您将看到警告，显示出现不匹配的位置，以便您可以去修复它们。
- en: 'Here is the `App` component that your app will render in the browser and on
    the Node.js server:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的应用程序将在浏览器和Node.js服务器上呈现的`App`组件：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The component renders a button that, when clicked, will update the `clicks`
    state. This state is rendered in a label above the button. When this component
    is rendered on the server, the default clicks value of 0 is used, and the `onClick`
    handler is ignored since it''s just rendering static markup. Let''s take a look
    at the server code next:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件呈现一个按钮，当点击时，将更新`clicks`状态。该状态在按钮上方的标签中呈现。当此组件在服务器上呈现时，将使用默认的点击值0，并且`onClick`处理程序将被忽略，因为它只是呈现静态标记。让我们接下来看一下服务器端的代码：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s walk through this source and see what''s going on:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们浏览一下这个源代码，看看发生了什么：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This reads the `index.html` file that''s created by your React build tool,
    such as `create-react-app/react-scripts`, and stores it in `doc`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这读取由您的React构建工具（如`create-react-app/react-scripts`）创建的`index.html`文件，并将其存储在`doc`中：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This tells the Express server to serve files under the `./build` as static
    files, except for `index.html`. Instead, you''re going to write a handler that
    responds to requests for the root of the site:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉Express服务器将`./build`下的文件作为静态文件提供，除了`index.html`。相反，您将编写一个处理程序，以响应站点根目录的请求：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is where the `html` constant is populated with rendered React content.
    Then, it gets interpolated into the HTML string using `replace()` and is sent
    as the response. Because you've used the `index.html` file based on your build,
    it contains a link to the bundled React app that will run when loaded in the browser.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `html` 常量被填充为渲染的 React 内容的地方。然后，它被插入到 HTML 字符串中使用 `replace()`，并作为响应发送。因为你使用了基于构建的
    `index.html` 文件，它包含了一个链接到捆绑的 React 应用程序，当在浏览器中加载时将运行。
- en: Fetching data
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取数据
- en: What if one of your components needs to fetch API data before it can fully render
    its content? This presents a challenge for rendering on the server because there's
    no easy way to define a component that knows when to fetch data on the server
    as well as in the browser.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的某个组件在完全渲染其内容之前需要获取 API 数据怎么办？这对于在服务器上渲染来说是一个挑战，因为没有简单的方法来定义一个组件，它知道何时在服务器上以及在浏览器中获取数据。
- en: This is where a minimal framework like **Next.js** comes into play. Next.js
    treats server rendering and browser rendering as equals. This means that the headache
    of fetching data for your components is abstracted—you can use the same code in
    the browser and on the server.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是像 **Next.js** 这样的最小化框架发挥作用的地方。Next.js 将服务器渲染和浏览器渲染视为相等。这意味着组件获取数据的麻烦被抽象化了
    - 你可以在浏览器和服务器上使用相同的代码。
- en: The previous edition of this book didn't use any frameworks for fetching React
    component data on the server. I think that if you're going to go down this road,
    not using a framework is a mistake. There are simply too many things that can
    go wrong and without a framework, you're ultimately responsible for them.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的上一版没有使用任何框架来在服务器上获取 React 组件数据。我认为，如果你要走这条路，不使用框架是一个错误。有太多事情可能会出错，而且没有框架，最终你将对它们负责。
- en: 'To handle routing, Next.js uses the concept of pages. A **page** is a JavaScript
    module that exports a React component. The rendered content of the component turns
    into the page content. Here''s what the `pages` directory looks like:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理路由，Next.js 使用页面的概念。**页面** 是一个导出 React 组件的 JavaScript 模块。组件的渲染内容变成页面内容。以下是
    `pages` 目录的样子：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `index.js` module is the root page of the app: Next.js knows this based
    on the filename. Here''s what the source looks like:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.js` 模块是应用程序的根页面：Next.js 根据文件名知道这一点。以下是源代码的样子：'
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This page uses a `<Layout>` component to ensure that common components are
    rendered without the need to duplicate code. Here''s what the page looks like
    when rendered:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面使用了 `<Layout>` 组件来确保通用组件被渲染，而不需要重复代码。渲染后页面的样子如下：
- en: '![](Images/238b9e43-d07f-4e63-9f20-57656db13039.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/238b9e43-d07f-4e63-9f20-57656db13039.png)'
- en: 'In addition to the paragraph, you have the overall application layout includes
    the navigation links to other pages. Here''s what the `Layout` source looks like:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 除了段落之外，整个应用程序布局还包括导航链接到其他页面。以下是 `Layout` 的源代码样子：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `Layout` component renders a `Header` component, and `props.children`.
    The `children` prop is the value that you pass to the `Layout` component in your
    pages. Let''s take a look at the `Header` component now:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Layout` 组件渲染一个 `Header` 组件和 `props.children`。`children` 属性是你在页面中传递给 `Layout`
    组件的值。现在让我们来看一下 `Header` 组件：'
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `Link` component used here comes from Next.js. This is so that the links
    work as expected with the routing that Next.js sets up automatically. Now let''s
    look at a page that has data fetching requirements - `pages/first.js`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的 `Link` 组件来自于 Next.js。这样，链接就可以按照 Next.js 自动设置的路由正常工作。现在让我们看一个有数据获取要求的页面
    - `pages/first.js`：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `fetch()` function that's used to fetch data comes from the `isomorphic-unfetch`
    package. This version of `fetch()` works on the server and in the browser—there's
    no need for you to check anything. Once again, the `Layout` component is used
    to wrap the page content for consistency with other pages.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetch()` 函数用于获取数据，来自于 `isomorphic-unfetch` 包。这个版本的 `fetch()` 在服务器和浏览器上都可以使用，你不需要检查任何东西。再次强调，`Layout`
    组件用于包装页面内容，以保持与其他页面的一致性。'
- en: 'The `getInitialProps()` function is how Next.js fetches data—in the browser
    and on the server. This is an async function, meaning that you can take as long
    as you need to fetch data for the component properties, and Next.js will make
    sure not to render any markup until the data is ready. Let''s take a look at the
    `fetchFirstItems()` API function:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`getInitialProps()` 函数是 Next.js 获取数据的方式——在浏览器和服务器上。这是一个异步函数，意味着你可以花费尽可能长的时间来获取组件属性的数据，而
    Next.js 将确保在数据准备好之前不呈现任何标记。让我们来看看 `fetchFirstItems()` API 函数：'
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This function is mimicking API behavior by returning a promise that''s resolved
    after 1 second with data for the component. If you navigate to `/first`, you''ll
    see the following after 1 second:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数通过返回一个在1秒后解析出组件数据的 promise 来模拟 API 的行为。如果你导航到 `/first`，你将在1秒后看到以下内容：
- en: '![](Images/05bfede2-4c36-4470-bc1f-787d72611acf.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/05bfede2-4c36-4470-bc1f-787d72611acf.png)'
- en: By clicking on the first link, you caused the `getInitialProps()` function to
    be called in the browser since the app has already been delivered. If you reload
    the page while at `/first`, you'll trigger `getInitialProps()` to be called on
    the server since this is the page that Next.js is handling on the server.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击第一个链接，你导致了在浏览器中调用 `getInitialProps()` 函数，因为应用程序已经被交付。如果你在 `/first` 页面重新加载页面，你将触发在服务器上调用
    `getInitialProps()`，因为这是 Next.js 在服务器上处理的页面。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned that React can be rendered on the server, in addition
    to the client. There are a number of reasons for doing this, such as sharing common
    code between the frontend and the backend. The main advantage to server-side rendering
    is the performance boost that you get on the initial page load. This translates
    to a better user experience and therefore a better product.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解到 React 除了在客户端上渲染外，还可以在服务器上渲染。这样做的原因有很多，比如在前端和后端之间共享通用代码。服务器端渲染的主要优势是在初始页面加载时获得的性能提升。这将转化为更好的用户体验，因此也是更好的产品。
- en: You then progressively improved on a server-side React application, starting
    with a single page render. Then you were introduced to routing, client-side reconciliation,
    and component data fetching to produce a complete backend rendering solution using
    Next.js.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你逐步改进了一个服务器端的 React 应用程序，从单页面渲染开始。然后介绍了路由、客户端协调和组件数据获取，以使用 Next.js 实现完整的后端渲染解决方案。
- en: In the following chapter, you'll learn how to implement React Bootstrap components
    to implement a mobile-first design.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将学习如何实现 React Bootstrap 组件来实现移动优先设计。
- en: Test your knowledege
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: What is the difference between the `render()` function from `react-dom` and
    the `renderToString()` function from `react-dom/server`?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`react-dom` 中的 `render()` 函数和 `react-dom/server` 中的 `renderToString()` 函数有什么区别？'
- en: The `render()` function is only used to sync React component content with the
    DOM in a browser. The `renderToString()` function doesn't require a DOM because
    it renders markup as a string.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`render()` 函数仅用于在浏览器中将 React 组件内容与 DOM 同步。`renderToString()` 函数不需要 DOM，因为它将标记呈现为字符串。'
- en: The two functions are interchangeable.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这两个函数是可以互换的。
- en: The `render()` function is slower on the server so `renderToString()` is a better
    option.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`render()` 函数在服务器上速度较慢，所以 `renderToString()` 是一个更好的选择。'
- en: You should only use `render()` in the browser if you have to. The `renderToString()`
    function is preferable in most cases.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果必须，应该只在浏览器中使用`render()`。在大多数情况下，`renderToString()`函数更可取。
- en: 'Routing on the server is necessary because:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器上进行路由是必要的，因为：
- en: Without routing on the server, there's no way to actually render components.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器上没有路由，实际上无法渲染组件。
- en: You don't need to worry about rendering on the server since the routes will
    be handled in the browser.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不需要担心在服务器上进行渲染，因为路由将在浏览器中处理。
- en: The router on the server will determine that content is rendered based on the
    requested URL. This content is then sent to the browser so that the user perceives
    a faster load time.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器上的路由将根据请求的URL确定渲染的内容。然后将此内容发送到浏览器，以便用户感知到更快的加载时间。
- en: Routing on the server should be down manually instead of using components from
    react-router.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器上进行路由应该手动完成，而不是使用react-router中的组件。
- en: What function should you use when reconciling server-rendered React markup with
    React components in the browser?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调和服务器渲染的React标记与浏览器中的React组件时，应该使用哪个函数？
- en: Always use `render()` in the browser. It knows how to make changes to existing
    markup that are necessary.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 始终在浏览器中使用`render()`。它知道如何对现有标记进行必要的更改。
- en: Always use `hydrate()` when the server sends rendered React components. Unlike
    `render()`, `hydrate()` expects rendered component markup and can handle it efficiently.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 始终在服务器发送渲染的React组件时使用`hydrate()`。与`render()`不同，`hydrate()`期望渲染的组件标记并且可以高效处理它。
- en: Further reading
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Check out the following links for more information:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以获取更多信息：
- en: '[https://reactjs.org/docs/react-dom-server.html](https://reactjs.org/docs/react-dom-server.html)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reactjs.org/docs/react-dom-server.html](https://reactjs.org/docs/react-dom-server.html)'
- en: '[https://reacttraining.com/react-router/core/api/StaticRouter](https://reacttraining.com/react-router/core/api/StaticRouter)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://reacttraining.com/react-router/core/api/StaticRouter](https://reacttraining.com/react-router/core/api/StaticRouter)'
- en: '[https://nextjs.org/learn/](https://nextjs.org/learn/)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://nextjs.org/learn/](https://nextjs.org/learn/)'
