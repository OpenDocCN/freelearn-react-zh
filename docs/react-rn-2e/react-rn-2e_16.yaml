- en: Rendering Item Lists
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染项目列表
- en: In this chapter, you'll learn how to work with item lists. Lists are a common
    web application component. While it's relatively straightforward to build lists
    using the `<ul>` and `<li>` elements, doing something similar on native mobile
    platforms is much more involved.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何处理项目列表。列表是常见的Web应用程序组件。虽然使用`<ul>`和`<li>`元素构建列表相对比较简单，但在原生移动平台上做类似的事情要复杂得多。
- en: Thankfully, React Native provides an item list interface that hides all of the
    complexity. First, you'll get a feel for how item lists work by walking through
    an example. Then, you'll learn how to build controls that change the data displayed
    in lists. Lastly, you'll see a couple of examples that fetch items from the network.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，React Native提供了一个隐藏所有复杂性的项目列表接口。首先，通过一个例子来了解项目列表的工作原理。然后，学习如何构建改变列表中显示的数据的控件。最后，你将看到一些从网络获取项目的例子。
- en: Rendering data collections
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染数据集合
- en: Let's start with an example. The React Native component you'll use to render
    lists is `FlatList`, which works the same way on iOS and Android. List views accepts
    a `data` property, which is an array of objects. These objects can have any properties
    you like, but they do require a key property. This is similar to the key property
    requirement for rendering `<li>` elements inside of a `<ul>` element. This helps
    the list to efficiently render the list when changes are made to the list data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个例子开始。你将用来渲染列表的React Native组件是`FlatList`，它在iOS和Android上的工作方式相同。列表视图接受一个`data`属性，它是一个对象数组。这些对象可以有任何你喜欢的属性，但它们确实需要一个键属性。这类似于在`<ul>`元素内部渲染`<li>`元素时对键属性的要求。这有助于列表在列表数据发生变化时高效地渲染列表。
- en: 'Let''s implement a basic list now. Here''s the code to render a basic 100-item
    list:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现一个基本的列表。以下是渲染基本100个项目列表的代码：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's walk through what's going on here, starting with the `data` constant.
    This is an array of 100 items in it. It is created by filling a new array with
    100 null values and then mapping this to a new array with the objects that you
    want to pass to `<FlatList>`. Each object has a key property because this is a
    requirement. Anything else is optional. In this case, you've decided to add a
    value property that value be used later or when the list is rendered.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这里开始，首先是`data`常量。这是一个包含100个项目的数组。它是通过用100个空值填充一个新数组，然后将其映射到一个你想要传递给`<FlatList>`的新数组来创建的。每个对象都有一个键属性，因为这是一个要求。其他任何东西都是可选的。在这种情况下，你决定添加一个值属性，这个值稍后会被使用或在列表被渲染时使用。
- en: Next, you render the `<FlatList>` component. It's within a `<View>` container
    because list views need a height in order to make scrolling work correctly. The
    `data` and the `renderItem` properties are passed to `<FlatList>`, which ultimately
    determines the rendered content.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你渲染`<FlatList>`组件。它位于一个`<View>`容器内，因为列表视图需要一个高度才能正确地进行滚动。`data`和`renderItem`属性被传递给`<FlatList>`，最终确定了渲染的内容。
- en: 'At first glance, it would seem that the `FlatList` component doesn''t do too
    much. You have to figure out how the items look? Well, yes, the `FlatList` component
    is supposed to be generic. It''s supposed to excel at handling updates, and embeds
    scrolling capabilities into lists for us. Here are the styles that were used to
    render the list:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，似乎`FlatList`组件并没有做太多事情。你必须弄清楚项目的外观？是的，`FlatList`组件应该是通用的。它应该擅长处理更新，并为我们嵌入滚动功能到列表中。以下是用于渲染列表的样式：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, you're styling each item in your list. Otherwise, each item would be text-only
    and would be difficult to differentiate between other list items. The `container`
    style gives the list a height by setting the `flexDirection` to `column`. Without
    a height, you won't be able to scroll properly.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你正在为列表中的每个项目设置样式。否则，每个项目将只是文本，并且很难区分其他列表项目。`container`样式通过将`flexDirection`设置为`column`来给列表设置高度。没有高度，你将无法正确滚动。
- en: 'Let''s see what this thing looks like now:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看这个东西现在是什么样子的：
- en: '![](Images/b1df327b-1ba5-44b7-9a53-88ed9cc2b210.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b1df327b-1ba5-44b7-9a53-88ed9cc2b210.png)'
- en: If you're running this example in a simulator, you can click and hold down the
    mouse button anywhere on the screen, like a finger, then scroll up or down through
    the items.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在模拟器中运行这个例子，你可以点击并按住鼠标按钮在屏幕的任何地方，就像手指一样，然后通过项目上下滚动。
- en: Sorting and filtering lists
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对列表进行排序和过滤
- en: Now that you have learned the basics of `FlatList` components, including how
    to pass them data, let's add some controls to the list that you just implemented
    in the previous section. The `FlatList` component helps you render fixed-position
    content for list controls. You'll also see how to manipulate the data source,
    which ultimately drives what's rendered on the screen.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了`FlatList`组件的基础知识，包括如何向它们传递数据，让我们在之前实现的列表中添加一些控件。`FlatList`组件帮助你为列表控件渲染固定位置的内容。你还将看到如何操作数据源，最终驱动屏幕上的渲染内容。
- en: 'Before implementing list control components, it might be helpful to review
    the high-level structure of these components so that the code has more context.
    Here''s an illustration of the component structure that you''re going to implement:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现列表控件组件之前，可能有必要回顾一下这些组件的高层结构，以便代码有更多的上下文。以下是你将要实现的组件结构的示例：
- en: '![](Images/5b76e388-d516-49b1-8f18-0caa854e062e.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5b76e388-d516-49b1-8f18-0caa854e062e.png)'
- en: 'Here''s what each of these components is responsible for:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件各自负责什么：
- en: '`ListContainer`: The overall container for the list; it follows the familiar
    React container pattern'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListContainer`: 列表的整体容器；它遵循熟悉的React容器模式'
- en: '`List`: A stateless component that passes the relevant pieces of state into
    the `ListControls` and the React Native `ListView` component'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List`: 一个无状态组件，将相关的状态片段传递给`ListControls`和React Native的`ListView`组件'
- en: '`ListControls`: A component that holds the various controls that change the
    state of the list'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListControls`: 一个包含改变列表状态的各种控件的组件'
- en: '`ListFilter`: A control for filtering the item list'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListFilter`: 用于过滤项目列表的控件'
- en: '`ListSort`: A control for changing the sort order of the list'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListSort`: 用于改变列表排序顺序的控件'
- en: '`FlatList`: The actual React Native component that renders items'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlatList`: 实际的React Native组件，用于渲染项目'
- en: In some cases, splitting apart the implementation of a list like this is overkill.
    However, I think that if your list needs controls in the first place, you're probably
    implementing something that will stand to benefit from having a well-thought-out
    component architecture.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，像这样拆分列表的实现可能有些过度。然而，我认为如果你的列表需要控件，你可能正在实现一些将受益于有一个经过深思熟虑的组件架构的东西。
- en: 'Now, let''s drill down into the implementation of this list, starting with
    the `ListContainer` component:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入到这个列表的实现中，从`ListContainer`组件开始：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If this seems like a bit much, it's because it is. This container component
    has a lot of state to handle. It also has some nontrivial behavior that it needs
    to make available to its children. If you look at it from the perspective of encapsulating
    state, it will be more approachable. Its job is to populate the list with state
    data and provide functions that operate on this state.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这看起来有点多，那是因为确实如此。这个容器组件有很多状态需要处理。它还有一些需要提供给其子组件的非平凡行为。如果从封装状态的角度来看，它会更容易理解。它的工作是使用状态数据填充列表并提供操作此状态的函数。
- en: 'In an ideal world, child components of this container should be nice and simple
    since they don''t have to directly interface with state. Let''s take a look at
    the `List` component next:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想的情况下，此容器的子组件应该很简单，因为它们不必直接与状态进行交互。让我们接下来看一下`List`组件：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This component takes state from the `ListContainer` component as properties
    and renders a `FlatList` component. The main difference here, relative to the
    previous example, is the `ListHeaderComponent` property. This renders the controls
    for your list. What's especially useful about this property is that it renders
    the controls outside the scrollable list content, ensuring that the controls are
    always visible.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件将`ListContainer`组件的状态作为属性，并呈现`FlatList`组件。相对于之前的示例，这里的主要区别是`ListHeaderComponent`属性。这会呈现列表的控件。这个属性特别有用的地方在于它在可滚动的列表内容之外呈现控件，确保控件始终可见。
- en: 'Also, notice that you''re specifying your own `ListControls` component as a
    default value for the `controls` property. This makes it easy for others to pass
    in their own list controls. Let''s take a look at the `ListControls` component
    next:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，您正在将自己的`ListControls`组件指定为`controls`属性的默认值。这样可以方便其他人传入自己的列表控件。接下来让我们看一下`ListControls`组件：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This component brings together the `ListFilter` and `ListSort` controls. So,
    if you were to add another list control, you would add it here. Let''s take a
    look at the `ListFilter` implementation now:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件将`ListFilter`和`ListSort`控件组合在一起。因此，如果要添加另一个列表控件，可以在此处添加。现在让我们来看一下`ListFilter`的实现：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The filter control is a simple text input that filters the list of items as
    user types. The `onChange` function that handles this comes from the `ListContainer`
    component.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤控件是一个简单的文本输入，当用户输入时过滤项目列表。处理此操作的`onChange`函数来自`ListContainer`组件。
- en: 'Let''s look at the `ListSort` component next:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们看一下`ListSort`组件：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s a look at the resulting list:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是生成的列表的样子：
- en: '![](Images/cacc3fa3-ede7-43c6-b429-fb47d99b6a1c.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cacc3fa3-ede7-43c6-b429-fb47d99b6a1c.png)'
- en: 'By default, the entire list is rendered in ascending order. You can see the
    placeholder text **Search** when the user hasn''t provided anything yet. Let''s
    see how this looks when you enter a filter and change the sort order:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，整个列表按升序排列。当用户尚未提供任何内容时，您可以看到占位文本**搜索**。让我们看看当您输入过滤器并更改排序顺序时的效果：
- en: '![](Images/77ef4539-1c12-42fc-a461-30ca2672cb62.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/77ef4539-1c12-42fc-a461-30ca2672cb62.png)'
- en: This search includes items with a 1 in it, and sorts the results in descending
    order. Note that you can either change the order first or enter the filter first.
    Both the filter and the sort order are part of the `ListContainer` state.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此搜索包括其中包含1的项目，并按降序排序结果。请注意，您可以先更改顺序，也可以先输入过滤器。过滤器和排序顺序都是`ListContainer`状态的一部分。
- en: Fetching list data
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取列表数据
- en: Often, you'll fetch your list data from some API endpoint. In this section,
    you'll learn about making API requests from React Native components. The good
    news is that the `fetch()` API is pollyfilled by React Native, so the networking
    code in your mobile applications should look and feel a lot like it does in your
    web applications.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会从某个API端点获取列表数据。在本节中，你将学习如何从React Native组件中发出API请求。好消息是，`fetch()` API在React
    Native中是由React Native进行了填充，因此你的移动应用程序中的网络代码应该看起来和感觉上很像在Web应用程序中一样。
- en: 'To start things off, let''s build a mock API for our list items using functions
    that return promises just like `fetch()` does:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用返回promise的函数构建一个模拟API来处理我们的列表项，就像`fetch()`一样。
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With the mock API function in place, let''s make some changes to the list container
    component. Instead of using local data sources, you can now use the `fetchItems()`
    function to load data from the API mock:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有了模拟API函数，让我们对列表容器组件进行一些更改。现在可以使用`fetchItems()`函数从API模拟中加载数据，而不是使用本地数据源：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Any action that modifies the state of the list needs to call `fetchItems()`,
    and set the appropriate state once the promise resolves.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 任何修改列表状态的操作都需要调用`fetchItems()`，并在promise解析后设置适当的状态。
- en: Lazy list loading
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 懒加载列表
- en: In this section, you'll implement a different kind of list, one that scrolls
    infinitely. Sometimes, users don't actually know what they're looking for, so
    filtering or sorting isn't going to help. Think about the Facebook news feed you
    see when you log into your account; it's the main feature of the application and
    rarely are you looking for something specific. You'll need to see what's going
    on by scrolling through the list.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将实现一种不同类型的列表，即无限滚动的列表。有时，用户实际上并不知道他们在寻找什么，因此过滤或排序是没有帮助的。想想当你登录你的Facebook账户时看到的新闻动态；这是应用程序的主要功能，很少有你在寻找特定的东西。你需要通过滚动列表来看看发生了什么。
- en: 'To do this using a `FlatList` component, you need to be able to fetch more
    API data when the user scrolls to the end of the list. To get an idea of how this
    works, you need a lot of API data to work with. Generators are great at this!
    So let''s modify the mock that you created in the previous example so that it
    just keeps responding with new data:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`FlatList`组件实现这一点，需要在用户滚动到列表末尾时能够获取更多的API数据。为了了解这是如何工作的，你需要大量的API数据来进行操作。生成器非常适合这个！所以让我们修改你在上一个示例中创建的模拟，使其只是不断地响应新数据：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With this in place, you can now make an API request for new data every time
    the end of the list is reached. Well, eventually this will fail when you run out
    of memory, but I''m just trying to show you in general terms the approach you
    can take to implement infinite scrolling in React Native. Here''s what the `ListContainer`
    component looks like:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，现在你可以在列表末尾到达时每次发出API请求获取新数据。嗯，最终当内存用尽时这将失败，但我只是想以一般的术语向你展示你可以采取的方法来在React
    Native中实现无限滚动。`ListContainer`组件如下所示：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Each time `fetchItems()` is called, the response is concatenated with the `data`
    array. This becomes the new list data source, instead of replacing it as you did
    in earlier examples. Now, let''s take a look at the `List` component to see how
    to respond to the end of the list being reached:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用`fetchItems()`时，响应都会与`data`数组连接起来。这将成为新的列表数据源，而不是像之前的示例中那样替换它。现在，让我们看看`List`组件如何响应到达列表末尾：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you run this example, you'll see that, as you approach the bottom of the
    screen while scrolling, the list just keeps growing.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个示例，你会发现当你滚动到屏幕底部时，列表会不断增长。
- en: Summary
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the `FlatList` component in React Native.
    This component is general-purpose in that it doesn't impose any specific look
    for items that get rendered. Instead, the appearance of the list is up to you,
    while the `FlatList` component helps with efficiently rendering a data source.
    The `FlatList` component also provides a scrollable region for the items it renders.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了React Native中的`FlatList`组件。该组件是通用的，因为它不会对呈现的项目施加任何特定的外观。相反，列表的外观取决于您，而`FlatList`组件有助于高效地呈现数据源。`FlatList`组件还为其呈现的项目提供了可滚动的区域。
- en: You implemented an example that took advantage of section headers in list views.
    This is a good place to render static content such as list controls. You then
    learned about making network calls in React Native; it's just like using `fetch()`
    in any other web application. Finally, you implemented lazy lists that scroll
    infinitely, by only loading new items after they've scrolled to the bottom of
    what's already been rendered.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您实现了一个利用列表视图中的部分标题的示例。这是呈现静态内容（如列表控件）的好地方。然后，您了解了在React Native中进行网络调用；这就像在任何其他Web应用程序中使用`fetch()`一样。最后，您实现了无限滚动的懒加载列表，只有在滚动到已呈现内容的底部后才加载新项目。
- en: In the next chapter, you'll learn how to show the progress of things such as
    network calls.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何显示诸如网络调用之类的进度。
- en: Test your knowledege
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: What type of data can the `FlatList` component render?
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FlatList`组件可以呈现什么类型的数据？'
- en: The `FlatList` expects an array of objects. The `renderItem` property takes
    a function that is responsible for rendering each item.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FlatList`期望一个对象数组。`renderItem`属性接受一个负责呈现每个项目的函数。'
- en: The `FlatList` expects an object.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FlatList`期望一个对象。'
- en: It expects a function that returns an iterable.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它期望一个返回可迭代对象的函数。
- en: Why is the `key` property a requirement for each data item that's passed to
    `FlatList`?
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么`key`属性是传递给`FlatList`的每个数据项的要求？
- en: It isn't a requirement.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这不是一个要求。
- en: So that the list knows how to sort the data values.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样列表就知道如何对数据值进行排序。
- en: So that the list can do efficient equality checks that help with the rendering
    performance during list data updates.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样列表就可以进行高效的相等性检查，有助于在列表数据更新期间提高渲染性能。
- en: How do you render list controls that stay in a fixed position during scrolling?
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在滚动期间保持固定位置的列表控件呈现？
- en: By passing custom control components as children of `FlatList`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将自定义控件组件作为`FlatList`的子组件。
- en: You can use the `ListHeaderComponent` property of `FlatList`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用`FlatList`的`ListHeaderComponent`属性。
- en: You can't have statically positioned list controls.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不能拥有静态定位的列表控件。
- en: How to you lazily load more data as the user scrolls through your list?
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户滚动列表时，如何懒加载更多数据？
- en: You can provide a function to the `onEndReached` property of `FlatList`. This
    is called when the user nears the end of the list and the function can populate
    the list data with more data.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以为`FlatList`的`onEndReached`属性提供一个函数。当用户接近列表的末尾时，将调用此函数，并且该函数可以使用更多数据填充列表数据。
- en: You have to extend the `FlatList` class and respond to scroll events to figure
    out whether the end of the list has been reached yet.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须扩展`FlatList`类并响应滚动事件，以确定列表的末尾是否已经到达。
- en: Further reading
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Take a look at the following link for more information:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 点击以下链接了解更多信息：
- en: '[https://facebook.github.io/react-native/docs/flatlist](https://facebook.github.io/react-native/docs/flatlist)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/flatlist](https://facebook.github.io/react-native/docs/flatlist)'
