["```jsx\nimport React from 'react';\n\nexport default () => <p>Hello Route!</p>;\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport MyComponent from './MyComponent';\n\n// The \"<Router>\" is the root element of the app.\nrender(\n  <Router>\n    <Route exact path=\"/\" component={MyComponent} />\n  </Router>,\n  document.getElementById('root')\n);\n\n```", "```jsx\nimport React, { Fragment } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect\n} from 'react-router-dom';\n\n// Import the routes from our features.\nimport One from './one';\nimport Two from './two';\n\n// The feature routes are rendered as children of\n// the main router.\nexport default () => (\n  <Router>\n    <Fragment>\n      <Route exact path=\"/\" render={() => <Redirect to=\"one\" />} />\n      <One />\n      <Two />\n    </Fragment>\n  </Router>\n); \n```", "```jsx\nimport React, { Fragment } from 'react';\nimport { Route, Redirect } from 'react-router';\n\n// The pages that make up feature \"one\".\nimport First from './First';\nimport Second from './Second';\n\n// The routes of our feature. The \"<Redirect>\"\n// handles \"/one\" requests by redirecting to \"/one/1\".\nexport default () => (\n  <Fragment>\n    <Route\n      exact\n      path=\"/one\"\n      render={() => <Redirect to=\"/one/1\" />}\n    />\n    <Route exact path=\"/one/1\" component={First} />\n    <Route exact path=\"/one/2\" component={Second} />\n  </Fragment>\n);\n```", "```jsx\nimport React from 'react';\n\nexport default () => (\n  <p>Feature 1, page 1</p>\n);\n```", "```jsx\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  NavLink\n} from 'react-router-dom';\n\n// The \"User\" components rendered with the \"/users\"\n// route.\nimport UsersHeader from './users/UsersHeader';\nimport UsersMain from './users/UsersMain';\n\n// The \"Groups\" components rendered with the \"/groups\"\n// route.\nimport GroupsHeader from './groups/GroupsHeader';\nimport GroupsMain from './groups/GroupsMain';\n\n// The \"header\" and \"main\" properties are the rendered\n// components specified in the route. They're placed\n// in the JSX of this component - \"App\".\nconst App = () => (\n  <Router>\n    <section>\n      <nav>\n        <NavLink\n          exact\n          to=\"/\"\n          style={{ padding: '0 10px' }}\n          activeStyle={{ fontWeight: 'bold' }}\n        >\n          Home\n        </NavLink>\n        <NavLink\n          exact\n          to=\"/users\"\n          style={{ padding: '0 10px' }}\n          activeStyle={{ fontWeight: 'bold' }}\n        >\n          Users\n        </NavLink>\n        <NavLink\n          exact\n          to=\"/groups\"\n          style={{ padding: '0 10px' }}\n          activeStyle={{ fontWeight: 'bold' }}\n        >\n          Groups\n        </NavLink>\n      </nav>\n      <header>\n        <Route exact path=\"/\" render={() => <h1>Home</h1>} />\n        <Route exact path=\"/users\" component={UsersHeader} />\n        <Route exact path=\"/groups\" component={GroupsHeader} />\n      </header>\n      <main>\n        <Route exact path=\"/users\" component={UsersMain} />\n        <Route exact path=\"/groups\" component={GroupsMain} />\n      </main>\n    </section>\n  </Router>\n);\n\nexport default App;\n```", "```jsx\nimport React from 'react';\n\nexport default () => <h1>Users Header</h1>;\n```", "```jsx\nimport React from 'react';\n\nexport default () => <p>Users content...</p>;\n```", "```jsx\nimport React, { Fragment } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport UsersContainer from './UsersContainer';\nimport UserContainer from './UserContainer';\n\nexport default () => (\n  <Router>\n    <Fragment>\n      <Route exact path=\"/\" component={UsersContainer} />\n      <Route path=\"/users/:id\" component={UserContainer} />\n    </Fragment>\n  </Router>\n); \n```", "```jsx\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { fromJS } from 'immutable';\n\nimport User from './User';\nimport { fetchUser } from './api';\n\nexport default class UserContainer extends Component {\n  state = {\n    data: fromJS({\n      error: null,\n      first: null,\n      last: null,\n      age: null\n    })\n  };\n\n  // Getter for \"Immutable.js\" state data...\n  get data() {\n    return this.state.data;\n  }\n\n  // Setter for \"Immutable.js\" state data...\n  set data(data) {\n    this.setState({ data });\n  }\n\n  componentDidMount() {\n    // The dynamic URL segment we're interested in, \"id\",\n    // is stored in the \"params\" property.\n    const { match: { params: { id } } } = this.props;\n\n    // Fetches a user based on the \"id\". Note that it's\n    // converted to a number first.\n    fetchUser(Number(id)).then(\n      // If the user was successfully fetched, then\n      // merge the user properties into the state. Also,\n      // make sure that \"error\" is cleared.\n      user => {\n        this.data = this.data.merge(user, { error: null });\n      },\n\n      // If the user fetch failed, set the \"error\" state\n      // to the resolved error value. Also, make sure the\n      // other user properties are restored to their defaults\n      // since the component is now in an error state.\n      error => {\n        this.data = this.data.merge({\n          error,\n          first: null,\n          last: null,\n          age: null\n        });\n      }\n    );\n  }\n\n  render() {\n    return <User {...this.data.toJS()} />;\n  }\n}\n\n// Params should always be there...\nUserContainer.propTypes = {\n  match: PropTypes.object.isRequired\n};\n```", "```jsx\n// Mock data...\nconst users = [\n  { first: 'First 1', last: 'Last 1', age: 1 },\n  { first: 'First 2', last: 'Last 2', age: 2 }\n];\n\n// Returns a promise that resolves the users array.\nexport function fetchUsers() {\n  return new Promise((resolve, reject) => {\n    resolve(users);\n  });\n}\n\n// Returns a promise that resolves to a\n// user from the \"users\" array, using the\n// given \"id\" index. If nothing is found,\n// the promise is rejected.\nexport function fetchUser(id) {\n  const user = users[id];\n\n  if (user === undefined) {\n    return Promise.reject(`User ${id} not found`);\n  } else {\n    return Promise.resolve(user);\n  }\n}\n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Map } from 'immutable';\n\n// Renders \"error\" text, unless \"error\" is\n// null - then nothing is rendered.\nconst Error = ({ error }) =>\n  Map([[null, null]]).get(\n    error,\n    <p>\n      <strong>{error}</strong>\n    </p>\n  );\n\n// Renders \"children\" text, unless \"children\"\n// is null - then nothing is rendered.\nconst Text = ({ children }) =>\n  Map([[null, null]]).get(children, <p>{children}</p>);\n\nconst User = ({ error, first, last, age }) => (\n  <section>\n    {/* If there's an API error, display it. */}\n    <Error error={error} />\n\n    {/* If there's a first, last, or age value,\n         display it. */}\n    <Text>{first}</Text>\n    <Text>{last}</Text>\n    <Text>{age}</Text>\n  </section>\n);\n\n// Every property is optional, since we might\n// have have to render them.\nUser.propTypes = {\n  error: PropTypes.string,\n  first: PropTypes.string,\n  last: PropTypes.string,\n  age: PropTypes.number\n};\n\nexport default User;\n```", "```jsx\nif (user === undefined) {\n  reject(`User ${id} not found`);\n}\n```", "```jsx\nfetchUser(Number(id)).then(\n  user => {\n    this.data = this.data.merge(user, { error: null });\n  },\n  error => {\n    this.data = this.data.merge({\n      error,\n      first: null,\n      last: null,\n      age: null\n    });\n  }\n);\n```", "```jsx\nconst Error = ({ error }) =>\n  Map([[null, null]]).get(\n    error,\n    <p>\n      <strong>{error}</strong>\n    </p>\n  );\n\nconst User = ({ error, first, last, age }) => (\n  <section>\n    <Error error={error} />\n    ...\n  </section>\n);\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport UsersContainer from './UsersContainer';\n\nrender(\n  <Router>\n    <Route path=\"/users/:desc?\" component={UsersContainer} />\n  </Router>,\n  document.getElementById('root')\n); \n```", "```jsx\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { fromJS } from 'immutable';\n\nimport Users from './Users';\nimport { fetchUsers } from './api';\n\nexport default class UsersContainer extends Component {\n  // The \"users\" state is an empty immutable list\n  // by default.\n  state = {\n    data: fromJS({\n      users: []\n    })\n  };\n\n  // Getter for \"Immutable.js\" state data...\n  get data() {\n    return this.state.data;\n  }\n\n  // Setter for \"Immutable.js\" state data...\n  set data(data) {\n    this.setState({ data });\n  }\n\n  componentDidMount() {\n    // The URL and query string data we need...\n    const { match: { params }, location: { search } } = this.props;\n\n    // If the \"params.desc\" value is \"desc\", it means that\n    // \"desc\" is a URL segment. If \"search.desc\" is true, it\n    // means \"desc\" was provided as a query parameter.\n    const desc =\n      params.desc === 'desc' ||\n      !!new URLSearchParams(search).get('desc');\n\n    // Tell the \"fetchUsers()\" API to sort in descending\n    // order if the \"desc\" value is true.\n    fetchUsers(desc).then(users => {\n      this.data = this.data.set('users', users);\n    });\n  }\n\n  render() {\n    return <Users {...this.data.toJS()} />;\n  }\n}\n\nUsersContainer.propTypes = {\n  params: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired\n};\n\n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Renders a list of users...\nconst Users = ({ users }) => (\n  <ul>{users.map(i => <li key={i}>{i}</li>)}</ul>\n);\n\nUsers.propTypes = {\n  users: PropTypes.array.isRequired\n};\n\nexport default Users;\n```", "```jsx\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom';\n\nimport First from './First';\nimport Second from './Second';\n\nconst App = () => (\n  <Router>\n    <section>\n      <nav>\n        <p>\n          <Link to=\"first\">First</Link>\n        </p>\n        <p>\n          <Link to=\"second\">Second</Link>\n        </p>\n      </nav>\n      <section>\n        <Route path=\"/first\" component={First} />\n        <Route path=\"/second\" component={Second} />\n      </section>\n    </section>\n  </Router>\n);\n\nexport default App; \n```", "```jsx\nimport React from 'react';\nimport { withRouter } from 'react-router';\n\n// Simple component that expects either an \"echo\"\n// URL segment parameter, or an \"echo\" query parameter.\nexport default withRouter(\n  ({ match: { params }, location: { search } }) => (\n    <h1>{params.msg || new URLSearchParams(search).get('msg')}</h1>\n  )\n); \n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst App = ({ children }) => <section>{children}</section>;\n\nApp.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\n// Link parameter and query data...\nconst param = 'From Param';\nconst query = new URLSearchParams({ msg: 'From Query' });\n\nApp.defaultProps = {\n  children: (\n    <section>\n      {/* This \"<Link>\" uses a paramter as part of\n           the \"to\" property. */}\n      <p>\n        <Link to={`echo/${param}`}>Echo param</Link>\n      </p>\n\n      {/* This \"<Link>\" uses the \"query\" property\n           to add query parameters to the link URL. */}\n      <p>\n        <Link to={`echo?${query.toString()}`} query={query}>\n          Echo query\n        </Link>\n      </p>\n    </section>\n  )\n};\n\nexport default App; \n```"]