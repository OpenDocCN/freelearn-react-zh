["```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MyComponent = ({\n  myString,\n  myNumber,\n  myBool,\n  myFunc,\n  myArray,\n  myObject\n}) => (\n  <section>\n    {/* Strings and numbers can be rendered\n         just about anywhere. */}\n    <p>{myString}</p>\n    <p>{myNumber}</p>\n\n    {/* Booleans are typically used as property values. */}\n    <p>\n      <input type=\"checkbox\" defaultChecked={myBool} />\n    </p>\n\n    {/* Functions can return values, or be assigned as\n         event handler property values. */}\n    <p>{myFunc()}</p>\n\n    {/* Arrays are typically mapped to produce new JSX elements. */}\n    <ul>{myArray.map(i => <li key={i}>{i}</li>)}</ul>\n\n    {/* Objects typically use their properties in some way. */}\n    <p>{myObject.myProp}</p>\n  </section>\n);\n\n// The \"propTypes\" specification for this component.\nMyComponent.propTypes = {\n  myString: PropTypes.string,\n  myNumber: PropTypes.number,\n  myBool: PropTypes.bool,\n  myFunc: PropTypes.func,\n  myArray: PropTypes.array,\n  myObject: PropTypes.object\n};\n\nexport default MyComponent;\n\n```", "```jsx\nimport React from 'react';\nimport { render as renderJSX } from 'react-dom';\n\nimport MyComponent from './MyComponent';\n\n// The properties that we'll pass to the component.\n// Each property is a different type, and corresponds\n// to the \"propTypes\" spec of the component.\nconst validProps = {\n  myString: 'My String',\n  myNumber: 100,\n  myBool: true,\n  myFunc: () => 'My Return Value',\n  myArray: ['One', 'Two', 'Three'],\n  myObject: { myProp: 'My Prop' }\n};\n\n// These properties don't correspond to the \"<MyComponent>\"\n// spec, and will cause warnings to be logged.\nconst invalidProps = {\n  myString: 100,\n  myNumber: 'My String',\n  myBool: () => 'My Reaturn Value',\n  myFunc: true,\n  myArray: { myProp: 'My Prop' },\n  myObject: ['One', 'Two', 'Three']\n};\n\n// Renders \"<MyComponent>\" with the given \"props\".\nfunction render(props) {\n  renderJSX(\n    <MyComponent {...props} />,\n    document.getElementById('root')\n  );\n}\n\nrender(validProps);\nrender(invalidProps);\n\n```", "```jsx\nInvalid prop `myString` of type `number` supplied to `MyComponent`, expected `string` \nInvalid prop `myNumber` of type `string` supplied to `MyComponent`, expected `number` \nInvalid prop `myBool` of type `function` supplied to `MyComponent`, expected `boolean` \nInvalid prop `myFunc` of type `boolean` supplied to `MyComponent`, expected `function` \nInvalid prop `myArray` of type `object` supplied to `MyComponent`, expected `array` \nInvalid prop `myObject` of type `array` supplied to `MyComponent`, expected `object` \nTypeError: myFunc is not a function \n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MyComponent = ({\n  myString,\n  myNumber,\n  myBool,\n  myFunc,\n  myArray,\n  myObject\n}) => (\n  <section>\n    <p>{myString}</p>\n    <p>{myNumber}</p>\n    <p>\n      <input type=\"checkbox\" defaultChecked={myBool} />\n    </p>\n    <p>{myFunc()}</p>\n    <ul>{myArray.map(i => <li key={i}>{i}</li>)}</ul>\n    <p>{myObject.myProp}</p>\n  </section>\n);\n\n// The \"propTypes\" specification for this component. Every\n// property is required, because they each have the\n// \"isRequired\" property.\nMyComponent.propTypes = {\n  myString: PropTypes.string.isRequired,\n  myNumber: PropTypes.number.isRequired,\n  myBool: PropTypes.bool.isRequired,\n  myFunc: PropTypes.func.isRequired,\n  myArray: PropTypes.array.isRequired,\n  myObject: PropTypes.object.isRequired\n};\n\nexport default MyComponent; \n```", "```jsx\nimport React from 'react';\nimport { render as renderJSX } from 'react-dom';\n\nimport MyComponent from './MyComponent';\n\nconst validProps = {\n  myString: 'My String',\n  myNumber: 100,\n  myBool: true,\n  myFunc: () => 'My Return Value',\n  myArray: ['One', 'Two', 'Three'],\n  myObject: { myProp: 'My Prop' }\n};\n\n// The same as \"validProps\", except it's missing\n// the \"myObject\" property. This will trigger a\n// warning.\nconst missingProp = {\n  myString: 'My String',\n  myNumber: 100,\n  myBool: true,\n  myFunc: () => 'My Return Value',\n  myArray: ['One', 'Two', 'Three']\n};\n\n// Renders \"<MyComponent>\" with the given \"props\".\nfunction render(props) {\n  renderJSX(\n    <MyComponent {...props} />,\n    document.getElementById('root')\n  );\n}\n\nrender(validProps);\nrender(missingProp);\n\n```", "```jsx\nRequired prop `myObject` was not specified in `MyComponent`. \nCannot read property 'myProp' of undefined \n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Renders a component with a header and a simple\n// progress bar, using the provided property\n// values.\nconst MyComponent = ({ label, value, max }) => (\n  <section>\n    <h5>{label}</h5>\n    <progress {...{ max, value }} />\n  </section>\n);\n\n// These property values can be anything, as denoted by\n// the \"PropTypes.any\" prop type.\nMyComponent.propTypes = {\n  label: PropTypes.any,\n  value: PropTypes.any,\n  max: PropTypes.any\n};\n\nexport default MyComponent;\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport MyComponent from './MyComponent';\n\nrender(\n  <section>\n    {/* Passes a string and two numbers to\n         \"<MyComponent>\". Everything works as\n         expected. */}\n    <MyComponent label=\"Regular Values\" max={20} value={10} />\n\n    {/* Passes strings instead of numbers to the\n         progress bar, but they're correctly\n         interpreted as numbers. */}\n    <MyComponent label=\"String Values\" max=\"20\" value=\"10\" />\n\n    {/* The \"label\" has no issue displaying\n         \"MAX_SAFE_INTEGER\", but the date that's\n         passed to \"max\" causes the progress bar\n         to break. */}\n    <MyComponent\n      label={Number.MAX_SAFE_INTEGER}\n      max={new Date()}\n      value=\"10\"\n    />\n  </section>,\n  document.getElementById('root')\n);\n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MyComponent = ({ myHeader, myContent }) => (\n  <section>\n    <header>{myHeader}</header>\n    <main>{myContent}</main>\n  </section>\n);\n\n// The \"myHeader\" property requires a React\n// element. The \"myContent\" property requires\n// a node that can be rendered. This includes\n// React elements, but also strings.\nMyComponent.propTypes = {\n  myHeader: PropTypes.element.isRequired,\n  myContent: PropTypes.node.isRequired\n};\n\nexport default MyComponent;\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport MyComponent from './MyComponent';\n\n// Two React elements we'll use to pass to\n// \"<MyComponent>\" as property values.\nconst myHeader = <h1>My Header</h1>;\nconst myContent = <p>My Content</p>;\n\nrender(\n  <section>\n    {/* Renders as expected, both properties are passed\n         React elements as values. */}\n    <MyComponent {...{ myHeader, myContent }} />\n\n    {/* Triggers a warning because \"myHeader\" is expecting\n         a React element instead of a string. */}\n    <MyComponent myHeader=\"My Header\" {...{ myContent }} />\n\n    {/* Renders as expected. A string is a valid type for\n         the \"myContent\" property. */}\n    <MyComponent {...{ myHeader }} myContent=\"My Content\" />\n\n    {/* Renders as expected. An array of React elements\n         is a valid type for the \"myContent\" property. */}\n    <MyComponent\n      {...{ myHeader }}\n      myContent={[myContent, myContent, myContent]}\n    />\n  </section>,\n  document.getElementById('root')\n);\n```", "```jsx\nimport cuid from 'cuid';\n\n// Simple class the exposes an API that the\n// React component expects.\nexport default class MyUser {\n  constructor(first, last) {\n    this.id = cuid();\n    this.first = first;\n    this.last = last;\n  }\n\n  get name() {\n    return `${this.first} ${this.last}`;\n  }\n}\n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MyUser from './MyUser';\n\nconst MyComponent = ({ myDate, myCount, myUsers }) => (\n  <section>\n    {/* Requires a specific \"Date\" method. */}\n    <p>{myDate.toLocaleString()}</p>\n\n    {/* Number or string works here. */}\n    <p>{myCount}</p>\n    <ul>\n      {/* \"myUsers\" is expected to be an array of\n           \"MyUser\" instances. So we know that it's\n           safe to use the \"id\" and \"name\" property. */}\n      {myUsers.map(i => <li key={i.id}>{i.name}</li>)}\n    </ul>\n  </section>\n);\n\n// The properties spec is looking for an instance of\n// \"Date\", a choice between a string or a number, and\n// an array filled with specific types.\nMyComponent.propTypes = {\n  myDate: PropTypes.instanceOf(Date),\n  myCount: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  myUsers: PropTypes.arrayOf(PropTypes.instanceOf(MyUser))\n};\n\nexport default MyComponent; \n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Any one of these is a valid \"level\"\n// property value.\nconst levels = new Array(10).fill(null).map((v, i) => i + 1);\n\n// This is the \"shape\" of the object we expect\n// to find in the \"user\" property value.\nconst userShape = {\n  name: PropTypes.string,\n  age: PropTypes.number\n};\n\nconst MyComponent = ({ level, user }) => (\n  <section>\n    <p>{level}</p>\n    <p>{user.name}</p>\n    <p>{user.age}</p>\n  </section>\n);\n\n// The property spec for this component uses\n// \"oneOf()\" and \"shape()\" to define the required\n// property values.\nMyComponent.propTypes = {\n  level: PropTypes.oneOf(levels),\n  user: PropTypes.shape(userShape)\n};\n\nexport default MyComponent; \n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport MyComponent from './MyComponent';\n\nrender(\n  <section>\n    {/* Works as expected. */}\n    <MyComponent level={10} user={{ name: 'Name', age: 32 }} />\n\n    {/* Works as expected, the \"online\"\n         property is ignored. */}\n    <MyComponent user={{ name: 'Name', age: 32, online: false }} />\n\n    {/* Fails. The \"level\" value is out of range,\n         and the \"age\" property is expecting a\n         number, not a string. */}\n    <MyComponent level={11} user={{ name: 'Name', age: '32' }} />\n  </section>,\n  document.getElementById('root')\n);\n```", "```jsx\nimport React from 'react';\n\nconst MyComponent = ({ myArray, myNumber }) => (\n  <section>\n    <ul>{myArray.map(i => <li key={i}>{i}</li>)}</ul>\n    <p>{myNumber}</p>\n  </section>\n);\n\nMyComponent.propTypes = {\n  // Expects a property named \"myArray\" with a non-zero\n  // length. If this passes, we return null. Otherwise,\n  // we return a new error.\n  myArray: (props, name, component) =>\n    Array.isArray(props[name]) && props[name].length\n      ? null\n      : new Error(`${component}.${name}: expecting non-empty array`),\n\n  // Expects a property named \"myNumber\" that's\n  // greater than 0 and less than 99\\. Otherwise,\n  // we return a new error.\n  myNumber: (props, name, component) =>\n    Number.isFinite(props[name]) &&\n    props[name] > 0 &&\n    props[name] < 100\n      ? null\n      : new Error(\n          `${component}.${name}: expecting number between 1 and 99`\n        )\n};\n\nexport default MyComponent;\n\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport MyComponent from './MyComponent';\n\nrender(\n  <section>\n    {/* Renders as expected... */}\n    <MyComponent\n      myArray={['first', 'second', 'third']}\n      myNumber={99}\n    />\n\n    {/* Both custom validators fail... */}\n    <MyComponent myArray={[]} myNumber={100} />\n  </section>,\n  document.getElementById('root')\n);\n```", "```jsx\nMyComponent.myArray: expecting non-empty array \nMyComponent.myNumber: expecting number between 1 and 99 \n```"]