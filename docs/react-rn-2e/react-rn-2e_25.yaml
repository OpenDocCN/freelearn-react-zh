- en: Why Relay and GraphQL?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Relay和GraphQL？
- en: In the preceding chapter, you learned about the architectural principles of
    Flux. In particular, you used the Redux library to implement concrete Flux concepts
    in a React application. Having a framework of patterns like Flux in place, to
    help you reason about how state changes and flows through your application, is
    a good thing. At the end of the chapter, you learned about the potential limitations
    in terms of scale.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，你了解了Flux的架构原则。特别是，你使用Redux库在React应用程序中实现了具体的Flux概念。有了像Flux这样的模式框架，可以帮助你思考状态如何改变并在应用程序中流动，这是一件好事。在本章的结尾，你了解了在扩展方面的潜在限制。
- en: In this chapter, we are going to walk you through yet another approach to handling
    state in a React application. Like Redux, Relay is used with both web and mobile
    React applications. Relay relies on a language called **GraphQL** used to fetch
    resources and to mutate those resources.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将带你走进另一种处理React应用程序状态的方法。与Redux一样，Relay用于Web和移动React应用程序。Relay依赖一种叫做GraphQL的语言，用于获取资源和改变这些资源。
- en: The premise of Relay is that it can be scaled in ways that Redux and other approaches
    to handling state are limiting. It does this by eliminating them, and keeping
    the focus on the data requirements of the component.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Relay的前提是它可以以Redux和其他处理状态的方法所限制的方式进行扩展。它通过消除它们，将焦点放在组件的数据需求上来实现这一点。
- en: In the final chapter of this book, you'll work on a React Native implementation
    of the ever popular **Todo MVC** application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后一章，你将会在React Native中实现备受欢迎的Todo MVC应用程序。
- en: Yet another approach?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 又一种方法？
- en: This was the exact question I had when I learned of Relay and GraphQL. Then
    I reminded myself that the beauty of React is that it's just the view abstraction
    of the UI; of course there are going to be many approaches to handling data. So,
    the real question is, what makes Relay better or worse than something like Redux?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我了解Relay和GraphQL时，我就有了这个确切的问题。然后我提醒自己，React的美妙之处在于它只是UI的视图抽象；当然会有许多处理数据的方法。因此，真正的问题是，Relay比Redux之类的东西更好还是更差？
- en: At a high level, you can think of Relay as an implementation of Flux architecture
    patterns, and you can think of GraphQL as the interface that describes how the
    Flux stores within Relay work. At a more practical level, the value of Relay is
    ease of implementation. For example, with Redux, you have a lot of implementation
    work to do, just to populate the stores with data. This gets verbose over time.
    It's this verbosity that makes Redux difficult to scale beyond a certain point.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，你可以将Relay看作是Flux架构模式的一种实现，你可以将GraphQL看作是描述Relay内部Flux存储工作方式的接口。在更实际的层面上，Relay的价值在于实现的便利性。例如，使用Redux，你需要做很多实现工作，只是为了用数据填充存储。随着时间的推移，这变得冗长。正是这种冗长使得Redux难以在一定程度之上进行扩展。
- en: It's not the individual data points that are difficult to scale. It's the aggregate
    effect of having lots of fetch requests that end up building very complicated
    stores. Relay changes this by allowing you to declare the data that a given component
    needs and letting Relay figure out the best way to fetch this data and synchronize
    it with the local store.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 难以扩展的不是单个数据点。而是有大量获取请求最终构建非常复杂的存储的总体效果。Relay通过允许你声明给定组件需要的数据，并让Relay找出获取这些数据并将其与本地存储同步的最佳方法来改变这一点。
- en: Is the Relay approach better than Redux and other approaches for handling data
    in React applications? In some respects, yes, it is. Is it perfect? Far from it.
    There is a learning curve involved, and not everyone is able to grok it. It's
    immutable, and parts of it are difficult to use. However, just knowing the premise
    of the Relay approach and seeing it in action is worth your while, even if you
    decide against it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Relay的方法是否比Redux和其他处理React应用程序中数据的方法更好？在某些方面，是的。它完美吗？远非如此。这涉及到一个学习曲线，并非每个人都能理解它。它是不可变的，其中的一些部分很难使用。然而，了解Relay的方法的前提并看到它的实际效果是值得的，即使你最终决定不采用它。
- en: Now, let's pick apart some vocabulary.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们分解一些词汇。
- en: Verbose vernacular
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 冗长的俗语
- en: 'Before I start going into more depth on data dependencies and mutations, I
    think it makes sense for me to throw some general Relay and GraphQL terminology
    definitions out there:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我开始更深入地讨论数据依赖和突变之前，我认为我应该先介绍一些一般的Relay和GraphQL术语定义：
- en: '**Relay**: A library that manages application data fetching and data mutations
    and provides higher-order components that feed data into our application components'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Relay：一个管理应用程序数据获取和数据突变的库，并提供高阶组件，将数据传递给我们的应用程序组件
- en: '**GraphQL**: A query language used to specify data requirements and data mutations'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL：用于指定数据需求和数据突变的查询语言
- en: '**Data dependency**: An abstract concept that says a given React component
    depends on particular data'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据依赖：一个抽象概念，表示给定的React组件依赖于特定的数据
- en: '**Query**: A query is the part of a data dependency, expressed in GraphQL syntax
    and executed by an encapsulated Relay mechanism'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询：查询是数据依赖的一部分，用GraphQL语法表示，并由封装的Relay机制执行
- en: '**Fragment**: A part of a larger GraphQL query'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 片段：较大的GraphQL查询的一部分
- en: '**Container**: A Relay React component that passes fetched data into the application
    React component'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器：一个Relay React组件，将获取的数据传递给应用程序React组件
- en: '**Mutation**: A special type of GraphQL query that changes the state of some
    remote resource, and Relay has to figure out how to reflect this change in the
    frontend once it completes'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突变：一种特殊类型的GraphQL查询，它改变了一些远程资源的状态，一旦完成，Relay必须找出如何在前端反映这种变化
- en: Let's quickly talk about data dependencies and mutations so that we can look
    at some application code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速谈谈数据依赖和突变，这样我们就可以看一些应用程序代码。
- en: Declarative data dependencies
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明性数据依赖
- en: Relay uses the term collocation to describe declarative data dependencies that
    live beside the component that uses the data. This means that you don't have to
    go digging around for action creator functions that actually get the component
    data that is scattered across several modules. With collocation, you can see exactly
    what the component needs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Relay使用collocation这个术语来描述声明性数据依赖，这些数据依赖与使用数据的组件并存。这意味着你不必四处寻找实际获取组件数据的动作创建函数，这些函数分散在几个模块中。通过collocation，你可以清楚地看到组件需要什么。
- en: 'Let''s get a taste of what this looks like. If you want to display the first
    and last name of a user, you need to tell Relay that your component needs this
    data. Then, you can rest assured that the data will always be there for your component.
    Here''s an example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先尝试一下这是什么样子。如果你想显示用户的名字和姓氏，你需要告诉Relay你的组件需要这些数据。然后，你可以放心，数据将始终存在于你的组件中。这是一个例子：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You have two components here. First, there's the `User` component. This is the
    application component that actually renders the UI elements for the `first` and
    `last` name data. Note that this is just a plain old React component, rendering
    props that are passed to it. With the `UserContainer` component that you've created,
    Relay follows the container pattern that you learned about earlier in this book.
    It's in the `createFragmentContainer()` function that you specify the data dependencies
    that this component needs by passing a fragment of GraphQL syntax.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你有两个组件在这里。首先，有`User`组件。这是应用程序组件，实际上呈现了`first`和`last`名称数据的UI元素。请注意，这只是一个普通的旧React组件，呈现传递给它的props。使用您创建的`UserContainer`组件，Relay遵循了您在本书中学到的容器模式。在`createFragmentContainer()`函数中，您通过传递GraphQL语法的片段来指定此组件需要的数据依赖关系。
- en: Once again, don't dwell on the Relay/GraphQL specifics just yet. The idea here
    is to simply illustrate that this is all the code that you need to write to get
    your component the data it needs. The rest is just bootstrapping the Relay query
    mechanism, which you'll see in the next chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，暂时不要过多关注Relay/GraphQL的具体细节。这里的想法只是简单说明这是您需要编写的所有代码，以获取组件所需的数据。其余的只是引导Relay查询机制，您将在下一章中看到。
- en: Mutating application state
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变应用程序状态
- en: Relay mutations are the actions that cause side effects in your systems, because
    they change the state of some resource that your UI cares about. What's interesting
    about Relay mutations is that they care about side effects that happen to your
    data as a result of a change in the state of something. For example, if you change
    the name of a user, this will certainly impact a screen that displays the user
    details. But, it could also impact a listing screen that shows several users.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Relay mutations是导致系统产生副作用的操作，因为它们改变了UI关心的某些资源的状态。关于Relay mutations有趣的是，它们关心的是由于某些状态变化而导致的数据的副作用。例如，如果您更改用户的名称，这肯定会影响显示用户详细信息的屏幕。但是，它也可能影响显示多个用户的列表屏幕。
- en: 'Let''s see what a mutation looks like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看mutation是什么样子的：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is how Relay is able to determine what might be affected as a side effect
    of performing this mutation. For example, the user might change, but also the
    `viewer.users` collection. You'll see more mutations in action in the following
    chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Relay能够确定在执行此mutation的副作用可能受到影响的内容。例如，用户可能会改变，但`viewer.users`集合也可能会改变。您将在接下来的章节中看到更多mutation的操作。
- en: The GraphQL backend and microservices
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GraphQL后端和微服务
- en: Everything I've covered so far about Relay is stuff that's in the browser. Relay
    needs to send it's GraphQL queries somewhere. For this, you need a GraphQL backend.
    You can implement this using Node.js and a handful of GraphQL libraries. You create
    what's called a schema, describing all the datatypes, queries, and mutations that
    will be used.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我所涵盖的关于Relay的一切都是在浏览器中的。Relay需要将其GraphQL查询发送到某个地方。为此，您需要一个GraphQL后端。您可以使用Node.js和一些GraphQL库来实现这一点。您创建所谓的模式，描述将使用的所有数据类型、查询和mutation。
- en: In the browser, Relay helps you scale your applications by reducing data-flow
    complexity. You have a means to declare what data is needed, without worrying
    about how it is fetched. It's the schema in the backend that actually needs to
    resolve this data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，Relay通过减少数据流复杂性来帮助您扩展应用程序。您有一种声明所需数据的方法，而不必担心如何获取它。实际上需要解析这些数据的是后端的模式。
- en: This is another scaling problem that GraphQL helps address. Modern web applications
    are composed out of microservices. These are smaller, self-contained API endpoints
    that serve some particular purpose that's smaller than an entire app (hence the
    term micro). It's the job of our application to stitch together these microservices
    and provide the frontend with meaningful data.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是GraphQL帮助解决的另一个扩展问题。现代Web应用程序由微服务组成。这些是较小的、自包含的API端点，提供一些比整个应用程序更小的特定目的（因此称为微服务）。我们的应用程序的工作是将这些微服务组合在一起，并为前端提供有意义的数据。
- en: Again, you're faced with a scalability issue—how do you maintain a backend that's
    composed out of many microservices without introducing insurmountable complexity?
    This is something that GraphQL types excel at. In the following chapter, you'll
    begin the implementation of your Todo application with the backend GraphQL service.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，你面临着一个可扩展性问题——如何在不引入不可逾越的复杂性的情况下维护由许多微服务组成的后端？这是GraphQL类型擅长的事情。在接下来的章节中，您将开始使用后端GraphQL服务实现您的Todo应用程序。
- en: Summary
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The goal of this chapter was to quickly introduce you to the concepts of Relay
    and GraphQL prior to the final chapter of this book, where you're going to implement
    some Relay/GraphQL code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是在本书的最后一章之前，快速向您介绍Relay和GraphQL的概念，您将在最后一章中实现一些Relay/GraphQL代码。
- en: Relay is yet another approach to the state management problem in React applications.
    It's different in the sense that it reduces the complexities associated with the
    data fetching code that we have to write with other approaches to Flux, such as
    Redux.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Relay是React应用程序中状态管理问题的另一种方法。它不同之处在于，它减少了与数据获取代码相关的复杂性，我们必须使用其他Flux方法（如Redux）编写。
- en: The two key aspects of Relay are declarative data dependencies and explicit
    mutation side effect handling. All of this is expressed through GraphQL syntax.
    In order to have a Relay application, you need a GraphQL backend where the data
    schema lives. Now, onto the final chapter, where you'll examine Relay/GraphQL
    concepts in more detail.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Relay的两个关键方面是声明式数据依赖和显式的突变副作用处理。所有这些都通过GraphQL语法表达。为了拥有一个Relay应用程序，你需要一个数据模式存在的GraphQL后端。现在，进入最后一章，你将更详细地研究Relay/GraphQL的概念。
- en: Test your knowledge
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: What's the difference between Relay and other Flux inspired libraries like Redux?
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Relay和其他受Flux启发的库（如Redux）之间有什么区别？
- en: There is no difference, Relay is just another Flux option.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有区别，Relay只是另一个Flux选项。
- en: Relay is meant for React Native apps, you should stick with Redux for web apps.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Relay是为React Native应用程序设计的，你应该在Web应用程序中使用Redux。
- en: Relay helps scale your Flux architecture by allowing data dependency declarations
    and hiding all of the server communication complexity.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Relay通过允许数据依赖声明和隐藏所有服务器通信复杂性来帮助扩展您的Flux架构。
- en: How does Relay simplify the data requirements of React components?
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Relay如何简化React组件的数据需求？
- en: By collocating the data dependency queries, you can see exactly what data your
    components use without having to sift through code that does the fetching.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过合并数据依赖查询，您可以准确地看到您的组件使用的数据，而无需查看执行获取操作的代码。
- en: By fetching all of the application data upfront, Relay can then query locally
    for data that each of your components need.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过预先获取所有应用程序数据，Relay可以查询每个组件需要的数据。
- en: By abstracting network calls. GraphQL is optional, you can use straight HTTP
    if you want instead.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过抽象网络调用。GraphQL是可选的，如果你愿意，你可以使用直接的HTTP。
- en: How do your React components communicate with the server in a Relay based application?
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在基于Relay的应用程序中，您的React组件如何与服务器通信？
- en: You have to implement your own network communication logic. Relay just handles
    getting data to components.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须实现自己的网络通信逻辑。Relay 只处理将数据传递给组件。
- en: Relay compiles the GraphQL queries that it finds in your components and handles
    all of the GraphQL server communication for you, including caching optimizations.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Relay 编译在您的组件中找到的 GraphQL 查询，并为您处理所有的 GraphQL 服务器通信，包括缓存优化。
- en: Further reading
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多阅读
- en: 'Visit the following link for more information:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下链接获取更多信息：
- en: '[https://facebook.github.io/relay/](https://facebook.github.io/relay/)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/relay/](https://facebook.github.io/relay/)'
