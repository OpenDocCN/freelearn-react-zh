["```jsx\nimport React from 'react';\nimport {\n  Text,\n  ScrollView,\n  ActivityIndicator,\n  Switch,\n  View\n} from 'react-native';\n\nimport styles from './styles';\n\nexport default () => (\n  <View style={styles.container}>\n    {/* The \"<ScrollView>\" can wrap any\n         other component to make it scrollable.\n         Here, we're repeating an arbitrary group\n         of components to create some scrollable\n         content */}\n    <ScrollView style={styles.scroll}>\n      {new Array(6).fill(null).map((v, i) => (\n        <View key={i}>\n          {/* Abitrary \"<Text>\" component... */}\n          <Text style={[styles.scrollItem, styles.text]}>\n            Some text\n          </Text>\n\n          {/* Arbitrary \"<ActivityIndicator>\"... */}\n          <ActivityIndicator style={styles.scrollItem} size=\"large\" />\n\n          {/* Arbitrary \"<Switch>\" component... */}\n          <Switch style={styles.scrollItem} />\n        </View>\n      ))}\n    </ScrollView>\n  </View>\n); \n```", "```jsx\nscroll: { \n  height: 1, \n  alignSelf: 'stretch', \n}, \n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Text,\n  TouchableOpacity,\n  TouchableHighlight\n} from 'react-native';\n\nimport styles from './styles';\n\n// The \"touchables\" map is used to get the right\n// component to wrap around the button. The\n// \"undefined\" key represents the default.\nconst touchables = new Map([\n  ['opacity', TouchableOpacity],\n  ['highlight', TouchableHighlight],\n  [undefined, TouchableOpacity]\n]);\n\nconst Button = ({ label, onPress, touchable }) => {\n  // Get's the \"Touchable\" component to use,\n  // based on the \"touchable\" property value.\n  const Touchable = touchables.get(touchable);\n\n  // Properties to pass to the \"Touchable\"\n  // component.\n  const touchableProps = {\n    style: styles.button,\n    underlayColor: 'rgba(112,128,144,0.3)',\n    onPress\n  };\n\n  // Renders the \"<Text>\" component that's\n  // styled to look like a button, and is\n  // wrapped in a \"<Touchable>\" component\n  // to properly handle user interactions.\n  return (\n    <Touchable {...touchableProps}>\n      <Text style={styles.buttonText}> {label} </Text>\n    </Touchable>\n  );\n};\n\nButton.propTypes = {\n  onPress: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  touchable: PropTypes.oneOf(['opacity', 'highlight'])\n};\n\nexport default Button; \n```", "```jsx\nbutton: { \n  padding: 10, \n  margin: 5, \n  backgroundColor: 'azure', \n  borderWidth: 1, \n  borderRadius: 4, \n  borderColor: 'slategrey', \n}, \n\nbuttonText: { \n  color: 'slategrey', \n} \n```", "```jsx\nimport React from 'react';\nimport { View } from 'react-native';\n\nimport styles from './styles';\nimport Button from './Button';\n\nexport default () => (\n  <View style={styles.container}>\n    {/* Renders a \"<Button>\" that uses\n         \"TouchableOpacity\" to handle user\n         gestures, since that is the default */}\n    <Button onPress={() => {}} label=\"Opacity\" />\n\n    {/* Renders a \"<Button>\" that uses\n         \"TouchableHighlight\" to handle\n         user gestures. */}\n    <Button\n      onPress={() => {}}\n      label=\"Highlight\"\n      touchable=\"highlight\"\n    />\n  </View>\n); \n```", "```jsx\nimport React, { Component } from 'react';\nimport { View } from 'react-native';\nimport { fromJS } from 'immutable';\n\nimport styles from './styles';\nimport Swipeable from './Swipeable';\n\nexport default class SwipableAndCancellable extends Component {\n  // The initial state is an immutable list of\n  // 8 swipable items.\n  state = {\n    data: fromJS(\n      new Array(8)\n        .fill(null)\n        .map((v, id) => ({ id, name: 'Swipe Me' }))\n    )\n  };\n\n  // Getter for \"Immutable.js\" state data...\n  get data() {\n    return this.state.data;\n  }\n\n  // Setter for \"Immutable.js\" state data...\n  set data(data) {\n    this.setState({ data });\n  }\n\n  // The swipe handler passed to \"<Swipeable>\".\n  // The swiped item is removed from the state.\n  // This is a higher-order function that returns\n  // the real handler so that the \"id\" context\n  // can be set.\n  onSwipe = id => () => {\n    this.data = this.data.filterNot(v => v.get('id') === id);\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        {this.data\n          .toJS()\n          .map(i => (\n            <Swipeable\n              key={i.id}\n              onSwipe={this.onSwipe(i.id)}\n              name={i.name}\n            />\n          ))}\n      </View>\n    );\n  }\n} \n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  ScrollView,\n  Text,\n  TouchableOpacity\n} from 'react-native';\n\nimport styles from './styles';\n\n// The \"onScroll\" handler. This is actually\n// a higher-order function that returns the\n// actual handler. When the x offset is 200,\n// when know that the component has been\n// swiped and can call \"onSwipe()\".\nconst onScroll = onSwipe => e =>\n  e.nativeEvent.contentOffset.x === 200 && onSwipe();\n\n// The static properties used by the \"<ScrollView>\"\n// component.\nconst scrollProps = {\n  horizontal: true,\n  pagingEnabled: true,\n  showsHorizontalScrollIndicator: false,\n  scrollEventThrottle: 10\n};\n\nconst Swipeable = ({ onSwipe, name }) => (\n  <View style={styles.swipeContainer}>\n    {/* The \"<View>\" that wraps this \"<ScrollView>\"\n         is necessary to make scrolling work properly. */}\n    <ScrollView {...scrollProps} onScroll={onScroll(onSwipe)}>\n      {/* Not strictly necessary, but \"<TouchableOpacity>\"\n           does provide the user with meaningful feedback\n           when they initially press down on the text. */}\n      <TouchableOpacity>\n        <View style={styles.swipeItem}>\n          <Text style={styles.swipeItemText}>{name}</Text>\n        </View>\n      </TouchableOpacity>\n      <View style={styles.swipeBlank} />\n    </ScrollView>\n  </View>\n);\n\nSwipeable.propTypes = {\n  onSwipe: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired\n};\n\nexport default Swipeable; \n```", "```jsx\nswipeContainer: { \n  flex: 1, \n  flexDirection: 'row', \n  width: 200, \n  height: 30, \n  marginTop: 50, \n}, \n\nswipeItem: { \n  width: 200, \n  height: 30, \n  backgroundColor: 'azure', \n  justifyContent: 'center', \n  borderWidth: 1, \n  borderRadius: 4, \n  borderColor: 'slategrey', \n}, \n\nswipeItemText: { \n  textAlign: 'center', \n  color: 'slategrey', \n}, \n\nswipeBlank: { \n  width: 200, \n  height: 30, \n}, \n```"]