["```jsx\n// The \"render()\" function will render JSX markup and\n// place the resulting content into a DOM node. The \"React\"\n// object isn't explicitly used here, but it's used\n// by the transpiled JSX source.\nimport React from 'react';\nimport { render } from 'react-dom';\n\n// Renders the JSX markup. Notice the XML syntax\n// mixed with JavaScript? This is replaced by the\n// transpiler before it reaches the browser.\nrender(\n <p>\n    Hello, <strong>JSX</strong>\n  </p>,\n  document.getElementById('root')\n);\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\n// The render() function will only complain if the browser doesn't\n// recognize the tag\nrender(\n  <div>\n    <button />\n    <code />\n    <input />\n    <label />\n    <p />\n    <pre />\n    <select />\n    <table />\n    <ul />\n  </div>,\n  document.getElementById('root')\n);\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\n// This renders as expected, except for the \"foo\"\n// property, since this is not a recognized button\n// property.\nrender(\n  <button title=\"My Button\" foo=\"bar\">\n    My Button\n  </button>,\n  document.getElementById('root')\n);\n\n// This fails with a \"ReferenceError\", because\n// tag names are case-sensitive. This goes against\n// the convention of using lower-case for HTML tag names.\nrender(<Button />, document.getElementById('root'));\n\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\n// This JSX markup describes some fairly-sophisticated\n// markup. Yet, it's easy to read, because it's XML and\n// XML is good for concisely-expressing hierarchical\n// structure. This is how we want to think of our UI,\n// when it needs to change, not as an individual element\n// or property.\nrender(\n  <section>\n    <header>\n      <h1>A Header</h1>\n    </header>\n    <nav>\n      <a href=\"item\">Nav Item</a>\n    </nav>\n    <main>\n      <p>The main content...</p>\n    </main>\n    <footer>\n      <small>&copy; 2018</small>\n    </footer>\n  </section>,\n  document.getElementById('root')\n);\n```", "```jsx\n// We also need \"Component\" so that we can\n// extend it and make a new JSX tag.\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\n\n// \"MyComponent\" extends \"Compoennt\", which means that\n// we can now use it in JSX markup.\nclass MyComponent extends Component {\n  render() {\n    // All components have a \"render()\" method, which\n    // retunrns some JSX markup. In this case, \"MyComponent\"\n    // encapsulates a larger HTML structure.\n    return (\n      <section>\n        <h1>My Component</h1>\n        <p>Content in my component...</p>\n      </section>\n    );\n  }\n}\n\n// Now when we render \"<MyComponent>\" tags, the encapsulated\n// HTML structure is actually rendered. These are the\n// building blocks of our UI.\nrender(<MyComponent />, document.getElementById('root'));\n\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\n// Imports our two components that render children...\nimport MySection from './MySection';\nimport MyButton from './MyButton';\n\n// Renders the \"MySection\" element, which has a child\n// component of \"MyButton\", which in turn has child text.\nrender(\n  <MySection>\n    <MyButton>My Button Text</MyButton>\n  </MySection>,\n  document.getElementById('root')\n);\n```", "```jsx\nimport React, { Component } from 'react';\n\n// Renders a \"<section>\" element. The section has\n// a heading element and this is followed by\n// \"this.props.children\".\nexport default class MySection extends Component {\n  render() {\n    return (\n      <section>\n        <h2>My Section</h2>\n        {this.props.children}\n      </section>\n    );\n  }\n}\n```", "```jsx\nimport React, { Component } from 'react';\n\n// Renders a \"<button>\" element, using\n// \"this.props.children\" as the text.\nexport default class MyButton extends Component {\n  render() {\n    return <button>{this.props.children}</button>;\n  }\n}\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\n// We only need to import \"MyComponent\" since\n// the \"First\" and \"Second\" components are part\n// of this \"namespace\".\nimport MyComponent from './MyComponent';\n\n// Now we can render \"MyComponent\" elements,\n// and it's \"namespaced\" elements as children.\n// We don't actually have to use the namespaced\n// syntax here, we could import the \"First\" and\n// \"Second\" components and render them without the\n// \"namespace\" syntax. It's a matter of readability\n// and personal taste.\nrender(\n  <MyComponent>\n    <MyComponent.First />\n    <MyComponent.Second />\n  </MyComponent>,\n  document.getElementById('root')\n);\n\n```", "```jsx\nimport React, { Component } from 'react';\n\n// The \"First\" component, renders some basic JSX...\nclass First extends Component {\n  render() {\n    return <p>First...</p>;\n  }\n}\n\n// The \"Second\" component, renders some basic JSX...\nclass Second extends Component {\n  render() {\n    return <p>Second...</p>;\n  }\n}\n\n// The \"MyComponent\" component renders it's children\n// in a \"<section>\" element.\nclass MyComponent extends Component {\n  render() {\n    return <section>{this.props.children}</section>;\n  }\n}\n\n// Here is where we \"namespace\" the \"First\" and\n// \"Second\" components, by assigning them to\n// \"MyComponent\" as class properties. This is how\n// other modules can render them as \"<MyComponent.First>\"\n// elements.\nMyComponent.First = First;\nMyComponent.Second = Second;\n\nexport default MyComponent;\n\n// This isn't actually necessary. If we want to be able\n// to use the \"First\" and \"Second\" components independent\n// of \"MyComponent\", we would leave this in. Otherwise,\n// we would only export \"MyComponent\".\nexport { First, Second };\n\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\n// These constants are passed into the JSX\n// markup using the JavaScript expression syntax.\nconst enabled = false;\nconst text = 'A Button';\nconst placeholder = 'input value...';\nconst size = 50;\n\n// We're rendering a \"<button>\" and an \"<input>\"\n// element, both of which use the \"{}\" JavaScript\n// expression syntax to fill in property, and text\n// values.\nrender(\n  <section>\n    <button disabled={!enabled}>{text}</button>\n    <input placeholder={placeholder} size={size} />\n  </section>,\n  document.getElementById('root')\n);\n\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\n// An array that we want to render as s list...\nconst array = ['First', 'Second', 'Third'];\n\n// An object that we want to render as a list...\nconst object = {\n  first: 1,\n  second: 2,\n  third: 3\n};\n\nrender(\n  <section>\n    <h1>Array</h1>\n\n    {/* Maps \"array\" to an array of \"<li>\"s.\n         Note the \"key\" property on \"<li>\".\n         This is necessary for performance reasons,\n         and React will warn us if it's missing. */}\n    <ul>{array.map(i => <li key={i}>{i}</li>)}</ul>\n    <h1>Object</h1>\n\n    {/* Maps \"object\" to an array of \"<li>\"s.\n         Note that we have to use \"Object.keys()\"\n         before calling \"map()\" and that we have\n         to lookup the value using the key \"i\". */}\n    <ul>\n      {Object.keys(object).map(i => (\n        <li key={i}>\n          <strong>{i}: </strong>\n          {object[i]}\n        </li>\n      ))}\n    </ul>\n  </section>,\n  document.getElementById('root')\n);\n\n```", "```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport WithoutFragments from './WithoutFragments';\nimport WithFragments from './WithFragments';\n\nrender(\n  <div>\n    <WithoutFragments />\n    <WithFragments />\n  </div>,\n  document.getElementById('root')\n);\n```", "```jsx\nimport React, { Component } from 'react';\n\nclass WithoutFragments extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Without Fragments</h1>\n        <p>\n          Adds an extra <code>div</code> element.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default WithoutFragments;\n```", "```jsx\nimport React, { Component, Fragment } from 'react';\n\nclass WithFragments extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1>With Fragments</h1>\n        <p>Doesn't have any unused DOM elements.</p>\n      </Fragment>\n    );\n  }\n}\n\nexport default WithFragments;\n```"]