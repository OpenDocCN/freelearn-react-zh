["```jsx\nimport { fromJS } from 'immutable';\n\n// The state of the application is contained\n// within an Immutable.js Map. Each key represents\n// a \"slice\" of state.\nexport default fromJS({\n  // The \"App\" state is the generic state that's\n  // always visible. This state is not specific to\n  // one particular feature, in other words. It has\n  // the app title, and links to various article\n  // sections.\n  App: {\n    title: 'Neckbeard News',\n    links: [\n      { name: 'All', url: '/' },\n      { name: 'Local', url: '/local' },\n      { name: 'Global', url: '/global' },\n      { name: 'Tech', url: '/tech' },\n      { name: 'Sports', url: '/sports' }\n    ]\n  },\n\n  // The \"Home\" state is where lists of articles are\n  // rendered. Initially, there are no articles, so\n  // the \"articles\" list is empty until they're fetched\n  // from the API.\n  Home: {\n    articles: []\n  },\n\n  // The \"Article\" state represents the full article. The\n  // assumption is that the user has navigated to a full\n  // article page and we need the entire article text here.\n  Article: {\n    full: ''\n  }\n}); \n```", "```jsx\nimport { createStore } from 'redux';\nimport { combineReducers } from 'redux-immutable';\n\n// So build a Redux store, we need the \"initialState\"\n// and all of our reducer functions that return\n// new state.\nimport initialState from './initialState';\nimport App from './App';\nimport Home from './Home';\nimport Article from './Article';\n\n// The \"createStore()\" and \"combineReducers()\" functions\n// perform all of the heavy-lifting.\nexport default createStore(\n  combineReducers({\n    App,\n    Home,\n    Article\n  }),\n  initialState\n); \n```", "```jsx\nimport React from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from '../store';\nimport App from './App';\n\nexport default () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n```", "```jsx\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  NavLink\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n// Components that render application state.\nimport Home from './Home';\nimport Article from './Article';\n\n// Higher order component for making the\n// various article section components out of\n// the \"Home\" component. The only difference\n// is the \"filter\" property. Having unique JSX\n// element names is easier to read than a bunch\n// of different property values.\nconst articleList = filter => props => (\n  <Home {...props} filter={filter} />\n);\n\nconst categoryListStyle = {\n  listStyle: 'none',\n  margin: 0,\n  padding: 0,\n  display: 'flex'\n};\n\nconst categoryItemStyle = {\n  padding: '5px'\n};\n\nconst Local = articleList('local');\nconst Global = articleList('global');\nconst Tech = articleList('tech');\nconst Sports = articleList('sports');\n\n// Routes to the home page, the different\n// article sections, and the article details page.\n// The \"<Provider>\" element is how we pass Redux\n// store data to each of our components.\nexport default connect(state => state.get('App').toJS())(\n  ({ title, links }) => (\n    <Router>\n      <main>\n        <h1>{title}</h1>\n        <ul style={categoryListStyle}>\n          {/* Renders a link for each article category.\n             The key thing to note is that the \"links\"\n             value comes from a Redux store. */}\n          {links.map(l => (\n            <li key={l.url} style={categoryItemStyle}>\n              <NavLink\n                exact\n                to={l.url}\n                activeStyle={{ fontWeight: 'bold' }}\n              >\n                {l.name}\n              </NavLink>\n            </li>\n          ))}\n        </ul>\n        <section>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/local\" component={Local} />\n          <Route exact path=\"/global\" component={Global} />\n          <Route exact path=\"/tech\" component={Tech} />\n          <Route exact path=\"/sports\" component={Sports} />\n          <Route exact path=\"/articles/:id\" component={Article} />\n        </section>\n      </main>\n    </Router>\n  )\n);\n\n```", "```jsx\nimport { fromJS } from 'immutable';\nimport initialState from './initialState';\n\n// The initial page heading.\nconst title = initialState.getIn(['App', 'title']);\n\n// Links to display when an article is displayed.\nconst articleLinks = fromJS([\n  {\n    name: 'Home',\n    url: '/'\n  }\n]);\n\n// Links to display when we're on the home page.\nconst homeLinks = initialState.getIn(['App', 'links']);\n\n// Maps the action type to a function\n// that returns new state.\nconst typeMap = fromJS({\n  // The article is being fetched, adjust\n  // the \"title\" and \"links\" state.\n  FETCHING_ARTICLE: state =>\n    state.set('title', '...').set('links', articleLinks),\n\n  // The article has been fetched. Set the title\n  // of the article.\n  FETCH_ARTICLE: (state, payload) =>\n    state.set('title', payload.title),\n\n  // The list of articles are being fetched. Set\n  // the \"title\" and the \"links\".\n  FETCHING_ARTICLES: state =>\n    state.set('title', title).set('links', homeLinks),\n\n  // The articles have been fetched, update the\n  // \"title\" state.\n  FETCH_ARTICLES: state => state.set('title', title)\n});\n\n// This reducer relies on the \"typeMap\" and the\n// \"type\" of action that was dispatched. If it's\n// not found, then the state is simply returned.\nexport default (state, { type, payload }) =>\n  typeMap.get(type, () => state)(state, payload); \n```", "```jsx\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Map } from 'immutable';\n\n// Various styles...\nconst listStyle = {\n  listStyle: 'none',\n  margin: 0,\n  padding: 0\n};\n\nconst listItemStyle = {\n  margin: '0 5px'\n};\n\nconst titleStyle = {\n  background: 'transparent',\n  border: 'none',\n  font: 'inherit',\n  cursor: 'pointer',\n  padding: '5px 0'\n};\n\n// What to render when the article list is empty\n// (true/false). When it's empty, a single elipses\n// is displayed.\nconst emptyMap = Map()\n  .set(true, <li style={listItemStyle}>...</li>)\n  .set(false, null);\n\nclass Home extends Component {\n  static propTypes = {\n    articles: PropTypes.arrayOf(PropTypes.object).isRequired,\n    fetchingArticles: PropTypes.func.isRequired,\n    fetchArticles: PropTypes.func.isRequired,\n    toggleArticle: PropTypes.func.isRequired,\n    filter: PropTypes.string.isRequired\n  };\n\n  static defaultProps = {\n    filter: ''\n  };\n\n  // When the component is mounted, there's two actions\n  // to dispatch. First, we want to tell the world that\n  // we're fetching articles before they're actually\n  // fetched. Then, we call \"fetchArticles()\" to perform\n  // the API call.\n  componentWillMount() {\n    this.props.fetchingArticles();\n    this.props.fetchArticles(this.props.filter);\n  }\n\n  // When an article title is clicked, toggle the state of\n  // the article by dispatching the toggle article action.\n  onTitleClick = id => () => this.props.toggleArticle(id);\n\n  render() {\n    const { onTitleClick } = this;\n    const { articles } = this.props;\n\n    return (\n      <ul style={listStyle}>\n        {emptyMap.get(articles.length === 0)}\n        {articles.map(a => (\n          <li key={a.id} style={listItemStyle}>\n            <button onClick={onTitleClick(a.id)} style={titleStyle}>\n              {a.title}\n            </button>\n            {/* The summary of the article is displayed\n                 based on the \"display\" property. This state\n                 is toggled when the user clicks the title. */}\n            <p style={{ display: a.display }}>\n              <small>\n                <span>{a.summary} </span>\n                <Link to={`articles/${a.id}`}>More...</Link>\n              </small>\n            </p>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\n// The \"connect()\" function connects this component\n// to the Redux store. It accepts two functions as\n// arguments...\nexport default connect(\n  // Maps the immutable \"state\" object to a JavaScript\n  // object. The \"ownProps\" are plain JSX props that\n  // are merged into Redux store data.\n  (state, ownProps) =>\n    Object.assign(state.get('Home').toJS(), ownProps),\n\n  // Sets the action creator functions as props. The\n  // \"dispatch()\" function is when actually invokes\n  // store reducer functions that change the state\n  // of the store, and cause new prop values to be passed\n  // to this component.\n  dispatch => ({\n    fetchingArticles: () =>\n      dispatch({\n        type: 'FETCHING_ARTICLES'\n      }),\n\n    fetchArticles: filter => {\n      const headers = new Headers();\n      headers.append('Accept', 'application/json');\n\n      fetch(`/api/articles/${filter}`, { headers })\n        .then(resp => resp.json())\n        .then(json =>\n          dispatch({\n            type: 'FETCH_ARTICLES',\n            payload: json\n          })\n        );\n    },\n\n    toggleArticle: payload =>\n      dispatch({\n        type: 'TOGGLE_ARTICLE',\n        payload\n      })\n  })\n)(Home); \n```", "```jsx\nimport { fromJS } from 'immutable';\n\nconst typeMap = fromJS({\n  // Clear any old articles right before\n  // we fetch new articles.\n  FETCHING_ARTICLES: state =>\n    state.update('articles', a => a.clear()),\n\n  // Articles have been fetched. Update the\n  // \"articles\" state, and make sure that the\n  // summary display is \"none\".\n  FETCH_ARTICLES: (state, payload) =>\n    state.set(\n      'articles',\n      fromJS(payload)\n        .map(a => a.set('display', 'none'))\n    ),\n\n  // Toggles the state of the selected article\n  // \"id\". First we have to find the index of\n  // the article so that we can update it's\n  // \"display\" state. If it's already hidden,\n  // we show it, and vice-versa.\n  TOGGLE_ARTICLE: (state, id) =>\n    state.updateIn([\n      'articles',\n      state\n        .get('articles')\n        .findIndex(a => a.get('id') === id),\n      'display',\n    ], display =>\n      display === 'none' ?\n        'block' : 'none'\n    ),\n});\n\nexport default (state, { type, payload }) =>\n  typeMap.get(type, s => s)(state, payload); \n```", "```jsx\nimport { fromJS } from 'immutable';\n\nexport default fromJS({\n  Main: {\n    title: 'All',\n    component: 'articles',\n  },\n  Categories: {\n    items: [\n      {\n        title: 'All',\n        filter: '',\n        selected: true,\n      },\n      {\n        title: 'Local',\n        filter: 'local',\n        selected: false,\n      },\n      {\n        title: 'Global',\n        filter: 'global',\n        selected: false,\n      },\n      {\n        title: 'Tech',\n        filter: 'tech',\n        selected: false,\n      },\n      {\n        title: 'Sports',\n        filter: 'sports',\n        selected: false,\n      },\n    ],\n  },\n  Articles: {\n    filter: '',\n    items: [],\n  },\n  Article: {\n    full: '',\n  },\n}); \n```"]