["```jsx\nimport React from 'react';\nimport { View, ActivityIndicator } from 'react-native';\n\nimport styles from './styles';\n\n// Renders an \"<ActivityIndicator>\" component in the\n// middle of the screen. It will animate on it's own\n// while displayed.\nexport default () => (\n  <View style={styles.container}>\n    <ActivityIndicator size=\"large\" />\n  </View>\n); \n```", "```jsx\n// Exports the \"ProgressViewIOS\" as the \n// \"ProgressBarComponent\" component that \n// our \"ProgressBar\" expects. \nexport { \n  ProgressViewIOS as ProgressBarComponent, \n} from 'react-native'; \n\n// There are no custom properties needed. \nexport const progressProps = {}; \n```", "```jsx\n// Exports the \"ProgressBarAndroid\" component as \n// \"ProgressBarComponent\" that our \"ProgressBar\" \n// expects. \nexport { \n  ProgressBarAndroid as ProgressBarComponent, \n} from 'react-native'; \n\n// The \"styleAttr\" and \"indeterminate\" props are \n// necessary to make \"ProgressBarAndroid\" look like \n// \"ProgressViewIOS\". \nexport const progressProps = { \n  styleAttr: 'Horizontal', \n  indeterminate: false, \n}; \n```", "```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text } from 'react-native';\n\n// Imports the \"ProgressBarComponent\" which is the\n// actual react-native implementation. The actual\n// component that's imported is platform-specific.\n// The custom props in \"progressProps\" is also\n// platform-specific.\nimport {\n  ProgressBarComponent,\n  progressProps\n} from './ProgressBarComponent';\n\nimport styles from './styles';\n\n// The \"ProgressLabel\" component determines what to\n// render as a label, based on the boolean \"label\"\n// prop. If true, then we render some text that shows\n// the progress percentage. If false, we render nothing.\nconst ProgressLabel = ({ show, progress }) =>\n  show && (\n    <Text style={styles.progressText}>\n      {Math.round(progress * 100)}%\n    </Text>\n  );\n\n// Our generic progress bar component...\nconst ProgressBar = ({ progress, label }) => (\n  <View style={styles.progress}>\n    <ProgressLabel show={label} progress={progress} />\n    {/* \"<ProgressBarComponent>\" is really a \"\"<ProgressViewIOS>\"\n         or a \"<ProgressBarAndroid>\". */}\n    <ProgressBarComponent\n      {...progressProps}\n      style={styles.progress}\n      progress={progress}\n    />\n  </View>\n);\n\nProgressBar.propTypes = {\n  progress: PropTypes.number.isRequired,\n  label: PropTypes.bool.isRequired\n};\n\nProgressBar.defaultProps = {\n  progress: 0,\n  label: true\n};\n\nexport default ProgressBar; \n```", "```jsx\nimport React, { Component } from 'react';\nimport { View } from 'react-native';\n\nimport styles from './styles';\nimport ProgressBar from './ProgressBar';\n\nexport default class MeasuringProgress extends Component {\n  // Initially at 0% progress. Changing this state\n  // updates the progress bar.\n  state = {\n    progress: 0\n  };\n\n  componentDidMount() {\n    // Continuously increments the \"progress\" state\n    // every 300MS, until we're at 100%.\n    const updateProgress = () => {\n      this.setState({\n        progress: this.state.progress + 0.01\n      });\n\n      if (this.state.progress < 1) {\n        setTimeout(updateProgress, 300);\n      }\n    };\n\n    updateProgress();\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        {/* This is awesome. A simple generic\n             \"<ProgressBar>\" component that works\n             on Android and on iOS. */}\n        <ProgressBar progress={this.state.progress} />\n      </View>\n    );\n  }\n} \n```", "```jsx\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, ActivityIndicator } from 'react-native';\n\nimport styles from './styles';\n\n// Wraps the \"Wrapped\" component with a stateful component\n// that renders an \"<ActivityIndicator>\" when the \"loading\"\n// state is true.\nconst loading = Wrapped =>\n  class LoadingWrapper extends Component {\n    static propTypes = {\n      promise: PropTypes.instanceOf(Promise)\n    };\n\n    state = {\n      loading: true\n    };\n\n    // Adds a callback to the \"promise\" that was\n    // passed in. When the promise resolves, we set\n    // the \"loading\" state to false.\n    componentDidMount() {\n      this.props.promise.then(\n        () => this.setState({ loading: false }),\n        () => this.setState({ loading: false })\n      );\n    }\n\n    // If \"loading\" is true, render the \"<ActivityIndicator>\"\n    // component. Otherwise, render the \"<Wrapped>\" component.\n    render() {\n      return new Map([\n        [\n          true,\n          <View style={styles.container}>\n            <ActivityIndicator size=\"large\" />\n          </View>\n        ],\n        [false, <Wrapped {...this.props} />]\n      ]).get(this.state.loading);\n    }\n  };\n\nexport default loading; \n```", "```jsx\nimport React from 'react';\nimport { View, Text } from 'react-native';\n\nimport styles from './styles';\nimport loading from './loading';\n\nconst First = loading(({ navigation }) => (\n  <View style={styles.container}>\n    <Text\n      style={styles.item}\n      onPress={() => navigation.navigate('Second')}\n    >\n      Second\n    </Text>\n    <Text\n      style={styles.item}\n      onPress={() => navigation.navigate('Third')}\n    >\n      Third\n    </Text>\n  </View>\n));\n\nexport default First; \n```", "```jsx\nimport React from 'react';\nimport { createStackNavigator } from 'react-navigation';\n\nimport First from './First';\nimport Second from './Second';\nimport Third from './Third';\n\nexport default createStackNavigator(\n  {\n    First: {\n      screen: props => (\n        <First\n          promise={new Promise(resolve => setTimeout(resolve, 1000))}\n          {...props}\n        />\n      )\n    },\n    Second: {\n      screen: props => (\n        <Second\n          promise={new Promise(resolve => setTimeout(resolve, 1000))}\n          {...props}\n        />\n      )\n    },\n    Third: {\n      screen: props => (\n        <First\n          promise={new Promise(resolve => setTimeout(resolve, 1000))}\n          {...props}\n        />\n      )\n    }\n  },\n  { initialRouteName: 'First' }\n); \n```", "```jsx\nimport React from 'react';\nimport { createStackNavigator } from 'react-navigation';\n\nimport First from './First';\nimport Second from './Second';\nimport Third from './Third';\nimport Fourth from './Fourth';\n\nconst routes = [First, Second, Third, Fourth];\n\nexport default createStackNavigator(\n  routes.reduce(\n    (result, route) => ({\n      ...result,\n      [route.name]: route\n    }),\n    {}\n  ),\n  {\n    initialRouteName: 'First',\n    initialRouteParams: {\n      progress: route =>\n        (routes.map(r => r.name).indexOf(route) + 1) / routes.length\n    }\n  }\n);\n\n```", "```jsx\nimport React from 'react';\nimport { View, Text } from 'react-native';\n\nimport styles from './styles';\nimport ProgressBar from './ProgressBar';\n\nconst First = () => (\n  <View style={styles.container}>\n    <Text style={styles.content}>First Content</Text>\n  </View>\n);\n\nFirst.navigationOptions = ({ navigation }) => ({\n  headerTitle: (\n    <View style={styles.progress}>\n      <Text style={styles.title}>First</Text>\n      <ProgressBar\n        label={false}\n        progress={navigation.state.params.progress(\n          navigation.state.routeName\n        )}\n      />\n    </View>\n  ),\n  headerLeft: (\n    <Text\n      onPress={() =>\n        navigation.navigate('Fourth', navigation.state.params)\n      }\n    >\n      Fourth\n    </Text>\n  ),\n  headerRight: (\n    <Text\n      onPress={() =>\n        navigation.navigate('Second', navigation.state.params)\n      }\n    >\n      Second\n    </Text>\n  )\n});\n\nexport default First;\n```"]