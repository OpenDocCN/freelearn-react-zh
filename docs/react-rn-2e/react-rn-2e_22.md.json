["```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Image } from 'react-native';\n\nimport styles from './styles';\n\n// Renders two \"<Image>\" components, passing the\n// properties of this component to the \"source\"\n// property of each image.\nconst LoadingImages = ({ reactSource, relaySource }) => (\n  <View style={styles.container}>\n    <Image style={styles.image} source={reactSource} />\n    <Image style={styles.image} source={relaySource} />\n  </View>\n);\n\n// The \"source\" property can be either\n// an object with a \"uri\" string, or a number\n// represending a local \"require()\" resource.\nconst sourceProp = PropTypes.oneOfType([\n  PropTypes.shape({\n    uri: PropTypes.string.isRequired\n  }),\n  PropTypes.number\n]).isRequired;\n\nLoadingImages.propTypes = {\n  reactSource: sourceProp,\n  relaySource: sourceProp\n};\n\nLoadingImages.defaultProps = {\n  // The \"reactSource\" image comes from a remote\n  // location.\n  reactSource: {\n    uri:\n      'https://facebook.github.io/react-native/docs/assets/favicon.png'\n  },\n\n  // The \"relaySource\" image comes from a local\n  // source.\n  relaySource: require('./images/relay.png')\n};\n\nexport default LoadingImages;\n```", "```jsx\nimage: { \n  width: 100, \n  height: 100, \n  margin: 20, \n}, \n```", "```jsx\nimport React, { Component } from 'react';\nimport { View, Text, Image, Slider } from 'react-native';\nimport { fromJS } from 'immutable';\n\nimport styles from './styles';\n\nexport default class ResizingImages extends Component {\n  // The initial state of this component includes\n  // a local image source, and the width/height\n  // image dimensions.\n  state = {\n    data: fromJS({\n      source: require('./images/flux.png'),\n      width: 100,\n      height: 100\n    })\n  };\n\n  // Getter for \"Immutable.js\" state data...\n  get data() {\n    return this.state.data;\n  }\n\n  // Setter for \"Immutable.js\" state data...\n  set data(data) {\n    this.setState({ data });\n  }\n\n  render() {\n    // The state values we need...\n    const { source, width, height } = this.data.toJS();\n\n    return (\n      <View style={styles.container}>\n        {/* The image is rendered using the\n             \"source\", \"width\", and \"height\"\n             state values. */}\n        <Image source={source} style={{ width, height }} />\n        {/* The current \"width\" and \"height\"\n             values are displayed. */}\n        <Text>Width: {width}</Text>\n        <Text>Height: {height}</Text>\n        {/* This slider scales the image size\n             up or down by changing the \"width\"\n             and \"height\" states. */}\n        <Slider\n          style={styles.slider}\n          minimumValue={50}\n          maximumValue={150}\n          value={width}\n          onValueChange={v => {\n            this.data = this.data.merge({\n              width: v,\n              height: v\n            });\n          }}\n        />\n      </View>\n    );\n  }\n} \n```", "```jsx\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Image } from 'react-native';\n\n// The local placeholder image source.\nconst placeholder = require('./images/placeholder.png');\n\n// The mapping to the \"loaded\" state that gets us\n// the appropriate image component.\nconst Placeholder = props =>\n  new Map([\n    [true, null],\n    [false, <Image {...props} source={placeholder} />]\n  ]).get(props.loaded);\n\nclass LazyImage extends Component {\n  // The \"width\" and \"height\" properties\n  // are required. All other properties are\n  // forwarded to the actual \"<Image>\"\n  // component.\n  static propTypes = {\n    style: PropTypes.shape({\n      width: PropTypes.number.isRequired,\n      height: PropTypes.number.isRequired\n    })\n  };\n\n  constructor() {\n    super();\n\n    // We assume that the source hasn't finished\n    // loading yet.\n    this.state = {\n      loaded: false\n    };\n  }\n\n  render() {\n    // The props and state this component\n    // needs in order to render...\n    const {\n      props: {\n        style: { width, height }\n      },\n      state: { loaded }\n    } = this;\n\n    return (\n      <View style={{ width, height }}>\n        {/* The placeholder image is just a standard\n             \"<Image>\" component with a predefined\n             source. It isn't rendered if \"loaded\" is\n             true. */}\n        <Placeholder loaded={loaded} {...this.props} />\n        {/* The actual image is forwarded props that\n             are passed to \"<LazyImage>\". The \"onLoad\"\n             handler ensures the \"loaded\" state is true,\n             removing the placeholder image. */}\n        <Image\n          {...this.props}\n          onLoad={() =>\n            this.setState({\n              loaded: true\n            })\n          }\n        />\n      </View>\n    );\n  }\n}\n\nexport default LazyImage; \n```", "```jsx\nimport React, { Component } from 'react';\nimport { View } from 'react-native';\n\nimport styles from './styles';\nimport LazyImage from './LazyImage';\nimport Button from './Button';\n\n// The remote image to load...\nconst remote =\n  'https://facebook.github.io/react-native/docs/assets/favicon.png';\n\nexport default class LazyLoading extends Component {\n  state = {\n    source: null\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        {/* Renders the lazy image. Since there's\n             no \"source\" value initially, the placeholder\n             image will be rendered. */}\n        <LazyImage\n          style={{ width: 200, height: 100 }}\n          resizeMode=\"contain\"\n          source={this.state.source}\n        />\n        {/* When pressed, this button changes the\n             \"source\" of the lazy image. When the new\n             source loads, the placeholder image is\n             replaced. */}\n        <Button\n          label=\"Load Remote\"\n          onPress={() =>\n            this.setState({\n              source: { uri: remote }\n            })\n          }\n        />\n      </View>\n    );\n  }\n} \n```", "```jsx\nnpm install --save @expo/vector-icons\n```", "```jsx\nimport React, { Component } from 'react';\nimport { View, Picker, FlatList, Text } from 'react-native';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport { fromJS } from 'immutable';\n\nimport styles from './styles';\nimport iconNames from './icon-names.json';\n\nexport default class RenderingIcons extends Component {\n  // The initial state consists of the \"selected\"\n  // category, the \"icons\" JSON object, and the\n  // \"listSource\" used to render the list view.\n  state = {\n    data: fromJS({\n      selected: 'Web Application Icons',\n      icons: iconNames,\n      listSource: []\n    })\n  };\n\n  // Getter for \"Immutable.js\" state data...\n  get data() {\n    return this.state.data;\n  }\n\n  // Setter for \"Immutable.js\" state data...\n  set data(data) {\n    this.setState({ data });\n  }\n\n  // Sets the \"listSource\" state based on the\n  // \"selected\" icon state. Also sets the \"selected\"\n  // state.\n  updateListSource = selected => {\n    this.data = this.data\n      .update('listSource', listSource =>\n        this.data.getIn(['icons', selected])\n      )\n      .set('selected', selected);\n  };\n\n  // Make sure the \"listSource\" is populated\n  // before the first render.\n  componentDidMount() {\n    this.updateListSource(this.data.get('selected'));\n  }\n\n  render() {\n    const { updateListSource } = this;\n\n    // Get the state that we need to render the icon\n    // category picker and the list view with icons.\n    const selected = this.data.get('selected');\n    const categories = this.data\n      .get('icons')\n      .keySeq()\n      .toJS();\n    const listSource = this.data.get('listSource');\n\n    return (\n      <View style={styles.container}>\n        <View style={styles.picker}>\n          {/* Lets the user select a FontAwesome icon\n               category. When the selection is changed,\n               the list view is changed. */}\n          <Picker\n            selectedValue={selected}\n            onValueChange={updateListSource}\n          >\n            {categories.map(c => (\n              <Picker.Item key={c} label={c} value={c} />\n            ))}\n          </Picker>\n        </View>\n        <FlatList\n          style={styles.icons}\n          data={listSource\n            .map((value, key) => ({ key: key.toString(), value }))\n            .toJS()}\n          renderItem={({ item }) => (\n            <View style={styles.item}>\n              {/* The \"<Icon>\" component is used\n                   to render the FontAwesome icon */}\n              <Icon name={item.value} style={styles.itemIcon} />\n              {/* Shows the icon class used */}\n              <Text style={styles.itemText}>{item.value}</Text>\n            </View>\n          )}\n        />\n      </View>\n    );\n  }\n} \n```"]