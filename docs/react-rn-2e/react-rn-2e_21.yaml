- en: Responding to User Gestures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应用户手势
- en: All of the examples that you've implemented so far in this book have relied
    on user gestures. In traditional web applications, you mostly deal with mouse
    events. However, touchscreens rely on the user manipulating elements with their
    fingers—fundamentally different from the mouse.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您在本书中实现的所有示例都依赖于用户手势。在传统的Web应用程序中，您主要处理鼠标事件。然而，触摸屏依赖用户用手指操作元素，这与鼠标完全不同。
- en: The goal of this chapter is to show you how the gesture response system inside
    React Native works and some of the ways this system is exposed via components.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是向您展示React Native内部手势响应系统的工作原理，以及通过组件公开该系统的一些方式。
- en: First you'll learn about scrolling. This is probably the most common gesture,
    besides touch. Then, you'll learn about giving the user the appropriate level
    of feedback when they interact with your components. Finally, you'll implement
    components that can be swiped.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将学习有关滚动的内容。除了触摸之外，这可能是最常见的手势。然后，您将学习在用户与您的组件交互时提供适当级别的反馈。最后，您将实现可以被滑动的组件。
- en: Scrolling with your fingers
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用手指滚动
- en: Scrolling in web applications is done by using the mouse pointer to drag the
    scrollbar back and forth or up and down, or by spinning the mousewheel. This doesn't
    work on a mobile device because there's no mouse. Everything is controlled by
    gestures on the screen. For example, if you want to scroll down, you use your
    thumb or index finger to pull the content up by physically moving your finger
    on the screen.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中，通过使用鼠标指针来拖动滚动条来进行滚动，或者通过旋转鼠标滚轮来进行滚动。这在移动设备上不起作用，因为没有鼠标。一切都由屏幕上的手势控制。例如，如果您想向下滚动，您可以使用拇指或食指在屏幕上移动手指来将内容向上拉。
- en: Scrolling like this is difficult to implement, but it gets more complicated.
    When you scroll on a mobile screen, the velocity of the dragging motion is taken
    into consideration. You drag the screen fast, then let go, and the screen will
    continue to scroll based on how fast you moved. You can also touch the screen
    while this is happening to stop it from scrolling.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样滚动是很难实现的，但它变得更加复杂。当您在移动屏幕上滚动时，会考虑拖动动作的速度。您快速拖动屏幕，然后松开，屏幕将根据您移动的速度继续滚动。在此过程中，您也可以触摸屏幕以阻止其滚动。
- en: Thankfully, you don't have to handle most of this stuff. The `ScrollView` component
    handles much of the scrolling complexity for you. In fact, you've already used
    the `ScrollView` component, back in Chapter 16, *Rendering Item Lists*. The `ListView`
    component has `ScrollView` baked into it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，您不必处理大部分这些内容。`ScrollView`组件为您处理了大部分滚动复杂性。实际上，在第16章*渲染项目列表*中，您已经使用了`ScrollView`组件。`ListView`组件内置了`ScrollView`。
- en: You can hack the low-level parts of user interactions by implementing gesture
    lifecycle methods. You'll probably never need to do this, but if you're interested,
    you can read about it at [http://facebook.github.io/react-native/releases/next/docs/gesture-responder-system.html](http://facebook.github.io/react-native/releases/next/docs/gesture-responder-system.html).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过实现手势生命周期方法来突破用户交互的低级部分。您可能永远不需要这样做，但如果您感兴趣，可以在[http://facebook.github.io/react-native/releases/next/docs/gesture-responder-system.html](http://facebook.github.io/react-native/releases/next/docs/gesture-responder-system.html)上阅读相关内容。
- en: 'You can use the `ScrollView` outside `ListView`. For example, if you''re just
    rendering arbitrary content such as text and other widgets—not a list, in other
    words—you can just wrap it in a `<ScrollView>`. Here''s an example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`ListView`之外使用`ScrollView`。例如，如果您只是渲染文本和其他小部件等任意内容，而不是列表，您可以将其包装在`<ScrollView>`中。以下是一个示例：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `ScrollView` component isn''t of much use on it''s own—its there to wrap
    other components. It does need a height in order to function correctly. Here''s
    what the scroll style looks like:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`ScrollView`组件本身并没有太多用处——它用于包装其他组件。它需要一个高度才能正确地发挥作用。以下是滚动样式的外观：'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `height` is set to `1`, but the `stretch` value of `alignSelf` allows the
    items to display properly. Here''s what the end result looks like:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`height`设置为`1`，但`alignSelf`的`stretch`值允许项目正确显示。以下是最终结果的外观：'
- en: '![](Images/3da6eac6-0017-42cc-9dfa-49f283008e8e.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3da6eac6-0017-42cc-9dfa-49f283008e8e.png)'
- en: There's a vertical scrollbar on the right side of the screen as you drag the
    content down. If you run this example, you can play around with making various
    gestures, such as making content scroll on its own and then making it stop.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当您拖动内容时，屏幕右侧会出现垂直滚动条。如果运行此示例，您可以尝试进行各种手势，例如使内容自动滚动，然后停止。
- en: Giving touch feedback
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供触摸反馈
- en: The React Native examples you've worked with so far in this book have used plain
    text to act as buttons or links. In web applications, to make text look like something
    that can be clicked, you just wrap it with the appropriate link. There's no such
    thing as mobile links, so you can style your text to look like a button.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中您已经使用了纯文本来充当按钮或链接的React Native示例。在Web应用程序中，要使文本看起来像可以点击的东西，只需用适当的链接包装它。移动设备上没有类似的东西，因此您可以将文本样式化为按钮。
- en: The problem with trying to style text as links on mobile devices is that they're
    too hard to press. Buttons provide a bigger target for fingers, and they're easier
    to apply touch feedback on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在移动设备上将文本样式化为链接的问题在于它们太难按。按钮为手指提供了更大的目标，并且更容易应用触摸反馈。
- en: 'Let''s style some text as a button. This is a great first step, making the
    text look touchable. But you also want to give visual feedback to the user when
    they start interacting with the button. React Native provides two components to
    help with this: `TouchableOpacity` and `TouchableHighlight`. But before diving
    into the code, let''s take a look at what these components look like visually
    when users interact with them, starting with `TouchableOpacity`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将一些文本样式化为按钮。这是一个很好的第一步，使文本看起来可以点击。但是当用户开始与按钮交互时，您还希望给予视觉反馈。React Native提供了两个组件来帮助实现这一点：`TouchableOpacity`和`TouchableHighlight`。但在深入代码之前，让我们先看一下这些组件在用户与它们交互时的外观，首先是`TouchableOpacity`：
- en: '![](Images/7a1f8c69-a376-468c-9580-8b5e0a54efc0.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7a1f8c69-a376-468c-9580-8b5e0a54efc0.png)'
- en: 'There''s two buttons rendered here, and the top one labeled Opacity is currently
    being pressed by the user. The opacity of the button is dimmed when pressed, which
    provides important visual feedback for the user. Let''s see what the Highlight
    button looks like when pressed, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里渲染了两个按钮，顶部的按钮标有“Opacity”当前正在被用户按下。当按下时，按钮的不透明度会变暗，这为用户提供了重要的视觉反馈。让我们看看当按下时`TouchableHighlight`按钮的外观，如下所示：
- en: '![](Images/f2037baf-4709-4699-83aa-c529aa891e68.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f2037baf-4709-4699-83aa-c529aa891e68.png)'
- en: Instead of changing the opacity when pressed, the `TouchableHighlight` component
    adds a highlight layer over the button. In this case, it's highlighted using a
    more transparent version of the slate gray used in the font and border colors.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下时，`TouchableHighlight`组件不会改变不透明度，而是在按钮上添加一个高亮层。在这种情况下，它使用了slate gray的更透明的版本来进行高亮显示，slate
    gray是字体和边框颜色中使用的颜色。
- en: 'Which approach you use doesn''t really matter. The important thing is that
    you provide the appropriate touch feedback for your users as they interact with
    your buttons. In fact, you might want to use the two approaches in the same app,
    but for different things. Let''s create a `Button` component, which makes it easy
    to use either approach:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用哪种方法并不重要。重要的是，您为用户提供适当的触摸反馈，以便他们与按钮进行交互。实际上，您可能希望在同一个应用程序中使用两种方法，但用于不同的事物。让我们创建一个`Button`组件，这样可以轻松使用任一方法：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `touchables` map is used to determine which React Native touchable component
    wraps the text, based on the `touchable` property value. Here''s the styles used
    to create this button are as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`touchables`映射用于确定基于`touchable`属性值的哪个React Native可触摸组件包装文本。以下是用于创建此按钮的样式：'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here''s how you can put those buttons to use in the main app module:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在主应用程序模块中使用这些按钮：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that the `onPress` callbacks don't actually do anything,—we're passing
    them because they're a required property.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`onPress`回调实际上并不执行任何操作，我们传递它们是因为它们是必需的属性。
- en: Swipeable and cancellable
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可滑动和可取消
- en: Part of what makes native mobile applications easier to use than mobile web
    applications is that they feel more intuitive. Using gestures, you can quickly
    get a handle on how things work. For example, swiping an element across the screen
    with your finger is a common gesture, but the gesture has to be discoverable.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使原生移动应用程序比移动Web应用程序更易于使用的部分原因是它们感觉更直观。使用手势，您可以快速掌握事物的工作原理。例如，用手指在屏幕上滑动元素是一种常见的手势，但手势必须是可发现的。
- en: Let's say that you're using an app, and you're not exactly sure what something
    on the screen does. So, you press down with your finger, and try dragging the
    element. It starts to move. Unsure of what will happen, you lift your finger up,
    and the element moves back into place. You've just discovered how part of this
    application works.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在使用一个应用程序，并且不确定屏幕上的某些内容是做什么的。因此，您用手指按下并尝试拖动元素。它开始移动。不确定会发生什么，您松开手指，元素又回到原位。您刚刚发现了这个应用程序的一部分是如何工作的。
- en: 'You''ll use the `Scrollable` component to implement swipeable and cancelable
    behavior like this. You can create a somewhat generic component that allows the
    user to swipe text off the screen and, when that happens, call a callback function.
    Let''s look at the code to render the swipeables before we look at the generic
    component itself:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用`Scrollable`组件来实现可滑动和可取消的行为。您可以创建一个相对通用的组件，允许用户将文本从屏幕上滑走，并在发生这种情况时调用回调函数。让我们先看看呈现滑动组件的代码，然后再看通用组件本身：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will render eight `<Swipeable>` components on the screen. Let''s see what
    this looks like:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在屏幕上呈现八个`<Swipeable>`组件。让我们看看这是什么样子：
- en: '![](Images/5560f4b8-a3f0-4c99-8b7b-c51716fffcb4.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5560f4b8-a3f0-4c99-8b7b-c51716fffcb4.png)'
- en: 'Now, if you start to swipe one of these items to the left, it will move. Here''s
    what it looks like:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您开始向左滑动其中一个项目，它将移动。这是它的样子：
- en: '![](Images/9438e9ef-c3a2-4e73-85b7-d0f08c051c3f.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9438e9ef-c3a2-4e73-85b7-d0f08c051c3f.png)'
- en: 'If you don''t swipe far enough, the gesture is canceled and the item moves
    back into place as expected. If you swipe it all the way, the item is removed
    from the list completely and the items on the screen fill the empty space like
    this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有滑动足够远，手势将被取消，并且项目将按预期移回原位。如果您将其完全滑动，项目将从列表中完全移除，并且屏幕上的项目将填充空白空间，就像这样：
- en: '![](Images/674ca464-d0aa-4179-acc7-bfb4ab83faf8.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/674ca464-d0aa-4179-acc7-bfb4ab83faf8.png)'
- en: 'Now let''s take a look at the `Swipeable` component itself:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看`Swipeable`组件本身：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that the `<ScrollView>` component is set to be horizontal and that `pagingEnabled`
    is true. It''s the paging behavior that snaps the components into place, and provides
    the cancelable behavior. This is why there''s a blank component beside the component
    with text in it. Here are the styles used for this component:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`<ScrollView>`组件被设置为水平，并且`pagingEnabled`为true。分页行为会将组件捕捉到位，并提供可取消的行为。这就是为什么在文本组件旁边有一个空白组件的原因。以下是用于此组件的样式：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `swipeBlank` style has the same dimensions as `swipeItem`, but nothing else.
    It's invisible.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`swipeBlank`样式与`swipeItem`具有相同的尺寸，但没有其他内容。它是不可见的。'
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you were introduced to the idea that gestures on native platforms
    are the difference maker when compared to mobile web platforms. We started off
    by looking at the `ScrollView` component, and how it makes life much simpler by
    providing native scrolling behavior for wrapped components.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了在原生平台上的手势与移动web平台相比的差异。我们首先看了`ScrollView`组件，以及它通过为包装组件提供原生滚动行为而使生活变得更加简单。
- en: Next, we spent some time implementing buttons with touch feedback. This is another
    area that's tricky to get right on the mobile web. You learned how to use the
    `TouchableOpacity` and `TouchableHighlight` components.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们花了一些时间实现带有触摸反馈的按钮。这是另一个在移动web上很难做到的领域。你学会了如何使用`TouchableOpacity`和`TouchableHighlight`组件。
- en: Finally, you implemented a generic `Swipeable` component. Swiping is a common
    mobile pattern, and it allows for the user to discover how things work without
    feeling intimidated. In the next chapter, you'll learn how to control image display
    using React Native.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你实现了一个通用的`Swipeable`组件。滑动是一种常见的移动模式，它允许用户在不感到害怕的情况下发现事物是如何工作的。在下一章中，你将学习如何使用React
    Native来控制图像显示。
- en: Test your knowledge
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: What's the main difference between user interactions with web applications and
    native mobile applications?
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: web应用程序和本地移动应用程序之间的用户交互的主要区别是什么？
- en: There is no noticeable difference between user interactions in web and mobile
    apps.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在web和移动应用中，用户交互没有明显的区别。
- en: Mobile applications are inherently faster than their web equivalents, so you
    code needs to take this into consideration.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动应用程序本质上比其web等效版本更快，因此您的代码需要考虑到这一点。
- en: There is no mouse. Instead, the user interacts with your UI using their fingers.
    This is a fundamentally different experience than using a mouse and needs to be
    accommodated.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有鼠标。相反，用户使用手指与您的UI进行交互。这是一种与使用鼠标完全不同的体验，需要进行适应。
- en: How do you provide the user with touch feedback in React Native?
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在React Native中为用户提供触摸反馈？
- en: By passing `View` components the `feedback` property.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`View`组件传递给`feedback`属性。
- en: By wrapping touchable components with the `TouchableOpacity` or `TouchableHighlight`
    component.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过用`TouchableOpacity`或`TouchableHighlight`组件包装可触摸组件。
- en: You have to manually adjust the styles of the view in an `onPress` handler.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须在`onPress`处理程序中手动调整视图的样式。
- en: What makes scrolling in mobile apps so much more complex than web app scrolling?
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动应用中的滚动为什么比web应用中的滚动复杂得多？
- en: Scrolling in mobile web apps needs to take into consideration things like velocity
    because the user is interacting with their fingers. Otherwise, the interactions
    feel unnatural.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在移动web应用中滚动需要考虑诸如速度之类的因素，因为用户是用手指进行交互。否则，交互会感到不自然。
- en: There is no real difference in complexity.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在复杂性上没有真正的区别。
- en: It's only complex if you make it that way. Touch interactions can be implemented
    to behave the exact same as mouse interactions.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有当你把它复杂化时，它才会变得复杂。触摸交互可以被实现成与鼠标交互完全相同的行为。
- en: Why would you use the ScrollView component to implement swipeable behavior?
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么要使用ScrollView组件来实现可滑动的行为？
- en: Because this is what users are used to in web applications.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为这是Web应用程序中用户习惯的方式。
- en: Because this is what users are used to in mobile web applications and how they
    learn the controls of the UI.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为这是移动Web应用程序中用户习惯的方式，以及他们学习UI控件的方式。
- en: You shouldn't implement swipeable behavior.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你不应该实现可滑动的行为。
- en: Further reading
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Take a look at the following links for more information:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以获取更多信息：
- en: '[https://facebook.github.io/react-native/docs/scrollview](https://facebook.github.io/react-native/docs/scrollview)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/scrollview](https://facebook.github.io/react-native/docs/scrollview)'
- en: '[https://facebook.github.io/react-native/docs/touchablehighlight](https://facebook.github.io/react-native/docs/touchablehighlight)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/touchablehighlight](https://facebook.github.io/react-native/docs/touchablehighlight)'
- en: '[https://facebook.github.io/react-native/docs/touchableopacity](https://facebook.github.io/react-native/docs/touchableopacity)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/touchableopacity](https://facebook.github.io/react-native/docs/touchableopacity)'
