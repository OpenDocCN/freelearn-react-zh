["```jsx\nrender() {\n const { articles, title, summary } = this.data.toJS();\n\n  return (\n    <section>\n      <header>\n        <h1>Articles</h1>\n        <input\n          placeholder=\"Title\"\n          value={title}\n          onChange={this.onChangeTitle}\n        />\n        <input\n          placeholder=\"Summary\"\n          value={summary}\n          onChange={this.onChangeSummary}\n        />\n        <button onClick={this.onClickAdd}>Add</button>\n      </header>\n      <article>\n        <ul>\n          {articles.map(i => (\n            <li key={i.id}>\n              <a\n                href={`#${i.id}`}\n                title=\"Toggle Summary\"\n                onClick={this.onClickToggle.bind(null, i.id)}\n              >\n                {i.title}\n              </a>\n              &nbsp;\n              <a\n                href={`#${i.id}`}\n                title=\"Remove\"\n                onClick={this.onClickRemove.bind(null, i.id)}\n              >\n                \u2717\n              </a>\n              <p style={{ display: i.display }}>{i.summary}</p>\n            </li>\n          ))}\n        </ul>\n      </article>\n    </section>\n  );\n} \n```", "```jsx\n// The state of this component is consists of\n// three properties: a collection of articles,\n// a title, and a summary. The \"fromJS()\" call\n// is used to build an \"Immutable.js\" Map. Also\n// note that this isn't set directly as the component\n// state - it's in a \"data\" property of the state -\n// otherwise, state updates won't work as expected.\nstate = {\n  data: fromJS({\n    articles: [\n      {\n        id: cuid(),\n        title: 'Article 1',\n        summary: 'Article 1 Summary',\n        display: 'none'\n      },\n      {\n        id: cuid(),\n        title: 'Article 2',\n        summary: 'Article 2 Summary',\n        display: 'none'\n      },\n      {\n        id: cuid(),\n        title: 'Article 3',\n        summary: 'Article 3 Summary',\n        display: 'none'\n      },\n      {\n        id: cuid(),\n        title: 'Article 4',\n        summary: 'Article 4 Summary',\n        display: 'none'\n      }\n    ],\n    title: '',\n    summary: ''\n  })\n}; \n```", "```jsx\n// Utility for constructing unique IDs... \nimport cuid from 'cuid'; \n\n// For building immutable component states... \nimport { fromJS } from 'immutable'; \n```", "```jsx\n// Getter for \"Immutable.js\" state data... \nget data() { \n  return this.state.data; \n} \n\n// Setter for \"Immutable.js\" state data... \nset data(data) { \n  this.setState({ data }); \n} \n```", "```jsx\n// When the title of a new article changes, update the state\n// of the component with the new title value, by using \"set()\"\n// to create a new map.\nonChangeTitle = e => {\n  this.data = this.data.set('title', e.target.value);\n};\n\n// When the summary of a new article changes, update the state\n// of the component with the new summary value, by using \"set()\"\n// to create a new map.\nonChangeSummary = e => {\n  this.data = this.data.set('summary', e.target.value);\n};\n\n// Creates a new article and empties the title\n// and summary inputs. The \"push()\" method creates a new\n// list and \"update()\" is used to update the list by\n// creating a new map.\nonClickAdd = () => {\n  this.data = this.data\n    .update('articles', a =>\n      a.push(\n        fromJS({\n          id: cuid(),\n          title: this.data.get('title'),\n          summary: this.data.get('summary'),\n          display: 'none'\n        })\n      )\n    )\n    .set('title', '')\n    .set('summary', '');\n};\n\n// Removes an article from the list. Calling \"delete()\"\n// creates a new list, and this is set in the new component\n// state.\nonClickRemove = id => {\n  const index = this.data\n    .get('articles')\n    .findIndex(a => a.get('id') === id);\n\n  this.data = this.data.update('articles', a => a.delete(index));\n};\n\n// Toggles the visibility of the article summary by\n// setting the \"display\" state of the article. This\n// state is dependent on the current state.\nonClickToggle = id => {\n  const index = this.data\n    .get('articles')\n    .findIndex(a => a.get('id') === id);\n\n  this.data = this.data.update('articles', articles =>\n    articles.update(index, a =>\n      a.update('display', display => (display ? '' : 'none'))\n    )\n  );\n};\n```", "```jsx\n<header> \n  <h1>Articles</h1> \n  <input \n    placeholder=\"Title\" \n    value={title} \n    onChange={this.onChangeTitle} \n  /> \n  <input \n    placeholder=\"Summary\" \n    value={summary} \n    onChange={this.onChangeSummary} \n  /> \n  <button onClick={this.onClickAdd}>Add</button> \n</header> \n```", "```jsx\n<ul> \n  {articles.map(i => ( \n    <li key={i.id}> \n      <a \n        href=\"#\" \n\n        onClick={ \n          this.onClickToggle.bind(null, i.id) \n        } \n      > \n        {i.title} \n      </a> \n      &nbsp; \n      <a \n        href=\"#\" \n\n        onClick={this.onClickRemove.bind(null, i.id)} \n      > \n        \u2717\n      </a> \n      <p style={{ display: i.display }}> \n        {i.summary} \n      </p> \n    </li> \n  ))} \n</ul> \n```", "```jsx\nimport React, { Component } from 'react';\n\nexport default class ArticleList extends Component {\n  render() {\n    // The properties include things that are passed in\n    // from the feature component. This includes the list\n    // of articles to render, and the two event handlers\n    // that change state of the feature component.\n    const { articles, onClickToggle, onClickRemove } = this.props;\n\n    return (\n      <ul>\n        {articles.map(article => (\n          <li key={article.id}>\n            {/* The \"onClickToggle()\" callback changes\n                the state of the \"MyFeature\" component. */}\n            <a\n              href={`#${article.id}`}\n              title=\"Toggle Summary\"\n              onClick={onClickToggle.bind(null, article.id)}\n            >\n              {article.title}\n            </a>\n            &nbsp;\n            {/* The \"onClickRemove()\" callback changes\n                the state of the \"MyFeature\" component. */}\n            <a\n              href={`#${article.id}`}\n              title=\"Remove\"\n              onClick={onClickRemove.bind(null, article.id)}\n            >\n              \u2717\n            </a>\n            <p style={{ display: article.display }}>\n              {article.summary}\n            </p>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n```", "```jsx\nrender() {\n  const { articles, title, summary } = this.data.toJS();\n\n  return (\n    <section>\n      <header>\n        <h1>Articles</h1>\n        <input\n          placeholder=\"Title\"\n          value={title}\n          onChange={this.onChangeTitle}\n        />\n        <input\n          placeholder=\"Summary\"\n          value={summary}\n          onChange={this.onChangeSummary}\n        />\n        <button onClick={this.onClickAdd}>Add</button>\n      </header>\n\n      {/* Now the list of articles is rendered by the\n           \"ArticleList\" component. This component can\n           now be used in several other components. */}\n      <ArticleList\n        articles={articles}\n        onClickToggle={this.onClickToggle}\n        onClickRemove={this.onClickRemove}\n      />\n    </section>\n  );\n} \n```", "```jsx\nimport React, { Component } from 'react';\n\nexport default class ArticleItem extends Component {\n  render() {\n    // The \"article\" is mapped from the \"ArticleList\"\n    // component. The \"onClickToggle()\" and\n    // \"onClickRemove()\" event handlers are passed\n    // all the way down from the \"MyFeature\" component.\n    const { article, onClickToggle, onClickRemove } = this.props;\n\n    return (\n      <li>\n        {/* The \"onClickToggle()\" callback changes\n            the state of the \"MyFeature\" component. */}\n        <a\n          href={`#{article.id}`}\n          title=\"Toggle Summary\"\n          onClick={onClickToggle.bind(null, article.id)}\n        >\n          {article.title}\n        </a>\n        &nbsp;\n        {/* The \"onClickRemove()\" callback changes\n            the state of the \"MyFeature\" component. */}\n        <a\n          href={`#{article.id}`}\n          title=\"Remove\"\n          onClick={onClickRemove.bind(null, article.id)}\n        >\n          \u2717\n        </a>\n        <p style={{ display: article.display }}>{article.summary}</p>\n      </li>\n    );\n  }\n}\n\n```", "```jsx\nimport React, { Component } from 'react';\nimport ArticleItem from './ArticleItem';\n\nexport default class ArticleList extends Component {\n  render() {\n    // The properties include things that are passed in\n    // from the feature component. This includes the list\n    // of articles to render, and the two event handlers\n    // that change state of the feature component. These,\n    // in turn, are passed to the \"ArticleItem\" component.\n    const { articles, onClickToggle, onClickRemove } = this.props;\n\n    // Now this component maps to an \"<ArticleItem>\" collection.\n    return (\n      <ul>\n        {articles.map(i => (\n          <ArticleItem\n            key={i.id}\n            article={i}\n            onClickToggle={onClickToggle}\n            onClickRemove={onClickRemove}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n```", "```jsx\nimport React, { Component } from 'react';\n\nexport default class AddArticle extends Component {\n  render() {\n    const {\n      name,\n      title,\n      summary,\n      onChangeTitle,\n      onChangeSummary,\n      onClickAdd\n    } = this.props;\n\n    return (\n      <section>\n        <h1>{name}</h1>\n        <input\n          placeholder=\"Title\"\n          value={title}\n          onChange={onChangeTitle}\n        />\n        <input\n          placeholder=\"Summary\"\n          value={summary}\n          onChange={onChangeSummary}\n        />\n        <button onClick={onClickAdd}>Add</button>\n      </section>\n    );\n  }\n}\n\n```", "```jsx\nrender() { \n  const {  \n    articles,  \n    title,  \n    summary, \n  } = this.state.data.toJS(); \n\n  return ( \n    <section> \n      { /* Now the add article form is rendered by the \n           \"AddArticle\" component. This component can \n           now be used in several other components. */ } \n      <AddArticle \n        name=\"Articles\" \n        title={title} \n        summary={summary} \n        onChangeTitle={this.onChangeTitle} \n        onChangeSummary={this.onChangeSummary} \n        onClickAdd={this.onClickAdd} \n      /> \n\n      { /* Now the list of articles is rendered by the \n           \"ArticleList\" component. This component can \n           now be used in several other components. */ } \n      <ArticleList \n        articles={articles} \n        onClickToggle={this.onClickToggle} \n        onClickRemove={this.onClickRemove} \n      /> \n    </section> \n  ); \n} \n```", "```jsx\nimport React from 'react';\nimport ArticleItem from './ArticleItem';\n\nexport default ({ articles, onClickToggle, onClickRemove }) => (\n  <ul>\n    {articles.map(i => (\n      <ArticleItem\n        key={i.id}\n        article={i}\n        onClickToggle={onClickToggle}\n        onClickRemove={onClickRemove}\n      />\n    ))}\n  </ul>\n);\n```", "```jsx\nimport React from 'react';\n\nexport default ({ article, onClickToggle, onClickRemove }) => (\n  <li>\n    {/* The \"onClickToggle()\" callback changes\n         the state of the \"MyFeature\" component. */}\n    <a\n      href={`#${article.id}`}\n      title=\"Toggle Summary\"\n      onClick={onClickToggle.bind(null, article.id)}\n    >\n      {article.title}\n    </a>\n    &nbsp;\n    {/* The \"onClickRemove()\" callback changes\n         the state of the \"MyFeature\" component. */}\n    <a\n      href={`#${article.id}`}\n      title=\"Remove\"\n      onClick={onClickRemove.bind(null, article.id)}\n    >\n      \u2717\n    </a>\n    <p style={{ display: article.display }}>{article.summary}</p>\n  </li>\n);\n```", "```jsx\nimport React from 'react';\n\nexport default ({\n  name,\n  title,\n  summary,\n  onChangeTitle,\n  onChangeSummary,\n  onClickAdd\n}) => (\n  <section>\n    <h1>{name}</h1>\n    <input\n      placeholder=\"Title\"\n      value={title}\n      onChange={onChangeTitle}\n    />\n    <input\n      placeholder=\"Summary\"\n      value={summary}\n      onChange={onChangeSummary}\n    />\n    <button onClick={onClickAdd}>Add</button>\n  </section>\n);\n```", "```jsx\n// Now when <MyFeature> is rendered, it uses render props to\n// render <ArticleList> and <AddArticle>. It no longer has\n// a direct dependency to these components.\nrender() {\n  const { articles, title, summary } = this.data.toJS();\n  const {\n    props: { addArticle, articleList },\n    onClickAdd,\n    onClickToggle,\n    onClickRemove,\n    onChangeTitle,\n    onChangeSummary\n  } = this;\n\n  return (\n    <section>\n      {addArticle({\n        title,\n        summary,\n        onChangeTitle,\n        onChangeSummary,\n        onClickAdd\n      })}\n      {articleList({ articles, onClickToggle, onClickRemove })}\n    </section>\n  );\n}\n```", "```jsx\n// <MyFeature> is now passed a \"addArticle\" and a \"articleList\"\n// property. These are functions that return components to render.\nrender(\n  <MyFeature\n    addArticle={({\n      title,\n      summary,\n      onChangeTitle,\n      onChangeSummary,\n      onClickAdd\n    }) => (\n      <AddArticle\n        name=\"Articles\"\n        title={title}\n        summary={summary}\n        onChangeTitle={onChangeTitle}\n        onChangeSummary={onChangeSummary}\n        onClickAdd={onClickAdd}\n      />\n    )}\n    articleList={({ articles, onClickToggle, onClickRemove }) => (\n      <ArticleList\n        articles={articles}\n        onClickToggle={onClickToggle}\n        onClickRemove={onClickRemove}\n      />\n    )}\n  />,\n  document.getElementById('root')\n);\n```"]