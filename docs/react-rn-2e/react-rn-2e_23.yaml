- en: Going Offline
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离线操作
- en: Users expect applications to operate seamlessly with unreliable network connections.
    If your mobile application can't cope with transient network issues, then your
    users will use a different app. When there's no network, you have to persist data
    locally on the device. Or, perhaps your app doesn't even require network access,
    in which case you'll still need to store data locally.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用户期望应用程序在网络连接不稳定的情况下能够无缝运行。如果您的移动应用程序无法应对瞬时网络问题，那么用户将使用其他应用程序。当没有网络时，您必须在设备上将数据持久保存在本地。或者，也许您的应用程序甚至不需要网络访问，即使是这种情况，您仍然需要在本地存储数据。
- en: In this chapter, you'll learn how to do the following three things with React
    Native. First, you'll learn how to detect the state of the network connection.
    Second, you'll learn how to store data locally. Lastly, you'll learn how to synchronize
    local data that's been stored due to network problems, once it comes back online.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用React Native执行以下三件事。首先，您将学习如何检测网络连接状态。其次，您将学习如何在本地存储数据。最后，您将学习如何在网络问题导致数据存储后，一旦网络恢复，同步本地数据。
- en: Detecting the state of the network
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测网络状态
- en: If your code tries to make a request over the network while disconnected, using
    `fetch()`, for example, an error will occur. You probably have error-handling
    code in place for these scenarios already, since the server could return some
    other type of error. However, in the case of connectivity trouble, you might want
    to detect this issue before the user attempts to make network requests.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码在断开连接时尝试通过`fetch()`进行网络请求，将会发生错误。您可能已经为这些情况设置了错误处理代码，因为服务器可能返回其他类型的错误。然而，在连接问题的情况下，您可能希望在用户尝试进行网络请求之前检测到此问题。
- en: There are two potential reasons for proactively detecting the network state.
    You might display a friendly message to the user stating that, since the network
    is disconnected, they can't do anything. You would then prevent the user from
    performing any network requests until you detect that it's back online. The other
    possible benefit of early network state detection is that you can prepare to perform
    actions offline and sync the app state when the network is connected again.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 主动检测网络状态有两个潜在原因。您可能会向用户显示友好的消息，指出网络已断开，他们无法做任何事情。然后，您将阻止用户执行任何网络请求，直到检测到网络已恢复。早期检测网络状态的另一个可能好处是，您可以准备在离线状态下执行操作，并在网络重新连接时同步应用程序状态。
- en: 'Let''s look at some code that uses the `NetInfo` utility to handle changes
    in network state:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些使用`NetInfo`实用程序来处理网络状态变化的代码：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This component will render the state of the network, based on the string values
    in `connectedMap`. The `connectionChange` event of the `NetInfo` object will cause
    the `connected` state to change. For example, when you first run this app, the
    screen might look like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件将根据`connectedMap`中的字符串值呈现网络状态。`NetInfo`对象的`connectionChange`事件将导致`connected`状态发生变化。例如，当您首次运行此应用程序时，屏幕可能如下所示：
- en: '![](Images/ad3ce214-c944-440d-b018-3990874045c1.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ad3ce214-c944-440d-b018-3990874045c1.png)'
- en: 'Then, if you turn off networking on your host machine, the network state will
    change on the emulated device as well, causing the state of our application to
    change as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果您在主机机器上关闭网络，模拟设备上的网络状态也会发生变化，导致我们应用程序的状态如下所示：
- en: '![](Images/1d263789-b1cf-4bb8-9360-5a8336a20e83.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1d263789-b1cf-4bb8-9360-5a8336a20e83.png)'
- en: Storing application data
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储应用程序数据
- en: The `AsyncStorage` API works the same on both the iOS and Android platforms.
    You would use this API for applications that don't require any network connectivity
    in the first place, or to store data that's eventually synchronized using an API
    endpoint once a network becomes available.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`AsyncStorage` API在iOS和Android平台上的工作方式相同。您可以在不需要任何网络连接的应用程序中使用此API，或者存储数据，一旦网络可用，就会使用API端点最终进行同步。'
- en: 'Let''s look at some code that allows the user to enter a key and a value, and
    then stores them:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些代码，允许用户输入键和值，然后存储它们：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Before I walk through what this code is doing, let''s first take a look at
    the following screen, since it''ll provide most of the explanation you need:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我解释这段代码在做什么之前，让我们先看一下以下屏幕，因为它将提供您所需的大部分解释：
- en: '![](Images/384aaa8d-0697-45d0-9947-2d6832a0b200.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/384aaa8d-0697-45d0-9947-2d6832a0b200.png)'
- en: As you can see, there are two input fields and two buttons. The fields allow
    the user to enter a new key and value. The Add button allows the user to store
    this key-value pair locally on their device, while the Clear button clears any
    existing items that have been stored previously.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有两个输入字段和两个按钮。字段允许用户输入新的键和值。添加按钮允许用户在其设备上本地存储此键值对，而清除按钮则清除先前存储的任何现有项目。
- en: The `AsyncStorage` API works the same for both iOS and Android. Under the hood,
    `AsyncStorage` works very differently depending on which platform it's running
    on. The reason React Native is able to expose the same storage API on both platforms
    is due to its simplicity—it's just key-value pairs. Anything more complex than
    that is left up to the application developer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`AsyncStorage` API在iOS和Android上的工作方式相同。在底层，`AsyncStorage`的工作方式取决于它正在运行的平台。React
    Native能够在两个平台上公开相同的存储API的原因是因为它的简单性——它只是键值对。比这更复杂的任何操作都留给应用程序开发人员。'
- en: The abstractions that you've created around `AsyncStorage` in this example are
    minimal. The idea is to set and get items. However, even straightforward actions
    like this deserve an abstraction layer. For example, the `setItem()` method you've
    implemented here will make the asynchronous call to `AsyncStorage` and update
    the `items` state once that has completed. Loading items is even more complicated
    because you need to get the keys and values as two separate asynchronous operations.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您围绕`AsyncStorage`创建的抽象很少。想法是设置和获取项目。然而，即使是这样简单的操作也值得一个抽象层。例如，您在这里实现的`setItem()`方法将进行异步调用到`AsyncStorage`并在完成后更新`items`状态。加载项目更加复杂，因为您需要将键和值作为两个单独的异步操作获取。
- en: The reason is to keep the UI responsive. If there are pending screen repaints
    that need to happen while data is being written to disk, preventing those from
    happening by blocking them would lead to a sub-optimal user experience.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是保持UI的响应性。如果在将数据写入磁盘时需要进行待处理的屏幕重绘，通过阻止它们发生来阻止会导致用户体验不佳。
- en: Synchronizing application data
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步应用程序数据
- en: So far in this chapter, you've learned how to detect the state of a network
    connection, and how to store data locally in a React Native application. Now it's
    time to combine these two concepts and implement an app that can detect network
    outages and continue to function.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，您已经学会了如何检测网络连接的状态，以及如何在React Native应用程序中本地存储数据。现在是时候结合这两个概念，并实现一个可以检测网络中断并继续运行的应用程序。
- en: The basic idea is to only make network requests when you know for sure that
    the device is online. If you know that it isn't, you can store any changes in
    state locally. Then, when you're back online, you can synchronize those stored
    changes with the remote API.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 基本思想是只有在确定设备在线时才发出网络请求。如果知道设备不在线，可以在本地存储任何状态更改。然后，当您再次在线时，可以将这些存储的更改与远程API同步。
- en: 'Let''s implement a simplified React Native app that does this. The first step
    is implementing an abstraction that sits between the React components and the
    network calls that store data. We''ll call this module `store.js`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一个简化的React Native应用程序来实现这一点。第一步是实现一个抽象层，位于React组件和存储数据的网络调用之间。我们将称这个模块为`store.js`：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This module exports two functions—`set()` and `get()`. Their jobs are to set
    and get data, respectively. Since this is just a demonstration of how to sync
    between local storage and network endpoints, this module just mocks the actual
    network with the `fakeNetworkData` object.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块导出了两个函数——`set()`和`get()`。它们的工作分别是设置和获取数据。由于这只是演示如何在本地存储和网络端点之间同步的示例，因此该模块只是用`fakeNetworkData`对象模拟了实际网络。
- en: Let's start by looking at the `set()` function. It's an asynchronous function
    that will always return a promise that resolves to a Boolean value. If it's true,
    it means that you're online, and that the call over the network was successful.
    If it's false, it means that you're offline, and `AsyncStorage` was used to save
    the data.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看`set()`函数。这是一个异步函数，它总是返回一个解析为布尔值的promise。如果为true，则表示您在线，并且网络调用成功。如果为false，则表示您离线，并且使用`AsyncStorage`保存了数据。
- en: The same approach is used with the `get()` function. It returns a promise that
    resolves a Boolean value that indicates the state of the network. If a key argument
    is provided, then the value for that key is looked up. Otherwise, all values are
    returned, either from the network or from `AsyncStorage`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`get()`函数也采用了相同的方法。它返回一个解析布尔值的promise，指示网络的状态。如果提供了一个键参数，那么将查找该键的值。否则，将返回所有值，无论是从网络还是从`AsyncStorage`中。'
- en: In addition to these two functions, this module does two other things. It uses
    `NetInfo.getConnectionInfo()` to set the `connected` state. Then, it adds a listener
    for changes in the network state. This is how items that have been saved locally
    when you're offline become synced with the network when it's connected again.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这两个函数之外，该模块还做了另外两件事。它使用`NetInfo.getConnectionInfo()`来设置`connected`状态。然后，它添加了一个监听器以侦听网络状态的变化。这就是当您离线时本地保存的项目在再次连接时与网络同步的方式。
- en: 'Now let''s check out the main application that uses these functions as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下使用这些函数的主要应用程序：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The job of the `App` component is to save the state of three checkboxes, which
    is difficult when you're providing the user with a seamless transition between
    online and offline modes. Thankfully, your `set()` and `get()` abstractions, implemented
    in another module, hide most of the details from the application functionality.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`App`组件的工作是保存三个复选框的状态，当您为用户提供无缝的在线和离线模式切换时，这是困难的。幸运的是，您在另一个模块中实现的`set()`和`get()`抽象层隐藏了大部分细节，使应用功能更加简单。'
- en: 'You will notice, however, that you need to check the state of the network in
    this module before you attempt to load any items. If you don''t do this, then
    the `get()` function will assume that you''re offline, even if the connection
    is fine. Here''s what the app looks like:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您会注意到，在尝试加载任何项目之前，您需要在此模块中检查网络状态。如果您不这样做，那么`get()`函数将假定您处于离线状态，即使连接正常。应用程序的外观如下：
- en: '![](Images/03d50c1c-606b-4b1b-a8d3-a74aee4df357.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/03d50c1c-606b-4b1b-a8d3-a74aee4df357.png)'
- en: Note that you won't actually see the Saved Offline message until you change
    something in the UI.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，直到您在UI中更改了某些内容，您才会实际看到“已保存离线”消息。
- en: Summary
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced you to storing data offline in React Native applications.
    The main reason you would want to store data locally is when the device goes offline
    and your app can't communicate with a remote API. However, not all applications
    require API calls and `AsyncStorage` can be used as a general purpose storage
    mechanism. You just need to implement the appropriate abstractions around it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了在React Native应用程序中离线存储数据。您希望在设备离线并且您的应用无法与远程API通信时，才需要将数据存储在本地。然而，并非所有应用程序都需要API调用，`AsyncStorage`可以用作通用存储机制。您只需要围绕它实现适当的抽象。
- en: You learned how to detect changes in network state in React Native apps as well.
    It's important to know when the device has gone offline so that your storage layer
    doesn't make pointless attempts at network calls. Instead, you can let the user
    know that the device is offline, and then synchronize the application state when
    a connection is available.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您还学会了如何在React Native应用程序中检测网络状态的变化。了解设备何时离线很重要，这样您的存储层就不会进行无谓的网络调用尝试。相反，您可以让用户知道设备处于离线状态，然后在连接可用时同步应用程序状态。
- en: That wraps up the second part of this book. You've seen how to build React components
    for the Web, and React components for mobile platforms. At the beginning of this
    book, I posited that the beauty of React lies in the notion of rendering targets.
    The declarative programming interface of React never has to change. The underlying
    mechanisms that translate JSX elements are completely replaceable—in theory, you
    can render React to anything.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了本书的第二部分。您已经了解了如何为Web构建React组件，以及为移动平台构建React组件。在本书的开头，我提出了React之美在于渲染目标的概念。React的声明式编程接口永远不需要更改。将JSX元素转换的底层机制是完全可替换的
    - 理论上，您可以将React渲染到任何地方。
- en: In the final part of this book, I'll talk about state in React applications.
    State and the policies that govern how it flows through an application can make
    or break the React architecture.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后部分，我将讨论React应用程序中的状态。状态和管理其在应用程序中流动的策略可以决定React架构的成败。
- en: Test your knowledge
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的知识
- en: Why are operations in the `AsyncStorage` API asynchronous?
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么`AsyncStorage` API中的操作是异步的？
- en: So that you can perform lots of storage operations concurrently.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样您可以同时执行大量存储操作。
- en: To avoid interfering with the responsiveness of the UI.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了不干扰UI的响应性。
- en: They're not asynchronous operations, they're just returning promises to be consistent
    with other storage APIs.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们不是异步操作，它们只是返回承诺，以保持与其他存储API的一致性。
- en: Which `AsyncStorage` API would you use to look up several items at once?
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将使用哪个`AsyncStorage` API来一次查找多个项目？
- en: '`AsyncStorage.getAll()`'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AsyncStorage.getAll()`'
- en: '`AsyncStorage.filter()`'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AsyncStorage.filter()`'
- en: A combination of `AsyncStorage.getAllKeys()` and `AsyncStorage.multiGet()`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AsyncStorage.getAllKeys()`和`AsyncStorage.multiGet()`的组合。'
- en: How do you get the connectivity status of the device in a React Native application?
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在React Native应用程序中如何获取设备的连接状态？
- en: You call `NetInfo.getConnectionInfo()` and read the resulting connection type.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您调用`NetInfo.getConnectionInfo()`并读取结果连接类型。
- en: You call `NetInfo.getConnectionInfo()` and if it returns true, you're connected.
    Otherwise, you're offline.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您调用`NetInfo.getConnectionInfo()`，如果返回true，则表示已连接。否则，您处于离线状态。
- en: There's a global `reactNativeConnectionInfo` object that you can read from at
    any point to determine the status of the connection.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一个全局的`reactNativeConnectionInfo`对象，您可以随时从中读取以确定连接的状态。
- en: How do you respond to a change in connectivity status in a React Native application?
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在React Native应用程序中如何响应连接状态的变化？
- en: There's no way to respond to connectivity status changes.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无法响应连接状态的更改。
- en: You can listen to the `connectionChange` event by calling `NetInfo.addEventListener('connectionChange',
    ...)`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过调用`NetInfo.addEventListener('connectionChange', ...)`来监听`connectionChange`事件。
- en: You can provide a callback function to the `NetInfo.onChange()` API.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以为`NetInfo.onChange()` API提供回调函数。
- en: Further reading
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Visit the following links for more information:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下链接以获取更多信息：
- en: '[https://facebook.github.io/react-native/docs/asyncstorage](https://facebook.github.io/react-native/docs/asyncstorage)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/asyncstorage](https://facebook.github.io/react-native/docs/asyncstorage)'
- en: '[https://facebook.github.io/react-native/docs/netinfo](https://facebook.github.io/react-native/docs/netinfo)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/netinfo](https://facebook.github.io/react-native/docs/netinfo)'
