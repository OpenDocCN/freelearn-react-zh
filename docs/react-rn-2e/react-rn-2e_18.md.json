["```jsx\nimport React, { Component } from 'react';\nimport { Text, View } from 'react-native';\nimport { fromJS } from 'immutable';\n\nimport styles from './styles';\n\n// For fetching human-readable address info.\nconst URL = 'https://maps.google.com/maps/api/geocode/json?latlng=';\n\nexport default class WhereAmI extends Component {\n  // The \"address\" state is \"loading...\" initially because\n  // it takes the longest to fetch.\n  state = {\n    data: fromJS({\n      address: 'loading...'\n    })\n  };\n\n  // Getter for \"Immutable.js\" state data...\n  get data() {\n    return this.state.data;\n  }\n\n  // Setter for \"Immutable.js\" state data...\n  set data(data) {\n    this.setState({ data });\n  }\n\n  // We don't setup any geo data till the component\n  // mounts.\n  componentDidMount() {\n    const setPosition = pos => {\n      // This component renders the \"coords\" data from\n      // a geolocation response. This can simply be merged\n      // into the state map.\n      this.data = this.data.merge(pos.coords);\n\n      // We need the \"latitude\" and the \"longitude\"\n      // in order to lookup the \"address\" from the\n      // Google maps API.\n      const {\n        coords: { latitude, longitude }\n      } = pos;\n\n      // Fetches data from the Google Maps API then sets\n      // the \"address\" state based on the response.\n      fetch(`${URL}${latitude},${longitude}`)\n        .then(resp => resp.json(), e => console.error(e))\n        .then(({ results: [{ formatted_address }] }) => {\n          this.data = this.data.set('address', formatted_address);\n        });\n    };\n\n    // First, we try to lookup the current position\n    // data and update the component state.\n    navigator.geolocation.getCurrentPosition(setPosition);\n\n    // Then, we setup a high accuracy watcher, that\n    // issues a callback whenever the position changes.\n    this.watcher = navigator.geolocation.watchPosition(\n      setPosition,\n      err => console.error(err),\n      { enableHighAccuracy: true }\n    );\n  }\n\n  // It's always a good idea to make sure that this\n  // \"watcher\" is cleared when the component is removed.\n  componentWillUnmount() {\n    navigator.geolocation.clearWatch(this.watcher);\n  }\n\n  render() {\n    // Since we want to iterate over the properties\n    // in the state map, we need to convert the map\n    // to pairs using \"entries()\". Then we need to\n    // use the spread operator to make the map iterator\n    // into a plain array. The \"sort()\" method simply\n    // sorts the map based on it's keys.\n    const state = [...this.data.sortBy((v, k) => k).entries()];\n\n    // Iterates over the state properties and renders them.\n    return (\n      <View style={styles.container}>\n        {state.map(([k, v]) => (\n          <Text key={k} style={styles.label}>\n            {`${k[0].toUpperCase()}${k.slice(1)}`}: {v}\n          </Text>\n        ))}\n      </View>\n    );\n  }\n} \n```", "```jsx\nimport React from 'react';\nimport { View } from 'react-native';\nimport MapView from 'react-native-maps';\n\nimport styles from './styles';\n\nexport default () => (\n  <View style={styles.container}>\n    <MapView\n      style={styles.mapView}\n      showsUserLocation\n      followUserLocation\n    />\n  </View>\n); \n```", "```jsx\nimport React from 'react';\nimport { View } from 'react-native';\nimport MapView from 'react-native-maps';\n\nimport styles from './styles';\n\nexport default () => (\n  <View style={styles.container}>\n    <MapView\n      style={styles.mapView}\n      showsPointsOfInterest={false}\n      showsUserLocation\n      followUserLocation\n    >\n      <MapView.Marker\n        title=\"Duff Brewery\"\n        description=\"Duff beer for me, Duff beer for you\"\n        coordinate={{\n          latitude: 43.8418728,\n          longitude: -79.086082\n        }}\n      />\n      <MapView.Marker\n        title=\"Pawtucket Brewery\"\n        description=\"New! Patriot Light!\"\n        coordinate={{\n          latitude: 43.8401328,\n          longitude: -79.085407\n        }}\n      />\n    </MapView>\n  </View>\n); \n```", "```jsx\nimport React, { Component } from 'react';\nimport { View, Text } from 'react-native';\nimport MapView from 'react-native-maps';\nimport { fromJS } from 'immutable';\n\nimport styles from './styles';\n\n// The \"IPA\" region coordinates and color...\nconst ipaRegion = {\n  coordinates: [\n    { latitude: 43.8486744, longitude: -79.0695283 },\n    { latitude: 43.8537168, longitude: -79.0700046 },\n    { latitude: 43.8518394, longitude: -79.0725697 },\n    { latitude: 43.8481651, longitude: -79.0716377 },\n    { latitude: 43.8486744, longitude: -79.0695283 }\n  ],\n  strokeColor: 'coral',\n  strokeWidth: 4\n};\n\n// The \"stout\" region coordinates and color...\nconst stoutRegion = {\n  coordinates: [\n    { latitude: 43.8486744, longitude: -79.0693283 },\n    { latitude: 43.8517168, longitude: -79.0710046 },\n    { latitude: 43.8518394, longitude: -79.0715697 },\n    { latitude: 43.8491651, longitude: -79.0716377 },\n    { latitude: 43.8486744, longitude: -79.0693283 }\n  ],\n  strokeColor: 'firebrick',\n  strokeWidth: 4\n};\n\nexport default class PlottingOverlays extends Component {\n  // The \"IPA\" region is rendered first. So the \"ipaStyles\"\n  // list has \"boldText\" in it, to show it as selected. The\n  // \"overlays\" list has the \"ipaRegion\" in it.\n  state = {\n    data: fromJS({\n      ipaStyles: [styles.ipaText, styles.boldText],\n      stoutStyles: [styles.stoutText],\n      overlays: [ipaRegion]\n    })\n  };\n\n  // Getter for \"Immutable.js\" state data...\n  get data() {\n    return this.state.data;\n  }\n\n  // Setter for \"Immutable.js\" state data...\n  set data(data) {\n    this.setState({ data });\n  }\n\n  // The \"IPA\" text was clicked...\n  onClickIpa = () => {\n    this.data = this.data\n      // Makes the IPA text bold...\n      .update('ipaStyles', i => i.push(styles.boldText))\n      // Removes the bold from the stout text...\n      .update('stoutStyles', i => i.pop())\n      // Replaces the stout overlay with the IPA overlay...\n      .update('overlays', i => i.set(0, ipaRegion));\n  };\n\n  // The \"stout\" text was clicked...\n  onClickStout = () => {\n    this.data = this.data\n      // Makes the stout text bold...\n      .update('stoutStyles', i => i.push(styles.boldText))\n      // Removes the bold from the IPA text...\n      .update('ipaStyles', i => i.pop())\n      // Replaces the IPA overlay with the stout overlay...\n      .update('overlays', i => i.set(0, stoutRegion));\n  };\n\n  render() {\n    const { ipaStyles, stoutStyles, overlays } = this.data.toJS();\n\n    return (\n      <View style={styles.container}>\n        <View>\n          {/* Text that when clicked, renders the IPA\n               map overlay. */}\n          <Text style={ipaStyles} onPress={this.onClickIpa}>\n            IPA Fans\n          </Text>\n\n          {/* Text that when clicked, renders the stout\n               map overlay. */}\n          <Text style={stoutStyles} onPress={this.onClickStout}>\n            Stout Fans\n          </Text>\n        </View>\n\n        {/* Renders the map with the \"overlays\" array. There\n             will only ever be a single overlay in this\n             array. */}\n        <MapView\n          style={styles.mapView}\n          showsPointsOfInterest={false}\n          showsUserLocation\n          followUserLocation\n        >\n          {overlays.map((v, i) => (\n            <MapView.Polygon\n              key={i}\n              coordinates={v.coordinates}\n              strokeColor={v.strokeColor}\n              strokeWidth={v.strokeWidth}\n            />\n          ))}\n        </MapView>\n      </View>\n    );\n  }\n} \n```"]