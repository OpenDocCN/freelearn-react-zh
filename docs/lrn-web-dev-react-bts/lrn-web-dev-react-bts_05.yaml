- en: Chapter 5. jQuery Bootstrap Component with React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。React中的jQuery Bootstrap组件
- en: Until now, we have covered how we can create a DOM element and how DOM interacts
    with a React component. As we have seen, every framework has a different way to
    interact with DOM elements, whereas React uses a fast, internal synthetic DOM
    to perform diffs and computes the most efficient DOM mutation for you where your
    component actually lives.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了如何创建DOM元素以及DOM如何与React组件交互。正如我们所见，每个框架都有不同的方式与DOM元素交互，而React使用快速的内部合成DOM来执行差异并为您计算最有效的DOM变化，这是您的组件实际存在的地方。
- en: 'In this chapter, we''ll take a look at how jQuery Bootstrap components work
    in React virtual DOM. We are also going to cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看jQuery Bootstrap组件在React虚拟DOM中是如何工作的。我们还将涵盖以下主题：
- en: Component life cycle methods
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件生命周期方法
- en: Component integration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件集成
- en: Bootstrap modal
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap模态框
- en: Examples with details
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具体示例
- en: This will give you a better understanding of dealing with jQuery Bootstrap components
    with React.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这将让您更好地理解如何处理React中的jQuery Bootstrap组件。
- en: In Bootstrap we have lots of reusable components that makes a developer's life
    easy. In [Chapter 1](ch01.html "Chapter 1. Getting Started with React and Bootstrap"), *Getting
    Started with React and Bootstrap* and [Chapter 2](ch02.html "Chapter 2. Lets Build
    a Responsive Theme with React-Bootstrap and React"), *Lets Build a Responsive
    Theme with React-Bootstrap and React*, we explained the integration of Bootstrap.
    So let us start with a small component to integrate in React.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bootstrap中，我们有很多可重用的组件，使开发人员的生活更轻松。在[第1章](ch01.html "第1章。使用React和Bootstrap入门")和[第2章](ch02.html
    "第2章。使用React-Bootstrap和React构建响应式主题")中，我们解释了Bootstrap的集成。所以让我们从一个小组件开始，将其集成到React中。
- en: Alerts
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警报
- en: In Bootstrap we have the `alert` component to show the messages in the UI as
    per the user action that makes your component more interactive.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bootstrap中，我们有`alert`组件来根据用户操作在UI中显示消息，使您的组件更具交互性。
- en: First of all, we need to enfold a text in the `.alert` class that contains the
    `close` button.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将文本包裹在包含`close`按钮的`.alert`类中。
- en: 'Bootstrap also provides the contextual classes that represent the different
    colors according to the messages:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap还提供了表示不同颜色的上下文类，根据消息的不同而不同：
- en: '`.alert-success`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.alert-success`'
- en: '`.alert-info`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.alert-info`'
- en: '`.alert-warning`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.alert-warning`'
- en: '`.alert-error`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.alert-error`'
- en: Usage
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用法
- en: 'Bootstrap gives us the predefined structure of the `alert` component that makes
    it easy to include it in our project:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap为我们提供了`alert`组件的预定义结构，这使得将其包含在我们的项目中变得容易：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When we are using the `close` button as a child of the wrapper tag where we
    have declared the `alert` class, we need to add the `.alert-dismissible` class
    to that element as shown in the preceding example code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将`close`按钮用作我们声明了`alert`类的包装标记的子元素时，我们需要向该元素添加`.alert-dismissible`类，就像前面的示例代码中所示的那样。
- en: Adding the custom attribute, `data-dismiss="alert"`, will give us the `close`
    functionality in `alert`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 添加自定义属性`data-dismiss="alert"`将为我们在`alert`中提供`close`功能。
- en: Bootstrap alert component in React
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在React中的Bootstrap警报组件
- en: Now we will integrate the Bootstrap `alert` component with the React controlled
    component (`textarea`) that we developed earlier in [Chapter 4](ch04.html "Chapter 4. DOM
    Interaction with ReactJS"), *DOM Interaction with ReactJS*, where we developed
    a form with a controlled component. We went through an example of preventing the
    user writing text into the `textarea` above `140` characters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将把Bootstrap `alert`组件与我们在[第4章](ch04.html "第4章。ReactJS中的DOM交互")中开发的React受控组件（`textarea`）集成起来，*ReactJS中的DOM交互*，在那里我们开发了一个带有受控组件的表单。我们通过一个示例防止用户在`textarea`中写入超过`140`个字符的文本。
- en: In the following example, we will see how we can bind alert/warning messages
    with the same component. Here, we are just extending the developed controlled
    component.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将看到如何将警报/警告消息与相同的组件绑定。在这里，我们只是扩展了开发的受控组件。
- en: 'You might have also have seen the following screenshot in [Chapter 4](ch04.html
    "Chapter 4. DOM Interaction with ReactJS"), *DOM Interaction with ReactJS*, which
    shows the controlled component with comments in the `textarea`. In brackets, you
    can see the defined character limit:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还在[第4章](ch04.html "第4章。ReactJS中的DOM交互")中看到了以下截图，显示了带有`textarea`中注释的受控组件。在括号中，您可以看到定义的字符限制：
- en: '![Bootstrap alert component in React](graphics/image_05_001.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![React中的Bootstrap警报组件](graphics/image_05_001.jpg)'
- en: After adding the `alert` component, it will show in the UI when a user reaches
    the maximum character limit.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`alert`组件后，当用户达到最大字符限制时，它将显示在UI中。
- en: 'For this, first of all, we''ll need to enfold the Bootstrap component into
    the React structure. Let''s go through the practical example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，首先，我们需要将Bootstrap组件包装到React结构中。让我们通过实际示例来了解一下：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have created a component with the name of `BootstrapAlert` and wrapped the
    HTML inside the `render` method.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`BootstrapAlert`的组件，并将HTML包装在`render`方法中。
- en: '`onClick` is calling the `handleClose` function which will handle the `close`
    event. It is the default function of React, as we have the `.show()` and `.hide()`
    default functions in JavaScript.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`onClick`调用`handleClose`函数，该函数将处理`close`事件。这是React的默认函数，因为我们在JavaScript中有`.show()`和`.hide()`默认函数。'
- en: Before we integrate the jQuery Bootstrap component, we must understand the React
    life cycle methods in the component.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们集成jQuery Bootstrap组件之前，我们必须了解组件中的React生命周期方法。
- en: Component lifecycle methods
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件生命周期方法
- en: 'In React, each component has its own specific callback function. These callback
    functions play an important role when we are thinking about DOM manipulation or
    integrating other plugins in React (jQuery). Let''s look at some commonly used
    methods in the life cycle of a component:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，每个组件都有自己特定的回调函数。当我们考虑DOM操作或在React（jQuery）中集成其他插件时，这些回调函数起着重要作用。让我们看一些组件生命周期中常用的方法：
- en: '`getInitialState()`: This method will help you to get the initial state of
    a component.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getInitialState()`: 此方法将帮助您获取组件的初始状态。'
- en: '`componentDidMount`: This method is called automatically when a component is
    rendered or mounted for the first time in DOM. While integrating JavaScript frameworks,
    we''ll use this method to perform operations such as `setTimeout` or `setInterval`,
    or send AJAX requests.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidMount`：此方法在组件在DOM中首次渲染或挂载时自动调用。在集成JavaScript框架时，我们将使用此方法执行操作，例如`setTimeout`或`setInterval`，或发送AJAX请求。'
- en: '`componentWillReceiveProps`: This method will be used to receive new `props`.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillReceiveProps`：此方法将用于接收新的`props`。'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is no alternative method as, `componentWillReceiveState`. If we need to
    perform operations on `state` changes then we use `componentWillUpdate`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 没有替代方法，如`componentWillReceiveState`。如果我们需要在`state`更改时执行操作，那么我们使用`componentWillUpdate`。
- en: '`componentWillUnmount`: This method is invoked before the component is unmounted
    from DOM. Cleanup the DOM memory elements which are mounted in the `componentDidMount`
    method.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillUnmount`：此方法在组件从DOM中卸载之前调用。清理在`componentDidMount`方法中挂载的DOM内存元素。'
- en: '`componentWillUpdate`: This method is invoked before updating a new `props`
    and `state`.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillUpdate`：此方法在更新新的`props`和`state`之前调用。'
- en: '`componentDidUpdate`: This is invoked immediately when the component has been
    updated in DOM.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidUpdate`：在组件在DOM中更新后立即调用此方法。'
- en: Component integration
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件集成
- en: 'We now understand the component life cycle methods. So now let''s integrate
    our component in React using these methods. Observe the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在了解了组件的生命周期方法。现在让我们使用这些方法在React中集成我们的组件。请观察以下代码：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s see an explanation of the preceding code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下上述代码的解释：
- en: The `componentDidMount()`, by default, is hiding the `alert` component using
    the `refs` keyword when the component mounts in DOM
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidMount()`默认情况下使用`refs`关键字在组件挂载到DOM时隐藏`alert`组件'
- en: The `alert` component provides us with some events that are invoked when the
    `close` method is called
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alert`组件为我们提供了一些在调用`close`方法时被调用的事件'
- en: The `close.bs.alert` is invoked when the `close` method is called
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当调用`close`方法时，将调用`close.bs.alert`
- en: When we use the component `componentWillUnmount`, we are also removing the event
    handler using the jQuery `.off`. When we click on the close (x) button, it invokes
    the Closehandler and calls the close
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`componentWillUnmount`组件时，也使用jQuery的`.off`来移除事件处理程序。当我们点击关闭（x）按钮时，它会调用Closehandler并调用close
- en: 'We have also created some custom events that control our component:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一些控制我们组件的自定义事件：
- en: '`.hide()`: This is for hiding the component'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.hide()`: 用于隐藏组件'
- en: '`.show()`: This is for showing the component'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.show()`: 用于显示组件'
- en: '`.close()`: This is for closing the alert'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.close()`: 用于关闭警报'
- en: 'Observe the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请观察以下代码：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using the `if` condition, we are hiding and showing the alert as per the character
    length. The `handleClose()` method will call the `close` method which we created
    earlier to close the alert.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`if`条件，根据字符长度隐藏和显示警报。`handleClose()`方法将调用我们之前创建的`close`方法来关闭警报。
- en: Inside the `render` method, we are rendering our component with the `className
    props`, `ref` key, and `onClose` props to handle the `close` method.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在`render`方法中，我们使用`className`属性、`ref`键和`onClose`属性来渲染我们的组件以处理`close`方法。
- en: The `.fade` in the class gives us the fading effect when we close the alert.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 类中的`.fade`给我们在关闭警报时提供了淡出效果。
- en: 'Now let''s combine our code and take a quick look in the browser:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们结合我们的代码，快速在浏览器中查看一下：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Observe the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请观察以下截图：
- en: '![Component integration](graphics/image_05_002.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![组件集成](graphics/image_05_002.jpg)'
- en: 'When we click on the close (**x**) button, it invokes the `Closehandler` and
    calls the `close` event to close the alert message. Once closed, to get it back
    you will have to refresh the page. Please observe the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击关闭（**x**）按钮时，它会调用`Closehandler`并调用`close`事件来关闭警报消息。一旦关闭，您将需要刷新页面才能重新打开它。请观察以下截图：
- en: '![Component integration](graphics/image_05_003.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![组件集成](graphics/image_05_003.jpg)'
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Using `console.log()`, we can verify if our component is mounted or unmounted.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`console.log()`，我们可以验证我们的组件是否已挂载或卸载。
- en: Now let's take a look at another example of the Bootstrap component.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下Bootstrap组件的另一个示例。
- en: Bootstrap modal
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bootstrap模态框
- en: The Bootstrap modal component displays a small amount of information to the
    user without taking you to a new page.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap模态组件向用户显示少量信息，而不会将您带到新页面。
- en: 'The following table from the Bootstrap website ([http://getbootstrap.com/javascript](http://getbootstrap.com/javascript))
    shows the full list of options available for the modal:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Bootstrap网站（[http://getbootstrap.com/javascript](http://getbootstrap.com/javascript)）的下表显示了模态框可用的全部选项：
- en: '| **Name** | **Type** | **Default** | **Description** |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **类型** | **默认** | **描述** |'
- en: '| `backdrop` | Boolean | `true` | `backdrop` allows us to close the modal when
    the user clicks outside. It gives a static value for a `backdrop` which doesn''t
    close the modal on click. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `backdrop` | 布尔值 | `true` | `backdrop`允许我们在用户点击外部时关闭模态框。它为`backdrop`提供了一个静态值，不会在点击时关闭模态框。'
- en: '| `keyboard` | Boolean | `true` | Presses the *Esc* key to close the modal.
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `keyboard` | 布尔值 | `true` | 按下*Esc*键关闭模态框。 |'
- en: '| `show` | Boolean | `true` | Initializes the modal. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `show` | 布尔值 | `true` | 初始化模态框。 |'
- en: '| `remote` | PATH | `false` | This option has been deprecated since version
    3.3.0 and has been removed in version 4\. For client-side templating it is recommended
    to use the data binding framework, or call `jQuery.load` yourself. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `remote` | 路径 | `false` | 自3.3.0版本起，此选项已被弃用，并在4版本中已删除。建议使用数据绑定框架进行客户端模板化，或者自己调用`jQuery.load`。'
- en: 'The following table from the Bootstrap website ([http://getbootstrap.com/javascript](http://getbootstrap.com/javascript))
    shows the full list of events available for the Bootstrap modal component:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap网站（[http://getbootstrap.com/javascript](http://getbootstrap.com/javascript)）的以下表格显示了Bootstrap模态组件可用的完整事件列表：
- en: '| **Event type** | **Description** |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| **事件类型** | **描述** |'
- en: '| `show.bs.modal` | This event fires immediately when the `show` (`$(''.modal'').show();`)
    instance method is called. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `show.bs.modal` | 当调用`show`（`$(''.modal'').show();`）实例方法时，立即触发此事件。 |'
- en: '| `shown.bs.modal` | This event is fired when the modal has been made visible
    to the user (we need to wait for CSS transitions to complete). |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `shown.bs.modal` | 当模态框对用户可见时触发此事件（我们需要等待CSS过渡完成）。 |'
- en: '| `hide.bs.modal` | This event is fired immediately when the `hide` (`$(''.modal'').hide();`)
    instance method has been called. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `hide.bs.modal` | 当调用`hide`（`$(''.modal'').hide();`）实例方法时，立即触发此事件。 |'
- en: '| `hidden.bs.modal` | This event is fired when the modal has finished being
    hidden from the user (we need to wait for CSS transitions to complete). |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `hidden.bs.modal` | 当模态框从用户那里隐藏完成时触发此事件（我们需要等待CSS过渡完成）。 |'
- en: '| `loaded.bs.modal` | This event is fired when the modal has loaded content
    using the `remote` option. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `loaded.bs.modal` | 当模态框使用`remote`选项加载内容时触发此事件。 |'
- en: Whenever we are integrating any other component, we must be aware of the component
    options and events provided by the library or plugin.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们集成任何其他组件时，我们必须了解库或插件提供的组件选项和事件。
- en: 'First, we need to create a `button` component to open a `modal` popup:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个`button`组件来打开一个`modal`弹出窗口：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we need to create a component of `modal-dialog` and mount the `button`
    and `dialog` component to the DOM.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个`modal-dialog`组件，并将`button`和`dialog`组件挂载到DOM中。
- en: 'We will also create some events that handle the `show` and `hide` modal events:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建一些处理`show`和`hide`模态框事件的事件：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In `componentDidMount()`, we are initializing the `modal` component with some
    options and injecting the `hidden.bs.modal` event into `modal`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在`componentDidMount()`中，我们正在使用一些选项初始化`modal`组件，并将`hidden.bs.modal`事件注入`modal`中。
- en: The `close()` and `show()` functions trigger the model `hide`/`show` event.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`close()`和`show()`函数触发模态框的`hide`/`show`事件。'
- en: Inside the `render()` method, we include the modal HTML template with the `props`
    and `ref` key to manipulate the template.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在`render()`方法中，我们包含了带有`props`和`ref`键的模态框HTML模板来操作模板。
- en: '`handleCancel()`,`handleConfirm()`, and `handleHidden()` handle every state
    of our component.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleCancel()`，`handleConfirm()`和`handleHidden()`处理我们组件的每个状态。'
- en: '`.modal-*` classes give us Bootstrap''s style to make our app more user-friendly.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`.modal-*`类为我们提供了Bootstrap的样式，使我们的应用更加用户友好。'
- en: 'Now we need to render our components using the `render` function:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要使用`render`函数来渲染我们的组件：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We are passing `props` in `<BootstrapModal>` and rendering `<BootstrapButton>`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`<BootstrapModal>`中传递`props`并渲染`<BootstrapButton>`。
- en: 'With the `this` keyword, we call a function to invoke the `modal` events and
    display an alert on every event fire:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`this`关键字，我们调用一个函数来调用`modal`事件并在每次事件触发时显示警报：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s take a quick look at our component in the browser:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速在浏览器中查看一下我们的组件：
- en: '![Bootstrap modal](graphics/image_05_004.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap模态](graphics/image_05_004.jpg)'
- en: 'Oops! We are getting an error. I think that might have happened because we
    have not wrapped our component inside the `render` method. It should always wrap
    with one parent element:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！我们出现了一个错误。我认为这可能是因为我们没有将组件包裹在`render`方法内。它应该始终与一个父元素一起包装：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here''s what our `ReactBootstrapModalDialog` component looks like after we''ve
    made a small change:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在做了一些小改动后`ReactBootstrapModalDialog`组件的样子：
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s take a quick look at our component again in the browser:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次在浏览器中快速查看我们的组件：
- en: '![Bootstrap modal](graphics/image_05_005.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap模态](graphics/image_05_005.jpg)'
- en: 'Now click the **Open modal** button to see the modal dialog box:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击**打开模态**按钮查看模态对话框：
- en: '![Bootstrap modal](graphics/image_05_006.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap模态](graphics/image_05_006.jpg)'
- en: 'If we click on the **Cancel** or the **OK** button, it will display the alert
    box as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击**取消**或**确定**按钮，它将显示警报框，如下截图所示：
- en: '![Bootstrap modal](graphics/image_05_007.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap模态](graphics/image_05_007.jpg)'
- en: 'If we click on the **X** icon, it will display the alert box as shown in the
    following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击**X**图标，它将显示警报框，如下截图所示：
- en: '![Bootstrap modal](graphics/image_05_008.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap模态](graphics/image_05_008.jpg)'
- en: So, now we know that we can close the modal dialog by clicking on the (**X**)
    icon.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们知道我们可以通过点击(**X**)图标来关闭模态对话框。
- en: 'When the modal dialog is closed, it shows the alert, **The modal has been dismissed!**
    See the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当模态对话框关闭时，它会显示警报，**模态已被解除！** 请参见下面的截图：
- en: '![Bootstrap modal](graphics/image_05_009.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap模态](graphics/image_05_009.jpg)'
- en: 'Here is what our HTML file looks like:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的HTML文件的样子：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have seen how we can integrate the jQuery Bootstrap component in React and
    how life cycle methods work when we are integrating any third-party plugin such
    as jQuery.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何在React中集成jQuery Bootstrap组件以及在集成任何第三方插件（如jQuery）时生命周期方法的工作方式。
- en: We are able to check the component state with props that handle the events and
    display the dialog box with the appropriate content. We have also looked at how
    life cycle methods help us to integrate other third-party plugins.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够通过处理事件的props来检查组件状态，并显示具有适当内容的对话框。我们还看了生命周期方法如何帮助我们集成其他第三方插件。
- en: We now understand the component life cycle methods along with the way they work
    in React. We've learned how to integrate jQuery components in React. We've seen
    event handling mechanisms and an example of the alert and modal components.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在了解了组件的生命周期方法以及它们在React中的工作方式。我们已经学会了如何在React中集成jQuery组件。我们已经看到了事件处理机制以及警报和模态组件的示例。
- en: The key examples shown in this chapter will help you to understand or clarify
    concepts about integrating jQuery Bootstrap components in React.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中展示的关键示例将帮助您了解或澄清在React中集成jQuery Bootstrap组件的概念。
- en: Let's move on to [Chapter 6](ch06.html "Chapter 6. Redux Architecture"), *Redux
    Architecture*, which is all about using Redux architecture in React.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续阅读[第6章](ch06.html "第6章. Redux架构")，*Redux架构*，这一章主要讲述在React中使用Redux架构。
