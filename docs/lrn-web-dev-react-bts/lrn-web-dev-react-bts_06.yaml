- en: Chapter 6. Redux Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。Redux架构
- en: In previous chapters, we have learnt about how to create custom components,
    DOM interaction with React, and how to use JSX with React, which would have given
    you enough clarity on React and it's variations with different platforms with
    practical examples such as the Add Ticket form application. Now we are going to
    go to an advanced level which will give you further understanding about state
    management in a JavaScript application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了如何创建自定义组件，与React进行DOM交互，以及如何在React中使用JSX，这些都足以让你对React及其在不同平台上的变化有足够的了解，例如添加工单表单应用程序的实际示例。现在我们将进入一个高级水平，这将让你进一步了解JavaScript应用程序中的状态管理。
- en: What is Redux?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Redux是什么？
- en: 'As we know, in **Single Page Applications** (**SPAs**) when we have to contract
    with state and time, it would be difficult to handgrip state over time. Here,
    Redux helps a lot. How? Because in a JavaScript application, Redux is handling
    two states: one is the data state and the other is the UI state and it''s a standard
    option for SPAs. Moreover, bear in mind that Redux can be used with AngularJS,
    jQuery, or with React JS libraries or frameworks.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，在**单页面应用程序**（**SPAs**）中，当我们需要处理状态和时间时，很难掌握随时间变化的状态。在这里，Redux非常有帮助。为什么？因为在JavaScript应用程序中，Redux处理两种状态：一种是数据状态，另一种是UI状态，这是SPAs的标准选项。此外，请记住，Redux可以与AngularJS、jQuery或React
    JS库或框架一起使用。
- en: What does Redux mean? In short, Redux is a helping hand to play with states
    while developing JavaScript applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Redux是什么意思？简而言之，Redux是在开发JavaScript应用程序时处理状态的助手。
- en: We have seen in our previous examples that data flows in one direction only
    from the parent level to the child level and it is known as *unidirectional data
    flow*. React has the same flow direction from the data to components so in this
    case it would be very difficult for two components in React to properly communicate.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的例子中看到，数据只能从父级流向子级，这被称为*单向数据流*。React也有相同的数据流方向，从数据到组件，因此在这种情况下，React中的两个组件之间要进行正确的通信会非常困难。
- en: 'We can see it clearly in the following diagram:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在下面的图表中清楚地看到：
- en: '![What is Redux?](graphics/B05743_06_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![什么是Redux？](graphics/B05743_06_01.jpg)'
- en: As we can see in the preceding diagram, React is not following the direct communication
    of two components, although it has a feature to provide provision for that tactic.
    However, this is deemed as bad practice because it can result in inaccuracies
    and it's a very old way of writing, which is hard to comprehend.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的图表中所看到的，React并不遵循两个组件之间的直接通信，尽管它具有提供该策略的功能。然而，这被认为是不良实践，因为它可能导致不准确性，而且这是一种很难理解的古老写法。
- en: But that doesn't mean it's impossible to achieve it in React, as it gives an
    alternative way to do so but, according to your logic and within React standards,
    you have to manipulate it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不意味着在React中无法实现，因为它提供了另一种替代方法，但根据你的逻辑和React的标准，你必须加以处理。
- en: To achieve the same with two components that do not have the relationship of
    parent and child, you have to define a global event system where they communicate;
    Flux could be the best example of this.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现两个没有父子关系的组件之间的相同效果，你必须定义一个全局事件系统，让它们进行通信；Flux可能是最好的例子。
- en: 'Here Redux comes into the picture, as it provides a way to store your all states
    into a place from where components can access it and that place is called the
    **STORE**. In simple words, whenever any component finds any changes, it has to
    dispatch to the store first and if other components require access, it has to
    **Subscribe** from the store. It cannot directly authorize communication with
    that component, as shown in the following diagram:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Redux的作用，它提供了一种将所有状态存储到一个组件可以访问的地方的方法，这个地方被称为**STORE**。简而言之，每当任何组件发现任何更改时，它必须首先分派到存储中，如果其他组件需要访问，它必须从存储中**订阅**。它不能直接授权与该组件的通信，如下图所示：
- en: '![What is Redux?](graphics/B05743_06_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Redux是什么？](graphics/B05743_06_02.jpg)'
- en: In the preceding diagram, we can see that the **STORE** is pretending to be
    an *intermediary* for all kinds of state modifications within the application
    and Redux is controlling direct communication between two components through the
    **STORE**, with a single point of communication.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中，我们可以看到**STORE**假装成为应用程序中所有状态修改的*中介*，Redux通过**STORE**控制两个组件之间的直接通信，只有一个通信点。
- en: 'You might think that communication between components is possible with other
    strategies but it''s not recommended as either it will cause faulty code or it
    will be hard to follow:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为组件之间的通信可以通过其他策略实现，但不建议这样做，因为这样做要么会导致错误的代码，要么会难以跟踪：
- en: '![What is Redux?](graphics/B05743_06_03.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Redux是什么？](graphics/B05743_06_03.jpg)'
- en: So now it's very clear how Redux makes life easier by dispatching all state
    changes to the **STORE** rather than communicating within components. Now components
    have only to think about dispatching state changes; all other responsibilities
    will belong to the **STORE**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在很清楚Redux是如何通过将所有状态更改分派到**STORE**而不是在组件内部进行通信来简化生活的。现在组件只需要考虑分派状态更改；所有其他责任将属于**STORE**。
- en: 'The Flux pattern does the same thing. You might have heard that Redux is inspired
    by Flux so, let''s see how they are similar:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Flux模式也是这样做的。你可能听说过Redux受Flux启发，所以让我们看看它们有多相似：
- en: Comparing Redux and Flux, Redux is a tool whereas Flux is just a pattern that
    you can't use to plug and play, and you can't download it. I'm not denying that
    Redux has some similarities to the Flux pattern but it's not 100% the same as
    Flux.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 比较Redux和Flux，Redux是一个工具，而Flux只是一个模式，你不能用来即插即用，也不能下载。我不否认Redux与Flux模式有一些相似之处，但它并不完全与Flux相同。
- en: Let's look at a few differences.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些区别。
- en: Redux follows three guiding principles, as shown in the following descriptions,
    which will also cover the differences between Redux and Flux.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Redux遵循三个指导原则，如下面的描述所示，这也将涵盖Redux和Flux之间的区别。
- en: Single store approach
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单个存储方法
- en: We have seen in the earlier diagrams that the store is pretending to be an *intermediary* for
    all kinds of state modifications within the application and Redux controls direct
    communication between two components through the store, acting as a single point
    of communication.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的图表中看到，存储假装成为应用程序中所有状态修改的*中介*，Redux通过存储控制两个组件之间的直接通信，充当单一的通信点。
- en: 'Here the difference between Redux and Flux is: Flux has multiple store approaches
    and Redux has a single store approach.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里Redux和Flux的区别在于：Flux有多个存储方法，而Redux有单个存储方法。
- en: Read-only state
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只读状态
- en: In the React application, components cannot change state directly but they have
    to dispatch changes to the store through *actions*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在React应用程序中，组件不能直接更改状态，而必须通过*actions*将更改分派到存储中。
- en: 'Here, the `store` is an object and it is has four methods as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`store`是一个对象，它有四种方法，如下所示：
- en: '`store.dispatch` (action)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`store.dispatch` (action)'
- en: '`store.subscribe` (listener)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`store.subscribe`（监听器）'
- en: '`store.getState()`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`store.getState()`'
- en: '`replaceReducer` (next Reducer)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`replaceReducer`（下一个Reducer）'
- en: 'You might be aware about `get` and `set` properties in JavaScript: a `set`
    property sets the object and a `get` property gets the object. But with `store`
    methods, there is only the `get` method so there is only one way to set the state
    which dispatches a change through *actions*.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经了解JavaScript中的`get`和`set`属性：`set`属性设置对象，`get`属性获取对象。但是使用`store`方法时，只有`get`方法，因此只有一种方法可以通过*动作*分派更改来设置状态。
- en: 'An example of JavaScript Redux is shown in the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了JavaScript Redux的示例：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, an action means `dispatch()`, where the `store` method will send an object
    to update the state. In the preceding code snippet, the `action` takes `type`
    data to update the state. You can have different designs to set your action according
    to your component's needs.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，动作意味着`dispatch()`，其中`store`方法将发送一个对象来更新状态。在上述代码片段中，`action`采用`type`数据来更新状态。您可以根据组件的需要设计不同的方式来设置您的动作。
- en: Reducer functions to change the state
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Reducer函数用于更改状态
- en: Reducer functions will handle `dispatch` actions to change the state as the
    Redux tool doesn't allow direct communication between two components, so it will
    also not change the state but the `dispatch` action will be described for the
    state change.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Reducer函数将处理`dispatch`动作以改变状态，因为Redux工具不允许两个组件之间的直接通信，因此它也不会改变状态，而是将`dispatch`动作描述为状态更改。
- en: 'In the following code snippet, you will see how the `Reducer` changes the `state`
    by allowing for the current state as an argument and returning a new state:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，您将看到`Reducer`如何通过允许当前状态作为参数并返回新状态来改变`state`：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Reducers here can be considered as pure functions. The following are a few
    characteristics to write `Reducer` functions:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的Reducer可以被视为纯函数。以下是编写`Reducer`函数的一些特征：
- en: No outside database or network calls
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有外部数据库或网络调用
- en: Returns values based on their parameters
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据其参数返回值
- en: Arguments are *immutable*
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数是*不可变的*
- en: The same argument returns the same value
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相同的参数返回相同的值
- en: Reducer functions are called pure functions because they do nothing except purely
    return a value based on their set parameters; they have no other consequences.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Reducer函数被称为纯函数，因为它们除了根据其设置的参数纯粹返回值之外，什么都不做；它们没有其他后果。
- en: Architecture of Redux
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Redux的架构
- en: As we have discussed, Redux is inspired by the Flux pattern, so it also follows
    its architecture. That means that state changes will be sent to the store and
    the store will handle actions to communicate between components.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所讨论的，Redux受Flux模式的启发，因此也遵循其架构。这意味着状态变化将被发送到存储库，并且存储库将处理动作以在组件之间进行通信。
- en: 'Let''s see how the data and logic work through the following diagram:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看数据和逻辑是如何通过以下图表工作的：
- en: '![Architecture of Redux](graphics/image_06_004.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Redux的架构](graphics/image_06_004.jpg)'
- en: 'Observe the following points to get an understanding of the Redux architecture:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下要点以了解Redux架构：
- en: You can see in the preceding diagram, at the bottom right-side, the component's
    trigger actions.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在上图中看到，在右下方，组件触发动作。
- en: State mutation will happen the same way as it works in a Flux request and it
    might have an **API** request as another effect.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态突变将以与Flux请求中相同的方式发生，并且可能会有另一个效果作为**API**请求。
- en: Here **Middlewares** play an important role, such as handling actions for listening
    promise statuses as well as taking new actions.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间件在这里扮演着重要角色，比如处理监听承诺状态的操作以及采取新的行动。
- en: The **Reducers** take care of actions as a middleware.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Reducers**负责作为中间件处理动作。'
- en: The **Reducer** as a middleware gets all the action requests and it is also
    associated with the data. It has rights to globally change the state within the
    application store by defining a new state.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Reducer**作为中间件获取所有动作请求，它还与数据相关联。它有权通过定义新状态全局更改应用程序存储中的状态。'
- en: When we say state changes, this relates to reselecting its selector and transforming
    data and passing through components.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们说状态改变时，这涉及重新选择其选择器并转换数据并通过组件传递。
- en: As components get the change request, accordingly, it renders the HTML to the
    DOM elements.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当组件获得更改请求时，相应地，它会将HTML呈现给DOM元素。
- en: Before we move ahead, we have to understand the flow to have a smooth structure.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们必须了解流程，以确保结构顺畅。
- en: Redux's architectural benefits
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Redux的架构优势
- en: 'Compared to other frameworks, Redux has more benefits:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他框架相比，Redux具有更多的优势：
- en: It might not have any other side effects
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能没有其他副作用
- en: As we know, binding is not needed because components cannot interact directly
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如我们所知，不需要绑定，因为组件不能直接交互
- en: States are managed globally so there is less possibility of mismanagement
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态是全局管理的，因此出现管理不善的可能性较小
- en: Sometimes, for middleware, it would be difficult to manage other side effects
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，对于中间件来说，管理其他副作用可能会很困难
- en: From the aforementioned points, it's very clear that Redux's architecture is
    very powerful and it has reusability as well. Let's look at a practical example
    to see how Redux works with React.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述观点来看，Redux的架构非常强大，而且具有可重用性。让我们看一个实际的例子，看看Redux如何与React一起工作。
- en: We will create our Add Ticket form application in Redux.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Redux中创建我们的Add Ticket表单应用程序。
- en: Redux setup
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Redux设置
- en: Let's start with a `UserList` example in Redux. First, create a directory with
    the application. We are using the Node.js server and npm package for this example
    because the Redux module is not available independently.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从Redux中的`UserList`示例开始。首先，创建一个带有应用程序的目录。我们在这个示例中使用Node.js服务器和npm包，因为Redux模块不能独立使用。
- en: Installing Node.js
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: First, we have to download and install Node.js, if we have not already installed
    it in the system. We can download Node.js from [http://nodejs.org](http://nodejs.org)
    . It includes the npm package manager.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果我们尚未在系统中安装Node.js，我们必须下载并安装Node.js。我们可以从[http://nodejs.org](http://nodejs.org)下载Node.js。它包括npm包管理器。
- en: 'Once the setup is done, we can check whether Node.js was set up properly or
    not. Open the command prompt window and run the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，我们可以检查Node.js是否设置正确。打开命令提示窗口并运行以下命令：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should be able to see the version information, which ensures that the installation
    was successful.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够看到版本信息，这可以确保安装成功。
- en: Setting up the application
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置应用程序
- en: 'First we need to create a `package.json` file for our project which includes
    the project information and dependencies. Now, open the command prompt/console
    and navigate to the directory you have created. Run the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为我们的项目创建一个`package.json`文件，其中包括项目信息和依赖项。现在，打开命令提示符/控制台，并导航到您创建的目录。运行以下命令：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command will initialize our app and ask several questions to create a
    JSON file named `package.json`. The utility will ask questions about the project
    name, description, entry point, version, author name, dependencies, license information,
    and so on. Once the command is executed, it will generate a `package.json` file
    in the root directory of your project:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将初始化我们的应用程序，并询问一些问题，以创建一个名为`package.json`的JSON文件。该实用程序将询问有关项目名称、描述、入口点、版本、作者名称、依赖项、许可信息等的问题。一旦执行了该命令，它将在项目的根目录中生成一个`package.json`文件：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'OK, let me explain to you some of the major tools before we start:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我在开始之前向您解释一些主要工具：
- en: '`webpack-dev-server`: This is a server for live reload of our application.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-dev-server`：这是用于应用程序实时重新加载的服务器。'
- en: '`babel-loader`: This is the compiler for our JavaScript.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`babel-loader`：这是我们JavaScript的编译器。'
- en: '`redux-devtools`: This is a powerful tool for Redux development. Using this
    tool in development will help us to monitor the updates in the DOM UI.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`redux-devtools`：这是Redux开发的强大工具。在开发中使用此工具将帮助我们监视DOM UI中的更新。'
- en: '`classnames`: This is amodule that will help us to apply the classes on condition.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`classnames`：这是一个模块，将帮助我们根据条件应用类。'
- en: '`eslint`: This is a tool similar to JSHint and JSLint for parsing the JavaScript.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eslint`：这是类似于JSHint和JSLint用于解析JavaScript的工具。'
- en: Development tool setup
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发工具设置
- en: 'First, we need to create `webpack.config.js` and add the following code to
    enable the `redux-devtools`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建`webpack.config.js`并添加以下代码以启用`redux-devtools`：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, create a directory with the name of `src`. Inside this we need to create
    some folders, as shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个名为`src`的目录。在其中，我们需要创建一些文件夹，如下面的截图所示：
- en: '![Development tool setup](graphics/image_06_005.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![开发工具设置](graphics/image_06_005.jpg)'
- en: Redux application setup
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Redux 应用程序设置
- en: In every Redux application, we have actions, reducers, stores, and components.
    Let's start with creating some actions for our application.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个Redux应用程序中，我们都有actions、reducers、stores和components。让我们从为我们的应用程序创建一些actions开始。
- en: Actions
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Actions
- en: Actions are the part of the information that sends data from our application
    to our store.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Actions是从我们的应用程序发送数据到我们的store的信息的一部分。
- en: 'First we need to create the `UsersActions.js` file inside the actions folder
    and put the following code inside it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在actions文件夹内创建`UsersActions.js`文件，并将以下代码放入其中：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding code, we created two actions: `addUser` and `deleteUser`.
    Now we need to create `ActionTypes.js` inside the `constants` folder that defines
    the `type`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们创建了两个动作：`addUser`和`deleteUser`。现在我们需要在`constants`文件夹内创建`ActionTypes.js`，定义`type`：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Reducers
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Reducers
- en: 'Reducers handle the actions which describe the fact that something happened,
    but managing the state of the application is the responsibility of the reducers.
    They store the previous `state` and `action` and `return` the next `state`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Reducers处理描述发生了什么事情的actions，但管理应用程序状态是reducers的责任。它们存储先前的`state`和`action`，并`return`下一个`state`：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Store
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Store
- en: We have defined the actions and reducers that represent the facts about *what
    happened* and when we need to update the state according to those actions.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经定义了actions和reducers，它们代表了关于*发生了什么*的事实，以及何时需要根据这些actions更新状态。
- en: 'The `store` is the object that combines the actions and reducers. The store
    has the following responsibilities:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`store`是将actions和reducers结合在一起的对象。store有以下职责：'
- en: Holds the application state
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存应用程序状态
- en: Allows access and updates the state through `getState()` and `dispatch` (action)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`getState()`和`dispatch`（action）允许访问和更新状态。
- en: Registers and unregisters listeners through `subscribe` (listener)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`subscribe`（监听器）注册和取消注册监听器
- en: 'Here is the code of `UserListApp.js` inside the container folder:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是container文件夹中`UserListApp.js`的代码：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, we are initializing the state of the component with the
    static JSON data of `UserList` and using the `getstate`, `dispatch` (action),
    and we will update the store information.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用`UserList`的静态JSON数据初始化组件的状态，并使用`getstate`、`dispatch`（action），然后更新store信息。
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We'll only have a single store in a Redux application. When we need to split
    our data handling logic, we'll use the reducer composition instead of multiple
    stores.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在Redux应用程序中，我们只会有一个单一的store。当我们需要拆分我们的数据处理逻辑时，我们将使用reducer组合而不是多个store。
- en: Components
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Components
- en: 'These are the normal React JSX components, so we don''t need to go into detail
    about them. We have added some functional stateless components that we''ll use
    unless we need to use local state or the life cycle methods:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是普通的React JSX组件，所以我们不需要详细介绍它们。我们已经添加了一些功能状态组件，除非我们需要使用本地状态或生命周期方法，否则我们将使用它们：
- en: 'In this (`AddUserInput.js`) file, we are creating a JSX input component from
    where we take the user input:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个（`AddUserInput.js`）文件中，我们正在创建一个JSX输入组件，从中获取用户输入：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In `UserList.js` we are creating a list component where we iterate the value
    of the `Input` component:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UserList.js`中，我们正在创建一个列表组件，其中我们迭代`Input`组件的值：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After iterating the value in the `UserList` component, we are displaying that
    list in the Bootstrap `media` layout:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UserList`组件中迭代值后，我们将在Bootstrap的`media`布局中显示该列表：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we need to wrap our components in `UserListApp.js` inside the container
    folder:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将我们的组件包装在容器文件夹中的`UserListApp.js`中：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s wrap this `UserListApp` component to the Redux store in `App.js`
    inside the container folder:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将`UserListApp`组件包装到容器文件夹中的`App.js`中的Redux存储中：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now go to the root directory, open the CMD, and run the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转到根目录，打开CMD，并运行以下命令：
- en: 'To install the packages that we need for this app, run the following command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装此应用程序所需的软件包，请运行以下命令：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once it''s complete, run the following command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行以下命令：
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Observe the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下屏幕截图：
- en: '![Components](graphics/image_06_006.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![Components](graphics/image_06_006.jpg)'
- en: That looks amazing. In the right-side panel is the Redux DevTool which gives
    the update of the UI. We can easily see the updates for deleting or adding the
    user in this list.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很棒。右侧面板是Redux DevTool，它提供了UI的更新。我们可以轻松地看到在此列表中删除或添加用户的更新。
- en: 'The following screenshot shows the deletion of a user from `UserList`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了从`UserList`中删除用户：
- en: '![Components](graphics/image_06_007.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![Components](graphics/image_06_007.jpg)'
- en: 'The following screenshot shows the addition of a user:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了添加用户的过程：
- en: '![Components](graphics/image_06_008.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![Components](graphics/image_06_008.jpg)'
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please see the source code for [Chapter 6](ch06.html "Chapter 6. Redux Architecture"),
    *Redux Architecture* to get a proper understanding about the flow of the application.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第6章](ch06.html "第6章。Redux架构")的源代码，*Redux架构*，以便更好地理解应用程序的流程。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We can now see the importance of the Redux architecture and its role in the
    React application. We have also learnt about the state management in this chapter,
    looking at how the store globally handles state change requests and Redux helps
    to avoid direct interaction between components.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到Redux架构的重要性及其在React应用程序中的作用。我们还在本章中学习了状态管理，看看存储如何全局处理状态更改请求，Redux有助于避免组件之间的直接交互。
- en: This chapter is all about Redux architecture and its details. To clarify, we
    have seen diagrams that provide an understanding of the flow of data and logic
    in the Redux architecture. The Redux architecture is inspired by Flux but it has
    its own identity and benefits. We hope that the diagrams and practical examples
    have helped to give you an understanding of the Redux architecture.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讨论Redux架构及其细节。为了澄清，我们已经看到了提供对Redux架构中数据和逻辑流程理解的图表。Redux架构受Flux的启发，但它有自己的特点和优势。我们希望图表和实际示例有助于让您了解Redux架构。
- en: Now, we are going to move on to the next chapter, dealing with how we can do
    routing with React.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将继续进行下一章，讨论如何在React中进行路由。
