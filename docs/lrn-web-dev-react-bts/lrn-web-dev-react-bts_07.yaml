- en: Chapter 7.  Routing with React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。 使用React进行路由
- en: In the previous chapters, we have learned about the Redux architecture and how
    we can handle the two states, the data state and the UI state, to create single
    page applications or components. For now, if needed, our application UI will be
    in sync with the URL and we need to use the React router to make our application
    UI in-sync.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经了解了Redux架构以及如何处理两种状态，即数据状态和UI状态，以创建单页面应用程序或组件。目前，如果需要，我们的应用程序UI将与URL同步，我们需要使用React路由器使我们的应用程序UI同步。
- en: Advantages of React router
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React路由器的优势
- en: 'Let''s look at some of the advantages of the React router:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下React路由器的一些优势：
- en: Viewing declarations in a standardized structure helps us to instantly understand
    what are our app views
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以标准化结构查看声明有助于我们立即了解我们的应用视图
- en: Lazy code loading
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟加载代码
- en: Using the React router, we can easily handle the nested views and the progressive
    resolution of views
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React路由器，我们可以轻松处理嵌套视图和渐进式视图分辨率
- en: Using the browsing history feature, the user can navigate backwards/forwards
    and restore the state of the view
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用浏览历史功能，用户可以向后/向前导航并恢复视图的状态
- en: Dynamic route matching
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态路由匹配
- en: CSS transitions on views when navigating
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航时视图上的CSS过渡
- en: Standardized app structure and behavior, useful when working in a team
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准化的应用程序结构和行为，在团队合作时非常有用
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The React router doesn't provide any way to handle data fetching; we need to
    use `asyncProps` or another React data fetching mechanism.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: React路由器不提供任何处理数据获取的方式；我们需要使用`asyncProps`或另一种React数据获取机制。
- en: 'In this chapter, we''ll take a look at how we can create routes, as well as
    routes containing parameters. Before we begin, let''s plan out exactly what routes
    we''re going to need for our **Employee Information System** (**EIS**). Observe
    the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何创建路由，以及包含参数的路由。在开始之前，让我们计划一下我们的**员工信息系统**（**EIS**）需要哪些路由。请查看以下屏幕截图：
- en: '![Advantages of React router](graphics/image_07_001.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![React路由器的优势](graphics/image_07_001.jpg)'
- en: The preceding screenshot is from [Chapter 2](ch02.html "Chapter 2. Lets Build
    a Responsive Theme with React-Bootstrap and React"), *Lets Build a Responsive
    Theme with React-Bootstrap and React* for your reference.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述屏幕截图来自[第2章](ch02.html“第2章。使用React-Bootstrap和React构建响应式主题”) *使用React-Bootstrap和React构建响应式主题*供您参考。
- en: In [Chapter 2](ch02.html "Chapter 2. Lets Build a Responsive Theme with React-Bootstrap
    and React"), *Lets Build a Responsive Theme with React-Bootstrap and React,* we
    created the responsive theme layout for our app moving forward. Now we'll add
    the routing in this to navigate to each page.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html“第2章。使用React-Bootstrap和React构建响应式主题”) *使用React-Bootstrap和React构建响应式主题*中，我们为我们的应用程序创建了响应式主题布局。现在我们将在其中添加路由以导航到每个页面。
- en: '**Home**: This is going to be our home page, which will show the employee profile
    information'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主页**：这将是我们的主页，将显示员工的个人资料信息'
- en: '**Edit Profile**: Here, we''ll able to edit information about the employee'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑个人资料**：在这里，我们将能够编辑员工的信息'
- en: '**View Tickets**: In this page, the employee will be able to see the tickets
    which he has submitted'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看工单**：在这个页面，员工将能够查看他提交的工单'
- en: '**New Ticket**: Here, the employee can submit the tickets'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新工单**：在这里，员工可以提交工单'
- en: These are all of our essential routes; so let's take a look at how we can create
    them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是我们必要的路由；让我们看看如何创建它们。
- en: Installing router
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装路由器
- en: 'The React router has been packaged as a different module outside the React
    library. We can use the React router CDN at: [https://cdnjs.cloudflare.com/ajax/libs/react-router/4.0.0-0/react-router.min.js](https://cdnjs.cloudflare.com/ajax/libs/react-router/4.0.0-0/react-router.min.js)
    .'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: React路由器已经作为React库之外的不同模块打包。我们可以在React路由器CDN上使用React路由器CDN：[https://cdnjs.cloudflare.com/ajax/libs/react-router/4.0.0-0/react-router.min.js](https://cdnjs.cloudflare.com/ajax/libs/react-router/4.0.0-0/react-router.min.js)。
- en: 'We can include it in our project like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像这样将其包含在我们的项目中：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or we can use the `npm` package for React:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以使用React的`npm`包：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using an ES6 transpiler, like Babel:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ES6转译器，比如Babel：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Not using an ES6 transpiler:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用ES6转译器：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: OK, now let's do the setup of our project and include the React router.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们设置我们的项目并包括React路由器。
- en: Application setup
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序设置
- en: The React router doesn't look the same as other JS routers. It uses the JSX
    syntax that makes it different to other routers. First we will create a sample
    app without using the `npm` package for a better understanding of the router concept.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: React路由器看起来与其他JS路由器不同。它使用JSX语法，这使得它与其他路由器不同。首先，我们将创建一个示例应用程序，而不使用`npm`包，以更好地理解路由器的概念。
- en: 'Follow these instructions to do the setup:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明进行设置：
- en: Copy the `Chapter 2` directory structure and files into `Chapter 7`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`第2章`目录结构和文件复制到`第7章`中。
- en: Delete the existing HTML files and create a new `index.html`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除现有的HTML文件并创建一个新的`index.html`。
- en: 'Copy this boilerplate code in your HTML:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的HTML中复制此样板代码：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Open the `index.html` in the browser. Make sure that the output does not show
    any errors in the console.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`index.html`。确保输出不显示控制台中的任何错误。
- en: Creating routes
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建路由
- en: As we've already created HTML, now we need to add a Bootstrap `navbar` component
    in `bootstrap-navbar.js` that we created earlier.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经创建了HTML，现在我们需要在之前创建的`bootstrap-navbar.js`中添加一个Bootstrap `navbar`组件。
- en: 'For configuring the routing, let''s create one component in `routing.js` that
    will be in sync with the URL:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置路由，让我们在`routing.js`中创建一个组件，它将与URL同步：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open it in your browser and here is how it looks:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开它，看起来是这样的：
- en: '![Creating routes](graphics/image_07_002.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![创建路由](graphics/image_07_002.jpg)'
- en: 'Let''s add the `Router` to render our `homePage` component with the URL:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加`Router`来渲染我们的`homePage`组件与URL：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding example, using the `<Route>` tag defines a rule where visiting
    the home page will render the `homePage` component into the `''main''`. As we
    already know, the React router used JSX to configure the router. `<Router>` and
    `<Route>` both are different things. The `<Router>` tag should always be the primary
    parent tag that wraps the multiple URLs with the `<Route>` tag. We can declare
    multiple `<Route>` tags with attribute components that make your UI in-sync. When
    the history changes, the `<Router>` will render the component with the matching
    URL:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，使用`<Route>`标签定义了一个规则，访问首页将把`homePage`组件渲染到`'main'`中。正如我们已经知道的那样，React路由器使用JSX来配置路由。`<Router>`和`<Route>`是不同的东西。`<Router>`标签应该始终是包裹多个URL的主要父标签，而`<Route>`标签。我们可以声明多个带有属性组件的`<Route>`标签，使您的UI同步。当历史记录发生变化时，`<Router>`将使用匹配的URL渲染组件：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It looks very simple and clear that the router will switch the routes with the
    view without making a request to the server and render them into the DOM.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来非常简单和清晰，路由器将在视图之间切换路由，而不会向服务器发出请求并将它们渲染到DOM中。
- en: Page layout
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面布局
- en: Let's assume that if we need a different layout for every component, such as
    the home page, there should be two columns, and other pages should have one column,
    but they both share common assets such as headers and footers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设如果我们需要为每个组件都需要不同的布局，比如首页应该有两列，其他页面应该有一列，但它们都共享头部和页脚等公共资产。
- en: 'Here is the layout mock-up of our app:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们应用程序的布局草图：
- en: '![Page layout](graphics/image_07_003.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![页面布局](graphics/image_07_003.jpg)'
- en: 'OK, so now let''s create our main layout:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们创建我们的主要布局：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the preceding code, we have created the main layout for our app that handles
    the child layout components with `this.props.children` instead of a hard-coded
    component. Now we''ll create child components that are rendered in our main layout
    component:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们已经为我们的应用程序创建了主要布局，它使用`this.props.children`来处理子布局组件，而不是硬编码的组件。现在我们将创建在我们的主要布局组件中呈现的子组件：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, we have created two components, `RightSection` and `ColumnLeft`,
    to wrap and divide our components in different sections.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们创建了两个组件，`RightSection`和`ColumnLeft`，来包装和分割我们的组件在不同的部分。
- en: 'So it should be easy for us to manage the layout in a responsive design:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在响应式设计中，我们应该很容易管理布局：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding code, we have split our components into two sections: `<ColumnLeft/>`
    and `<RightSection/>`. We have given the reference of both components in the `<TwoColumnLayout/>`
    component. In the parent component, we have `this.props.children` as a prop, but
    it only works when components are nested and React is responsible for filling
    this prop automatically. `this.props.children` will be null if the components
    aren''t parent components.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们将组件分成了两个部分：`<ColumnLeft/>`和`<RightSection/>`。我们在`<TwoColumnLayout/>`组件中给出了这两个组件的引用。在父组件中，我们有`this.props.children`作为一个prop，但只有当组件是嵌套的时候才起作用，React会自动负责填充这个prop。如果组件不是父组件，`this.props.children`将为null。
- en: Nested routes
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套路由
- en: 'OK, we have done with creating layout specific components, but we still need
    to look at how we can create nested routes for them so that the components are
    passed into parents with props. This is important, so as to allow a level of dynamism
    within our EIS application. Here is our HTML, showing what it looks like now:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经创建了特定布局组件，但我们仍然需要看看如何为它们创建嵌套路由，以便将组件传递给具有props的父组件。这很重要，以便在我们的EIS应用程序中实现一定程度的动态性。这是我们的HTML，显示当前的样子：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s take a look at the router which we created earlier once again:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看一下我们之前创建的路由器：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So now we have added the extra element, `<IndexRoute />`, to the mapping with
    our parent, setting its view to be our `{TwoColumnLayout}` component. The `IndexRoute`
    element is responsible for which component is being displayed when our app initially
    loads.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在与父级的映射中添加了额外的元素`<IndexRoute />`，将其视图设置为我们的`{TwoColumnLayout}`组件。`IndexRoute`元素负责在应用程序初始加载时显示哪个组件。
- en: 'Don''t forget to wrap inside the `{PageLayout}` component. We can also define
    the path rule on `<indexRoute>,` the same as `<Route>`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在`{PageLayout}`组件中包装。我们还可以在`<indexRoute>`上定义路径规则，与`<Route>`相同：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Observe the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下截图：
- en: '![Nested routes](graphics/image_07_004.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![嵌套路由](graphics/image_07_004.jpg)'
- en: That looks good. As mentioned in our `<IndexRoute>`, it always loads the `<TwoColumnLayout>`
    on the first page load. Now let's navigate and take a look at some other pages.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错。如我们在`<IndexRoute>`中提到的，它总是在第一次加载页面时加载`<TwoColumnLayout>`。现在让我们导航并查看一些其他页面。
- en: 'React also provides us with a way to redirect the route using the `<IndexRedirect>`
    component:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: React还为我们提供了一种使用`<IndexRedirect>`组件重定向路由的方法：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Observe the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下截图：
- en: '![Nested routes](graphics/image_07_005.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![嵌套路由](graphics/image_07_005.jpg)'
- en: You'll have noticed that I've clicked on the **Edit Profile** page and it rendered
    the edit page component but it didn't add the active class on the current active
    link. For this we need to replace the `<a>` tag with the React `<Link>` tag.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我点击了**编辑个人资料**页面，它呈现了编辑页面组件，但没有在当前活动链接上添加活动类。为此，我们需要用React的`<Link>`标签替换`<a>`标签。
- en: React router
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React路由
- en: The React router used the `<link>` component instead of the `<a>` element which
    we have used in `nav`. It's necessary to use this if we are working with the React
    router. Let's add `<link>` in our navigation instead of the `<a>` tag and replace
    the `href` attribute with two.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: React路由使用了`<link>`组件，而不是我们在`nav`中使用的`<a>`元素。如果我们使用React路由，则必须使用这个。让我们在导航中添加`<link>`而不是`<a>`标签，并替换`href`属性为两个。
- en: 'The `<a>` tag:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`<a>`标签：'
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Replace this with:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 用这个替换：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s take a look in the browser to see the behavior of `<link>`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中查看`<link>`的行为：
- en: '![React router](graphics/image_07_006.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![React router](graphics/image_07_006.jpg)'
- en: 'It''s showing an error in the console because we have not added the `Link`
    component reference in the `ReactRouter` object:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 它在控制台中显示错误，因为我们没有在`ReactRouter`对象中添加`Link`组件引用：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We have also added the `browserHistory` object, which we'll explain later.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了`browserHistory`对象，稍后我们会解释。
- en: 'Here is what our `PageLayout` component looks like:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的`PageLayout`组件的样子：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To activate the default link, we''ve used `<IndexRoute>`. This automatically
    defines the default link''s active class. The `activeClassName` attribute will
    match the URL with the `to` value and add the active class to it. If we do not
    use `activeClassName` then it cannot add the class automatically on the active
    link. Let''s take a quick look at the browser:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了激活默认链接，我们使用了`<IndexRoute>`。这会自动定义默认链接的活动类。`activeClassName`属性将URL与`to`值匹配并将活动类添加到其中。如果我们不使用`activeClassName`，则无法自动在活动链接上添加类。让我们快速看一下浏览器：
- en: '![React router](graphics/image_07_007.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![React router](graphics/image_07_007.jpg)'
- en: 'It''s working as expected. Let''s take a look at the DOM HTML in the console:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 它按预期工作。让我们在控制台中查看DOM HTML：
- en: '![React router](graphics/image_07_008.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![React router](graphics/image_07_008.jpg)'
- en: 'We just need to overwrite the Bootstrap default style on `<li> .active` to
    `<a>`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要覆盖`<li> .active`上的Bootstrap默认样式为`<a>`：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can also pass a parameter in the route to match, validate, and render the
    UI:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在路由中传递参数来匹配、验证和渲染UI：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And in the router we need to add:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由器中，我们需要添加：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We can add as many parameters as required, and it's easy to pull these out in
    our component. We'll have access to all the `route` parameters as objects.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加尽可能多的参数，并且很容易在我们的组件中提取这些参数。我们将以对象的形式访问所有`route`参数。
- en: The React router supports the IE9+ browser version but for IE8 you can use the
    Node `npm` package, `react-router-ie8`
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: React路由支持IE9+浏览器版本，但对于IE8，您可以使用Node `npm`包`react-router-ie8`
- en: NotFoundRoute
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NotFoundRoute
- en: 'The React router also provides a way to show a 404 error on the client side
    if the path is not matched with the route:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: React路由还提供了一种在客户端显示404错误的方法，如果路径与路由不匹配：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Observe the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下截图：
- en: '![NotFoundRoute](graphics/image_07_009.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![NotFoundRoute](graphics/image_07_009.jpg)'
- en: It's amazing how easily we can handle the unmatched URL.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很容易地处理不匹配的URL，这太棒了。
- en: 'Here is what our router looks like:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的路由器的样子：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here is the list of other `link` attributes that we can use:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们可以使用的其他`link`属性列表：
- en: '`activeStyle`: We can use this for the custom inline style. For example:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activeStyle`：我们可以用这个来自定义内联样式。例如：'
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`onlyActiveOnIndex` : We can use this attribute when we add a custom inline
    style with the `activeStyle` attribute. It will apply only when we are on an exact
    link. For example:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onlyActiveOnIndex`：当我们使用`activeStyle`属性添加自定义内联样式时，我们可以使用这个属性。它只在我们在精确链接上时应用。例如：'
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Browser history
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浏览器历史
- en: One more cool feature of the React router is that it uses the `browserHistory`
    API to manipulate the URL and create a clean URL.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: React路由的另一个很酷的功能是它使用`browserHistory` API来操作URL并创建干净的URL。
- en: 'With the default `hashHistory`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认的`hashHistory`：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When we use the `browserHistory` in our app, the URL will look clean:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在我们的应用程序中使用`browserHistory`时，URL看起来很干净：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The URL now looks clean and user friendly.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在URL看起来干净且用户友好。
- en: Query string parameters
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询字符串参数
- en: We can also pass query strings as `props` to any component that will be rendered
    at a specific route. For accessing these prop parameters, we need to add the `props.location.query`
    property in our component.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将查询字符串作为“props”传递给将在特定路由上呈现的任何组件。要访问这些prop参数，我们需要在我们的组件中添加`props.location.query`属性。
- en: 'To see how this works, let''s create a new component called `RouteQueryString`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这是如何工作的，让我们创建一个名为`RouteQueryString`的新组件：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Include this route path in the router:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由器中包含此路由路径：
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let''s see the output in the browser:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中看看输出：
- en: '![Query string parameters](graphics/image_07_010.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![查询字符串参数](graphics/image_07_010.jpg)'
- en: Great, it's working as expected.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，它的工作正常。
- en: 'Here is what our `Router` configuration looks like now:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的`Router`配置看起来是这样的：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Customizing your history further
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步定制您的历史记录
- en: If we want to customize the history options or use other enhancers from history,
    then we need to use the `useRouterHistory` component of React.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要定制历史选项或使用历史记录中的其他增强器，那么我们需要使用React的`useRouterHistory`组件。
- en: '`useRouterHistory` already pre-enhances from the history factory with the `useQueries`
    and `useBasename` from history. Examples include:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`useRouterHistory`已经使用`useQueries`和`useBasename`从历史工厂预增强。示例包括：'
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Using the `useBeforeUnload` enhancer:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`useBeforeUnload`增强器：
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Before using the React router, we must be aware of React router version updates.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用React路由之前，我们必须了解React路由版本更新。
- en: Please visit this link [https://github.com/ReactTraining/react-router/blob/master/upgrade-guides/v2.0.0.md](https://github.com/ReactTraining/react-router/blob/master/upgrade-guides/v2.0.0.md)
    to be updated.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 请访问此链接[https://github.com/ReactTraining/react-router/blob/master/upgrade-guides/v2.0.0.md](https://github.com/ReactTraining/react-router/blob/master/upgrade-guides/v2.0.0.md)以获取更新。
- en: 'Here is the short list of deprecated syntax in the router:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是路由器中不推荐使用的语法的简短列表：
- en: '[PRE33]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`history.isActive` is replaced with `router.isActive`.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`history.isActive`被替换为`router.isActive`。'
- en: '`RoutingContext` is renamed `RouterContext`.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`RoutingContext`被重命名为`RouterContext`。'
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we transformed our application from one single page to multiple
    pages and a multiroute app that we can build our EIS application upon. We started
    by planning out the main routes in our application before creating a component.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将我们的应用程序从单个页面转换为多个页面和多路由应用程序，我们可以在其上构建我们的EIS应用程序。我们首先规划了应用程序中的主要路由，然后创建了一个组件。
- en: 'We then looked at how we can use the `<Router>` and `<Route>` methods to set
    up our routes. This was done by `var { Router, Route, IndexRoute,IndexLink, Link,
    browserHistory } = ReactRouter`. We have also looked at other methods: `<Link>`, `<IndexLink>`,
    and `<IndexRoute>`.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们看了如何使用`<Router>`和`<Route>`方法设置我们的路由。这是通过`var { Router, Route, IndexRoute,IndexLink,
    Link, browserHistory } = ReactRouter`完成的。我们还看了其他方法：`<Link>`、`<IndexLink>`和`<IndexRoute>`。
- en: This allowed us to set up static and dynamic routes containing parameters to
    make our app UI sync perfectly with the URL.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够设置包含参数的静态和动态路由，使我们的应用程序UI与URL完美同步。
- en: In the next chapter, we will discuss how we can integrate other APIs with React.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何将其他API与React集成。
