- en: Chapter 9. React with Node.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。React与Node.js
- en: In the previous chapters, we have learnt about React routing, the integration
    of the Facebook API, and how we can configure and handle app URLs. We have also
    learnt how we can register our component in the DOM according to the URL.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经学习了关于React路由、Facebook API的集成，以及如何配置和处理应用程序的URL。我们还学习了如何根据URL在DOM中注册我们的组件。
- en: 'In this chapter, we will build our existing application with Node.js. I''m
    not going to show you how to connect with the server and build the server-side
    aspect here, as that''s outside the scope of this book. However, it is included
    in the code files that accompany the book. Here''s what we''ll be covering in
    this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Node.js构建我们现有的应用程序。我不打算在这里向您展示如何连接服务器和构建服务器端方面，因为这超出了本书的范围。但是，它包含在随书附带的代码文件中。本章我们将涵盖以下内容：
- en: Installing all modules with the npm
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用npm安装所有模块
- en: Running compilers and preprocessors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行编译器和预处理器
- en: Integrating the Add Ticket form
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成添加票务表单
- en: Submitting the form and saving it in local storage
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交表单并将其保存在本地存储中
- en: Storing and reading local storage data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储和读取本地存储数据
- en: Running the development web server, file watcher, and browser reload
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行开发Web服务器，文件监视器和浏览器重新加载
- en: The React debugging tool
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React调试工具
- en: So far our application is entirely based on the frontend and also it's not modularized.
    Of course, this means our application code looks messy. We are also using an unpackaging
    file for every dependency library of React and the browser has to go and fetch
    each JavaScript file and compile it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用程序完全基于前端，而且它并没有模块化。当然，这意味着我们的应用程序代码看起来很混乱。我们还使用了React的每个依赖库的解包文件，浏览器必须去获取每个JavaScript文件并进行编译。
- en: We'll no longer need to manually concatenate and minify, but instead we can
    have a setup watching our files for changes and automatically make them, such
    as `webpack` and `webpack-hot-middleware`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不再需要手动连接和压缩，而是可以设置监视我们的文件进行更改并自动进行更改，比如`webpack`和`webpack-hot-middleware`。
- en: Let's continue to make changes in our project and it would be tedious to continually
    repeat the process.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续对我们的项目进行更改，不断重复这个过程将会很繁琐。
- en: Installing Node and npm
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Node和npm
- en: 'First we need to download and install Node.js. If you have already installed
    and configured Node, feel free to skip this section. We can download Node.js from
    [http://nodejs.org ](http://nodejs.org) and follow the instructions mentioned
    as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要下载并安装Node.js。如果您已经安装并配置了Node，请随意跳过本节。我们可以从[http://nodejs.org](http://nodejs.org)下载Node.js，并按照以下说明进行操作：
- en: Download the installer for your operating system from [http://nodejs.org/](http://nodejs.org/).
    Node.js provides different installers in line with your platform. In this chapter,
    we will use the Windows installer to set up Node.![Installing Node and npm](graphics/image_09_001.jpg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://nodejs.org/](http://nodejs.org/)下载适用于您操作系统的安装程序。Node.js根据您的平台提供不同的安装程序。在本章中，我们将使用Windows安装程序来设置Node。![安装Node和npm](graphics/image_09_001.jpg)
- en: We can also download a previous Node version from [https://nodejs.org/en/download/releases/](https://nodejs.org/en/download/releases/).
    In this chapter, we are using the Node.js 0.12 branch, so make sure you are downloading
    this.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以从[https://nodejs.org/en/download/releases/](https://nodejs.org/en/download/releases/)下载以前的Node版本。在本章中，我们正在使用Node.js
    0.12分支，所以请确保您正在下载这个版本。
- en: Run the installer and the MSI file that we downloaded.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行我们下载的安装程序和MSI文件。
- en: 'The installer wizard will ask for your choice of features to be installed,
    and you can select the one you want. Usually, we select the default installation:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装向导将询问您要安装的功能选择，并且您可以选择您想要的功能。通常，我们选择默认安装：
- en: '![Installing Node and npm](graphics/image_09_002.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![安装Node和npm](graphics/image_09_002.jpg)'
- en: If the installation asks for it, then restart your computer.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果安装要求，然后重新启动您的计算机。
- en: Once the system is restarted, we can check whether Node.js was set up properly
    or not.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 系统重新启动后，我们可以检查Node.js是否设置正确。
- en: 'Open the command prompt and run the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符并运行以下命令：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You should be able to see version information, which ensures that the installation
    was successful.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够看到版本信息，这可以确保安装成功。
- en: React application setup
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React应用程序设置
- en: First we need to create a `package.json` file for our project, which includes
    the project information and dependencies of the npm modules. npm is very useful
    for JavaScript developers to create and share the reusable code that they have
    created to build an application and solve particular problems while developing
    it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为我们的项目创建一个`package.json`文件，其中包括npm模块的项目信息和依赖项。npm对于JavaScript开发人员来说非常有用，可以创建和共享他们创建的可重用代码，以构建应用程序并在开发过程中解决特定问题。
- en: 'Now, open the command prompt/console and navigate to the directory you have
    created. Run the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开命令提示符/控制台并导航到您创建的目录。运行以下命令：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command will initialize our app and ask several questions to create a JSON
    file named `package.json`. The utility will ask questions about the project name,
    description, entry point, version, author name, dependencies, license information,
    and so on. Once the command is executed, it will generate a `package.json` file
    in the root directory of your project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将初始化我们的应用程序并询问若干问题以创建名为`package.json`的JSON文件。该实用程序将询问有关项目名称、描述、入口点、版本、作者名称、依赖项、许可信息等的问题。一旦命令执行，它将在项目的根目录中生成一个`package.json`文件。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, you can see the `name` of the application, the entry
    point of your application (`start`), the `version` of your application, and the
    `description` of your application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，您可以看到应用程序的`name`，应用程序的入口点（`start`），应用程序的`version`和应用程序的`description`。
- en: Installing modules
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装模块
- en: Now we need to install some Node modules, which are going to help us with building
    a React application with Node. We will use Babel, React, React-DOM, Router, Express,
    and so on.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要安装一些Node模块，这些模块将帮助我们构建一个带有Node的React应用程序。我们将使用Babel、React、React-DOM、Router、Express等。
- en: 'Following is the command for installing the modules through `npm`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是通过`npm`安装模块的命令：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When we run the aforementioned command with the `<package name>`, it will install
    the package in your `project folder/node_modules` and save the `package name/version`
    in your `package.json` which will help us to install all the project dependencies
    and update the modules in any system.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`<package name>`运行上述命令时，它将在您的`project folder/node_modules`中安装包并将`package
    name/version`保存在您的`package.json`中，这将帮助我们在任何系统中安装所有项目依赖项并更新模块。
- en: 'If you already have the `package.json` file with the project dependencies then
    you only need to run the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有了带有项目依赖项的`package.json`文件，那么您只需要运行以下命令：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And to update we need to run the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 更新我们需要运行以下命令：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is a list of modules that have dependencies in our application:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们应用程序中具有依赖项的模块列表：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding `dependencies` list there may be some modules you have not
    heard of or are new to you. OK, let me explain:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述`dependencies`列表中可能有一些您没有听说过或对您来说是新的模块。好的，让我解释一下：
- en: '`mongoose` and `mongodb`: These work as a middleware in an application or MongoDB.
    Installing MongoDB and mongoose is optional for you as we are not using them in
    our application. I have just added them for your reference.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mongoose`和`mongodb`：这些在应用程序或MongoDB中作为中间件工作。安装MongoDB和mongoose对您来说是可选的，因为我们在应用程序中没有使用它们。我只是为了您的参考而添加了它们。'
- en: '`nodemon`: During development in a Node.js app, `nodemon` will watch the files
    in the directory and if any files change, it will automatically restart your node
    application.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nodemon`：在Node.js应用程序中进行开发时，`nodemon`将监视目录中的文件，如果有任何文件更改，它将自动重新启动您的节点应用程序。'
- en: '`react-hot-loader`: This is the most commonly used module in web development
    for live code editing and project reloading. The `react-hot-loader` itself has
    some dependency on other modules:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react-hot-loader`：这是Web开发中最常用的模块，用于实时代码编辑和项目重新加载。`react-hot-loader`本身对其他模块有一些依赖：'
- en: '`webpack`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack`'
- en: '`webpack-hot-middleware`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-hot-middleware`'
- en: '`webpack-dev-middleware`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-dev-middleware`'
- en: '`webpack-hot-middleware`: This allows you to add hot reloading into an existing
    server without `webpack-dev-server`. It connects a browser client to a webpack
    server to receive updates and subscribes to changes from the server. It then executes
    those changes using webpack''s **Hot Module Replacement** (**HMR**) API.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-hot-middleware`：这允许您在不使用`webpack-dev-server`的情况下将热重载添加到现有服务器中。它将浏览器客户端连接到webpack服务器以接收更新，并订阅来自服务器的更改。然后使用webpack的**热模块替换**（**HMR**）API执行这些更改。'
- en: '`webpack-dev-middleware`: This is a webpack wrapper and serves the file that
    is emitted from webpack over a connected server. It has the following advantages
    while developing:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack-dev-middleware`：这是webpack的包装器，并在连接的服务器上提供从webpack发出的文件。在开发过程中具有以下优势：'
- en: Files are not written to disk, and are handled in memory.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件不会写入磁盘，而是在内存中处理。
- en: If files are changed in the watch mode during development, you are not served
    the old bundle, but requests are delayed until the compiling has finished. We
    don't need to do a page refresh after a file modification.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发过程中，如果在监视模式下更改了文件，则不会提供旧的包，而是在编译完成之前请求会延迟。在文件修改后，我们不需要进行页面刷新。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`webpack-dev-middlware` is only used in development. Please do not use it in
    production.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`webpack-dev-middlware`仅在开发中使用。请不要在生产中使用它。'
- en: '`style-loader`, `url-loader`, `css-loader`, and `file-loader` help to load
    static path, CSS, and files.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`style-loader`、`url-loader`、`css-loader`和`file-loader`有助于加载静态路径、CSS和文件。'
- en: 'For example: `import ''../vendor/css/bootstrap.min.css''`, which includes the
    font URL and images path.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：`import '../vendor/css/bootstrap.min.css'`，其中包括字体URL和图像路径。
- en: 'After setting up the `package.json` file, we have our HTML markup as shown
    in the following code, named `index.html`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`package.json`文件后，我们的HTML标记如下所示，命名为`index.html`：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we need to create a server in `server.js` to run our application:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在`server.js`中创建一个服务器来运行我们的应用程序：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the preceding code, we are configuring the `webpack` in our application.
    It connects to the server and receives the update notification to rebuild the
    client bundle:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们正在配置我们应用程序中的`webpack`。它连接到服务器并接收更新通知以重新构建客户端包：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, we are sending an HTML file and starting the server.
    You can change the port number as required.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们正在发送一个HTML文件并启动服务器。您可以根据需要更改端口号。
- en: Now let's take a look at `webpack.config.js`, which we just included at the
    top of our `server.js` file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下`webpack.config.js`，我们刚刚在`server.js`文件的顶部包含了它。
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding code, we are setting up the `webpack-hot-middleware` plugin
    and adding the entry point of our script to compile and run:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们正在设置`webpack-hot-middleware`插件并添加我们脚本的入口点来编译和运行：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we are loading the modules according to the matched files in our application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们根据应用程序中匹配的文件加载模块。
- en: We also need to configure Babel, which includes the ECMAScript version and `eslint`
    for adding some rules, plugin information, and so on.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要配置Babel，包括ECMAScript版本和`eslint`，以添加一些规则、插件信息等。
- en: 'The `.babelrc` file includes:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`.babelrc`文件包括：'
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `.eslintrc` file includes:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`.eslintrc`文件包括：'
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Observe the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下屏幕截图：
- en: '![Installing modules](graphics/image_09_003.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![安装模块](graphics/image_09_003.jpg)'
- en: The preceding screenshot shows our folder structure for the root directory.
    In the `src` directory, we have all the scripts and, in the vendor folder, we
    have the Bootstrap fonts and CSS.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 上述屏幕截图显示了我们的根目录的文件夹结构。在`src`目录中，我们有所有的脚本，在vendor文件夹中，我们有Bootstrap字体和CSS。
- en: Responsive Bootstrap application with React and Node
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React和Node创建响应式Bootstrap应用程序
- en: We will include and modularize our Bootstrap application that we have developed
    so far. In this application, we can see the static user profile raising helpdesk
    tickets online and rendering React components server-side. We have not used any
    database so we are storing our tickets in the browser's local storage. We can
    see the submission of the tickets in view tickets.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将包含并模块化我们迄今为止开发的Bootstrap应用程序。在这个应用程序中，我们可以看到静态用户配置文件在线提出帮助台工单，并在服务器端渲染React组件。我们没有使用任何数据库，所以我们将我们的工单存储在浏览器的本地存储中。我们可以在查看工单中看到工单的提交。
- en: For your reference, I have included the Mongodb configuration and connection
    setup with db in the code snippet that you can get along with this book. Also,
    I have included the mongoose schema for the Add Ticket Form so you can play with
    them.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 供您参考，我已经在代码片段中包含了Mongodb配置和与db的连接设置，您可以随本书一起获取。此外，我还包含了Add Ticket Form的mongoose模式，这样您就可以使用它们。
- en: First, let's open the entry point of the script file `index.js` in the `src`
    folder and `import` the React modules.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们打开`src`文件夹中脚本文件`index.js`的入口点，并`import` React模块。
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In version 15.4.0, `React` and `ReactDOM` are separated into different packages.
    `React.render()` is deprecated in favor of `ReactDOM.render()` in React 0.14,
    and the developers have also removed DOM-specific APIs from React completely in
    React 15.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本15.4.0中，`React`和`ReactDOM`被分成不同的包。在React 0.14中，`React.render()`已被弃用，推荐使用`ReactDOM.render()`，开发人员还完全从React中删除了特定于DOM的API。
- en: In React 15.4.0, they have finally moved ReactDOM implementation to the ReactDOM
    package. The React package will now contain only renderer-agnostic code such as
    `React.Component` and `React.createElement()`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在React 15.4.0中，他们最终将ReactDOM实现移动到了ReactDOM包中。React包现在将只包含与渲染器无关的代码，如`React.Component`和`React.createElement()`。
- en: 'Go to this blog to get the latest updates about React:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 访问此博客获取有关React的最新更新：
- en: '[https://facebook.github.io/react/blog/](https://facebook.github.io/react/blog/)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react/blog/](https://facebook.github.io/react/blog/)'
- en: 'Now we need to import the Bootstrap, CSS, and JS files:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要导入Bootstrap、CSS和JS文件：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now let''s start the server with the following command and see if our code
    and configuration can build or not:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们用以下命令启动服务器，看看我们的代码和配置是否能够构建：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It monitors the changes in your application files and restarts the server.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 它监视应用程序文件的更改并重新启动服务器。
- en: 'Or if we have not installed `nodemon` then the command should be:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果我们没有安装`nodemon`，那么命令应该是：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Responsive Bootstrap application with React and Node](graphics/B05743_09_03-1.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![使用React和Node创建响应式Bootstrap应用程序](graphics/B05743_09_03-1.jpg)'
- en: 'The server is started in webpack to build your code bundle to the server client
    browser. If everything goes smoothly, you can get this info when the build is
    complete:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器在webpack中启动，将您的代码捆绑到服务器客户端浏览器。如果一切顺利，当构建完成时，您可以获得以下信息：
- en: '![Responsive Bootstrap application with React and Node](graphics/image_09_005.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![使用React和Node创建响应式Bootstrap应用程序](graphics/image_09_005.jpg)'
- en: For now our page is blank. There is nothing to show because we have not included
    any component in our page yet.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们的页面是空白的。因为我们还没有在页面中包含任何组件，所以没有任何内容可显示。
- en: Let's create one component for Bootstrap navigation with the name `navbar.js`
    in the component folder.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在组件文件夹中创建一个名为`navbar.js`的Bootstrap导航组件。
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`module.exports` is a special object in Node.js and is included in every JS
    file. It exposes your functions, variables, and anything you have written inside
    `module.exports` as a module that makes your code reusable and easy to share.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`module.exports`是Node.js中的一个特殊对象，并且在每个JS文件中都包含它。它将您在`module.exports`中编写的函数、变量和任何内容公开为一个模块，使您的代码可重用且易于共享。'
- en: 'Let''s add our Bootstrap navigation component inside this with the `container`
    layout to render the page content:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在其中添加我们的Bootstrap导航组件，使用“容器”布局来呈现页面内容：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Our page navigation `container` ends here.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的页面导航“容器”到此结束。
- en: 'Here we are starting the main `container` of the page where we can render the
    page content by using `props`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们开始了页面的主要“容器”，我们可以使用“props”来渲染页面内容：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s continue to add the home page content and prepare our first layout:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加主页内容并准备我们的第一个布局：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here we are including the page title and home page content in this component:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在这个组件中包含了页面标题和主页内容：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now we need to configure the routing to render the component in the UI:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要配置路由以在UI中呈现组件：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We need to repeat the same flow with the other components and pages:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要重复与其他组件和页面相同的流程：
- en: '![Responsive Bootstrap application with React and Node](graphics/image_09_006.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![使用React和Node创建响应式Bootstrap应用程序](graphics/image_09_006.jpg)'
- en: Our page looks great; we have successfully integrated our first page with Node.js.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的页面看起来很棒；我们已成功将我们的第一个页面与Node.js集成。
- en: Let's move to our main component and add a ticket in the help desk section.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到我们的主要组件，并在帮助台部分添加一个工单。
- en: 'Create a file with the name of `addTicketForm.js` and include the following
    code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`addTicketForm.js`的文件，并包含以下代码：
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Including the `React` module is important in every file where we have React
    code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个包含React代码的文件中包含React模块是很重要的：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In the preceding code, we are controlling the `textarea` component with the
    same code we created in [Chapter 5](ch05.html "Chapter 5. jQuery Bootstrap Component
    with React"), *jQuery Bootstrap Component with React*.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们使用与我们在[第5章](ch05.html "第5章。使用React的jQuery Bootstrap组件")中创建的相同代码来控制`textarea`组件，*使用React的jQuery
    Bootstrap组件*。
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Before we were just displaying in the `AddTicket` UI after submitting the form.
    Now we are using the local storage to save the tickets.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们只是在提交表单后在`AddTicket`UI中显示。现在我们使用本地存储来保存工单。
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here you need to put in the other form elements that we added before:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您需要放入我们之前添加的其他表单元素：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next we need to create `addTicketList.js` where we are wrapping this JSX form
    into the component:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建`addTicketList.js`，在这里我们将这个JSX表单包装成组件：
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Also we need to create `listView.js` to display the list which after the user
    submits at the same time:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要创建`listView.js`来显示用户提交后的列表：
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here we have imported the `AddTicket` module that we created before and created
    another module, `addTicketForm`, to manage the form state for the update:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们导入了之前创建的`AddTicket`模块，并创建了另一个模块`addTicketForm`来管理更新的表单状态：
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the `render` method, we are passing the form and `list` items into the component:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在`render`方法中，我们将表单和“list”项传递给组件：
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the `ListPanel`, we have actual JSX code that renders the tickets to the
    UI after the user submits and creates the module that we have included in `addTicketList.js`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ListPanel`中，我们有实际的JSX代码，用于在用户提交并创建我们在`addTicketList.js`中包含的模块后将票据呈现到UI中：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Here we are rendering the `listItemElements` into the DOM:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`listItemElements`呈现到DOM中：
- en: '[PRE34]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now let''s create `ListUI.js`, the last module, which will complete the functionality
    of the form component:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建`ListUI.js`，最后一个模块，它将完成表单组件的功能：
- en: '[PRE35]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Let's see how the output in the browser looks.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看浏览器中的输出是什么样子的。
- en: 'Make sure you have included the following code in your router with the URL:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经在你的路由器中包含了以下代码：
- en: '[PRE36]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Observe the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下截图：
- en: '![Responsive Bootstrap application with React and Node](graphics/image_09_007.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![使用React和Node的响应式Bootstrap应用程序](graphics/image_09_007.jpg)'
- en: 'Looks good. Now let''s fill in this form, submit it, and view the output:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错。现在让我们填写这个表单，提交它，然后查看输出：
- en: '![Responsive Bootstrap application with React and Node](graphics/image_09_008.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![使用React和Node的响应式Bootstrap应用程序](graphics/image_09_008.jpg)'
- en: That's awesome; our form works as expected.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了；我们的表单按预期工作。
- en: 'You can also see the submit **Ticket** in the browser''s local storage with
    the  **Key** and **Value** format of the JSON notation:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在浏览器的本地存储中看到以JSON表示格式的提交**Ticket**的**Key**和**Value**：
- en: '**Developer Tools** > **Application** > **Storage** > **Local Storage**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发者工具** > **应用程序** > **存储** > **本地存储**'
- en: 'Observe the following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下截图：
- en: '![Responsive Bootstrap application with React and Node](graphics/image_09_009.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![使用React和Node的响应式Bootstrap应用程序](graphics/image_09_009.jpg)'
- en: Now we need to get this JSON **Ticket** from the local storage and display it
    to the user in the **View Tickets** section.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要从本地存储中获取这个JSON **Ticket**并在**查看票据**部分向用户显示。
- en: Let's create another module to get the tickets and render it into the Bootstrap
    responsive table. The file
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建另一个模块来获取票据并将其呈现到Bootstrap响应式表格中。文件
- en: '`allTickets.js` will look as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`allTickets.js`将如下所示：'
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the initial state of the component, we are using `localStorage.getItem`
    to get the `tickets` and parse them into the JSON to set the state:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件的初始状态中，我们使用`localStorage.getItem`来获取`tickets`并将它们解析为JSON来设置状态：
- en: '[PRE38]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Using the same approach we used in adding the ticket, we are mapping the `ticket
    key` and the value into the React component by `props`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们在添加票据时使用的相同方法，我们通过`props`将`ticket key`和值映射到React组件中：
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the `render` method, we are assigning the `state` value into the `ticket`
    variable that we are passing into the `createListElements` function:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在`render`方法中，我们将`state`的值赋给了我们传递到`createListElements`函数中的`ticket`变量：
- en: '[PRE40]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We are using the JavaScript ternary operator to check if we have any `ticket`
    or, if not, to display the message in the UI.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用JavaScript三元运算符来检查是否有任何`ticket`，如果没有，则在UI中显示消息。
- en: '[PRE41]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now we need to create the component that includes the `<td>` and inherits the
    `ticket` data. `ticketTable.js` will look as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建包含`<td>`并继承`ticket`数据的组件。`ticketTable.js`将如下所示：
- en: '[PRE42]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And also we need to import this module in the `allTickets.js` file:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在`allTickets.js`文件中导入此模块：
- en: '[PRE43]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: You may notice that I have used the `const` object rather than using `import`.
    You can also use `var` instead. `const` refers to constants; they are block-scoped,
    much like variables. The value of a constant cannot change and be reassigned,
    and it can't be redeclared.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到我使用了`const`对象，而不是使用`import`。你也可以使用`var`。`const`指的是常量；它们是块作用域的，就像变量一样。常量的值不能改变和重新赋值，也不能重新声明。
- en: 'For example:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE44]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Here is our final router config:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们最终的路由器配置：
- en: '[PRE45]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Bootstrap table
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bootstrap表格
- en: 'Let''s look at the following key points:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下要点：
- en: '**Striped rows**: Use `.table-striped` in `<table class="table table-striped">`
    for zebra stripping in table rows'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**斑马纹行**：在`<table class="table table-striped">`中使用`.table-striped`来为表格行添加斑马纹'
- en: '**Bordered table**: Add `.table-bordered` to add borders in whole and cells'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带边框的表格**：添加`.table-bordered`以在整个表格和单元格中添加边框'
- en: '**Hover rows**: Add `.table-hover` to enable a hover state on table rows'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**悬停行**：添加`.table-hover`以在表格行上启用悬停状态'
- en: '**Condensed table**: Add `.table-condensed` to reduce the cell padding'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**紧凑表格**：添加`.table-condensed`以减少单元格填充'
- en: '**Contextual classes**: Use contextual classes (`.active`, `.success`, `.info`,
    `.warning`, `.danger`) to add a background color to table rows or cells'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文类**：使用上下文类（`.active`、`.success`、`.info`、`.warning`、`.danger`）为表格行或单元格添加背景颜色'
- en: Apply these classes on the table and see how they make an impact on table's
    look and feel.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在表格上应用这些类，看看它们如何影响表格的外观和感觉。
- en: Bootstrap responsive tables
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bootstrap响应式表格
- en: When creating responsive tables, we need to wrap any `.table` in `.table-responsive`
    to make them scroll horizontally on small devices (under 768 px). When we are
    viewing them on anything larger than 768 px wide, you will not see any difference
    in these tables.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建响应式表格时，我们需要将任何`.table`包装在`.table-responsive`中，以便在小设备上（小于768像素）水平滚动。当我们在大于768像素宽的任何设备上查看它们时，你将不会看到这些表格有任何区别。
- en: Let's submit the ticket again and take a quick look at the table.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次提交票证并快速查看表格。
- en: Go to the helpdesk drop-down in the navigation and click on view tickets.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 转到导航中的帮助台下拉菜单，点击查看票证。
- en: '![Bootstrap responsive tables](graphics/image_09_010.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap响应式表格](graphics/image_09_010.jpg)'
- en: You will get the appropriate message (**You have not raised any ticket yet.**)
    in the UI if you have not raised any ticket yet.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有提出任何票证，你将在UI中收到适当的消息（**你还没有提出任何票证。**）。
- en: 'OK, so let''s submit the fresh ticket and open this page again. Once the ticket
    is added, it will be displayed in your table:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们提交新的票证并再次打开这个页面。一旦票证被添加，它将显示在你的表格中：
- en: '![Bootstrap responsive tables](graphics/image_09_012.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap响应式表格](graphics/image_09_012.jpg)'
- en: We can see the ticket that we have submitted in the table now.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在表格中看到我们提交的票证。
- en: React developer tools
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React开发者工具
- en: React provides the tools for developers to debug React code. It allows us to
    inspect a React-rendered component with the component hierarchy, props, and state.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: React为开发者提供了调试React代码的工具。它允许我们检查一个由React渲染的组件，包括组件层次结构、props和状态。
- en: Installation
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: There are two official extensions that are available for the Chrome and Firefox
    browsers.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个官方扩展可用于Chrome和Firefox浏览器。
- en: 'Download the extension for Chrome:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为Chrome下载扩展：
- en: '[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)'
- en: 'And Firefox:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 和Firefox：
- en: '[https://addons.mozilla.org/en-US/firefox/addon/react-devtools/](https://addons.mozilla.org/en-US/firefox/addon/react-devtools/)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://addons.mozilla.org/en-US/firefox/addon/react-devtools/](https://addons.mozilla.org/en-US/firefox/addon/react-devtools/)'
- en: Note
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A standalone app is still under development and will be available soon.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一个独立的应用程序仍在开发中，很快将可用。
- en: How to use
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用
- en: 'Once you download or install the extension in your browser, open the **Developer
    Tools** on a React page. You should see one extra tab called **React**:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在浏览器中下载或安装了扩展，打开React页面上的**开发者工具**。你应该会看到一个名为**React**的额外选项卡：
- en: '![How to use](graphics/image_09_013.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用](graphics/image_09_013.jpg)'
- en: In the side panel, you can see the **State** and **Props** for every React component.
    If you expand the **State** of the component, you will see the full hierarchy
    of the component with the name of the component you are using in the React app.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在侧面板中，您可以看到每个React组件的**State**和**Props**。如果展开组件的**State**，您将看到组件的完整层次结构，其中包括您在React应用程序中使用的组件的名称。
- en: 'See the following screenshot:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下屏幕截图：
- en: '![How to use](graphics/image_09_014.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用](graphics/image_09_014.jpg)'
- en: Right-click on the side panel and we can inspect and edit its current props
    and state in the panel on the right.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击侧面板，我们可以检查和编辑右侧面板中当前props和state。
- en: 'We can also view the code execution function by clicking **Execute function**:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过单击**执行函数**来查看代码执行函数：
- en: '![How to use](graphics/image_09_015.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用](graphics/image_09_015.jpg)'
- en: 'If you inspect the `allTicket` component with the React tool, you can see the
    data flow with `props` into the child elements:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用React工具检查`allTicket`组件，您可以看到`props`流入子元素的数据流：
- en: '![How to use](graphics/image_09_016.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用](graphics/image_09_016.jpg)'
- en: If you are inspect a React element on the page in the **Elements** tab, and
    then switch over to the **React** tab, that element will be automatically selected
    in the React tree. Using the search tab, we can also search for the component
    by name.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在**元素**选项卡上检查页面中的React元素，然后切换到**React**选项卡，该元素将自动在React树中被选中。使用搜索选项卡，我们也可以按名称搜索组件。
- en: If you also need to trace updates for the component, you need to select the
    top checkbox, **Trace React Updates**.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还需要跟踪组件的更新，您需要选择顶部复选框**跟踪React更新**。
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about how to transform our React standalone application
    into Node.js npm packages and modularize React components. We began by installing
    Node.js and setting up the React environment. We then looked at how we can import
    and export modules by using `module.export`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何将我们的React独立应用程序转换为Node.js npm包，并将React组件模块化。我们首先安装了Node.js并设置了React环境。然后，我们看了如何使用`module.export`导入和导出模块。
- en: We have also learnt how we can create and import the multiple modules in one
    file, such as `react-router`, `{ Router, Route, IndexRoute,IndexLink, Link, browserHistory
    } = ReactRouter`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何在一个文件中创建和导入多个模块，例如`react-router`，`{ Router, Route, IndexRoute,IndexLink,
    Link, browserHistory } = ReactRouter`。
- en: We have also looked at that how we can store and read data from local storage.
    Using a Bootstrap table, we displayed that data into the table grid. We have also
    gone through the Bootstrap table, styling classes that make your table responsive
    as well as look and feel better.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看了如何从本地存储中存储和读取数据。使用Bootstrap表格，我们将数据显示在表格网格中。我们还学习了Bootstrap表格，样式类可以使您的表格响应，并且看起来更好。
