- en: Chapter 2. Lets Build a Responsive Theme with React-Bootstrap and React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。使用React-Bootstrap和React构建响应式主题
- en: Now, that you've completed your first web app using ReactJS and Bootstrap, we're
    going to build the first responsive theme for your app using both the frameworks.
    We'll also be touching on the full potential of both frameworks. So, let's start!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经使用ReactJS和Bootstrap完成了您的第一个Web应用程序，我们将使用这两个框架构建您的应用程序的第一个响应式主题。我们还将涉及到两个框架的全部潜力。所以，让我们开始吧！
- en: Setting up
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: Firstly, we need to create a similar folder structure to our Hello World app
    which we made in [Chapter 1](ch01.html "Chapter 1. Getting Started with React
    and Bootstrap"), *Getting Started with React and Bootstrap*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为我们在[第1章](ch01.html“第1章。使用React和Bootstrap入门”)中制作的Hello World应用创建一个类似的文件夹结构，*使用React和Bootstrap入门*。
- en: 'The following screenshot describes the folder structure:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图描述了文件夹结构：
- en: '![Setting up](graphics/image_02_001.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![设置](graphics/image_02_001.jpg)'
- en: Now you need to copy the ReactJS and Bootstrap files from `chapter1` into the
    significant directories of `Chapter2` and create an `index.html` file in the root.
    The following code snippet is just a base HTML page which includes Bootstrap and
    React.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您需要将ReactJS和Bootstrap文件从“第1章”复制到“第2章”的重要目录中，并在根目录中创建一个“index.html”文件。以下代码片段只是一个包含Bootstrap和React的基本HTML页面。
- en: 'Here is the markup of our HTML page:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们HTML页面的标记：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Scaffolding
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚手架
- en: So now we have the base file and the folder structure sorted. The next step
    is to start scaffolding our app using the Bootstrap CSS.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们有了基本文件和文件夹结构。下一步是使用Bootstrap CSS开始搭建我们的应用程序。
- en: 'I''m sure you have a question: what is scaffolding? Simply, it gives a support
    structure to make your base concrete.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你有一个问题：什么是脚手架？简单地说，它提供了一个支撑结构，使您的基础更加牢固。
- en: Apart from this, we will use React-Bootstrap JS in which we have a collection
    of Bootstrap components rebuilt for React. We can use these throughout our **Employee
    Information System** (**EIS**). Bootstrap also includes an extremely powerful
    responsive grid system which helps us to create a responsive theme layout/template/structure
    for the app.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们还将使用React-Bootstrap JS，其中包含了为React重新构建的Bootstrap组件集。我们可以在我们的**员工信息系统**（**EIS**）中使用这些组件。Bootstrap还包括一个非常强大的响应式网格系统，帮助我们为应用程序创建响应式主题布局/模板/结构。
- en: Navigation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航
- en: Navigation is a very important element of any static or dynamic page. So now
    we are going to build a navbar (for navigation) to switch between our pages. It
    could be placed at the top of our page.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 导航是任何静态或动态页面的非常重要的元素。所以现在我们将构建一个导航栏（用于导航）来在我们的页面之间切换。它可以放在我们页面的顶部。
- en: 'Here is the basic HTML structure of Bootstrap navigation:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Bootstrap导航的基本HTML结构：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `<nav>` tag that used to hold everything within the `navbar`, is instead
    split into two sections: `navbar-header` and `navbar-collapse`, if you see the
    navigation structure . Navbars are responsive components so the `navbar-header`
    element is exclusively for mobile navigation and controls the expansion and collapse
    of the navigation with the `toggle` button. The `data-target` attribute on the
    button directly corresponds with the `id` attribute of the `navbar-collapse` element
    so Bootstrap knows what element should be wrapped in mobile devices to control
    the toggling.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 用于容纳“导航栏”内的所有内容的`<nav>`标签，而不是分成两个部分：`navbar-header`和`navbar-collapse`，如果您查看导航结构。导航栏是响应式组件，因此`navbar-header`元素专门用于移动导航，并控制导航的展开和折叠，使用`toggle`按钮。按钮上的`data-target`属性直接对应于`navbar-collapse`元素的`id`属性，因此Bootstrap知道应该在移动设备中包装哪个元素以控制切换。
- en: Now we also need to include jQuery in your page because Bootstrap's JS has a
    dependency on it. You can get the latest jQuery version from [http://jquery.com/](http://jquery.com/).
    Now you need to copy `bootstrap.min.js` from the Bootstrap extracted folder and
    add this to your app `js` directory, as well as include it on your page before
    `bootstrap.min.js`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们还需要在页面中包含jQuery，因为Bootstrap的JS依赖于它。您可以从[http://jquery.com/](http://jquery.com/)获取最新的jQuery版本。现在您需要从Bootstrap提取的文件夹中复制`bootstrap.min.js`，并将其添加到您的应用程序的`js`目录中，然后在`bootstrap.min.js`之前在页面中包含它。
- en: 'Please make sure that your JavaScript files are included in the following order:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保您的JavaScript文件按以下顺序包含：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s take a quick look at the `navbar` component code after integrating in
    React:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在集成React后，让我们快速查看`navbar`组件代码：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open the `index.html` file in your browser to see the `navbar` component. The
    following screenshot shows what our navigation will look like:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开`index.html`文件以查看`navbar`组件。以下截图显示了我们的导航的外观：
- en: '![Navigation](graphics/image_02_002.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![导航](graphics/image_02_002.jpg)'
- en: We have included navigation directly within our `<body>` tag to cover the full
    width of the browser. Now we will do the same thing by using the React-Bootstrap
    JS framework to understand the difference between Bootstrap JS and React-Bootstrap
    JS.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们直接在`<body>`标签中包含了导航，以覆盖浏览器的整个宽度。现在我们将使用React-Bootstrap JS框架来做同样的事情，以了解Bootstrap
    JS和React-Bootstrap JS之间的区别。
- en: React-Bootstrap
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React-Bootstrap
- en: The React-Bootstrap JavaScript framework is similar to Bootstrap rebuilt for
    React. It's a complete reimplementation of the Bootstrap frontend reusable components
    in React. React-Bootstrap has no dependency on any other framework, such as Bootstrap
    JS or jQuery. It means that, if you are using React-Bootstrap, then you don't
    need to include jQuery in your project as a dependency. Using React-Bootstrap,
    we can be sure that there won't be external JavaScript calls to render the component
    which might be incompatible with the `ReactDOM.render`. However, you can still
    achieve the same functionality, look, and feel as Twitter Bootstrap, but with
    much cleaner code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: React-Bootstrap JavaScript框架类似于为React重建的Bootstrap。它是Bootstrap前端可重用组件在React中的完全重新实现。React-Bootstrap不依赖于任何其他框架，如Bootstrap
    JS或jQuery。这意味着，如果您使用React-Bootstrap，则不需要将jQuery作为依赖项包含在项目中。使用React-Bootstrap，我们可以确保不会有外部JavaScript调用来渲染组件，这可能与`ReactDOM.render`不兼容。但是，您仍然可以实现与Twitter
    Bootstrap相同的功能、外观和感觉，但代码更清晰。
- en: Installing React-Bootstrap
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装React-Bootstrap
- en: 'To get this React-Bootstrap, we can either use the CDN directly or from the
    following URL: [https://cdnjs.cloudflare.com/ajax/libs/react-bootstrap/0.29.5/react-bootstrap.min.js](https://cdnjs.cloudflare.com/ajax/libs/react-bootstrap/0.29.5/react-bootstrap.min.js)
    . Open this URL and save it in your local directory for fast performance. When
    you download the file, please make sure to download the source-map (`react-bootstrap.min.js.map`)
    file along with it to make debugging much easier. Once you are done with the download,
    add that library in your app''s `js` directory and include it in your page''s
    `head` section as shown in the following code snippet. Your `head` section will
    look as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取这个React-Bootstrap，我们可以直接使用CDN，或者从以下URL获取：[https://cdnjs.cloudflare.com/ajax/libs/react-bootstrap/0.29.5/react-bootstrap.min.js](https://cdnjs.cloudflare.com/ajax/libs/react-bootstrap/0.29.5/react-bootstrap.min.js)。打开此URL并将其保存在本地目录以获得更快的性能。下载文件时，请确保同时下载源映射（`react-bootstrap.min.js.map`）文件，以便更轻松地进行调试。下载完成后，将该库添加到应用程序的`js`目录中，并在页面的`head`部分包含它，如下面的代码片段所示。您的`head`部分将如下所示：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using React-Bootstrap
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用React-Bootstrap
- en: Now, you may be wondering that since we have the Bootstrap file already and
    we are also adding the React-Bootstrap JS file, won't they conflict with each
    other? No, they will not. React-Bootstrap is compatible with the existing Bootstrap
    styles so we don't need to worry about any conflicts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会想，既然我们已经有了Bootstrap文件，还添加了React-Bootstrap JS文件，它们不会冲突吗？不，它们不会。React-Bootstrap与现有的Bootstrap样式兼容，所以我们不需要担心任何冲突。
- en: Now we are going to create the same `Navbar` component in React-Bootstrap.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要在React-Bootstrap中创建相同的`Navbar`组件。
- en: 'Here, is the structure of the `Navbar` component in React-Bootstrap:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是React-Bootstrap中`Navbar`组件的结构：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here is the highlight of the preceding code (with the order changed from below
    the benefits section above it).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述代码的亮点（顺序已从好处部分下移至上方）。
- en: 'The `<Navbar>` tag is a container of the component and it splits into two sections:
    `<Navbar.Header>` and `<Nav>`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Navbar>`标签是组件的容器，分为两个部分：`<Navbar.Header>`和`<Nav>`。'
- en: For responsive behavior, we have added the `<Navbar.Toggle/>` tag, that controls
    expand and collapse, and wrapped the `<Nav>` into the `<Navbar.Collapse>` to show
    and hide the nav items.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了响应式行为，我们添加了`<Navbar.Toggle/>`标签，用于控制展开和折叠，并将`<Nav>`包装到`<Navbar.Collapse>`中以显示和隐藏导航项。
- en: 'For capturing the event, we have used `eventKey={1}`; when we select any menu
    item, a callback is fired which takes two arguments, (`eventKey: any`, `event:
    object`) => `any`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '为了捕获事件，我们使用了`eventKey={1}`；当我们选择任何菜单项时，会触发一个回调，它接受两个参数，(`eventKey: any`, `event:
    object`) => `any`'
- en: Benefits of React-Bootstrap
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React-Bootstrap的好处
- en: Let's check out the benefits of using React-Bootstrap.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看使用React-Bootstrap的好处。
- en: As you can see in the preceding code, it looks cleaner than the Twitter Bootstrap
    component because we can import the individual component from React-Bootstrap
    rather than including the entire library.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前述代码中所看到的，它看起来比Twitter Bootstrap组件更清晰，因为我们可以从React-Bootstrap中导入单个组件，而不是包含整个库。
- en: 'For example, if I want to build a `navbar` with a Twitter Bootstrap then the
    code structure is:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我想用Twitter Bootstrap构建一个`navbar`，那么代码结构是：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now it's easy for you to compare the code and I'm sure, you will also agree
    to use React-Bootstrap as it's very component specific, whereas in Twitter Bootstrap
    we need to maintain multiple elements with the correct order to get similar results.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以轻松比较代码，我相信你也会同意使用React-Bootstrap，因为它非常具体化，而在Twitter Bootstrap中，我们需要维护多个元素的正确顺序才能获得类似的结果。
- en: 'By doing this, React-Bootstrap pulls only specific components that we want
    to include and helps to reduce your app bundle size significantly. React-Bootstrap
    provides certain benefits as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，React-Bootstrap只提取我们想要包含的特定组件，并帮助显著减少应用程序包大小。React-Bootstrap提供以下一些好处：
- en: React-Bootstrap saves a bit of typing and reduces bugs by compressing the Bootstrap
    code
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React-Bootstrap通过压缩Bootstrap代码节省了一些输入并减少了错误
- en: It reduces conflicts by compressing the Bootstrap code
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过压缩Bootstrap代码减少了冲突
- en: We don't need to think about the different approaches taken by Bootstrap versus
    React
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要考虑Bootstrap与React采用的不同方法
- en: It is easy to use
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它很容易使用
- en: It encapsulates in elements
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它封装在元素中
- en: It uses JSX syntax
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用JSX语法
- en: It avoids React rendering of the virtual DOM
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它避免了React渲染虚拟DOM
- en: It is easy to detect DOM changes and update the DOM without any conflict
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很容易检测DOM的变化并更新DOM而不会发生冲突
- en: It doesn't have any dependency on other libraries, such as jQuery
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不依赖于其他库，比如jQuery
- en: 'Here, is the full code view of our `Navbar` component:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们`Navbar`组件的完整代码视图：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Woohoo! Let''s take a look at our first React-Bootstrap component in the browser.
    The following screenshot shows what the component will look like:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 哇哦！让我们在浏览器中看看我们的第一个React-Bootstrap组件。以下截图显示了组件的外观：
- en: '![Benefits of React-Bootstrap](graphics/image_02_003.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![React-Bootstrap的好处](graphics/image_02_003.jpg)'
- en: Now to check the `Navbar`, If you resize your browser window, you'll notice
    that Bootstrap displays the mobile header with the toggle button below 768 px
    screen size of the tablet in portrait mode. However, if you click the button to
    toggle the navigation, you can see the navigation for the mobile.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来检查`Navbar`，如果你调整浏览器窗口大小，你会注意到Bootstrap在768像素以下的平板电脑纵向模式下显示移动头部和切换按钮。然而，如果你点击按钮切换导航，你会看到移动端的导航。
- en: 'The following screenshot shows what the mobile navigation will look like:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了移动导航的外观：
- en: '![Benefits of React-Bootstrap](graphics/image_02_004.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![React-Bootstrap的好处](graphics/image_02_004.jpg)'
- en: So now we have a major understanding of React-Bootstrap and Bootstrap. React-Bootstrap
    has active development efforts in place in to keep it updated.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对React-Bootstrap和Bootstrap有了主要的了解。React-Bootstrap正在进行积极的开发工作，以保持更新。
- en: Bootstrap grid system
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap网格系统
- en: 'Bootstrap is based on a 12-column grid system which includes a powerful responsive
    structure and a mobile-first fluid grid system that allows us to scaffold our
    web app with very few elements. In Bootstrap, we have a predefined series of classes
    to compose rows and columns, so before we start, we need to include the `<div>`
    tag with the `container` class to wrap our rows and columns. Otherwise, the framework
    won''t respond as expected because Bootstrap has written CSS which is dependent
    on it and we need to add it below our `navbar`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap基于一个12列网格系统，包括强大的响应式结构和移动优先的流体网格系统，允许我们用很少的元素来搭建我们的Web应用。在Bootstrap中，我们有一系列预定义的类来组成行和列，所以在开始之前，我们需要在我们的行和列周围包含带有`container`类的`<div>`标签。否则，框架不会如预期般响应，因为Bootstrap编写了依赖于它的CSS，我们需要在我们的`navbar`下面添加它：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will make your web app the center of the page as well as control the rows
    and columns to work as expected in response.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使您的Web应用程序成为页面的中心，并控制行和列以响应预期地工作。
- en: 'There are four class prefixes which help to define the behavior of the columns.
    All the classes are related to different device screen sizes and react in familiar
    ways. The following table from [http://getbootstrap.com/](http://getbootstrap.com/)
    defines the variations between all four classes:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个类前缀，帮助定义列的行为。所有类都与不同的设备屏幕大小相关，并以熟悉的方式响应。来自[http://getbootstrap.com/](http://getbootstrap.com/)的以下表格定义了所有四个类之间的差异：
- en: '|   | **Extra small devices****Phones (<768px)** | **Small devices****Tablets
    (≥768px)** | **Medium devices****Desktops (≥992px)** | **Large devices****Desktops
    (≥1200px)** |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '|   | **额外小设备****手机（<768px）** | **小设备****平板电脑（≥768px）** | **中等设备****台式电脑（≥992px）**
    | **大型设备****台式电脑（≥1200px）** |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| **Grid behavior** | **Horizontal at all times** | **Collapsed to start, horizontal
    above breakpoints** |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| **网格行为** | **始终水平** | **在断点以上折叠，水平** |'
- en: '| **Container width** | None (auto) | 750px | 970px | 1170px |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| **容器宽度** | 无（自动） | 750px | 970px | 1170px |'
- en: '| **Class prefix** | .col-xs- | .col-sm- | .col-md- | .col-lg- |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **类前缀** | .col-xs- | .col-sm- | .col-md- | .col-lg- |'
- en: '| **# of columns** | 12 |   |   |   |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **列数** | 12 |   |   |   |'
- en: '| **Column width** | Auto | ~62px | ~81px | ~97px |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| **列宽** | 自动 | ~62px | ~81px | ~97px |'
- en: '| **Gutter width** | 30px (15px on each side of a column) |   |   |   |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| **间距宽度** | 30px（每列两侧各15px） |   |   |   |'
- en: '| **Nestable** | Yes |   |   |   |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **可嵌套** | 是 |   |   |   |'
- en: '| **Offsets** | Yes |   |   |   |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| **偏移** | 是 |   |   |   |'
- en: '| **Column ordering** | Yes |   |   |   |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| **列排序** | 是 |   |   |   |'
- en: In our application, we need to create a two column layout for the main content
    area and sidebar. As we know, Bootstrap has a 12 column grid layout so divide
    your content in a way which covers the whole area.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们需要为主要内容区域和侧边栏创建一个两列布局。正如我们所知，Bootstrap有一个12列网格布局，所以以一种覆盖整个区域的方式划分您的内容。
- en: Tip
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Please understand, Bootstrap divides the 12 column grid by using `col-*-1` to
    `col-*-12` classes.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请理解，Bootstrap使用`col-*-1`到`col-*-12`类来划分12列网格。
- en: 'We''ll divide the 12 columns into two parts: one is nine columns for the main
    content and the other is three columns for the sidebar. Sounds perfect. So, here''s
    how we implement that.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把12列分为两部分：一部分是主要内容的九列，另一部分是侧边栏的三列。听起来很完美。所以，这是我们如何实现的。
- en: First we need to include the `<div>` tag inside our `container` and add the
    `class` as `"row"`. We can have as many `div` tags with the `row` class as per
    the design needs, which can each house upto 12 columns.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在我们的`container`内包含`<div>`标签，并添加`class`为`"row"`。根据设计需求，我们可以有多个带有`row`类的`div`标签，每个标签最多可以容纳12列。
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As we all know, if we want our columns to stack on mobile devices, we should
    use `col-sm-` prefixes. Creating a column is as simple as taking the desired prefix
    and appending the number of columns you wish to add to it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，如果我们希望我们的列在移动设备上堆叠，我们应该使用`col-sm-`前缀。创建列就像简单地取所需的前缀并将要添加的列数附加到它一样简单。
- en: 'Let''s take a quick look at how we can create a two column layout:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下我们如何创建一个两列布局：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we want our columns to stack not only for smaller devices, use the extra
    small and medium grid classes by adding `col-md-*` and `col-xs-*` to your columns:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望我们的列不仅在较小的设备上堆叠，还可以通过向列添加`col-md-*`和`col-xs-*`来使用额外的小和中等网格类：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In mobile view, this column will be full width and in tablet view, it will be
    four medium grid width.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在手机视图中，这一列将是全宽，在平板视图中，它将是四个中等网格宽度。
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'So when it displays on a larger screen than a mobile device, Bootstrap will
    automatically add 30 px gutter spacing (the space between two elements) between
    each column (15 px on either side). If we want to add additional spaces between
    the columns, Bootstrap will provide a way to do this by just adding the additional
    class to the column:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当它在比移动设备更大的屏幕上显示时，Bootstrap将自动在每列之间添加30像素的间距（两个元素之间的空间为15像素）。如果我们想在列之间添加额外的空间，Bootstrap将提供一种方法，只需将额外的类添加到列中即可：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Columns in a mobile are one full width and the other half width with more space
    from the left:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 手机上的列是一个全宽和另一个半宽，离左边更远：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: So this time we have used the `offset` keyword. The number at the end of that
    class name is to control the number of columns you want to offset.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们使用了`offset`关键字。该类名末尾的数字用于控制要偏移的列数。
- en: Tip
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `offset` column count is equal to the total number of `12` columns in the
    row.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`offset`列数等于行中的总列数`12`。'
- en: 'Now, let''s create some complex layout with nested additional rows and columns:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一些复杂的布局，嵌套额外的行和列：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you open it up in your browser, you will see that this will create two columns
    within our main content container, `col-sm-9`, which we created earlier. However,
    as our grid is nested, we can create a new row and have a single column or two
    columns, whatever your layout requires. I have added some dummy text to demonstrate
    the nested columns.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中打开它，您将看到这将在我们之前创建的主要内容容器`col-sm-9`中创建两列。然而，由于我们的网格是嵌套的，我们可以创建一个新行，并拥有一个单列或两列，无论您的布局需要什么。我已经添加了一些虚拟文本来演示嵌套列。
- en: Bootstrap will also provide the option to change the ordering of the columns
    in the grid system by using the `col-md-push-*` and `col-md-pull-*` classes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap还将通过使用`col-md-push-*`和`col-md-pull-*`类在网格系统中提供更改列的顺序的选项。
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Observe the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下屏幕截图：
- en: '![Bootstrap grid system](graphics/image_02_005.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap网格系统](graphics/image_02_005.jpg)'
- en: Bootstrap also includes some predefined classes to enable elements to be shown
    or hidden at specific screen sizes. The classes use the same predefined sizes
    as Bootstrap's grid.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap还包括一些预定义的类，以便在特定屏幕尺寸下显示或隐藏元素。这些类使用与Bootstrap网格相同的预定义尺寸。
- en: 'For example, the following will hide an element at a specific screen size:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码将在特定屏幕尺寸下隐藏一个元素：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will hide the element on medium devices but it will still be visible on
    mobiles, tablets, and large desktops. To hide an element on multiple devices,
    we need to use multiple classes:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在中等设备上隐藏元素，但在手机、平板电脑和大型台式机上仍然可见。要在多个设备上隐藏元素，我们需要使用多个类：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Likewise, the same with the visible classes, which work in reverse, showing
    elements at specific sizes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，与可见类一样，它们可以反向工作，在特定尺寸下显示元素。
- en: 'However, unlike the hidden classes, they also require us to set the display
    value. This can be `block`, `inline`, or `inline-block`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，与隐藏类不同，它们还要求我们设置显示值。这可以是`block`，`inline`或`inline-block`：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Of course, we can use various classes in one element. If, for example, we wanted
    a `block` level element on a smaller screen, but have it become an `inline-block`
    later, we would use the following code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以在一个元素中使用各种类。例如，如果我们想在较小的屏幕上使用`block`级元素，但稍后将其变为`inline-block`，我们将使用以下代码：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you can't remember the various class sizes, be sure to take another look
    at the *Getting to Bootstrap's grid* section to learn the screen sizes.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您记不住各种类的大小，请务必再次查看*了解Bootstrap网格*部分，以了解屏幕尺寸。
- en: Helper classes
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 辅助类
- en: Bootstrap also includes a few helper classes that we can use to adapt our layout.
    Let's take a look at some examples.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap还包括一些辅助类，我们可以用来调整布局。让我们看一些例子。
- en: Floats
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浮动
- en: 'Floating classes of Bootstrap will help you to create a decent layout on the
    web. Here are two Bootstrap classes to pull your elements left and right:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap的浮动类将帮助您在Web上创建一个体面的布局。以下是两个Bootstrap类，用于将您的元素向左和向右拉：
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When we are using floats on elements, we need to wrap our floated elements
    in a `clearfix` class. This will clear the elements and you will be able to see
    the actual height of the container element:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在元素上使用浮动时，我们需要在我们的浮动元素中包装一个`clearfix`类。这将清除元素，您将能够看到容器元素的实际高度：
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If the `float` classes are directly within an element with the `row` class,
    then our floats are cleared automatically by Bootstrap and the `clearfix` class
    does not need to be applied manually.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`float`类直接位于具有`row`类的元素内部，则我们的浮动将被Bootstrap自动清除，无需手动应用`clearfix`类。
- en: Center elements
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中心元素
- en: 'To make it center block-level elements, Bootstrap allows this with the `center-block`
    class:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要使其居中`block-level`元素，Bootstrap允许使用`center-block`类：
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will set your element property `margin-left` and `margin-right` properties
    to `auto`, which will center the element.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这将将您的元素属性`margin-left`和`margin-right`属性设置为`auto`，这将使元素居中。
- en: Show and hide
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示和隐藏
- en: 'You may wish to show and hide elements with CSS, and Bootstrap gives you a
    couple of classes to do this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望使用CSS显示和隐藏元素，Bootstrap为此提供了一些类：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `show` class sets the `display` property to `block`, so only apply this
    to `block-level` elements and not to elements you wish to be displayed `inline`
    or `inline-block`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`show`类将`display`属性设置为`block`，因此只将其应用于`block-level`元素，而不是希望以`inline`或`inline-block`显示的元素。'
- en: React components
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React组件
- en: React is based on a modular build, with encapsulated components that manage
    their own state so it will efficiently update and render your components when
    data changes. In React, a component's logic is written in JavaScript instead of
    templates so you can easily pass rich data through your app and manage the state
    out of the DOM.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: React基于模块化构建，具有封装的组件，这些组件管理自己的状态，因此当数据发生变化时，它将有效地更新和渲染您的组件。在React中，组件的逻辑是用JavaScript编写的，而不是模板，因此您可以轻松地通过应用程序传递丰富的数据并管理DOM之外的状态。
- en: Using the `render()` method, we are rendering a component in React that takes
    input data and returns what you want to display. It can either take HTML tags
    (strings) or React components (classes).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`render()`方法，我们正在在React中呈现一个组件，该组件接受输入数据并返回您想要显示的内容。它可以接受HTML标签（字符串）或React组件（类）。
- en: 'Let''s take a quick look at examples of both:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下两者的示例：
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In this example, we are passing HTML as a string into the `render` method which
    we have used before creating the `<Navbar>`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将HTML作为字符串传递给`render`方法，之前我们已经在创建`<Navbar>`之前使用过它：
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the preceding example, we are rendering the component, just to create a local
    variable that starts with an uppercase convention. Using the upper versus lowercase
    convention in React's JSX will distinguish between local component classes and
    HTML tags.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们正在渲染组件，只是为了创建一个以大写约定开头的局部变量。在React的JSX中使用大写与小写的约定将区分本地组件类和HTML标签。
- en: 'So, we can create our React elements or components in two ways: either we can
    use Plain JavaScript with `React.createElement` or React''s JSX.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以以两种方式创建React元素或组件：一种是使用`React.createElement`的纯JavaScript，另一种是使用React的JSX。
- en: So, let's create our sidebar elements for the app to better understand the `React.createElement`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们为应用程序创建侧边栏元素，以更好地理解`React.createElement`。
- en: React.createElement()
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React.createElement()
- en: 'Using JSX in React is completely optional for creating the React app. As we
    know, we can create elements with `React.createElement` which take three arguments:
    a tag name or component, a properties object, and a variable number of child elements,
    which is optional. Observe the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中使用JSX完全是可选的。正如我们所知，我们可以使用`React.createElement`创建元素，它接受三个参数：标签名或组件、属性对象和可变数量的子元素（可选）。观察以下代码：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding example, we have used `React.createElement` to generate a `ul`-`li`
    structure. React already has built-in factories for common DOM HTML tags.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们使用`React.createElement`生成了一个`ul`-`li`结构。React已经为常见的DOM HTML标签内置了工厂。
- en: 'Here is an example for this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '[PRE28]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s take a quick look at our code in a browser, which should resemble the
    following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速在浏览器中查看我们的代码，它应该类似于以下截图：
- en: '![React.createElement()](graphics/image_02_006.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![React.createElement()](graphics/image_02_006.jpg)'
- en: 'Here is our full code so far that we have written to include the `<Navbar>`
    component:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这是我们编写的包含`<Navbar>`组件的全部代码：
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Our app code looks very messy. Now it's time to make our code clean and properly
    structured.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序代码看起来非常混乱。现在是时候让我们的代码变得整洁和结构良好。
- en: Copy the `navbar` code in another file and save it as `navbar.js`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将`navbar`代码复制到另一个文件中，并将其保存为`navbar.js`。
- en: Now copy the `sidebar` code in another file and save as `sidebar.js`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将`sidebar`代码复制到另一个文件中，并保存为`sidebar.js`。
- en: Create one folder in your root directory with the name of the components and
    copy both `navbar.js` and `sidebar.js` inside it.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在根目录中创建一个名为components的文件夹，并将`navbar.js`和`sidebar.js`都复制到其中。
- en: Include both the `js` file in your `head` section.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在`head`部分包含两个`js`文件。
- en: 'The `head` section will look like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`head`部分将如下所示：'
- en: '[PRE30]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And here is your HTML code:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您的HTML代码：
- en: '[PRE31]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now our code looks much cleaner. Let''s take a quick look at your code output
    in a browser:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的代码看起来更加清晰。让我们快速查看一下您在浏览器中的代码输出：
- en: '![React.createElement()](graphics/image_02_007.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![React.createElement()](graphics/image_02_007.jpg)'
- en: Tip
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When we are referring to the ReactJS file from an external source, we need a
    web server or full stack app such as WAMP or XAMPP because some browsers (for
    example, Chrome) will fail to load the file unless it's served via HTTP.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从外部来源引用ReactJS文件时，我们需要一个Web服务器或者像WAMP或XAMPP这样的全栈应用，因为一些浏览器（例如Chrome）在不通过HTTP提供文件的情况下会加载失败。
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have developed considerable basic knowledge of Bootstrap and React-Bootstrap
    from this chapter, so let's quickly revise what we have learnt so far.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从本章节中积累了相当多关于Bootstrap和React-Bootstrap的基础知识，所以让我们快速复习一下我们到目前为止学到的东西。
- en: While going through the definition and use of Bootstrap and React-Bootstrap
    we saw that React-Bootstrap is a very strong candidate with more flexibility and
    a smarter solution.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解Bootstrap和React-Bootstrap的定义和用法时，我们发现React-Bootstrap是一个非常有潜力、更灵活、更智能的解决方案。
- en: We have seen how we can create mobile navigation by just using a few features
    of Bootstrap and React-Bootstrap, which work well on all expected devices as well
    as on desktop browsers.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何通过使用Bootstrap和React-Bootstrap的一些特性来创建移动导航，这些特性在所有预期的设备上以及桌面浏览器上都能很好地工作。
- en: We also looked at the powerful responsive grid system including Bootstrap and
    created a simple two-column layout. While we were doing this, we learnt about
    the four different column class prefixes as well as nesting our grid.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还研究了包括Bootstrap在内的强大响应式网格系统，并创建了一个简单的两列布局。在做这些的时候，我们学到了四种不同的列类前缀，以及如何嵌套我们的网格。
- en: We have also seen some very good features of Bootstrap such as `offset`, `col-md-push-*`,
    `col-md-pull-*`, `hidden-md`, `hidden-lg`, `visible-sm-block`, `visible-md-inline-block`,
    and `helper-classes`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了Bootstrap的一些非常好的特性，比如`offset`，`col-md-push-*`，`col-md-pull-*`，`hidden-md`，`hidden-lg`，`visible-sm-block`，`visible-md-inline-block`和`helper-classes`。
- en: We hope you are also ready with your responsive layout and navigation. So now
    let's jump on to the next chapter.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望你也已经准备好了响应式布局和导航。现在让我们跳到下一章。
