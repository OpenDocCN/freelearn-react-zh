["```jsx\nvar action = { \n    type: 'ADD_USER', \n    user: {name: 'Dan'} \n}; \n// Assuming a store object has been created already \nstore.dispatch(action); \n\n```", "```jsx\nJavscript: \n// Reducer Function \nvarsomeReducer = function(state, action) { \n    ... \n    return state; \n} \n\n```", "```jsx\n**node --version**\n```", "```jsx\n**Npm init**\n```", "```jsx\n{ \n  \"name\": \"react-redux add ticket form example\", \n  \"version\": \"1.0.0\", \n  \"description\": \"\", \n  \"scripts\": { \n    \"start\": \"node server.js\", \n    \"lint\": \"eslintsrc\" \n  }, \n  \"keywords\": [ \n    \"react\", \n   \"redux\", \n   \"redux form\", \n    \"reactjs\", \n    \"hot\", \n    \"reload\", \n    \"live\", \n    \"webpack\" \n  ], \n  \"author\": \"Harmeet Singh <harmeet.singh090@gmail.com>\", \n  \"license\": \"MiIT\", \n  \"devDependencies\": { \n    \"babel-core\": \"^5.8.3\", \n    \"babel-eslint\": \"^4.0.5\", \n    \"babel-loader\": \"^5.3.2\", \n    \"css-loader\": \"^0.15.6\", \n    \"cssnext-loader\": \"^1.0.1\", \n    \"eslint\": \"^0.24.1\", \n    \"eslint-plugin-react\": \"^3.1.0\", \n    \"extract-text-webpack-plugin\": \"^0.8.2\", \n    \"html-webpack-plugin\": \"^1.6.1\", \n    \"react-hot-loader\": \"^1.2.7\", \n    \"redux-devtools\": \"^1.0.2\", \n    \"style-loader\": \"^0.12.3\", \n    \"webpack\": \"^1.9.6\", \n    \"webpack-dev-server\": \"^1.8.2\" \n  }, \n  \"dependencies\": { \n    \"classnames\": \"^2.1.3\", \n    \"lodash\": \"^3.10.1\", \n    \"react\": \"^0.13.0\", \n    \"react-redux\": \"^0.2.2\", \n    \"redux\": \"^1.0.0-rc\" \n  } \n} \n\n```", "```jsx\nvar path = require('path'); \nvarwebpack = require('webpack'); \nvarExtractTextPlugin = require('extract-text-webpack-plugin'); \nvardevFlagPlugin = new webpack.DefinePlugin({ \n  __DEV__: JSON.stringify(JSON.parse(process.env.DEBUG || 'true')) \n}); \n\nmodule.exports = { \n  devtool: 'eval', \n  entry: [ \n    'webpack-dev-server/client?http://localhost:3000', \n    'webpack/hot/only-dev-server', \n    './src/index' \n  ], \n  output: { \n    path: path.join(__dirname, 'dist'), \n    filename: 'bundle.js', \n    publicPath: '/static/' \n  }, \n  plugins: [ \n    new webpack.HotModuleReplacementPlugin(), \n    new webpack.NoErrorsPlugin(), \n    devFlagPlugin, \n    new ExtractTextPlugin('app.css') \n  ], \n  module: { \n    loaders: [ \n      { \n        test: /\\.jsx?$/, \n        loaders: ['react-hot', 'babel'], \n        include: path.join(__dirname, 'src') \n      }, \n      { test: /\\.css$/, loader: ExtractTextPlugin.extract\n      ('css-loader?module!cssnext-loader') } \n    ] \n  }, \n  resolve: { \n    extensions: ['', '.js', '.json'] \n  } \n}; \n\n```", "```jsx\nimport * as types from '../constants/ActionTypes'; \n\nexport function addUser(name) { \n  return { \n    type: types.ADD_USER, \n    name \n  }; \n} \n\nexport function deleteUser(id) { \n  return { \n    type: types.DELETE_USER, \n    id \n  }; \n} \n\n```", "```jsx\nexport constADD_USER = 'ADD_USER'; \nexport constDELETE_USER = 'DELETE_USER';  \n\n```", "```jsx\nexport default function users(state = initialState, action) { \n  switch (action.type) { \n    case types.ADD_USER: \n    constnewId = state.users[state.users.length-1] + 1; \n      return { \n        ...state, \n        users: state.users.concat(newId), \n        usersById: { \n          ...state.usersById, \n          [newId]: { \n            id: newId, \n            name: action.name \n          } \n        }, \n      } \n\n     case types.DELETE_USER: \n     return { \n       ...state, \n       users: state.users.filter(id => id !== action.id), \n       usersById: omit(state.usersById, action.id) \n     } \n\n     default: \n     return state; \n  } \n} \n\n```", "```jsx\nconstinitialState = { \n  users: [1, 2, 3], \n  usersById: { \n    1: { \n      id: 1, \n      name: 'Harmeet Singh' \n    }, \n    2: { \n      id: 2, \n      name: 'Mehul Bhatt' \n    }, \n    3: { \n      id: 3, \n      name: 'NayanJyotiTalukdar' \n    } \n  } \n}; \nimport React, { Component, PropTypes } from 'react'; \nimport { bindActionCreators } from 'redux'; \nimport { connect } from 'react-redux'; \n\nimport * as UsersActions from '../actions/UsersActions'; \nimport { UserList, AddUserInput } from '../components'; \n\n@connect(state => ({ \nuserlist: state.userlist \n})) \nexport default class UserListApp extends Component { \n\n  static propTypes = { \n    usersById: PropTypes.object.isRequired, \n    dispatch: PropTypes.func.isRequired \n  } \n\n  render () { \n    const { userlist: { usersById }, dispatch } = this.props; \n    const actions = bindActionCreators(UsersActions, dispatch); \n\n    return ( \n      <div> \n        <h1>UserList</h1> \n        <AddUserInputaddUser={actions.addUser} /> \n        <UserList users={usersById} actions={actions} /> \n      </div> \n    ); \n  } \n} \n\n```", "```jsx\nexport default class AddUserInput extends Component { \n  static propTypes = { \n    addUser: PropTypes.func.isRequired \n  } \n\n  render () { \n    return ( \n      <input \n      type=\"text\" \n      autoFocus=\"true\" \n      className={classnames('form-control')} \n        placeholder=\"Type the name of the user to add\" \n        value={this.state.name} \n        onChange={this.handleChange.bind(this)} \n        onKeyDown={this.handleSubmit.bind(this)} /> \n    ); \n  } \n\n  constructor (props, context) { \n    super(props, context); \n      this.state = { \n        name: this.props.name || '', \n      }; \n  } \n} \n\n```", "```jsx\nexport default class UserList extends Component { \n  static propTypes = { \n    users: PropTypes.object.isRequired, \n    actions: PropTypes.object.isRequired \n  } \n\n  render () { \n    return ( \n      <div className=\"media\"> \n        { \n          mapValues(this.props.users, (users) => { \n            return (<UsersListItem \n              key={users.id} \n              id={users.id} \n              name={users.name} \n               src={users.src} \n              {...this.props.actions} />); \n          }) \n        } \n      </div> \n    ); \n  } \n}\n\n```", "```jsx\nexport default class UserListItem extends Component { \n  static propTypes = { \n    id: PropTypes.number.isRequired, \n    name: PropTypes.string.isRequired, \n    onTrashClick: PropTypes.func.isRequired \n  } \n\n  render () { \n    return ( \n      <div> \n      <div className=\"clearfix\"> \n            <a href=\"#\" className=\"pull-left\"> \n            <img className=\"media-object img-thumbnail\" \n            src={\"http://placehold.it/64x64\"}/> \n            </a> \n            <div className={`media-body ${styles.paddng10}`}> \n                  <h3className=\"media-heading\"> \n                  <strong><a href=\"#\">{this.props.name}</a></strong> \n                  </h3> \n            <p> \n                  Loremipsum dolor sit amet, consecteturadipiscingelit. \n                  Praesentgravidaeuismod ligula,\n                  vel semper nuncblandit sit amet.  \n            </p> \n\n            <div className={`pull-right ${styles.userActions}`}> \n            <button className={`btnbtn-default ${styles.btnAction}`} \n            onClick={()=>this.props.deleteUser(this.props.id)} \n            > \n            Delete the user <iclassName=\"fafa-trash\" /> \n            </button> \n            </div> \n          </div> \n        </div> \n      </div> \n    ); \n  } \n}  \n\n```", "```jsx\nimport { UserList, AddUserInput } from '../components'; \n@connect(state => ({ \n  userlist: state.userlist \n})) \nexport default class UserListApp extends Component {  \n  static propTypes = { \n    usersById: PropTypes.object.isRequired, \n    dispatch: PropTypes.func.isRequired \n  } \n\n  render () { \n    const { userlist: { usersById }, dispatch } = this.props; \n    const actions = bindActionCreators(UsersActions, dispatch); \n\n    return ( \n      <div> \n        <h1>UserList</h1> \n        <AddUserInput addUser={actions.addUser} /> \n        <UserList users={usersById} actions={actions} /> \n      </div> \n    ); \n  } \n}\n```", "```jsx\nimport UserListApp from './UserListApp'; \nimport * as reducers from '../reducers'; \n\nconst reducer = combineReducers(reducers); \nconst store = createStore(reducer); \n\nexport default class App extends Component { \n  render() { \n    return ( \n      <div> \n        <Provider store={store}> \n          {() => <UserListApp /> } \n        </Provider> \n\n        {renderDevTools(store)} \n      </div> \n    ); \n  } \n} \n\n```", "```jsx\n**Npm install**\n```", "```jsx\n**Npm start**\n```"]