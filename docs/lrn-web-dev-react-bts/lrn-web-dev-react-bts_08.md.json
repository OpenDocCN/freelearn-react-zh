["```jsx\nReactDOM.render(reactElement, domContainerNode)\n```", "```jsx\nReactDOM.unmountComponentAtNode(domContainerNode)\n```", "```jsx\nReactDOM.render(<Applocale=\"en-US\"userID={1}/>,container); \n// props.userID == 1\n// props.locale == \"en-US\" \nReactDOM.render(<AppuserID={2}/>,container); \n// props.userID == 2\n// props.locale == undefined ??!?\n```", "```jsx\nclassReactComponentRenderer{ \n \u00a0\u00a0\u00a0constructor(componentClass,container){ \n \u00a0\u00a0  \u00a0\u00a0 this.componentClass=componentClass; \n \u00a0\u00a0  \u00a0\u00a0 this.container=container; \n \u00a0\u00a0  \u00a0\u00a0 this.props={}; \n \u00a0\u00a0  \u00a0\u00a0 this.component=null; \n \u00a0\u00a0\u00a0} \n\n \u00a0\u00a0 replaceProps(props,callback){ \n \u00a0\u00a0  \u00a0\u00a0 this.props={}; \n \u00a0\u00a0  \u00a0\u00a0 this.setProps(props,callback); \n \u00a0\u00a0\u00a0} \n\n \u00a0\u00a0 setProps(partialProps,callback){ \n \u00a0\u00a0  \u00a0\u00a0 if(this.componentClass==null){ \n \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0 console.warn( \n \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0 'setProps(...): Can only update a mounted or '+ \n \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0 'mounting component. This usually means you called \n\u00a0\u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0 setProps() on '+'an unmounted component. This is a no-op.' \n \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0); \n \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0 return; \n \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0} \n \u00a0\u00a0  \u00a0\u00a0 Object.assign(this.props,partialProps); \n \u00a0\u00a0  \u00a0\u00a0 varelement=React.createElement(this.klass,this.props); \n \u00a0\u00a0  \u00a0\u00a0 this.component=ReactDOM.render(element,this.container,callback); \n \u00a0\u00a0 } \n\n \u00a0\u00a0 unmount(){ \n \u00a0\u00a0  \u00a0\u00a0 ReactDOM.unmountComponentAtNode(this.container); \n \u00a0\u00a0  \u00a0\u00a0 this.klass=null; \n \u00a0\u00a0 }\n}\n```", "```jsx\nclassReactVideoPlayer{                                 \n \u00a0\u00a0 constructor(url,container){ \n \u00a0\u00a0  \u00a0\u00a0 this._container=container; \n \u00a0\u00a0  \u00a0\u00a0 this._url=url; \n \u00a0\u00a0  \u00a0\u00a0 this._isPlaying=false; \n \u00a0\u00a0  \u00a0\u00a0 this._render(); \n \u00a0\u00a0\u00a0} \n\n \u00a0\u00a0 _render(){ \n \u00a0\u00a0  \u00a0\u00a0 ReactDOM.render( \n \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0 <VideoPlayerurl={this._url}playing={this._isPlaying}/>, \n \u00a0\u00a0  \u00a0\u00a0 \u00a0\u00a0  this._container \n \u00a0\u00a0\u00a0 \u00a0  ); \n \u00a0\u00a0\u00a0} \n\n \u00a0\u00a0 geturl(){ \n \u00a0\u00a0  \u00a0\u00a0 returnthis._url; \n \u00a0\u00a0\u00a0} \n\n \u00a0\u00a0 seturl(value){ \n \u00a0\u00a0  \u00a0\u00a0 this._url=value; \n \u00a0\u00a0  \u00a0\u00a0 this._render(); \n \u00a0\u00a0\u00a0} \n\n \u00a0\u00a0 play(){ \n \u00a0\u00a0  \u00a0\u00a0 this._isPlaying=true; \n \u00a0\u00a0  \u00a0\u00a0 this._render(); \n \u00a0\u00a0\u00a0} \n\n \u00a0\u00a0 pause(){ \n \u00a0\u00a0  \u00a0\u00a0 this._isPlaying=false; \n \u00a0\u00a0  \u00a0\u00a0 this._render(); \n \u00a0\u00a0\u00a0} \n\n \u00a0\u00a0 destroy(){ \n \u00a0\u00a0  \u00a0\u00a0 ReactDOM.unmountComponentAtNode(this._container); \n \u00a0\u00a0\u00a0}\n}\n```", "```jsx\n**node  -v** \n```", "```jsx\n**node --version**\n```", "```jsx\n{ \n  \"plugins\": [\"syntax-object-rest-spread\", \"transform-object-rest-spread\"] \n} \n\n```", "```jsx\n**Npm init**\n```", "```jsx\n{ \n  \"name\": \"facebook-api-integration-with-react\", \n  \"version\": \"1.2.0\", \n  \"description\": \"Web Application to check Like, Comments and\n  Post of your Facebook Friends, \n\n```", "```jsx\n  \"scripts\": { \n    \"lint\": \"eslint src/ server.js config/ webpack/\", \n    \"start\": \"npm run dev\", \n    \"build\": \"webpack -p --config webpack/webpack.config.babel.js\n    --progress --colors --define process.env.NODE_ENV='\"production\"'\", \n    \"clean\": \"rimraf dist/\", \n    \"deploy\": \"npm run clean && npm run build\", \n    \"dev\": \"./node_modules/.bin/babel-node server.js\" \n  }, \n\n```", "```jsx\n  \"author\": \"Mehul Bhatt <mehu_multimedia@yahoo.com>\", \n  \"license\": \"MIT\", \n  \"keywords\": [ \n    \"react\", \n    \"babel\", \n    \"ES6\", \n    \"ES7\", \n    \"async\", \n    \"await\", \n    \"webpack\", \n    \"purecss\", \n    \"Facebook API\" \n  ], \n\n```", "```jsx\n  \"devDependencies\": { \n    \"babel-cli\": \"^6.3.17\", \n    \"babel-core\": \"^6.3.26\", \n    \"babel-eslint\": \"^6.0.0\", \n    \"babel-loader\": \"^6.2.0\", \n    \"babel-plugin-react-transform\": \"^2.0.0-beta1\", \n    \"babel-plugin-transform-regenerator\": \"^6.5.2\", \n    \"babel-polyfill\": \"^6.5.0\", \n    \"babel-preset-es2015\": \"^6.3.13\", \n    \"babel-preset-react\": \"^6.3.13\", \n    \"babel-preset-stage-0\": \"^6.5.0\", \n    \"css-loader\": \"^0.23.0\", \n    \"enzyme\": \"^2.4.1\", \n    \"eslint\": \"^2.12.0\", \n    \"eslint-config-airbnb\": \"^9.0.1\", \n    \"eslint-plugin-import\": \"^1.8.1\", \n    \"eslint-plugin-jsx-a11y\": \"^1.5.3\", \n    \"eslint-plugin-react\": \"^5.2.0\", \n    \"express\": \"^4.13.3\", \n    \"file-loader\": \"^0.9.0\", \n    \"imports-loader\": \"^0.6.5\", \n    \"json-loader\": \"^0.5.4\", \n    \"lolex\": \"^1.4.0\", \n    \"react-transform-catch-errors\": \"^1.0.1\", \n    \"react-transform-hmr\": \"^1.0.1\", \n    \"redbox-react\": \"^1.2.0\", \n    \"rimraf\": \"^2.5.0\", \n    \"sinon\": \"^1.17.4\", \n    \"style-loader\": \"^0.13.0\", \n    \"url-loader\": \"^0.5.7\", \n    \"webpack\": \"^1.12.9\", \n    \"webpack-dev-middleware\": \"^1.4.0\", \n    \"webpack-hot-middleware\": \"^2.6.0\", \n    \"yargs\": \"^4.1.0\" \n  }, \n  \"dependencies\": { \n    \"classnames\": \"^2.2.5\", \n    \"jss\": \"^5.2.0\", \n    \"jss-camel-case\": \"^2.0.0\", \n    \"lodash.isequal\": \"^4.0.0\", \n    \"react\": \"^15.0.2\", \n    \"react-addons-shallow-compare\": \"^15.0.2\", \n    \"react-dom\": \"^15.0.2\", \n    \"reqwest\": \"^2.0.5\", \n    \"spin.js\": \"^2.3.2\" \n  } \n} \n\n```", "```jsx\n<!doctype html> \n<html lang=\"en\">\n\u00a0\u00a0\u00a0 <head>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <meta charset=\"UTF-8\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <title>React Integration with Facebook API</title>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <meta name=\"viewport\" content=\"width=device-width, \n        initial-scale=1\">\n\u00a0\u00a0\u00a0 </head>\n\u00a0\u00a0\u00a0 <body>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <div id=\" Api-root\"></div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <script src=\"dist/bundle.js\"></script> \n\u00a0\u00a0\u00a0 </body>\n</html>\n\n```", "```jsx\nexport default { \n    appId: '1362753213759665', \n    cookie: true, \n    xfbml: false, \n    version: 'v2.5' \n}; \n\n```", "```jsx\nimport React from 'react'; \nimport { render } from 'react-dom'; \nimport App from './components/App'; \n\nimport 'babel-polyfill'; \n\n// import CSS \n\nimport '../vendor/css/base.css'; \nimport '../vendor/css/bootstrap.min.css'; \n\nrender( \n  <App />, \n  document.querySelector('#Api-root') \n); \n\n```", "```jsx\n/* global Facebook  */ \n\nimport React, { Component } from 'react'; \nimport Profile from './Profile'; \nimport FriendList from './FriendList'; \nimport ErrMsg from './ErrMsg'; \nimport config from '../../config'; \nimport Spinner from './Spinner'; \nimport Login from './Login'; \nimport emitter from '../utils/emitter'; \nimport { getData } from '../utils/util'; \nimport jss from 'jss';\n\n```", "```jsx\nconst { classes } = jss.createStyleSheet({ \n  wrapper: { \n    display: 'flex' \n  }, \n  '@media (max-width: 1050px)': { \n    wrapper: { \n      'flex-wrap': 'wrap' \n    } \n  } \n}).attach(); \n\n```", "```jsx\nclass App extends Component { \n\n  state = { \n    status: 'loading' \n  }; \n\n  componentWillMount = () => { \n    document.body.style.backgroundColor = '#ffffff'; \n  }; \n\n  componentWillUnmount = () => { \n    emitter.removeListener('search'); \n  }; \n\n  componentDidMount = () => { \n    emitter.on('search', query => this.setState({ query })); \n\n    window.fbAsyncInit = () => { \n      FB.init(config); \n\n      // show login \n      FB.getLoginStatus( \n        response => response.status !== 'connected' && \n        this.setState({ status: response.status }) \n      ); \n\n      FB.Event.subscribe('auth.authResponseChange', (response) => { \n        // start spinner \n        this.setState({ status: 'loading' }); \n\n        (async () => { \n          try { \n            const { profile, myFriends } = await getData(); \n            this.setState({ status: response.status, profile, myFriends }); \n          } catch (e) { \n          this.setState({ status: 'err' }); \n       } \n     })(); \n   }); \n}; \n\n```", "```jsx\n    // Load the SDK asynchronously \n    (function (d, s, id) { \n      const fjs = d.getElementsByTagName(s)[0]; \n      if (d.getElementById(id)) { return; } \n      const js = d.createElement(s); js.id = id; \n      js.src = '//connect.facebook.net/en_US/sdk.js'; \n      fjs.parentNode.insertBefore(js, fjs); \n    }(document, 'script', 'facebook-jssdk')); \n  }; \n\n  _click = () => { \n    FB.login(() => {}, { scope: ['user_posts', 'user_friends'] }); \n  }; \n\n```", "```jsx\n  mainRender = () => { \n    const { profile, myFriends, status, query } = this.state; \n    if (status === 'err') { \n      return (<ErrMsg />); \n    } else if (status === 'unknown' || status === 'not_authorized') { \n      return <Login fBLogin={this._click} />; \n    } else if (status === 'connected') { \n      return ( \n \u00a0\u00a0  \u00a0\u00a0 <div className={classes.wrapper}> \n \u00a0\u00a0  \u00a0   \u00a0<Profile {...profile} /> \n \u00a0\u00a0  \u00a0 \u00a0\u00a0 <FriendList myFriends={myFriends} query={query} /> \n \u00a0\u00a0  \u00a0 \u00a0</div> \n      ); \n    } \n    return (<Spinner />); \n  }; \n\n  render() { \n    return ( \n      <div> \n        {this.mainRender()} \n      </div> \n    ); \n  } \n}  \nexport default App; \n\n```", "```jsx\nimport React, { PropTypes } from 'react'; \nimport jss from 'jss'; \nimport camelCase from 'jss-camel-case'; \njss.use(camelCase());  \n\n```", "```jsx\nconst { classes } = jss.createStyleSheet({ \n  title: { \n    textAlign: 'center', \n    color: '#008000' \n  }, \n  main: { \n    textAlign: 'center', \n    backgroundColor: 'white', \n    padding: '15px 5px', \n    borderRadius: '3px' \n  },     \n  wrapper: { \n    display: 'flex', \n    minHeight: '60vh', \n    alignItems: 'center', \n    justifyContent: 'center' \n  }, \n  '@media (max-width: 600px)': { \n    title: { \n      fontSize: '1em' \n    }, \n    main: { \n      fontSize: '0.9em' \n    } \n  } \n}).attach(); \n\n```", "```jsx\nconst Login = ({ fBLogin }) => ( \n  <div className={classes.wrapper}> \n    <div> \n      <h2 className={classes.title}>Please check your friend list \n      on Facebook</h2> \n        <div className={classes.main}> \n          <h4>Please grant Facebook to access your friend list</h4> \n          <button className=\"btn btn-primary\" \n          onClick={fBLogin}>Agree</button> \n        </div> \n    </div> \n  </div> \n);  \n\nLogin.propTypes = { \n  fBLogin: PropTypes.func.isRequired \n}; \n\nexport default Login; \n\n```", "```jsx\nimport React, { PropTypes } from 'react'; \nimport FriendItem from './FriendItem'; \nimport { MAX_OUTPUT } from '../utils/constants'; \nimport jss from 'jss'; \nimport camelCase from 'jss-camel-case';  \n\njss.use(camelCase()); \n\n```", "```jsx\nconst { classes } = jss.createStyleSheet({ \n  nodata: { \n    fontSize: '1.5em', \n    display: 'flex', \n    justifyContent: 'center', \n    alignItems: 'center', \n    textAlign: 'center', \n    color: 'white', \n    minHeight: '100vh', \n  }, \n  wrapper: { \n    flex: '3' \n  }, \n  '@media (max-width: 1050px)': { \n    wrapper: { \n      flex: '1 1 100%' \n    }, \n    nodata: { \n      minHeight: 'auto' \n    } \n  } \n}).attach(); \n\n```", "```jsx\nconst emptyResult = (hasFriends, query) => { \n  return ( \n    <div className={classes.nodata}> \n      {hasFriends ? `No results for: \"${query}\"` : 'No friends to show'} \n    </div> \n  ); \n}; \n\n```", "```jsx\nconst renderFriends = ({ myFriends, query }) => { \n  const result = myFriends.reduce((prev, curr, i) => { \n    if (curr.name.match(new RegExp(query, 'i'))) { \n      prev.push(<FriendItem key={i} rank={i + 1} {...curr} />); \n    } \n\n    return prev; \n    }, []); \n    return result.length > 0 ? result : emptyResult\n    (!!myFriends.length, query); \n    }; \n\n    const FriendList = (props) => ( \n      <div className={classes.wrapper}> \n        {renderFriends(props)} \n      </div> \n    ); \n\n    FriendList.propTypes = { \n      myFriends: PropTypes.array.isRequired, \n      query: PropTypes.string \n    }; \n\nexport default FriendList; \n\n```"]