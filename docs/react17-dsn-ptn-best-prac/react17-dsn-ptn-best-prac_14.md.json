["```jsx\nnpm init\n```", "```jsx\nnpm install --save-dev jest\n```", "```jsx\n\"scripts\": { \n  \"build\": \"webpack\",\n  \"start\": \"node ./dist/server\",\n  \"test\": \"jest\",\n  \"test:coverage\": \"jest --coverage\"\n}\n```", "```jsx\nnpm install --save-dev @babel/core @babel/preset-env @babel/preset-react ts-jest\n```", "```jsx\n{ \n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"] \n}\n```", "```jsx\nnpm install --save react react-dom\n```", "```jsx\nnpm install @testing-library/jest-dom @testing-library/react\n```", "```jsx\n module.exports = {\n  preset: 'ts-jest',\n  setupFilesAfterEnv: ['<rootDir>/setUpTests.ts']\n}\n```", "```jsx\nimport '@testing-library/jest-dom/extend-expect'\n```", "```jsx\nimport React, { FC } from 'react'\n\ntype Props = {\n  name: string\n}\n\nconst Hello: FC<Props> = ({ name }) => <h1 className=\"Hello\">Hello {name || 'World'}</h1>\n\nexport default Hello\n```", "```jsx\nimport React from 'react' import { render, cleanup } from '@testing-library/react'\n\nimport Hello from './index'\n\ndescribe('Hello Component', () => {\n  it('should render Hello World', () => {\n    const wrapper = render(<Hello />)\n    expect(wrapper.getByText('Hello World')).toBeInTheDocument()\n  })\n\n  it('should render the name prop', () => {\n    const wrapper = render(<Hello name=\"Carlos\" />)\n    expect(wrapper.getByText('Hello Carlos')).toBeInTheDocument()\n  });\n\n  it('should has .Home classname', () => {\n    const wrapper = render(<Hello />)\n    expect(wrapper.container.firstChild).toHaveClass('Hello')\n  });\n\n  afterAll(cleanup)\n})\n```", "```jsx\nnpm test\n```", "```jsx\nit('should render the name prop', () => {\n  const wrapper = render(<Hello name=\"Carlos\" />)\n  expect(wrapper.getByText('Hello World')).toBeInTheDocument()\n});\n```", "```jsx\nnpm run test:coverage\n```", "```jsx\nimport { FC, useState, ChangeEvent } from 'react'\n\nconst ShowInformation: FC = () => {\n  const [state, setState] = useState({ name: '', age: 0, show: false })\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target\n\n    setState({\n      ...state,\n      [name]: value\n    })\n  }\n\n  const handleShowInformation = () => {\n    setState({\n      ...state,\n      show: true\n    })\n  }\n\n if (state.show) {\n    return (\n      <div className=\"ShowInformation\">\n        <h1>Personal Information</h1>\n\n        <div className=\"personalInformation\">\n          <p>\n            <strong>Name:</strong> {state.name}\n          </p>\n          <p>\n            <strong>Age:</strong> {state.age}\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"ShowInformation\">\n      <h1>Personal Information</h1>\n\n      <p>\n        <strong>Name:</strong>\n      </p>\n\n      <p>\n        <input name=\"name\" type=\"text\" value={state.name} onChange={handleOnChange} />\n      </p>\n\n      <p>\n        <input name=\"age\" type=\"number\" value={state.age} onChange={handleOnChange} />\n      </p>\n\n      <p>\n        <button onClick={handleShowInformation}>Show Information</button>\n      </p>\n    </div>\n  )\n}\n\nexport default ShowInformation\n```", "```jsx\nimport { render, cleanup, fireEvent } from '@testing-library/react'\n\nimport ShowInformation from './index'\n\ndescribe('Show Information Component', () => {\n  let wrapper\n\n  beforeEach(() => {\n    wrapper = render(<ShowInformation />)\n  })\n\n  it('should modify the name', () => {\n    const nameInput = wrapper.container.querySelector('input[name=\"name\"]') as HTMLInputElement\n    const ageInput = wrapper.container.querySelector('input[name=\"age\"]') as HTMLInputElement\n\n    fireEvent.change(nameInput, { target: { value: 'Carlos' } })\n    fireEvent.change(ageInput, { target: { value: 33 } })\n\n    expect(nameInput.value).toBe('Carlos')\n    expect(ageInput.value).toBe('33')\n  })\n\n  it('should show the personal information when user clicks on the button', () => {\n    const button = wrapper.container.querySelector('button')\n\n    fireEvent.click(button)\n\n    const showInformation = wrapper.container.querySelector('.personalInformation')\n\n    expect(showInformation).toBeInTheDocument()\n  })\n\n  afterAll(cleanup)\n})\n```", "```jsx\nnpm install --save-dev redux-devtools-extension\n```", "```jsx\n// Dependencies\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Root Reducer\nimport rootReducer from '@reducers';\n\nexport default function configureStore({ \n  initialState, \n  reducer \n}) {\n  const middleware = [\n    thunk\n  ];\n\n  return createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n  );\n}\n```"]