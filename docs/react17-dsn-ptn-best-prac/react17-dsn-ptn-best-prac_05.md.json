["```jsx\nimport { useState } from 'react'\n```", "```jsx\nconst Counter = () => {\n  const [counter, setCounter] = useState<number>(0)\n}\n```", "```jsx\nconst Counter = () => {\n  const [counter, setCounter] = useState<number>(0)\n\n  const handleCounter = (operation) => {\n    if (operation === 'add') {\n      return setCounter(counter + 1)\n    }\n\n    return setCounter(counter - 1)\n  }\n}\n```", "```jsx\nreturn (\n  <p>\n    Counter: {counter} <br />\n    <button onClick={() => handleCounter('add')}>+ Add</button>\n    <button onClick={() => handleCounter('subtract')}>- Subtract</button>\n  </p>\n)\n```", "```jsx\nnpm install --save-dev eslint-plugin-react-hooks \n```", "```jsx\nnpm install axios\n```", "```jsx\n// Dependencies\nimport { Component } from 'react'\nimport axios from 'axios'\n\n// Types\ntype Issue = {\n  number: number\n  title: string\n  state: string\n}\ntype Props = {}\ntype State = { issues: Issue[] };\n\nclass Issues extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      issues: []\n    }\n  }\n\n  componentDidMount() {\n    axios\n    .get('https://api.github.com/repos/ContentPI/ContentPI/issues')\n     .then((response: any) => {\n        this.setState({\n          issues: response.data\n        })\n      })\n  }\n\n  render() {\n    const { issues = [] } = this.state\n\n    return (\n      <>\n        <h1>ContentPI Issues</h1>\n\n        {issues.map((issue: Issue) => (\n          <p key={issue.title}>\n            <strong>#{issue.number}</strong> {' '}\n            <a href=    {`https://github.com/ContentPI/ContentPI/issues/${issue.number}`}\n                target=\"_blank\">{issue.title}</a> {' '}\n            {issue.state}\n          </p>\n        ))}\n      </>\n    )\n  }\n}\n\nexport default Issues\n```", "```jsx\n// Dependencies\nimport { FC, useState, useEffect } from 'react'\nimport axios from 'axios'\n```", "```jsx\n// Types\ntype Issue = {\n  number: number\n  title: string\n  state: string\n}\n```", "```jsx\nconst Issues: FC = () => {...}\n```", "```jsx\ntype Props = { propX: string propY: number propZ: boolean  \n}\n\nconst Issues: FC<Props> = () => {...}\n```", "```jsx\n// The useState hook replace the this.setState method\nconst [issues, setIssues] = useState<Issue[]>([])\n```", "```jsx\n// When we use the useEffect hook with an empty array [] on the \n// dependencies (second parameter) \n// this represents the componentDidMount method (will be executed when the \n// component is mounted).\nuseEffect(() => {\n  axios\n    .get('https://api.github.com/repos/ContentPI/ContentPI/issues')\n    .then((response: any) => {\n      // Here we update directly our issue state\n      setIssues(response.data)\n    })\n}, [])\n```", "```jsx\nreturn (\n  <>\n    <h1>ContentPI Issues</h1>\n\n    {issues.map((issue: Issue) => (\n      <p key={issue.title}>\n        <strong>#{issue.number}</strong> {' '}\n        <a href=\n          {`https://github.com/ContentPI/ContentPI/issues/${issue.number}`} \n            target=\"_blank\">{issue.title}</a> {' '}\n        {issue.state}\n      </p>\n    ))}\n  </>\n)\n```", "```jsx\nuseEffect(() => {\n  // Here you perform your side effect\n}, [])\n```", "```jsx\nuseEffect(() => {\n  // When you pass an array of dependencies the useEffect hook will only \n  // run \n  // if one of the dependencies changes.\n}, [dependencyA, dependencyB])\n```", "```jsx\ncreate-react-app todo --template typescript\n```", "```jsx\n// Dependencies\nimport { useState, useEffect, useMemo, useCallback } from 'react'\n\n// Components\nimport List, { Todo } from './List'\n\nconst initialTodos = [\n  { id: 1, task: 'Go shopping' },\n  { id: 2, task: 'Pay the electricity bill'}\n]\n\nfunction App() {\n  const [todoList, setTodoList] = useState(initialTodos)\n  const [task, setTask] = useState('')\n\n  useEffect(() => {\n    console.log('Rendering <App />')\n  })\n\n  const handleCreate = () => {\n    const newTodo = {\n      id: Date.now(), \n      task\n    }\n\n    // Pushing the new todo to the list\n    setTodoList([...todoList, newTodo])\n\n    // Resetting input value\n    setTask('')\n  }\n\n  return (\n    <>\n      <input \n        type=\"text\" \n        value={task} \n        onChange={(e) => setTask(e.target.value)} \n      />\n\n      <button onClick={handleCreate}>Create</button>\n\n      <List todoList={todoList} />\n    </>\n  )\n}\n\nexport default App\n```", "```jsx\n// Dependencies\nimport { FC, useEffect } from 'react'\n\n// Components\nimport Task from './Task'\n\n// Types\nexport type Todo = {\n  id: number\n  task: string\n}\n\ninterface Props {\n  todoList: Todo[]\n}\n\nconst List: FC<Props> = ({ todoList }) => {\n  useEffect(() => {\n    // This effect is executed every new render\n    console.log('Rendering <List />')\n  })\n\n  return (\n    <ul>\n      {todoList.map((todo: Todo) => (\n        <Task key={todo.id} id={todo.id} task={todo.task} />\n      ))}\n    </ul>\n  )\n}\n\nexport default List\n```", "```jsx\nimport { FC, useEffect } from 'react'\n\ninterface Props {\n  id: number\n  task: string\n}\n\nconst Task: FC<Props> = ({ task }) => {\n  useEffect(() => {\n    console.log('Rendering <Task />', task)\n  })\n\n  return (\n    <li>{task}</li>\n  )\n}\n\nexport default Task\n```", "```jsx\nimport { FC, useEffect, memo } from 'react'\n\n...\n\nexport default memo(List)\n```", "```jsx\nimport { FC, useEffect, memo } from 'react'\n\n...\n\nexport default memo(Task)\n```", "```jsx\nconst [term, setTerm] = useState('')\n```", "```jsx\nconst handleSearch = () => {\n setTerm(task)\n}\n```", "```jsx\nconst filteredTodoList = todoList.filter((todo: Todo) => {\n  console.log('Filtering...')\n return todo.task.toLowerCase().includes(term.toLocaleLowerCase())\n})\n```", "```jsx\n<button onClick={handleSearch}>Search</button>\n```", "```jsx\nconst filteredTodoList = useMemo(() => SomeProcessHere, [])\n```", "```jsx\nconst filteredTodoList = useMemo(() => todoList.filter((todo: Todo) => {\n  console.log('Filtering...')\n return todo.task.toLowerCase().includes(term.toLowerCase())\n}), [])\n```", "```jsx\nconst filteredTodoList = useMemo(() => todoList.filter((todo: Todo) => {\n  console.log('Filtering...')\n return todo.task.toLowerCase().includes(term.toLocaleLowerCase())\n}), [term, todoList])\n```", "```jsx\nconst handleDelete = (taskId: number) => {\n  const newTodoList = todoList.filter((todo: Todo) => todo.id !== taskId)\n  setTodoList(newTodoList)\n}\n```", "```jsx\n<List todoList={filteredTodoList} handleDelete={handleDelete} />\n```", "```jsx\ninterface Props {\n  todoList: Todo[]\n  handleDelete: any\n}\n```", "```jsx\nconst List: FC<Props> = ({ todoList, handleDelete }) => {\n  useEffect(() => {\n    // This effect is executed every new render\n    console.log('Rendering <List />')\n  })\n\n  return (\n    <ul>\n      {todoList.map((todo: Todo) => (\n        <Task \n          key={todo.id} \n          id={todo.id}\n          task={todo.task} \n          handleDelete={handleDelete}\n        />\n      ))}\n    </ul>\n  )\n}\n```", "```jsx\ninterface Props {\n  id: number\n  task: string\n  handleDelete: any\n}\n\nconst Task: FC<Props> = ({ id, task, handleDelete }) => {\n  useEffect(() => {\n    console.log('Rendering <Task />', task)\n  })\n\n  return (\n    <li>{task} <button onClick={() => handleDelete(id)}>X</button></li>\n  )\n}\n```", "```jsx\nconst handleDelete = useCallback(() => SomeFunctionDefinition, [])\n```", "```jsx\nconst handleDelete = useCallback((taskId: number) => {\n  const newTodoList = todoList.filter((todo: Todo) => todo.id !== taskId)\n  setTodoList(newTodoList)\n}, [todoList])\n```", "```jsx\nconst printTodoList = () => {\n  console.log('Changing todoList')\n}\n\nuseEffect(() => {\n  printTodoList()\n}, [todoList])\n```", "```jsx\nconst printTodoList = () => {\n  console.log('Changing todoList', todoList)\n}\n```", "```jsx\nuseEffect(() => {\n  printTodoList()\n}, [todoList, printTodoList])\n```", "```jsx\nconst printTodoList = useCallback(() => {\n  console.log('Changing todoList', todoList)\n}, [todoList])\n```", "```jsx\ncreate-react-app reducer --template typescript\n```", "```jsx\nimport Notes from './Notes'\n\nfunction App() {\n  return (\n    <Notes />\n  )\n}\n\nexport default App\n```", "```jsx\nimport { useReducer, useState, ChangeEvent } from 'react'\n```", "```jsx\ntype Note = {\n  id: number\n  note: string\n}\n\ntype Action = {\n  type: string\n  payload?: any\n}\n\ntype ActionTypes = {\n  ADD: 'ADD'\n  UPDATE: 'UPDATE'\n  DELETE: 'DELETE'\n}\n\nconst actionType: ActionTypes = {\n  ADD: 'ADD',\n  DELETE: 'DELETE',\n  UPDATE: 'UPDATE'\n}\n```", "```jsx\nconst initialNotes: Note[] = [\n  {\n    id: 1,\n    note: 'Note 1'\n  },\n  {\n    id: 2,\n    note: 'Note 2'\n  }\n]\n```", "```jsx\nconst reducer = (state: Note[], action: Action) => {\n  switch (action.type) {\n    case actionType.ADD:\n      return [...state, action.payload]\n\n    case actionType.DELETE: \n      return state.filter(note => note.id !== action.payload)\n\n    case actionType.UPDATE:\n      const updatedNote = action.payload\n      return state.map((n: Note) => n.id === updatedNote.id ? \n        updatedNote : n)\n\n    default:\n      return state\n  }\n}\n```", "```jsx\nconst Notes = () => {\n  const [notes, dispatch] = useReducer(reducer, initialNotes)\n  const [note, setNote] = useState('')\n  ...\n}\n```", "```jsx\nconst handleSubmit = (e: ChangeEvent<HTMLInputElement>) => {\n  e.preventDefault()\n\n  const newNote = {\n    id: Date.now(),\n    note\n  }\n\n  dispatch({ type: actionType.ADD, payload: newNote })\n}\n```", "```jsx\nreturn (\n  <div>\n    <h2>Notes</h2>\n\n    <ul>\n      {notes.map((n: Note) => (\n        <li key={n.id}>\n          {n.note} {' '}\n          <button \n            onClick={() => dispatch({ \n              type: actionType.DELETE,\n              payload: n.id\n            })}\n          >\n            X\n          </button>\n\n          <button \n            onClick={() => dispatch({ \n              type: actionType.UPDATE,\n              payload: {...n, note}\n            })}\n          >\n            Update\n          </button>\n        </li>\n      ))}\n    </ul>\n\n    <form onSubmit={handleSubmit}>\n      <input \n        placeholder=\"New note\" \n        value={note} \n        onChange={e => setNote(e.target.value)} \n      />\n    </form>\n  </div>\n)\n\nexport default Notes\n```"]