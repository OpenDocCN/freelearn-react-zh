["```jsx\nnpm init\n```", "```jsx\nnpm install webpack\n```", "```jsx\nnpm install --save-dev @babel/core @babel/preset-env @babel/preset-react ts-loader typescript\n```", "```jsx\nnpm install --save-dev webpack-node-externals\n```", "```jsx\n\"scripts\": {\n  \"build\": \"webpack\"\n}\n```", "```jsx\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n}\n```", "```jsx\nconst nodeExternals = require('webpack-node-externals')\nconst path = require('path')\n\nconst rules = [{\n  test: /\\.(tsx|ts)$/,\n  use: 'ts-loader',\n  exclude: /node_modules/\n}]\n```", "```jsx\nconst client = {\n  entry: './src/client.tsx',\n  output: {\n    path: path.resolve(__dirname, './dist/public'),\n    filename: 'bundle.js',\n    publicPath: '/'\n  },\n  module: {\n    rules\n  }\n}\n```", "```jsx\nconst server = {\n  entry: './src/server.ts',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'server.js',\n    publicPath: '/'\n  },\n  module: {\n    rules\n  },\n  target: 'node',\n  externals: [nodeExternals()],\n  resolve: {\n    extensions: [\".ts\", \".tsx\", \".js\", \".json\"],\n  },\n}\n```", "```jsx\nmodule.exports = [client, server]\n```", "```jsx\nconst App = () => <div>Hello React</div>\n\nexport default App\n```", "```jsx\nimport { render } from 'react-dom'\nimport App from './app'\n\nrender(<App />, document.getElementById('root'))\n```", "```jsx\nexport default body => `\n  <!DOCTYPE html>\n  <html>\n <head>\n <meta charset=\"UTF-8\">\n    </head>\n <body>\n <div id=\"root\">${body}</div>\n      <script src=\"/bundle.js\"></script>\n </body>\n </html>`\n```", "```jsx\nnpm install express react react-dom @types/express @types/react @types/react-dom\n```", "```jsx\nimport React from 'react' import express, { Request, Response } from 'express'\nimport { renderToString } from 'react-dom/server'\nimport path from 'path'\nimport App from './App'\nimport template from './template'\n```", "```jsx\nconst app = express()\n```", "```jsx\napp.use(express.static(path.resolve(__dirname, './dist/public')))\n```", "```jsx\napp.get('/', (req: Request, res: Response) => {\n  const body = renderToString(<App />)\n  const html = template(body)\n  res.send(html)\n})\n```", "```jsx\n<div data-reactroot=\"\" data-reactid=\"1\" data-react-checksum=\"982061917\">Hello React</div>\n```", "```jsx\napp.listen(3000, () => {\n  console.log('Listening on port 3000')\n})\n```", "```jsx\n\"scripts\": {\n  \"build\": \"webpack\",\n  \"start\": \"node ./dist/server\"\n}\n```", "```jsx\nnpm run build \n```", "```jsx\nnpm start\n```", "```jsx\nimport { FC } from 'react'\n\ntype Gist = {\n  id: string\n  description: string\n}\n\ntype Props = {\n  gists: Gist[]\n}\n\nconst App: FC<Props> = ({ gists }) => ( \n  <ul> \n    {gists.map(gist => ( \n      <li key={gist.id}>{gist.description}</li> \n    ))} \n  </ul> \n)\n\nexport default App\n```", "```jsx\nnpm install isomorphic-fetch @types/isomorphic-fetch\n```", "```jsx\nimport fetch from 'isomorphic-fetch'\n```", "```jsx\nfetch('https://api.github.com/users/gaearon/gists') \n  .then(response => response.json()) \n  .then(gists => {})\n```", "```jsx\napp.get('/', (req, res) => { \n  fetch('https://api.github.com/users/gaearon/gists') \n    .then(response => response.json()) \n    .then(gists => { \n      const body = renderToString(<App gists={gists} />)\n      const html = template(body)\n\n      res.send(html)\n    })\n})\n```", "```jsx\nnpm run build && npm start\n```", "```jsx\nexport default (body, gists) => ` \n  <!DOCTYPE html> \n  <html> \n <head> \n <meta charset=\"UTF-8\"> \n    </head> \n <body> \n <div id=\"root\">${body}</div> \n      <script>window.gists = ${JSON.stringify(gists)}</script> \n      <script src=\"/bundle.js\"></script> \n    </body> \n </html> \n`\n```", "```jsx\nconst html = template(body, gists)\n```", "```jsx\nReactDOM.hydrate( \n  <App gists={window.gists} />, \n  document.getElementById('app') \n)\n```", "```jsx\nnpm run build && npm start\n```", "```jsx\nnpm init\n```", "```jsx\nnpm install next react react-dom typescript @types/react @types/node\n```", "```jsx\n\"scripts\": { \n  \"dev\": \"next\" \n}\n```", "```jsx\nimport fetch from 'isomorphic-fetch'\n```", "```jsx\nconst App = () => {\n\n}\n\nexport default App\n```", "```jsx\nApp.getInitialProps = async () => { \n  const url = 'https://api.github.com/users/gaearon/gists'\n  const response = await fetch(url)\n  const gists = await response.json()\n\n  return { \n    gists \n  }\n}\n```", "```jsx\nreturn ( \n  <ul> \n    {props.gists.map(gist => ( \n       <li key={gist.id}>{gist.description}</li> \n     ))} \n   </ul> \n)\n```", "```jsx\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\",\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"noImplicitAny\": true,\n    \"outDir\": \"dist\",\n    \"resolveJsonModule\": true,\n    \"sourceMap\": false,\n    \"target\": \"es6\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"moduleResolution\": \"node\",\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\"\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n}\n```", "```jsx\nnpm run dev\n```", "```jsx\n> Ready on http://localhost:3000\n```"]