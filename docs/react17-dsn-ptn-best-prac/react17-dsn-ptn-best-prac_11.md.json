["```jsx\nconst style = { \n  color: 'palevioletred', \n  backgroundColor: 'papayawhip'\n};\n\nconst Button = () => <button style={style}>Click me!</button>;\n```", "```jsx\nconst style = { \n  height: 100\n}\n```", "```jsx\nimport { useState, ChangeEvent } from 'react'\n\nconst FontSize = () => {\n  const [value, setValue] = useState<number>(16)\n}\n\nexport default FontSize\n```", "```jsx\nconst handleChange = (e: ChangeEvent<HTMLInputElement>) => { \n  setValue(Number(e.target.value))\n}\n```", "```jsx\nreturn ( \n  <input \n    type=\"number\" \n    value={value} \n    onChange={handleChange} \n    style={{ fontSize: value }} \n  /> \n)\n```", "```jsx\ndisplay: -webkit-flex; \ndisplay: flex;\n```", "```jsx\n<button style=\"color:palevioletred;background-color:papayawhip;\">Click me!</button>\n```", "```jsx\nconst Button = () => <button>Click me!</button>\n```", "```jsx\nnpm install --save radium @types/radium\n```", "```jsx\nimport Radium from 'radium'\n\nconst Button = () => <button>Click me!</button>\n\nexport default Radium(Button)\n```", "```jsx\nconst styles = { \n  backgroundColor: '#ff0000', \n  width: 320, \n  padding: 20, \n  borderRadius: 5, \n  border: 'none', \n  outline: 'none'\n}\n```", "```jsx\nconst Button = () => <button style={styles}>Click me!</button>\n```", "```jsx\n<button data-radium=\"true\" style=\"background-color: rgb(255, 0, 0); width: 320px; padding: 20px; border-radius: 5px; border: none; outline: none;\">Click me!</button>\n```", "```jsx\nconst styles = { \n  backgroundColor: '#ff0000', \n  width: 320, \n  padding: 20, \n  borderRadius: 5, \n  border: 'none', \n  outline: 'none', \n  ':hover': { \n    color: '#fff' \n  } \n}\n```", "```jsx\n<button data-radium=\"true\" style=\"background-color: rgb(255, 0, 0); width: 320px; padding: 20px; border-radius: 5px; border: none; outline: none; color: rgb(255, 255, 255);\">Click me!</button> \n```", "```jsx\nconst styles = { \n  backgroundColor: '#ff0000', \n  width: 320, \n  padding: 20, \n  borderRadius: 5, \n  border: 'none', \n  outline: 'none', \n  ':hover': { \n    color: '#fff'\n  }, \n  ':active': { \n    position: 'relative', \n    top: 2\n  } \n}\n```", "```jsx\nconst styles = { \n  backgroundColor: '#ff0000', \n  width: 320, \n  padding: 20, \n  borderRadius: 5, \n  border: 'none', \n  outline: 'none', \n  ':hover': { \n    color: '#fff' \n  }, \n  ':active': { \n    position: 'relative', \n    top: 2\n  }, \n  '@media (max-width: 480px)': { \n    width: 160 \n  } \n}\n```", "```jsx\nimport Radium from 'radium'\n```", "```jsx\nconst App = () => { \n  return ( \n    <Radium.StyleRoot> \n      ... \n    </Radium.StyleRoot> \n  ) \n}\n```", "```jsx\n<style>@media (max-width: 480px) { .rmq-1d8d7428{width: 160px !important;}}</style>\n```", "```jsx\n<button class=\"rmq-1d8d7428\" data-radium=\"true\" style=\"background-color: rgb(255, 0, 0); width: 320px; padding: 20px; border-radius: 5px; border: none; outline: none;\">Click me!</button>\n```", "```jsx\nnpm init\n```", "```jsx\nnpm install --save-dev webpack webpack-dev-server webpack-cli\n```", "```jsx\nnpm install --save-dev @babel/core @babel/preset-env @babel/preset-react ts-loader\n```", "```jsx\nnpm install --save-dev style-loader css-loader\n```", "```jsx\nnpm install --save-dev html-webpack-plugin fork-ts-checker-webpack-plugin typescript\n```", "```jsx\nnpm install react react-dom\n```", "```jsx\n{\n \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n}\n```", "```jsx\n\"scripts\": { \n  \"dev\": \"webpack serve --mode development --port 3000\" \n}\n```", "```jsx\nmodule.exports = {}\n```", "```jsx\nentry: './src/index.tsx'\n```", "```jsx\nmodule: { \n  rules: [\n    {\n      test: /\\.(tsx|ts)$/,\n      exclude: /node_modules/,\n      use: {\n        loader: 'ts-loader',\n        options: {\n          transpileOnly: true\n        }\n      }\n    }, \n    { \n      test: /\\.css/,\n      use: [\n        'style-loader',\n        'css-loader?modules=true'\n      ]\n    } \n  ]\n}\n```", "```jsx\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin')\n\nplugins: [\n  new ForkTsCheckerWebpackPlugin(),\n new HtmlWebpackPlugin({\n    title: 'Your project name',\n    template: './src/index.html',\n    filename: './index.html'\n  })\n]\n```", "```jsx\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst path = require('path')\nconst ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin')\n\nconst isProduction = process.env.NODE_ENV === 'production'\n\nmodule.exports = {\n  devtool: !isProduction ? 'source-map' : false, // We generate source maps \n  // only for development\n  entry: './src/index.tsx',\n  output: { // The path where we want to output our bundles\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].[hash:8].js',\n    sourceMapFilename: '[name].[hash:8].map',\n    chunkFilename: '[id].[hash:8].js',\n    publicPath: '/'\n  },\n  resolve: {\n    extensions: ['.ts', '.tsx', '.js', '.json', '.css'] // Here we add the \n    // extensions we want to support\n  },\n  target: 'web',\n  mode: isProduction ? 'production' : 'development', // production mode \n  // minifies the code\n  module: { \n    rules: [\n      {\n        test: /\\.(tsx|ts)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'ts-loader',\n          options: {\n            transpileOnly: true\n          }\n        }\n      }, \n      { \n        test: /\\.css/,\n        use: [\n          'style-loader',\n          'css-loader?modules=true'\n        ]\n      } \n    ]\n  }, \n  plugins: [\n    new ForkTsCheckerWebpackPlugin(),\n new HtmlWebpackPlugin({\n      title: 'Your project name',\n      template: './src/index.html',\n      filename: './index.html'\n    })\n  ],\n  optimization: { // This is to split our bundles into vendor and main\n    splitChunks: {\n      cacheGroups: {\n        default: false,\n        commons: {\n          test: /node_modules/,\n          name: 'vendor',\n          chunks: 'all'    \n        }\n      }\n    }\n  }\n}\n```", "```jsx\n{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"baseUrl\": \"src\",\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"react-jsx\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"noEmit\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noImplicitAny\": false,\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"sourceMap\": true,\n    \"strict\": true,\n    \"target\": \"es6\"\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n}\n```", "```jsx\ndeclare module '*.css' {\n  const content: Record<string, string>\n  export default content\n}\n```", "```jsx\nimport { render } from 'react-dom'\n\nconst App = () => {\n  return <div>Hello World</div>\n}\n\nrender(<App />, document.querySelector('#root'))\n```", "```jsx\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" \n      />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n```", "```jsx\n<!DOCTYPE html> \n<html> \n  <head> \n    <meta charset=\"UTF-8\"> \n    <title>Your project name</title>\n    <script defer src=\"/vendor.12472959.js\"></script>\n    <script defer src=\"/main.12472959.js\"></script> \n  </head> \n <body>    <div id=\"root\"></div>\n  </body> \n</html>\n```", "```jsx\nimport { render } from 'react-dom'\n```", "```jsx\n const Button = () => <button>Click me!</button>\n```", "```jsx\nrender(<Button />, document.querySelector('#root'))\n```", "```jsx\n.button { \n  background-color: #ff0000; \n  width: 320px; \n  padding: 20px; \n  border-radius: 5px; \n  border: none; \n  outline: none; \n}\n```", "```jsx\nimport styles from './index.css'\n```", "```jsx\n{ \n  button: \"_2wpxM3yizfwbWee6k0UlD4\" \n}\n```", "```jsx\nconst Button = () => ( \n  <button className={styles.button}>Click me!</button> \n);\n```", "```jsx\n<button class=\"_2wpxM3yizfwbWee6k0UlD4\">Click me!</button>\n```", "```jsx\n<style type=\"text/css\"> \n  ._2wpxM3yizfwbWee6k0UlD4 { \n    background-color: #ff0000; \n    width: 320px; \n    padding: 20px; \n    border-radius: 5px; \n    border: none; \n    outline: none; \n  } \n</style>\n```", "```jsx\n.button:hover { \n  color: #fff; \n} \n\n.button:active { \n  position: relative; \n  top: 2px; \n} \n\n@media (max-width: 480px) { \n  .button { \n    width: 160px \n  } \n}\n```", "```jsx\n._2wpxM3yizfwbWee6k0UlD4:hover { \n  color: #fff; \n} \n\n._2wpxM3yizfwbWee6k0UlD4:active { \n  position: relative; \n  top: 2px; \n} \n\n@media (max-width: 480px) { \n  ._2wpxM3yizfwbWee6k0UlD4 { \n    width: 160px \n  } \n}\n```", "```jsx\n{\n  test: /\\.css/,\n  use: [\n    { \n      loader: 'style-loader'\n    },\n    {\n      loader: \"css-loader\",\n      options: {\n        modules: {\n          localIdentName: \"[local]--[hash:base64:5]\"\n        }\n      }\n    }\n  ]\n}\n```", "```jsx\n<button class=\"button--2wpxM\">Click me!</button>\n```", "```jsx\n:global .button { \n  ... \n}\n```", "```jsx\n.button { \n  ... \n}\n```", "```jsx\n.background-red { \n  background-color: #ff0000; \n}\n```", "```jsx\n.button { \n  composes: background-red; \n  width: 320px; \n  padding: 20px; \n  border-radius: 5px; \n  border: none; \n  outline: none; \n}\n```", "```jsx\n<button class=\"_2wpxM3yizfwbWee6k0UlD4 Sf8w9cFdQXdRV_i9dgcOq\">Click me!</button>\n```", "```jsx\n.Sf8w9cFdQXdRV_i9dgcOq { \n  background-color: #ff0000; \n} \n\n._2wpxM3yizfwbWee6k0UlD4 { \n  width: 320px; \n  padding: 20px; \n  border-radius: 5px; \n  border: none; \n  outline: none; \n}\n```", "```jsx\n.mb0 { \n  margin-bottom: 0; \n}\n```", "```jsx\n.fw6 { \n  font-weight: 600; \n} \n```", "```jsx\n<h2 class=\"mb0 fw6\">Hello React</h2>\n```", "```jsx\n.title { \n  composes: mb0 fw6; \n}\n```", "```jsx\n<h2 className={styles.title}>Hello React</h2>\n```", "```jsx\n<h2 class=\"title--3JCJR mb0--21SyP fw6--1JRhZ\">Hello React</h2>\n```", "```jsx\nnpm install react-css-modules\n```", "```jsx\nimport cssModules from 'react-css-modules'\n```", "```jsx\nconst EnhancedButton = cssModules(Button, styles)\n```", "```jsx\nconst Button = () => <button styleName=\"button\">Click me!</button>;\n```", "```jsx\nimport { render } from 'react-dom'\nimport styles from './index.css'\nimport cssModules from 'react-css-modules'\n\nconst Button = () => <button styleName=\"button1\">Click me!</button>\n\nconst EnhancedButton = cssModules(Button, styles)\n\nrender(<EnhancedButton />, document.querySelector('#root'))\n```", "```jsx\nUncaught Error: \"button1\" CSS module is undefined.\n```", "```jsx\nnpm install styled-components\n```", "```jsx\nimport styled from 'styled-components'\n```", "```jsx\nconst Button = styled.button`\n  backgroundColor: #ff0000; \n  width: 320px; \n  padding: 20px; \n  borderRadius: 5px; \n  border: none; \n  outline: none; \n`;\n```", "```jsx\n<button class=\"kYvFOg\">Click me!</button>\n```", "```jsx\n.kYvFOg { \n  background-color: #ff0000; \n  width: 320px; \n  padding: 20px; \n  border-radius: 5px; \n  border: none; \n  outline: none; \n}\n```", "```jsx\nconst Button = styled.button` \n  background-color: #ff0000; \n  width: 320px; \n  padding: 20px; \n  border-radius: 5px; \n  border: none; \n  outline: none; \n  &:hover { \n    color: #fff; \n  } \n  &:active { \n    position: relative; \n    top: 2px; \n  }\n`\n```", "```jsx\nconst Button = styled.button` \n  background-color: #ff0000; \n  width: 320px; \n  padding: 20px; \n  border-radius: 5px; \n  border: none; \n  outline: none; \n  &:hover { \n    color: #fff; \n  } \n  &:active { \n    position: relative; \n    top: 2px; \n  } \n  @media (max-width: 480px) { \n    width: 160px; \n  } \n`;\n```"]