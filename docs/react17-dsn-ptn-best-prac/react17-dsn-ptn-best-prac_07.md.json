["```jsx\nbrew install postgres\n```", "```jsx\nln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents\n```", "```jsx\nalias pg_start=\"launchctl load ~/Library/LaunchAgents\"\nalias pg_stop=\"launchctl unload ~/Library/LaunchAgents\"\n```", "```jsx\ncreatedb `whoami`\n```", "```jsx\ncreateuser -s postgres\n```", "```jsx\nnpm init --yes\n\nnpm install @contentpi/lib @graphql-tools/load-files @graphql-tools/merge apollo-server dotenv express jsonwebtoken pg pg-hstore sequelize ts-node\n\nnpm install --save-dev husky jest prettier sequelize-mock ts-jest ts-node-dev typescript eslint @types/jsonwebtoken\n```", "```jsx\n\"scripts\": {\n  \"dev\": \"ts-node-dev src/index.ts\",\n  \"start\": \"ts-node dist/index.js\",\n  \"build\": \"tsc -p .\",\n  \"lint\": \"eslint . --ext .js,.tsx,.ts\",\n  \"lint:fix\": \"eslint . --fix --ext .js,.tsx,.ts\",\n  \"test\": \"jest src\"\n}\n```", "```jsx\nDB_DIALECT=postgres\nDB_PORT=5432\nDB_HOST=localhost\nDB_DATABASE=<your-database>\nDB_USERNAME=<your-username>\nDB_PASSWORD=<your-password>\n```", "```jsx\n{\n  \"server\": {\n    \"port\": 5000\n  },\n  \"security\": {\n    \"secretKey\": \"C0nt3ntP1\",\n    \"expiresIn\": \"7d\"\n  }\n}\n```", "```jsx\n// Dependencies\nimport dotenv from 'dotenv'\n\n// Configuration\nimport config from './config.json'\n\n// Loading .env vars\ndotenv.config()\n\n// Types\ntype Db = {\n  dialect: string\n  host: string\n  port: string\n  database: string\n  username: string\n  password: string\n}\n\ntype Security = {\n  secretKey: string\n  expiresIn: string\n}\n\ntype Server = {\n  port: number\n}\n\n// Extracting data from .env file\nconst {\n  DB_DIALECT = '',\n  DB_PORT = '',\n  DB_HOST = '',\n  DB_DATABASE = '',\n  DB_USERNAME = '',\n  DB_PASSWORD = '',\n} = process.env\n\nconst db: Db = {\n  dialect: DB_DIALECT,\n  port: DB_PORT,\n  host: DB_HOST,\n  database: DB_DATABASE,\n  username: DB_USERNAME,\n  password: DB_PASSWORD\n}\n\n// Configuration\nconst { security, server } = config\n\nexport const $db: Db = db\nexport const $security: Security = security\nexport const $server: Server = server\n```", "```jsx\n// Dependencies\nimport { ApolloServer, makeExecutableSchema } from 'apollo-server'\n\n// Models\nimport models from './models'\n\n// Type Definitions & Resolvers\nimport resolvers from './graphql/resolvers'\nimport typeDefs from './graphql/types'\n\n// Configuration\nimport { $server } from '../config'\n```", "```jsx\n// Schema\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n})\n```", "```jsx\n// Apollo Server\nconst apolloServer = new ApolloServer({\n  schema,\n  context: {\n    models\n  }\n})\n```", "```jsx\nconst alter = true\nconst force = false\n\nmodels.sequelize.sync({ alter, force }).then(() => {\n  apolloServer\n    .listen($server.port)\n    .then(({ url }) => {\n      // eslint-disable-next-line no-console\n      console.log(`Running on ${url}`)\n    })\n})\n```", "```jsx\nscalar UUID\nscalar Datetime\nscalar JSON\n```", "```jsx\ntype User {\n  id: UUID!\n  username: String!\n  password: String!\n  email: String!\n  privilege: String!\n  active: Boolean!\n  createdAt: Datetime!\n  updatedAt: Datetime!\n}\n```", "```jsx\ntype Query {\n getUsers: [User!]\n getUserData(at: String!): User!\n}\n```", "```jsx\ntype Mutation {\n  createUser(input: CreateUserInput): User!\n  login(input: LoginInput): AuthPayload!\n}\n```", "```jsx\ninput CreateUserInput {\n  username: String!\n  password: String!\n  email: String!\n  privilege: String!\n  active: Boolean!\n}\n\ninput LoginInput {\n  email: String!\n  password: String!\n}\n\ntype AuthPayload {\n  token: String!\n}\n```", "```jsx\nimport path from 'path'\nimport { loadFilesSync } from '@graphql-tools/load-files'\nimport { mergeTypeDefs } from '@graphql-tools/merge'\n\nconst typesArray = loadFilesSync(path.join(__dirname, './'), { extensions: ['graphql'] })\n\nexport default mergeTypeDefs(typesArray)\n```", "```jsx\nexport default {\n  Query: {\n    getUsers: () => {},\n    getUserData: () => {},\n  },\n  Mutation: {\n    createUser: () => {},\n    login: () => {}\n  }\n}\n```", "```jsx\n// Lib\nimport { getUserData } from '../../lib/jwt'\n\n// Interfaces\nimport {\n  IUser,\n  ICreateUserInput,\n  IModels,\n  ILoginInput,\n  IAuthPayload\n} from '../../types'\n\n// Utils\nimport { doLogin, getUserBy } from '../../lib/auth'\n```", "```jsx\ngetUsers: (\n  _: any,\n  args: any,\n  ctx: { models: IModels }\n): IUser[] => ctx.models.User.findAll(),\n```", "```jsx\ngetUsers: (\n  _: any,\n  args: any,\n  { models }: { models: IModels }\n): IUser[] => models.User.findAll(),\n```", "```jsx\n// Apollo Server\nconst apolloServer = new ApolloServer({\n  schema,\n  context: {\n    models\n  }\n})\n```", "```jsx\ngetUserData: async (\n  _: any,\n  { at }: { at: string },\n  { models }: { models: IModels }\n): Promise<any> => {\n  // Get current connected user\n  const connectedUser = await getUserData(at)\n\n  if (connectedUser) {\n    // Validating if the user is still valid\n    const user = await getUserBy(\n      {\n        id: connectedUser.id,\n        email: connectedUser.email,\n        privilege: connectedUser.privilege,\n        active: connectedUser.active\n      },\n      models\n    )\n\n    if (user) {\n      return connectedUser\n    }\n  }\n\n  return {\n    id: '',\n    username: '',\n    password: '',\n    email: '',\n    privilege: '',\n    active: false\n  }\n}\n```", "```jsx\nMutation: {\n  createUser: (\n    _: any,\n    { input }: { input: ICreateUserInput },\n    { models }: { models: IModels }\n  ): IUser => models.User.create({ ...input }),\n  login: (\n    _: any,\n    { input }: { input: ILoginInput },\n    { models }: { models: IModels }\n  ): Promise<IAuthPayload> => doLogin(input.email, input.password, models)\n}\n```", "```jsx\nimport path from 'path'\nimport { loadFilesSync } from '@graphql-tools/load-files'\nimport { mergeResolvers } from '@graphql-tools/merge'\n\nconst resolversArray = loadFilesSync(path.join(__dirname, './'))\nconst resolvers = mergeResolvers(resolversArray)\n\nexport default resolvers\n```", "```jsx\n// Dependencies\nimport { encrypt } from '@contentpi/lib'\n\n// Interfaces\nimport { IUser, IDataTypes } from '../types'\n\nexport default (sequelize: any, DataTypes: IDataTypes): IUser => {\n  const User = sequelize.define(\n    'User',\n    {\n      id: {\n        primaryKey: true,\n        allowNull: false,\n        type: DataTypes.UUID,\n        defaultValue: DataTypes.UUIDV4()\n      },\n      username: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: true,\n        validate: {\n          isAlphanumeric: {\n            args: true,\n            msg: 'The user just accepts alphanumeric characters'\n          },\n          len: {\n            args: [4, 20],\n            msg: 'The username must be from 4 to 20 characters'\n          }\n        }\n      },\n      password: {\n        type: DataTypes.STRING,\n        allowNull: false\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: true,\n        validate: {\n          isEmail: {\n            args: true,\n            msg: 'Invalid email'\n          }\n        }\n      },\n      privilege: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        defaultValue: 'user'\n      },\n      active: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false\n      }\n    },\n    {\n      hooks: {\n        beforeCreate: (user: IUser): void => {\n          user.password = encrypt(user.password)\n        }\n      }\n    }\n  )\n\n  return User\n}\n```", "```jsx\n// Dependencies\nimport { Sequelize } from 'sequelize'\n\n// Configuration\nimport { $db } from '../../config'\n\n// Interfaces\nimport { IModels } from '../types'\n\n// Db Connection\nconst { dialect, port, host, database, username, password } = $db\n\n// Connecting to the database\nconst uri = `${dialect}://${username}:${password}@${host}:${port}/${database}`\nconst sequelize = new Sequelize(uri)\n\n// Models\nconst models: IModels = {\n  User: require('./User').default(sequelize, Sequelize),\n  sequelize\n}\n\nexport default models\n```", "```jsx\n// Dependencies\nimport jwt from 'jsonwebtoken'\nimport { encrypt, setBase64, getBase64 } from '@contentpi/lib'\n\n// Configuration\nimport { $security } from '../../config'\n\n// Interface\nimport { IUser } from '../types'\n\nconst { secretKey } = $security\n\nexport function jwtVerify(accessToken: string, cb: any): void {\n  // Verifiying our JWT token using the accessToken and the secretKey\n  jwt.verify(\n    accessToken,\n    secretKey,\n    (error: any, accessTokenData: any = {}) => {\n      const { data: user } = accessTokenData\n\n      // If we get an error or the user is not found we return false\n      if (error || !user) {\n        return cb(false)\n      }\n\n      // The user data is on base64 and getBase64 will retreive the \n      // information as JSON object\n      const userData = getBase64(user)\n\n      return cb(userData)\n    }\n  )\n}\n\nexport async function getUserData(accessToken: string): Promise<any> {\n  // We resolve the jwtVerify promise to get the user data\n  const UserPromise = new Promise(resolve =>\n    jwtVerify(accessToken, (user: any) => resolve(user))\n  )\n\n  // This will get the user data or false (if the user is not connected)\n  const user = await UserPromise\n\n  return user\n}\n\nexport const createToken = async (user: IUser): Promise<string[]> => {\n  // Extracting the user data\n  const { id, username, password, email, privilege, active } = user\n\n  // Encrypting our password by combining the secretKey and the password \n  // and converting it to base64\n  const token = setBase64(`${encrypt($security.secretKey)}${password}`)\n\n  // The \"token\" is an alias for password in this case\n  const userData = {\n    id,\n    username,\n    email,\n    privilege,\n    active,\n    token\n  }\n\n  // We sign our JWT token and we save the data as Base64\n  const _createToken = jwt.sign(\n    { data: setBase64(userData) },\n    $security.secretKey,\n    { expiresIn: $security.expiresIn }\n  )\n\n  return Promise.all([_createToken])\n}\n```", "```jsx\n// Dependencies\nimport { AuthenticationError } from 'apollo-server'\n\n// Utils\nimport { encrypt, isPasswordMatch } from '@contentpi/lib'\n\n// Interface\nimport { IUser, IModels, IAuthPayload } from '../types'\n\n// JWT\nimport { createToken } from './jwt'\n\nexport const getUserBy = async (\n  where: any,\n  models: IModels\n): Promise<IUser> => {\n  // We find a user by a WHERE condition\n  const user = await models.User.findOne({\n    where,\n    raw: true\n  })\n\n  return user\n}\n\nexport const doLogin = async (\n  email: string,\n  password: string,\n  models: IModels\n): Promise<IAuthPayload> => {\n  // Finding a user by email\n  const user = await getUserBy({ email }, models)\n\n  // If the user does not exists we return Invalid Login\n  if (!user) {\n    throw new AuthenticationError('Invalid Login')\n  }\n\n  // We verify that our encrypted password is the same as the user.password \n  // value\n  const passwordMatch = isPasswordMatch(encrypt(password), user.password)\n\n  // We validate that the user is active\n  const isActive = user.active\n\n  // If the password does not match we return invalid login\n  if (!passwordMatch) {\n    throw new AuthenticationError('Invalid Login')\n  }\n\n  // If the account is not active we return an error\n  if (!isActive) {\n    throw new AuthenticationError('Your account is not activated yet')\n  }\n\n // If the user exists, the password is correct and the account is active \n // then we create the JWT token\n  const [token] = await createToken(user)\n\n  // Finally we return the token to Graphql\n  return {\n    token\n  }\n}\n```", "```jsx\nexport type User = {\n  username: string\n  password: string\n  email: string\n  privilege: string\n  active: boolean\n}\n\nexport type Sequelize = {\n  _defaults?: any\n  name?: string\n  options?: any\n  associate?: any\n}\n```", "```jsx\n// Types\nimport { User, Sequelize } from './types'\n\n// Sequelize\nexport interface IDataTypes {\n  UUID: string\n  UUIDV4(): string\n  STRING: string\n  BOOLEAN: boolean\n  TEXT: string\n  INTEGER: number\n  DATE: string\n  FLOAT: number\n}\n\n// User\nexport interface IUser extends User, Sequelize {\n  id: string\n  token?: string\n  createdAt?: Date\n  updatedAt?: Date\n}\n\nexport interface ICreateUserInput extends User {}\n\nexport interface ILoginInput {\n  email: string\n  password: string\n}\n\nexport interface IAuthPayload {\n  token: string\n}\n\n// Models\nexport interface IModels {\n  User: any\n  sequelize: any\n}\n```", "```jsx\nexport * from './interfaces'\nexport * from './types'\n```", "```jsx\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./src\",\n    \"esModuleInterop\": true,\n    \"module\": \"commonjs\",\n    \"noImplicitAny\": true,\n    \"outDir\": \"dist\",\n    \"resolveJsonModule\": true,\n    \"sourceMap\": true,\n    \"target\": \"es6\",\n    \"typeRoots\": [\"./src/@types\", \"./node_modules/@types\"]\n  },\n  \"include\": [\"src/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n```", "```jsx\n[INFO] 23:45:16 Restarting: /Users/czantany/projects/React-Design-Patterns-and-Best-Practices-Third-Edition/Chapter05/graphql/backend/src/models/User.ts has been modified\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Users\" (\"id\" UUID NOT NULL , \"username2\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"privilege\" VARCHAR(255) NOT NULL DEFAULT 'user', \"active\" BOOLEAN NOT NULL DEFAULT false, \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\nExecuting (default): ALTER TABLE \"public\".\"Users\" ADD COLUMN \"username2\" VARCHAR(255) NOT NULL UNIQUE;\nExecuting (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255);\nExecuting (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\" ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255) ;\nExecuting (default): ALTER TABLE \"Users\" ALTER COLUMN \"privilege\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"privilege\" SET DEFAULT 'user';ALTER TABLE \"Users\" ALTER COLUMN \"privilege\" TYPE VARCHAR(255);\nExecuting (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT false;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN;\nExecuting (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE;\nRunning on http://localhost:5000/\n```", "```jsx\nExecuting (default): ALTER TABLE \"public\".\"Users\" ADD COLUMN \"username2\" VARCHAR(255) NOT NULL UNIQUE;\nExecuting (default): ALTER TABLE \"public\".\"Users\" DROP COLUMN \"username\";\n```", "```jsx\nquery {\n  getUsers {\n    id\n    username\n    email\n    privilege\n  }\n}\n```", "```jsx\nmutation {\n  createUser(\n    input: {\n      username: \"admin\",\n      email: \"admin@js.education\",\n      password: \"123456\",\n      privilege: \"god\",\n      active: true\n    }\n  ) {\n    id\n    username\n    email\n    password\n    privilege\n  }\n}\n```", "```jsx\nExecuting (default): INSERT INTO \"Users\" (\"id\",\"username\",\"password\",\"email\",\"privilege\",\"active\",\"createdAt\",\"updatedAt\") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING \"id\",\"username\",\"password\",\"email\",\"privilege\",\"active\",\"createdAt\",\"updatedAt\";\n```", "```jsx\nmutation {\n  login(\n    input: {\n      email: \"fake@email.com\",\n      password: \"123456\"\n    }\n  ) {\n    token\n  }\n}\n```", "```jsx\nquery {\n  getUserData(at: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZXlKcFpDSTZJalEzTnpsaU16QTJMV1U0TW1NdE5HVmtNUzFoWldNM0xXSXdaVEl5TWpSaU5UUTNaU0lzSW5WelpYSnVZVzFsSWpvaVlXUnRhVzRpTENKbGJXRnBiQ0k2SW1Ga2JXbHVRR3B6TG1Wa2RXTmhkR2x2YmlJc0luQnlhWFpwYkdWblpTSTZJbWR2WkNJc0ltRmpkR2wyWlNJNmRISjFaU3dpZEc5clpXNGlPaUpOUkdjeldWUkZNMXBVWjNwTmJWVjVXV3BWTWs1SFJtMWFiVTB6V21wTk5GbFVRWGxhVkdSb1RVUm9iVTFIVlROTmJWa3dXVlJrYWs1SFJUUmFSRUUxV1RKRmVrNTZXWGxaVjFreVRWZFZNVTlVVlhsTlJHc3dUVEpTYWsxcVdUQlBWRkp0VDBSck1FMVhTVDBpZlE9PSIsImlhdCI6MTYxNzY5ODY4OSwiZXhwIjoxNjE4MzAzNDg5fQ.6icaBFibjEOICUt5QQ0OPAoDsb7_ohb8W10JzHnbf7k\") {\n    id\n email\n privilege\n active\n  }\n}\n```", "```jsx\nnpm init --yes\n\nnpm install @apollo/client @contentpi/lib cookie-parser cors express express-session jsonwebtoken react react-dom react-cookie react-router-dom styled-components\n\nnpm install --save-dev @babel/core @babel/preset-env @babel/preset-react buffer cross-env crypto-browserify dotenv prettier stream-browserify ts-loader ts-node ts-node-dev typescript webpack webpack-cli webpack-dev-server html-webpack-plugin\n```", "```jsx\n\"scripts\": {\n    \"start\": \"ts-node src/server\",\n    \"dev\": \"ts-node-dev src/server\",\n    \"webpack\": \"cross-env NODE_ENV=development webpack serve --mode development\",\n    \"build\": \"cross-env NODE_ENV=production webpack --mode production\",\n    \"clean\": \"rimraf dist/ && rimraf public/app\",\n    \"lint\": \"eslint . --ext .js,.tsx,.ts\",\n    \"lint:fix\": \"eslint . --fix --ext .js,.tsx,.ts\",\n    \"test\": \"jest src\",\n    \"test:coverage\": \"jest src --coverage\"\n  }\n```", "```jsx\n// Dependencies\nimport path from 'path'\nimport webpack, { Configuration } from 'webpack'\nimport HtmlWebPackPlugin from 'html-webpack-plugin'\n\n// Environment\nconst isProduction = process.env.NODE_ENV === 'production'\n\nconst webpackConfig: Configuration = {\n  devtool: !isProduction ? 'source-map' : false,\n  target: 'web',\n  mode: isProduction ? 'production' : 'development',\n  entry: './src/index.tsx',\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: '[name].js',\n    publicPath: '/'\n  },\n  resolve: {\n    extensions: ['.ts', '.tsx', '.js', '.json'],\n    fallback: { // This is to fix the polifylls errors\n      buffer: require.resolve('buffer'),\n      crypto: require.resolve(\"crypto-browserify\"),\n      stream: require.resolve(\"stream-browserify\")\n    }\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(ts|tsx)$/,\n        use: {\n          loader: 'ts-loader',\n          options: {\n            transpileOnly: true\n          }\n        },\n        exclude: /node_modules/\n      }\n    ]\n  },\n  optimization: {\n    splitChunks: { // This will split our bundles into vendor.js and \n    // main.js\n      cacheGroups: {\n        default: false,\n        commons: {\n          test: /node_modules/,\n          name: 'vendor',\n          chunks: 'all'\n        }\n      }\n    }\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new HtmlWebPackPlugin({\n      template: './src/index.html',\n      filename: './index.html',\n      publicPath: !isProduction ? 'http://localhost:8080/' : '' // For dev \n      // we will read the bundle from localhost:8080 (webpack-dev-server)\n    })\n  ]\n}\n\nexport default webpackConfig\n```", "```jsx\n<!DOCTYPE html>\n<html>\n <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, \n      maximum-scale=1\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Login System</title>\n </head>\n\n <body>\n <div id=\"root\"></div>\n </body>\n</html>\n```", "```jsx\n{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n    \"noImplicitAny\": false,\n    \"types\": [\"node\", \"express\"]\n  },\n  \"include\": [\"src\"]\n}\n```", "```jsx\n// Dependencies\nimport express, { Request, Response, NextFunction } from 'express'\nimport path from 'path'\nimport cookieParser from 'cookie-parser'\nimport cors from 'cors'\nimport session from 'express-session'\n\n// Middleware\nimport { isConnected } from './lib/middlewares/user'\n\n// Config\nimport config from './config'\n\n// Express app\nconst app = express();\nconst port = process.env.NODE_PORT || 3000\nconst DIST_DIR = path.join(__dirname, '../dist')\nconst HTML_FILE = path.join(DIST_DIR, 'index.html')\n\n// Making the dist directory static\napp.use(express.static(DIST_DIR));\n\n// Middlewares\napp.use(\n  session({\n    resave: false,\n    saveUninitialized: true,\n    secret: config.security.secretKey\n  })\n)\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(cookieParser(config.security.secretKey))\napp.use(cors({ credentials: true, origin: true }))\n\n// Routes\napp.get('/dashboard',\n  isConnected(\n    true,\n    ['god', 'admin'], // Those are the allowed permissions\n    `/login?redirectTo=/dashboard` // If the user is not allowed will be \n    // redirect to this path\n  ),\n  (req: Request, res: Response, next: NextFunction) => {\n    // If the user isConnected then we allow the access to the dashboard \n    // page otherwise will be redirect to /login\n    next()\n  }\n)\n\n// Forcing only No connected users to access to /login, if a connected user \n// try to access will be redirect to the homepage\napp.get('/login', isConnected(false), (req: Request, res: Response, next: NextFunction) => {\n  next()\n})\n\napp.get(`/logout`, (req: Request, res: Response) => {\n  // This will cler our \"at\" cookie and redirect to home\n  res.clearCookie('at')\n  res.redirect('/')\n})\n\napp.get('*', (req: Request, res: Response) => {\n  // We render our React application\n  res.sendFile(HTML_FILE)\n})\n\n// Listening\napp.listen(port, () => console.log(`Running at http://localhost:${port}`))\n```", "```jsx\n{\n  \"server\": {\n    \"port\": 3000\n  },\n  \"security\": {\n    \"secretKey\": \"C0nt3ntP1\", // This needs to be the same as the backend \n      // secretKey\n    \"expiresIn\": \"7d\"\n  }\n}\n```", "```jsx\n{\n  \"baseUrl\": \"http://localhost:3000\",\n  \"apiUrl\": \"http://localhost:5000/graphql\"\n}\n```", "```jsx\n{\n  \"baseUrl\": \"http://localhost:3000\",\n  \"apiUrl\": \"http://localhost:5000/graphql\"\n}\n```", "```jsx\n// Configuration\nimport common from './common.json'\nimport local from './local.json'\nimport production from './production.json'\n\n// Interface\ninterface IConfig {\n baseUrl: string\n apiUrl: string\n server: {\n port: number\n }\n security: {\n secretKey: string\n expiresIn: string\n }\n}\n\nconst { NODE_ENV = 'development' } = process.env\n\n// development => local\nlet environment = 'local'\n\nif (NODE_ENV !== 'development') {\n environment = NODE_ENV\n}\n\n// Configurations by environment\nconst config: IConfig = {\n ...common,\n ...(environment === 'local' ? local : production)\n}\n\n// Environments validations\nexport const isLocal = () => environment === 'local'\nexport const isProduction = () => environment === 'production'\n\nexport default config\n```", "```jsx\n// Dependencies\nimport { Request, Response, NextFunction } from 'express'\n\n// Lib\nimport { getUserData } from '../jwt'\n\nexport const isConnected = (isLogged = true, privileges = ['user'], redirectTo = '/') => async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  // Getting the user information by passing our 'at' cookie\n  const user = await getUserData(req.cookies.at)\n\n  if (!user && !isLogged) {\n    // This is to allow No connected users\n    return next()\n  }\n\n  // Allowing just connected users and validating privileges...\n  if (user && isLogged) {\n    // If the user is connected and is god...\n    if (privileges.includes('god') && user.privilege === 'god') {\n      return next()\n    }\n\n    // If the user is conencted and is admin...\n    if (privileges.includes('admin') && user.privilege === 'admin') {\n      return next()\n    }\n\n    // If the user is connected but is not god or admin.\n    res.redirect(redirectTo)\n  } else {\n    // If the user is not connected\n    res.redirect(redirectTo)\n  }\n}\n```", "```jsx\n// Dependencies\nimport jwt from 'jsonwebtoken'\nimport { getBase64 } from '@contentpi/lib'\n\n// Configuration\nimport config from '../config'\n\n// Getting our secretKey\nconst {\n  security: { secretKey }\n} = config\n\nexport function jwtVerify(accessToken: any, cb: any): void {\n  // Validating our accessToken\n  jwt.verify(accessToken, secretKey, (error: any, accessTokenData: any = \n   {}) => {\n    const { data: user } = accessTokenData\n\n    // If we got an error or the user is not connected we return false\n    if (error || !user) {\n      return cb(false)\n    }\n\n    // Getting the user data\n    const userData = getBase64(user)\n\n    return cb(userData)\n  })\n}\n\nexport async function getUserData(accessToken: any): Promise<any> {\n  // This is an async function to retrieve the user data from the \n  // jwtVerify function\n  const UserPromise = new Promise(resolve => jwtVerify(accessToken, (user: \n   any) => resolve(user)))\n\n  const user = await UserPromise\n\n  return user\n}\n```", "```jsx\n// Dependencies\nimport { gql } from '@apollo/client'\n\nexport default gql`\n  query getUserData($at: String!) {\n    getUserData(at: $at) {\n      id\n      email\n      username\n      privilege\n      active\n    }\n  }\n`\n```", "```jsx\n// Dependencies\nimport { gql } from '@apollo/client'\n\nexport default gql`\n  mutation login($email: String!, $password: String!) {\n    login(input: { email: $email, password: $password }) {\n      token\n    }\n  }\n`\n```", "```jsx\n// Dependencies\nimport { FC, createContext, ReactElement, useState, useEffect } from 'react'\nimport { useCookies } from 'react-cookie'\nimport { getGraphQlError, redirectTo, getDebug } from '@contentpi/lib'\nimport { useQuery, useMutation } from '@apollo/client'\n\n// Mutations\nimport LOGIN_MUTATION from '../graphql/user/login.mutation'\n\n// Queries\nimport GET_USER_DATA_QUERY from '../graphql/user/getUserData.query'\n\n// Interfaces\ninterface IUserContext {\n  login(input: any): any\n  connectedUser: any\n}\n\ninterface IProps {\n  page?: string\n  children: ReactElement\n}\n\n// Creating context\nexport const UserContext = createContext<IUserContext>({\n  login: () => null,\n  connectedUser: null\n})\n\nconst UserProvider: FC<IProps> = ({ page = '', children }): ReactElement => {\n  const [cookies, setCookie] = useCookies()\n  const [connectedUser, setConnectedUser] = useState(null)\n\n  // Mutations\n  const [loginMutation] = useMutation(LOGIN_MUTATION)\n\n  // Queries\n  const { data: dataUser } = useQuery(GET_USER_DATA_QUERY, {\n    variables: {\n      at: cookies.at || ''\n    }\n  })\n\n  // Effects\n  useEffect(() => {\n    if (dataUser) {\n      if (!dataUser.getUserData.id && page !== 'login') {\n // If the user session is invalid and is on a different page than \n        // login \n // we redirect them to login\n        redirectTo('/login?redirectTo=/dashboard')\n      } else {\n        // If we have the user data available we save it in our \n       // connectedUser state\n        setConnectedUser(dataUser.getUserData)\n      }\n    }\n  }, [dataUser, page])\n\n  async function login(input: { email: string; password: string }):\n   Promise<any> {\n    try {\n      // Executing our loginMutation passing the email and password\n      const { data: dataLogin } = await loginMutation({\n        variables: {\n          email: input.email,\n          password: input.password\n        }\n      })\n\n      if (dataLogin) {\n        // If the login was success, we save the token in our \"at\" cookie\n        setCookie('at', dataLogin.login.token, { path: '/' })\n\n        return dataLogin.login.token\n      }\n    } catch (err) {\n      // If there is an error we return it\n      return getGraphQlError(err)\n    }\n  }\n\n // Exporting our context\n  const context = {\n    login,\n    connectedUser\n  }\n\n  return <UserContext.Provider value={context}>{children}</UserContext.Provider>\n}\n\nexport default UserProvider\n```", "```jsx\n// Dependencies\nimport { render } from 'react-dom'\n\n// Apollo\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\n\n// Components\nimport AppRoutes from './AppRoutes'\n\n// Config\nimport config from './config'\n\n// Apollo Client configuration\nconst client = new ApolloClient({\n  uri: config.apiUrl,\n  cache: new InMemoryCache()\n});\n\nrender(\n  <ApolloProvider client={client}>\n    <AppRoutes />\n </ApolloProvider>\n, document.querySelector('#root'))\n```", "```jsx\n// Dependencies\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\n// Components\nimport HomePage from './pages/home'\nimport DashboardPage from './pages/dashboard'\nimport LoginPage from './pages/login'\nimport Error404 from './pages/error404'\n\nconst AppRoutes = () => (\n  <Router>\n <Switch>\n <Route path=\"/\" component={HomePage} exact />\n      <Route path=\"/dashboard\" component={DashboardPage} exact />\n      <Route path=\"/login\" component={LoginPage} exact />\n      <Route component={Error404} />\n </Switch>\n </Router>\n)pag\n\nexport default AppRoutes\n```", "```jsx\nconst Page = () => (\n  <div className=\"home\">\n    <h1>Home</h1>\n\n    <ul>\n <li><a href=\"/dashboard\">Go to Dashboard</a></li>\n </ul>\n </div>\n)\n\nexport default Page\n```", "```jsx\n// Components\nimport DashboardLayout from '../components/dashboard/DashboardLayout'\n\n// Contexts\nimport UserProvider from '../contexts/user'\n\nconst Page = () => (\n  <UserProvider>\n <DashboardLayout />\n </UserProvider>\n)\n\nexport default Page\n```", "```jsx\n// Dependencies\nimport { FC, ReactElement } from 'react'\nimport { isBrowser } from '@contentpi/lib'\n\n// Contexts\nimport UserProvider from '../contexts/user'\n\n// Components\nimport LoginLayout from '../components/users/LoginLayout'\n\ninterface IProps {\n  currentUrl: string\n}\n\nconst Page: FC<IProps> = ({\n  currentUrl = isBrowser() ? window.location.search.replace\n    ('?redirectTo=', '') :''}): ReactElement => (\n  <UserProvider page=\"login\">\n <LoginLayout currentUrl={currentUrl} />\n  </UserProvider>\n)\n\nexport default Page\n```", "```jsx\nconst Page = () => (\n  <div className=\"error404\">\n <h1>Error404</h1>\n </div>\n)\n\nexport default Page\n```", "```jsx\n// Dependencies\nimport { redirectTo } from '@contentpi/lib'\nimport { FC, ReactElement, useContext, useEffect } from 'react'\n\n// Contexts\nimport { UserContext } from '../../contexts/user'\n\n// Components\nimport Login from './Login'\n\n// Interfaces\ninterface IProps {\n  currentUrl: string\n}\n\nconst Layout: FC<IProps> = ({ currentUrl }): ReactElement => {\n  const { login } = useContext(UserContext)\n\n  return (\n    <Login login={login} currentUrl={currentUrl} />\n  )\n}\n\nexport default Layout\n```", "```jsx\n// Dependencies\nimport { FC, ReactElement, useState, ChangeEvent } from 'react'\nimport { redirectTo } from '@contentpi/lib'\n\n// Interfaces\nimport { IUser } from '../../types'\n\n// Styles\nimport { StyledLogin } from './Login.styled'\n\ninterface IProps {\n  login(input: any): any\n  currentUrl: string\n}\n\nconst Login: FC<IProps> = ({ login, currentUrl }) => {\n  // States\n  const [values, setValues] = useState({\n    email: '',\n    password: ''\n  })\n  const [errorMessage, setErrorMessage] = useState('')\n  const [invalidLogin, setInvalidLogin] = useState(false)\n\n  // Methods\n  const onChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const {\n      target: { name, value }\n    } = e\n\n    if (name) {\n      setValues((prevValues: any) => ({\n        ...prevValues,\n        [name]: value\n      }))\n    }\n  }\n\n  const handleSubmit = async (user: IUser): Promise<void> => {\n    // Here we execute the login mutation\n    const response = await login(user)\n\n    if (response.error) {\n      // If the login is invalid...\n      setInvalidLogin(true)\n      setErrorMessage(response.message)\n    } else {\n      // If the login is correct...\n      redirectTo(currentUrl || '/')\n    }\n  }\n\n  return (\n    <>\n      <StyledLogin>\n        <div className=\"wrapper\">\n          {invalidLogin && <div className=\"alert\">{errorMessage}</div>}\n          <div className=\"form\">\n            <p>\n              <input\n                autoComplete=\"off\"\n                type=\"email\"\n                className=\"email\"\n                name=\"email\"\n                placeholder=\"Email\"\n                onChange={onChange}\n                value={values.email}\n              />\n            </p>\n\n            <p>\n              <input\n                autoComplete=\"off\"\n                type=\"password\"\n                className=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                onChange={onChange}\n                value={values.password}\n              />\n            </p>\n\n            <div className=\"actions\">\n              <button name=\"login\" onClick={(): Promise<void> => \n handleSubmit(values)}>\n                Login\n              </button>\n            </div>\n          </div>\n        </div>\n      </StyledLogin>\n    </>\n  )\n}\n\nexport default Login\n```", "```jsx\n// Dependencies\nimport { FC, ReactElement, useContext } from 'react'\n\n// Contexts\nimport { UserContext } from '../../contexts/user'\n\n// Components\nimport Dashboard from './Dashboard'\n\nconst Layout: FC = () => {\n  const { connectedUser } = useContext(UserContext)\n\n  // We only render the Dashboard if the user is connected\n  if (connectedUser) {\n    return (\n      <Dashboard connectedUser={connectedUser} />\n    )\n  }\n\n  return <div />\n}\n\nexport default Layout\n```", "```jsx\ninterface IProps {\n  connectedUser: any\n}\n\nconst Dashboard = ({ connectedUser }) => (\n  <div className=\"dashboard\">\n    <h1>Welcome, {connectedUser.username}!</h1>\n\n    <ul>\n <li><a href=\"/logout\">Logout</a></li>\n    </ul>\n </div>\n)\n\nexport default Dashboard\n```"]