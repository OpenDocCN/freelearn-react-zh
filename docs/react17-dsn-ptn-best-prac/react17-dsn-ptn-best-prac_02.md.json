["```jsx\n# \"node\" is an alias for the latest version:\nnvm install node\n\n# You can also install a global version of node (will install the latest from that version):\nnvm install 10\nnvm install 9\nnvm install 8\nnvm install 7\nnvm install 6\n\n# Or you can install a very specific version:\nnvm install 6.14.3\n```", "```jsx\nnvm use node # for latest version\nnvm use 10\nnvm use 6.14.3\n```", "```jsx\nnvm alias default node\nnvm alias default 10\nnvm alias default 6.14.3\n```", "```jsx\ntoUpperCase(['foo', 'bar']) // ['FOO', 'BAR']\n```", "```jsx\nconst toUpperCase = input => { \n  const output = []\n\n  for (let i = 0; i < input.length; i++) { \n    output.push(input[i].toUpperCase())\n  } \n\n  return output\n}\n```", "```jsx\nconst toUpperCase = input => input.map(value => value.toUpperCase())\n```", "```jsx\nconst toggleButton = document.querySelector('#toggle')\n\ntoogleButton.addEventListener('click', () => {\n  if (toggleButton.classList.contains('on')) {\n    toggleButton.classList.remove('on')\n    toggleButton.classList.add('off')\n  } else {\n    toggleButton.classList.remove('off')\n    toggleButton.classList.add('on')\n  }\n})\n```", "```jsx\n// To turn on the Toggle\n<Toggle on />\n\n// To turn off the toggle\n<Toggle />\n```", "```jsx\n  { \n    type: Title, \n    props: { \n      color: 'red', \n      children: 'Hello, Title!' \n    } \n  }\n```", "```jsx\n  { \n    type: Title, \n    props: { \n      color: 'red', \n      children: { \n        type: 'h1', \n        props: { \n          children: 'Hello, H1!' \n        } \n      } \n    } \n  }\n```", "```jsx\n{{#items}} \n  {{#first}} \n    <li><strong>{{name}}</strong></li> \n  {{/first}} \n {{#link}} \n    <li><a href=\"{{url}}\">{{name}}</a></li> \n  {{/link}} \n{{/items}}\n```", "```jsx\nreturn ( \n  <button style={{ color: 'red' }} onClick={this.handleClick}> \n    Click me! \n  </button> \n)\n```", "```jsx\nconst divStyle = { \n  color: 'white', \n  backgroundImage: `url(${imgUrl})`, \n  WebkitTransition: 'all', // note the capital 'W' here \n  msTransition: 'all' // 'ms' is the only lowercase vendor prefix \n}\n\nReactDOM.render(<div style={divStyle}>Hello World!</div>, mountNode)\n```", "```jsx\nnpm install -g create-react-app\n```", "```jsx\ncreate-react-app hello-world --template typescript\n```", "```jsx\nnpm start\n```", "```jsx\nfunction isPalindrome(word) {\n  const lowerCaseWord = word.toLowerCase()\n  const reversedWord = lowerCaseWord.split('').reverse().join('')\n\n  return lowerCaseWord === reversedWord\n}\n```", "```jsx\nfunction isPalindrome(word: string): boolean {\n  const lowerCaseWord = word.toLowerCase()\n  const reversedWord = lowerCaseWord.split('').reverse().join('')\n\n  return lowerCaseWord === reversedWord\n}\n```", "```jsx\nconsole.log(isPalindrome('Level')) // true\nconsole.log(isPalindrome('Anna')) // true console.log(isPalindrome('Carlos')) // false\nconsole.log(isPalindrome(101)) // TS Error\nconsole.log(isPalindrome(true)) // TS Error\nconsole.log(isPalindrome(false)) // TS Error\n```", "```jsx\ntype User = {\n  username: string\n  email: string\n  name: string\n  age: number\n  website: string\n  active: boolean\n}\n\nconst user: User = {\n  username: 'czantany',\n  email: 'carlos@milkzoft.com',\n  name: 'Carlos Santana',\n  age: 33,\n  website: 'http://www.js.education',\n  active: true\n}\n\n// Let's suppose you will insert this data using Sequelize...\nmodels.User.create({ ...user }}\n```", "```jsx\ntype User = {\n  username: string\n  email: string\n  name: string\n  age?: number\n  website: string\n  active: boolean\n}\n```", "```jsx\ninterface User {\n  username: string\n  email: string\n  name: string\n  age?: number\n  website: string\n  active: boolean\n}\n```", "```jsx\n// Extending an interface\ninterface IWork {\n  company: string\n  position: string\n}\n\ninterface IPerson extends IWork {\n  name: string\n  age: number\n}\n\n// Extending a type\ntype TWork = {\n  company: string\n  position: string\n}\n\ntype TPerson = TWork & {\n  name: string\n  age: number\n}\n\n// Extending an interface into a type\ninterface IWork {\n  company: string\n  position: string\n}\n\ntype TPerson = IWork & {\n  name: string\n  age: number\n}\n```", "```jsx\n// Implementing an interface\ninterface IWork {\n  company: string\n  position: string\n}\n\nclass Person implements IWork {\n  name: 'Carlos'\n  age: 33\n}\n\n// Implementing a type\ntype TWork = {\n  company: string\n  position: string\n}\n\nclass Person2 implements TWork {\n  name: 'Cristina'\n  age: 32\n}\n\n// You can't implement a union type\ntype TWork2 = { company: string; position: string } | { name: string; age: number } class Person3 implements TWork2 {\n  company: 'Google'\n  position: 'Senior Software Engineer'\n}\n```", "```jsx\ninterface IUser {\n  username: string\n  email: string\n  name: string\n  age?: number\n  website: string\n  active: boolean\n}\n\ninterface IUser {\n  country: string\n}\n\nconst user: IUser = {\n  username: 'czantany',\n  email: 'carlos@milkzoft.com',\n  name: 'Carlos Santana',\n  country: 'Mexico',\n  age: 33,\n  website: 'http://www.js.education',\n  active: true\n}\n```"]