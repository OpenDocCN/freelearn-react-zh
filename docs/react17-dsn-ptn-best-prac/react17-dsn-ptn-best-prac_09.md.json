["```jsx\nimport { useState, ChangeEvent, MouseEvent } from 'react' const Uncontrolled = () => {\n  const [value, setValue] = useState('')\n\n  return (\n    <form> \n<input type=\"text\" /> \n      <button>Submit</button> \n </form>  ) \n}\n\nexport default Uncontrolled\n```", "```jsx\nconst handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n  console.log(e.target.value)\n}\n```", "```jsx\nreturn (\n  <form> \n <input type=\"text\" onChange={handleChange} /> \n    <button>Submit</button> \n </form> \n)\n```", "```jsx\nR\nRe\nRea\nReac\nReact\n```", "```jsx\nconst handleChange = (e: ChangeEvent<HTMLInputElement>) => { \n  setValue(e.target.value)\n}\n```", "```jsx\nconst handleSubmit = (e: MouseEvent<HTMLButtonElement>) => { \n  e.preventDefault()\n\n  console.log(value)\n}\n```", "```jsx\nconst [firstName, setFirstName] = useState('')\nconst [lastName, setLastName] = useState('')\n```", "```jsx\nconst handleChangeFirstName = ({ target: { value } }) => {\n  setFirstName(value) \n} \n\nconst handleChangeLastName = ({ target: { value } }) => {\n  setLastName(value) \n}\n```", "```jsx\nconst handleSubmit = (e: MouseEvent<HTMLButtonElement>) => { \n  e.preventDefault()\n\n  console.log(`${firstName} ${lastName}`)\n}\n```", "```jsx\nreturn ( \n  <form onSubmit={handleSubmit}> \n    <input type=\"text\" onChange={handleChangeFirstName} /> \n    <input type=\"text\" onChange={handleChangeLastName} /> \n    <button>Submit</button> \n  </form> \n)\n```", "```jsx\nconst [values, setValues] = useState({ firstName: '', lastName: '' })\n```", "```jsx\nconst handleChange = ({ target: { name, value } }) => {    \n  setValues({ \n    ...values,\n    [name]: value\n  })\n}\n```", "```jsx\nreturn ( \n  <form onSubmit={handleSubmit}> \n    <input \n type=\"text\" \n      name=\"firstName\" \n      onChange={handleChange} \n    /> \n    <input \n type=\"text\" \n      name=\"lastName\" \n      onChange={handleChange} \n    /> \n <button>Submit</button> \n </form> \n)\n```", "```jsx\nconst Controlled = () => ( \n  <form> \n <input type=\"text\" value=\"Hello React\" /> \n <button>Submit</button> \n </form> \n)\n```", "```jsx\nYou provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field.\n```", "```jsx\nimport { useState } from 'react'\n\nconst Controlled = () => {\n  return (\n    <form> \n <input type=\"text\" defaultValue=\"Hello React\" /> \n      <button>Submit</button> \n </form> \n  )\n}\n\nexport default Controlled\n```", "```jsx\nconst [values, setValues] = useState({ firstName: 'Carlos', lastName: 'Santana' })\n```", "```jsx\nconst handleChange = ({ target: { name, value } }) => { \n  setValues({ \n    [name]: value \n  })\n} \n\nconst handleSubmit = (e) => { \n  e.preventDefault()\n\n  console.log(`${values.firstName} ${values.lastName}`)\n}\n```", "```jsx\nreturn ( \n  <form onSubmit={handleSubmit}> \n    <input \n type=\"text\" \n      name=\"firstName\" \n      value={values.firstName} \n      onChange={handleChange} \n    /> \n <input \n type=\"text\" \n      name=\"lastName\" \n      value={values.lastName} \n      onChange={handleChange} \n    /> \n <button>Submit</button> \n </form> \n)\n```", "```jsx\nconst Button = () => {\n\n}\n\nexport default Button\n```", "```jsx\nconst handleClick = (syntheticEvent) => { \n  console.log(syntheticEvent instanceof MouseEvent)\n  console.log(syntheticEvent.nativeEvent instanceof MouseEvent)\n}\n```", "```jsx\nreturn ( \n  <button onClick={handleClick}>Click me!</button> \n)\n```", "```jsx\n<button \n onClick={handleClick} \n  onDoubleClick={handleDoubleClick} \n> \n  Click me! \n</button>\n```", "```jsx\nconst handleEvent = (event) => { \n  switch (event.type) { \n    case 'click': \n      console.log('clicked')\n      break\n\n    case 'dblclick': \n      console.log('double clicked')\n      break\n\n    default: \n      console.log('unhandled', event.type)\n  } \n}\n```", "```jsx\nreturn ( \n  <button \n    onClick={handleEvent} \n    onDoubleClick={handleEvent} \n  > \n    Click me! \n  </button> \n) \n```", "```jsx\nimport { useRef } from 'react'\n const Focus = () => {\n  const inputRef = useRef(null)\n}\n\nexport default Focus\n```", "```jsx\nconst handleClick = () => { \n  inputRef.current.focus()\n} \n```", "```jsx\nreturn ( \n  <> \n    <input \n      type=\"text\" \n      ref={inputRef} \n    /> \n    <button onClick={handleClick}>Set Focus</button> \n  </> \n)\n```", "```jsx\nnpm install --save react-addons-css-transition-group @types/react-addons-css-transition-group\n```", "```jsx\nimport CSSTransitionGroup from 'react-addons-css-transition-group'\n```", "```jsx\nconst Transition = () => ( \n  <CSSTransitionGroup \n    transitionName=\"fade\" \n    transitionAppear \n    transitionAppearTimeout={500} \n  > \n    <h1>Hello React</h1> \n  </CSSTransitionGroup> \n)\n```", "```jsx\n.fade-appear { \n  opacity: 0.01; \n}\n```", "```jsx\n.fade-appear.fade-appear-active { \n  opacity: 1; \n  transition: opacity .5s ease-in; \n}\n```", "```jsx\nnpm install --save react-motion @types/react-motion\n```", "```jsx\nimport { Motion, spring } from 'react-motion'\n```", "```jsx\nconst Transition = () => ( \n  <Motion \n    defaultStyle={{ opacity: 0.01 }} \n    style={{ opacity: spring(1) }} \n  > \n    {interpolatingStyle => ( \n      <h1 style={interpolatingStyle}>Hello React</h1> \n    )} \n  </Motion> \n)\n```", "```jsx\nconst Circle = ({ x, y, radius, fill }) => ( \n  <svg> \n <circle cx={x} cy={y} r={radius} fill={fill} /> \n  </svg> \n)\n```", "```jsx\n<Circle x={20} y={20} radius={20} fill=\"blue\" /> \n```", "```jsx\nconst Circle = ({ x, y, radius, fill = 'red' }) => (...)\n```", "```jsx\nconst RedCircle = ({ x, y, radius }) => ( \n  <Circle x={x} y={y} radius={radius} fill=\"red\" /> \n)\n```"]