["```jsx\nconst Profile = ({ user }) => ( \n  <> \n <Picture profileImageUrl={user.profileImageUrl} /> \n    <UserName name={user.name} screenName={user.screenName} /> \n  </> \n)\n```", "```jsx\nconst Button = ({ text }) => ( \n  <button className=\"btn\">{text}</button> \n)\n```", "```jsx\n<Button text=\"Click me!\" />\n```", "```jsx\n<button class=\"btn\">Click me!</button>\n```", "```jsx\nconst Button = ({ children }) => ( \n  <button className=\"btn\">{children}</button> \n)\n```", "```jsx\n<Button> \n  <img src=\"...\" alt=\"...\" /> \n  <span>Click me!</span> \n</Button>\n```", "```jsx\n<button class=\"btn\"> \n  <img src=\"...\" alt=\"...\" /> \n  <span>Click me!</span> \n</button>\n```", "```jsx\n<Button> \n <span>Click me!</span> \n</Button> \n```", "```jsx\nimport { useState, useEffect } from 'react'\n const Geolocation = () => {}\n\nexport default Geolocation\n```", "```jsx\nconst [latitude, setLatitude] = useState<number | null>(null)\nconst [longitude, setLongitude] = useState<number | null>(null)\n```", "```jsx\nuseEffect(() => { \n  if (navigator.geolocation) { \n    navigator.geolocation.getCurrentPosition(handleSuccess)\n  } \n}, [])\n```", "```jsx\nconst handleSuccess = ({ \n coords: { \n    latitude, \n    longitude \n  } \n}: { coords: { latitude: number; longitude: number }}) => { \n  setLatitude(latitude) \n  setLongitude(longitude)\n}\n```", "```jsx\nreturn ( \n  <div>\n    <h1>Geolocation:</h1>\n    <div>Latitude: {latitude}</div> \n    <div>Longitude: {longitude}</div> \n  </div> \n)\n```", "```jsx\nconst GeolocationContainer = () => {...}\n```", "```jsx\nreturn ( \n  <Geolocation latitude={latitude} longitude={longitude} />\n)\n```", "```jsx\nimport { FC } from 'react'\n\ntype Props = {\n  latitude: number\n  longitude: number\n}\n\nconst Geolocation: FC<Props> = ({ latitude, longitude }) => (\n  <div>\n    <h1>Geolocation:</h1>\n    <div>Latitude: {latitude}</div>\n    <div>Longitude: {longitude}</div>\n  </div>\n)\n\nexport default Geolocation\n```", "```jsx\nconst HoC = Component => EnhancedComponent\n```", "```jsx\nconst withClassName = Component => props => ( \n  <Component {...props} className=\"my-class\" /> \n)\n```", "```jsx\nconst MyComponent = ({ className }) => ( \n  <div className={className} /> \n)\n```", "```jsx\nconst MyComponentWithClassName = withClassName(MyComponent)\n```", "```jsx\nimport { useEffect, useState } from 'react' const withInnerWidth = Component => props => {\n  return <Component {...props} />\n}\n```", "```jsx\nconst withInnerWidth = Component => props => {\n  const [innerWidth, setInnerWidth] = useState(window.innerWidth)\n\n  const handleResize = () => {\n    setInnerWidth(window.innerWidth)\n  }\n\n  return <Component {...props} />\n}\n```", "```jsx\nuseEffect(() => {\n  window.addEventListener('resize', handleResize)\n\n  return () => { // <<< This emulates the componentWillUnmount\n    window.removeEventListener('resize', handleResize)\n  }\n}, []) // <<< This emulates the componentDidMount\n```", "```jsx\nreturn <Component {...props} innerWidth={innerWidth} />\n```", "```jsx\nconst MyComponent = ({ innerWidth }) => { \n  console.log('window.innerWidth', innerWidth)\n  ... \n}\n```", "```jsx\nconst MyComponentWithInnerWidth = withInnerWidth(MyComponent)\n```", "```jsx\n<MyComponent innerWidth={320} /> \n```", "```jsx\n<MyComponent innerWidth={960} /> \n```", "```jsx\nconst FunctionAsChild = ({ children }) => children()\n```", "```jsx\n<FunctionAsChild> \n  {() => <div>Hello, World!</div>} \n</FunctionAsChild>\n```", "```jsx\nconst Name = ({ children }) => children('World')\n```", "```jsx\n<Name> \n  {name => <div>Hello, {name}!</div>} \n</Name>\n```", "```jsx\n<Fetch url=\"...\"> \n  {data => <List data={data} />} \n</Fetch> \n```"]