- en: Managing Data
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 管理数据
- en: '**Proper data fetching** goes through some of the most common patterns to make
    a child and parent communicate using callbacks. We''ll learn how we can use a
    common parent to share data across components that are not directly connected.
    We will then start learning about the new React Context API and React Suspense.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**适当的数据获取**经历了一些最常见的模式，以使子代和父代使用回调进行通信。我们将学习如何使用一个共同的父代来在不直接连接的组件之间共享数据。然后我们将开始学习新的React上下文API和React
    Suspense。'
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: React Context API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React上下文API
- en: How to consume a context with useContext
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用useContext消耗上下文
- en: How to use React Suspense with SWR
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用React Suspense与SWR
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete this chapter, you will need the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，您将需要以下内容：
- en: Node.js 12+
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 12+
- en: Visual Studio Code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: 'You can find the code for this chapter in the book''s GitHub repository: [https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter06).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在书的GitHub存储库中找到本章的代码：[https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/React-17-Design-Patterns-and-Best-Practices-Third-Edition/tree/main/Chapter06)。
- en: Introducing the React Context API
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍React上下文API
- en: The React Context API has been officially added since version 16.3.0; before
    it was just experimental. The new Context API is a game-changer. A lot of people
    are moving away from Redux in order to use the new Context API. Context provides
    a way to share data between components without passing a prop to all the child
    components.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本16.3.0以来，React上下文API已正式添加；在此之前，它只是实验性的。新的上下文API是一个改变游戏规则的东西。许多人正在摆脱Redux，以使用新的上下文API。上下文提供了一种在组件之间共享数据的方法，而无需将prop传递给所有子组件。
- en: Let's see a basic example where we can use the new Context API. We will do the
    same example we did in *Chapter 3, React Hooks*, where we fetched some GitHub
    issues, but now using the Context API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个基本示例，我们可以在其中使用新的上下文API。我们将在*第3章React Hooks*中做相同的示例，我们在那里获取了一些GitHub问题，但现在使用上下文API。
- en: Creating our first context
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的第一个上下文
- en: The first thing you need to do is to create the issue context. For this, you
    can create a folder called `contexts` inside your `src` folder and then inside
    that, add the `Issue.tsx`  file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的第一件事是创建问题上下文。为此，您可以在`src`文件夹内创建一个名为`contexts`的文件夹，然后在其中添加`Issue.tsx`文件。
- en: 'Then, you need to import some functions from React and `axios`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要从React和`axios`导入一些函数：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'At this point, it is clear that you should install `axios`. If you still don''t
    have it, just do the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，很明显您应该安装`axios`。如果您还没有，请执行以下操作：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then we need to declare our interfaces:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要声明我们的接口：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first thing we need to do after this is to create our context by using
    the `createContext` function and define the value we want to export:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们需要做的第一件事是使用`createContext`函数创建我们的上下文，并定义我们要导出的值：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once we have `IssueContext`, we need to create a component where we can receive
    props, set some states, and perform the fetch by using `useEffect`, and then we
    render `IssueContext.Provider` where we specify the context (value) we will export:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了`IssueContext`，我们需要创建一个组件，我们可以在其中接收props，设置一些状态，并使用`useEffect`执行获取，然后我们渲染`IssueContext.Provider`，在那里我们指定上下文（值）我们将导出：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you know, every time you want to use a function inside the `useEffect` Hook,
    you need to wrap your function with the `useCallback` Hook. A good practice if
    you want to use `async/await` is to have it in a separate function and not directly
    in `useEffect`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，每当您想在`useEffect` Hook中使用函数时，您需要使用`useCallback` Hook包装您的函数。如果您想使用`async/await`，一个好的做法是将其放在一个单独的函数中，而不是直接放在`useEffect`中。
- en: Once we perform the fetch and get the data in our `issues` state, then we add
    all the values we want to export as context, then when we render `IssueContext.Provider`,
    we pass the context on the `value` prop, and finally, we render the children of
    the component.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们执行获取并将数据放入我们的`issues`状态中，然后我们将所有要导出为上下文的值添加到`IssueContext.Provider`中，然后当我们渲染`IssueContext.Provider`时，我们将上下文传递给`value`属性，最后，我们渲染组件的子组件。
- en: Wrapping our components with the provider
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用提供者包装我们的组件
- en: The way you consume a context is divided into two parts. The first one is where
    you wrap your app with your context provider, so this code can be added to `App.tsx`
    (normally all the providers are defined in parent components).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您消费上下文的方式分为两部分。第一部分是您用上下文提供者包装您的应用程序，因此这段代码可以添加到`App.tsx`（通常所有提供者都在父组件中定义）。
- en: 'Notice that here we are importing the `IssueProvider` component:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里我们正在导入`IssueProvider`组件：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see we are wrapping the `Issues` component with `IssueProvider`,
    which means inside the `Issues` component we can consume our context and get the
    issues value.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们正在用`IssueProvider`包装`Issues`组件，这意味着在`Issues`组件内部，我们可以使用我们的上下文并获取问题的值。
- en: Many people get confused with this sometimes. If you forget to wrap your components
    with the provider, then you can't consume your context inside your components,
    and the hard part is that you probably won't get any error; you will just get
    some undefined data, which makes this hard to identify.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候很多人会感到困惑。如果您忘记用提供者包装您的组件，那么您就无法在组件内部使用您的上下文，而困难的部分是您可能不会得到任何错误；您只会得到一些未定义的数据，这使得很难识别。
- en: Consuming context with useContext
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用useContext消费上下文
- en: If you've already placed `IssueProvider` in `App.tsx`, now you can consume your
    context in your `Issues` component by using the `useContext` Hook.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在`App.tsx`中放置了`IssueProvider`，现在您可以通过使用`useContext` Hook在`Issues`组件中消费您的上下文。
- en: 'Notice that here we are importing the `IssueContext` context (between `{ }`):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里我们正在导入`IssueContext`上下文（在`{}`之间）：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you did everything correctly, you should be able to see the issues list:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做得正确，你应该能够看到问题列表：
- en: '![](assets/6edba673-ea96-4588-a2b8-d86791557dd5.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6edba673-ea96-4588-a2b8-d86791557dd5.png)'
- en: The Context API is super useful when you want to separate your application from
    your data and do all the fetching in there. Of course, there are multiple uses
    for the Context API, which can also  be used for theming or to pass functions;
    it all depends on your application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要将应用程序与数据分离并在其中执行所有获取操作时，上下文API非常有用。当然，上下文API有多种用途，也可以用于主题设置或传递函数；这完全取决于您的应用程序。
- en: In the next section, we are going to learn how to implement React Suspense using
    the SWR  library.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用SWR库实现React Suspense。
- en: Introducing React Suspense with SWR
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍React Suspense与SWR
- en: 'React Suspense was introduced in React 16.6\. Right now (April 2021) this feature
    is still experimental and you should not use it in your production applications.
    Suspense lets you suspend component rendering until a condition is met. You can
    render a loading component or anything you want as a fallback of Suspense. Right
    now there are only two use cases for this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: React Suspense是在React 16.6中引入的。现在（2021年4月）这个功能仍然是实验性的，你不应该在生产应用程序中使用它。Suspense允许您暂停组件渲染直到满足条件。您可以渲染一个加载组件或任何您想要的作为Suspense的回退。目前只有两种用例：
- en: '**Code splitting**: When you split your application and you''re waiting to
    download a chunk of your app when a user wants to access it'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码拆分：当您拆分应用程序并等待在用户要访问时下载应用程序的一部分时
- en: '**Data fetching**: When you''re fetching data'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据获取**：当您获取数据时'
- en: In both scenarios, you can render a fallback, which can normally be a loading
    spinner, some loading text, or even better, a placeholder skeleton.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，您可以呈现一个回退，通常可以是加载旋转器、一些加载文本，甚至更好的是占位符骨架。
- en: '**WARNING**: The new React Suspense feature is still experimental so I recommend
    you do not use it on production because it is not yet available in a stable release.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**：新的React Suspense功能仍处于实验阶段，因此我建议您不要在生产环境中使用它，因为它尚未在稳定版本中可用。'
- en: Introducing SWR
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍SWR
- en: '**Stale-While-Revalidate** (**SWR**) is a React Hook for data fetching; it
    is an HTTP cache invalidation strategy. SWR is a strategy to first return the
    data from cache (stale), then send the fetch request (revalidate), and finally,
    return with up-to-date data, and was developed by Vercel, the company that created
    Next.js.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**过时-同时重新验证**（**SWR**）是用于数据获取的React Hook；它是一种HTTP缓存失效策略。SWR是一种策略，首先从缓存中返回数据（过时），然后发送获取请求（重新验证），最后返回最新的数据，并由创建Next.js的公司Vercel开发。'
- en: Building a Pokedex!
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建宝可梦图鉴！
- en: I could not find a better example to explain React Suspense and SWR than building
    a Pokedex. We will use a public Pokemon API ([https://pokeapi.co](https://pokeapi.co));
    *gotta catch 'em all*!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我找不到一个更好的例子来解释React Suspense和SWR，比构建宝可梦图鉴更好的例子。我们将使用一个公共的宝可梦API（[https://pokeapi.co](https://pokeapi.co)）；*
    gotta catch 'em all *！
- en: 'The first thing you need to do is to install some packages:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的第一件事是安装一些软件包：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For this example, you will need to create the Pokemon directory at `src/components/Pokemon`.
    The first thing we need to do to work with SWR is to create a fetcher file where
    we will perform our requests.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，您需要在`src/components/Pokemon`目录下创建Pokemon目录。我们需要做的第一件事是创建一个fetcher文件，我们将在其中执行我们的请求，以便使用SWR。
- en: 'This file should be created at `src/components/Pokemon/fetcher.ts`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件应创建在`src/components/Pokemon/fetcher.ts`：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you notice, we are returning an object with an error if the response is not
    successful. This is because sometimes we can get a 404 error from the API that
    can cause the app to break.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您注意到，如果响应不成功，我们将返回一个带有错误的对象。这是因为有时我们可以从API获取404错误，这可能导致应用程序崩溃。
- en: 'Once you have created your fetcher, let''s modify `App.tsx` to configure `SWRConfig`
    and enable Suspense:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了fetcher文件后，让我们修改`App.tsx`以配置`SWRConfig`并启用Suspense：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, we need to wrap our `PokeContainer` component inside `SWRConfig`
    to be able to fetch the data. The `PokeContainer` component will be our parent
    component where we will add our first Suspense. This file exists at `src/components/Pokemon/PokeContainer.tsx`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们需要将我们的`PokeContainer`组件包装在`SWRConfig`内，以便能够获取数据。`PokeContainer`组件将是我们的父组件，在那里我们将添加我们的第一个Suspense。此文件位于`src/components/Pokemon/PokeContainer.tsx`：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, we are defining a fallback for our first Suspense, which is
    just `Loading Pokedex...` text. You can render whatever you want in there, React
    components or plain text. Then, we have our `Pokedex` component inside Suspense.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们为我们的第一个Suspense定义了一个回退，即`加载宝可梦图鉴...`文本。您可以在其中呈现任何您想要的东西，React组件或纯文本。然后，我们在Suspense中有我们的`Pokedex`组件。
- en: 'Now let''s take a look at our `Pokedex` component where we are going to fetch
    data for the first time by using the `useSWR` Hook:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看我们的`Pokedex`组件，我们将首次使用`useSWR` Hook来获取数据：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, we are fetching the first 150 Pokemon because I'm old school
    and those were the first generation. Right now I don't know how many Pokemon exist.
    Also, if you notice, we are grabbing the `results` variable that comes from the
    data (this is the actual response from the API). Then we map our results to render
    each Pokemon but we add a Suspense component to each one with a `<LoadingSkeleton
    />` fallback (`<StyledGrid />` has some CSS styles to make it look nicer), and
    finally, we pass `pokemonName` to our `<Pokemon>` component, and this is because
    the first fetch just brings us the name of the Pokemon but we need to do another
    fetch to bring the actual Pokemon data (name, types, power, and so on).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们正在获取前150只宝可梦，因为我是老派的，那些是第一代。现在我不知道有多少只宝可梦存在。另外，如果你注意到，我们正在获取来自数据的`results`变量（这是API的实际响应）。然后我们将我们的结果映射到每个宝可梦上，但我们为每个宝可梦添加了一个悬念组件，带有`<LoadingSkeleton
    />`回退（`<StyledGrid />`有一些CSS样式，使其看起来更漂亮），最后，我们将`pokemonName`传递给我们的`<Pokemon>`组件，这是因为第一次获取只带来了宝可梦的名字，但我们需要再次获取实际的宝可梦数据（名字、类型、力量等）。
- en: 'Then, finally, our Pokemon component will perform a specific fetch by the Pokemon
    name and will render the data:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，最后，我们的宝可梦组件将通过宝可梦的名字执行特定的获取并渲染数据：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Basically, in this component, we put together all the Pokemon data (`id`, `name`,
    `sprites`, and `types`) and we render the information. As you have seen, I''m
    using `styled` components, which are amazing, so if you want to know the styles
    I''m using for `Pokedex`, here is the `Pokemon.styled.ts` file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，在这个组件中，我们汇总了所有的宝可梦数据（`id`、`name`、`sprites`和`types`），然后渲染信息。正如你所看到的，我正在使用`styled`组件，这太棒了，所以如果你想知道我为`Pokedex`使用的样式，这里是`Pokemon.styled.ts`文件：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, our `LoadingSkeleton` component should be like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的`LoadingSkeleton`组件应该是这样的：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This library is amazing. It lets you create skeleton placeholders to wait for
    the data. Of course, you can build as many forms as you want. You have probably  seen
    this effect on sites such as LinkedIn or YouTube.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库太棒了。它让你创建骨架占位符来等待数据。当然，你可以建立任意多的形式。你可能在LinkedIn或YouTube等网站上看到过这种效果。
- en: Testing our React Suspense
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试我们的React悬念
- en: 'Once you have all the pieces of the code working, there is a trick you can
    do in order to see all the Suspense fallbacks. Normally, if you have a high-speed
    connection, it is hard to see it, but you can slow down your connection to see
    how everything is being rendered. You can do this by selecting Slow 3G connection
    in your Network tab on your Chrome inspector:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的代码所有部分都运行正常，有一个技巧可以让你看到所有的悬念回退。通常，如果你有高速连接，很难看到它，但你可以减慢你的连接速度，看看所有东西是如何被渲染的。你可以在Chrome检查器的网络选项卡中选择慢速3G连接来做到这一点。
- en: '![](assets/b8f1b87e-300c-4b20-a642-990ebc8d1fe0.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b8f1b87e-300c-4b20-a642-990ebc8d1fe0.png)'
- en: 'Once you set the Slow 3G preset and you run your project, the first fallback
    you will see is Loading Pokedex...:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置了慢速3G预设，并运行你的项目，你将看到的第一个回退是Loading Pokedex...：
- en: '![](assets/9060d4d4-09ec-4844-a3d7-421fcc9bb8ca.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9060d4d4-09ec-4844-a3d7-421fcc9bb8ca.png)'
- en: 'Then, you will see the Pokemon fallbacks that are rendering `SkeletonLoading`
    for each Pokemon that is being loaded:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将看到正在渲染的宝可梦回退，为每个正在加载的宝可梦渲染`SkeletonLoading`：
- en: '![](assets/6d0a18fd-d91a-4c09-89c4-4d6bffd52bde.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6d0a18fd-d91a-4c09-89c4-4d6bffd52bde.png)'
- en: 'Normally those loaders have animation but you won''t see that in this book,
    of course! And then you will start seeing how the data is rendering and some images
    start appearing:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通常这些加载器有动画，但在这本书中你当然看不到！然后你将开始看到数据是如何渲染的，一些图片开始出现：
- en: '![](assets/46590725-c067-4d2d-a269-8c48965e8361.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/46590725-c067-4d2d-a269-8c48965e8361.png)'
- en: 'If you wait until all the data has downloaded correctly, you should now  see
    the Pokedex with all the Pokemon:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你等到所有数据都正确下载了，你现在应该可以看到有所有宝可梦的宝可梦图鉴了：
- en: '![](assets/fb2507aa-63c4-4bbe-a64a-095ad5f08c09.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fb2507aa-63c4-4bbe-a64a-095ad5f08c09.png)'
- en: 'Pretty nice, huh? But there is something else to mention; as I mentioned before,
    SWR will bring the data from the cache first and then will revalidate the data
    all the time to see whether there are new updates. This means that any time the
    data changes, SWR will perform another fetch to re-validate whether the old data
    is still valid or needs to be replaced by new ones. You can see this effect even
    if you move out from the Pokedex tab to another and then you come back. You''ll
    see that your Network terminal for the first time should look like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 挺不错的，对吧？但还有一件事要提一下；就像我之前提到的，SWR会首先从缓存中获取数据，然后会一直重新验证数据，看看是否有新的更新。这意味着每当数据发生变化时，SWR都会执行另一个获取操作，以重新验证旧数据是否仍然有效，或者需要被新数据替换。即使你从宝可梦图鉴标签移出去然后再回来，你也会看到效果。你会发现你的网络终端第一次应该是这样的：
- en: '![](assets/c9f97cee-179c-447a-8df8-9cf959726b63.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c9f97cee-179c-447a-8df8-9cf959726b63.png)'
- en: 'As you can see, we performed 151 initial requests  (1 for the Pokemon lists
    and 150 others, 1 for each Pokemon), but if you change the tab and you come back,
    you will see how SWR is  fetching again:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们执行了151个初始请求（1个用于宝可梦列表，另外150个，每个宝可梦一个），但如果你切换标签然后再回来，你会看到SWR再次获取数据：
- en: '![](assets/f8cd8287-2369-430e-aaa3-906e1f4d0384.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f8cd8287-2369-430e-aaa3-906e1f4d0384.png)'
- en: Now you can see that it is performing 302 requests (another 151). This is very
    useful when you have real-time data that you want to fetch every second or every
    minute.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到它正在执行302个请求（另外151个）。当你有实时数据想要每秒或每分钟获取时，这非常有用。
- en: Right now, React Suspense does not have a defined pattern of use, which means
    you can find different ways to use it and there are not yet some good practices
    defined for this. I found SWR is the easiest and most understandable way of playing
    with React Suspense and I think it is a very powerful library that can be used
    even without Suspense.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，React Suspense还没有一个明确定义的使用模式，这意味着你可以找到不同的使用方式，目前还没有一些良好的实践方法。我发现SWR是使用React
    Suspense最简单和最容易理解的方式，我认为它是一个非常强大的库，甚至可以在没有Suspense的情况下使用。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I really hope you enjoyed reading this chapter, which contains a lot of information
    about the React Context API and how to implement React Suspense with SWR.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的希望你喜欢阅读这一章，其中包含了关于React Context API以及如何使用SWR实现React Suspense的大量信息。
- en: In the next chapter, we will learn how to handle forms and animations.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何处理表单和动画。
