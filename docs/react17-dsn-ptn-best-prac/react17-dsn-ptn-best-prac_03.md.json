["```jsx\nnpm install -g @babel/core @babel/node\n```", "```jsx\nbabel source.js -o output.js\n```", "```jsx\nnpm install -g @babel/preset-env @babel/preset-react\n```", "```jsx\n{\n  \"presets\": [\n    \"@babel/preset-env\",\n    \"@babel/preset-react\"\n  ]\n}\n```", "```jsx\n_jsx('div', {})\n```", "```jsx\n<div />\n```", "```jsx\n_jsx('button', {})\n```", "```jsx\n_jsx(Button, {})\n```", "```jsx\n<img src=\"https://www.js.education/images/logo.png\" alt=\"JS Education\" />\n```", "```jsx\n_jsx(\"img\", { \n  src: \"https://www.js.education/images/logo.png\", \n  alt: \"JS Education\" \n})\n```", "```jsx\n<a href=\"https://js.education\">Click me!</a>\n```", "```jsx\n_jsx( \n  \"a\", \n  { href: \"https://www.js.education\" }, \n  \"Click me!\" \n)\n```", "```jsx\n<div> \n  <a href=\"https://www.js.education\">Click me!</a> \n</div>\n```", "```jsx\n_jsx( \n  \"div\", \n  null, \n  _jsx( \n    \"a\", \n    { href: \"https://www.js.education\" }, \n    \"Click me!\" \n  ) \n)\n```", "```jsx\n<div> \n  Hello, {variable}. \n  I'm a {() => console.log('Function')}. \n</div> \n```", "```jsx\n<a href={this.createLink()}>Click me!</a>\n```", "```jsx\n<label className=\"awesome-label\" htmlFor=\"name\" />\n```", "```jsx\n<div style={{ backgroundColor: 'red' }} />\n```", "```jsx\nconst styles = {\n  backgroundColor: 'red'\n} \n\n<div style={styles} /> \n```", "```jsx\n<div />\n<div />\n```", "```jsx\nAdjacent JSX elements must be wrapped in an enclosing tag.\n```", "```jsx\n<div> \n  <div /> \n  <div /> \n</div>\n```", "```jsx\nreturn [\n  <li key=\"1\">First item</li>, \n  <li key=\"2\">Second item</li>, \n  <li key=\"3\">Third item</li>\n]\n```", "```jsx\nreturn 'Hello World!'\n```", "```jsx\nimport { Fragment } from 'react'\n\nreturn ( \n  <Fragment>\n    <h1>An h1 heading</h1> \n    Some text here. \n    <h2>An h2 heading</h2> \n    More text here.\n    Even more text here.\n  </Fragment>\n)\n```", "```jsx\nreturn ( \n  <>\n    <ComponentA />\n    <ComponentB />\n    <ComponentC />\n  </>\n)\n```", "```jsx\n<div> \n  <span>My</span> \n  name is \n  <span>Carlos</span> \n</div>\n```", "```jsx\n<div> \n  <span>My</span> \n  {' '}\n  name is\n  {' '} \n  <span>Carlos</span> \n</div>\n```", "```jsx\n<button disabled /> \nReact.createElement(\"button\", { disabled: true })\n```", "```jsx\n<button disabled={false} /> \nReact.createElement(\"button\", { disabled: false })\n```", "```jsx\nconst attrs = { \n  id: 'myId',\n  className: 'myClass'\n}\n\nreturn <div {...attrs} />\n```", "```jsx\nvar attrs = { \n  id: 'myId',\n  className: 'myClass'\n} \n\nreturn _jsx('div', attrs)\n```", "```jsx\nconst name = `Carlos`\nconst multilineHtml = `<p>\n This is a multiline string\n </p>`\nconsole.log(`Hi, my name is ${name}`)\n```", "```jsx\n<div> \n <Header /> \n <div> \n <Main content={...} /> \n  </div> \n</div>\n```", "```jsx\n<div><Header /><div><Main content={...} /></div></div>\n```", "```jsx\n<div> \n <Alert>{message}</Alert> \n  <Button>Close</Button> \n</div>\n```", "```jsx\nreturn <div />\n```", "```jsx\nreturn \n  <div />\n```", "```jsx\nreturn\n_jsx(\"div\", null)\n```", "```jsx\nreturn ( \n  <div /> \n)\n```", "```jsx\n<button \n  foo=\"bar\" \n  veryLongPropertyName=\"baz\" \n  onSomething={this.handleSomething} \n/>\n```", "```jsx\nlet button\n\nif (isLoggedIn) { \n  button = <LogoutButton />\n} \n\nreturn <div>{button}</div>\n```", "```jsx\n<div> \n  {isLoggedIn && <LoginButton />} \n</div>\n```", "```jsx\nlet button\n\nif (isLoggedIn) { \n  button = <LogoutButton />\n} else { \n  button = <LoginButton />\n} \n\nreturn <div>{button}</div>\n```", "```jsx\n<div> \n  {isLoggedIn ? <LogoutButton /> : <LoginButton />} \n</div>\n```", "```jsx\n<button [...]> \n  {isFetching ? 'Loading...' : 'Load More'} \n</button>\n```", "```jsx\n<div>\n  {dataIsReady && (isAdmin || userHasPermissions) && \n    <SecretData />\n  }\n</div>\n```", "```jsx\nconst canShowSecretData = () => { \n  const { dataIsReady, isAdmin, userHasPermissions } = props\n  return dataIsReady && (isAdmin || userHasPermissions)\n} \n\nreturn (\n  <div> \n    {this.canShowSecretData() && <SecretData />} \n  </div> )\n```", "```jsx\nconst getPrice = () => { \n  return `${props.currency}${props.value}`\n}\n\nreturn <div>{getPrice()}</div>\n```", "```jsx\nnpm install --save render-if\n```", "```jsx\nconst { dataIsReady, isAdmin, userHasPermissions } = props\n\nconst canShowSecretData = renderIf( \n  dataIsReady && (isAdmin || userHasPermissions) \n);\n\nreturn (\n  <div> \n    {canShowSecretData(<SecretData />)} \n  </div> \n);\n```", "```jsx\nnpm install --save react-only-if\n```", "```jsx\nimport onlyIf from 'react-only-if'\n\nconst SecretDataOnlyIf = onlyIf(\n  ({ dataIsReady, isAdmin, userHasPermissions }) => dataIsReady && \n  (isAdmin || userHasPermissions)\n)(SecretData)\n\nconst MyComponent = () => (\n  <div>\n    <SecretDataOnlyIf \n      dataIsReady={...}\n      isAdmin={...}\n      userHasPermissions={...}\n    />\n </div>\n)\n\nexport default MyComponent\n```", "```jsx\n<ul> \n  {users.map(user => <li>{user.name}</li>)} \n</ul>\n```", "```jsx\nnpm install --save jsx-control-statements\n```", "```jsx\n\"plugins\": [\"jsx-control-statements\"]\n```", "```jsx\n<If condition={this.canShowSecretData}> \n  <SecretData /> \n</If>\n```", "```jsx\n{canShowSecretData ? <SecretData /> : null}\n```", "```jsx\n<Choose> \n  <When condition={...}> \n    <span>if</span> \n  </When> \n <When condition={...}> \n    <span>else if</span> \n  </When> \n <Otherwise> \n <span>else</span> \n </Otherwise> \n</Choose>\n```", "```jsx\n<ul> \n <For each=\"user\" of={this.props.users}> \n    <li>{user.name}</li> \n  </For> \n</ul>\n```", "```jsx\nconst renderUserMenu = () => { \n  // JSX for user menu \n} \n\nconst renderAdminMenu = () => { \n  // JSX for admin menu \n} \n\nreturn ( \n  <div> \n <h1>Welcome back!</h1> \n    {userExists && renderUserMenu()} \n    {userIsAdmin && renderAdminMenu()} \n  </div> \n)\n```", "```jsx\nroot = true\n\n[*]\nindent_style = space \nindent_size = 2\nend_of_line = lf\ncharset = utf-8 \ntrim_trailing_whitespace = true \ninsert_final_newline = true\n\n[*.html] \nindent_size = 4\n\n[*.css] \nindent_size = 4\n\n[*.md]\ntrim_trailing_whitespace = false\n```", "```jsx\n{\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.formatOnSave\": true\n}\n```", "```jsx\n{\n \"**arrowParens**\": \"avoid\",\n \"**bracketSpacing**\": true,\n \"**jsxSingleQuote**\": false,\n \"**printWidth**\": 100,\n \"**quoteProps**\": \"as-needed\",\n \"**semi**\": false,\n \"**singleQuote**\": true,\n \"**tabWidth**\": 2,\n \"**trailingComma**\": \"none\",\n \"**useTabs**\": false\n}\n```", "```jsx\nnpm install -g eslint eslint-config-airbnb eslint-config-prettier eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-prettier eslint-plugin-react\n```", "```jsx\neslint source.ts\n```", "```jsx\n{\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\"@typescript-eslint\", \"prettier\"],\n  \"extends\": [\n    \"airbnb\",\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/eslint-recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:prettier/recommended\"\n  ],\n  \"settings\": {\n    \"import/extensions\": [\".js\", \".jsx\", \".ts\", \".tsx\"],\n    \"import/parsers\": {\n      \"@typescript-eslint/parser\": [\".ts\", \".tsx\"]\n    },\n    \"import/resolver\": {\n      \"node\": {\n        \"extensions\": [\".js\", \".jsx\", \".ts\", \".tsx\"]\n      }\n    }\n  },\n  \"rules\": {\n    \"semi\": [2, \"never\"]\n  }\n}\n```", "```jsx\nconst foo = 'bar';\n```", "```jsx\nExtra semicolon (semi) \n```", "```jsx\n\"rules\": {\n    \"semi\": [2, \"never\"],\n    \"@typescript-eslint/class-name-casing\": \"off\",\n    \"@typescript-eslint/interface-name-prefix\": \"off\",\n    \"@typescript-eslint/member-delimiter-style\": \"off\",\n    \"@typescript-eslint/no-var-requires\": \"off\",\n    \"@typescript-eslint/ban-ts-ignore\": \"off\",\n    \"@typescript-eslint/no-use-before-define\": \"off\",\n    \"@typescript-eslint/ban-ts-comment\": \"off\",\n    \"@typescript-eslint/explicit-module-boundary-types\": \"off\",\n    \"no-restricted-syntax\": \"off\",\n    \"no-use-before-define\": \"off\",\n    \"import/extensions\": \"off\",\n    \"import/prefer-default-export\": \"off\",\n    \"max-len\": [\n      \"error\",\n      {\n        \"code\": 100,\n        \"tabWidth\": 2\n      }\n    ],\n    \"no-param-reassign\": \"off\",\n    \"no-underscore-dangle\": \"off\",\n    \"react/jsx-filename-extension\": [\n      1,\n      {\n        \"extensions\": [\".tsx\"]\n      }\n    ],\n    \"import/no-unresolved\": \"off\",\n    \"consistent-return\": \"off\",\n    \"jsx-a11y/anchor-is-valid\": \"off\",\n    \"sx-a11y/click-events-have-key-events\": \"off\",\n    \"jsx-a11y/no-noninteractive-element-interactions\": \"off\",\n    \"jsx-a11y/click-events-have-key-events\": \"off\",\n    \"jsx-a11y/no-static-element-interactions\": \"off\",\n    \"react/jsx-props-no-spreading\": \"off\",\n    \"jsx-a11y/label-has-associated-control\": \"off\",\n    \"react/jsx-one-expression-per-line\": \"off\",\n    \"no-prototype-builtins\": \"off\",\n    \"no-nested-ternary\": \"off\",\n    \"prettier/prettier\": [\n      \"error\",\n      {\n        \"endOfLine\": \"auto\"\n      }\n    ]\n  }\n```", "```jsx\nnpm install --save-dev husky\n```", "```jsx\n{\n  \"scripts\": {\n    \"lint\": \"eslint --ext .tsx,.ts src\",\n    \"lint:fix\": \"eslint --ext .tsx,.ts --fix src\",\n    \"test\": \"jest src\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm lint\",\n      \"pre-push\": \"npm test\"\n    }\n  }\n}\n```", "```jsx\nconst add = (x, y) => x + y\n\nconst log = fn => (...args) => { \n return fn(...args)\n}\n\nconst logAdd = log(add)\n```", "```jsx\nconst add = (x, y) => x + y\n```", "```jsx\nlet x = 0\nconst add = y => (x = x + y)\n```", "```jsx\nconst add3 = arr => arr.push(3)\nconst myArr = [1, 2]\n\nadd3(myArr); // [1, 2, 3]\nadd3(myArr); // [1, 2, 3, 3]\n```", "```jsx\nconst add3 = arr => arr.concat(3)\nconst myArr = [1, 2]\nconst result1 = add3(myArr) // [1, 2, 3]\nconst result2 = add3(myArr) // [1, 2, 3]\n```", "```jsx\nconst add = (x, y) => x + y\n```", "```jsx\nconst add = x => y => x + y\n```", "```jsx\nconst add1 = add(1)\nadd1(2); // 3\nadd1(3); // 4\n```", "```jsx\nconst add = (x, y) => x + y\nconst square = x => x * x\n```", "```jsx\nconst addAndSquare = (x, y) => square(add(x, y))\n```", "```jsx\nUI = f(state)\n```"]