["```jsx\nclass UserEnrollmentData {\n    @observable email = '';\n    @observable password = '';\n    @observable firstName = '';\n    @observable lastName = '';\n    @observable validating = false;\n    @observable.ref errors = null;\n    @observable enrollmentStatus = 'none'; // none | pending | completed | failed\n}\n```", "```jsx\nimport { action, configure, flow } from 'mobx';\n\n**configure({ enforceActions: 'strict' });**\n\nclass UserEnrollmentData {\n    /* ... */\n\n    @action\n  setField(field, value) {\n        this[field] = value;\n    }\n\n    getFields() {\n        const { firstName, lastName, password, email } = this;\n        return { firstName, lastName, password, email }\n    }\n\n    enroll = flow(function*() {\n        this.enrollmentStatus = 'pending';\n        try {\n            // Validation\n            const fields = this.getFields();\n yield this.validateFields(fields);\n            if (this.errors) {\n                throw new Error('Invalid fields');\n            }\n\n            // Enrollment\n yield enrollUser(fields);\n\n            this.enrollmentStatus = 'completed';\n        } catch (e) {\n            this.enrollmentStatus = 'failed';\n        }\n    });\n\n}\n```", "```jsx\n**import Validate from 'validate.js';**\n\nclass UserEnrollmentData {\n\n    /* ... */\n\n    validateFields = flow(function*(fields) {\n        this.validating = true;\n        this.errors = null;\n\n        try {\n yield Validate.async(fields, rules);\n\n            this.errors = null;\n        } catch (err) {\n            this.errors = err;\n        } finally {\n            this.validating = false;\n        }\n    });\n\n    /* ... */\n}\n```", "```jsx\nclass UserEnrollmentData {\n\n    disposeValidation = null;\n\n    constructor() {\n        this.setupValidation();\n    }\n\n    setupValidation() {\n        this.disposeValidation = reaction(\n            () => {\n                const { firstName, lastName, password, email } = this;\n                return { firstName, lastName, password, email };\n            },\n            () => {\n this.validateFields(this.getFields());\n            },\n        );\n    }\n\n    /* ... */\n\n **cleanup**() {\n        this.disposeValidation();\n    }\n}\n\n```", "```jsx\nconst InputField = observer(({ store, field, label, type }) => {\n    const errors = store.errors && store.errors[field];\n    const hasError = !!errors;\n\n    return (\n        <TextField\n  fullWidth\n type={type}  value={store[field]}  label={label}   error={hasError}  onChange={event => store.setField(field, \n            event.target.value)}  margin={'normal'}   helperText={errors ? errors[0] : null}  />\n    );\n});\n```", "```jsx\nimport React from 'react';\nimport { inject  } from 'mobx-react';\nimport { Grid, TextField, Typography, } from '@material-ui/core';\n\n@inject(stores => ({ store: stores.store }))\nclass UserEnrollmentForm extends React.Component {\n    render() {\n        const { store } = this.props;\n        return (\n            <form>\n                <Grid container direction={'column'}>\n                    <CenteredGridItem>\n                        <Typography variant={'title'}>Enroll \n                        User</Typography>\n                    </CenteredGridItem>\n\n                    <CenteredGridItem>\n                        <EmailInputField store={store} />\n                    </CenteredGridItem>\n\n                    <CenteredGridItem>\n                        <**InputField**\n  type={'password'}   field={'password'}   label={'Password'}   store={store}  />\n                    </CenteredGridItem>\n\n                    <CenteredGridItem>\n                        <**InputField**\n  type={'text'}   field={'firstName'}   label={'First Name'}   store={store}  />\n                    </CenteredGridItem>\n\n                    <CenteredGridItem>\n                        <**InputField**\n  type={'text'}   field={'lastName'}   label={'Last Name'}   store={store}  />\n                    </CenteredGridItem>\n\n                    <CenteredGridItem>\n                        <EnrollButton store={store} />\n                    </CenteredGridItem>\n                </Grid>\n            </form>\n        );\n    }\n}\n```", "```jsx\nimport React from 'react';\nimport { UserEnrollmentData } from './store';\nimport { Provider } from 'mobx-react';\nimport { App } from './components';\n\nexport class FormValidationExample extends React.Component {\n    constructor(props) {\n        super(props);\n\n this.store = new UserEnrollmentData();\n    }\n\n    render() {\n        return (\n <Provider store={this.store}>\n                <App />\n            </Provider>\n        );\n    }\n\n componentWillUnmount() {\n this.store.cleanup();\n this.store = null;\n }\n}\n```", "```jsx\n@inject('store')\n@observer export class App extends React.Component {\n    render() {\n        const { store } = this.props;\n return store.enrollmentStatus === 'completed' ? (\n <EnrollmentComplete />\n ) : (\n <UserEnrollmentForm />\n );\n    }\n}\n```", "```jsx\nconst EmailInputField = observer(({ store }) => {\n    const { validating } = store;\n\n    return (\n        <Fragment>\n            <InputField\n  type={'text'}   store={store}   field={'email'}   label={'Email'}  />\n            {validating ? <LinearProgress variant={'query'} /> : null}\n        </Fragment>\n    );\n});\n```", "```jsx\nconst EnrollButton = observer(({ store }) => {\n const isEnrolling = store.enrollmentStatus === 'pending';\n const failed = store.enrollmentStatus === 'failed';\n\n    return (\n        <Fragment>\n            <Button\n  variant={'raised'}   color={'primary'}   style={{ marginTop: 20 }}   disabled={isEnrolling}   onClick={() => store.enroll()}  >\n                Enroll\n                {isEnrolling ? (\n                    <CircularProgress\n  style={{\n                            color: 'white',\n                            marginLeft: 10,\n                        }}   size={20}   variant={'indeterminate'}  />\n                ) : null}\n            </Button>\n            {failed ? (\n                <Typography color={'secondary'}  variant={'subheading'}>\n                    Failed to enroll\n                </Typography>\n            ) : null}{' '}\n        </Fragment>\n    );\n});\n```", "```jsx\nconst routes = {\n    shopping: '/',\n    cart: '/cart',\n    payment: '/payment',\n    confirm: '/confirm',\n    track: '/track',\n};\n\nexport class CheckoutWorkflow {\n    static steps = [\n        { name: 'shopping', stepClass: ShoppingStep },\n        { name: 'cart', stepClass: ShowCartStep },\n        { name: 'payment', stepClass: PaymentStep },\n        { name: 'confirm', stepClass: ConfirmStep },\n        { name: 'track', stepClass: TrackStep },\n    ];\n\n tracker = new HistoryTracker();\n    nextStepPromise = null;\n\n @observable currentStep = null;\n @observable.ref step = null;\n\n}\n```", "```jsx\nclass ShowCartStep extends WorkflowStep { /* ... */}\n\n// A mock step to simplify the representation of other steps\nclass MockWorkflowStep extends WorkflowStep { /* ... */ }\n\nclass PaymentStep extends MockWorkflowStep { /* ... */ }\nclass ConfirmStep extends MockWorkflowStep { /* ... */ }\nclass TrackStep extends MockWorkflowStep { /* ... */ }\n```", "```jsx\nclass MockWorkflowStep extends WorkflowStep {\n    getLoadOperation() {\n        return delay(1000);\n    }\n\n    getMainOperation() {\n        return delay(1000);\n    }\n}\n\nfunction delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n```", "```jsx\nclass WorkflowStep {\n    workflow = null; // the parent workflow\n @observable loadState = 'none'; // pending | completed | failed\n  @observable operationState = 'none'; // pending | completed | \n     failed    async getLoadOperation() {}\n    async getMainOperation() {}\n\n    @action.bound\n async load() {\n        doAsync(\n            () => this.getLoadOperation(),\n            state => (this.loadState = state),\n        );\n    }\n\n    @action.bound\n async perform() {\n        doAsync(\n            () => this.getMainOperation(),\n            state => (this.operationState = state),\n        );\n    }\n}\n```", "```jsx\nasync function doAsync(getPromise, setState) {\n setState('pending');\n    try {\n        await getPromise();\n        runInAction(() => {\n setState('completed');\n        });\n    } catch (e) {\n        runInAction(() => {\n setState('failed');\n        });\n    }\n}\n```", "```jsx\nclass WorkflowStep {\n    workflow = null;\n    @observable loadState = 'none'; // pending | completed | failed\n  @observable operationState = 'none'; // pending | completed | \n     failed    async getLoadOperation() {}\n    async getMainOperation() {}\n\n    @action.bound\n async load() {\n        doAsync(\n            () => this.getLoadOperation(),\n            state => (this.loadState = state),\n        );\n    }\n\n    @action.bound\n async perform() {\n        doAsync(\n            () => this.getMainOperation(),\n            state => (this.operationState = state),\n        );\n    }\n}\n```", "```jsx\nexport class CheckoutWorkflow {\n    /* ... */\n\n    tracker = new HistoryTracker();\n    nextStepPromise = null;\n\n    @observable currentStep = null;\n    @observable.ref step = null;\n\n    constructor() {\n        this.tracker.startListening(routes);\n\n this.currentStep = this.tracker.page;\n\n autorun(() => {\n            const currentStep = this.currentStep;\n\n            const stepIndex = CheckoutWorkflow.steps.findIndex(\n                x => x.name === currentStep,\n            );\n\n            if (stepIndex !== -1) {\n                this.loadStep(stepIndex);\n\n                this.tracker.page = CheckoutWorkflow.steps[stepIndex].name;\n            }\n        });\n\n reaction(\n            () => this.tracker.page,\n            page => {\n                this.currentStep = page;\n            },\n        );\n    }\n\n    @action\n  async loadStep(stepIndex) {\n        /* ... */\n    }\n}\n```", "```jsx\nexport class CheckoutWorkflow {\n    /* ... */\n\n    @action\n  async loadStep(stepIndex) {\n        if (this.nextStepPromise) {\n            this.nextStepPromise.cancel();\n        }\n\n        const StepClass = CheckoutWorkflow.steps[stepIndex].stepClass;\n        this.step = new StepClass();\n        this.step.workflow = this;\n        this.step.load();\n        this.nextStepPromise = when(\n            () => this.step.operationState === 'completed',\n        );\n\n        await this.nextStepPromise;\n\n        const nextStepIndex = stepIndex + 1;\n        if (nextStepIndex >= CheckoutWorkflow.steps.length) {\n            return;\n        }\n\n        this.currentStep = CheckoutWorkflow.steps[nextStepIndex].name;\n    }\n}\n```", "```jsx\nimport createHashHistory from 'history/createHashHistory';\nimport { observable, action, reaction } from 'mobx';\n\nexport class HistoryTracker {\n    unsubscribe = null;\n    history = createHashHistory();\n\n    @observable page = null;\n\n    constructor() {\n        reaction(\n            () => this.page,\n            page => {\n                const route = this.routes[page];\n                if (route) {\n                    this.history.push(route);\n                }\n            },\n        );\n    }\n\n    /* ... */\n}\n```", "```jsx\nexport class HistoryTracker {\n    unsubscribe = null;\n    history = createHashHistory();\n\n    @observable page = null;\n\n    startListening(routes) {\n        this.routes = routes;\n        this.unsubscribe = this.history.listen(location => {\n            this.identifyRoute(location);\n        });\n\n        this.identifyRoute(this.history.location);\n    }\n\n    stopListening() {\n        this.unsubscribe && this.unsubscribe();\n    }\n\n    @action\n  setPage(key) {\n        if (!this.routes[key]) {\n            throw new Error(`Invalid Page: ${key}`);\n        }\n\n        this.page = key;\n    }\n\n    @action\n  identifyRoute(location) {\n        const { pathname } = location;\n        const routes = this.routes;\n\n        this.page = Object.keys(routes).find(key => {\n            const path = routes[key];\n            return path.startsWith(pathname);\n        });\n    }\n}\n```", "```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport { CheckoutWorkflow } from './CheckoutWorkflow';\n\nconst workflow = new CheckoutWorkflow();\n\nexport function PageRoutingExample() {\n    return (\n        <Provider store={workflow}>\n            <App />\n        </Provider>\n    );\n}\n```", "```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Router, Switch } from 'react-router-dom';\nimport { CheckoutWorkflow } from './CheckoutWorkflow';\nimport { Paper } from '@material-ui/core/es/index';\nimport { ShowCart } from './show-cart';\nimport {\n    ConfirmDescription,\n    PaymentDescription,\n    ShoppingDescription,\n    TemplateStepComponent,\n    TrackOrderDescription,\n} from './shared';\n\nconst workflow = new CheckoutWorkflow();\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Paper elevation={2}  style={{ padding: 20 }}>\n                <Router history={workflow.tracker.history}>\n                    <Switch>\n                        <**Route**\n  exact\n path={'/'}   component={() => (\n                                <TemplateStepComponent\n  title={'MobX Shop'}   renderDescription=\n                                   {ShoppingDescription}   operationTitle={'View Cart'}  />\n                            )}  />\n                        <Route exact path={'/cart'}  component=\n                            {ShowCart} />\n                        <**Route**\n  exact\n path={'/payment'}   component={() => (\n                                <TemplateStepComponent\n  title={'Choose Payment'}   renderDescription=\n                                    {PaymentDescription}   operationTitle={'Confirm'}  />\n                            )}  />\n                        <**Route**\n  exact\n path={'/confirm'}   component={() => (\n                                <TemplateStepComponent\n  title={'Your order is confirmed'}   operationTitle={'Track Order'}   renderDescription=\n                                     {ConfirmDescription}  />\n                            )}  />\n                        <**Route**\n  exact\n path={'/track'}   component={() => (\n                                <TemplateStepComponent\n  title={'Track your order'}   operationTitle={'Continue \n                                      Shopping'}   renderDescription=\n                                     {TrackOrderDescription}  />\n                            )}  />\n                    </Switch>\n                </Router>\n            </Paper>\n        );\n    }\n}\n```", "```jsx\n@inject('store')\nexport class TemplateStepComponent extends React.Component {\n    static defaultProps = {\n        title: 'Step Title',\n        operationTitle: 'Operation',\n        renderDetails: step => 'Some Description', // A render-prop to render details of a step\n    };\n\n    render() {\n        const { title, operationTitle, renderDetails } = this.props;\n\n        return (\n            <Fragment>\n                <Typography\n  variant={'headline'}   style={{ textAlign: 'center' }}  >\n                    {title}\n                </Typography>\n\n <Observer>\n {() => {\n const { step } = this.props.store;\n\n return (\n <OperationStatus\n  state={step.loadState}   render={() => (\n <div style={{ padding: '2rem 0' }}>\n {renderDetails(step)}\n </div>\n )}  />\n );\n }}\n </Observer>\n\n                <Grid justify={'center'}  container>\n <Observer>\n                        {() => {\n                            const { step } = this.props.store;\n\n                            return (\n                                <Button\n  variant={'raised'}   color={'primary'}   disabled={step.operationState === \n 'pending'}   onClick={step.perform}>\n                                    {operationTitle}\n                                    {step.operationState === 'pending'                           \n                                         ? (\n                                        <CircularProgress\n  variant={'indeterminate'}   size={20}   style={{\n                                                color: 'black',\n                                                marginLeft: 10,\n                                            }}  />\n                                    ) : null}\n                                </Button>\n                            );\n                        }}\n </Observer>\n                </Grid>\n            </Fragment>\n        );\n    }\n}\n```", "```jsx\n<Observer>\n    {() => {\n const { step } = this.props.store;\n\n        return (\n            <OperationStatus\n  state={step.loadState}   render={() => (\n                    <div style={{ padding: '2rem 0' }}>\n                        {renderDetails(step)}\n                    </div>\n                )}  />\n        );\n    }}\n</Observer>\n```", "```jsx\nimport React from 'react';\nimport {\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Typography,\n} from '@material-ui/core';\nimport { Divider } from '@material-ui/core/es/index';\nimport { TemplateStepComponent } from './shared';\n\nexport class ShowCart extends React.Component {\n    render() {\n        return (\n            <**TemplateStepComponent**\n  title={'Your Cart'}   operationTitle={'Checkout'}  renderDetails={step => {\n const { items, itemTotal } = step;\n\n return (\n <List>\n {items.map(item => (\n <CartItem key={item.title}  item={item} />\n ))}\n\n <Divider />\n\n <TotalItem total={itemTotal} />\n </List>\n );\n }} />\n        );\n    }\n}\n\nfunction CartItem({ item }) {\n    return (\n        /* ... */\n    );\n}\n\nfunction TotalItem({ total }) {\n    return (\n        /* ... */\n    );\n}\n```"]