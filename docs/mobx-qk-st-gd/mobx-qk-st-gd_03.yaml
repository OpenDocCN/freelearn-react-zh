- en: A React App with MobX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个带有MobX的React应用
- en: Working with React is fun. Now, couple that with MobX for all your state management
    needs, and you have a supercharged combination. With the basics of MobX out of
    the way, we can now venture into building a simple React app using the ideas discussed
    so far. We will tackle the process of defining an observable state, the actions
    that can be invoked on that state, and the React UI that will observe and render
    the changing state.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React很有趣。现在，再加上MobX来满足所有你的状态管理需求，你就有了一个超级组合。基本的MobX已经完成，我们现在可以进入使用之前讨论过的想法来构建一个简单的React应用。我们将处理定义可观察状态的过程，可以在该状态上调用的操作，以及观察和呈现变化状态的React
    UI。
- en: 'The topics covered in this chapter include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括以下内容：
- en: The book search use-case
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书籍搜索用例
- en: Creating the observable state and actions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可观察状态和操作
- en: Building the Reactive UI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建响应式UI
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will be required to have JavaScript programming language. Finally, to use
    the Git repository of this book, the user needs to install Git.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要有JavaScript编程语言。最后，要使用本书的Git存储库，用户需要安装Git。
- en: 'The code files of this chapter can be found on GitHub:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到：
- en: '[https://github.com/PacktPublishing/MobX-Quick-Start-Guide/tree/master/src/Chapter03](https://github.com/PacktPublishing/MobX-Quick-Start-Guide/tree/master/src/Chapter03)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/MobX-Quick-Start-Guide/tree/master/src/Chapter03](https://github.com/PacktPublishing/MobX-Quick-Start-Guide/tree/master/src/Chapter03)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码是如何运行的：
- en: '[http://bit.ly/2v0HnkW](http://bit.ly/2v0HnkW)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2v0HnkW](http://bit.ly/2v0HnkW)'
- en: The book search
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 书籍搜索
- en: The use-case for our simple React app is one from traditional e-commerce applications,
    that is, searching for a product in a giant inventory. In our case, the search
    is for books. We will use the *Goodreads* API to search for a book by title or
    author. Goodreads requires us to register an account to use their API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简单的React应用的用例是传统电子商务应用程序之一，即在巨大的库存中搜索产品。在我们的案例中，搜索的是书籍。我们将使用*Goodreads* API来按标题或作者搜索书籍。Goodreads要求我们注册一个帐户来使用他们的API。
- en: Create a Goodreads account by visiting this URL: [https://www.goodreads.com/api/keys](https://www.goodreads.com/api/keys). You
    can use your Amazon or Facebook account to log in. Once you have the account,
    you need to generate an API key to make the API calls.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问此URL创建一个Goodreads帐户：[https://www.goodreads.com/api/keys](https://www.goodreads.com/api/keys)。你可以使用你的亚马逊或Facebook帐户登录。一旦你有了帐户，你需要生成一个API密钥来进行API调用。
- en: Goodreads exposes a set of endpoints that give back the results in XML. Agreed,
    it's not ideal, but they have an extensive collection of books and it's a small
    price to pay to convert XML into a JSON object. In fact, we will use an `npm`
    package for this conversion. The endpoint we will be using is search-books ([https://www.goodreads.com/search/index.xml?key=API_KEY&q=SEARCH_TERM](https://www.goodreads.com/search/index.xml?key=API_KEY&q=SEARCH_TERM)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Goodreads公开了一组端点，以XML格式返回结果。同意，这并不理想，但他们有大量的书籍，将XML转换为JSON对象是一个小小的代价。事实上，我们将使用一个`npm`包进行此转换。我们将使用的端点是search-books
    ([https://www.goodreads.com/search/index.xml?key=API_KEY&q=SEARCH_TERM](https://www.goodreads.com/search/index.xml?key=API_KEY&q=SEARCH_TERM))。
- en: 'The UI for our app will look something like the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用的UI将如下所示：
- en: '![](../images/00018.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00018.jpeg)'
- en: Even in this fairly simple-looking interface, there are some non-trivial use-cases.
    Since we are making a network call to fetch the results, we have an intermediate
    state of *waiting-for-results* before we show the *list-of-results*. Also, the
    real world is harsh and your network call could fail or return zero results. All
    these states will be handled in our React UI with the help of MobX.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在这个看起来相当简单的界面中，也有一些非常规的用例。由于我们正在进行网络调用来获取结果，所以在显示“结果列表”之前，我们有一个*等待结果*的中间状态。此外，现实世界是严酷的，你的网络调用可能会失败或返回零结果。所有这些状态将在我们的React
    UI中通过MobX来处理。
- en: Observable state and actions
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可观察状态和操作
- en: 'The UI is just a grandiose transformation of data. It is also an observer of
    this data and fires actions to change it. Since data (aka state) is so central
    to a UI, it makes sense we start first by modeling this state. With MobX, observables
    represent that state. Looking back at the UI design from before, we can identify
    various parts of the observable state:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: UI只是数据的宏伟转换。它也是这些数据的观察者，并触发操作来改变它。由于数据（又名状态）对UI非常重要，因此我们首先从对这种状态进行建模开始是有意义的。使用MobX，可观察对象表示该状态。回顾之前的UI设计，我们可以识别可观察状态的各个部分：
- en: There is the search-text that the user types. This is an `observable` field
    of type string.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户输入的搜索文本。这是一个字符串类型的可观察字段。
- en: There is an observable array of results.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个可观察的结果数组。
- en: There is meta information about the results, such as the current subset and
    the total result count.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关结果的元信息，例如当前子集和总结果计数。
- en: There is some state to capture the `async search()` operation that we will be
    invoking. The initial `status` of the operation is `empty`. Once the user invokes
    the search, we are in the `pending` state. When the search completes, we could
    either be in the `completed` or `failed` state. This looks more like an enumeration
    of `<empty>`*,* `pending`, `completed`, or `failed`, and can be captured with
    an `observable` field.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一些状态来捕获我们将要调用的“async search（）”操作。操作的初始“状态”是“空”。一旦用户调用搜索，我们就处于“挂起”状态。当搜索完成时，我们可能处于“完成”或“失败”状态。这更像是“<empty>”，“pending”，“completed”或“failed”的枚举，并且可以用可观察字段来捕获。
- en: 'Since all of these state properties are related, we could put them under one
    observable object:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有这些状态属性都相关，我们可以将它们放在一个可观察对象下：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is certainly a good start and seems to capture most of what we need to
    show on the UI. Besides the state, we also need to identify the operations that
    can be performed on the UI. For our simple UI, this includes invoking the search
    and updating the term as the user types characters into the text box. Operations
    in MobX are modeled as actions, which internally mutate the observable state.
    We can add these as *actions* on the `searchState` observable:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这肯定是一个很好的开始，似乎捕捉到了我们需要在UI上显示的大部分内容。除了状态，我们还需要确定可以在UI上执行的操作。对于我们简单的UI，这包括调用搜索和在用户在文本框中输入字符时更新术语。在MobX中，操作被建模为动作，它们在内部改变可观察状态。我们可以将这些作为“searchState”可观察对象上的*操作*添加：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `searchState` observable is slowly growing in size and also accumulating
    some syntactic-noise in defining the observable state. As we add more observable
    fields, computed properties and actions, this can definitely become more unwieldy.
    A better way to model this is to use classes and decorators.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: “searchState”可观察对象正在慢慢增长，并且在定义可观察状态时也积累了一些语法噪音。随着我们添加更多的可观察字段、计算属性和操作，这肯定会变得更加难以控制。更好的建模方式是使用类和装饰器。
- en: There is a little caveat with the way we have defined the actions for the `searchState`
    observable. Note that we have deliberately avoided the use of arrow-functions
    to define the action. This is because arrow-functions capture the **lexical this**
    at the time the action is defined. However, the `observable()` API returns a new
    object, which is of course different from the **lexical this** that is captured
    in the `action()` call. This means, the `this` that you are mutating would not
    be the object that is returned from `observable()`. You can try this out by passing
    arrow-functions into the `action()` calls.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们为`searchState`可观察定义操作的方式有一个小注意事项。请注意，我们故意避免使用箭头函数来定义操作。这是因为箭头函数在定义操作时捕获**词法this**。然而，`observable()`
    API返回一个新对象，这当然与在`action()`调用中捕获的**词法this**不同。这意味着您正在改变的`this`不会是从`observable()`返回的对象。您可以尝试通过将箭头函数传递给`action()`调用来验证这一点。
- en: By passing a plain-function into the `action()`, we can be assured that `this`
    would point to the correct instance of the observable.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将一个普通函数传递给`action()`，我们可以确保`this`指向可观察的正确实例。
- en: 'Let''s see how this looks with classes and decorators:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用类和装饰器是什么样子的：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The use of decorators makes it easy to see the observable fields of the class.
    In fact, we have the flexibility to mix and match observable fields with regular
    fields. Decorators also make it easy to tweak the level of observability (for
    example: a `shallow` observable for the results). The `BookSearchStore` class
    captures the observable fields and actions with the help of decorators. Since
    we only need one instance of this class, we are exporting the singleton-instance
    as `store`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用装饰器使得很容易看到类的可观察字段。事实上，我们有灵活性来混合和匹配可观察字段和常规字段。装饰器还使得调整可观察性的级别变得容易（例如：为结果使用`shallow`可观察）。`BookSearchStore`类利用装饰器捕获可观察字段和操作。由于我们只需要这个类的一个实例，我们将单例实例导出为`store`。
- en: Managing the async action
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理异步操作
- en: 'Things are more interesting with the `async search()` action. Our UI needs
    to know the exact state of the operation at any point in time. For that, we have
    the observable field: `status`, that keeps track of the operation state. It starts
    with the `empty` state initially and goes to `pending` at the beginning of the
    operation. Once the operation completes, it can either be in the `completed` or
    `failed` state. You can see this in the code, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`async search()`操作更有趣。我们的UI需要在任何时间点知道操作的确切状态。为此，我们有可观察字段：`status`，用于跟踪操作状态。它最初处于`empty`状态，并在操作开始时变为`pending`。一旦操作完成，它可以处于`completed`或`failed`状态。您可以在代码中看到这一点，如下所示：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A few things stand out in the preceding code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中有一些值得注意的地方：
- en: '`async` actions are not very different from `sync` actions. In fact, an *async-action
    is just sync-actions at different points in time*.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`async`操作与`sync`操作并没有太大不同。事实上，*async-action只是在不同时间点上的sync-actions*。'
- en: Setting the observable state is just a matter of assignment. We wrap the code
    after `await` in a `runInAction()` to ensure all observables are mutated inside
    an action. This becomes key when we turn on the `enforceActions` configuration
    for MobX.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置可观察状态只是一个赋值的问题。我们在`await`之后的代码中使用`runInAction()`来确保所有可观察值都在一个操作内被改变。当我们为MobX打开`enforceActions`配置时，这变得至关重要。
- en: Because we are using `async-await`, we are handling the two future possibilities
    in one place.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为我们使用了`async-await`，我们在一个地方处理了两种未来的可能性。
- en: The `searchBooks()` function is just a service-method that makes the call to
    the Goodreads API and fetches the results. It returns a promise, which we `await`
    inside the `async` action.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`searchBooks()`函数只是一个调用Goodreads API并获取结果的服务方法。它返回一个promise，我们在`async`操作中`await`它。'
- en: At this point, we have the observable state of our app ready, along with the
    set of actions that can be performed on these observables. The UI that we will
    create is simply going to paint this observable state and expose controls to invoke
    the actions. Let's jump straight into the observer-land of UI.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经准备好应用程序的可观察状态，以及可以对这些可观察对象执行的一组操作。我们将创建的UI只是简单地绘制这个可观察状态，并公开控件来调用这些操作。让我们直接进入UI的观察者领域。
- en: One observation you can make in the `async search()` method just seen is the
    wrapping of the state mutation in `runInAction()`. This can get tedious if you
    have multiple `await` calls with state mutation in between those calls. Diligently
    wrapping each of those state-mutations can be cumbersome and you may even forget
    to wrap!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚看到的`async search()`方法中的一个观察是将状态变化包装在`runInAction()`中。如果您在这些调用之间有多个`await`调用并且有状态变化，这可能会变得很繁琐。认真地包装这些状态变化中的每一个可能会很麻烦，甚至可能会忘记包装！
- en: To avoid this unwieldy ceremony, you could use a utility function called `flow()`,
    which takes in a `generator` function and, instead of `await`, uses the `yield`
    operator. The `flow()` utility correctly wraps the state-mutations following a
    `yield` within `action()`, so you don't have to do it yourself. We will use this
    approach in a later chapter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种繁琐的仪式，您可以使用一个名为`flow()`的实用函数，它接受一个`generator`函数，而不是`await`，使用`yield`操作符。`flow()`实用程序正确地在`yield`后包装了状态变化，而无需您自己去做。我们将在后面的章节中使用这种方法。
- en: The Reactive UI
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式UI
- en: 'In the core-triad of MobX, reactions play the role of affecting the outside
    world. In [Chapter 2](part0035.html#11C3M0-58c2559ca4304cecab9bc46f496bc070),
    *Observables, Actions, and Reactions*, we have seen a few of these reactions in
    the form of `autorun()`, `reaction()`, and `when()`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在MobX的核心三部曲中，反应起着影响外部世界的作用。在[第2章](part0035.html#11C3M0-58c2559ca4304cecab9bc46f496bc070)中，*可观察对象、动作和反应*，我们已经看到了一些这些反应的形式，如`autorun()`、`reaction()`和`when()`：
- en: '![](../images/00019.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00019.jpeg)'
- en: The `observer()` is yet another kind of reaction that helps in binding the React
    world to MobX. `observer()` is part of the `mobx-react` NPM package, a binding
    library for MobX and React. It creates a **higher-order-component** (**HOC**)
    that wraps a React component to automatically update on changes to the observable
    state. Internally, `observer()` keeps track of observables that are dereferenced
    in the `render` method of the component. When any of them change, a re-render
    of the component is triggered.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`observer()`是另一种类型的反应，有助于将React世界与MobX绑定在一起。`observer()`是`mobx-react` NPM包的一部分，这是一个用于MobX和React的绑定库。它创建了一个**高阶组件**（**HOC**），用于自动更新可观察状态的变化。在内部，`observer()`跟踪在组件的`render`方法中取消引用的可观察对象。当它们中的任何一个发生变化时，会触发组件的重新渲染。'
- en: It is quite common to sprinkle `observer()` components throughout the UI component
    tree. Wherever an observable is required to render the component, an `observer()`
    can be used.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在UI组件树中随处可以添加`observer()`组件是非常常见的。无论何时需要一个可观察对象来渲染组件，都可以使用`observer()`。
- en: 'The UI that we want to build will map the observable state of the `BookSearchStore` to
    various components. Let''s decompose the UI into its structural components, as
    seen in the following figure. The observer-components here include the **SearchTextField**
    and the **ResultsList**:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要构建的UI将把`BookSearchStore`的可观察状态映射到各种组件。让我们将UI分解为其结构组件，如下图所示。这里的观察者组件包括**SearchTextField**和**ResultsList**：
- en: '![](../images/00020.jpeg)When you start out mapping the observable state to
    React components, you should start with one monolithic component that reads all
    the necessary state and renders it out. Then, you can start splitting the observer-components
    and gradually create the component hierarchy. It is recommended to get as granular
    as you can with your observer-components. This ensures React is not unnecessarily
    rendering the entire component when only a small part of it is changing.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../images/00020.jpeg)当您开始将可观察状态映射到React组件时，您应该从一个单片组件开始，该组件读取所有必要的状态并将其呈现出来。然后，您可以开始拆分观察者组件，并逐渐创建组件层次结构。建议您尽可能细化观察者组件。这可以确保当只有一小部分组件发生变化时，React不会不必要地渲染整个组件。'
- en: 'At the highest level, we have the `App` component that composes the `SearchTextField`
    and `ResultsList`. In code, this looks as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在最高级别上，我们有`App`组件，它组合了`SearchTextField`和`ResultsList`。在代码中，这看起来如下：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If it has caught your eye already, there is a new decorator on the `App` class
    that we have not seen before: `inject(''store'')`, also part of the `mobx-react`
    package. This creates a HOC that binds the `store` observable to the React component.
    This means that, inside the `render()` of the `App` component, we can expect a
    `store` property to be available on the `props`.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经注意到了，`App`类上有一个我们以前没有见过的新装饰器：`inject('store')`，也是`mobx-react`包的一部分。这创建了一个将`store`可观察对象绑定到React组件的HOC。这意味着，在`App`组件的`render()`中，我们可以期望在`props`上有一个`store`属性可用。
- en: We are using the `material-ui` NPM package for various UI components. This component
    library gives a material design look to our UI and provides many of the utility
    components, such as `TextField`, `LinearProgress`, `Grid`, and so on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用`material-ui` NPM包来使用各种UI组件。这个组件库为我们的UI提供了Material Design外观，并提供了许多实用组件，如`TextField`、`LinearProgress`、`Grid`等。
- en: Getting to the store
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 到达store
- en: 'Using `inject()`, you can connect the observable `BookSearchStore` to any of
    your React components. The mystery question, however, is: *How does* `inject()`
    *know about our* `BookSearchStore`*? *This is where you need to see what happens
    at one level above the `App` component, where we render the entire React app:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`inject()`，您可以将可观察的`BookSearchStore`连接到您的任何React组件。然而，神秘的问题是：*`inject()`*如何知道我们的*`BookSearchStore`*？这就是您需要查看`App`组件上一级发生的事情的地方，我们在那里渲染整个React应用程序：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `Provider` component from `mobx-react` establishes the real connecting
    glue with the `BookSearchStore` observable. The exported singleton instance of
    `BookSearchStore` (named `store`), is passed as a prop named `store` into `Provider`.
    Internally, it uses the React Context to propagate the `store` to any component
    wrapped by the `inject()` decorator. Thus, the `Provider` provides the `store` observable
    and `inject()` connects to *React Context* (exposed by `Provider`), and injects
    the `store` into the wrapped component:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 来自`mobx-react`的`Provider`组件与`BookSearchStore`可观察对象建立了真正的连接粘合剂。导出的`BookSearchStore`（名为`store`）的单例实例作为名为`store`的prop传递到`Provider`中。在内部，它使用React
    Context将`store`传播到由`inject()`装饰器包装的任何组件。因此，`Provider`提供了`store`可观察对象，而`inject()`连接到*React
    Context*（由`Provider`公开），并将`store`注入到包装的组件中：
- en: '![](../images/00021.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00021.jpeg)'
- en: 'It is worth noting that there is nothing special about the named prop `store`.
    You can choose any name you like, and can even pass multiple observable instances
    into `Provider`. If our simple app needed a separate store for *user-preferences*,
    we could have passed it as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，命名prop`store`并没有什么特别之处。您可以选择任何您喜欢的名称，甚至可以将多个可观察实例传递给`Provider`。如果我们的简单应用程序需要一个单独的*用户偏好*存储，我们可以这样传递它：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Of course, this means `inject()` will also be referencing this as `userPreferences`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这意味着`inject()`也将将其引用为`userPreferences`：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The SearchTextField component
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`SearchTextField`组件'
- en: 'Getting back to our original example, we can leverage the power of `Provider`
    and `inject()` to get access to `store` (an instance of `BookSearchStore`) at
    any level in the component tree. `SearchTextField` component makes use of it to
    become an observer of the `store`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们最初的例子，我们可以利用`Provider`和`inject()`的功能，在组件树的任何级别访问`store`（`BookSearchStore`的一个实例）。`SearchTextField`组件利用它来成为`store`的观察者：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`SearchTextField` observes the `term` property of `store` and updates itself
    when it changes. The change to the `term` is handled as part of the `onChange`
    handler of the `TextField`. The actual `onChange` handler is passed as a prop
    into `SearchTextField` by the `App` component. It is inside the `App` component
    where we fire the `setTerm()` action to update the `store.term` property:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`SearchTextField`观察`store`的`term`属性，并在其更改时更新自身。对`term`的更改作为`TextField`的`onChange`处理程序的一部分进行处理。实际的`onChange`处理程序作为一个prop传递到`SearchTextField`中，由`App`组件传递。在`App`组件中，我们触发`setTerm()`动作来更新`store.term`属性。'
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, `SearchTextField` not only handles the updates to the `store.term` observable,
    but also shows the status of the search operation with the `SearchStatus` component.
    We include this component right inside `SearchTextField`, but there are no props
    passed into it. This may seem a little unsettling at first. How in the world is
    `SearchStatus` going to know about the current `store.status`? Well, this should
    be obvious once you look at the definition of `SearchStatus`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`SearchTextField`不仅处理对`store.term`可观察对象的更新，还显示了`SearchStatus`组件的搜索操作状态。我们将这个组件直接包含在`SearchTextField`中，但没有传递任何props。起初这可能有点不安。`SearchStatus`如何知道当前的`store.status`？嗯，一旦你看到`SearchStatus`的定义，这就显而易见了：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using `inject()`, we get access to the `store` observable, and by wrapping the
    component with `observer()`, we can react to changes in the observable state (`term`,
    `status`). Notice the use of the nested calls to `inject('store')(observer( ()
    => {} ))`. The order here is important. You first call `inject()` by requesting
    the Provider-prop that you want injected. This returns a function that takes a
    component as input. Here we use `observer()` to create a HOC and pass it to `inject()`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`inject()`，我们可以访问`store`可观察对象，并通过使用`observer()`包装组件，我们可以对可观察状态（`term`，`status`）的变化做出反应。注意嵌套调用`inject('store')(observer(
    () => {} ))`的使用。这里的顺序很重要。首先调用`inject()`请求要注入的Provider-prop。这将返回一个以组件为输入的函数。在这里，我们使用`observer()`创建一个高阶组件，并将其传递给`inject()`。
- en: Since the `SearchStatus` component is pretty much self-contained, `SearchTextField`
    can simply include it and expect it to work correctly.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`SearchStatus`组件基本上是独立的，`SearchTextField`可以简单地包含它并期望它能正常工作。
- en: When the `store.status` changes, only the virtual-DOM for `SearchStatus` changes,
    re-rendering just that component. The rest of `SearchTextField` is left unchanged.
    This rendering efficiency is built into `observer()`, and there is no extra work
    needed on your part. Internally, `observer()` carefully tracks the observables
    that are used in `render()` and sets up a `reaction()` to update the component
    when any of the tracked observables change.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当`store.status`改变时，只有`SearchStatus`的虚拟DOM发生变化，重新渲染了该组件。`SearchTextField`的其余部分保持不变。这种渲染效率内置在`observer()`中，你不需要额外的工作。在内部，`observer()`会仔细跟踪在`render()`中使用的可观察对象，并设置一个`reaction()`来在任何被跟踪的可观察对象发生变化时更新组件。
- en: The ResultsList component
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ResultsList组件
- en: 'With `SearchTextField`, the search action will be invoked when you type some
    text and hit *Enter*. This changes the observable state, which is partly rendered
    by `SearchTextField`. However, when the results arrive, the list of books that
    match the *search-term* are shown by the `ResultsList` component. As expected,
    it is an *observer*-component, which connects to the `store` observable via `inject()`.
    But this time, it uses a slightly different approach to connect to `store`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`SearchTextField`，当您输入一些文本并按下*Enter*时，搜索操作将被调用。这会改变可观察状态，部分由`SearchTextField`渲染。然而，当结果到达时，与*搜索词*匹配的书籍列表将由`ResultsList`组件显示。正如预期的那样，它是一个*观察者*组件，通过`inject()`连接到`store`可观察对象。但这一次，它使用了稍微不同的方法连接到`store`：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notice the use of the `@inject` decorator that takes in a function to extract
    the `store` observable. This gives you a more type-safe approach rather than using
    a string property. You will also see that we renamed `store` to `searchStore` in
    the *extractor-function*. Thus, the `store` observable is injected with the name
    `searchStore`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意使用`@inject`装饰器，该装饰器接受一个函数来提取`store`可观察对象。这为您提供了一种更加类型安全的方法，而不是使用字符串属性。您还会看到我们在*提取函数*中将`store`重命名为`searchStore`。因此，`store`可观察对象将以`searchStore`的名称注入。
- en: 'In the render method for the `ResultsList`, we are doing a few other things
    that are worth calling out:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ResultsList`的渲染方法中，我们还在做一些值得注意的其他事情：
- en: 'Checking whether the search results are empty with the `isEmpty` property.
    This wasn''t declared earlier but is really a `computed` property that checks
    the length of the results array and returns `true` if it''s zero:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`isEmpty`属性检查搜索结果是否为空。这之前没有声明，但实际上是一个`computed`属性，检查结果数组的长度，如果为零则返回`true`：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If the search operation has completed and no results were returned (`isEmpty
    = true`), we show the `EmptyResults` component.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果搜索操作已完成并且没有返回结果（`isEmpty = true`），我们将显示`EmptyResults`组件。
- en: If the search completed and we got some results back, we show the counts and
    also a list of results, with each result rendered with the `BookItem` component.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果搜索完成并且我们得到了一些结果，我们将显示计数以及结果列表，每个结果都使用`BookItem`组件渲染。
- en: 'Thus, our component tree for our app looks as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们应用程序的组件树如下所示：
- en: '![](../images/00022.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00022.jpeg)'
- en: The **Provider** is literally the provider of the observable state. It relies
    on the React Context to propagate the `store` observable in the component sub-tree.
    By decorating components with `inject()` and`observer()`, you can connect to the
    observable state and react to changes. The **SearchTextField**, **SearchStatus**,
    and **ResultsList** components rely on `observer()` and `inject()` to give you
    a reactive-UI.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**Provider**实际上是可观察状态的提供者。它依赖于React Context来在组件子树中传播`store`可观察对象。通过使用`inject()`和`observer()`装饰组件，您可以连接到可观察状态并对更改做出反应。**SearchTextField**、**SearchStatus**和**ResultsList**组件依赖于`observer()`和`inject()`为您提供响应式UI。'
- en: With the introduction of `React.createContext()` in React 16.3+, you can create
    your own `Provider` component if you wish. It might be a little verbose, but it
    achieves the same purpose—propagating the store across the component sub-tree.
    Give it a shot, if you feel a little adventurous.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 随着在React 16.3+中引入`React.createContext()`，您可以自己创建`Provider`组件。这可能有点冗长，但它实现了相同的目的——在组件子树中传播存储。如果您感到有点冒险，可以尝试一下。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: '`mobx` and `mobx-react` are two NPM packages that are used extensively to build
    the Reactive UI. The `mobx` package provides the API to build the observable state,
    actions, and reactions. On the other hand, `mobx-react` gives the binding glue
    to connect the React components to the observable state and also react to any
    changes. In our example, we made use of these APIs to build a book search app.
    When creating your *observer-driven* component tree, make sure to go granular
    with the use of observers. This way you will react to just the observables you
    need to render the UI.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`mobx`和`mobx-react`是两个广泛用于构建响应式UI的NPM包。`mobx`包提供了构建可观察状态、动作和反应的API。另一方面，`mobx-react`提供了将React组件与可观察状态连接并对任何更改做出反应的绑定粘合剂。在我们的示例中，我们利用这些API构建了一个图书搜索应用程序。在创建基于*observer*的组件树时，确保使用观察者进行细粒度操作。这样你就可以对你需要渲染UI的可观察对象做出反应。'
- en: The `SearchTextField`, `SearchStatus`, and `ResultsList` components were created
    with the intent of being granular and reacting to a focused observable surface.
    This is the recommended way to use MobX with React.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`SearchTextField`、`SearchStatus`和`ResultsList`组件旨在细粒度并对焦点可观察表面做出反应。这是在React中使用MobX的推荐方式。'
- en: In the next chapter we will dive deeper into MobX, with an exploration of the
    Observables.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨MobX，探索可观察对象。
