- en: Introduction to State Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态管理介绍
- en: The heart of your React app lives in the client state (data) and is rendered
    via React components. Managing this state can become tricky as you tackle **user
    interactions** (**UI**), perform async operations, and handle domain logic. In
    this chapter, we will start with a conceptual model of state management in UI,
    the role of side effects, and the flow of data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您的React应用的核心位于客户端状态（数据）中，并通过React组件呈现。随着您处理**用户交互**（**UI**）、执行异步操作和处理领域逻辑，管理这种状态可能变得棘手。在本章中，我们将从UI中的状态管理的概念模型、副作用的作用和数据流开始。
- en: Then, we will take a quick tour of MobX and introduce its core concepts. These
    concepts will help in drawing some comparisons with Redux. You will see that MobX
    turns out to be a more *declarative* form of Redux!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将快速了解MobX并介绍其核心概念。这些概念将有助于与Redux进行一些比较。您会发现MobX实际上是Redux的更*声明性*形式！
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: What is the client state?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是客户端状态？
- en: The side effect model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 副作用模型
- en: A speed tour of MobX
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MobX的快速介绍
- en: The client state
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端状态
- en: The UI that you can see and manipulate on screen is the result of painting a
    visual representation of data. The shape of data hints at the kind of controls
    you provide for visualizing and manipulating this data. For example, if you have
    a list of items, you will likely show a `List` control that has an array of `ListItems`.
    Operations may include *searching, paginating, filtering*, *sorting*, or *grouping*
    the items in the list. The state of these operations is also captured as data
    and informs the visual representation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您在屏幕上看到并可以操作的UI是将数据的视觉表示呈现出来的结果。数据的形状暗示了您提供用于可视化和操作这些数据的控件的类型。例如，如果您有一个项目列表，您可能会显示一个具有`ListItems`数组的`List`控件。操作可能包括*搜索、分页、过滤*、*排序*或*分组*列表中的项目。这些操作的状态也被捕获为数据，并通知了视觉表示。
- en: 'The following diagram shows the direct relationship of an *array* with a *List*
    control:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了*数组*与*List*控件之间的直接关系：
- en: '![](../images/00005.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00005.jpeg)'
- en: In short, it is the *data* that takes on a pivotal role in describing the UI.
    Handling the structure and managing the changes that can happen to this data is
    what we commonly refer to as **state management**. State is just a synonym for
    the client-data that is rendered on the UI.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，描述UI的关键角色是*数据*。处理结构和管理可能发生在这些数据上的变化通常被称为**状态管理**。状态只是在UI上呈现的客户端数据的同义词。
- en: State management is the act of defining the shape of data and the operations
    that are used to manipulate it. In the context of the UI, it is called *client-side* state
    management.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 状态管理是定义数据形状和用于操作数据的操作的行为。在UI的上下文中，它被称为*客户端*状态管理。
- en: 'As the complexity of the UI increases, more state is accumulated on the client.
    It gets to a point where state becomes the ultimate source of truth for whatever
    we see on the screen. This approach to UI development, where we elevate the importance
    of the client-state, has been one of the biggest shifts in the frontend world.
    There is an interesting equation that captures this relationship between UI and
    state:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 随着UI的复杂性增加，客户端上积累了更多的状态。它达到了一个点，状态成为我们在屏幕上看到的一切的最终真相。在UI开发中，我们提升了客户端状态的重要性，这是前端世界中最大的转变之一。有一个有趣的方程式捕捉了UI和状态之间的关系：
- en: '![](../images/00006.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00006.jpeg)'
- en: '`fn` is a transformation function that is applied on the state (the data) that
    produces a corresponding UI. In fact, a subtle meaning that is hidden here is
    that, given the same state, `fn` always produces the same UI.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`fn` 是一个应用在状态（数据）上的转换函数，它产生相应的 UI。事实上，这里隐藏的微妙含义是，给定相同的状态，`fn` 总是产生相同的 UI。'
- en: 'In the context of React, the preceding equation can be written as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 的上下文中，前述等式可以写成如下形式：
- en: '![](../images/00007.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00007.jpeg)'
- en: The only difference here is that `fn` takes two inputs, `props` and `state`,
    which is the prescribed contract of a React component.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别在于 `fn` 接受两个输入，`props` 和 `state`，这是 React 组件的约定契约。
- en: Handling changes in state
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理状态变化
- en: However, the preceding equation is only giving half the story of a UI. It's
    true that the visual representation is derived from the state (through the transformation
    function, `fn`), but it does not account for the *user operations* that occur
    on the UI. It's like we have completely ignored the *user* in the equation. After
    all, the interface is not just used to visually represent data (state), but to
    also allow the manipulation of that data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，前述等式只是 UI 故事的一半。的确，视觉表示是从状态（通过转换函数 `fn`）派生出来的，但它并没有考虑到在 UI 上发生的 *用户操作*。就好像我们在等式中完全忽略了
    *用户*。毕竟，界面不仅用于视觉表示数据（状态），还允许对数据进行操作。
- en: This is where we need to introduce the concept of **actions** that represent
    these user operations, which results in a change in state. Actions are the commands
    that you invoke as a result of various input-events that are fired. These actions
    cause a change in the state, which is then reflected back on the UI.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要介绍代表这些用户操作的 **actions** 的概念，这些操作会导致状态的改变。Actions 是您根据触发的各种输入事件而调用的命令。这些
    actions 导致状态的改变，然后反映在 UI 上。
- en: 'We can visualize the triad of **State**, **UI**, and **Actions** in the following
    figure:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在下图中可视化 **State**、**UI** 和 **Actions** 的三元组：
- en: '![](../images/00008.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00008.jpeg)'
- en: It is worth noting that the UI does not change the state directly, but instead
    does it via a *message-passing* system by firing *actions*. The *action* encapsulates
    the parameters that are required to cause the appropriate change in state. The
    UI is responsible for capturing various kinds of user events (clicks, keyboard
    presses, touches, voice, and so on) and *translating* them into one or more actions
    that are then fired to change the state.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，UI 不会直接改变状态，而是通过 *消息传递* 系统来触发 *actions* 来实现状态的改变。*Action* 封装了触发适当状态改变所需的参数。UI
    负责捕获各种用户事件（点击、键盘按键、触摸、语音等），并将其 *转换* 为一个或多个 actions，然后触发这些 actions 来改变状态。
- en: When the **State** changes, it notifies all of its observers (subscribers) of
    the change. The **UI** is also one of the most important subscribers that is notified.
    When that happens, it re-renders and updates to the new state. This system of
    data flow from the **State** into the **UI** is always uni-directional and has
    become the cornerstone of state management in modern UI development.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当 **State** 改变时，它会通知所有观察者（订阅者）状态的改变。UI 也是其中一个最重要的订阅者，会收到通知。当发生这种情况时，UI 会重新渲染并更新到新的状态。从
    **State** 流向 **UI** 的数据流始终是单向的，已成为现代 UI 开发中状态管理的基石。
- en: One of the biggest benefits of this approach is that it becomes easy to grasp
    how the UI is kept in sync with changing data. It also cleanly separates the responsibilities
    between *rendering* and *data changes*. The React framework has really embraced
    this uni-directional data flow and you will see this adopted and extended in **MobX **as
    well.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的最大好处之一是很容易理解UI如何与变化的数据保持同步。它还清晰地分离了*渲染*和*数据变化*之间的责任。React框架确实拥抱了这种单向数据流，并且你也会看到这种方法在**MobX**中得到了采纳和扩展。
- en: The side effect model
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 副作用模型
- en: 'Now that we understand the roles of UI, state, and actions, we can extend this
    to build a mental model of how a UI needs to operate. Reflecting back on the triad
    of `Action` --> `State` --> `UI`, we can make some interesting observations that
    are not clearly answered. Let''s think about how we would handle operations such
    as the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了UI、状态和操作的角色，我们可以将其扩展到构建UI操作的思维模型。回顾`操作` --> `状态` --> `UI`的三元组，我们可以做一些有趣的观察，这些观察并不明确。让我们思考一下如何处理以下操作：
- en: Downloading data from a server
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从服务器下载数据
- en: Persisting data back on the server
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据持久化到服务器
- en: Running a timer and doing something periodically
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行定时器并定期执行某些操作
- en: Executing some validation logic when some state changes
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当某个状态发生变化时执行一些验证逻辑
- en: These are things that don't fit nicely in our data flow triad. Clearly, we are
    missing something here, right? You might argue that you could put these operations
    inside the UI itself and fire actions at certain times. However, that would tack
    on additional responsibilities to the UI, complicating its operation and also
    making it difficult to test. From a more academic perspective, it would also violate
    the **Single Responsibility Principle** (**SRP**). SRP states that a class or
    a module should have only one reason to change. If we start handling additional
    operations in the UI, it would have more than one reason to change.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事情并不完全适合我们的数据流三元组。显然，我们在这里缺少了一些东西，对吧？你可能会争辩说，你可以将这些操作放在UI本身内部，并在特定时间触发操作。然而，这将给UI增加额外的责任，使其操作复杂化，并且也使其难以测试。从更学术的角度来看，这也会违反**单一责任原则**（**SRP**）。SRP规定一个类或模块应该只有一个变化的原因。如果我们开始在UI中处理额外的操作，它将有多个变化的原因。
- en: So, it seems like we have some opposing forces in action here. We want to retain
    the purity of the data flow triad, handle ancillary operations such as the ones
    mentioned in the preceding list, and not add extra responsibilities to the UI.
    To balance all of these forces, we need to think about the ancillary operations
    as something *external* to the data flow triad. We call these **side effects**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，看起来我们在这里有一些相互对立的力量。我们希望保持数据流三元组的纯度，处理诸如前面列表中提到的辅助操作，并且不向UI添加额外的责任。为了平衡所有这些力量，我们需要将辅助操作视为数据流三元组之外的东西。我们称这些为**副作用**。
- en: 'Side effects are a result of some state-change and are invoked by responding
    to the notifications coming from the state. Just like the UI, there is a handler,
    which we can call the *side effect handler*, that observes (subscribes to) the
    state change notifications. When a matching state change happens, the corresponding
    side effect is invoked:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 副作用是某种状态变化的结果，并且是通过响应来自状态的通知来调用的。就像UI一样，有一个处理程序，我们可以称之为*副作用处理程序*，它观察（订阅）状态变化通知。当发生匹配的状态变化时，相应的副作用被调用：
- en: '![](../images/00009.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00009.jpeg)'
- en: There can be many side effect handlers in the system, and each of them is an
    observer of the state. When a part of the state they are observing changes, they
    will invoke the corresponding side effects. Now, these side effects can also cause
    a change in state by firing additional actions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中可能有许多副作用处理程序，每个处理程序都是状态的观察者。当它们观察的状态的一部分发生变化时，它们将调用相应的副作用。现在，这些副作用也可以通过触发额外的动作来导致状态的改变。
- en: As an example, you could fire an action from the UI to download some data. This
    results in a state change to some flag, which results in notifications being fired
    to all the observers. A side effect handler that is observing the flag will see
    the change and trigger a network call to download data. When the download completes,
    it will fire an action to update the state with the new data.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，你可以从UI触发一个动作来下载一些数据。这会导致某个标志的状态改变，从而通知所有观察者。观察标志的副作用处理程序会看到这种改变，并触发网络调用来下载数据。当下载完成时，它会触发一个动作来使用新数据更新状态。
- en: The fact that *side effects* can also fire actions to update the state is an
    important detail that helps in completing the loop around managing state. So,
    it's not just the UI that can cause state changes, but also external operations
    (via side effects) that can affect a state change. This is the mental model of
    *side effects*, which can be used to develop your UI and manage the state that
    it renders. The model is quite powerful and scales very well over time. Later
    in this chapter and also throughout this book, you will see how MobX makes this
    *side effect* model a reality and fun to use.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*副作用*也可以触发动作来更新状态，这是一个重要的细节，有助于完成管理状态的循环。因此，不仅UI可以引起状态改变，而且外部操作（通过副作用）也可以影响状态改变。这就是*副作用*的心智模型，它可以用来开发UI并管理其呈现的状态。这个模型非常强大，随着时间的推移，它的扩展性也非常好。在本章以及整本书中，您将看到MobX如何使这个*副作用*模型成为现实并且使用起来很有趣。'
- en: With these concepts in mind, we are now ready to enter the world of MobX.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些概念，我们现在准备进入MobX的世界。
- en: A speed tour of MobX
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MobX的快速介绍
- en: MobX is a reactive state management library that makes it easy to adopt the
    side effect model. Many of the concepts in MobX directly mirror the terminology
    we encountered earlier. Let's take a quick tour of these building blocks.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: MobX是一个反应式状态管理库，它使得采用副作用模型变得容易。MobX中的许多概念直接反映了我们之前遇到的术语。让我们快速浏览一下这些构建块。
- en: An observable state
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个observable状态
- en: 'The state is at the epicenter of all things happening in the UI. MobX provides
    a core building block, called the **observable**, that represents the reactive
    state of your application. Any JavaScript object can be used to create an observable.
    We can use the aptly named `observable()` API as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 状态是UI中发生的所有事情的中心。MobX提供了一个核心构建块，称为**observable**，它代表了应用程序的反应式状态。任何JavaScript对象都可以用来创建一个observable。我们可以使用名副其实的`observable()`
    API，如下所示：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding example, we have created a simple `cart` object that is also
    an `observable`. The `observable()` API comes from the ***mobx*** NPM package.
    With this simple declaration of an `observable`, we now have a reactive `cart`
    that keeps track of changes happening on any of its properties: `itemCount` and `modified`.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们创建了一个简单的`cart`对象，它也是一个`observable`。`observable()` API来自于***mobx***
    NPM包。通过这个简单的`observable`声明，我们现在有了一个反应灵敏的`cart`，它可以跟踪其任何属性的变化：`itemCount`和`modified`。
- en: Observing the state changes
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察状态变化
- en: Observables alone cannot make an interesting system. We also need their counterparts,
    the **observers**. MobX gives you three different kinds of observers, each tailor-made
    for the use cases you will encounter in your application. The core observers are
    `autorun`, `reaction`, and `when`. We will look at each of them in more detail
    in the next chapter, but let's introduce `autorun` for now.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅使用可观察对象并不能构建一个有趣的系统。我们还需要它们的对应物，**观察者**。MobX为您提供了三种不同类型的观察者，每一种都专为您在应用程序中遇到的用例量身定制。核心观察者是`autorun`，`reaction`和`when`。我们将在下一章更详细地介绍它们，但现在让我们先介绍`autorun`。
- en: 'The `autorun` API takes a function as its input and executes it immediately.
    It also keeps track of the observables that are used inside the passed-in function.
    When these tracked observables change, the function is re-executed. What is really
    beautiful and elegant about this simple setup is that there is no extra work required
    to track observables and subscribe to any changes. It all just happens automatically.
    It''s not magic, per se, but definitely an intelligent system at work, which we
    will cover in a later section:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`autorun` API接受一个函数作为输入并立即执行它。它还跟踪传入函数中使用的可观察对象。当这些被跟踪的可观察对象发生变化时，函数会被重新执行。这个简单的设置真正美丽和优雅的地方在于，不需要额外的工作来跟踪可观察对象并订阅任何变化。这一切都是自动发生的。这并不是魔术，但绝对是一个智能的系统在运作，我们将在后面的章节中介绍。'
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding example, the `arrow-function` that was passed into `autorun`
    is executed for the first time and also when `itemCount` is incremented. This
    results in two console logs being printed. `autorun` makes the passed-in function
    (the *tracking-function*) an *observer* of the *observables* it references. In
    our case, `cart.itemCount` was being observed and when it was incremented, the
    *tracking* function was automatically notified, resulting in the console logs
    getting printed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，传递给`autorun`的`arrow-function`在第一次执行时，也在`itemCount`增加时执行。这导致打印了两个控制台日志。`autorun`使传入的函数（*tracking-function*）成为其引用的*observables*的*observer*。在我们的例子中，`cart.itemCount`被观察到，当它增加时，*tracking*函数会自动收到通知，导致打印控制台日志。
- en: It's time to take action
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候采取行动了
- en: Although we are mutating `cart.itemCount` directly, it is definitely not the
    recommended approach. Remember that the state should not be changed directly and
    instead should be done via *actions*. The use of an *action* also adds vocabulary
    to the operations that can be performed on the observable state.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们直接改变了`cart.itemCount`，但这绝对不是推荐的方法。记住，状态不应该直接改变，而应该通过*actions*来完成。使用*action*还为可观察状态的操作增加了词汇。
- en: 'In our case, we can call the state mutation that we were doing as an `incrementCount` action.
    Let''s use the MobX `action` API to encapsulate the mutation:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们可以将我们正在进行的状态变化称为`incrementCount`操作。让我们使用MobX的`action` API来封装这个变化：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `action` API takes a function that will be called whenever the action is
    invoked. It may seem superfluous that we are passing a function into *action*,
    when we could just wrap the mutation inside a plain function and call the plain
    function instead. An astute thought, for sure. Well, there is a good reason for
    that. Internally, `action` is doing much more than being a simple wrapper. It
    ensures that all notifications for state changes are fired, but only after the
    completion of the `action` function.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`action` API接受一个函数作为参数，每当调用该操作时都会调用该函数。当我们可以将变异包装在普通函数中并调用普通函数而不是将函数传递给*action*时，可能会显得多余。这是一个敏锐的想法。好吧，这样做是有充分理由的。在内部，`action`做的远不止是简单的包装。它确保所有状态变化的通知都被触发，但只在`action`函数完成后才触发。'
- en: When you are modifying a lot of observables inside your action, you don't want
    to be notified about every little change immediately. Instead, you want to be
    able to wait for all changes to complete and then fire the notifications. This
    makes the system more performant and also reduces the noise of too many notifications,
    too soon.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在动作中修改大量的可观察对象时，您不希望立即收到每一个小改变的通知。相反，您希望能够等待所有改变完成，然后触发通知。这使系统更加高效，也减少了过多通知的噪音。
- en: Going back to our example, we can see that wrapping it in an action also improves
    the readability of the code. By giving a specific name to the action (`incrementCount`)
    we have added vocabulary to our domain. In doing so, we can abstract the details
    of what is needed to actually *increment the count*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的例子，我们可以看到将其包装在一个动作中也提高了代码的可读性。通过给动作（`incrementCount`）一个具体的名称，我们为我们的领域增加了词汇。这样做，我们可以抽象出实际*增加计数*所需的细节。
- en: Observables, observers, and actions are at the core of MobX. With these fundamental
    concepts, we can build some of the most powerful and complex React applications.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可观察对象、观察者和动作是MobX的核心。有了这些基本概念，我们可以构建一些最强大和复杂的React应用程序。
- en: In the MobX literature, *side effects* are also called *reactions*. Unlike *actions*
    that *cause* state changes, *reactions* are the ones responding to state changes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在MobX的文献中，*副作用*也被称为*反应*。与*导致*状态改变的*动作*不同，*反应*是对状态改变做出响应的。
- en: 'Note the striking similarity with the uni-directional data flow that we saw
    earlier. **Observables** capture the state of your application. **Observers** (also
    called *reactions*) include both the *side effect* handlers as well as the UI.
    The **actions** are, well, actions that cause a change in the observable state:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意与之前看到的单向数据流的惊人相似之处。**可观察对象**捕获应用程序的状态。**观察者**（也称为*反应*）包括*副作用*处理程序以及UI。**动作**是，嗯，导致可观察状态改变的动作：
- en: '![](../images/00010.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00010.jpeg)'
- en: A comparison with Redux
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Redux的比较
- en: If we were to talk about state management in React and we didn't mention Redux,
    it would be a complete remiss. Redux is an extremely popular state management
    library and its popularity stems from the fact that it simplified the original
    Flux architecture that was proposed by Facebook. It got rid of certain actors
    in Flux*,* such as *dispatchers*, which resulted in combining all the stores into
    one, commonly referred to as the **single state tree**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们谈论React中的状态管理，却没有提到Redux，那就是完全的疏忽。Redux是一个非常流行的状态管理库，它之所以流行，是因为它简化了Facebook提出的原始Flux架构。它摒弃了Flux中的某些角色，比如*调度器*，这导致将所有存储器合并为一个，通常称为**单一状态树**。
- en: In this section, we will do a head-on comparison with another state management
    library called **Redux**. If you have *not* used Redux before, you can certainly
    skip this section and move on to this chapter's summary.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将与另一个称为**Redux**的状态管理库进行正面比较。如果您以前没有使用过Redux，可以跳过这一部分，继续阅读本章的总结。
- en: MobX has some conceptual similarities with Redux as far as the data flow is
    concerned, but that is also where the similarities end. The mechanism adopted
    by MobX is drastically different than the one taken by Redux. Let's have a brief
    overview of Redux before we get into a slightly deeper-level comparison.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就数据流而言，MobX在概念上与Redux有一些相似之处，但这也是相似之处的尽头。MobX采用的机制与Redux采用的机制截然不同。在我们深入比较之前，让我们简要了解一下Redux。
- en: Redux in a nutshell
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在简言之中的Redux
- en: 'The data flow triad that we saw earlier is also applicable to Redux in its
    entirety. It''s in the *state update* mechanism that Redux adds its own twist.
    This can be seen in the following figure:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到的数据流三角也适用于整个Redux。Redux在*状态更新*机制中添加了自己的特色。可以在下图中看到：
- en: '![](../images/00011.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00011.jpeg)'
- en: When the UI fires the action, it is dispatched on the store. Inside the store,
    the action first passes through one or more **middleware**, where it can get acted
    upon and swallowed without further propagation. If the action passes through the
    middleware, it is sent to one or more **reducers**, where it can be processed
    to produce a new state of the store.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当UI触发动作时，它会在存储上分派。在存储内部，动作首先经过一个或多个**中间件**，在那里可以对其进行操作并在不进一步传播的情况下被吞噬。如果动作通过中间件，它将被发送到一个或多个**reducers**，在那里可以被处理以产生存储的新状态。
- en: This new state of the store is notified to all of the subscribers, with the
    **UI** being one of them. If the state is different from the previous value that
    the UI has, the UI is re-rendered and brought in sync with the new state.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 存储的新状态通知给所有订阅者，其中**UI**是其中之一。如果状态与UI之前的值不同，UI将被重新渲染，并与新状态同步。
- en: 'There are few things here that are worth highlighting:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几件值得强调的事情：
- en: From the point where the action enters the store, until the new state is computed,
    the entire process is synchronous.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从动作进入存储的那一刻起，直到计算出新状态，整个过程都是同步的。
- en: Reducers are pure functions that take in the action and the previous state and
    produce the new state. Since they are pure functions, you cannot put *side effects*,
    such as a network call, inside a reducer.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reducers是纯函数，接受动作和先前状态，并产生新状态。由于它们是纯函数，您不能在reducer中放置*副作用*，例如网络调用。
- en: Middleware is the only place where side effects can be performed, eventually
    resulting in an action being dispatched on the store.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间件是唯一可以执行副作用的地方，最终导致动作在存储上分派。
- en: 'If you are using Redux with React, which is the most likely combination, there
    is a utility library called `react-redux`, which can glue the store with React
    components. It does this through a function called `connect()`, which binds the
    store with the passed in React component. Inside `connect()`, the React component
    subscribes to the store for state-change notifications. Binding to the store via
    `connect()` means that every state change is notified to every component. This
    requires adding additional abstractions, such as a *state-selector* (using `mapStateToProps`)
    or implementing `shouldComponentUpdate()` to receive only the relevant state updates:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Redux与React，这是最有可能的组合，有一个名为`react-redux`的实用库，它可以将存储与React组件粘合在一起。它通过一个名为`connect()`的函数来实现这一点，该函数将存储与传入的React组件绑定。在`connect()`内部，React组件订阅存储以接收状态更改通知。通过`connect()`绑定到存储意味着每个状态更改都会通知到每个组件。这需要添加额外的抽象，例如*state-selector*（使用`mapStateToProps`）或实现`shouldComponentUpdate()`来仅接收相关的状态更新：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We are deliberately skipping over a few other details that are required for
    a complete React-Redux setup, but the essentials are in place for a deeper comparison
    of Redux with MobX.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故意跳过了一些其他细节，这些细节对于完整的React-Redux设置是必需的，但基本要素已经就位，可以更深入地比较Redux和MobX。
- en: MobX versus Redux
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MobX与Redux
- en: In principle, MobX and Redux accomplish the same goal of providing a uni-directional
    data flow. The *store* is the central actor that manages all state changes and
    notifies the UI and other observers of the change in state. The mechanism to achieve
    that is quite different between MobX and Redux.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，MobX和Redux实现了提供单向数据流的相同目标。*store*是管理所有状态更改并通知UI和其他观察者状态更改的中心角色。MobX和Redux之间实现这一目标的机制是完全不同的。
- en: Redux relies on *immutable* state snapshots and reference-comparisons between
    two state snapshots to check for changes. In contrast, MobX thrives on *mutable*
    state and uses a granular notification system to track state changes. This fundamental
    difference in approach has implications on the **Developer eXperience** (**DX**)
    of using each framework. We will use the DX of building a single feature to perform
    a MobX versus Redux comparison.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Redux依赖于*immutable*状态快照和两个状态快照之间的引用比较来检查更改。相比之下，MobX依赖于*mutable*状态，并使用细粒度的通知系统来跟踪状态更改。这种方法上的根本差异对使用每个框架的**开发者体验**（**DX**）有影响。我们将使用构建单个功能的DX来执行MobX与Redux的比较。
- en: 'Let''s start with Redux first. Here is the list of things you have to do when
    working with Redux:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从Redux开始。在使用Redux时，您需要做的事情如下：
- en: '![](../images/00012.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00012.jpeg)'
- en: Define the shape of the state tree that will be encapsulated in the store. This
    is normally called `initialState`.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义将封装在存储中的状态树的形状。这通常被称为`initialState`。
- en: 'Identify all actions that can be performed to change this state tree. Each
    action is defined in the form `{ type: string, payload: any }`. The `type` property
    is used to identify the action and `payload` is additional data that is carried
    along with the action. The action types are usually created as `string`constants
    and exported from a module.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '识别可以执行以更改此状态树的所有操作。每个操作以`{ type: string, payload: any }`的形式定义。`type`属性用于标识操作，`payload`是随操作一起携带的附加数据。操作类型通常作为`string`常量创建并从模块导出。'
- en: Defining raw actions every time you need to dispatch them becomes very verbose.
    Instead, the convention is to have an `action-creator` function that wraps the
    details of the action type and takes in the payload as an argument.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次需要分派它们时定义原始操作变得非常冗长。相反，惯例是有一个包装操作类型细节并将有效负载作为参数传入的`action-creator`函数。
- en: Use the `connect` method to wire the React component with the store. Since every
    state change is notified to every component, you have to be careful to not re-render
    your component unnecessarily. The render should only happen when the part of the
    state that the component actually renders has changed (via `mapStateToProps`).
    Since every state change is notified to all *connected components*, it might be
    expensive to compute `mapStateToProps` every single time. To minimize these computations,
    it is recommended to use state selector libraries such as *reselect*. This increases
    the effort required to properly set up a performant React component. If you don't
    use these libraries, you have to take the onus of writing an efficient `shouldComponentUpdate`
    hook for the React component.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`connect`方法将React组件与存储连接起来。由于每个状态更改都会通知到每个组件，因此您必须小心，不要不必要地重新渲染组件。只有当组件实际呈现的状态部分发生变化时（通过`mapStateToProps`），渲染才应该发生。由于每个状态更改都会通知到所有*连接的组件*，因此每次计算`mapStateToProps`可能会很昂贵。为了最小化这些计算，建议使用诸如*reselect*之类的状态选择器库。这增加了正确设置高性能React组件所需的工作量。如果您不使用这些库，您必须承担编写高效的`shouldComponentUpdate`钩子的责任。
- en: Inside every reducer, you have to make sure that you are always returning a
    new instance of the state anytime there is a change. Note that the reducers are
    usually kept separate from the `initialState` definition and that requires going
    back and forth to ensure the proper state is changed in each of the reducer actions.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个reducer中，您必须确保在发生更改时始终返回状态的新实例。请注意，通常将reducers与`initialState`定义分开，并且需要来回确保在每个reducer操作中正确更改状态。
- en: Any side effect you want to perform has to be wrapped in middleware. For more
    complex side effects which involve async operations, it is better to rely on dedicated
    middleware libraries, such as `redux-thunk`, `redux-saga`, or `redux-observables`.
    Note that this also complicates how side effects are constructed and executed.
    Each of the previously mentioned middleware have their own conventions and terminology.
    Additionally, the place where an action is dispatched is not co-located with the
    place where the actual side effect is handled. This results in more jumping around
    files to construct the mental model of how a feature is put together.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想执行的任何副作用都必须包装在中间件中。对于涉及异步操作的更复杂的副作用，最好依赖于专用中间件库，如`redux-thunk`，`redux-saga`或`redux-observables`。请注意，这也使副作用的构建和执行变得更加复杂。先前提到的每个中间件都有自己的约定和术语。此外，分派动作的位置与处理实际副作用的位置不是共同位置。这导致需要在文件之间跳转，以构建功能如何组合的思维模型。
- en: As the complexity of the feature increases, there is more fragmentation between
    `actions`, `action-creators`, `middlewares`, `reducers`, and `initialState`. Not
    having things co-located also increases the effort needed to develop a crisp mental
    model of a how a feature is put together.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着功能的复杂性增加，`actions`，`action-creators`，`middlewares`，`reducers`和`initialState`之间的碎片化也越来越多。不共同位置也增加了开发清晰的功能组合思维模型所需的工作量。
- en: 'In the MobX world, the developer experience is quite different. You will see
    more of this as we explore MobX throughout this book, but here is the top-level
    scoop:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在MobX世界中，开发者体验是完全不同的。随着我们在本书中探索MobX，您将看到更多，但这是顶层信息：
- en: '![](../images/00013.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00013.jpeg)'
- en: Define the observable state for the feature in a store class. The various properties
    that can be changed and should be observed are marked with the `observable` API.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在存储类中为功能定义可观察状态。可以更改并应该被观察的各种属性都标有`observable` API。
- en: Define `actions` that will be needed to mutate the observable state.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义需要改变可观察状态的`actions`。
- en: Define all of the side effects (`autorun`, `reaction` and `when`) within the
    same feature class. The co-location of actions, reactions, and the observable
    state keeps the mental model crisp. MobX also supports async state updates out
    of the box, so no additional middleware libraries are needed to manage it.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一功能类中定义所有的副作用（`autorun`，`reaction`和`when`）。动作、反应和可观察状态的共同位置使思维模型清晰。MobX还原生支持异步状态更新，因此不需要额外的中间件库来管理它。
- en: Use the `mobx-react` package that includes the `observer` API, which allows
    the React components to connect to the observable store. You can sprinkle *observer*
    components throughout your React component tree, which is in fact the recommended
    approach to fine-tune component updates.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用包含`observer` API的`mobx-react`包，允许React组件连接到可观察存储。您可以在React组件树中随处添加*observer*组件，这实际上是调整组件更新的推荐方法。
- en: The advantage of using the *observer* is that there is no extra work needed
    to make the component efficient. Internally, the *observer* API ensures that the
    component is only updated when the rendered observable state changes.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*observer*的优势在于不需要额外的工作来使组件高效。在内部，*observer* API确保组件仅在呈现的可观察状态发生变化时才会更新。
- en: MobX shifts your mindset to think of the observable state and the corresponding
    React components. You don't have to focus much on the wiring needed to achieve
    this. It is abstracted away behind simple and elegant APIs, such as `observable`,
    `action`, `autorun`, and `observer`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: MobX将您的思维转向可观察状态和相应的React组件。您不必过多关注实现这一点所需的连接。它被简单而优雅的API所抽象，如`observable`，`action`，`autorun`和`observer`。
- en: We can go as far as saying that MobX enables a more *declarative form* of Redux.
    There are no action creators, reducers, or middleware to handle actions and produce
    the new state. The actions, side effects (reactions), and observable state are
    co-located inside the class or module. There are no complex `connect()` methods
    to glue a React component to the store. A simple `observer()` does the job with
    no extra wiring.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以说，MobX实现了一种更具声明性的Redux形式。没有动作创建者、减速器或中间件来处理动作并产生新状态。动作、副作用（反应）和可观察状态都位于类或模块内。没有复杂的`connect()`方法将React组件粘合到存储中。一个简单的`observer()`就能完成工作，不需要额外的连接。
- en: MobX is declarative Redux. It takes the workflow associated with Redux and simplifies
    it considerably. Some explicit setup is no longer needed, such as the use of `connect()`
    in Container components, reselect for memoized state selection, actions, reducers
    and of course the middleware.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: MobX是声明性的Redux。它接管了与Redux相关的工作流程，并大大简化了它。不再需要一些显式的设置，比如在容器组件中使用`connect()`，为记忆化状态选择使用reselect，动作、减速器，当然还有中间件。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The UI is the visual equivalent of data (the state) along with interactive controls
    to change that state. The UI fires actions, which leads to the change in state.
    *Side effects* are external operations that are triggered due to some state change.
    There are *observers* in the system that look out for certain state changes and
    perform the corresponding side effects.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: UI是数据（状态）的视觉等价物，以及交互控件来改变该状态。UI触发动作，导致状态的改变。*副作用*是由于某种状态改变而触发的外部操作。系统中有*观察者*，它们寻找特定的状态改变并执行相应的副作用。
- en: The data flow triad of *Action* --> *State* --> *UI*, coupled with side effects,
    creates a simple mental model of the UI. MobX strongly adheres to this mental
    model and you can see that reflected in its API, with *observables*, *actions*,
    *reactions*, and *observers*. The simplicity of this API makes it easy to tackle
    some of the complex interactions in UI.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*动作* --> *状态* --> *UI*的数据流三元组，加上副作用，构成了UI的简单心智模型。MobX强烈遵循这个心智模型，你可以在它的API中看到这一点，包括*可观察对象*、*动作*、*反应*和*观察者*。这个API的简单性使得它很容易处理UI中的一些复杂交互。'
- en: If you have used Redux before, you can see that MobX reduces the ceremony needed
    to cause a state change and handle side effects. MobX strives to provide a declarative
    and reactive API for state management without compromising on simplicity. Throughout
    this book, this philosophy of MobX will be explored, with a deeper look at its
    API and real-world use cases.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前使用过Redux，你会发现MobX减少了引起状态改变和处理副作用所需的仪式。MobX努力提供一种声明性和反应性的状态管理API，而不会牺牲简单性。在本书中，将探讨MobX的这种哲学，深入了解其API和实际用例。
- en: In the next chapter, we will dive into the world of MobX with a first hand look
    at its core building blocks.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入了解MobX的核心构建模块。
