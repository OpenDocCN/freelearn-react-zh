["```jsx\nconst searchState = observable({\n    term: '',\n    state: '',\n    results: [],\n    totalCount: 0,\n});\n```", "```jsx\nconst searchState = observable({\n    term: '',\n    status: '',\n    results: [],\n    totalCount: 0,\n\n    search: action(function() {\n        // invoke search API\n  }),\n\n    setTerm: action(function(value) {\n        this.term = value;\n    }),\n});\n```", "```jsx\nclass BookSearchStore {\n    @observable term = '';\n    @observable status = '';\n    @observable.shallow results = [];\n\n    @observable totalCount = 0;\n\n    @action.bound\n  setTerm(value) {\n        this.term = value;\n    }\n\n    @action.bound\n  async search() {\n        // invoke search API\n    }\n}\n\nexport const store = new BookSearchStore();\n```", "```jsx\nclass BookSearchStore {\n    @observable term = '';\n    @observable status = '';\n    @observable.shallow results = [];\n\n    @observable totalCount = 0;\n\n    /* ... */\n\n    @action.bound\n  async search() {\n        try {\n            this.status = 'pending';\n            const result = await searchBooks(this.term);\n\n            runInAction(() => {\n                this.totalCount = result.total;\n                this.results = result.items;\n                this.status = 'completed';\n            });\n        } catch (e) {\n            runInAction(() => (this.status = 'failed'));\n            console.log(e);\n        }\n    }\n}\n```", "```jsx\nimport {**inject**, observer} from '**mobx-react**'; @inject('store')\n@observer class App extends React.Component {\n    render() {\n        const { store } = this.props;\n\n        return (\n            <Fragment>\n                <Header />\n\n                <Grid container>\n                    <Grid item xs={12}>\n                      <Paper elevation={2}  style={{ padding: '1rem' }}>\n                            <**SearchTextField**\n  onChange={this.updateSearchText}   onEnter={store.search}  />\n                        </Paper>\n                    </Grid>\n\n                    <ResultsList style={{ marginTop: '2rem' }} />\n                </Grid>\n            </Fragment>\n        );\n    }\n\n    updateSearchText = event => {\n        this.props.store.setTerm(event.target.value);\n    };\n}\n```", "```jsx\nimport { store } from './BookStore';\nimport React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n```", "```jsx\nimport { store } from './BookStore';\nimport { preferences } from 'PreferencesStore;\n\n<Provider store={store} userPreferences={preferences}>\n    <App />\n</Provider>\n```", "```jsx\n@inject('userPreferences')\n@observer class PreferencesViewer extends React.Component {\n    render() {\n        const { userPreferences } = this.props;\n\n        /* ... */\n  }\n}\n```", "```jsx\n@inject('store')\n@observer export class SearchTextField extends React.Component {\n    render() {\n const { store, onChange } = this.props;\n const { term } = store;\n\n        return (\n            <Fragment>\n                <TextField\n  placeholder={'Search Books...'}   InputProps={{\n                        startAdornment: (\n                            <InputAdornment position=\"start\">\n                                <Search />\n                            </InputAdornment>\n                        ),\n                    }}   fullWidth={true}  value={term}   onChange={onChange}   onKeyUp={this.onKeyUp}  />\n\n                <SearchStatus />\n            </Fragment>\n        );\n    }\n\n    onKeyUp = event => {\n        if (event.keyCode !== 13) {\n            return;\n        }\n\n        this.props.onEnter();\n    };\n}\n```", "```jsx\n@inject('store')\n@observer class App extends React.Component {\n    render() {\n        const { store } = this.props;\n\n        return (\n            <Fragment>\n                <Header />\n\n                <Grid container>\n                    <Grid item xs={12}>\n                      <Paper elevation={2}  style={{ padding: '1rem' }}>\n                            <SearchTextField\n onChange={this.updateSearchText}  onEnter={store.search}  />\n                        </Paper>\n                    </Grid>\n\n                    <ResultsList style={{ marginTop: '2rem' }} />\n                </Grid>\n            </Fragment>\n        );\n    }\n\n updateSearchText = event => {\n this.props.store.setTerm(event.target.value);\n };\n}\n```", "```jsx\nimport React, { Fragment } from 'react';\nimport { inject, observer } from 'mobx-react';\n\nexport const SearchStatus = inject('store')(\n    observer(({ store }) => {\n        const { status, term } = store;\n\n        return (\n            <Fragment>\n                {status === 'pending' ? (\n                    <LinearProgress variant={'query'} />\n                ) : null}\n\n                {status === 'failed' ? (\n                    <Typography\n  variant={'subheading'}   style={{ color: 'red', marginTop: '1rem' }}  >\n                        {`Failed to fetch results for \"${term}\"`}\n                    </Typography>\n                ) : null}\n            </Fragment>\n        );\n    }),\n);\n```", "```jsx\nimport { inject, observer } from 'mobx-react';\n\n@inject(({ store }) => ({ searchStore: store }))\n@observer\nexport class ResultsList extends React.Component {\n    render() {\n        const { searchStore, style } = this.props;\n        const { isEmpty, results, totalCount, status } = searchStore;\n\n        return (\n            <Grid spacing={16} container style={style}>\n                {isEmpty && status === 'completed' ? (\n                    <Grid item xs={12}>\n <EmptyResults />\n                    </Grid>\n                ) : null}\n\n                {!isEmpty && status === 'completed' ? (\n                    <Grid item xs={12}>\n                        <Typography>\n                            Showing <strong>{results.length}</strong> \n                             of{' '}\n                            {totalCount} results.\n                        </Typography>\n                        <Divider />\n                    </Grid>\n                ) : null}\n\n                {results.map(x => (\n                    <Grid item xs={12} key={x.id}>\n <BookItem book={x} />\n                        <Divider />\n                    </Grid>\n                ))}\n            </Grid>\n        );\n    }\n}\n```", "```jsx\nclass BookSearchStore {\n    @observable term = 'javascript';\n    @observable status = '';\n    @observable.shallow results = [];\n\n    @observable totalCount = 0;\n\n @computed\n  get isEmpty() {\n return this.results.length === 0;\n }\n\n    /* ... */\n}\n```"]