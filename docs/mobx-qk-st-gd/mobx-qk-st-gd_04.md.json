["```jsx\nclass BookSearchStore {\n    @observable term = 'javascript';\n    @observable status = '';\n    @observable.shallow results = [];\n\n    @observable totalCount = 0;\n}\n```", "```jsx\nclass BookSearchStore {\n    @observable term = 'javascript';\n    @observable status = '';\n @observable.shallow results = [];\n\n    @observable totalCount = 0;\n}\n```", "```jsx\nimport { observable, action } from 'mobx';\n\nclass FormData {\n @observable.ref validations = null;\n\n    @observable username = '';\n    @observable password = '';\n\n    @action\n  validate() {\n        const { username, password } = this;\n this.validations = applyValidations({ username, password });\n    }\n}\n```", "```jsx\nclass Sphere {\n @observable.struct location = { x: 0, y: 0 };\n\n    constructor() {\n autorun(() => {\n console.log(\n `Current location: (${this.location.x}, ${this.location.y})`,\n );\n });\n    }\n\n    @action\n  moveTo(x, y) {\n        this.location = { x, y };\n    }\n}\n\nlet x = new Sphere();\n\nx.moveTo(0, 0);\nx.moveTo(20, 30); // Prints\nCurrent location: (0, 0)\nCurrent location: (20, 30)\n```", "```jsx\nimport { action, computed, decorate, observable } from 'mobx';\n class BookSearchStore {\n term = 'javascript';\n status = '';\n results = [];\n\n totalCount = 0;\n\n get isEmpty() {\n return this.results.length === 0;\n }\n\n setTerm(value) {\n this.term = value;\n }\n\n async search() {}\n}\n\ndecorate(BookSearchStore, {\n term: observable,\n status: observable,\n results: observable.shallow,\n totalCount: observable,\n\n isEmpty: computed,\n setTerm: action.bound,\n search: action.bound,\n});\n```", "```jsx\ndecorate(target, decorator-object)\n```", "```jsx\nimport { action, computed, observable } from 'mobx';\n\nconst cart = observable(\n    {\n        items: [],\n        modified: new Date(),\n        get hasItems() {\n            return this.items.length > 0;\n        },\n        addItem(name, quantity) {\n            /* ... */\n  },\n        removeItem(name) {\n            /* ... */\n  },\n    },\n {\n items: observable.shallow,\n modified: observable,\n\n hasItems: computed,\n addItem: action.bound,\n removeItem: action.bound,\n },\n);\n```", "```jsx\nimport { observable, action, extendObservable } from 'mobx';\n\nconst cart = observable({\n    /* ... */ });\n\nfunction applyFestiveOffer(cart) {\n    extendObservable(\n        cart,\n        {\n            coupons: ['OFF50FORU'],\n            get hasCoupons() {\n                return this.coupons && this.coupons.length > 0;\n            },\n            addCoupon(coupon) {\n                this.coupons.push(coupon);\n            },\n        },\n        {\n            coupons: observable.shallow,\n            addCoupon: action,\n        },\n    );\n}\n```", "```jsx\nextendObservable(target, object, decorators)\n```", "```jsx\nimport { observable, computed, decorate } from 'mobx';\n\n// 1\\. Using @computed class Cart {\n    @observable.shallow items = [];\n\n @computed\n  get hasItems() {\n return this.items.length > 0;\n }\n}\n\n// 2\\. Using decorate() class Cart2 {\n    items = [];\n\n    get hasItems() {\n        return this.items.length > 0;\n    }\n}\ndecorate(Cart2, {\n    items: observable.shallow,\n hasItems: computed,\n});\n\n// 3\\. Using computed() const cart = new Cart();\n\nconst isCartEmpty = computed(() => {\n return cart.items.length === 0;\n});\n\nconsole.log(isCartEmpty.get());\n\nconst disposer = isCartEmpty.observe(change => console.log(change.newValue));\n```", "```jsx\nimport { observable, computed, action, autorun } from 'mobx';\n\nclass DailyPrice {\n    @observable start = 0;\n    @observable end = 0;\n\n @computed\n  get metrics() {\n const { start, end } = this;\n return {\n delta: end - start,\n };\n }\n\n    @action\n  update(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n\n    constructor() {\n        autorun(() => {\n            const { delta } = this.metrics;\n            console.log(`Price Delta = ${delta}`);\n        });\n    }\n}\n\nconst price = new DailyPrice();\n\n// Changing start and end, but metrics don't change\nprice.update(0, 10);\nprice.update(10, 20);\nprice.update(20, 30);\n```", "```jsx\nPrice Delta = 0;\nPrice Delta = 10;\nPrice Delta = 10;\nPrice Delta = 10;\n```", "```jsx\nclass DailyPrice {\n    @observable start = 0;\n    @observable end = 0;\n\n @computed.struct  get metrics() {\n        const { start, end } = this;\n        return {\n            delta: end - start,\n        };\n    }\n    // ... \n}\n```", "```jsx\nimport { observable } from 'mobx';\n\nclass WishListStore {\n    @observable.shallow lists = [];\n}\n\nclass WishList {\n    @observable name = '';\n    @observable.shallow items = [];\n}\n\nclass WishListItem {\n    @observable title = '';\n    @observable purchased = false;\n}\n\nconst store = new WishListStore();\n```", "```jsx\nclass WishList {\n    @observable name = '';\n    @observable.shallow items = [];\n\n constructor(name) {\n this.name = name;\n }\n}\n\nclass WishListItem {\n    @observable title = '';\n    @observable purchased = false;\n\n constructor(title) {\n this.title = title;\n }\n}\n```", "```jsx\nclass WishListStore {\n    @observable.shallow lists = [];\n\n @computed\n  get isEmpty() {\n return this.lists.length === 0;\n }\n}\n\nclass WishList {\n    @observable name = '';\n    @observable.shallow items = [];\n\n @computed\n  get isEmpty() {\n return this.items.length === 0;\n }\n\n    /* ... */\n}\n```", "```jsx\nimport { observable, action } from 'mobx';\n\nclass WishListStore {\n    @observable.shallow lists = [];\n\n    /* ... */\n\n    @action\n  addWishList(name) {\n        this.lists.push(new WishList(name));\n    }\n\n    @action\n  removeWishList(list) {\n        this.lists.remove(list);\n    }\n}\n\nclass WishList {\n    @observable name = '';\n    @observable.shallow items = [];\n\n    /* ... */ \n    @action\n  renameWishList(newName) {\n        this.name = newName;\n    }\n\n    @action\n  addItem(title) {\n        this.items.push(new WishListItem(title));\n    }\n\n    @action\n  removeItem(item) {\n        this.items.remove(item);\n    }\n}\n```"]