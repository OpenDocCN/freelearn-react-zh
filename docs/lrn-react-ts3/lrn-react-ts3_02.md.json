["```jsx\nnpm install -g typescript\n```", "```jsx\ntsc -v\n```", "```jsx\nnpm install -g typescript@latest\n```", "```jsx\nlet product: [string, number];\n```", "```jsx\nproduct = [\"Table\", 500];\n```", "```jsx\nproduct = [500, \"Table\"];\n```", "```jsx\nlet flag: [string, boolean];\nflag = [\"Active\", false]\n\nlet last3Scores: [string, number, number, number]\nlast3Scores = [\"Billy\", 60, 70, 75];\n\nlet point: [number, number, number];\npoint = [100, 200, 100];\n```", "```jsx\nlet customer: [string, number, number];\ncustomer = [\"Tables Ltd\", 500100, 10500];\n```", "```jsx\nlet product: [string, number];\nproduct = [\"Table\", 500];\nconsole.log(product[0]);\nconsole.log(product[1]);\n```", "```jsx\nlet product: [string, number];\nproduct = [\"Table\", 500];\n\nfor (let element in product) {\n console.log(product[element]); \n}\n\nproduct.forEach(function(element) {\n console.log(element); \n});\n```", "```jsx\nfunction logScores(...scores) {\n  console.log(scores);\n}\n```", "```jsx\nlogScores(50, 85, 75);\n```", "```jsx\nfunction logScore(score1, score2, score3) {\n  console.log(score1, score2, score3);\n}\n```", "```jsx\nconst scores = [75, 65, 80];\n```", "```jsx\nlogScore(...scores);\n```", "```jsx\ntype Scores = [string, ...number[]];\n```", "```jsx\nconst billyScores: Scores = [\"Billy\", 60, 70, 75];\n```", "```jsx\nconst sallyScores: Scores = [\"Sally\", 60, 70, 75, 70];\n```", "```jsx\nfunction logScores(...scores) {\n  console.log(scores);\n}\n```", "```jsx\nfunction logScores(...scores: [...number[]]) {\n  console.log(scores);\n}\n```", "```jsx\nlogScores(50, 85, 75);\n```", "```jsx\ntype Scores = [string, ...number[]];\n\nfunction logNameAndScores(...scores: Scores) {\n  console.log(scores);\n}\n```", "```jsx\nlogNameAndScores(\"Sally\", 60, 70, 75, 70);\n```", "```jsx\nfunction logScore(score1, score2, score3) {\n  console.log(score1 + \", \" + score2 + \", \" + score3);\n}\n\nconst scores = [75, 65, 80];\n\nlogScore(...scores);\n```", "```jsx\nfunction logScore(score1: number, score2: number, score3: number) {\n  console.log(score1, score2, score3);\n}\n```", "```jsx\n const scores: [number, number, number] = [75, 65, 80];\n```", "```jsx\nconst scoresUnlimited: [...number[]] = [75, 65, 80];\n\nlogScore(...scoresUnlimited);\n```", "```jsx\n type Empty = [];\n```", "```jsx\n  const empty: Empty = [];\n```", "```jsx\n  const notEmpty: Empty = [\"Billy\"];\n```", "```jsx\ntype Scores = [] | [number] | [number, number] | [number, number, number]\n\nconst benScores: Scores = [];\nconst samScores: Scores = [55];\nconst bobScores: Scores = [95, 75];\nconst jayneScores: Scores = [65, 50, 70];\nconst sarahScores: Scores = [95, 50, 75, 75];\n```", "```jsx\n   type Scores = [number, number?, number?];\n```", "```jsx\nconst samScores: Scores = [55];\nconst bobScores: Scores = [95, 75];\nconst jayneScores: Scores = [65, 50, 70];\n```", "```jsx\n const sarahScores: Scores = [95, 50, 75, 75];\n```", "```jsx\n  const benScores: Scores = [];\n```", "```jsx\n type ProblematicScores = [number?, number?, number];\n```", "```jsx\ntype Scores = [number, number?, number?];\n\nfunction logScores(...scores: Scores) {\n  console.log(scores);\n}\n```", "```jsx\nlogScores(45, 80);\n```", "```jsx\nlogScores(45, 70, 80, 65);\n```", "```jsx\ntype Scores = [number, number?, number?];\n\nfunction logScoresEnhanced(...scores: Scores) {\n  if (scores.length === 3) {\n    console.log(scores, \"Thank you for logging all 3 scores\");\n  } else {\n    console.log(scores);\n  }\n}\n```", "```jsx\nlogScoresEnhanced(60, 70, 75); \nlogScoresEnhanced(45, 80); \nlogScoresEnhanced(95); \n```", "```jsx\nfunction logScores(scores: any) {\n  console.log(scores.firstName); \n  console.log(scores.scores); \n}\n```", "```jsx\nlogScores({\n  name: \"Billy\",\n  scores: [60, 70, 75]\n});\n```", "```jsx\nfunction logScoresBetter(scores: unknown) {\n  console.log(scores.firstName);\n  console.log(scores.scores);\n}\n```", "```jsx\nconst scoresCheck = (\n  scores: any\n): scores is { name: string; scores: number[] } => {\n  return \"name\" in scores && \"scores\" in scores;\n};\n```", "```jsx\nfunction logScores(scores: unknown) {\n  if (scoresCheck(scores)) {\n    console.log(scores.firstName);\n    console.log(scores.scores);\n  }\n}\n```", "```jsx\ntype Scores = { name: string; scores: number[] }\n\nconst scoresCheck = (\n  scores: any\n): scores is Scores => {\n  return \"name\" in scores && \"scores\" in scores;\n};\n```", "```jsx\ntype Scores = { \n  name: string; \n  scores: number[] \n};\n```", "```jsx\nfunction logScores(scores: unknown) {\n  console.log((scores as Scores).firstName);\n  console.log((scores as Scores).scores);\n}\n```", "```jsx\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"outDir\": \"dist\",\n    \"module\": \"es6\",\n    \"sourceMap\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitAny\": true,\n    \"rootDir\": \"src\"\n  },\n  \"include\": [\"src/**/*\"]\n}\n```", "```jsx\nexport function randomString() {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16);\n}\n```", "```jsx\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"outDir\": \"dist\",\n    \"module\": \"es6\",\n    \"sourceMap\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitAny\": true\n  },\n  \"include\": [\"src/**/*\"]\n}\n```", "```jsx\nimport { randomString } from \"../../Shared/dist/utils\";\n\nclass Person {\n  id: string;\n  name: string;\n  constructor() {\n    this.id = randomString();\n  }\n}\n```", "```jsx\ncd Shared\ntsc\n```", "```jsx\ncd ..\ncd ProjectA\ntsc\n```", "```jsx\nerror TS7016: Could not find a declaration file for module '../../Shared/dist/utils'. '.../Shared/dist/utils.js' implicitly has an 'any' type.\n```", "```jsx\n{\n  \"compilerOptions\": {\n    ...\n  },\n  \"references\": [\n { \"path\": \"../shared\" }\n ]\n}\n```", "```jsx\n\"references\": [\n  { \"path\": \"../shared\", \"prepend\": true }\n]\n```", "```jsx\nerror TS6306: Referenced project '.../shared' must have setting \"composite\": true\n```", "```jsx\n{\n  \"compilerOptions\": {\n    \"composite\": true,\n \"declaration\": true,\n    ...\n  },\n}\n```", "```jsx\ncd ..\ncd Shared\ntsc\n```", "```jsx\ncd ..\ncd ProjectA\ntsc\n```", "```jsx\n{\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"declaration\": true,\n    \"declarationMap\": true,\n    ...\n  },\n}\n```", "```jsx\ntsc --build ProjectA --verbose\n```", "```jsx\nProjects in this build: \n  * Shared/tsconfig.json\n  * ProjectA/tsconfig.json\n```", "```jsx\nProject 'Shared/tsconfig.json' is up to date because newest input 'Shared/src/utils.ts' is older than oldest output 'Shared/dist/utils.js'\n```", "```jsx\ntsc --build ProjectA --verbose\n```", "```jsx\nProject 'Shared/tsconfig.json' is out of date because oldest\noutput 'Shared/dist/utils.js' is older than newest input 'Shared/src/utils.ts\n\nBuilding project '.../Shared/tsconfig.json'\n```", "```jsx\ntsc --build ProjectA --force --verbose\n```", "```jsx\ninterface IProps {\n  text: string;\n  delimiter?: string;\n}\n\nclass SplitText extends Component<IProps> {\n  static defaultProps = {\n    delimiter: \",\"\n  };\n  render() {\n    const bits = this.props.text.split(this.props.delimiter!); \n    return (\n      <ul>\n        {bits.map((bit: string) => (\n          <li key={bit}>{bit}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nconst App = () => (\n  <div>\n    <SplitText text=\"Fred,Jane,Bob\" />\n  </div>\n);\n\nexport default App;\n```", "```jsx\nconst App = () => (\n  <div>\n    <SplitText text=\"Fred,Jane,Bob\" />\n  </div>\n);\n```", "```jsx\ninterface IProps {\n  text: string;\n  delimiter: string;\n}\n\nclass SplitText extends React.Component<IProps> {\n  static defaultProps = {\n    delimiter: \",\"\n  };\n  render() {\n    const bits = this.props.text.split(this.props.delimiter);\n    return (\n      <ul>\n        {bits.map((bit: string) => (\n          <li key={bit}>{bit}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n```", "```jsx\nfunction drawPoint(x: number, y: number, z: number) {\n  ...\n}\n```", "```jsx\nconst point: [number, number, number] = [100, 200, 300];\n```", "```jsx\ndrawPoint(1, 2, 3);\n```", "```jsx\nfunction getData(resource: string): any {\n  const data = ... // call the web API\n  if (resource === \"person\") {\n    data.fullName = `${data.firstName} ${data.surname}`;\n  }\n  return data;\n}\n```"]