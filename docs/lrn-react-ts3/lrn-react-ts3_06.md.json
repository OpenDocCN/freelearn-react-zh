["```jsx\nnpm start\n```", "```jsx\nimport * as React from \"react\";\n\nconst Product: React.SFC<{}> = props => {\n  return <React.Fragment>TODO</React.Fragment>;\n};\n\nexport default Product;\n```", "```jsx\nimport * as React from \"react\";\nimport { IProduct } from \"./ProductsData\";\n\ninterface IProps {\n product: IProduct;\n inBasket: boolean;\n onAddToBasket: () => void;\n}\nconst Product: React.SFC<IProps> = props => {\n  return <React.Fragment>TODO</React.Fragment>;\n};\n\nexport default Product;\n```", "```jsx\nconst Product: React.SFC<IProps> = props => {\n  return (\n    <React.Fragment>\n <h1>{product.name}</h1>\n <p>{product.description}</p>\n <p className=\"product-price\">\n {new Intl.NumberFormat(\"en-US\", {\n currency: \"USD\",\n style: \"currency\"\n }).format(product.price)}\n </p>\n {!this.state.added && (\n <button onClick={this.handleAddClick}>Add to basket</button>\n )}\n </React.Fragment>\n  );\n};\n```", "```jsx\nconst product = props.product;\nreturn ( \n  ...\n)\n```", "```jsx\n{!props.inBasket && (\n  <button onClick={this.handleAddClick}>Add to basket</button>\n)}\n```", "```jsx\nconst product = props.product;\n\nconst handleAddClick = () => {\n props.onAddToBasket();\n};\n\nreturn (\n  ...\n);\n```", "```jsx\n{!props.inBasket && (\n  <button onClick={handleAddClick}>Add to basket</button>\n)}\n```", "```jsx\nimport Product from \"./Product\";\n```", "```jsx\nreturn (\n <div className=\"page-container\">\n   <Prompt when={!this.state.added} message={this.navAwayMessage} />\n   {product ? (\n     <Product\n product={product}\n inBasket={this.state.added}\n onAddToBasket={this.handleAddClick}\n />\n   ) : (<p>Product not found!</p>)}\n </div>\n);\n```", "```jsx\nexport interface IReview {\n  comment: string;\n  reviewer: string;\n}\n```", "```jsx\nexport interface IProduct {\n  ...\n  reviews: IReview[];\n}\n```", "```jsx\nconst products: IProduct[] = [\n  {\n    id: 1,\n    ...\n    reviews: [\n {\n comment: \"Excellent! This does everything I want\",\n reviewer: \"Billy\"\n },\n { comment: \"The best router I've ever worked with\", reviewer: \n      \"Sally\" }\n ]\n  },\n  {\n    id: 2,\n    ..\n    reviews: [\n {\n comment: \"I've found this really useful in a large app I'm \n        working on\",\n reviewer: \"Billy\"\n },\n {\n comment: \"A bit confusing at first but simple when you get   \n        used to it\",\n reviewer: \"Sally\"\n }\n ]\n  },\n  {\n    id: 3,\n    ..\n    reviews: [\n {\n comment: \"I'll never work with a REST API again!\",\n reviewer: \"Billy\"\n },\n {\n comment: \"It makes working with GraphQL backends a breeze\",\n reviewer: \"Sally\"\n }\n ]\n  }\n];\n```", "```jsx\n<p>{product.description}</p>\n<div>\n <ul className=\"product-reviews\">\n {product.reviews.map(review => (\n <li key={review.reviewer} className=\"product-reviews-item\">\n <i>\"{review.comment}\"</i> - {review.reviewer}\n </li>\n ))}\n </ul>\n</div>\n<p className=\"product-price\">\n  ...\n</p>\n```", "```jsx\n.product-reviews {\n  list-style: none;\n  padding: 0px;\n}\n.product-reviews .product-reviews-item {\n  display: block;\n  padding: 8px 0px;\n}\n```", "```jsx\nimport * as React from \"react\";\n\ninterface IProps {}\ninterface IState {}\nclass Tabs extends React.Component<IProps, IState> {\n  public constructor(props: IProps) {\n    super(props);\n    this.state = {};\n  }\n  public render() {\n    return;\n  }\n}\n\nexport default Tabs;\n```", "```jsx\ninterface IState {\n  activeHeading: string;\n}\n```", "```jsx\ninterface IProps {\n  headings: string[];\n}\n```", "```jsx\npublic constructor(props: IProps) {\n  super(props);\n  this.state = {\n    activeHeading:\n this.props.headings && this.props.headings.length > 0\n ? this.props.headings[0]\n : \"\"\n  };\n}\n```", "```jsx\n    public render() {\n      return (\n        <ul className=\"tabs\">\n          {this.props.headings.map(heading => (\n            <li className={heading === this.state.activeHeading ? \n            \"active\" : \"\"}\n            >\n              {heading}\n            </li>\n          ))}\n        </ul>\n      );\n    }\n```", "```jsx\n.tabs {\n  list-style: none;\n  padding: 0;\n}\n.tabs li {\n  display: inline-block;\n  padding: 5px;\n  margin: 0px 5px 0px 5px;\n  cursor: pointer;\n}\n.tabs li:focus {\n  outline: none;\n}\n.tabs li.active {\n  border-bottom: #222 solid 2px;\n}\n```", "```jsx\nimport Tabs from \"./Tabs\";\n```", "```jsx\n<h1>{product.name}</h1>\n<Tabs headings={[\"Description\", \"Reviews\"]} />\n<p>{product.description}</p>\n```", "```jsx\n<li\n  onClick={this.handleTabClick}\n  className={heading === this.state.activeHeading ? \"active\" : \"\"}\n>\n  {heading}\n</li>\n```", "```jsx\nprivate handleTabClick = (e: React.MouseEvent<HTMLLIElement>) => {\n  const li = e.target as HTMLLIElement;\n  const heading: string = li.textContent ? li.textContent : \"\";\n  this.setState({ activeHeading: heading });\n};\n```", "```jsx\n<Tabs>\n  <Tabs.Tab name=\"Description\" initialActive={true}>\n    <b>Description</b>\n  </Tabs.Tab>\n  <Tabs.Tab name=\"Reviews\">\n     Reviews\n  </Tabs.Tab>\n</Tabs>\n```", "```jsx\ninterface IState {\n  activeName: string;\n}\nclass Tabs extends React.Component<{}, IState> {\n  public render() {\n    ...\n  }\n  ...\n}\n```", "```jsx\ninterface ITabProps {\n  name: string;\n  initialActive?: boolean;\n}\n```", "```jsx\nclass Tabs extends React.Component<IProps, IState> {\n\n  public static Tab: React.SFC<ITabProps> = props => <li>TODO - render the nodes child nodes</li>;\n\n  public render() {...}\n\n  ...\n}\n```", "```jsx\n<Tabs.Tab name=\"Description\" initialActive={true}>\n  <b>Description</b>\n/Tabs.Tab>\n```", "```jsx\npublic static Tab: React.SFC<ITabProps> = props => <li>{props.children}</li>;\n```", "```jsx\npublic render() {\n  return (\n    <ul className=\"tabs\">{this.props.children}</ul>\n  );\n}\n```", "```jsx\ninterface ITabsContext {\n  activeName?: string;\n  handleTabClick?: (name: string) => void;\n}\n```", "```jsx\nconst TabsContext = React.createContext<ITabsContext>({});\n```", "```jsx\npublic render() {\n  return (\n    <TabsContext.Provider\n value={{\n activeName: this.state ? this.state.activeName : \"\",\n handleTabClick: this.handleTabClick\n }}\n >\n      <ul className=\"tabs\">{this.props.children}</ul>\n    </TabsContext.Provider>\n  );\n}\n```", "```jsx\nprivate handleTabClick = (name: string) => {\n  this.setState({ activeName: name });\n};\n```", "```jsx\n public static Tab: React.SFC<ITabProps> = props => (\n  <TabsContext.Consumer>\n {(context: ITabsContext) => {\n const activeName = context.activeName\n ? context.activeName\n : props.initialActive\n ? props.name\n : \"\";\n const handleTabClick = (e: React.MouseEvent<HTMLLIElement>) => \n      {\n if (context.handleTabClick) {\n context.handleTabClick(props.name);\n }\n };\n      return (\n        <li\n          onClick={handleTabClick}\n className={props.name === activeName ? \"active\" : \"\"}\n        >\n          {props.children}\n        </li>\n      );\n    }}\n  </TabsContext.Consumer>\n);\n```", "```jsx\n <React.Fragment>\n  <h1>{product.name}</h1>\n\n  <Tabs>\n <Tabs.Tab name=\"Description\" initialActive={true}>\n <b>Description</b>\n </Tabs.Tab>\n <Tabs.Tab name=\"Reviews\">Reviews</Tabs.Tab>\n </Tabs>\n\n  <p>{product.description}</p>\n  ...\n</React.Fragment>\n```", "```jsx\n<Tabs>\n  <Tabs.Tab\n    name=\"Description\"\n    initialActive={true}\n    heading={() => <b>Description</b>}\n  >\n    <p>{product.description}</p>\n  </Tabs.Tab>\n\n  <Tabs.Tab \n    name=\"Reviews\"\n    heading={() => \"Reviews\"} \n  >\n    <ul className=\"product-reviews\">\n      {product.reviews.map(review => (\n        <li key={review.reviewer}>\n          <i>\"{review.comment}\"</i> - {review.reviewer}\n        </li>\n      ))}\n    </ul>\n  </Tabs.Tab>\n</Tabs>\n```", "```jsx\ninterface ITabProps {\n  name: string;\n  initialActive?: boolean;\n  heading: () => string | JSX.Element;\n}\n```", "```jsx\nreturn (\n  <li\n    onClick={handleTabClick}\n    className={props.name === activeName ? \"active\" : \"\"}\n  >\n    {props.heading()}\n  </li>\n);\n```", "```jsx\n<Tabs>\n  <Tabs.Tab\n    name=\"Description\"\n    initialActive={true}\n    heading={() => <b>Description</b>}\n  />\n  <Tabs.Tab name=\"Reviews\" heading={() => \"Reviews\"} />\n</Tabs>\n```", "```jsx\n{\n  \"extends\": [\"tslint:recommended\", \"tslint-react\", \"tslint-config-prettier\"],\n  \"rules\": {\n    ...\n    \"jsx-no-lambda\": false\n  },\n  ...\n}\n```", "```jsx\ninterface ITabsContext {\n  activeName: string;\n  handleTabClick?: (name: string, content: React.ReactNode) => void;\n}\n```", "```jsx\ninterface IState {\n  activeName: string;\n  activeContent: React.ReactNode;\n}\n```", "```jsx\nprivate handleTabClick = (name: string, content: React.ReactNode) => {\n  this.setState({ activeName: name, activeContent: content });\n};\n```", "```jsx\nconst handleTabClick = (e: React.MouseEvent<HTMLLIElement>) => {\n  if (context.handleTabClick) {\n    context.handleTabClick(props.name, props.children);\n  }\n};\n```", "```jsx\n<TabsContext.Provider ...\n>\n  <ul className=\"tabs\">{this.props.children}</ul>\n  <div>{this.state && this.state.activeContent}</div>\n</TabsContext.Provider>\n```", "```jsx\n<h1>{product.name}</h1>\n\n<Tabs>\n <Tabs.Tab\n name=\"Description\"\n initialActive={true}\n heading={() => <b>Description</b>}\n >\n <p>{product.description}</p>\n </Tabs.Tab>\n\n <Tabs.Tab name=\"Reviews\" heading={() => \"Reviews\"}>\n <ul className=\"product-reviews\">\n {product.reviews.map(review => (\n <li key={review.reviewer}>\n <i>\"{review.comment}\"</i> - {review.reviewer}\n </li>\n ))}\n </ul>\n </Tabs.Tab>\n</Tabs>\n\n<p className=\"product-price\">\n...\n</p>\n```", "```jsx\npublic static Tab: React.SFC<ITabProps> = props => (\n <TabsContext.Consumer>\n {(context: ITabsContext) => {\n  if (!context.activeName && props.initialActive) {\n if (context.handleTabClick) {\n context.handleTabClick(props.name, props.children);\n return null;\n }\n }\n const activeName = context.activeName\n ? context.activeName\n : props.initialActive\n ? props.name\n : \"\";\n ...\n }}\n </TabsContext.Consumer>\n);\n```", "```jsx\nexport const getProduct = async (id: number): Promise<IProduct | null> => {\n  await wait(1000);\n  const foundProducts = products.filter(customer => customer.id === id);\n  return foundProducts.length === 0 ? null : foundProducts[0];\n};\n```", "```jsx\nconst wait = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n```", "```jsx\nimport { getProduct, IProduct } from \"./ProductsData\";\n```", "```jsx\ninterface IState {\n  product?: IProduct;\n  added: boolean;\n  loading: boolean;\n}\n```", "```jsx\npublic constructor(props: Props) {\n  super(props);\n  this.state = {\n    added: false,\n    loading: true\n  };\n}\n```", "```jsx\npublic async componentDidMount() {\n  if (this.props.match.params.id) {\n    const id: number = parseInt(this.props.match.params.id, 10);\n    const product = await getProduct(id);\n    if (product !== null) {\n      this.setState({ product, loading: false });\n    }\n  }\n}\n```", "```jsx\nnpm start\n```", "```jsx\nimport * as React from \"react\";\n\ninterface IProps {\n  loading: boolean;\n}\n\nconst withLoader = <P extends object>(\n  Component: React.ComponentType<P>\n): React.SFC<P & IProps> => ({ loading, ...props }: IProps) =>\n  // TODO - return a loading spinner if loading is true otherwise return the component passed in \n\nexport default withLoader;\n```", "```jsx\nconst withLoader = <P extends object>(\n  Component: React.ComponentType<P>\n): React.SFC<P & IProps> => ({ loading, ...props }: IProps) =>\n  loading ? (\n <div className=\"loader-overlay\">\n <div className=\"loader-circle-wrap\">\n <div className=\"loader-circle\" />\n </div>\n </div>\n ) : (\n <Component {...props} />\n );\n```", "```jsx\n.loader-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: Black;\n  opacity: 0.3;\n  z-index: 10004;\n}\n.loader-circle-wrap {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  height: 100px;\n  width: 100px;\n  margin: auto;\n}\n.loader-circle {\n  border: 4px solid #ffffff;\n  border-top: 4px solid #899091;\n  border-radius: 50%;\n  width: 100px;\n  height: 100px;\n  animation: loader-circle-spin 0.7s linear infinite;\n}\n```", "```jsx\nconst withLoader = <P extends object>(Component: React.ComponentType<P>) =>\n  class WithLoader extends React.Component<P & IProps> {\n    public render() {\n      const { loading, ...props } = this.props as IProps;\n      return loading ? (\n        <div className=\"loader-overlay\">\n          <div className=\"loader-circle-wrap\">\n            <div className=\"loader-circle\" />\n          </div>\n        </div>\n      ) : (\n        <Component {...props} />\n      );\n    }\n  };\n```", "```jsx\nimport withLoader from \"./withLoader\";\n```", "```jsx\nexport default withLoader(Product);\n```", "```jsx\n<Product\n  loading={this.state.loading}\n  product={product}\n  inBasket={this.state.added}\n  onAddToBasket={this.handleAddClick}\n/>\n```", "```jsx\n{product || this.state.loading ? (\n  <Product\n    loading={this.state.loading}\n    product={product}\n    inBasket={this.state.added}\n    onAddToBasket={this.handleAddClick}\n  />\n) : (\n  <p>Product not found!</p>\n)}\n```", "```jsx\ninterface IProps {\n  product?: IProduct;\n  inBasket: boolean;\n  onAddToBasket: () => void;\n}\n```", "```jsx\nconst handleAddClick = () => {\n  props.onAddToBasket();\n};\nif (!product) {\n return null;\n}\nreturn (\n  <React.Fragment>\n    ...\n  </React.Fragment>\n);\n```", "```jsx\nexport const getProducts = async (): Promise<IProduct[]> => {\n  await wait(1000);\n  return products;\n};\n```", "```jsx\n<Loader loading={this.state.loading}>\n  <div>\n    The content for my component ...\n  </div>\n</Loader>\n```"]