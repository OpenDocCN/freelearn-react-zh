["```jsx\ntype Control = \"Textbox\";\n```", "```jsx\nlet notes: Control;\nnotes = \"Textbox\";\n```", "```jsx\nnotes = \"DropDown\";\n```", "```jsx\nnotes = null;\nnotes = undefined;\n```", "```jsx\ntype Control = \"Textbox\" | \"DropDown\"\n```", "```jsx\nlet notes: Control;\nnotes = \"Textbox\";\nnotes = \"DropDown\";\n```", "```jsx\ntype Control = \"Textbox\" | \"DropDown\" | \"DatePicker\" | \"NumberSlider\";\n```", "```jsx\nnotes = \"DatePicker\";\nnotes = \"NumberSlider\";\n```", "```jsx\ninterface ITextbox {\n  control: \"Textbox\";\n  value: string;\n  multiline: boolean;\n}\n\ninterface IDatePicker {\n  control: \"DatePicker\";\n  value: Date;\n}\n\ninterface INumberSlider {\n  control: \"NumberSlider\";\n  value: number;\n}\n```", "```jsx\ntype Field = ITextbox | IDatePicker | INumberSlider;\n```", "```jsx\nfunction intializeValue(field: Field) {\n  switch (field.control) {\n    case \"Textbox\":\n      field.value = \"\";\n      break;\n    case \"DatePicker\":\n      field.value = new Date();\n      break;\n    case \"NumberSlider\":\n      field.value = 0;\n      break;\n    default:\n      const shouldNotReach: never = field;\n  }\n}\n```", "```jsx\ninterface ICheckbox {\n  control: \"Checkbox\";\n  value: boolean;\n}\n```", "```jsx\ntype Field = ITextbox | IDatePicker | INumberSlider | ICheckbox;\n```", "```jsx\nfunction intializeValue(field: Field) {\n  switch (field.control) {\n    case \"Textbox\":\n      field.value = \"\";\n      break;\n    case \"DatePicker\":\n      field.value = new Date();\n      break;\n    case \"NumberSlider\":\n      field.value = 0;\n      break;\n    case \"Checkbox\":\n field.value = false;\n break;\n    default:\n      const shouldNotReach: never = field;\n  }\n}\n```", "```jsx\ntype StringOrStringArray = string | string[];\n```", "```jsx\nfunction first(stringOrArray: StringOrStringArray): string {\n\n}\n```", "```jsx\nfunction first(stringOrArray: StringOrStringArray): string {\n  if (typeof stringOrArray === \"string\") {\n    return stringOrArray.substr(0, 1);\n  } else {\n    return stringOrArray[0];\n  }\n}\n```", "```jsx\nconsole.log(first(\"The\"));\nconsole.log(first([\"The\", \"cat\"]));\n```", "```jsx\nfunction firstEnhanced(stringOrArray: StringOrStringArray): string {\n  if (typeof stringOrArray === \"string\") {\n    return stringOrArray.substr(0, 1);\n  } else if (typeof stringOrArray === \"string[]\") { \n    return stringOrArray[0];\n  } else {\n    const shouldNotReach: never = stringOrArray;\n  }\n}\n```", "```jsx\nfunction firstEnhanced(stringOrArray: StringOrStringArray): string {\n  if (typeof stringOrArray === \"string\") {\n    return stringOrArray.substr(0, 1);\n  } else if (typeof stringOrArray === \"object\") { \n    return stringOrArray[0];\n  } else {\n    const shouldNotReach: never = stringOrArray;\n  }\n}\n```", "```jsx\nclass Person {\n  id: number;\n  firstName: string;\n  surname: string;\n}\n\nclass Company {\n  id: number;\n  name: string;\n}\n```", "```jsx\ntype PersonOrCompany = Person | Company;\n```", "```jsx\nfunction logName(personOrCompany: PersonOrCompany) {\n  if (personOrCompany instanceof Person) {\n    console.log(`${personOrCompany.firstName} ${personOrCompany.surname}`);\n  } else {\n    console.log(personOrCompany.name);\n  }\n}\n```", "```jsx\ninterface IPerson {\n  id: number;\n  firstName: string;\n  surname: string;\n}\n\ninterface ICompany {\n  id: number;\n  name: string;\n}\n```", "```jsx\ntype PersonOrCompany = IPerson | ICompany;\n```", "```jsx\nfunction logName(personOrCompany: PersonOrCompany) {\n if (\"firstName\" in personOrCompany) {\n  console.log(`${personOrCompany.firstName} ${personOrCompany.surname}`);\n } else {\n  console.log(personOrCompany.name);\n }\n}\n```", "```jsx\ninterface IPerson {\n  id: number;\n  firstName: string;\n  surname: string;\n}\n\ninterface ICompany {\n  id: number;\n  name: string;\n}\n\ntype PersonOrCompany = IPerson | ICompany;\n```", "```jsx\nfunction isPerson(personOrCompany: PersonOrCompany): personOrCompany is IPerson {\n  return \"firstName\" in personOrCompany;\n}\n```", "```jsx\nfunction getData<T>(url: string): Promise<T> {\n\n}\n```", "```jsx\nconst getData = <T>(url: string): Promise<T> => {\n\n};\n```", "```jsx\nfunction getData<T>(url: string): Promise<T> {\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json();\n  });\n}\n```", "```jsx\ninterface IPerson {\n  id: number;\n  name: string;\n}\n\ngetData<IPerson>(\"/people/1\").then(person => console.log(person));\n```", "```jsx\nclass List<T> {\n\n}\n```", "```jsx\nprivate data: T[] = [];\n```", "```jsx\npublic getList(): T[] {\n  return this.data;\n}\n```", "```jsx\npublic add(item: T) {\n  this.data.push(item);\n}\n```", "```jsx\npublic remove(item: T) {\n  this.data = this.data.filter((dataItem: T) => {\n    return !this.equals(item, dataItem);\n  });\n}\nprivate equals(obj1: T, obj2: T) {\n  return Object.keys(obj1).every(key => {\n    return obj1[key] === obj2[key];\n  });\n}\n```", "```jsx\ninterface IPerson {\n  id: number;\n  name: string;\n}\nconst billy: IPerson = { id: 1, name: \"Billy\" };\n```", "```jsx\nconst people = new List<IPerson>();\n```", "```jsx\npeople.add(billy);\npeople.remove(billy);\n```", "```jsx\npeople.add({name: \"Sally\"});\n```", "```jsx\nconst items = people.getList();\n```", "```jsx\ninterface IProps { ... }\ninterface IState { ... }\nclass App extends React.Component<IProps, IState> {\n  ...\n}\n```", "```jsx\nfunction condenseString(string: string): string {\n  return string.split(\" \").join(\"\");\n}\n```", "```jsx\nfunction condenseArray(array: string[]): string[] {\n  return array.map(item => item.split(\" \").join(\"\"));\n}\n```", "```jsx\nfunction condense(stringOrArray: string | string[]): string | string[] {\n  return typeof stringOrArray === \"string\"\n    ? stringOrArray.split(\" \").join(\"\")\n    : stringOrArray.map(item => item.split(\" \").join(\"\"));\n}\n```", "```jsx\nconst condensedText = condense(\"the cat sat on the mat\");\n```", "```jsx\nfunction condense(string: string): string;\nfunction condense(array: string[]): string[];\nfunction condense(stringOrArray: string | string[]): string | string[] { ... }\n```", "```jsx\nconst moreCondensedText = condense(\"The cat sat on the mat\");\n```", "```jsx\ninterface IPerson {\n  id: number;\n  name: string;\n}\n```", "```jsx\ntype PersonProps = keyof IPerson;\n```", "```jsx\ninterface IPerson {\n  id: number;\n  name: string;\n  age: number\n}\n```", "```jsx\nclass Field {\n  name: string;\n  label: string;\n  defaultValue: any;\n}\n```", "```jsx\nclass Field<T, K extends keyof T> {\n  name: K;\n  label: string;\n  defaultValue: any;\n}\n```", "```jsx\nconst idField: Field<IPerson, \"id\"> = new Field();\n```", "```jsx\nconst addressField: Field<IPerson, \"address\"> = new Field();\n```", "```jsx\nidField.defaultValue = \"2\";\n```", "```jsx\nclass Field<T, K extends keyof T> {\n  name: K;\n  label: string;\n  defaultValue: T[K];\n}\n```", "```jsx\nidField.defaultValue = 2;\n```", "```jsx\ninterface IPerson {\n  id: number;\n  name: string;\n}\n```", "```jsx\ntype ReadonlyPerson = { readonly [P in keyof IPerson]: IPerson[P] };\n```", "```jsx\ntype ReadonlyPerson = { \n  readonly id: number\n  readonly name: string \n};\n```", "```jsx\nlet billy: ReadonlyPerson = {\n  id: 1,\n  name: \"Billy\"\n};\nbilly.name = \"Sally\";\n```", "```jsx\nlet sally: Readonly<IPerson> = {\n  id: 1,\n  name: \"sally\"\n};\n```", "```jsx\nSally.name = \"Billy\";\n```", "```jsx\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n```", "```jsx\ntype Stringify<T> = { [P in keyof T]: string };\n```", "```jsx\nlet tim: Stringify<IPerson> = {\n id: \"1\",\n name: \"Tim\"\n};\n```", "```jsx\ntim.id = 1\n```", "```jsx\ninterface ICourseMark {\n  courseName: string;\n  grade: string;\n}\n```", "```jsx\nconst geography: ICourseMark = {\n  courseName: \"Geography\",\n  grade: \"B\"\n} \n```", "```jsx\nfunction isNumberPopulated(field: number): boolean {\n  return field !== null && field !== undefined;\n}\n\nfunction isStringPopulated(field: string): boolean {\n  return field !== null && field !== undefined && field !== \"\";\n}\n```", "```jsx\ntype Stages = {\n  pending: 'Pending',\n  started: 'Started',\n  completed: 'Completed',\n};\n```", "```jsx\ntype Grade = 'gold' | 'silver' | 'bronze';\n```", "```jsx\ntype GradeMap = {\n  gold: string;\n  silver: string;\n  bronze: string\n};\n```"]