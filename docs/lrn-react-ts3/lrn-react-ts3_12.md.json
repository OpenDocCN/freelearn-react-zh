["```jsx\n const flag = false;\n```", "```jsx\nclass Product {\n  constructor(public name: string, public unitPrice: number) {}\n}\n\nlet table = new Product();\ntable.name = \"Table\";\ntable.unitPrice = 700;\n```", "```jsx\nlet table = new Product(\"Table\", 700);\n```", "```jsx\nclass Product {\n  constructor(public name?: string, public unitPrice?: number) {}\n}\n```", "```jsx\n{\n \"rules\": {\n \"no-console\": true\n }\n}\n```", "```jsx\nfunction drawPoint(x: number, y: number, z: number) {\n  ...\n}\n```", "```jsx\nconst point: [number, number, number] = [100, 200, 300];\n```", "```jsx\ndrawPoint(...point);\n```", "```jsx\ndrawPoint(1, 2, 3);\n```", "```jsx\nfunction drawPoint(...point: [number, number, number]) {\n  ...\n}\n```", "```jsx\nfunction drawPoint(...point: [number, number, number?]) {\n  ...\n}\n```", "```jsx\nfunction getData(resource: string): any {\n  const data = ... // call the web API\n  if (resource === \"person\") {\n    data.fullName = `${data.firstName} ${data.surname}`;\n  }\n  return data;\n}\n```", "```jsx\nclass Person {\n firstName: string;\n surname: string;\n fullName: string;\n}\n\nfunction getData(resource: string): unknown {\n  const data = {};\n  if (data instanceof Person) {\n    data.fullName = `${data.firstName} ${data.surname}`;\n  }\n  return data;\n}\n```", "```jsx\ntsc --build ... --dry --verbose \n```", "```jsx\n\"rules\": {\n  \"no-debugger\": false,\n  \"no-console\": false,\n},\n```", "```jsx\n<button>{this.props.buttonLabel}</button>\n```", "```jsx\ninterface IProps {\n  buttonLabel?: string\n}\n```", "```jsx\npublic static defaultProps = {\n  buttonLabel: \"Do it\"\n};\n```", "```jsx\n{this.state.doItVisible && <button>{this.props.buttonLabel}</button>}\n```", "```jsx\n<button onClick={this.handleDoItClick}>{this.props.buttonLabel}</button>\n```", "```jsx\nprivate handleDoItClick = () => {\n  // TODO: some stuff!\n};\n```", "```jsx\nprivate handleDoItClick = () => {\n  this.setState({doItDisabled: true})\n};\n```", "```jsx\n<button disabled={this.state.doItDisabled}>{this.props.buttonLabel}</button>\n```", "```jsx\nconst count, setCount = React.useState(10);\n```", "```jsx\nconst decrement = () => {\n  // TODO - reduce count by 1\n};\n```", "```jsx\nconst decrement = () => {\n  setCount(count - 1);\n};\n```", "```jsx\n<Route path=\"/customers\" component={CustomersPage} />\n```", "```jsx\n<Route exact={true} path=\"/customers\" component={CustomersPage} />\n```", "```jsx\n<Route exact={true} path=\"/customers/:customerId\" component={CustomerPage} />\n```", "```jsx\n<Switch>\n  <Route path=\"/customers/:customerId\" component={CustomerPage} />\n  <Route exact={true} path=\"/customers\" component={CustomersPage} />\n  <Route component={NotFoundPage} />\n</Switch>\n```", "```jsx\nimport { RouteComponentProps } from \"react-router-dom\";\n\nclass CustomersPage extends React.Component<RouteComponentProps, IState> { ... }\n```", "```jsx\npublic componentDidMount() {\n  const searchParams = new URLSearchParams(props.location.search);\n  const search = searchParams.get(\"search\") || \"\";\n\n  const products = await ... // make web service call to do search\n\n  this.setState({ products });\n}\n```", "```jsx\n<Switch>\n <Route path=\"/clients/:customerId\" component={CustomerPage} />\n <Route exact={true} path=\"/clients\" component={CustomersPage} />\n\n <Redirect from=\"/customers/:customerId\" to=\"/clients/:customerId\" />\n <Redirect exact={true} from=\"/customers\" to=\"/clients\" />\n\n <Route component={NotFoundPage} />\n</Switch>\n\n```", "```jsx\ninterface ICourseMark {\n  courseName: string;\n  grade: string;\n}\n```", "```jsx\nconst geography: ICourseMark = {\n  courseName: \"Geography\",\n  grade: \"B\"\n} \n```", "```jsx\ninterface ICourseMark {\n  courseName: string;\n  grade: \"A\" | \"B\" | \"C\" | \"D\";\n}\n```", "```jsx\nfunction isNumberPopulated(field: number): boolean {\n  return field !== null && field !== undefined;\n}\n\nfunction isStringPopulated(field: string): boolean {\n  return field !== null && field !== undefined && field !== \"\";\n}\n```", "```jsx\nfunction isPopulated(field: number): boolean \nfunction isPopulated(field: string): boolean\nfunction isPopulated(field: number | string): boolean {\n if (typeof field === \"number\") {\n return field !== null && field !== undefined;\n } else {\n return field !== null && field !== undefined && field !== \"\";\n }\n}\n```", "```jsx\nfunction isPopulated<T>(field: T): boolean {\n  if (typeof field === \"string\") {\n    return field !== null && field !== undefined && field !== \"\";\n  } else {\n    return field !== null && field !== undefined;\n  }\n} \n```", "```jsx\ntype Stages = {\n  pending: 'Pending',\n  started: 'Started',\n  completed: 'Completed',\n};\n```", "```jsx\ntype StageUnion = keyof Stages\n```", "```jsx\ntype Grade = 'gold' | 'silver' | 'bronze';\n```", "```jsx\ntype GradeMap = {\n  gold: string;\n  silver: string;\n  bronze: string\n};\n```", "```jsx\ntype GradeMap = { [P in Grade]: string }\n```", "```jsx\nexport const getProducts = async (): Promise<IProduct[]> => {\n  await wait(1000);\n  return products;\n};\n```", "```jsx\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { IProduct } from \"./ProductsData\";\nimport withLoader from \"./withLoader\";\n\ninterface IProps {\n  products: IProduct[];\n  search: string;\n}\nconst ProductList: React.SFC<IProps> = props => {\n  const { products, search } = props;\n  return (\n    <ul className=\"product-list\">\n      {products.map(product => {\n        if (\n          !search ||\n          (search &&\n            product.name.toLowerCase().indexOf(search.toLowerCase()) > -1)\n        ) {\n          return (\n            <li key={product.id} className=\"product-list-item\">\n              <Link to={`/products/${product.id}`}>{product.name}</Link>\n            </li>\n          );\n        } else {\n          return null;\n        }\n      })}\n    </ul>\n  );\n};\n\nexport default withLoader(ProductList);\n```", "```jsx\npublic render() {\n return (\n <div className=\"page-container\">\n <p>\n Welcome to React Shop where you can get all your tools for ReactJS!\n </p>\n <ProductList\n loading={this.state.loading}\n products={this.state.products}\n search={this.state.search}\n />\n </div>\n );\n}\n```", "```jsx\n<Loader loading={this.state.loading}>\n  <div>\n    The content for my component ...\n  </div>\n</Loader>\n```", "```jsx\nimport * as React from \"react\";\n\ninterface IProps {\n  loading: boolean;\n}\n\nconst Loader: React.SFC<IProps> = props =>\n  props.loading ? (\n    <div className=\"loader-overlay\">\n      <div className=\"loader-circle-wrap\">\n        <div className=\"loader-circle\" />\n      </div>\n    </div>\n  ) : props.children ? (\n    <React.Fragment>{props.children}</React.Fragment>\n  ) : null;\n\nexport default Loader;\n```", "```jsx\ninterface IFieldProps {\n  ...\n  type?: \"Text\" | \"Email\" | \"Select\" | \"TextArea\" | \"Number\";\n}\n```", "```jsx\n{(type === \"Text\" || type === \"Email\" || type === \"Number\") && (\n  <input\n    type={type.toLowerCase()}\n    id={name}\n    value={context.values[name]}\n    onChange={e => handleChange(e, context)}\n    onBlur={e => handleBlur(e, context)}\n  />\n)}\n```", "```jsx\n<Form.Field name=\"urgency\" label=\"How urgent is a response?\" type=\"Number\" />\n```", "```jsx\nexport const between: Validator = (\n  fieldName: string,\n  values: IValues,\n  bounds: { lower: number; upper: number }\n): string =>\n  values[fieldName] &&\n  (values[fieldName] < bounds.lower || values[fieldName] > bounds.upper)\n    ? `This must be between ${bounds.lower} and ${bounds.upper}`\n    : \"\";\n```", "```jsx\nimport { between, Form, ISubmitResult, IValues, minLength, required } from \"./Form\";\n```", "```jsx\nvalidationRules={{\n  email: { validator: required },\n  name: [{ validator: required }, { validator: minLength, arg: 3 }],\n  urgency: [{ validator: between, arg: { lower: 1, upper: 10 } }]\n}}\n```", "```jsx\ninterface ITouched {\n [key: string]: boolean;\n}\n\ninterface IState {\n```", "```jsx\n  touched: ITouched;\n  ...\n}\n```", "```jsx\nconstructor(props: IFormProps) {\n  super(props);\n  const errors = {};\n  const touched = {};\n  Object.keys(props.defaultValues).forEach(fieldName => {\n    errors[fieldName] = [];\n    touched[fieldName] = false;\n  });\n  this.state = {\n    errors,\n    submitted: false,\n    submitting: false,\n    touched,\n    values: props.defaultValues\n  };\n}\n```", "```jsx\nprivate setValue = (fieldName: string, value: any) => {\n  const newValues = { ...this.state.values, [fieldName]: \n   value };\n  const newTouched = { ...this.state.touched, [fieldName]:  \n   true };\n  this.setState({ values: newValues, touched: newTouched });\n};\n```", "```jsx\nprivate validate = (fieldName: string, value: any): string[] => {\n  if (!this.state.touched[fieldName]) {\n    return [];\n  }\n  ...\n};\n```", "```jsx\nexport const basketReducer: Reducer<IBasketState, BasketActions> = (\n  state = initialBasketState,\n  action\n) => {\n  switch (action.type) {\n    case BasketActionTypes.ADD: {\n      state.products.push(action.product);\n    }\n  }\n```", "```jsx\n  return state || initialBasketState;\n};\n```", "```jsx\ntry {\n setInterval(() => {\n  throw new Error(\"Oops\");\n }, 1000);\n} catch (ex) {\n  console.log(\"Sorry, there is a problem\", ex); \n}\n```", "```jsx\nfetch(\"https://jsonplaceholder.typicode.com/posts/9999\")\n  .then(response => {\n    console.log(\"HTTP status code\", response.status);\n    return response.json();\n  })\n  .then(data => console.log(\"Response body\", data))\n  .catch (error => console.log(\"Error\", error));\n```", "```jsx\naxios\n  .get(\"https://jsonplaceholder.typicode.com/posts/9999\")\n  .then(response => {\n    console.log(\"HTTP status code\", response.status);\n  })\n  .catch(error => {\n    console.log(\"Error\", error.response.status);\n  });\n```", "```jsx\naxios.get(\"https://jsonplaceholder.typicode.com/posts/1\")\n```", "```jsx\naxios\n  .get(\"https://jsonplaceholder.typicode.com/posts/1\", {\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    }\n  });\n```", "```jsx\naxios.put(\"https://jsonplaceholder.typicode.com/posts/1\", {\n  title: \"corrected title\", \n  body: \"some stuff\"\n});\n```", "```jsx\naxios.patch(\"https://jsonplaceholder.typicode.com/posts/1\", {\n  title: \"corrected title\"\n});\n```", "```jsx\nReact.useEffect(() => {\n  axios\n    .get(`https://jsonplaceholder.typicode.com/posts/${id}`)\n    .then(...)\n    .catch(...);\n});\n```", "```jsx\nReact.useEffect(() => {\n  axios\n    .get(`https://jsonplaceholder.typicode.com/posts/${id}`)\n    .then(...)\n    .catch(...);\n}, []);\n```", "```jsx\nquery { \n  repository (owner:\"facebook\", name:\"react\") {\n    issues(last: 5, states:[OPEN]) {\n      edges {\n        node {\n          title\n          url\n        }\n      }\n    }\n  }\n}\n```", "```jsx\nquery ($lastCount: Int = 5) { \n  repository (owner:\"facebook\", name:\"react\") {\n    issues(last: $lastCount, states: [OPEN]) {\n      edges {\n        node {\n          title\n          url\n        }\n      }\n    }\n  }\n}\n```", "```jsx\nmutation ($repoId: ID!) {\n  removeStar(input: { starrableId: $repoId }) {\n    starrable {\n      stargazers {\n        totalCount\n      }\n    }\n  }\n}\n```", "```jsx\nclass MyQuery extends Query<IResult> {}\n```", "```jsx\nexpect(result).not.toBeNull()\n```", "```jsx\ninterface IPerson {\n  id: number;\n  name: string;\n}\n```", "```jsx\nexpect(person).not.toBeEqual({ id: 1, name: \"bob\" });\n```", "```jsx\nexpect(person).toMatchSnapshot();\n```", "```jsx\nconst { container } = render(<SimpleList data={[\"Apple\", \"Banana\", \"Strawberry\"]} onItemSelect={handleListItemSelect} />);\n```", "```jsx\nconst handleListItemSelect = jest.fn();\nconst { container } = render(<SimpleList data={[\"Apple\", \"Banana\", \"Strawberry\"]} onItemSelect={handleListItemSelect} />);\n\n// TODO - select the list item\n\nexpect(handleListItemSelect).toBeCalledTimes(1);\n```", "```jsx\nexpect(handleListItemSelect).toBeCalledWith(\"Banana\");\n```", "```jsx\nconst checkbox = getByLabelText(\"Banana\") as HTMLInputElement;\nfireEvent.change(checkbox, {\n  target: { checked: true }\n});\n```", "```jsx\ntest(\"When the post GET request errors when the page is loaded, an error is shown\", async () => {\n  const mock = new MockAdapter(axios);\n  mock.onGet(\"https://jsonplaceholder.typicode.com/posts\").reply(404);\n\n  const { getByTestId } = render(<App />);\n\n  const error: any = await waitForElement(() => getByTestId(\"error\"));\n\n  expect(error).toMatchSnapshot();\n});\n```", "```jsx\n{this.state.error && <p className=\"error\" data-testid=\"error\">{this.state.error}</p>}\n```"]