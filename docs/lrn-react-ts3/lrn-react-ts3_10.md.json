["```jsx\nquery { \n  viewer { \n    name\n  }\n}\n```", "```jsx\nquery { \n  viewer { \n    name\n    avatarUrl\n  }\n}\n```", "```jsx\nquery { \n  repository (owner:\"facebook\", name:\"react\") {\n    name\n    description\n  }\n}\n```", "```jsx\nquery { \n  repository (owner:\"facebook\", name:\"react\") {\n    name\n    description\n    stargazers {\n totalCount\n }\n  }\n}\n```", "```jsx\nstargazers {\n  stars:totalCount\n}\n```", "```jsx\n{\n  \"data\": {\n    \"repository\": {\n      \"name\": \"react\",\n      \"description\": \"A declarative, efficient, and flexible JavaScript library for building user interfaces.\",\n      \"stargazers\": {\n        \"stars\": 114998\n      }\n    }\n  }\n}\n```", "```jsx\n{ \n  repository (owner:\"facebook\", name:\"react\") {\n    name\n    description\n    stargazers {\n      stars:totalCount\n    }\n    issues(last: 5) {\n edges {\n node {\n id\n title\n url\n publishedAt\n }\n }\n }\n  }\n}\n```", "```jsx\nquery ($org: String!, $repo: String!) { \n  repository (owner:$org, name:$repo) {\n    ...\n  }\n}\n```", "```jsx\n{\n  \"org\": \"facebook\",\n  \"repo\": \"react\"\n}\n```", "```jsx\nquery ($org: String!, $repo: String!) { \n  repository (owner:$org, name:$repo) {\n    id\n    ...\n  }\n}\n```", "```jsx\nMDEwOlJlcG9zaXRvcnkxMDI3MDI1MA==\n```", "```jsx\nmutation ($repoId: ID!) {\n  addStar(input: { starrableId: $repoId }) {\n    starrable {\n      stargazers {\n        totalCount\n      }\n    }\n  }\n}\n```", "```jsx\n{\n  \"repoId\": \"MDEwOlJlcG9zaXRvcnkxMDI3MDI1MA==\"\n}\n```", "```jsx\nnpx create-react-app repo-search --typescript\n```", "```jsx\nnpm install react@16.7.0-alpha.0\nnpm install react-dom@16.7.0-alpha.0\n```", "```jsx\ncd repo-search\nnpm install tslint tslint-react tslint-config-prettier --save-dev\n```", "```jsx\n{\n  \"extends\": [\"tslint:recommended\", \"tslint-react\", \"tslint-config-\n   prettier\"],\n  \"rules\": {\n    \"ordered-imports\": false,\n    \"object-literal-sort-keys\": false,\n    \"jsx-no-lambda\": false,\n    \"no-debugger\": false,\n    \"no-console\": false,\n  },\n  \"linterOptions\": {\n    \"exclude\": [\n      \"config/**/*.js\",\n      \"node_modules/**/*.ts\",\n      \"coverage/lcov-report/*.js\"\n    ]\n  }\n}\n```", "```jsx\nclass App extends Component {\n  public render() {\n    return ( ... );\n  }\n}\n```", "```jsx\nnpm install axios\n```", "```jsx\nnpm start\n```", "```jsx\nimport React from \"react\";\nimport axios from \"axios\";\n```", "```jsx\nexport const Header: React.SFC = () => {\n  return null;\n}\n```", "```jsx\nimport { Header } from \"./Header\";\n```", "```jsx\n<div className=\"App\">\n  <header className=\"App-header\">\n    <Header />\n  </header>\n</div>\n```", "```jsx\n.App-header {\n  background-color: #282c34;\n  min-height: 200px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  color: white;\n}\n```", "```jsx\ninterface IViewer {\n  name: string;\n  avatarUrl: string;\n}\n\ninterface IQueryResult {\n  data: {\n    viewer: IViewer;\n  };\n}\n```", "```jsx\nconst [viewer, setViewer]: [\n  IViewer,\n  (viewer: IViewer) => void\n] = React.useState({name: \"\", avatarUrl: \"\"});\n```", "```jsx\nReact.useEffect(() => {\n  // TODO - make a GraphQL query \n}, []);\n```", "```jsx\nReact.useEffect(() => {\n  axios\n .post<IQueryResult>(\n \"https://api.github.com/graphql\",\n {\n query: `query { \n viewer { \n name\n avatarUrl\n }\n }`\n }\n )\n}, []);\n```", "```jsx\naxios\n  .post<IQueryResult>(\n    \"https://api.github.com/graphql\",\n    {\n      query: `query { \n        viewer { \n          name\n          avatarUrl\n        }\n      }`\n    },\n    {\n headers: {\n Authorization: \"bearer our-bearer-token\"\n }\n }\n  )\n```", "```jsx\naxios\n  .post<IQueryResult>(\n    ...\n  )\n  .then(response => {\n```", "```jsx\n setViewer(response.data.data.viewer);\n });\n```", "```jsx\nreturn (\n  <div>\n <img src={viewer.avatarUrl} className=\"avatar\" />\n <div className=\"viewer\">{viewer.name}</div>\n <h1>GitHub Search</h1>\n </div>\n);\n```", "```jsx\n.avatar {\n  width: 60px;\n  border-radius: 50%;\n}\n```", "```jsx\nnpm install apollo-boost react-apollo graphql\n```", "```jsx\nnpm install @types/graphql --save-dev\n```", "```jsx\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"es2015\", \"dom\", \"esnext\"],\n    ...\n  },\n  ...\n}\n```", "```jsx\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n```", "```jsx\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  headers: {\n    authorization: `Bearer our-bearer-token`\n  }\n});\n```", "```jsx\npublic render() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Header />\n        </header>\n      </div>\n    </ApolloProvider>\n  );\n}\n```", "```jsx\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\n```", "```jsx\ninterface IQueryResult {\n  viewer: IViewer;\n}\n```", "```jsx\nconst GET_VIEWER = gql`\n  {\n    viewer {\n      name\n      avatarUrl\n    }\n  }\n`;\n```", "```jsx\nclass GetViewerQuery extends Query<IQueryResult> {}\n```", "```jsx\nreturn (\n  <GetViewerQuery query={GET_VIEWER}>\n    {({ data }) => {\n      if (!data || !data.viewer) {\n        return null;\n      }\n      return (\n        <div>\n          <img src={data.viewer.avatarUrl} className=\"avatar\" />\n          <div className=\"viewer\">{data.viewer.name}</div>\n          <h1>GitHub Search</h1>\n        </div>\n      );\n    }}\n  </GetViewerQuery>\n);\n```", "```jsx\nreturn (\n  <GetViewerQuery query={GET_VIEWER}>\n    {({ data, loading }) => {\n      if (loading) {\n return <div className=\"viewer\">Loading ...</div>;\n }\n      ...\n    }}\n  </GetViewerQuery>\n);\n```", "```jsx\nreturn (\n  <GetViewerQuery query={GET_VIEWER}>\n    {({ data, loading, error }) => {\n      if (error) {\n return <div className=\"viewer\">{error.toString()}</div>;\n }\n      ...\n    }}\n  </GetViewerQuery>\n);\n```", "```jsx\nimport * as React from \"react\";\nimport gql from \"graphql-tag\";\nimport { ApolloClient } from \"apollo-boost\";\n```", "```jsx\ninterface IProps {\n  client: ApolloClient<any>;\n}\n```", "```jsx\nconst RepoSearch: React.SFC<IProps> = props => {\n  return null;\n}\n\nexport default RepoSearch;\n```", "```jsx\nimport RepoSearch from \"./RepoSearch\";\n```", "```jsx\n<ApolloProvider client={client}>\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <Header />\n    </header>\n    <RepoSearch client={client} />\n  </div>\n</ApolloProvider>\n```", "```jsx\ninterface ISearch {\n  orgName: string;\n  repoName: string;\n}\n```", "```jsx\nconst RepoSearch: React.SFC<IProps> = props => {\n  const [search, setSearch]: [\n ISearch,\n (search: ISearch) => void\n ] = React.useState({\n orgName: \"\",\n repoName: \"\"\n });\n\n  return null;\n}\n```", "```jsx\nreturn (\n  <div className=\"repo-search\">\n    <form onSubmit={handleSearch}>\n      <label>Organization</label>\n      <input\n        type=\"text\"\n        onChange={handleOrgNameChange}\n        value={search.orgName}\n      />\n      <label>Repository</label>\n      <input\n        type=\"text\"\n        onChange={handleRepoNameChange}\n        value={search.repoName}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  </div>\n);\n```", "```jsx\n.repo-search {\n  margin: 30px auto;\n  width: 300px;\n  font-family: Arial;\n  font-size: 16px;\n  text-align: left;\n}\n\n.repo-search label {\n  display: block;\n  margin-bottom: 3px;\n  font-size: 14px;\n}\n\n.repo-search input {\n  display: block;\n  margin-bottom: 10px;\n  font-size: 16px;\n  color: #676666;\n  width: 100%;\n}\n\n.repo-search button {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 16px;\n}\n```", "```jsx\nconst handleOrgNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  setSearch({ ...search, orgName: e.currentTarget.value });\n};\n\nconst handleRepoNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  setSearch({ ...search, repoName: e.currentTarget.value });\n};\n```", "```jsx\nconst handleSearch = (e: React.FormEvent<HTMLFormElement>) => {\n  e.preventDefault();\n\n  // TODO - make GraphQL query\n};\n```", "```jsx\ninterface IRepo {\n  id: string;\n  name: string;\n  description: string;\n  viewerHasStarred: boolean;\n  stargazers: {\n    totalCount: number;\n  };\n  issues: {\n    edges: [\n      {\n        node: {\n          id: string;\n          title: string;\n          url: string;\n        };\n      }\n    ];\n  };\n}\n```", "```jsx\nconst defaultRepo: IRepo = {\n  id: \"\",\n  name: \"\",\n  description: \"\",\n  viewerHasStarred: false,\n  stargazers: {\n    totalCount: 0\n  },\n  issues: {\n    edges: [\n      {\n        node: {\n          id: \"\",\n          title: \"\",\n          url: \"\"\n        }\n      }\n    ]\n  }\n};\n```", "```jsx\ninterface IQueryResult {\n  repository: IRepo;\n}\n```", "```jsx\nconst GET_REPO = gql`\n  query GetRepo($orgName: String!, $repoName: String!) {\n    repository(owner: $orgName, name: $repoName) {\n      id\n      name\n      description\n      viewerHasStarred\n      stargazers {\n        totalCount\n      }\n      issues(last: 5) {\n        edges {\n          node {\n            id\n            title\n            url\n            publishedAt\n          }\n        }\n      }\n    }\n  }\n`;\n```", "```jsx\nconst [repo, setRepo]: [\n    IRepo,\n    (repo: IRepo) => void\n  ] = React.useState(defaultRepo);\n```", "```jsx\nconst [searchError, setSearchError]: [\n  string,\n  (searchError: string) => void\n] = React.useState(\"\");\n```", "```jsx\nconst handleSearch = (e: React.FormEvent<HTMLFormElement>) => {\n  e.preventDefault();\n\n  setSearchError(\"\");\n};\n```", "```jsx\nconst handleSearch = (e: React.FormEvent<HTMLFormElement>) => {\n  e.preventDefault();\n\n  setSearchError(\"\");\n\n  props.client\n .query<IQueryResult>({\n query: GET_REPO\n });\n};\n```", "```jsx\n.query<IQueryResult>({\n  query: GET_REPO,\n  variables: { orgName: search.orgName, repoName: search.repoName }\n})\n```", "```jsx\nprops.client\n  .query<IQueryResult>( ... )\n  .then(response => {\n setRepo(response.data.repository);\n });\n```", "```jsx\nprops.client\n  .query<IQueryResult>(...)\n  .then(...)\n  .catch(error => {\n setSearchError(error.message);\n });\n```", "```jsx\nreturn (\n  <div className=\"repo-search\">\n    <form ...>\n      ...\n    </form>\n    {repo.id && (\n <div className=\"repo-item\">\n <h4>\n {repo.name}\n {repo.stargazers ? ` ${repo.stargazers.totalCount}\n           stars` : \"\"}\n </h4>\n <p>{repo.description}</p>\n </div>\n )}\n  </div>\n);\n```", "```jsx\n...\n<p>{repo.description}</p>\n<div>\n Last 5 issues:\n {repo.issues && repo.issues.edges ? (\n <ul>\n {repo.issues.edges.map(item => (\n <li key={item.node.id}>{item.node.title}</li>\n ))}\n </ul>\n ) : null}\n</div>\n```", "```jsx\n{repo.id && (\n  ...\n)}\n{searchError && <div>{searchError}</div>}\n```", "```jsx\n.repo-search h4 {\n  text-align: center;\n}\n```", "```jsx\nimport { Mutation } from \"react-apollo\";\n```", "```jsx\nconst STAR_REPO = gql`\n  mutation($repoId: ID!) {\n    addStar(input: { starrableId: $repoId }) {\n      starrable {\n        stargazers {\n          totalCount\n        }\n      }\n    }\n  }\n`;\n```", "```jsx\n<p>{repo.description}</p>\n<div>\n {!repo.viewerHasStarred && (\n <Mutation\n mutation={STAR_REPO}\n variables={{ repoId: repo.id }}\n >\n {() => (\n // render Star button that invokes the mutation when \n           clicked\n )}\n </Mutation>\n )}\n</div> <div>\n  Last 5 issues:\n  ...\n</div>\n```", "```jsx\n<Mutation\n    ...\n  >\n    {(addStar) => (\n      <div>\n <button onClick={() => addStar()}>\n Star!\n </button>\n </div>\n    )}\n  </Mutation>\n)}\n```", "```jsx\n<Mutation\n  ...\n>\n  {(addStar, { loading }) => (\n    <div>\n      <button disabled={loading} onClick={() => addStar()}>\n        {loading ? \"Adding ...\" : \"Star!\"}\n      </button>\n    </div>\n  )}\n</Mutation>\n```", "```jsx\n<Mutation\n  ...\n>\n  {(addStar, { loading, error }) => (\n    <div>\n      <button ...>\n        ...\n      </button>\n      {error && <div>{error.toString()}</div>}\n    </div>\n  )}\n</Mutation>\n```", "```jsx\n<Mutation\n  mutation={STAR_REPO}\n  variables={{ repoId: repo.id }}\n  refetchQueries={[\n {\n query: GET_REPO,\n variables: {\n orgName: search.orgName,\n repoName: search.repoName\n }\n }\n ]}\n>\n  ...\n</Mutation>\n```", "```jsx\n<Mutation\n  mutation={STAR_REPO}\n  update={cache => {\n // Get the cached data \n // update the cached data\n // update our state \n }}\n>\n  ...\n</Mutation>\n```", "```jsx\n<Mutation\n  ...\n  update={cache => {\n const data: { repository: IRepo } | null = cache.readQuery({\n query: GET_REPO,\n variables: {\n orgName: search.orgName,\n repoName: search.repoName\n }\n });\n if (data === null) {\n return;\n }\n }}\n>\n  ...\n</Mutation>\n```", "```jsx\nupdate={cache => {\n  ...\n  if (data === null) {\n    return;\n  }\n  const newData = {\n ...data.repository,    viewerHasStarred: true,\n stargazers: {\n ...data.repository.stargazers,\n totalCount: data.repository.stargazers.totalCount + 1\n }\n };\n}}\n```", "```jsx\nupdate={cache => {\n  ...\n  const newData = {\n    ...\n  };\n cache.writeQuery({\n query: GET_REPO,\n variables: {\n orgName: search.orgName,\n repoName: search.repoName\n },\n data: { repository: newData }\n });\n}}\n```", "```jsx\nupdate={cache => {\n  ...\n  cache.writeQuery(...);\n  setRepo(newData);\n}}\n```"]