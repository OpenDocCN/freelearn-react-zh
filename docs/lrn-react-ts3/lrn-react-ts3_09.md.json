["```jsx\nnpm install -g typescript\n```", "```jsx\nlet firstName: string;\nsetTimeout(() => {\n  firstName = \"Fred\";\n  console.log(\"firstName in callback\", firstName);\n}, 1000);\nconsole.log(\"firstName after setTimeout\", firstName); \n```", "```jsx\ntry {\n setTimeout(() => {\n throw new Error(\"Something went wrong\");\n }, 1000);\n} catch (ex) {\n console.log(\"An error has occurred\", ex); \n}\n```", "```jsx\ninterface IResult {\n  success: boolean;\n  error?: any;\n}\nlet result: IResult = { success: true };\nsetTimeout(() => {\n  try {\n    throw new Error(\"Something went wrong\");\n  } catch (ex) {\n    result.success = false;\n    result.error = ex;\n  }\n}, 1000);\nconsole.log(result);\n```", "```jsx\nfetch(\"https://jsonplaceholder.typicode.com/posts\")\n  .then(response => response.json()) \n  .then(data => console.log(data))\n  .catch(json => console.log(\"error\", json));\n```", "```jsx\nconst wait = (ms: number) => {\n  return new Promise((resolve, reject) => {\n    if (ms > 1000) {\n      reject(\"Too long\");\n    }\n    setTimeout(() => {\n      resolve(\"Sucessfully waited\");\n    }, ms);\n  });\n};\n```", "```jsx\nwait(500)\n .then(result => console.log(\"then >\", result))\n .catch(error => console.log(\"catch >\", error));\n```", "```jsx\nwait(1500)\n .then(result => console.log(\"then >\", result))\n .catch(error => console.log(\"catch >\", error));\n```", "```jsx\nconst someWork = async () => {\n  try {\n    const result = await wait(500); \n    console.log(result);\n  } catch (ex) {\n    console.log(ex);\n  }\n};\n\nsomeWork();\n```", "```jsx\nconst result = await wait(1500); \n```", "```jsx\nfetch(\"https://jsonplaceholder.typicode.com/posts\")\n  .then(response => response.json())\n  .then(data => console.log(data));\n```", "```jsx\nfetch(\"https://jsonplaceholder.typicode.com/posts\").then(response => {\n  console.log(response.status, response.ok); \n});\n```", "```jsx\nfetch(\"https://jsonplaceholder.typicode.com/posts/1001\").then(response => {\n  console.log(response.status, response.ok); \n});\n```", "```jsx\nfetch(\"https://jsonplaceholder.typicode.com/posts\")\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(json => console.log(\"error\", json));\n```", "```jsx\nfetch(\"https://jsonplaceholder.typicode.com/posts\", {\n  method: \"POST\",\n  body: JSON.stringify({\n    title: \"Interesting post\",\n    body: \"This is an interesting post about ...\",\n    userId: 1\n  })\n})\n  .then(response => {\n    console.log(response.status); \n    return response.json();\n  })\n  .then(data => console.log(data));\n```", "```jsx\n\nfetch(\"https://jsonplaceholder.typicode.com/posts\", {\n method: \"POST\",\n headers: {\n \"Content-Type\": \"application/json\",\n Authorization: \"bearer some-bearer-token\"\n },\n  body: JSON.stringify({\n    title: \"Interesting post\",\n    body: \"This is an interesting post about ...\",\n    userId: 1\n  })\n})\n  .then(response => {\n    console.log(response.status); \n    return response.json();\n  })\n  .then(data => console.log(data));\n\n```", "```jsx\nfetch(\"https://jsonplaceholder.typicode.com/posts/1\", {\n  headers: {\n \"Content-Type\": \"application/json\",\n Authorization: \"bearer some-bearer-token\"\n }\n}).then(...);\n```", "```jsx\nfetch(\"https://jsonplaceholder.typicode.com/posts/1\", {\n  method: \"PUT\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    title: \"Corrected post\",\n    body: \"This is corrected post about ...\",\n    userId: 1\n  })\n})\n  .then(response => {\n    console.log(response.status);\n    return response.json();\n  })\n  .then(data => console.log(data)); \n```", "```jsx\nfetch(\"https://jsonplaceholder.typicode.com/posts/1\", {\n  method: \"PATCH\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    title: \"Corrected post\"\n  })\n})\n .then(response => {\n    console.log(response.status); \n    return response.json();\n  })\n  .then(data => console.log(data));\n```", "```jsx\nfetch(\"https://jsonplaceholder.typicode.com/posts/1\", {\n  method: \"DELETE\"\n}).then(response => {\n  console.log(response.status); \n});\n```", "```jsx\nnpx create-react-app crud-api --typescript\n```", "```jsx\nnpm install react@16.7.0-alpha.0\nnpm install react-dom@16.7.0-alpha.0\n```", "```jsx\ncd crud-api\nnpm install tslint tslint-react tslint-config-prettier --save-dev\n```", "```jsx\n{\n  \"extends\": [\"tslint:recommended\", \"tslint-react\", \"tslint-config-prettier\"],\n  \"rules\": {\n    \"ordered-imports\": false,\n    \"object-literal-sort-keys\": false,\n    \"jsx-no-lambda\": false,\n    \"no-debugger\": false,\n    \"no-console\": false,\n  },\n  \"linterOptions\": {\n    \"exclude\": [\n      \"config/**/*.js\",\n      \"node_modules/**/*.ts\",\n      \"coverage/lcov-report/*.js\"\n    ]\n  }\n}\n```", "```jsx\nclass App extends Component {\n  public render() {\n    return ( ... );\n  }\n}\n```", "```jsx\nnpm install axios\n```", "```jsx\nnpm start\n```", "```jsx\nimport axios from \"axios\";\n```", "```jsx\ninterface IPost {\n  userId: number;\n  id?: number;\n  title: string;\n  body: string;\n}\n```", "```jsx\ninterface IState {\n posts: IPost[];\n}\nclass App extends React.Component<{}, IState> { ... }\n```", "```jsx\nclass App extends React.Component<{}, IState> {\n  public constructor(props: {}) {\n super(props);\n this.state = {\n posts: []\n };\n }\n}\n```", "```jsx\npublic componentDidMount() {\n  axios\n    .get<IPost[]>(\"https://jsonplaceholder.typicode.com/posts\")\n    .then(response => {\n      this.setState({ posts: response.data });\n    });\n}\n```", "```jsx\npublic render() {\n  return (\n    <div className=\"App\">\n      <ul className=\"posts\">\n {this.state.posts.map(post => (\n <li key={post.id}>\n <h3>{post.title}</h3>\n <p>{post.body}</p>\n </li>\n ))}\n </ul>\n    </div>\n  );\n}\n```", "```jsx\n.posts {\n  list-style: none;\n  margin: 0px auto;\n  width: 800px;\n  text-align: left;\n}\n```", "```jsx\n.get<IPost[]>(\"https://jsonplaceholder.typicode.com/postsX\")\n```", "```jsx\naxios\n  .get<IPost[]>(\"https://jsonplaceholder.typicode.com/postsX\")\n  .then( ... )\n  .catch(ex => {\n const error =\n ex.response.status === 404\n ? \"Resource not found\"\n : \"An unexpected error has occurred\";\n this.setState({ error });\n });\n```", "```jsx\ninterface IState {\n posts: IPost[];\n  error: string;\n}\nclass App extends React.Component<{}, IState> {\n  public constructor(props: {}) {\n    super(props);\n    this.state = {\n      posts: [],\n      error: \"\" \n    };\n  }\n}\n```", "```jsx\n<ul className=\"posts\">\n  ...\n</ul>\n{this.state.error && <p className=\"error\">{this.state.error}</p>}\n```", "```jsx\n.error {\n  color: red;\n}\n```", "```jsx\n.get<IPost[]>(\"https://jsonplaceholder.typicode.com/posts\")\n```", "```jsx\n.get<IPost[]>(\"https://jsonplaceholder.typicode.com/posts\", {\n  headers: {\n \"Content-Type\": \"application/json\"\n }\n})\n```", "```jsx\n.get<IPost[]>(\"https://jsonplaceholder.typicode.com/posts\", {\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  timeout: 1\n})\n```", "```jsx\n.catch(ex => {\n  const error =\n    ex.code === \"ECONNABORTED\"\n ? \"A timeout has occurred\"\n      : ex.response.status === 404\n        ? \"Resource not found\"\n        : \"An unexpected error has occurred\";\n  this.setState({ error });\n});\n```", "```jsx\n.get<IPost[]>(\"https://jsonplaceholder.typicode.com/posts\", {\n  ...\n  timeout: 5000\n})\n```", "```jsx\nimport axios, { CancelTokenSource } from \"axios\";\n```", "```jsx\ninterface IState {\n posts: IPost[];\n error: string;\n cancelTokenSource?: CancelTokenSource;\n loading: boolean;\n}\n```", "```jsx\nthis.state = {\n  posts: [],\n  error: \"\",\n  loading: true\n};\n```", "```jsx\npublic componentDidMount() {\n  const cancelToken = axios.CancelToken;\n const cancelTokenSource = cancelToken.source();\n this.setState({ cancelTokenSource });\n  axios\n    .get<IPost[]>(...)\n    .then(...)\n    .catch(...);\n}\n```", "```jsx\n.get<IPost[]>(\"https://jsonplaceholder.typicode.com/posts\", {\n  cancelToken: cancelTokenSource.token,\n  ...\n})\n```", "```jsx\n.catch(ex => {\n  const error = axios.isCancel(ex)\n ? \"Request cancelled\"\n    : ex.code === \"ECONNABORTED\"\n      ? \"A timeout has occurred\"\n      : ex.response.status === 404\n        ? \"Resource not found\"\n        : \"An unexpected error has occurred\";\n  this.setState({ error, loading: false });\n});\n```", "```jsx\n.then(response => {\n  this.setState({ posts: response.data, loading: false });\n})\n```", "```jsx\n{this.state.loading && (\n <button onClick={this.handleCancelClick}>Cancel</button>\n)}\n<ul className=\"posts\">...</ul>\n```", "```jsx\nprivate handleCancelClick = () => {\n  if (this.state.cancelTokenSource) {\n    this.state.cancelTokenSource.cancel(\"User cancelled operation\");\n  }\n};\n```", "```jsx\naxios\n  .get<IPost[]>( ... )\n  .then(response => { ... })\n  .catch(ex => { ... });\n\ncancelTokenSource.cancel(\"User cancelled operation\");\n```", "```jsx\ninterface IState {\n  ...\n  editPost: IPost;\n}\n```", "```jsx\npublic constructor(props: {}) {\n  super(props);\n  this.state = {\n    ...,\n    editPost: {\n      body: \"\",\n      title: \"\",\n userId: 1\n }\n  };\n}\n```", "```jsx\n<div className=\"App\">\n  <div className=\"post-edit\">\n <input\n type=\"text\"\n placeholder=\"Enter title\"\n value={this.state.editPost.title}\n onChange={this.handleTitleChange}\n />\n <textarea\n placeholder=\"Enter body\"\n value={this.state.editPost.body}\n onChange={this.handleBodyChange}\n />\n <button onClick={this.handleSaveClick}>Save</button>\n </div>\n  {this.state.loading && (\n    <button onClick={this.handleCancelClick}>Cancel</button>\n  )}\n  ...\n</div>\n```", "```jsx\nprivate handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  this.setState({\n    editPost: { ...this.state.editPost, title: e.currentTarget.value }\n  });\n};\n\nprivate handleBodyChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n  this.setState({\n    editPost: { ...this.state.editPost, body: e.currentTarget.value }\n  });\n};\n```", "```jsx\n.post-edit {\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  margin: 0px auto;\n}\n.post-edit input {\n  font-family: inherit;\n  width: 100%;\n  margin-bottom: 5px;\n}\n\n.post-edit textarea {\n  font-family: inherit;\n  width: 100%;\n  margin-bottom: 5px;\n}\n\n.post-edit button {\n  font-family: inherit;\n  width: 100px;\n}\n```", "```jsx\nprivate handleSaveClick = () => {\n  axios\n    .post<IPost>(\n      \"https://jsonplaceholder.typicode.com/posts\",\n      {\n        body: this.state.editPost.body,\n        title: this.state.editPost.title,\n        userId: this.state.editPost.userId\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    )\n};\n```", "```jsx\n.then(response => {\n  this.setState({\n    posts: this.state.posts.concat(response.data)\n  });\n});\n```", "```jsx\n<li key={post.id}>\n  <h3>{post.title}</h3>\n  <p>{post.body}</p>\n  <button onClick={() => this.handleUpdateClick(post)}>\n Update\n </button>\n</li>\n```", "```jsx\nprivate handleUpdateClick = (post: IPost) => {\n  this.setState({\n    editPost: post\n  });\n};\n```", "```jsx\nprivate handleSaveClick = () => {\n  if (this.state.editPost.id) {\n    // TODO - make a PUT request\n  } else {\n    axios\n      .post<IPost>( ... )\n      .then( ... );\n  }\n};\n```", "```jsx\nif (this.state.editPost.id) {\n  axios\n .put<IPost>(\n `https://jsonplaceholder.typicode.com/posts/${\n this.state.editPost.id\n }`,\n this.state.editPost,\n {\n headers: {\n \"Content-Type\": \"application/json\"\n }\n }\n )\n .then(() => {\n this.setState({\n editPost: {\n body: \"\",\n title: \"\",\n userId: 1\n },\n posts: this.state.posts\n .filter(post => post.id !== this.state.editPost.id)\n .concat(this.state.editPost)\n });\n });\n} else {\n  ...\n}\n```", "```jsx\n<li key={post.id}>\n  <h3>{post.title}</h3>\n  <p>{post.body}</p>\n  <button onClick={() => this.handleUpdateClick(post)}>\n    Update\n  </button>\n  <button onClick={() => this.handleDeleteClick(post)}>\n Delete\n </button>\n</li>\n```", "```jsx\nprivate handleDeleteClick = (post: IPost) => {\n  axios\n    .delete(`https://jsonplaceholder.typicode.com/posts/${post.id}`)\n    .then(() => {\n      this.setState({\n        posts: this.state.posts.filter(p => p.id !== post.id)\n      });\n    });\n};\n```", "```jsx\nconst defaultPosts: IPost[] = [];\n```", "```jsx\nconst App: React.SFC = () => {}\n```", "```jsx\nconst App: React.SFC = () => {\n  const [posts, setPosts]: [IPost[], (posts: IPost[]) => void] = React.useState(defaultPosts);\n\n  const [error, setError]: [string, (error: string) => void] = React.useState(\"\");\n\n  const cancelToken = axios.CancelToken;\n  const [cancelTokenSource, setCancelTokenSource]: [CancelTokenSource,(cancelSourceToken: CancelTokenSource) => void] = React.useState(cancelToken.source());\n\n  const [loading, setLoading]: [boolean, (loading: boolean) => void] = React.useState(false);\n\n  const [editPost, setEditPost]: [IPost, (post: IPost) => void] = React.useState({\n    body: \"\",\n    title: \"\",\n    userId: 1\n  });\n}\n```", "```jsx\nReact.useEffect(() => {\n  // TODO - get posts\n}, []);\n```", "```jsx\nReact.useEffect(() => {\n  axios\n .get<IPost[]>(\"https://jsonplaceholder.typicode.com/posts\", {\n cancelToken: cancelTokenSource.token,\n headers: {\n \"Content-Type\": \"application/json\"\n },\n timeout: 5000\n });\n}, []);\n```", "```jsx\nReact.useEffect(() => {\n  axios\n    .get<IPost[]>(...)\n    .then(response => {\n setPosts(response.data);      setLoading(false);\n });\n}, []);\n```", "```jsx\nReact.useEffect(() => {\n  axios\n    .get<IPost[]>(...)\n    .then(...)\n    .catch(ex => {\n const err = axios.isCancel(ex)\n ? \"Request cancelled\"\n : ex.code === \"ECONNABORTED\"\n ? \"A timeout has occurred\"\n : ex.response.status === 404\n ? \"Resource not found\"\n : \"An unexpected error has occurred\";\n setError(err);\n      setLoading(false);\n });\n}, []);\n```", "```jsx\nconst handleCancelClick = () => {\n  if (cancelTokenSource) {\n    cancelTokenSource.cancel(\"User cancelled operation\");\n  }\n};\n```", "```jsx\nconst handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  setEditPost({ ...editPost, title: e.currentTarget.value });\n};\n\nconst handleBodyChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n  setEditPost({ ...editPost, body: e.currentTarget.value });\n};\n```", "```jsx\nconst handleSaveClick = () => {\n  if (editPost.id) {\n    axios\n      .put<IPost>(\n        `https://jsonplaceholder.typicode.com/posts/${editPost.id}`,\n        editPost,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }\n      )\n      .then(() => {\n        setEditPost({\n          body: \"\",\n          title: \"\",\n          userId: 1\n        });\n        setPosts(\n          posts.filter(post => post.id !== editPost.id).concat(editPost)\n        );\n      });\n  } else {\n    axios\n      .post<IPost>(\n        \"https://jsonplaceholder.typicode.com/posts\",\n        {\n          body: editPost.body,\n          title: editPost.title,\n          userId: editPost.userId\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }\n      )\n      .then(response => {\n        setPosts(posts.concat(response.data));\n      });\n  }\n};\n```", "```jsx\nconst handleUpdateClick = (post: IPost) => {\n  setEditPost(post);\n};\n```", "```jsx\nconst handleDeleteClick = (post: IPost) => {\n  axios\n    .delete(`https://jsonplaceholder.typicode.com/posts/${post.id}`)\n    .then(() => {\n      setPosts(posts.filter(p => p.id !== post.id));\n    });\n};\n```", "```jsx\nreturn (\n  <div className=\"App\">\n    <div className=\"post-edit\">\n      <input\n        type=\"text\"\n        placeholder=\"Enter title\"\n        value={editPost.title}\n        onChange={handleTitleChange}\n      />\n      <textarea\n        placeholder=\"Enter body\"\n        value={editPost.body}\n        onChange={handleBodyChange}\n      />\n      <button onClick={handleSaveClick}>Save</button>\n    </div>\n    {loading && <button onClick={handleCancelClick}>Cancel</button>}\n    <ul className=\"posts\">\n      {posts.map(post => (\n        <li key={post.id}>\n          <h3>{post.title}</h3>\n          <p>{post.body}</p>\n          <button onClick={() => handleUpdateClick(post)}>Update</button>\n          <button onClick={() => handleDeleteClick(post)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n    {error && <p className=\"error\">{error}</p>}\n  </div>\n);\n```", "```jsx\ntry {\n setInterval(() => {\n  throw new Error(\"Oops\");\n }, 1000);\n} catch (ex) {\n  console.log(\"Sorry, there is a problem\", ex); \n}\n```", "```jsx\nfetch(\"https://jsonplaceholder.typicode.com/posts/9999\")\n  .then(response => {\n    console.log(\"HTTP status code\", response.status);\n    return response.json();\n  })\n  .then(data => console.log(\"Response body\", data))\n  .catch (error => console.log(\"Error\", error));\n```", "```jsx\naxios\n  .get(\"https://jsonplaceholder.typicode.com/posts/9999\")\n  .then(response => {\n    console.log(\"HTTP status code\", response.status);\n  })\n  .catch(error => {\n    console.log(\"Error\", error.response.status);\n  });\n```", "```jsx\naxios.get(\"https://jsonplaceholder.typicode.com/posts/1\")\n```", "```jsx\naxios.put(\"https://jsonplaceholder.typicode.com/posts/1\", {\n  title: \"corrected title\", \n  body: \"some stuff\"\n});\n```", "```jsx\nReact.useEffect(() => {\n  axios\n    .get(`https://jsonplaceholder.typicode.com/posts/${id}`)\n    .then(...)\n    .catch(...);\n});\n```"]