["```jsx\n{\n  products: [{ id: 1, name: \"Table\", ...}, {...}, ...],\n  productsLoading: false,\n  currentProduct: { id: 2, xname: \"Chair\", ... },\n  basket: [{ product: { id: 2, xname: \"Chair\" }, quantity: 1 }],\n};\n```", "```jsx\n{\n  type: \"PRODUCTS/LOADING\"\n}\n```", "```jsx\n{\n  type: \"PRODUCTS/GETSINGLE\",\n  product: { id: 1, name: \"Table\", ...}\n}\n```", "```jsx\nexport const productsReducer = (state = initialProductState, action) => {\n  switch (action.type) {\n    case \"PRODUCTS/LOADING\": {\n      return {\n        ...state,\n        productsLoading: true\n      };\n    }\n    case \"PRODUCTS/GETSINGLE\": {\n      return {\n        ...state,\n        currentProduct: action.product,\n        productsLoading: false\n      };\n    }\n    default:\n  }\n  return state || initialProductState;\n};\n```", "```jsx\nnpm install redux\n```", "```jsx\nnpm install react-redux\n```", "```jsx\nnpm install --save-dev @types/react-redux\n```", "```jsx\nnpm install redux-thunk\n```", "```jsx\nnpm install --save-dev @types/redux-thunk\n```", "```jsx\nexport const getProducts = async (): Promise<IProduct[]> => {\n  await wait(1000);\n  return products;\n};\n```", "```jsx\nimport { IProduct } from \"./ProductsData\";\n```", "```jsx\nexport enum ProductsActionTypes {\n  GETALL = \"PRODUCTS/GETALL\",\n  LOADING = \"PRODUCTS/LOADING\"\n}\n```", "```jsx\nexport interface IProductsGetAllAction {\n  type: ProductsActionTypes.GETALL,\n  products: IProduct[]\n}\n\nexport interface IProductsLoadingAction {\n  type: ProductsActionTypes.LOADING\n}\n```", "```jsx\nexport type ProductsActions =\n  | IProductsGetAllAction\n  | IProductsLoadingAction\n```", "```jsx\nexport interface IProductsState {\n  readonly products: IProduct[];\n  readonly productsLoading: boolean;\n}\n```", "```jsx\nimport { ActionCreator, AnyAction, Dispatch } from \"redux\";\n```", "```jsx\nimport { ThunkAction } from \"redux-thunk\";\n```", "```jsx\nimport { getProducts as getProductsFromAPI } from \"./ProductsData\";\n```", "```jsx\nimport { IProductsGetAllAction, IProductsLoadingAction, IProductsState, ProductsActionTypes } from \"./ProductsTypes\";\n```", "```jsx\nconst loading: ActionCreator<IProductsLoadingAction> = () => {\n  return {\n    type: ProductsActionTypes.LOADING\n  }\n};\n```", "```jsx\nconst loading: ActionCreator<IProductsLoadingAction> = () => ({\n  type: ProductsActionTypes.LOADING\n});\n```", "```jsx\nexport const getProducts: ActionCreator<ThunkAction<Promise<AnyAction>, IProductsState, null, IProductsGetAllAction>> = () => {};\n```", "```jsx\nexport const getProducts: ActionCreator<ThunkAction<Promise<AnyAction>, IProductsState, null, IProductsGetAllAction>> = () => {\n  return async (dispatch: Dispatch) => {\n\n };\n};\n```", "```jsx\nreturn async (dispatch: Dispatch) => {\n  dispatch(loading());\n const products = await getProductsFromAPI();\n return dispatch({\n products,\n type: ProductsActionTypes.GETALL\n });\n};\n```", "```jsx\nimport { Reducer } from \"redux\";\nimport { IProductsState, ProductsActions, ProductsActionTypes } from \"./ProductsTypes\";\n```", "```jsx\nconst initialProductState: IProductsState = {\n  products: [],\n  productsLoading: false\n};\n```", "```jsx\nexport const productsReducer: Reducer<IProductsState, ProductsActions> = (\n  state = initialProductState,\n  action\n) => {\n switch (action.type) {\n  // TODO - change the state\n }\n return state;\n};\n```", "```jsx\nswitch (action.type) {\n  case ProductsActionTypes.LOADING: {\n return {\n ...state,\n productsLoading: true\n };\n }\n case ProductsActionTypes.GETALL: {\n return {\n ...state,\n products: action.products,\n productsLoading: false\n };\n }\n}\n```", "```jsx\nimport { applyMiddleware, combineReducers, createStore, Store } from \"redux\";\n```", "```jsx\nimport thunk from \"redux-thunk\";\n```", "```jsx\nimport { productsReducer } from \"./ProductsReducer\";\nimport { IProductsState } from \"./ProductsTypes\";\n```", "```jsx\nexport interface IApplicationState {\n  products: IProductsState;\n}\n```", "```jsx\nconst rootReducer = combineReducers<IApplicationState>({\n  products: productsReducer\n});\n```", "```jsx\nexport default function configureStore(): Store<IApplicationState> {\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\n  return store;\n}\n```", "```jsx\nimport { Provider} from \"react-redux\";\n```", "```jsx\nimport { Store } from \"redux\";\n```", "```jsx\nimport configureStore from \"./Store\";\nimport { IApplicationState } from \"./Store\";\n```", "```jsx\ninterface IProps {\n  store: Store<IApplicationState>;\n}\nconst Root: React.SFC<IProps> = props => {\n  return ();\n};\n```", "```jsx\nconst Root: React.SFC<IProps> = props => {\n  return (\n    <Routes />\n  );\n};\n```", "```jsx\nreturn (\n  <Provider store={props.store}>\n    <Routes />\n  </Provider>\n);\n```", "```jsx\nconst store = configureStore();\nReactDOM.render(<Root store={store} />, document.getElementById(\n  \"root\"\n) as HTMLElement);\n```", "```jsx\nimport { connect } from \"react-redux\";\n```", "```jsx\nimport { IApplicationState } from \"./Store\";\nimport { getProducts } from \"./ProductsActions\";\n```", "```jsx\nclass ProductsPage extends React.Component<RouteComponentProps> {\n  public async componentDidMount() { ... }\n  public render() { ... }\n}\n```", "```jsx\ninterface IProps extends RouteComponentProps {\n getProducts: typeof getProducts;\n loading: boolean;\n products: IProduct[];\n}\n\nclass ProductsPage extends React.Component<IProps> { ... }\n```", "```jsx\npublic componentDidMount() {\n  this.props.getProducts();\n}\n```", "```jsx\nimport { IProduct } from \"./ProductsData\";\n```", "```jsx\npublic render() {\n  const searchParams = new URLSearchParams(this.props.location.search);\n const search = searchParams.get(\"search\") || \"\";\n  return ( ... );\n}\n```", "```jsx\n<ul className=\"product-list\">\n  {this.props.products.map(product => {\n    if (!search || (search && product.name.toLowerCase().indexOf(search.toLowerCase()) > -1)\n    ) { ... }\n  })}\n</ul>\n```", "```jsx\nconst mapStateToProps = (store: IApplicationState) => {\n  return {\n    loading: store.products.productsLoading,\n    products: store.products.products\n  };\n};\n```", "```jsx\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    getProducts: () => dispatch(getProducts())\n  };\n};\n```", "```jsx\nexport default connect(\n mapStateToProps,\n mapDispatchToProps\n)(ProductsPage);\n```", "```jsx\nnpm start\n```", "```jsx\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { IProduct } from \"./ProductsData\";\nimport withLoader from \"./withLoader\";\n```", "```jsx\ninterface IProps {\n  products?: IProduct[];\n  search: string;\n}\n```", "```jsx\nconst ProductsList: React.SFC<IProps> = props => {\n  const search = props.search;\n  return ();\n};\n```", "```jsx\nreturn (\n  <ul className=\"product-list\">\n    {props.products &&\n      props.products.map(product => {\n        if (\n          !search ||\n          (search &&\n            product.name.toLowerCase().indexOf(search.toLowerCase()) \n            > -1)\n        ) {\n          return (\n            <li key={product.id} className=\"product-list-item\">\n              <Link to={`/products/${product.id}`}>{product.name}\n              </Link>\n            </li>\n          );\n        } else {\n          return null;\n        }\n      })}\n  </ul>\n);\n```", "```jsx\nexport default withLoader(ProductsList);\n```", "```jsx\nreturn (\n  <div className=\"page-container\">\n    <p>\n      Welcome to React Shop where you can get all your tools for ReactJS!\n    </p>\n    <ProductsList\n search={search}\n products={this.props.products}\n loading={this.props.loading}\n />\n  </div>\n);\n```", "```jsx\nimport ProductsList from \"./ProductsList\";\n```", "```jsx\nexport interface IProductsState {\n  readonly currentProduct: IProduct | null;\n  ...\n}\n```", "```jsx\nexport enum ProductsActionTypes {\n  GETALL = \"PRODUCTS/GETALL\",\n  GETSINGLE = \"PRODUCTS/GETSINGLE\",\n  LOADING = \"PRODUCTS/LOADING\"\n}\n```", "```jsx\nexport interface IProductsGetSingleAction {\n  type: ProductsActionTypes.GETSINGLE;\n  product: IProduct;\n}\n```", "```jsx\nexport type ProductsActions = IProductsGetAllAction| IProductsGetSingleAction | IProductsLoadingAction;\n```", "```jsx\nimport { getProduct as getProductFromAPI, getProducts as getProductsFromAPI} from \"./ProductsData\";\n```", "```jsx\nimport { IProductsGetAllAction, IProductsGetSingleAction, IProductsLoadingAction, IProductsState, ProductsActionTypes } from \"./productsTypes\";\n```", "```jsx\nexport const getProduct: ActionCreator<ThunkAction<Promise<any>, IProductsState, null, IProductsGetSingleAction>> = (id: number) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(loading());\n    const product = await getProductFromAPI(id);\n    dispatch({\n      product,\n      type: ProductsActionTypes.GETSINGLE\n    });\n  };\n};\n```", "```jsx\nconst initialProductState: IProductsState = {\n  currentProduct: null,\n  ...\n};\n```", "```jsx\nswitch (action.type) {\n  ...\n  case ProductsActionTypes.GETSINGLE: {\n return {\n ...state,\n currentProduct: action.product,\n productsLoading: false\n };\n }\n}\n```", "```jsx\nimport { IProduct } from \"./ProductsData\";\n\nexport enum BasketActionTypes {\n  ADD = \"BASKET/ADD\"\n}\n\nexport interface IBasketState {\n  readonly products: IProduct[];\n}\n\nexport interface IBasketAdd {\n  type: BasketActionTypes.ADD;\n  product: IProduct;\n}\n\nexport type BasketActions = IBasketAdd;\n```", "```jsx\nimport { BasketActionTypes, IBasketAdd } from \"./BasketTypes\";\nimport { IProduct } from \"./ProductsData\";\n\nexport const addToBasket = (product: IProduct): IBasketAdd => ({\n  product,\n  type: BasketActionTypes.ADD\n});\n```", "```jsx\nimport { Reducer } from \"redux\";\nimport { BasketActions, BasketActionTypes, IBasketState } from \"./BasketTypes\";\n```", "```jsx\nconst initialBasketState: IBasketState = {\n  products: []\n};\n```", "```jsx\nexport const basketReducer: Reducer<IBasketState, BasketActions> = (state = initialBasketState, action) => {\n  switch (action.type) {\n    case BasketActionTypes.ADD: {\n      return {\n        ...state,\n        products: state.products.concat(action.product)\n      };\n    }\n  }\n  return state || initialBasketState;\n};\n```", "```jsx\nimport { basketReducer } from \"./BasketReducer\";\nimport { IBasketState } from \"./BasketTypes\";\n```", "```jsx\nexport interface IApplicationState {\n basket: IBasketState;\n```", "```jsx\n  products: IProductsState;\n}\n```", "```jsx\nexport const rootReducer = combineReducers<IApplicationState>({\n  basket: basketReducer,\n  products: productsReducer\n});\n```", "```jsx\nimport { connect } from \"react-redux\";\nimport { addToBasket } from \"./BasketActions\";\nimport { getProduct } from \"./ProductsActions\";\nimport { IApplicationState } from \"./Store\";\n```", "```jsx\nimport { IProduct } from \"./ProductsData\";\n```", "```jsx\ninterface IProps extends RouteComponentProps<{ id: string }> {\n  addToBasket: typeof addToBasket;\n  getProduct: typeof getProduct;\n  loading: boolean;\n  product?: IProduct;\n  added: boolean;\n}\n\nclass ProductPage extends React.Component<IProps> { ... }\n```", "```jsx\npublic componentDidMount() {\n  if (this.props.match.params.id) {\n    const id: number = parseInt(this.props.match.params.id, 10);\n    this.props.getProduct(id);\n  }\n}\n```", "```jsx\npublic render() {\n  const product = this.props.product;\n  return (\n    <div className=\"page-container\">\n      <Prompt when={!this.props.added} message={this.navAwayMessage}\n      />\n      {product || this.props.loading ? (\n        <Product\n          loading={this.props.loading}\n          product={product}\n          inBasket={this.props.added}\n          onAddToBasket={this.handleAddClick}\n        />\n      ) : (\n        <p>Product not found!</p>\n      )}\n    </div>\n  );\n}\n```", "```jsx\nprivate handleAddClick = () => {\n  if (this.props.product) {\n    this.props.addToBasket(this.props.product);\n  }\n};\n```", "```jsx\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    addToBasket: (product: IProduct) => dispatch(addToBasket(product)),\n    getProduct: (id: number) => dispatch(getProduct(id))\n  };\n};\n```", "```jsx\nconst mapStateToProps = (store: IApplicationState) => {\n  return {\n    basketProducts: store.basket.products,\n    loading: store.products.productsLoading,\n    product: store.products.currentProduct || undefined\n  };\n};\n```", "```jsx\nconst mapStateToProps = (store: IApplicationState) => {\n  return {\n    added: store.basket.products.some(p => store.products.currentProduct ? p.id === store.products.currentProduct.id : false),\n    ...\n  };\n};\n```", "```jsx\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ProductPage);\n```", "```jsx\nimport * as React from \"react\";\n\ninterface IProps {\n  count: number;\n}\n\nconst BasketSummary: React.SFC<IProps> = props => {\n  return <div className=\"basket-summary\">{props.count}</div>;\n};\n\nexport default BasketSummary;\n```", "```jsx\n.basket-summary {\n  display: inline-block;\n  margin-left: 10px;\n  padding: 5px 10px;\n  border: white solid 2px;\n}\n```", "```jsx\nimport BasketSummary from \"./BasketSummary\";\n```", "```jsx\nimport { connect } from \"react-redux\";\n```", "```jsx\nimport { IApplicationState } from \"./Store\";\n```", "```jsx\ninterface IProps extends RouteComponentProps {\n basketCount: number;\n}\n\nclass Header extends React.Component<IProps, IState> { \n   public constructor(props: IProps) { ... }\n   ...\n}\n```", "```jsx\n<header className=\"header\">\n  <div className=\"search-container\">\n    <input ... />\n    <BasketSummary count={this.props.basketCount} />\n  </div>\n  ...\n</header>\n```", "```jsx\nconst mapStateToProps = (store: IApplicationState) => {\n  return {\n    basketCount: store.basket.products.length\n  };\n};\n```", "```jsx\nexport default connect(mapStateToProps)(withRouter(Header));\n```", "```jsx\ninterface ILikeState {\n  likes: number;\n  lastLike: Date | null;\n}\n```", "```jsx\nconst initialLikeState: ILikeState = {\n  likes: 0,\n  lastLike: null\n};\n```", "```jsx\nenum LikeActionTypes {\n  LIKE = \"LIKE\"\n}\n\ninterface ILikeAction {\n  type: LikeActionTypes.LIKE;\n  now: Date;\n}\n```", "```jsx\ntype LikeActions = ILikeAction;\n```", "```jsx\nconst [state, dispatch]: [\n    ILikeState,\n    (action: ILikeAction) => void\n  ] = React.useReducer(reducer, initialLikeState);\n```", "```jsx\nconst [{ likes, lastLike }, dispatch]: [\n    ILikeState,\n    (action: ILikeAction) => void\n  ] = React.useReducer(reducer, initialLikeState);\n```", "```jsx\n{!props.inBasket && (\n  <button onClick={handleAddClick}>Add to basket</button>\n)}\n<div className=\"like-container\">\n {likes > 0 && (\n <div>{`I like this x ${likes}, last at ${lastLike}`}</div>\n )}\n <button onClick={handleLikeClick}>\n {likes > 0 ? \"Like again\" : \"Like\"}\n </button>\n</div>\n```", "```jsx\n.like-container {\n  margin-top: 20px;\n}\n\n.like-container button {\n  margin-top: 5px;\n}\n```", "```jsx\nconst handleLikeClick = () => {\n  dispatch({ type: LikeActionTypes.LIKE, now: new Date() });\n};\n```", "```jsx\nconst reducer = (state: ILikeState = initialLikeState, action: LikeActions) => {\n switch (action.type) {\n case LikeActionTypes.LIKE:\n return { ...state, likes: state.likes + 1, lastLike: action.now };\n }\n return state;\n};\n```", "```jsx\nexport const basketReducer: Reducer<IBasketState, BasketActions> = (\n  state = initialBasketState,\n  action\n) => {\n  switch (action.type) {\n    case BasketActionTypes.ADD: {\n      state.products.push(action.product);\n    }\n  }\n  return state || initialBasketState;\n};\n```"]