["```jsx\nnpx create-react-app my-react-ts-app --typescript\n```", "```jsx\nnpm install react@16.7.0-alpha.0\nnpm install react-dom@16.7.0-alpha.0\n```", "```jsx\ncd my-react-ts-app\nnpm install tslint tslint-react tslint-config-prettier --save-dev\n```", "```jsx\n{\n  \"extends\": [\"tslint:recommended\", \"tslint-react\", \"tslint-\n   config-prettier\"],\n  \"rules\": {\n    \"ordered-imports\": false,\n    \"object-literal-sort-keys\": false,\n    \"no-debugger\": false,\n    \"no-console\": false,\n  },\n  \"linterOptions\": {\n    \"exclude\": [\n      \"config/**/*.js\",\n      \"node_modules/**/*.ts\",\n      \"coverage/lcov-report/*.js\"\n    ]\n  }\n}\n```", "```jsx\nnpm start\n```", "```jsx\nclass App extends Component {\n  public render() {\n    return ( ... );\n  }\n}\n```", "```jsx\n<a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n Learn React and TypeScript\n</a>\n```", "```jsx\nnpm init\n```", "```jsx\nnpm install typescript --save-dev\n```", "```jsx\n{ \n  \"compilerOptions\": { \n    \"target\": \"es5\", \n    \"module\": \"es6\", \n    \"moduleResolution\": \"node\", \n    \"lib\": [\"es6\", \"dom\"],\n    \"sourceMap\": true, \n    \"jsx\": \"react\", \n    \"strict\": true, \n    \"noImplicitReturns\": true,\n    \"rootDir\": \"src\",\n    \"outDir\": \"dist\",\n  },\n  \"include\": [\"**/*.ts\", \"**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n}\n```", "```jsx\n npm install tslint --save-dev\n```", "```jsx\n{\n  \"extends\": [\"tslint:recommended\", \"tslint-react\", \"tslint-config-prettier\"],\n  \"linterOptions\": {\n    \"exclude\": [\"node_modules/**/*.ts\"]\n  }\n}\n```", "```jsx\nnpm install react react-dom\n```", "```jsx\nnpm install @types/react @types/react-dom --save-dev\n```", "```jsx\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\"/>\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```", "```jsx\nimport * as React from \"react\";\n\nconst App: React.SFC = () => {\n  return <h1>My React App!</h1>;\n};\n```", "```jsx\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nconst App: React.SFC = () => {\n  return <h1>My React App!</h1>;\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\n```", "```jsx\nnpm install webpack webpack-cli --save-dev\n```", "```jsx\nnpm install webpack webpack-dev-server --save-dev\n```", "```jsx\nnpm install ts-loader --save-dev\n```", "```jsx\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/index.tsx\",\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: \"ts-loader\",\n        exclude: /node_modules/\n      }\n    ]\n  },\n  resolve: {\n    extensions: [\".tsx\", \".ts\", \".js\"]\n  },\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  devServer: {\n    contentBase: path.join(__dirname, \"dist\"),\n    compress: true,\n    port: 9000\n  }\n};\n```", "```jsx\n\u251c\u2500 dist/\n  \u251c\u2500 bundle.js\n  \u251c\u2500 index.html\n\u251c\u2500 node_modules/\n\u251c\u2500 src/\n  \u251c\u2500 index.tsx \n\u251c\u2500 package.json\n\u251c\u2500 tsconfig.json\n\u251c\u2500 tslint.json\n\u251c\u2500 webpack.config.js\n```", "```jsx\n{\n  ...\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n    \"start\": \"webpack-dev-server --env development\",\n \"build\": \"webpack --env production\"\n  },\n  ..\n}\n```", "```jsx\nnpm run build\n```", "```jsx\nnpm start\n```", "```jsx\nconst App: React.SFC = () => {\n  return <h1>My React and TypeScript App!</h1>;\n};\n```", "```jsx\nnpx create-react-app my-components --typescript\n```", "```jsx\ncd my-components\nnpm install tslint tslint-react tslint-config-prettier --save-dev\n```", "```jsx\n{\n  \"extends\": [\"tslint:recommended\", \"tslint-react\", \"tslint-config-prettier\"],\n  \"rules\": {\n    \"ordered-imports\": false,\n    \"object-literal-sort-keys\": false,\n    \"no-debugger\": false,\n    \"no-console\": false,\n  },\n  \"linterOptions\": {\n    \"exclude\": [\n      \"config/**/*.js\",\n      \"node_modules/**/*.ts\",\n      \"coverage/lcov-report/*.js\"\n    ]\n  }\n}\n```", "```jsx\nclass App extends Component {\n  public render() {\n    return ( ... );\n  }\n}\n```", "```jsx\nnpm start\n```", "```jsx\n.App-logo {\n  animation: App-logo-spin infinite 20s linear;\n  height: 80px;\n}\n\n.App-header {\n  background-color: #282c34;\n  height: 200px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  color: white;\n} \n```", "```jsx\nimport * as React from \"react\";\n\nclass Confirm extends React.Component {\n\n}\n\nexport default Confirm;\n```", "```jsx\nclass Confirm extends React.Component {\n  public render() {\n return (\n );\n }\n}\n```", "```jsx\npublic render() {\n  return (\n    <div className=\"confirm-wrapper confirm-visible\">\n <div className=\"confirm-container\">\n <div className=\"confirm-title-container\">\n <span>This is where our title should go</span>\n </div>\n <div className=\"confirm-content-container\">\n <p>This is where our content should go</p>\n </div>\n <div className=\"confirm-buttons-container\">\n <button className=\"confirm-cancel\">Cancel</button>\n <button className=\"confirm-ok\">Okay</button>\n </div>\n </div>\n </div>\n  );\n}\n```", "```jsx\nimport Confirm from \"./Confirm\";\n```", "```jsx\n<div className=\"App\">\n  <header className=\"App-header\">\n    ...\n  </header>\n  <Confirm />\n</div>\n```", "```jsx\n.confirm-wrapper {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: gray;\n  opacity: 0;\n  visibility: hidden;\n  transform: scale(1.1);\n  transition: visibility 0s linear 0.25s, opacity 0.25s 0s, transform 0.25s;\n  z-index: 1;\n}\n.confirm-visible {\n  opacity: 1;\n  visibility: visible;\n  transform: scale(1);\n  transition: visibility 0s linear 0s, opacity 0.25s 0s, transform 0.25s;\n}\n.confirm-container {\n  background-color: #fff;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border-radius: 0.2em;\n  min-width: 300px;\n}\n.confirm-title-container {\n  font-size: 1.3em;\n  padding: 10px;\n  border-top-left-radius: 0.2em;\n  border-top-right-radius: 0.2em;\n}\n.confirm-content-container {\n  padding: 0px 10px 15px 10px;\n}\n.confirm-buttons-container {\n  padding: 5px 15px 10px 15px;\n  text-align: right;\n}\n.confirm-buttons-container button {\n  margin-left: 10px;\n  min-width: 80px;\n  line-height: 20px;\n  border-style: solid;\n  border-radius: 0.2em;\n  padding: 3px 6px;\n  cursor: pointer;\n}\n.confirm-cancel {\n  background-color: #fff;\n  border-color: #848e97;\n}\n.confirm-cancel:hover {\n  border-color: #6c757d;\n}\n.confirm-ok {\n  background-color: #848e97;\n  border-color: #848e97;\n  color: #fff;\n}\n.confirm-ok:hover {\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n```", "```jsx\nimport  \"./Confirm.css\";\n```", "```jsx\n<span>This is where our title should go</span>\n```", "```jsx\nReact.createElement(\n  \"span\",\n  null,\n  \"This is where our title should go\"\n);\n```", "```jsx\n<div className=\"confirm-title-container\">\n  <span>This is where our title should go</span>\n</div>\n```", "```jsx\nReact.createElement(\n  \"div\",\n  { className: \"confirm-title-container\" },\n  React.createElement(\n    \"span\",\n    null,\n    \"This is where our title should go\"\n  )\n);\n```", "```jsx\nconst props = {\n title: \"React and TypeScript\"\n};\n<div className=\"confirm-title-container\">\n  <span>{props.title}</span>\n</div>\n```", "```jsx\nvar props = {\n title: \"React and TypeScript\"\n};\nReact.createElement(\n \"div\",\n { className: \"confirm-title-container\" },\n React.createElement(\n \"span\",\n null,\n props.title\n )\n);\n```", "```jsx\nconst props = {};\n<div className=\"confirm-title-container\">\n  <span>{props.title ? props.title : \"React and TypeScript\"}</span>\n</div>\n```", "```jsx\nReact.createElement(\n  \"span\",\n  null,\n  props.title ? props.title : \"React and TypeScript\"\n)\n```", "```jsx\ninterface IProps {\n  title: string;\n  content: string;\n}\n```", "```jsx\nclass Confirm extends React.Component<IProps>\n```", "```jsx\n...\n<div className=\"confirm-title-container\">\n  <span>{this.props.title}</span>\n</div>\n<div className=\"confirm-content-container\">\n  <p>{this.props.content}</p>\n</div>\n...\n```", "```jsx\n<Confirm \n title=\"React and TypeScript\" \n  content=\"Are you sure you want to learn React and TypeScript?\" \n/>\n```", "```jsx\ninterface IProps {\n  title: string;\n  content: string;\n  cancelCaption?: string;\n okCaption?: string;\n}\n```", "```jsx\n<div className=\"confirm-buttons-container\">\n  <button className=\"confirm-cancel\">\n {this.props.cancelCaption}\n </button>\n <button className=\"confirm-ok\">\n {this.props.okCaption}\n </button>\n</div>\n```", "```jsx\nclass Confirm extends React.Component<IProps> {\n  public static defaultProps = {\n cancelCaption: \"Cancel\",\n okCaption: \"Okay\"\n };\n  public render() { ... }\n}\n```", "```jsx\n<Confirm\n  title=\"React and TypeScript\"\n  content=\"Are you sure you want to learn React and TypeScript?\"\n  cancelCaption=\"No way\"\n okCaption=\"Yes please!\"\n/>\n```", "```jsx\n<button className=\"confirm-ok\" onClick={this.handleOkClick}>...</button>\n```", "```jsx\nprivate handleOkClick() {\n  console.log(\"Ok clicked\");\n}\n```", "```jsx\nprivate handleOkClick() {\n  console.log(\"Ok clicked\", this.props);\n}\n```", "```jsx\nprivate handleOkClick = () => {\n console.log(\"Ok clicked\", this.props);\n};\n```", "```jsx\n<button className=\"confirm-cancel\" onClick={this.handleCancelClick}>...</button>\n```", "```jsx\nprivate handleCancelClick = () => {\n  console.log(\"Cancel clicked\", this.props);\n};\n```", "```jsx\ninterface IProps {\n title: string;\n content: string;\n cancelCaption?: string;\n okCaption?: string;\n onOkClick: () => void;\n onCancelClick: () => void;\n}\n```", "```jsx\nprivate handleCancelClick = () => {\n  this.props.onCancelClick();\n};\n\nprivate handleOkClick = () => {\n  this.props.onOkClick();\n};\n```", "```jsx\nprivate handleCancelConfirmClick = () => {\n console.log(\"Cancel clicked\");\n};\n\nprivate handleOkConfirmClick = () => {\n console.log(\"Ok clicked\");\n};\n```", "```jsx\n<Confirm\n  ...\n  onCancelClick={this.handleCancelConfirmClick}\n onOkClick={this.handleOkConfirmClick}\n/>\n```", "```jsx\ninterface IProps {\n  open: boolean;\n  title: string;\n  content: string;\n  cancelCaption?: string;\n  okCaption?: string;\n  onOkClick: () => void;\n  onCancelClick: () => void;\n}\n```", "```jsx\npublic render() {\n  return (\n    <div\n      className={\n this.props.open\n ? \"confirm-wrapper confirm-visible\"\n : \"confirm-wrapper\"\n }\n    >\n      ...\n    </div>\n  );\n}\n```", "```jsx\n<Confirm\n  open={false}\n  title=\"React and TypeScript\"\n  content=\"Are you sure you want to learn React and TypeScript?\"\n  cancelCaption=\"No way\"\n  okCaption=\"Yes please!\"\n  onCancelClick={this.handleCancelConfirmClick}\n  onOkClick={this.handleOkConfirmClick}\n/>\n```", "```jsx\ninterface IState {\n confirmOpen: boolean;\n}\n```", "```jsx\nclass App extends React.Component<{}, IState>\n```", "```jsx\nconstructor(props: {}) {\n super(props);\n this.state = {\n  confirmOpen: true,\n };\n}\n```", "```jsx\n<Confirm\n  open={this.state.confirmOpen}\n  ...\n/>\n```", "```jsx\nprivate handleOkConfirmClick = () => {\n  this.state.confirmOpen = false;\n};\n```", "```jsx\nprivate handleOkConfirmClick = () => {\n  this.setState({ confirmOpen: false });\n};\n```", "```jsx\nprivate handleCancelConfirmClick = () => {\n  this.setState({ confirmOpen: false });\n};\n```", "```jsx\n<button onClick={this.handleConfirmClick}>Confirm</button>\n<Confirm ... />\n```", "```jsx\nprivate handleConfirmClick = () => {\n  this.setState({ confirmOpen: true });\n};\n```", "```jsx\ninterface IState {\n  confirmOpen: boolean;\n  confirmMessage: string;\n}\n```", "```jsx\nconstructor(props: {}) {\n  super(props);\n  this.state = {\n    confirmMessage: \"Please hit the confirm button\",\n    confirmOpen: true,\n  };\n}\n```", "```jsx\nprivate handleOkConfirmClick = () => {\n  this.setState({\n    confirmMessage: \"Cool, carry on reading!\",\n    confirmOpen: false\n  });\n};\n\nprivate handleCancelConfirmClick = () => {\n  this.setState({\n    confirmMessage: \"Take a break, I'm sure you will later ...\",\n    confirmOpen: false\n  });\n};\n```", "```jsx\n<p>{this.state.confirmMessage}</p>\n<button onClick={this.handleConfirmClick}>Confirm</button>\n<Confirm ... />\n```", "```jsx\nconstructor(props: {}) {\n  super(props);\n  this.state = {\n    confirmMessage: \"Please hit the confirm button\",\n    confirmOpen: false\n  };\n}\n```", "```jsx\ninterface IState {\n  confirmOpen: boolean;\n  confirmMessage: string;\n confirmVisible: boolean; countDown: number;\n}\n\nconstructor(props: {}) {\n  super(props);\n  this.state = {\n    confirmMessage: \"Please hit the confirm button\",\n    confirmOpen: false,\n    confirmVisible: true,\n countDown: 10\n  };\n}\n```", "```jsx\nprivate timer: number = 0;\n```", "```jsx\npublic componentDidMount() {\n  this.timer = window.setInterval(() => this.handleTimerTick(), 1000);\n}\n```", "```jsx\nprivate handleTimerTick() {\n  this.setState(\n    {\n      confirmMessage: `Please hit the confirm button ${\n        this.state.countDown\n      } secs to go`,\n      countDown: this.state.countDown - 1\n    }\n  );\n}\n```", "```jsx\nprivate handleTimerTick() {\n  this.setState(\n    {\n      confirmMessage: `Please hit the confirm button ${\n        this.state.countDown\n      } secs to go`,\n      countDown: this.state.countDown - 1\n    }\n  );\n  if (this.state.countDown <= 0) {\n clearInterval(this.timer);\n this.setState({\n confirmMessage: \"Too late to confirm!\",\n confirmVisible: false\n });\n }\n}\n```", "```jsx\nprivate handleTimerTick() {\n  this.setState(\n    {\n      confirmMessage: `Please hit the confirm button ${\n        this.state.countDown\n      } secs to go`,\n      countDown: this.state.countDown - 1\n    },\n () => {\n if (this.state.countDown <= 0) {\n clearInterval(this.timer);\n this.setState({\n confirmMessage: \"Too late to confirm!\",\n confirmVisible: false\n });\n }\n }\n  );\n}\n```", "```jsx\nprivate handleConfirmClick = () => {\n  this.setState({ confirmOpen: true });\n  clearInterval(this.timer);\n};\n\nprivate handleCancelConfirmClick = () => {\n  this.setState(...);\n  clearInterval(this.timer);\n};\n\nprivate handleOkConfirmClick = () => {\n  this.setState(...;\n  clearInterval(this.timer);\n};\n```", "```jsx\n<p>{this.state.confirmMessage}</p>\n{this.state.confirmVisible && (\n <button onClick={this.handleConfirmClick}>Confirm</button>\n)}\n<Confirm ... />\n```", "```jsx\npublic componentWillUnmount() {\n  clearInterval(this.timer);\n}\n```", "```jsx\npublic static getDerivedStateFromProps(props: {}, state: IState) {\n  console.log(\"getDerivedStateFromProps\", props, state);\n  return null;\n}\n```", "```jsx\nprivate renderCount = 0;\n```", "```jsx\npublic getSnapshotBeforeUpdate(prevProps: {}, prevState: IState) {\n  this.renderCount += 1;\n  console.log(\"getSnapshotBeforeUpdate\", prevProps, prevState, {\n    renderCount: this.renderCount\n  });\n  return this.renderCount;\n}\n\npublic componentDidUpdate(prevProps: {}, prevState: IState, snapshot: number) {\n  console.log(\"componentDidUpdate\", prevProps, prevState, \n  snapshot, {\n    renderCount: this.renderCount\n  });\n}\n```", "```jsx\npublic shouldComponentUpdate(nextProps: {}, nextState: IState) {\n  console.log(\"shouldComponentUpdate\", nextProps, nextState);\n  return true;\n}\n```", "```jsx\npublic shouldComponentUpdate(nextProps: {}, nextState: IState) {\n  console.log(\"shouldComponentUpdate\", nextProps, nextState);\n  return false;\n}\n```", "```jsx\npublic shouldComponentUpdate(nextProps: {}, nextState: IState) {\n  console.log(\"shouldComponentUpdate\", nextProps, nextState);\n  return true;\n}\n```", "```jsx\nconst Confirm: React.SFC<IProps> = (props) => {\n...\n}\n```", "```jsx\nreturn (\n  <div\n    className={\n      this.props.open\n        ? \"confirm-wrapper confirm-visible\"\n        : \"confirm-wrapper\"\n    }\n  >\n      ...\n  </div>\n);\n```", "```jsx\nconst handleCancelClick = () => {\n props.onCancelClick();\n};\n\nconst handleOkClick = () => {\n props.onOkClick();\n}; \n\nreturn ( ... )\n```", "```jsx\n<div\n  className={\n    props.open\n      ? \"confirm-wrapper confirm-visible\"\n      : \"confirm-wrapper\"\n  }\n>\n  <div className=\"confirm-container\">\n    <div className=\"confirm-title-container\">\n      <span>{props.title}</span>\n    </div>\n    <div className=\"confirm-content-container\">\n      <p>{props.content}</p>\n    </div>\n    <div className=\"confirm-buttons-container\">\n      <button className=\"confirm-cancel\" onClick=\n       {handleCancelClick}>\n        {props.cancelCaption}\n      </button>\n      <button className=\"confirm-ok\" onClick={handleOkClick}>\n        {props.okCaption}\n      </button>\n    </div>\n  </div>\n</div>\n```", "```jsx\nConfirm.defaultProps = {\n  cancelCaption: \"Cancel\",\n  okCaption: \"Okay\"\n}\n```", "```jsx\nimport * as React from \"react\";\n\nconst ComponentName: React.SFC<IProps> = props => {\n const handler = () => {\n ...\n };\n\n return (\n <div>Our JSX</div>\n );\n};\nComponentName.defaultProps = {\n ...\n};\n\nexport default ComponentName;\n```", "```jsx\nconst Confirm: React.SFC<IProps> = props => {\n\n  const [cancelClickCount, setCancelClickCount] = \n  React.useState(0); \n  const handleOkClick = () => {\n    props.onOkClick();\n  };\n  ...\n}\n```", "```jsx\nconst handleCancelClick = () => {\n  const newCount = cancelClickCount + 1;\n setCancelClickCount(newCount);\n if (newCount >= 2) {\n props.onCancelClick();\n }\n};\n```", "```jsx\n<button className=\"confirm-cancel\" onClick={handleCancelClick}>\n  {cancelClickCount === 0 ? props.cancelCaption : \"Really?\"}\n</button>\n```", "```jsx\nconst [cancelClickCount, setCancelClickCount] = React.useState(0);\n\nReact.useEffect(() => {\n console.log(\"Confirm first rendering\");\n}, []);\n```", "```jsx\nReact.useEffect(() => {\n  console.log(\"Confirm rendering\");\n});\n```", "```jsx\nReact.useEffect(\n  () => {\n    console.log(\"open changed\");\n  },\n  [props.open]\n);\n```", "```jsx\nReact.useEffect(() => {\n  console.log(\"Confirm first rendering\");\n  return () => {\n console.log(\"Confirm unmounted\");\n };\n}, []);\n```", "```jsx\n{this.state.countDown > 0 && (\n  <Confirm\n    ...\n  />\n)}\n```", "```jsx\nconsole.log(\"Confirm rendering\");\n```", "```jsx\nconst ConfirmMemo = React.memo(Confirm);\nexport default ConfirmMemo;\n```", "```jsx\nconst decrement = () => {\n  // TODO - reduce count by 1\n};\n```"]