["```jsx\nimport * as React from \"react\";\n\nclass ContactUsPage extends React.Component {\n  public render() {\n    return (\n      <div className=\"page-container\">\n        <h1>Contact Us</h1>\n        <p>\n         If you enter your details we'll get back to you as soon as  \n         we can.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default ContactUsPage;\n```", "```jsx\nimport ContactUsPage from \"./ContactUsPage\";\n```", "```jsx\n<Switch>\n  <Redirect exact={true} from=\"/\" to=\"/products\" />\n  <Route path=\"/products/:id\" component={ProductPage} />\n  <Route exact={true} path=\"/products\" component={ProductsPage} />\n  <Route path=\"/contactus\" component={ContactUsPage} />\n  <Route path=\"/admin\">\n    ...\n  </Route>\n  <Route path=\"/login\" component={LoginPage} />\n  <Route component={NotFoundPage} />\n</Switch>\n```", "```jsx\n<nav>\n  <NavLink to=\"/products\" className=\"header-link\" activeClassName=\"header-link-active\">\n    Products\n  </NavLink>\n  <NavLink to=\"/contactus\" className=\"header-link\" activeClassName=\"header-link-active\">\n Contact Us\n </NavLink>\n  <NavLink to=\"/admin\" className=\"header-link\" activeClassName=\"header-link-active\">\n    Admin\n  </NavLink>\n</nav>\n```", "```jsx\nnpm start\n```", "```jsx\nimport * as React from \"react\";\n\nconst ContactUs: React.SFC = () => {\n  return (\n    <form className=\"form\" noValidate={true}>\n      <div className=\"form-group\">\n        <label htmlFor=\"name\">Your name</label>\n        <input type=\"text\" id=\"name\" />\n      </div>\n    </form>\n  );\n};\n\nexport default ContactUs;\n```", "```jsx\n.form {\n  width: 300px;\n  margin: 0px auto 0px auto;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  align-self: flex-start;\n  font-size: 16px;\n  margin-bottom: 3px;\n}\n\n.form-group input, select, textarea {\n  font-family: Arial;\n  font-size: 16px;\n  padding: 5px;\n  border: lightgray solid 1px;\n  border-radius: 5px;\n}\n```", "```jsx\nimport ContactUs from \"./ContactUs\";\n```", "```jsx\n<div className=\"page-container\">\n  <h1>Contact Us</h1>\n  <p>If you enter your details we'll get back to you as soon as we can.</p>\n  <ContactUs />\n</div>\n```", "```jsx\ninterface IState {\n name: string;\n email: string;\n reason: string;\n notes: string;\n}\n\nclass ContactUsPage extends React.Component<{}, IState> { ... }\n```", "```jsx\npublic constructor(props: {}) {\n  super(props);\n  this.state = {\n    email: \"\",\n    name: \"\",\n    notes: \"\",\n    reason: \"\"\n  };\n}\n```", "```jsx\ninterface IProps {\n name: string;\n email: string;\n reason: string;\n notes: string;\n}\n\nconst ContactUs: React.SFC<IProps> = props => { ... }\n```", "```jsx\n<div className=\"form-group\">\n  <label htmlFor=\"name\">Your name</label>\n  <input type=\"text\" id=\"name\" value={props.name} />\n</div>\n```", "```jsx\n<ContactUs \n  name={this.state.name} \n email={this.state.email} \n reason={this.state.reason} \n notes={this.state.notes} \n/>\n```", "```jsx\n<input type=\"text\" id=\"name\" value={props.name} onChange={handleNameChange} />\n```", "```jsx\nconst ContactUs: React.SFC<IProps> = props => {\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n props.onNameChange(e.currentTarget.value);\n };\n  return ( ... );\n};\n```", "```jsx\ninterface IProps {\n  name: string;\n  onNameChange: (name: string) => void;\n  email: string;\n  onEmailChange: (email: string) => void;\n  reason: string;\n  onReasonChange: (reason: string) => void;\n  notes: string;\n  onNotesChange: (notes: string) => void;\n}\n```", "```jsx\n<ContactUs\n  name={this.state.name}\n  onNameChange={this.handleNameChange}\n  email={this.state.email}\n  onEmailChange={this.handleEmailChange}\n  reason={this.state.reason}\n  onReasonChange={this.handleReasonChange}\n  notes={this.state.notes}\n  onNotesChange={this.handleNotesChange}\n/>\n```", "```jsx\nprivate handleNameChange = (name: string) => {\n  this.setState({ name });\n};\nprivate handleEmailChange = (email: string) => {\n  this.setState({ email });\n};\nprivate handleReasonChange = (reason: string) => {\n  this.setState({ reason });\n};\nprivate handleNotesChange = (notes: string) => {\n  this.setState({ notes });\n};\n```", "```jsx\n<form className=\"form\" noValidate={true} onSubmit={handleSubmit}>\n  <div className=\"form-group\">\n    <label htmlFor=\"name\">Your name</label>\n    <input type=\"text\" id=\"name\" value={props.name} onChange={handleNameChange} />\n  </div>\n\n  <div className=\"form-group\">\n <label htmlFor=\"email\">Your email address</label>\n <input type=\"email\" id=\"email\" value={props.email} onChange={handleEmailChange} />\n </div>\n\n <div className=\"form-group\">\n <label htmlFor=\"reason\">Reason you need to contact us</label>\n <select id=\"reason\" value={props.reason} onChange={handleReasonChange}>\n <option value=\"Marketing\">Marketing</option>\n <option value=\"Support\">Support</option>\n <option value=\"Feedback\">Feedback</option>\n <option value=\"Jobs\">Jobs</option>\n <option value=\"Other\">Other</option>\n </select>\n </div>\n\n <div className=\"form-group\">\n <label htmlFor=\"notes\">Additional notes</label>\n <textarea id=\"notes\" value={props.notes} onChange={handleNotesChange} />\n </div>\n</form>\n```", "```jsx\n<select id=\"reason\">\n  <option value=\"Marketing\">Marketing</option>\n  <option value=\"Support\" **selected**>Support</option>\n  <option value=\"Feedback\">Feedback</option>\n  <option value=\"Jobs\">Jobs</option>\n  <option value=\"Other\">Other</option>\n</select>\n```", "```jsx\nconst handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  props.onEmailChange(e.currentTarget.value);\n};\nconst handleReasonChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n  props.onReasonChange(e.currentTarget.value);\n};\nconst handleNotesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n  props.onNotesChange(e.currentTarget.value);\n};\n```", "```jsx\n<Form\n  defaultValues={{ name: \"\", email: \"\", reason: \"Support\", notes: \"\" }}\n>\n  <Form.Field name=\"name\" label=\"Your name\" />\n  <Form.Field name=\"email\" label=\"Your email address\" type=\"Email\" />\n  <Form.Field name=\"reason\" label=\"Reason you need to contact us\" type=\"Select\" options={[\"Marketing\", \"Support\", \"Feedback\", \"Jobs\", \"Other\"]} />\n  <Form.Field name=\"notes\" label=\"Additional notes\" type=\"TextArea\" />\n</Form>\n```", "```jsx\nimport * as React from \"react\";\n\ninterface IFormProps {}\n\ninterface IState {}\n\nexport class Form extends React.Component<IFormProps, IState> {\n  constructor(props: IFormProps) {}\n  public render() {}\n}\n```", "```jsx\nexport interface IValues {\n [key: string]: any;\n}\n\ninterface IFormProps {\n  defaultValues: IValues;\n}\n```", "```jsx\n{ name: \"\", email: \"\", reason: \"Support\", notes: \"\" }\n```", "```jsx\ninterface IState {\n  values: IValues;\n}\n```", "```jsx\nconstructor(props: IFormProps) {\n  super(props);\n  this.state = {\n    values: props.defaultValues\n  };\n}\n```", "```jsx\npublic render() {\n return (\n <form className=\"form\" noValidate={true}>\n {this.props.children}\n </form>\n );\n}\n```", "```jsx\ninterface IFieldProps {\n  name: string;\n  label: string;\n  type?: \"Text\" | \"Email\" | \"Select\" | \"TextArea\";\n  options?: string[];\n}\n```", "```jsx\npublic static Field: React.SFC<IFieldProps> = props => {\n  return ();\n};\n```", "```jsx\nForm.Field.defaultProps = {\n  type: \"Text\"\n};\n```", "```jsx\npublic static Field: React.SFC<IFieldProps> = props => {\n  const { name, label, type, options } = props;\n  return (\n    <div className=\"form-group\">\n <label htmlFor={name}>{label}</label>\n <input type={type.toLowerCase()} id={name} />\n </div>\n  );\n}\n```", "```jsx\n<label htmlFor={name}>{label}</label>\n{(type === \"Text\" || type === \"Email\") && (\n  <input type={type.toLowerCase()} id={name} />\n)}\n```", "```jsx\n{(type === \"Text\" || type === \"Email\") ... }\n\n{type === \"TextArea\" && (\n <textarea id={name} />\n)}\n```", "```jsx\n{type === \"TextArea\" ... } {type === \"Select\" && (\n  <select>\n    {options &&\n      options.map(option => (\n        <option key={option} value={option}>\n          {option}\n        </option>\n      ))}\n  </select>\n)} \n```", "```jsx\ninterface IFormContext {\n  values: IValues;\n}\n```", "```jsx\nconst FormContext = React.createContext<IFormContext>({\n  values: {}\n});\n```", "```jsx\npublic render() {\n  const context: IFormContext = {\n values: this.state.values\n };\n  return ( ... )\n}\n```", "```jsx\n<FormContext.Provider value={context}>\n  <form ... >\n    ...\n  </form>\n</FormContext.Provider>\n```", "```jsx\n<FormContext.Consumer>\n {context => (\n    <div className=\"form-group\">\n    </div>\n )}\n</FormContext.Consumer>\n```", "```jsx\n<div className=\"form-group\">\n  <label htmlFor={name}>{label}</label>\n  {(type === \"Text\" || type === \"Email\") && (\n    <input type={type.toLowerCase()} id={name} value={context.values[name]} />\n  )}\n\n  {type === \"TextArea\" && (\n    <textarea id={name} value={context.values[name]} />\n  )}\n\n  {type === \"Select\" && (\n    <select value={context.values[name]}>\n    ...\n    </select>\n  )}\n</div>\n```", "```jsx\nprivate setValue = (fieldName: string, value: any) => {\n  const newValues = { ...this.state.values, [fieldName]: value };\n  this.setState({ values: newValues });\n};\n```", "```jsx\ninterface IFormContext {\n  values: IValues;\n  setValue?: (fieldName: string, value: any) => void;\n}\n```", "```jsx\nconst context: IFormContext = {\n  setValue: this.setValue,\n  values: this.state.values\n};\n```", "```jsx\nconst { name, label, type, options } = props;\n\nconst handleChange = (\n e:\n | React.ChangeEvent<HTMLInputElement>\n | React.ChangeEvent<HTMLTextAreaElement>\n | React.ChangeEvent<HTMLSelectElement>,\n context: IFormContext\n) => {\n if (context.setValue) {\n context.setValue(props.name, e.currentTarget.value);\n }\n};\n```", "```jsx\n<input \n  type={type.toLowerCase()} \n  id={name} \n  value={context.values[name]}\n  onChange={e => handleChange(e, context)} \n/>\n```", "```jsx\n<textarea \n  id={name} \n  value={context.values[name]} \n  onChange={e => handleChange(e, context)} \n/>\n```", "```jsx\n<select \n value={context.values[name]}\n onChange={e => handleChange(e, context)} \n>\n ...\n</select>\n```", "```jsx\nconst ContactUs: React.SFC = () => {\n  return ();\n};\n```", "```jsx\nimport { Form } from \"./Form\";\n```", "```jsx\nreturn (\n  <Form\n defaultValues={{ name: \"\", email: \"\", reason: \"Support\", notes: \"\" }}\n >\n </Form>\n);\n```", "```jsx\n<Form\n  defaultValues={{ name: \"\", email: \"\", reason: \"Support\", notes: \"\" }}\n>\n  <Form.Field name=\"name\" label=\"Your name\" />\n</Form>\n```", "```jsx\n<Form\n  defaultValues={{ name: \"\", email: \"\", reason: \"Support\", notes: \"\" }}\n>\n  <Form.Field name=\"name\" label=\"Your name\" />\n  <Form.Field name=\"email\" label=\"Your email address\" type=\"Email\" />\n <Form.Field\n name=\"reason\"\n label=\"Reason you need to contact us\"\n type=\"Select\"\n options={[\"Marketing\", \"Support\", \"Feedback\", \"Jobs\", \"Other\"]}\n />\n <Form.Field name=\"notes\" label=\"Additional notes\" type=\"TextArea\" />\n</Form>\n```", "```jsx\nclass ContactUsPage extends React.Component<{}, {}> {\n  public render() {\n    return (\n      <div className=\"page-container\">\n        <h1>Contact Us</h1>\n        <p>\n          If you enter your details we'll get back to you as soon as we can.\n        </p>\n        <ContactUs />\n      </div>\n    );\n  }\n}\n```", "```jsx\n<Form\n  ...\n  validationRules={{\n email: { validator: required },\n name: [{ validator: required }, { validator: minLength, arg: 3 }]\n }}\n>\n  ...\n</Form>\n```", "```jsx\nexport type Validator = (\n  fieldName: string,\n  values: IValues,\n  args?: any\n) => string;\n```", "```jsx\nexport const required: Validator = (\n  fieldName: string,\n  values: IValues,\n  args?: any\n): string =>\n  values[fieldName] === undefined ||\n  values[fieldName] === null ||\n  values[fieldName] === \"\"\n    ? \"This must be populated\"\n    : \"\";\n```", "```jsx\nexport const minLength: Validator = (\n  fieldName: string,\n  values: IValues,\n  length: number\n): string =>\n  values[fieldName] && values[fieldName].length < length\n    ? `This must be at least ${length} characters`\n    : \"\";\n```", "```jsx\ninterface IValidation {\n validator: Validator;\n arg?: any;\n}\n\ninterface IValidationProp {\n [key: string]: IValidation | IValidation[];\n}\n\ninterface IFormProps {\n  defaultValues: IValues;\n  validationRules: IValidationProp;\n}\n```", "```jsx\nimport { Form, minLength, required } from \"./Form\";\n```", "```jsx\n<Form\n  defaultValues={{ name: \"\", email: \"\", reason: \"Support\", notes: \"\" }}\n  validationRules={{\n email: { validator: required },\n name: [{ validator: required }, { validator: minLength, arg: 2 }]\n }}\n>\n  ...\n</Form>\n```", "```jsx\ninterface IErrors {\n [key: string]: string[];\n}\n\ninterface IState {\n  values: IValues;\n  errors: IErrors;\n}\n```", "```jsx\nconstructor(props: IFormProps) {\n  super(props);\n  const errors: IErrors = {};\n Object.keys(props.defaultValues).forEach(fieldName => {\n errors[fieldName] = [];\n });\n  this.state = {\n    errors,\n    values: props.defaultValues\n  };\n}\n```", "```jsx\ninterface IFormContext {\n errors: IErrors;  values: IValues;\n  setValue?: (fieldName: string, value: any) => void;\n}\n```", "```jsx\nconst FormContext = React.createContext<IFormContext>({\n  errors: {},\n  values: {}\n});\n```", "```jsx\npublic render() {\n  const context: IFormContext = {\n    errors: this.state.errors,\n    setValue: this.setValue,\n    values: this.state.values\n  };\n  return (\n    ...\n  );\n}\n```", "```jsx\nprivate validate = (\n  fieldName: string,\n  value: any\n): string[] => {\n\n};\n```", "```jsx\nprivate validate = ( \n  fieldName: string,\n  value: any\n): string[] => {\n  const rules = this.props.validationRules[fieldName];\n const errors: string[] = [];\n\n  // TODO - execute all the validators\n\n  return errors;\n}\n```", "```jsx\nconst errors: string[] = [];\nif (Array.isArray(rules)) {\n // TODO - execute all the validators in the array of rules\n} else {\n  if (rules) {\n    const error = rules.validator(fieldName, this.state.values, rules.arg);\n    if (error) {\n      errors.push(error);\n    }\n  }\n}\nreturn errors;\n```", "```jsx\nif (Array.isArray(rules)) {\n  rules.forEach(rule => {\n const error = rule.validator(\n fieldName,\n this.state.values,\n rule.arg\n );\n if (error) {\n errors.push(error);\n }\n });\n} else {\n  ...\n}\nreturn errors;\n```", "```jsx\nif (Array.isArray(rules)) {\n ...\n} else {\n ...\n}\nconst newErrors = { ...this.state.errors, [fieldName]: errors };\nthis.setState({ errors: newErrors });\nreturn errors;\n```", "```jsx\ninterface IFormContext {\n  values: IValues;\n  errors: IErrors;\n  setValue?: (fieldName: string, value: any) => void;\n  validate?: (fieldName: string, value: any) => void;\n}\n```", "```jsx\npublic render() {\n  const context: IFormContext = {\n    errors: this.state.errors,\n    setValue: this.setValue,\n    validate: this.validate,\n    values: this.state.values\n  };\n  return (\n    ...\n  );\n}\n```", "```jsx\nconst handleChange = (\n  ...\n};\n\nconst handleBlur = (\n e:\n | React.FocusEvent<HTMLInputElement>\n | React.FocusEvent<HTMLTextAreaElement>\n | React.FocusEvent<HTMLSelectElement>,\n context: IFormContext\n) => {\n if (context.validate) {\n context.validate(props.name, e.currentTarget.value);\n }\n};\n\nreturn ( ... )\n```", "```jsx\n{(type === \"Text\" || type === \"Email\") && (\n  <input\n    type={type.toLowerCase()}\n    id={name}\n    value={context.values[name]}\n    onChange={e => handleChange(e, context)}\n    onBlur={e => handleBlur(e, context)}\n  />\n)}\n```", "```jsx\n{type === \"TextArea\" && (\n  <textarea\n    id={name}\n    value={context.values[name]}\n    onChange={e => handleChange(e, context)}\n    onBlur={e => handleBlur(e, context)}\n  />\n)}\n{type === \"Select\" && (\n  <select\n    value={context.values[name]}\n    onChange={e => handleChange(e, context)}\n    onBlur={e => handleBlur(e, context)}\n  >\n    ...\n  </select>\n)}\n```", "```jsx\n<div className=\"form-group\">\n  <label htmlFor={name}>{label}</label>\n  {(type === \"Text\" || type === \"Email\") && (\n    ...\n  )}\n  {type === \"TextArea\" && (\n    ...\n  )}\n  {type === \"Select\" && (\n    ...\n  )}\n  {context.errors[name] &&\n context.errors[name].length > 0 &&\n context.errors[name].map(error => (\n <span key={error} className=\"form-error\">\n {error}\n </span>\n ))}\n</div>\n```", "```jsx\n.form-error {\n  font-size: 13px;\n  color: red;\n  margin: 3px auto 0px 0px;\n}\n```", "```jsx\n<FormContext.Provider value={context}>\n  <form className=\"form\" noValidate={true}>\n    {this.props.children}\n    <div className=\"form-group\">\n <button type=\"submit\">Submit</button>\n </div>\n  </form>\n</FormContext.Provider>\n```", "```jsx\n.form-group button {\n  font-size: 16px;\n  padding: 8px 5px;\n  width: 80px;\n  border: black solid 1px;\n  border-radius: 5px;\n  background-color: black;\n  color: white;\n}\n.form-group button:disabled {\n  border: gray solid 1px;\n  background-color: gray;\n  cursor: not-allowed;\n}\n```", "```jsx\nexport interface ISubmitResult {\n success: boolean;\n errors?: IErrors;\n}\n\ninterface IFormProps {\n  defaultValues: IValues;\n  validationRules: IValidationProp;\n  onSubmit: (values: IValues) => Promise<ISubmitResult>;\n}\n```", "```jsx\ninterface IState {\n  values: IValues;\n  errors: IErrors;\n  submitting: boolean;\n submitted: boolean;\n}\n```", "```jsx\nconstructor(props: IFormProps) {\n  ...\n  this.state = {\n    errors,\n    submitted: false,\n submitting: false,\n    values: props.defaultValues\n  };\n}\n```", "```jsx\n<button\n  type=\"submit\"\n  disabled={this.state.submitting || this.state.submitted}\n>\n  Submit\n</button>\n```", "```jsx\n<form className=\"form\" noValidate={true} onSubmit={this.handleSubmit}>\n  ...\n</form>\n```", "```jsx\nprivate handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n  e.preventDefault();\n\n};\n```", "```jsx\nprivate validateForm(): boolean {\n const errors: IErrors = {};\n let haveError: boolean = false;\n Object.keys(this.props.defaultValues).map(fieldName => {\n errors[fieldName] = this.validate(\n fieldName,\n this.state.values[fieldName]\n );\n if (errors[fieldName].length > 0) {\n haveError = true;\n }\n });\n this.setState({ errors });\n return !haveError;\n}\n\nprivate handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n  e.preventDefault();\n  if (this.validateForm()) {\n\n }\n};\n```", "```jsx\nprivate handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n  e.preventDefault();\n  if (this.validateForm()) {\n    this.setState({ submitting: true });\n const result = await this.props.onSubmit(this.state.values);\n this.setState({\n errors: result.errors || {},\n submitted: result.success,\n submitting: false\n });\n  }\n};\n```", "```jsx\nimport { Form, ISubmitResult, IValues, minLength, required } from \"./Form\";\n\ninterface IProps {\n onSubmit: (values: IValues) => Promise<ISubmitResult>;\n} const ContactUs: React.SFC<IProps> = props => { ... }\n```", "```jsx\nconst ContactUs: React.SFC<IProps> = props => {\n  const handleSubmit = async (values: IValues): Promise<ISubmitResult> => {\n const result = await props.onSubmit(values);\n return result;\n };\n  return ( ... );\n};\n```", "```jsx\nreturn (\n  <Form ... onSubmit={handleSubmit}>\n    ...\n  </Form>\n);\n```", "```jsx\nprivate handleSubmit = async (values: IValues): Promise<ISubmitResult> => {\n  await wait(1000); // simulate asynchronous web API call\n  return {\n    errors: {\n      email: [\"Some is wrong with this\"]\n    },\n    success: false\n  };\n};\n```", "```jsx\nconst wait = (ms: number): Promise<void> => {\n return new Promise(resolve => setTimeout(resolve, ms));\n};\n```", "```jsx\n<ContactUs onSubmit={this.handleSubmit} />\n```", "```jsx\nimport { ISubmitResult, IValues } from \"./Form\";\n```", "```jsx\nprivate handleSubmit = async (values: IValues): Promise<ISubmitResult> => {\n  await wait(1000); // simulate asynchronous web API call\n return {\n success: true\n };\n};\n```"]