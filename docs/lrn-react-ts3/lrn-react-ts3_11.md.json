["```jsx\nimport { required, IValues } from \"./Form\";\n```", "```jsx\ntest(\"When required is called with empty title, 'This must be populated' should be returned\", () => {\n  // TODO: implement the test\n});\n```", "```jsx\ntest(\"When required called with title being an empty string, an error should be 'This must be populated'\", () => {\n  const values: IValues = {\n title: \"\"\n };\n const result = required(\"title\", values);\n  // TODO: check the result is correct\n});\n```", "```jsx\ntest(\"When required called with title being an empty string, an error should be 'This must be populated'\", () => {\n  const values: IValues = {\n    title: \"\"\n  };\n  const result = required(\"title\", values);\n  expect(result).toBe(\"This must be populated\");\n});\n```", "```jsx\nnpm test\n```", "```jsx\nexpect(result).toBe(\"This must be populatedX\");\n```", "```jsx\nexpect(result).toBe(\"This must be populated\");\n```", "```jsx\n> Press f to run only failed tests.\n> Press o to only run tests related to changed files.\n> Press p to filter by a filename regex pattern.\n> Press t to filter by a test name regex pattern.\n> Press q to quit watch mode.\n> Press Enter to trigger a test run.\n```", "```jsx\ndescribe(\"required\", () => {\n  test(\"When required called with title being an empty string, an error should be 'This must be populated'\", () => {\n    const values: IValues = {\n      title: \"\"\n    };\n    const result = required(\"title\", values);\n    expect(result).toBe(\"This must be populated\");\n  });\n});\n```", "```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n```", "```jsx\nimport { Simulate } from \"react-dom/test-utils\";\n```", "```jsx\nimport ContactUs from \"./ContactUs\";\n```", "```jsx\nimport { ISubmitResult } from \"./Form\";\n```", "```jsx\ndescribe(\"ContactUs\", () => {\n  test(\"When submit without filling in fields should display errors\", () => {\n    // TODO - implement the test\n  });\n});\n```", "```jsx\ntest(\"When submit without filling in fields should display errors\", () => {\n  const handleSubmit = async (): Promise<ISubmitResult> => {\n return {\n success: true\n };\n };\n\n const container = document.createElement(\"div\");\n ReactDOM.render(<ContactUs onSubmit={handleSubmit} />, container);\n\n // TODO - submit the form and check errors are shown\n\n ReactDOM.unmountComponentAtNode(container);\n});\n```", "```jsx\nReactDOM.render(<ContactUs onSubmit={handleSubmit} />, container);\n\nconst form = container.querySelector(\"form\");\nexpect(form).not.toBeNull();\nSimulate.submit(form!);\n\n// TODO - check errors are shown\n\nReactDOM.unmountComponentAtNode(container);\n```", "```jsx\nSimulate.submit(form!);\n\nconst errorSpans = container.querySelectorAll(\".form-error\");\nexpect(errorSpans.length).toBe(2);\n\nReactDOM.unmountComponentAtNode(container);\n```", "```jsx\nnpm install --save-dev react-testing-library\n```", "```jsx\nimport { render, cleanup} from \"react-testing-library\";\n```", "```jsx\ntest(\"When submit without filling in fields should display errors\", () => {\n  const handleSubmit = async (): Promise<ISubmitResult> => {\n    return {\n      success: true\n    };\n  };\n  const { container, getAllByText } = render(\n <ContactUs onSubmit={handleSubmit} />\n );\n\n  const form = container.querySelector(\"form\");\n  ...\n});\n```", "```jsx\nSimulate.submit(form!);\n\nconst errorSpans = getAllByText(\"This must be populated\");\nexpect(errorSpans.length).toBe(2);\n```", "```jsx\nafterEach(cleanup);\n\ndescribe(\"ContactUs\", () => {\n  test(\"When submit without filling in fields should display errors\", () => {\n    const handleSubmit = async (): Promise<ISubmitResult> => {\n      return {\n        success: true\n      };\n    };\n    const { container, getAllByText } = render(\n      <ContactUs onSubmit={handleSubmit} />\n    );\n\n    const form = container.querySelector(\"form\");\n    expect(form).not.toBeNull();\n    Simulate.submit(form!);\n\n    const errorSpans = getAllByText(\"This must be populated\");\n    expect(errorSpans.length).toBe(2);\n  });\n});\n```", "```jsx\nimport { render, cleanup, fireEvent } from \"react-testing-library\";\n```", "```jsx\nconst { getAllByText, getByText } = render(\n  <ContactUs onSubmit={handleSubmit} />\n);\n```", "```jsx\nconst { getAllByText, getByText } = render(\n  <ContactUs onSubmit={handleSubmit} />\n);\n\nconst submitButton = getByText(\"Submit\");\nfireEvent.click(submitButton);\n\nconst errorSpans = getAllByText(\"This must be populated\");\nexpect(errorSpans.length).toBe(2);\n```", "```jsx\ndescribe(\"ContactUs\", () => {\n  test(\"When submit without filling in fields should display errors\", () => {\n    ...\n  });\n\n  test(\"When submit after filling in fields should submit okay\", () => {\n // TODO - render component, fill in fields, submit the form and check there are no errors\n });\n});\n```", "```jsx\ntest(\"When submit after filling in fields should submit okay\", () => {\n  const handleSubmit = async (): Promise<ISubmitResult> => {\n return {\n success: true\n };\n };\n const { container, getByText, getByLabelText } = render(\n <ContactUs onSubmit={handleSubmit} />\n );\n});\n```", "```jsx\nconst { container, getByText, getByLabelText } = render(\n  <ContactUs onSubmit={handleSubmit} />\n);\n\nconst nameField: HTMLInputElement = getByLabelText(\n \"Your name\"\n) as HTMLInputElement;\nexpect(nameField).not.toBeNull();\n```", "```jsx\nconst nameField: HTMLInputElement = getByLabelText(\n  \"Your name\"\n) as HTMLInputElement;\nexpect(nameField).not.toBeNull();\nfireEvent.change(nameField, {\n target: { value: \"Carl\" }\n});\n```", "```jsx\nconst nameField: HTMLInputElement = getByLabelText(\n  \"Your name\"\n) as HTMLInputElement;\nexpect(nameField).not.toBeNull();\nfireEvent.change(nameField, {\n  target: { value: \"Carl\" }\n});\n\nconst emailField = getByLabelText(\"Your email address\") as HTMLInputElement;\nexpect(emailField).not.toBeNull();\nfireEvent.change(emailField, {\n target: { value: \"carl.rippon@testmail.com\" }\n});\n```", "```jsx\nfireEvent.change(emailField, {\n  target: { value: \"carl.rippon@testmail.com\" }\n});\n\nconst submitButton = getByText(\"Submit\");\nfireEvent.click(submitButton); \n```", "```jsx\n{context.errors[name] && context.errors[name].length > 0 && (\n <div data-testid=\"formErrors\">\n    {context.errors[name].map(error => (\n      <span key={error} className=\"form-error\">\n        {error}\n      </span>\n    ))}\n  </div>\n)}\n```", "```jsx\nfireEvent.click(submitButton); \n\nconst errorsDiv = container.querySelector(\"[data-testid='formErrors']\");\nexpect(errorsDiv).toBeNull();\n```", "```jsx\ndescribe(\"ContactUs\", () => {\n  ...\n  test(\"Renders okay\", () => {\n const handleSubmit = async (): Promise<ISubmitResult> => {\n return {\n success: true\n };\n };\n const { container } = render(<ContactUs onSubmit={handleSubmit} />);\n\n // TODO - do the snapshot test\n });\n});\n```", "```jsx\ntest(\"Renders okay\", () => {\n  const handleSubmit = async (): Promise<ISubmitResult> => {\n    return {\n      success: true\n    };\n  };\n  const { container } = render(<ContactUs onSubmit={handleSubmit} />);\n\n  expect(container).toMatchSnapshot();\n});\n```", "```jsx\n// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`ContactUs Renders okay 1`] = `\n<div>\n  <form\n    class=\"form\"\n    novalidate=\"\"\n  >\n    <div\n      class=\"form-group\"\n    >\n      <label\n        for=\"name\"\n      >\n        Your name\n      </label>\n      <input\n        id=\"name\"\n        type=\"text\"\n        value=\"\"\n      />\n    </div>\n    ...\n  </form>\n</div>\n`;\n```", "```jsx\n<form ...>\n  <div>{this.props.children}</div>\n  ...\n</form>\n```", "```jsx\nconst handleSubmit = jest.fn();\n```", "```jsx\nconst errorSpans = container.querySelectorAll(\".form-error\");\nexpect(errorSpans.length).toBe(2);\n\nexpect(handleSubmit).not.toBeCalled();\n```", "```jsx\nconst handleSubmit = jest.fn();\n```", "```jsx\nconst errorsDiv = container.querySelector(\"[data-testid='formErrors']\");\nexpect(errorsDiv).toBeNull();\n\nexpect(handleSubmit).toBeCalledTimes(1);\n```", "```jsx\nexpect(handleSubmit).toBeCalledTimes(1);\nexpect(handleSubmit).toBeCalledWith({\n name: \"Carl\",\n email: \"carl.rippon@testmail.com\",\n reason: \"Support\",\n notes: \"\"\n});\n```", "```jsx\nnpm install axios-mock-adapter --save-dev\n```", "```jsx\nnpm install react-testing-library --save-dev\n```", "```jsx\nimport { render, cleanup, waitForElement } from \"react-testing-library\";\nimport axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\n```", "```jsx\nafterEach(cleanup);\n```", "```jsx\ndescribe(\"App\", () => {\n  test(\"When page loads, posts are rendered\", async () => {\n\n    // TODO - render the app component with a mock API and check that the posts in the rendered list are as expected\n```", "```jsx\n      });\n});\n```", "```jsx\ntest(\"When page loads, posts are rendered\", async () => {\n    const mock = new MockAdapter(axios);\n mock.onGet(\"https://jsonplaceholder.typicode.com/posts\").reply(200, [\n {\n userId: 1,\n id: 1,\n title: \"title test 1\",\n body: \"body test 1\"\n },\n {\n userId: 1,\n id: 2,\n title: \"title test 2\",\n body: \"body test 2\"\n }\n ]);\n});\n```", "```jsx\n{this.state.posts.length > 0 && (\n  <ul className=\"posts\" data-testid=\"posts\">\n    ...\n  </ul>\n)}\n```", "```jsx\nmock.onGet(\"https://jsonplaceholder.typicode.com/posts\").reply(...);\nconst { getByTestId } = render(<App />);\n```", "```jsx\nconst { getByTestId } = render(<App />);\nconst postsList: any = await waitForElement(() => getByTestId(\"posts\"));\n```", "```jsx\nconst postsList: any = await waitForElement(() => getByTestId(\"posts\"));\nexpect(postsList).toMatchSnapshot();\n```", "```jsx\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"es2015\"],\n    ...\n  },\n  \"include\": [\"src\"]\n}\n```", "```jsx\n\"scripts\": {\n  \"start\": \"react-scripts start\",\n  \"build\": \"react-scripts build\",\n  \"test\": \"react-scripts test\",\n  \"test-coverage\": \"react-scripts test --coverage\",\n  \"eject\": \"react-scripts eject\"\n},\n```", "```jsx\nnpm run test-coverage\n```", "```jsx\nlet name = \"Carl\"; console.log(name);\n```", "```jsx\ninterface IPerson {\n  id: number;\n  name: string;\n}\n```", "```jsx\nconst { container } = render(<SimpleList data={[\"Apple\", \"Banana\", \"Strawberry\"]} onItemSelect={handleListItemSelect} />);\n```"]