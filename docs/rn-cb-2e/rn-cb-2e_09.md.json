["```jsx\nyarn add redux react-redux\n```", "```jsx\nnpm install --save redux react-redux\n```", "```jsx\nimport React, { Component } from 'react';\nimport { StyleSheet, SafeAreaView } from 'react-native';\n\nimport Album from './components/Album';\n\nconst App = () => (\n  <SafeAreaView style={styles.container}>\n    <Album />\n  </SafeAreaView>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\nexport default App;\n```", "```jsx\nexport const FETCH_PHOTOS = 'FETCH_PHOTOS';\n```", "```jsx\nexport const fetchPhotos = () => {\n  return {\n    type: FETCH_PHOTOS,\n    payload: {\n      \"photos\": [\n        {\n          \"albumId\": 2,\n          \"title\": \"dolore esse a in eos sed\",\n          \"url\": \"http://placehold.it/600/f783bd\",\n          \"thumbnailUrl\": \"http://placehold.it/150/d83ea2\",\n          \"id\": 2\n        },\n        {\n          \"albumId\": 2,\n          \"title\": \"dolore esse a in eos sed\",\n          \"url\": \"http://placehold.it/600/8e6eef\",\n          \"thumbnailUrl\": \"http://placehold.it/150/bf6d2a\",\n          \"id\": 3\n        }\n      ]\n    }\n  }\n}\n```", "```jsx\nexport const ADD_PHOTO = 'ADD_PHOTO';\nexport const addPhoto = (photo) => {\n  return {\n    type: ADD_PHOTO,\n    payload: photo\n  };\n}\n```", "```jsx\nexport const REMOVE_PHOTO = 'REMOVE_PHOTO';\nexport const removePhoto = (photo) => {\n  return {\n    type: REMOVE_PHOTO,\n    payload: photo\n  };\n}\n```", "```jsx\nimport {\n  FETCH_PHOTOS,\n  ADD_PHOTO,\n  REMOVE_PHOTO\n} from './actions';\n```", "```jsx\nconst initialState = () => return {\n photos: []\n};\n```", "```jsx\nexport default (state = initialState, action) => {\n  // Defined in next steps \n} \n```", "```jsx\nexport default (state = initialState, action) => {\n switch (action.type) {\n case FETCH_PHOTOS:\n return {\n ...state,\n photos: [...action.payload],\n };\n  // Defined in next steps\n}\n```", "```jsx\n    case ADD_PHOTO:\n      return {\n        ...state,\n        photos: [...state.photos, action.payload],\n      };\n```", "```jsx\n    case REMOVE_PHOTO:\n      return {\n        ...state,\n        photos: state.photos.filter(photo => {\n          return photo.id !== action.payload.id\n        })\n      };\n```", "```jsx\nimport { combineReducers } from 'redux';\nimport photos from './photos/reducers';\nconst reducers = combineReducers({\n  photos,\n});\n```", "```jsx\nimport photosReducer from './photos/reducer'; \n\nconst reducers = function(state, action) { \n  return { \n    photos: photosReducer(state.photos, action), \n  }; \n} \n```", "```jsx\nimport { combineReducers, createStore } from 'redux';\n```", "```jsx\nconst store = createStore(reducers);\nexport default store;\n```", "```jsx\nimport { \n  loadPhotos, \n  addPhotos, \n  removePhotos, \n} from './photos/actions'; \n```", "```jsx\nconst unsubscribe = store.subscribe(() => {\n  console.log(store.getState());\n});\n```", "```jsx\nstore.dispatch(loadPhotos());\n```", "```jsx\nstore.dispatch(addPhoto({\n  \"albumId\": 2,\n  \"title\": \"dolore esse a in eos sed\",\n  \"url\": `http://placehold.it/600/`,\n  \"thumbnailUrl\": `http://placehold.it/150/`\n}));\n```", "```jsx\nstore.dispatch(removePhoto({ id: 1 }));\n```", "```jsx\nunsubscribe(); \n```", "```jsx\nimport store from './redux'; \n```", "```jsx\nnpm install --save axios\n```", "```jsx\nyarn add axios\n```", "```jsx\nnpm install --save redux-promise-middleware\n```", "```jsx\nyarn add redux-promise-middleware\n```", "```jsx\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport promiseMiddleware from 'redux-promise-middleware';\n```", "```jsx\nconst store = createStore(reducers, applyMiddleware(promiseMiddleware()));\n```", "```jsx\nimport axios from 'axios';\nconst API_URL='http://jsonplaceholder.typicode.com'; \n```", "```jsx\nexport const FETCH_PHOTOS = 'FETCH_PHOTOS';\nexport const FETCH_PHOTOS_PENDING = 'FETCH_PHOTOS_PENDING';\nexport const FETCH_PHOTOS_FULFILLED = 'FETCH_PHOTOS_FULFILLED';\nexport const FETCH_PHOTOS_REJECTED = 'FETCH_PHOTOS_REJECTED';\n```", "```jsx\nexport const fetchPhotos = () => {\n  return {\n    type: FETCH_PHOTOS,\n    payload: axios.get(`${API_URL}/photos?_page=1&_limit=20`)\n  }\n}\n```", "```jsx\nexport const ADD_PHOTO = 'ADD_PHOTO';\nexport const ADD_PHOTO_PENDING = 'ADD_PHOTO_PENDING';\nexport const ADD_PHOTO_FULFILLED = 'ADD_PHOTO_FULFILLED';\nexport const ADD_PHOTO_REJECTED = 'ADD_PHOTO_REJECTED';\n```", "```jsx\nexport const addPhoto = (photo) => {\n  return {\n    type: ADD_PHOTO,\n    payload: axios.post(`${API_URL}/photos`, photo)\n  };\n}\n```", "```jsx\nexport const REMOVE_PHOTO = 'REMOVE_PHOTO';\nexport const REMOVE_PHOTO_PENDING = 'REMOVE_PHOTO_PENDING';\nexport const REMOVE_PHOTO_FULFILLED = 'REMOVE_PHOTO_FULFILLED';\nexport const REMOVE_PHOTO_REJECTED = 'REMOVE_PHOTO_REJECTED';\nexport const removePhoto = (photoId) => {\n  console.log(`${API_URL}/photos/${photoId}`);\n  return {\n    type: REMOVE_PHOTO,\n    payload: axios.delete(`${API_URL}/photos/${photoId}`),\n    meta: { photoId }\n  };\n}\n```", "```jsx\nimport {\n  FETCH_PHOTOS_FULFILLED,\n  ADD_PHOTO_FULFILLED,\n  REMOVE_PHOTO_FULFILLED,\n} from './actions';\n\nconst initialState = {\n  loadedPhotos: []\n};\n```", "```jsx\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_PHOTOS_FULFILLED:\n      return {\n        ...state,\n        loadedPhotos: [...action.payload.data],\n      };\n    case ADD_PHOTO_FULFILLED:\n      return {\n        ...state,\n        loadedPhotos: [action.payload.data, ...state.loadedPhotos],\n      };\n    case REMOVE_PHOTO_FULFILLED:\n      return {\n        ...state,\n        loadedPhotos: state.loadedPhotos.filter(photo => {\n          return photo.id !== action.meta.photoId\n        })\n      };\n    default:\n      return state;\n  }\n}\n```", "```jsx\nnpm install --save randomcolor\n```", "```jsx\nyarn add randomcolor\n```", "```jsx\nimport React, { Component } from 'react';\nimport { StyleSheet, SafeAreaView } from 'react-native';\nimport { Provider } from 'react-redux';\nimport store from './redux';\n\nimport Album from './components/Album';\n```", "```jsx\nconst App = () => (\n  <Provider store={store}>\n    <Album />\n  </Provider>\n);\n\nexport default App;\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  ScrollView,\n  Image,\n  TouchableOpacity\n} from 'react-native';\nimport randomColor from 'randomcolor';\nimport { connect } from 'react-redux';\nimport {\n  fetchPhotos,\n  addPhoto,\n  removePhoto\n} from '../../redux/photos/actions';\n\n```", "```jsx\nclass Album extends Component {\n\n}\n\nexport default connect()(Album);\n```", "```jsx\nclass Album extends Component {\n\n}\n\nconst mapStateToProps = (state) => {\n return {\n photos: state.photos.loadedPhotos\n }\n}\n\nexport default connect(mapStateToProps)(Album);\n```", "```jsx\nclass Album extends Component {\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    photos: state.photos.loadedPhotos\n  }\n}\n const mapDispatchToProps = (dispatch) => {\n return {\n fetchPhotos: () => dispatch(fetchPhotos()),\n addPhoto: (photo) => dispatch(addPhoto(photo)),\n removePhoto: (id) => dispatch(removePhoto(id))\n }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Album);\n```", "```jsx\nclass Album extends Component {\n componentDidMount() {\n this.props.fetchPhotos();\n }\n  // Defined on later steps\n}\n```", "```jsx\n  addPhoto = () => {\n    const photo = {\n      \"albumId\": 2,\n      \"title\": \"dolore esse a in eos sed\",\n      \"url\": `http://placehold.it/600/${randomColor().replace('#',\n       '')}`,\n      \"thumbnailUrl\": \n  `http://placehold.it/150/${randomColor().replace('#', '')}`\n    };\n    this.props.addPhoto(photo);\n  }\n```", "```jsx\n  removePhoto = (id) => {\n    this.props.removePhoto(id);\n  }\n```", "```jsx\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Text style={styles.toolbar}>Album</Text>\n        <ScrollView>\n          <View style={styles.imageContainer}>\n            <TouchableOpacity style={styles.button} onPress=\n             {this.addPhoto}>\n              <Text style={styles.buttonText}>Add Photo</Text>\n            </TouchableOpacity>\n            {this.props.photos ? this.props.photos.map((photo) => {\n              return(\n                <TouchableOpacity onPress={() => \n                 this.removePhoto(photo.id)} key={Math.random()}>\n                  <Image style={styles.image}\n                    source={{ uri: photo.url }}\n                  />\n                </TouchableOpacity>\n              );\n            }) : null}\n          </View>\n        </ScrollView>\n      </SafeAreaView>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#ecf0f1',\n    flex: 1,\n  },\n  toolbar: {\n    backgroundColor: '#3498db',\n    color: '#fff',\n    fontSize: 20,\n    textAlign: 'center',\n    padding: 20,\n  },\n  imageContainer: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  image: {\n    height: 300,\n    width: 300\n  },\n  button: {\n    margin: 10,\n    padding: 20,\n    backgroundColor: '#3498db'\n  },\n  buttonText: {\n    fontSize: 18,\n    color: '#fff'\n  }\n});\n```", "```jsx\nnpm install --save redux-persist\n```", "```jsx\nyarn add redux-persist\n```", "```jsx\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage';\n```", "```jsx\nconst persistConfig = {\n  key: 'root',\n  storage\n}\n```", "```jsx\nconst reducers = combineReducers({\n  photos,\n});\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n```", "```jsx\nexport const store = createStore(persistedReducer, applyMiddleware(promiseMiddleware()));\n```", "```jsx\nexport const persistor = persistStore(store);\n```", "```jsx\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { store, persistor } from './redux';\n```", "```jsx\nconst App = () => (\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Album />\n    </PersistGate>\n  </Provider>\n);\n```", "```jsx\n  componentDidMount() {\n setTimeout(() => {\n      this.props.fetchPhotos();\n }, 2000);\n  }\n```"]