["```jsx\nbrew install cocoapods\n```", "```jsx\nreact-native init EmbedApp\n```", "```jsx\ntarget 'EmbeddedApp' do\n  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks\n  # use_frameworks!\n\n  # Pods for EmbeddedApp\n\n  target 'EmbeddedAppTests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\n  target 'EmbeddedAppUITests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\n # Pods that will be used in the app\n pod 'React', :path => '../../node_modules/react-native', :subspecs => [\n 'Core',\n 'CxxBridge', # Include this for RN >= 0.47\n 'DevSupport', # Include this to enable In-App Devmenu if RN >= 0.43\n 'RCTText',\n 'RCTNetwork',\n 'RCTWebSocket', # Needed for debugging\n 'RCTAnimation', # Needed for FlatList and animations running on native UI thread\n # Add any other subspecs you want to use in your project\n ]\n\n # Explicitly include Yoga if you are using RN >= 0.42.0\n pod 'yoga', :path => '../../node_modules/react-native/ReactCommon/yoga'\n\n # Third party deps podspec link\n pod 'DoubleConversion', :podspec => '../../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'\n pod 'glog', :podspec => '../../node_modules/react-native/third-party-podspecs/glog.podspec'\n pod 'Folly', :podspec => '../../node_modules/react-native/third-party-podspecs/Folly.podspec'\n\nend\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  View,\n  Text\n} from 'react-native';\n\nclass EmbedApp extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>Hello in React Native</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  }\n});\n\nAppRegistry.registerComponent('EmbedApp', () => EmbedApp);\n```", "```jsx\n#import \"ViewController.h\"\n#import \"EmbeddedViewController.h\"\n#import <React/RCTRootView.h>\n```", "```jsx\n@interface ViewController () {\n EmbeddedViewController *embeddedViewController;\n}\n\n@end\n```", "```jsx\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n- (IBAction)openRNAppButtonPressed:(id)sender {\n NSURL *jsCodeLocation = [NSURL\n URLWithString:@\"http://localhost:8081/index.bundle?platform=ios\"];\n RCTRootView *rootView =\n [[RCTRootView alloc] initWithBundleURL : jsCodeLocation\n moduleName : @\"EmbedApp\"\n initialProperties : nil\n launchOptions : nil];\n\n UIViewController *vc = [[UIViewController alloc] init];\n vc.view = rootView;\n [self presentViewController:vc animated:YES completion:nil];\n}\n- (IBAction)openRNAppEmbeddedButtonPressed:(id)sender {\n NSURL *jsCodeLocation = [NSURL\n URLWithString:@\"http://localhost:8081/index.bundle?platform=ios\"];\n RCTRootView *rootView =\n [[RCTRootView alloc] initWithBundleURL : jsCodeLocation\n moduleName : @\"EmbedApp\"\n initialProperties : nil\n launchOptions : nil];\n\n [embeddedViewController setView:rootView];\n}\n\n// Defined in next step\n\n@end\n```", "```jsx\n// Defined in previous steps - (void) prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n if([segue.identifier isEqualToString:@\"embed\"]) {\n embeddedViewController = segue.destinationViewController;\n }\n}\n\n@end\n```", "```jsx\n<key>NSAppTransportSecurity</key>\n<dict>\n  <key>NSExceptionDomains</key>\n  <dict>\n    <key>localhost</key>\n    <dict>\n      <key>NSTemporaryExceptionAllowsInsecureHTTPLoads</key>\n      <true/>\n    </dict>\n  </dict>\n</dict>\n```", "```jsx\nreact-native start\n```", "```jsx\n#import \"ViewController.h\"\n#import \"EmbeddedViewController.h\"\n#import <React/RCTRootView.h>\n#import <React/RCTBridge.h>\n#import <React/RCTEventDispatcher.h>\n```", "```jsx\n@interface ViewController () <RCTBridgeDelegate> {\n    EmbeddedViewController *embeddedViewController;\n    RCTBridge *_bridge;\n    BOOL isRNRunning;\n}\n```", "```jsx\n@property (weak, nonatomic) IBOutlet UITextField *userNameField;\n\n@end\n```", "```jsx\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge {\n    NSURL *jsCodeLocation = [NSURL\n                             URLWithString:@\"http://localhost:8081/index.bundle?platform=ios\"];\n    return jsCodeLocation;\n}\n```", "```jsx\n- (void)viewDidLoad {\n    [super viewDidLoad];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n```", "```jsx\n- (IBAction)openRNAppEmbeddedButtonPressed:(id)sender {\n    NSString *userName = _userNameField.text;\n    NSDictionary *props = @{@\"userName\" : userName};\n\n    if(_bridge == nil) {\n        _bridge = [[RCTBridge alloc] initWithDelegate:self \n        launchOptions:nil];\n    }\n\n    RCTRootView *rootView =\n    [[RCTRootView alloc] initWithBridge :_bridge\n                             moduleName : @\"FromNativeToRN\"\n                      initialProperties : props];\n\n    isRNRunning = true;\n    [embeddedViewController setView:rootView];\n}\n```", "```jsx\n- (IBAction)onUserNameChanged:(id)sender {\n    if(isRNRunning == YES && _userNameField.text.length > 3) {\n        [_bridge.eventDispatcher sendAppEventWithName:@\"UserNameChanged\" body:@{@\"userName\" : _userNameField.text}];\n    }\n}\n```", "```jsx\n- (void) prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n    if([segue.identifier isEqualToString:@\"embed\"]) {\n        embeddedViewController = segue.destinationViewController;\n    }\n}\n@end\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  View,\n  Text,\n  NativeAppEventEmitter\n} from 'react-native';\n```", "```jsx\nclass FromNativeToRN extends Component {\n // Defined in following steps\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  }\n});\n\nAppRegistry.registerComponent('FromNativeToRN', () => FromNativeToRN);\n```", "```jsx\nclass FromNativeToRN extends Component {\n state = {\n userName: ''\n }\n\n // Defined in following steps\n}\n```", "```jsx\n  componentWillMount() {\n    this.setState({\n      userName : this.props.userName\n    });\n\n    NativeAppEventEmitter.addListener('UserNameChanged', (body) => {\n        this.setState({userName : body.userName});\n    });\n  }\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>Hello {this.state.userName}</Text>\n      </View>\n    );\n  }\n```", "```jsx\nreact-native start\n```", "```jsx\n#import \"ViewController.h\"\n#import \"EmbeddedViewController.h\"\n#import <React/RCTRootView.h>\n#import <React/RCTBridge.h>\n#import <React/RCTEventDispatcher.h>\n```", "```jsx\n@interface ViewController () <RCTBridgeDelegate> {\n    EmbeddedViewController *embeddedViewController;\n    RCTBridge *_bridge;\n    BOOL isRNRunning;\n}\n```", "```jsx\n@property (weak, nonatomic) IBOutlet UITextField *userNameField;\n\n@end\n```", "```jsx\n@implementation ViewController\n\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge {\n    NSURL *jsCodeLocation = [NSURL\n                             URLWithString:@\"http://localhost:8081/index.bundle?platform=ios\"];\n    return jsCodeLocation;\n}\n```", "```jsx\n- (void)viewDidLoad {\n    [super viewDidLoad];\n [self openRNAppEmbeddedButtonPressed:nil];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n```", "```jsx\n- (IBAction)openRNAppEmbeddedButtonPressed:(id)sender {\n    if(_bridge == nil) {\n        _bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:nil];\n    }\n\n    RCTRootView *rootView =\n    [[RCTRootView alloc] initWithBridge :_bridge\n                      moduleName : @\"FromRNToNative\"\n                      initialProperties : nil];\n\n    isRNRunning = true;\n    [embeddedViewController setView:rootView];\n}\n```", "```jsx\n- (void) prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n    if([segue.identifier isEqualToString:@\"embed\"]) {\n        embeddedViewController = segue.destinationViewController;\n    }\n}\n\n-(void) updateUserNameField:(NSString *)userName {\n    [_userNameField setText:userName];\n}\n@end\n```", "```jsx\n#import <UIKit/UIKit.h>\n\n@interface ViewController : UIViewController\n- (void) updateUserNameField:(NSString *)userName;\n\n@end\n```", "```jsx\n#import \"UserNameManager.h\"\n#import \"AppDelegate.h\"\n#import \"ViewController.h\"\n#import <React/RCTBridgeModule.h>\n```", "```jsx\n@implementation UserNameManager\nRCT_EXPORT_MODULE();\n\n- (dispatch_queue_t)methodQueue\n{\n    return dispatch_get_main_queue();\n}\n\nRCT_EXPORT_METHOD(setUserName: (NSString *)userName) {\n    AppDelegate *delegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n    ViewController *controller = (ViewController *)delegate.window.rootViewController;\n\n    [controller updateUserNameField:userName];\n}\n@end\n```", "```jsx\n#import <Foundation/Foundation.h>\n#import <React/RCTBridgeModule.h>\n\n@interface UserNameManager : NSObject <RCTBridgeModule>\n\n@end\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  View,\n  Text,\n  TextInput,\n  NativeModules\n} from 'react-native';\n```", "```jsx\nclass FromRNToNative extends Component {\n  state = {\n    userName: ''\n  }\n\n  // Defined on next step\n}\n\nAppRegistry.registerComponent('FromRNToNative', () => FromRNToNative);\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>Enter User Name</Text>\n        <TextInput\n          style={styles.userNameField}\n          onChangeText={this.onUserNameChange}\n          value={this.state.userName}\n        />\n      </View>\n    );\n  }\n```", "```jsx\n  onUserNameChange = (userName) => {\n    this.setState({userName});\n    NativeModules.UserNameManager.setUserName(userName);\n  }\n```", "```jsx\nreact-native start\n```", "```jsx\n<key>CFBundleURLTypes</key>\n<array>\n  <dict>\n    <key>CFBundleTypeRole</key>\n    <string>Editor</string>\n    <key>CFBundleURLSchemes</key>\n    <array>\n      <string>invoked</string>\n    </array>\n  </dict>\n</array>\n```", "```jsx\n#import \"AppDelegate.h\"\n\n#import <React/RCTBundleURLProvider.h>\n#import <React/RCTRootView.h>\n#import <React/RCTLinkingManager.h>\n\n@implementation AppDelegate\n\n// The rest of the AppDelegate implementation\n\n- (BOOL)application:(UIApplication *)application\n openURL:(NSURL *)url\n options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n return [RCTLinkingManager application:application openURL:url options:options];\n}\n\n@end\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  Linking\n} from 'react-native';\n```", "```jsx\nclass InvokeFromNative extends Component {\n state = {\n status: 'App Running'\n }\n\n // Defined on following steps\n}\n\nAppRegistry.registerComponent('InvokeFromNative', () => InvokeFromNative);\n```", "```jsx\n  componentWillMount() {\n    Linking.addEventListener('url', this.onAppInvoked);\n  }\n\n  componentWillUnmount() {\n    Linking.removeEventListener('url', this.onAppInvoked);\n  }\n```", "```jsx\n  onAppInvoked = (event) => {\n    this.setState({\n      status: `App Invoked by ${ event.url }`\n    });\n  }\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.instructions}>\n          App Status:\n        </Text>\n        <Text style={styles.welcome}>\n          {this.state.status}\n        </Text>\n      </View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n```", "```jsx\n xcrun simctl openurl booted invoked://\n```", "```jsx\nyarn add react-native\n```", "```jsx\n npm install react-native --save\n```", "```jsx\n \"start\": \"node node_modules/react-native/local-cli/cli.js start\"\n```", "```jsx\nimport React, { Component } from 'react';\nimport { AppRegistry, StyleSheet, View, Text } from 'react-native';\n\nexport default class EmbedApp extends Component {\n  render() {\n    return (<View style={styles.container}>\n      <Text>Hello in React Native</Text>\n    </View>);\n  }\n}\n\nconst styles = StyleSheet.create({\n container: {\n   flex: 1,\n   justifyContent: 'center',\n   alignItems: 'center', backgroundColor: '#F5FCFF'\n  }\n});\n\nAppRegistry.registerComponent('EmbedApp', () => EmbedApp);\n```", "```jsx\ndependencies {\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"]) \n    implementation \"com.android.support:appcompat-v7:27.1.1\"\n    implementation \"com.facebook.react:react-native:+\" // From node_modules\n}   \n```", "```jsx\nallprojects {\n  repositories {\n    mavenLocal()\n      maven {\n        url \"$rootDir/../node_modules/react-native/android\"\n      }\n    google()\n    jcenter()\n  }\n}\n```", "```jsx\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <manifest \n    package=\"com.warlyware.embeddedapp\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/>\n\n    <application\n        android:name=\".EmbedApp\" \n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n </manifest>\n```", "```jsx\nimport android.app.Application;\n\nimport com.facebook.react.ReactApplication;\nimport com.facebook.react.ReactNativeHost;\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.shell.MainReactPackage;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MainApplication extends Application implements ReactApplication {\n  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n    @Override\n    public boolean getUseDeveloperSupport() {\n      return BuildConfig.DEBUG;\n    }\n\n    @Override\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n        new MainReactPackage()\n      );\n    }\n  };\n\n  @Override\n  public ReactNativeHost getReactNativeHost() {\n    return mReactNativeHost;\n  }\n  @Override\n  protected String getJSMainModuleName() {\n    return \"index.android\";\n  }\n}\n```", "```jsx\nimport android.app.Fragment;\nimport android.content.Context;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.ViewGroup;\n\nimport com.facebook.react.ReactInstanceManager;\nimport com.facebook.react.ReactRootView;\n\npublic abstract class ReactFragment extends Fragment {\n  private ReactRootView mReactRootView;\n  private ReactInstanceManager mReactInstanceManager;\n\n  // This method returns the name of our top-level component to show\n  public abstract String getMainComponentName();\n\n  @Override\n  public void onAttach(Context context) {\n    super.onAttach(context);\n    mReactRootView = new ReactRootView(context);\n    mReactInstanceManager =\n      ((EmbedApp) getActivity().getApplication())\n        .getReactNativeHost()\n        .getReactInstanceManager();\n  }\n\n  @Override\n  public ReactRootView onCreateView(LayoutInflater inflater, ViewGroup group, Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    return mReactRootView;\n  }\n\n  @Override\n  public void onActivityCreated(Bundle savedInstanceState) {\n    super.onActivityCreated(savedInstanceState);\n    mReactRootView.startReactApplication(\n      mReactInstanceManager,\n      getMainComponentName(),\n      getArguments()\n    );\n  }\n}\n```", "```jsx\nimport android.os.Bundle;\n\npublic class EmbedFragment extends ReactFragment {\n  @Override\n  public String getMainComponentName() {\n    return \"EmbedApp\";\n  }\n}\n```", "```jsx\nimport android.app.Fragment;\nimport android.os.Bundle;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.KeyEvent;\nimport android.view.View;\n\nimport com.facebook.react.ReactInstanceManager;\nimport com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;\n\npublic class MainActivity extends AppCompatActivity implements DefaultHardwareBackBtnHandler {\n  private ReactInstanceManager mReactInstanceManager;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n    setSupportActionBar(toolbar);\n\n    FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\n    fab.setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View view) {\n        Fragment viewFragment = new EmbedFragment();\n        getFragmentManager().beginTransaction().add(R.id.reactnativeembed, viewFragment).commit(); }\n    });\n\n    mReactInstanceManager = ((EmbedApp) getApplication()).getReactNativeHost().getReactInstanceManager();\n  }\n\n  @Override\n  public void invokeDefaultOnBackPressed() {\n    super.onBackPressed();\n  }\n\n  @Override\n  protected void onPause() {\n    super.onPause();\n\n    if (mReactInstanceManager != null) {\n      mReactInstanceManager.onHostPause(this);\n    }\n  }\n\n  @Override\n  protected void onResume() {\n    super.onResume();\n\n    if (mReactInstanceManager != null) {\n      mReactInstanceManager.onHostResume(this, this);\n    }\n  }\n\n  @Override\n  protected void onDestroy() {\n    super.onDestroy();\n\n    if (mReactInstanceManager != null) {\n      mReactInstanceManager.onHostDestroy(this);\n    }\n  }\n\n  @Override\n  public void onBackPressed() {\n    if (mReactInstanceManager != null) {\n      mReactInstanceManager.onBackPressed();\n    } else {\n      super.onBackPressed();\n    }\n  }\n\n  @Override\n  public boolean onKeyUp(int keyCode, KeyEvent event) {\n    if (keyCode == KeyEvent.KEYCODE_MENU && mReactInstanceManager != null) {\n      mReactInstanceManager.showDevOptionsDialog();\n      return true;\n    }\n    return super.onKeyUp(keyCode, event);\n  }\n}\n```", "```jsx\n <FrameLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"300dp\"\n    android:layout_centerVertical=\"true\"\n    android:layout_alignParentStart=\"true\"\n    android:id=\"@+id/reactnativeembed\"\n    android:background=\"#FFF\">\n</FrameLayout>\n```", "```jsx\n react-native start \n```", "```jsx\n<TextView android: layout_width = \"wrap_content\"\nandroid: layout_height = \"wrap_content\"\nandroid: text = \"Press the Mail Icon to start the React Native application\"\nandroid: id = \"@+id/textView\" />\n<FrameLayout android: layout_width = \"match_parent\"\nandroid: layout_height = \"300dp\"\nandroid: layout_centerVertical = \"true\"\nandroid: layout_alignParentStart = \"true\"\nandroid: id = \"@+id/reactnativeembed\"\nandroid: background = \"#FFF\" >\n</FrameLayout>\n<LinearLayout android:orientation=\"horizontal\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"75dp\"\nandroid:layout_below=\"@+id/textView\"\nandroid:layout_centerHorizontal=\"true\">\n  <TextView\n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\"\n  android:text=\"User Name:\"\n  android:id=\"@ + id / textView2\"\n  android:layout_weight=\"0.14 \" />\n  <EditText android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\"\n  android:id=\"@ + id / userName\"\n  android:layout_weight=\"0.78\"\n  android:inputType=\"text\"\n  android:singleLine=\"true\"\n  android:imeOptions=\"actionDone\"/>\n</LinearLayout>\n```", "```jsx\nprivate ReactInstanceManager mReactInstanceManager;\nprivate EditText userNameField;\nprivate Boolean isRNRunning = false;\n```", "```jsx\n  userNameField = (EditText) findViewById(R.id.userName);\n```", "```jsx\nfab.setOnClickListener(new View.OnClickListener() {\n  @Override public void onClick(View view) {\n    Fragment viewFragment = new EmbedFragment();\n    if (userNameField.getText().length() > 0) {\n      Bundle launchOptions = new Bundle();\n      launchOptions.putString(\"userName\", \n      userNameField.getText().toString());\n      viewFragment.setArguments(launchOptions);\n    }\n    getFragmentManager().beginTransaction().add(R.id.reactnativeembed, viewFragment).commit();\n    isRNRunning = true;\n  }\n});\n```", "```jsx\nuserNameField.addTextChangedListener(new TextWatcher() {\n  @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n  @Override public void onTextChanged(CharSequence s, int start, int before, int count) {}\n  @Override public void afterTextChanged(Editable s) {\n    if (isRNRunning) {\n      sendUserNameChange(s.toString());\n    }\n  }\n});\n```", "```jsx\nprivate void sendUserNameChange(String userName) {\n  WritableMap params = Arguments.createMap();\n  params.putString(\"userName\", userName);\n  sendReactEvent(\"UserNameChanged\", params);\n}\n\nprivate void sendReactEvent(String eventName, WritableMap params) {\n  mReactInstanceManager.getCurrentReactContext()\n    .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)\n    .emit(eventName, params);\n}\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  View,\n  Text,\n  NativeAppEventEmitter\n} from 'react-native';\n\nexport default class EmbedApp extends Component<{}> {\n  componentWillMount() {\n    this.setState({\n      userName : this.props.userName\n    });\n\n    NativeAppEventEmitter.addListener('UserNameChanged', (body) => {\n        this.setState({userName : body.userName});\n    });\n  }\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>Hello {this.state.userName}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n\nAppRegistry.registerComponent('EmbedApp', () => EmbedApp);\n```", "```jsx\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout \n\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  android:paddingBottom=\"@dimen/activity_vertical_margin\"\n  android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n  android:paddingRight=\"@dimen/activity_horizontal_margin\"\n  android:paddingTop=\"@dimen/activity_vertical_margin\"\n  app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n  tools:context=\"com.embedapp.MainActivity\"\n  tools:showIn=\"@layout/activity_main\">\n\n  <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Press the Mail Icon to start the React Native application\"\n    android:id=\"@+id/textView\" />\n\n  <FrameLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"300dp\"\n    android:layout_centerVertical=\"true\"\n    android:layout_alignParentStart=\"true\"\n    android:id=\"@+id/reactnativeembed\"\n    android:background=\"#FFF\"></FrameLayout>\n\n  <LinearLayout\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"75dp\"\n    android:layout_below=\"@+id/textView\"\n    android:layout_centerHorizontal=\"true\">\n\n    <TextView\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:text=\"User Name:\"\n      android:id=\"@+id/textView2\"\n      android:layout_weight=\"0.14\" />\n\n      <EditText\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/userName\"\n        android:layout_weight=\"0.78\"\n        android:inputType=\"text\"\n        android:singleLine=\"true\"\n        android:imeOptions=\"actionDone\"/>\n  </LinearLayout>\n</RelativeLayout>\n```", "```jsx\npublic class UserNameManager extends ReactContextBaseJavaModule {\n  public UserNameManager(ReactApplicationContext reactApplicationContext) {\n    super(reactApplicationContext);\n  }\n  @Override public String getName() {\n    return \"UserNameManager\";\n  }\n  @ReactMethod public void setUserName(final String userName) {\n    Activity mainActivity = getReactApplicationContext().getCurrentActivity();\n    final EditText userNameField = (EditText) mainActivity.findViewById(R.id.userName);\n    mainActivity.runOnUiThread(new Runnable() {\n      @Override public void run() {\n        userNameField.setText(userName);\n      }\n    });\n  }\n}\n```", "```jsx\npublic class UserNamePackage implements ReactPackage {\n  @Override public List < Class << ? extends JavaScriptModule >> createJSModules() {\n      return Collections.emptyList();\n  }\n  @Override public List < ViewManager > createViewManagers(ReactApplicationContext reactContext) {\n      return Collections.emptyList();\n  }\n  @Override public List < NativeModule > createNativeModules(ReactApplicationContext reactContext) {\n      List < NativeModule > modules = new ArrayList < > ();\n modules.add(new UserNameManager(reactContext));\n      return modules;\n  }\n}\n```", "```jsx\n @Override\n protected List<ReactPackage> getPackages() {\n  return Arrays.<ReactPackage>asList(\n   new MainReactPackage(),\n   new UserNamePackage()\n  );\n }\n```", "```jsx\n       const UserNameManager = NativeModules.UserNameManager;\n```", "```jsx\nlet state = {\n  userName: ''\n}\n\nonUserNameChange = (userName) => {\n  this.setState({\n    userName\n  });\n\n  UserNameManager.setUserName(userName);\n}\n\nrender() {\n  return (\n    <View style={styles.container}>\n      <Text>Embedded RN App</Text>\n      <Text>Enter User Name</Text>\n      <TextInput style={styles.userNameField}\n        onChangeText={this.onUserNameChange}\n        value={this.state.userName}\n      />\n    </View>\n  );\n}\n```", "```jsx\n<activity\nandroid:name=\".MainActivity\"\nandroid:label=\"@string/app_name\"\nandroid:configChanges=\"keyboard|keyboardHidden|orientation|screenSize\"\nandroid:windowSoftInputMode=\"adjustResize\"\nandroid:launchMode=\"singleTask\">\n  <intent-filter>\n    <action android:name=\"android.intent.action.MAIN\" />\n    <category android:name=\"android.intent.category.LAUNCHER\" />\n  </intent-filter>\n</activity>\n```", "```jsx\nimport React from 'react';\nimport { Platform, Text, Linking } from 'react-native';\n```", "```jsx\nexport default class App extends React.Component {\n  state = {\n    status: 'App Running'\n  }\n\n  componentWillMount() {\n    Linking.addEventListener('url', this.onAppInvoked);\n  }\n\n  componentWillUnmount() {\n    Linking.removeEventListener('url', this.onAppInvoked);\n  }\n\n  onAppInvoked = (event) => {\n    this.setState({ status: `App Invoked by ${event.url}` });\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.instructions}>\n          App Status:\n        </Text>\n        <Text style={styles.welcome}>\n          {this.state.status}\n        </Text>\n      </View>\n    );\n  } \n}\n```"]