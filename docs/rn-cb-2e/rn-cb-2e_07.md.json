["```jsx\nimport React from 'react';\nimport {\n  Text,\n  StyleSheet,\n  SafeAreaView,\n} from 'react-native';\nimport ContactList from './ContactList';\n```", "```jsx\nconst App = () => (\n  <SafeAreaView style={styles.main}>\n    <Text style={styles.toolbar}>Contacts</Text>\n    <ContactList style={styles.content} />\n  </SafeAreaView>\n);\n\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n  },\n  toolbar: {\n    backgroundColor: '#2c3e50',\n    color: '#fff',\n    fontSize: 22,\n    padding: 20,\n    textAlign: 'center',\n  },\n  content: {\n    padding: 10,\n    flex: 1,\n  },\n});\n\nexport default App;\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  ListView,\n  ScrollView,\n} from 'react-native';\nimport ContactItem from './ContactItem';\n```", "```jsx\nconst data = [\n  { id: 1, name: 'Jon Snow' },\n  { id: 2, name: 'Luke Skywalker' },\n  { id: 3, name: 'Bilbo Baggins' },\n  { id: 4, name: 'Bob Labla' },\n  { id: 5, name: 'Mr. Magoo' },\n];\n```", "```jsx\nexport default class ContactList extends Component {\n  ds = new ListView.DataSource({\n    rowHasChanged: (r1, r2) => r1 !== r2\n  });\n\n  state = {\n    dataSource: this.ds.cloneWithRows(data),\n    swiping: false,\n  };\n  // Defined in later steps\n} \n```", "```jsx\n  render() {\n    const { dataSource, swiping } = this.state;\n\n    return (\n    <ListView\n        key={data}\n        enableEmptySections\n        dataSource={dataSource}\n        renderScrollComponent={\n        (props) => <ScrollView {...props} scrollEnabled={!swiping}/>\n        }\n        renderRow={this.renderItem}\n      />\n    );\n  }\n```", "```jsx\n  renderItem = (contact) => (\n    <ContactItem\n      contact={contact}\n      onRemove={this.handleRemoveContact}\n      onDragEnd={this.handleToggleSwipe}\n      onDragStart={this.handleToggleSwipe}\n    />\n  );\n```", "```jsx\n  handleToggleSwipe = () => {\n    this.setState({ swiping: !this.state.swiping });\n  }\n```", "```jsx\n  handleRemoveContact = (contact) => {\n    const index = data.findIndex(\n      (item) => item.id === contact.id\n    );\n    data.splice(index, 1);\n\n    this.setState({\n        dataSource: this.ds.cloneWithRows(data),\n    });\n  }\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  Animated,\n  Easing,\n  PanResponder,\n  StyleSheet,\n  Text,\n  TouchableHighlight,\n  View,\n} from 'react-native';\n```", "```jsx\nexport default class ContactItem extends Component {\n  static defaultProps = {\n    onPress: () => {},\n    onRemove: () => {},\n    onDragEnd: () => {},\n    onDragStart: () => {},\n  };\n\n  state = {\n    pan: new Animated.ValueXY(),\n  };\n```", "```jsx\n  componentWillMount() {\n    this.panResponder = PanResponder.create({\n      onMoveShouldSetPanResponderCapture: this.handleShouldDrag,\n      onPanResponderMove: Animated.event(\n        [null, { dx: this.state.pan.x }]\n      ),\n      onPanResponderRelease: this.handleReleaseItem,\n      onPanResponderTerminate: this.handleReleaseItem,\n    });\n  }\n```", "```jsx\n  handleShouldDrag = (e, gesture) => {\n    const { dx } = gesture;\n    return Math.abs(dx) > 2;\n  }\n```", "```jsx\n  handleReleaseItem = (e, gesture) => {\n    const { onRemove, contact,onDragEnd } = this.props;\n    const move = this.rowWidth - Math.abs(gesture.dx);\n    let remove = false;\n    let config = { // Animation to origin position\n      toValue: { x: 0, y: 0 },\n      duration: 500,\n    };\n\n    if (move < this.threshold) {\n      remove = true;\n      if (gesture.dx > 0) {\n        config = { // Animation to the right\n          toValue: { x: this.rowWidth, y: 0 },\n          duration: 100,\n        };\n      } else {\n        config = { // Animation to the left\n          toValue: { x: -this.rowWidth, y: 0 },\n          duration: 100,\n        };\n      }\n    }\n    // Remainder in next step\n  }\n```", "```jsx\n  handleReleaseItem = (e, gesture) => {\n    // Code from previous step\n\n    onDragEnd();\n    Animated.spring(\n      this.state.pan,\n      config,\n    ).start(() => {\n      if (remove) {\n        onRemove(contact);\n      }\n    });\n  }\n```", "```jsx\n  render() {\n    const { contact, onPress } = this.props;\n\n    return (\n      <View style={styles.row} onLayout={this.setThreshold}>\n        <Animated.View\n          style={[styles.pan, this.state.pan.getLayout()]}\n          {...this.panResponder.panHandlers}\n        >\n          <TouchableHighlight\n            style={styles.info}\n            onPress={() => onPress(contact)}\n            underlayColor=\"#ecf0f1\"\n          >\n            <Text>{contact.name}</Text>\n          </TouchableHighlight>\n        </Animated.View>\n      </View>\n    );\n  }\n```", "```jsx\n  setThreshold = (event) => {\n    const { layout: { width } } = event.nativeEvent;\n    this.threshold = width / 3;\n    this.rowWidth = width;\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  row: {\n    backgroundColor: '#ecf0f1',\n    borderBottomWidth: 1,\n    borderColor: '#ecf0f1',\n    flexDirection: 'row',\n  },\n  pan: {\n    flex: 1,\n  },\n  info: {\n    backgroundColor: '#fff',\n    paddingBottom: 20,\n    paddingLeft: 10,\n    paddingTop: 20,\n  },\n});\n```", "```jsx\nimport React from 'react';\nimport {\n  Dimensions,\n  Image,\n  Text,\n  ScrollView,\n  StyleSheet,\n  SafeAreaView,\n} from 'react-native';\nimport Reactions from './Reactions';\n```", "```jsx\nconst image1 = require('./images/01.jpg');\nconst image2 = require('./images/02.jpg');\nconst { width } = Dimensions.get('window');\n\nconst App = () => (\n  <SafeAreaView style={styles.main}>\n    <Text style={styles.toolbar}>Reactions</Text>\n    <ScrollView style={styles.content}>\n      <Image source={image1} style={styles.image} resizeMode=\"cover\" />\n      <Reactions />\n      <Image source={image2} style={styles.image} resizeMode=\"cover\" />\n      <Reactions />\n    </ScrollView>\n  </SafeAreaView>\n);\n\nexport default App;\n```", "```jsx\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n  },\n  toolbar: {\n    backgroundColor: '#3498db',\n    color: '#fff',\n    fontSize: 22,\n    padding: 20,\n    textAlign: 'center',\n  },\n  content: {\n    flex: 1,\n  },\n  image: {\n    width,\n    height: 300,\n  },\n});\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  Image,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Icon from './Icon';\n```", "```jsx\nconst image = require('./images/like.png');\n\nexport default class Reactions extends Component {\n  static defaultProps = {\n    icons: [\n      'like', 'heart', 'angry', 'laughing', 'surprised',\n    ],\n  };\n\n  state = {\n    show: false,\n    selected: '',\n  };\n\n  // Defined at later steps \n}\n```", "```jsx\n  onSelectReaction = (reaction) => {\n    this.setState({\n      selected: reaction,\n    });\n    this.toggleReactions();\n  }\n\n  toggleReactions = () => {\n    this.setState({\n      show: !this.state.show,\n    });\n  };\n```", "```jsx\n  render() {\n    const { style } = this.props;\n    const { selected } = this.state;\n\n    return (\n      <View style={[style, styles.container]}>\n        <TouchableOpacity onPress={this.toggleReactions}>\n          <Image source={image} style={styles.icon} />\n        </TouchableOpacity>\n        <Text>{selected}</Text>\n        {this.renderReactions()}\n      </View>\n    );\n  }\n```", "```jsx\n  renderReactions() {\n    const { icons } = this.props;\n    if (this.state.show) {\n      return (\n        <View style={styles.reactions}>\n        { icons.map((name, index) => (\n            <Icon\n              key={index}\n              name={name}\n              delay={index * 100}\n              index={index}\n              onPress={this.onSelectReaction}\n            />\n          ))\n        }\n        </View>\n      );\n    }\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    padding: 10,\n  },\n  icon: {\n    width: 30,\n    height: 30,\n  },\n  reactions: {\n    flexDirection: 'row',\n    height: 0,\n  },\n});\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  Animated,\n  Dimensions,\n  Easing,\n  Image,\n  StyleSheet,\n  TouchableOpacity,\n  View,\n} from 'react-native';\n```", "```jsx\nconst icons = {\n  angry: require('./images/angry.png'),\n  heart: require('./images/heart.png'),\n  laughing: require('./images/laughing.png'),\n  like: require('./images/like.png'),\n  surprised: require('./images/surprised.png'),\n};\n```", "```jsx\nexport default class Icon extends Component {\n  static defaultProps = {\n    delay: 0,\n    onPress: () => {},\n  };\n\n}\n```", "```jsx\n  componentWillMount() {\n    this.animatedValue = new Animated.Value(0);\n  }\n\n  componentDidMount() {\n    const { delay } = this.props;\n\n    Animated.timing(\n      this.animatedValue,\n      {\n        toValue: 1,\n        duration: 200,\n        easing: Easing.elastic(1),\n        delay,\n      }\n    ).start();\n  }\n```", "```jsx\n  onPressIcon = () => {\n    const { onPress, name } = this.props;\n    onPress(name);\n  }\n```", "```jsx\n  render() {\n    const { name, index, onPress } = this.props;\n    const left = index * 50;\n    const top = this.animatedValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [10, -95],\n    });\n    const opacity = this.animatedValue;\n\n    return (\n      <Animated.View\n        style={[\n          styles.icon,\n          { top, left, opacity },\n        ]}\n      >\n        <TouchableOpacity onPress={this.onPressIcon}>\n          <Image source={icons[name]} style={styles.image} />\n        </TouchableOpacity>\n      </Animated.View>\n    );\n  }\n```", "```jsx\n  icon: {\n    position: 'absolute',\n  },\n  image: {\n    width: 40,\n    height: 40,\n  },\n});\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  Dimensions,\n  Image,\n  Text,\n  ScrollView,\n  StyleSheet,\n  SafeAreaView,\n} from 'react-native';\nimport PostContainer from './PostContainer';\nimport PhotoViewer from './PhotoViewer';\n```", "```jsx\nconst image1 = require('./images/01.jpg');\nconst image2 = require('./images/02.jpg');\nconst image3 = require('./images/03.jpg');\nconst image4 = require('./images/04.jpg');\n\nconst timeline = [\n  { title: 'Enjoying the fireworks', image: image1 },\n  { title: 'Climbing the Mount Fuji', image: image2 },\n  { title: 'Check my last picture', image: image3 },\n  { title: 'Sakuras are beautiful!', image: image4 },\n];\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    selected: null,\n    position: null,\n  };\n  // Defined in following steps\n}\n```", "```jsx\n  showImage = (selected, position) => {\n    this.setState({\n      selected,\n      position,\n    });\n  }\n\n  closeViewer = () => {\n    this.setState({\n      selected: null,\n      position: null,\n    });\n  }\n```", "```jsx\n  render() {\n    return (\n      <SafeAreaView style={styles.main}>\n        <Text style={styles.toolbar}>Timeline</Text>\n        <ScrollView style={styles.content}>\n        {\n          timeline.map((post, index) =>\n            <PostContainer key={index} post={post}\n            onPress={this.showImage} />\n          )\n        }\n        </ScrollView>\n        {this.renderViewer()}\n      </SafeAreaView>\n    );\n  }\n```", "```jsx\n  renderViewer() {\n    const { selected, position } = this.state;\n\n    if (selected) {\n      return (\n        <PhotoViewer\n          post={selected}\n          position={position}\n          onClose={this.closeViewer}\n        />\n      );\n    }\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  main: {\n    backgroundColor: '#ecf0f1',\n    flex: 1,\n  },\n  toolbar: {\n    backgroundColor: '#2c3e50',\n    color: '#fff',\n    fontSize: 22,\n    padding: 20,\n    textAlign: 'center',\n  },\n  content: {\n    flex: 1,\n  },\n});\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  Dimensions,\n  Image,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  View,\n} from 'react-native';\n```", "```jsx\nconst { width } = Dimensions.get('window');\n\nexport default class PostContainer extends Component {\n  static defaultProps = {\n    onPress: ()=> {},\n  };\n  // Defined on following steps\n}\n```", "```jsx\n  onPressImage = (event) => {\n    const { onPress, post } = this.props;\n    this.refs.main.measure((fx, fy, width, height, pageX, pageY) => {\n      onPress(post, {\n        width,\n        height,\n        pageX,\n        pageY,\n      });\n    });\n  }\n```", "```jsx\n  render() {\n    const { post: { image, title } } = this.props;\n\n    return (\n      <View style={styles.main} ref=\"main\">\n        <TouchableOpacity\n           onPress={this.onPressImage}\n           activeOpacity={0.9}\n            >\n          <Image\n            source={image}\n            style={styles.image}\n            resizeMode=\"cover\"\n          />\n        </TouchableOpacity>\n        <Text style={styles.title}>{title}</Text>\n      </View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  main: {\n    backgroundColor: '#fff',\n    marginBottom: 30,\n    paddingBottom: 10,\n  },\n  content: {\n    flex: 1,\n  },\n  image: {\n    width,\n    height: 300,\n  },\n  title: {\n    margin: 10,\n    color: '#ccc',\n  }\n});\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  Animated,\n  Dimensions,\n  Easing,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n} from 'react-native';\n```", "```jsx\nconst { width, height } = Dimensions.get('window');\n\nexport default class PhotoViewer extends Component {\n  static defaultProps = {\n    onClose: () => {},\n  };\n  // Defined on following steps\n}\n```", "```jsx\n  componentWillMount() {\n    this.animatedValue = new Animated.Value(0);\n  }\n\n  componentDidMount() {\n    Animated.timing(\n      this.animatedValue,\n      {\n        toValue: 1,\n        duration: 400,\n        easing: Easing.in,\n      }\n    ).start();\n  }\n```", "```jsx\n  onPressBtn = () => {\n    this.props.onClose();\n  }\n```", "```jsx\n  render() {\n    const { post: { image, title }, position } = this.props;\n    const top = this.animatedValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [position.pageY, height/2 - position.height/2],\n    });\n    const opacity = this.animatedValue;\n    // Defined on next step \n  } \n```", "```jsx\n// Defined on previous step\n  render() {\n    return (\n      <Animated.View\n        style={[\n          styles.main,\n          { opacity },\n        ]}\n      >\n        <Animated.Image\n          source={image}\n          style={[\n            styles.image,\n            { top, opacity }\n          ]}\n        />\n        <TouchableOpacity style={styles.closeBtn}\n          onPress={this.onPressBtn}\n        >\n          <Text style={styles.closeBtnText}>X</Text>\n        </TouchableOpacity>\n      </Animated.View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  main: {\n    backgroundColor: '#000',\n    bottom: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n  image: {\n    width,\n    height: 300,\n  },\n  closeBtn: {\n    position: 'absolute',\n    top: 50,\n    right: 20,\n  },\n  closeBtnText: {\n    fontSize: 20,\n    color: '#fff',\n    fontWeight: 'bold',\n  },\n});\n```"]