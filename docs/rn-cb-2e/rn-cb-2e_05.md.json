["```jsx\nimport React from 'react';\nimport {\n  Location,\n  Permissions,\n  MapView,\n  Marker\n} from 'expo';\nimport {\n  StyleSheet,\n  Text,\n  View,\n} from 'react-native';\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    location: null\n  }\n  // Defined in following steps\n}\n```", "```jsx\n  async componentDidMount() {\n    const permission = await Permissions.askAsync(Permissions.LOCATION);\n    if (permission.status === 'granted') {\n      this.getLocation();\n    }\n  }\n```", "```jsx\n  async getLocation() {\n    let location = await Location.getCurrentPositionAsync({});\n    this.setState({\n      location\n    });\n  }\n```", "```jsx\n  renderMap() {\n    return this.state.location ?\n      <MapView\n        style={styles.map}\n        initialRegion={{\n          latitude: this.state.location.coords.latitude,\n          longitude: this.state.location.coords.longitude,\n          latitudeDelta: 0.09,\n          longitudeDelta: 0.04,\n        }}\n      >\n        // Map marker is defined in next step\n      </MapView> : null\n  }\n```", "```jsx\n      <MapView\n        style={styles.map}\n        initialRegion={{\n          latitude: this.state.location.coords.latitude,\n          longitude: this.state.location.coords.longitude,\n          latitudeDelta: 0.09,\n          longitudeDelta: 0.04,\n        }}\n      >\n <MapView.Marker\n coordinate={this.state.location.coords}\n title={\"User Location\"}\n description={\"You are here!\"}\n image={require('./assets/you-are-here.png')}\n />\n      </MapView> : null\n```", "```jsx\n render() {\n  return (\n   <View style={styles.container}>\n    {this.renderMap()}\n   </View>\n  );\n }\n```", "```jsx\nconst styles = StyleSheet.create({\n container: {\n  flex: 1,\n backgroundColor: '#fff',\n },\n map: {\n  flex: 1\n }\n});\n```", "```jsx\nimport React, { Component } from 'react';\nimport { Audio } from 'expo';\nimport { Feather } from '@expo/vector-icons';\nimport {\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  Dimensions\n} from 'react-native';\n```", "```jsx\nconst playlist = [\n  {\n    title: 'People Watching',\n    artist: 'Keller Williams',\n    album: 'Keller Williams Live at The Westcott Theater on 2012-09-22',\n    uri: 'https://ia800308.us.archive.org/7/items/kwilliams2012-09-22.at853.flac16/kwilliams2012-09-22at853.t16.mp3'\n  },\n  {\n   title: 'Hunted By A Freak',\n   artist: 'Mogwai',\n   album: 'Mogwai Live at Ancienne Belgique on 2017-10-20',\n   uri: 'https://ia601509.us.archive.org/17/items/mogwai2017-10-20.brussels.fm/Mogwai2017-10-20Brussels-07.mp3'\n  },\n  {\n    title: 'Nervous Tic Motion of the Head to the Left',\n    artist: 'Andrew Bird',\n    album: 'Andrew Bird Live at Rio Theater on 2011-01-28',\n    uri: 'https://ia800503.us.archive.org/8/items/andrewbird2011-01-28.early.dr7.flac16/andrewbird2011-01-28.early.t07.mp3'\n  }\n];\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    isPlaying: false,\n    playbackInstance: null,\n    volume: 1.0,\n    currentTrackIndex: 0,\n    isBuffering: false,\n  }\n\n // Defined in following steps\n}\n```", "```jsx\n async componentDidMount() {\n    await Audio.setAudioModeAsync({\n      allowsRecordingIOS: false,\n      playThroughEarpieceAndroid: true,\n      interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n      playsInSilentModeIOS: true,\n      shouldDuckAndroid: true,\n      interruptionModeAndroid: \n      Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n    });\n    this.loadAudio();\n  }\n```", "```jsx\nasync loadAudio() {\n    const playbackInstance = new Audio.Sound();\n    const source = {\n      uri: playlist[this.state.currentTrackIndex].uri\n    }\n    const status = {\n      shouldPlay: this.state.isPlaying,\n      volume: this.state.volume,\n    };\n    playbackInstance\n      .setOnPlaybackStatusUpdate(\n        this.onPlaybackStatusUpdate\n      );\n    await playbackInstance.loadAsync(source, status, false);\n    this.setState({\n      playbackInstance\n    });\n  }\n```", "```jsx\n  onPlaybackStatusUpdate = (status) => {\n    this.setState({\n      isBuffering: status.isBuffering\n    });\n  }\n```", "```jsx\n  handlePlayPause = async () => {\n    const { isPlaying, playbackInstance } = this.state;\n    isPlaying ? await playbackInstance.pauseAsync() : await playbackInstance.playAsync();\n    this.setState({\n      isPlaying: !isPlaying\n    });\n  }\n```", "```jsx\n  handlePreviousTrack = async () => {\n    let { playbackInstance, currentTrackIndex } = this.state;\n    if (playbackInstance) {\n      await playbackInstance.unloadAsync();\n      currentTrackIndex === 0 ? currentTrackIndex = playlist.length\n      - 1 : currentTrackIndex -= 1;\n      this.setState({\n        currentTrackIndex\n      });\n      this.loadAudio();\n    }\n  }\n```", "```jsx\n  handleNextTrack = async () => {\n    let { playbackInstance, currentTrackIndex } = this.state;\n    if (playbackInstance) {\n      await playbackInstance.unloadAsync();\n      currentTrackIndex < playlist.length - 1 ? currentTrackIndex +=\n      1 : currentTrackIndex = 0;\n      this.setState({\n        currentTrackIndex\n      });\n      this.loadAudio();\n    }\n  } \n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={[styles.largeText, styles.buffer]}>\n          {this.state.isBuffering && this.state.isPlaying ? \n          'Buffering...' : null}\n        </Text>\n        {this.renderSongInfo()}\n        <View style={styles.controls}>\n\n          // Defined in next step.\n\n        </View>\n      </View>\n    );\n  }\n```", "```jsx\n        <View style={styles.controls}>\n <TouchableOpacity\n style={styles.control}\n onPress={this.handlePreviousTrack}\n >\n <Feather name=\"skip-back\" size={32} color=\"#fff\"/>\n </TouchableOpacity>\n <TouchableOpacity\n style={styles.control}\n onPress={this.handlePlayPause}\n >\n {this.state.isPlaying ?\n <Feather name=\"pause\" size={32} color=\"#fff\"/> :\n <Feather name=\"play\" size={32} color=\"#fff\"/>\n }\n </TouchableOpacity>\n <TouchableOpacity\n style={styles.control}\n onPress={this.handleNextTrack}\n >\n <Feather name=\"skip-forward\" size={32} color=\"#fff\"/>\n </TouchableOpacity>\n        </View>\n```", "```jsx\n  renderSongInfo() {\n    const { playbackInstance, currentTrackIndex } = this.state;\n    return playbackInstance ?\n    <View style={styles.trackInfo}>\n      <Text style={[styles.trackInfoText, styles.largeText]}>\n        {playlist[currentTrackIndex].title}\n      </Text>\n      <Text style={[styles.trackInfoText, styles.smallText]}>\n        {playlist[currentTrackIndex].artist}\n      </Text>\n      <Text style={[styles.trackInfoText, styles.smallText]}>\n        {playlist[currentTrackIndex].album}\n      </Text>\n    </View>\n    : null;\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#191A1A',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  trackInfo: {\n    padding: 40,\n    backgroundColor: '#191A1A',\n  },\n  buffer: {\n    color: '#fff'\n  },\n  trackInfoText: {\n    textAlign: 'center',\n    flexWrap: 'wrap',\n    color: '#fff'\n  },\n  largeText: {\n    fontSize: 22\n  },\n  smallText: {\n    fontSize: 16\n  },\n  control: {\n    margin: 20\n  },\n  controls: {\n    flexDirection: 'row'\n  }\n});\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  SafeAreaView,\n  StyleSheet,\n  Text,\n  View,\n  Image,\n  TouchableOpacity,\n  Picker,\n  Dimensions,\n} from 'react-native';\nimport Carousel from 'react-native-snap-carousel';\n```", "```jsx\nexport default class App extends React.Component {\n  state = {\n    showCarousel: false,\n    layoutType: 'default',\n    imageSearchTerms: [\n      'Books',\n      'Code',\n      'Nature',\n      'Cats',\n    ]\n  }\n\n  // Defined in following steps\n}\n```", "```jsx\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        {this.state.showCarousel ?\n          this.renderCarousel() :\n          this.renderControls()\n        }\n      </SafeAreaView>\n    );\n  }\n```", "```jsx\n  renderControls = () => {\n    return(\n      <View style={styles.container}>\n        <Picker\n          selectedValue={this.state.layoutType}\n          style={styles.picker}\n          onValueChange={this.updateLayoutType}\n        >\n          <Picker.Item label=\"Default\" value=\"default\" />\n          <Picker.Item label=\"Tinder\" value=\"tinder\" />\n          <Picker.Item label=\"Stack\" value=\"stack\" />\n        </Picker>\n        <TouchableOpacity\n          onPress={this.toggleCarousel}\n          style={styles.openButton}\n        >\n          <Text style={styles.openButtonText}>Open Carousel</Text>\n        </TouchableOpacity>\n      </View>\n    )\n  } \n```", "```jsx\n  toggleCarousel = () => {\n    this.setState({\n      showCarousel: !this.state.showCarousel\n    });\n  }\n```", "```jsx\n  updateLayoutType = (layoutType) => {\n    this.setState({\n      layoutType\n    });\n  }\n```", "```jsx\n renderCarousel = () => {\n  return(\n   <View style={styles.carouselContainer}>\n    <View style={styles.closeButtonContainer}>\n     <TouchableOpacity\n      onPress={this.toggleCarousel}\n      style={styles.button}\n     >\n      <Text style={styles.label}>x</Text>\n     </TouchableOpacity>\n   </View>\n   <Carousel\n    layout={this.state.layoutType}\n    data={this.state.imageSearchTerms}\n    renderItem={this.renderItem}\n    sliderWidth={350}\n    itemWidth={350}\n   >\n   </Carousel>\n  </View>\n  );\n }\n```", "```jsx\n  renderItem = ({item}) => {\n    return (\n      <View style={styles.slide}>\n        <Image\n          style={styles.image}\n          source={{ uri: `https://source.unsplash.com/350x350/?\n          ${item}`}}\n        />\n        <Text style={styles.label}>{item}</Text>\n      </View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'space-evenly',\n  },\n  carouselContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#474747'\n  },\n  closeButtonContainer: {\n    width: 350,\n    flexDirection: 'row',\n    justifyContent: 'flex-end'\n  },\n  slide: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  image: {\n    width:350,\n    height: 350,\n  },\n  label: {\n    fontSize: 30,\n    padding: 40,\n    color: '#fff',\n    backgroundColor: '#474747'\n  },\n  openButton: {\n    padding: 10,\n    backgroundColor: '#000'\n  },\n  openButtonText: {\n    fontSize: 20,\n    padding: 20,\n    color: '#fff',\n  },\n  closeButton: {\n    padding: 10\n  },\n  picker: {\n    height: 150,\n    width: 100,\n    backgroundColor: '#fff'\n  }\n});\n```", "```jsx\nnpm i -g ngrok\n```", "```jsx\nngrok https [port-to-expose]\n```", "```jsx\nyarn add express esm expo-server-sdk\n```", "```jsx\nnpm install express esm expo-server-sdk --save\n```", "```jsx\nimport React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  TouchableOpacity\n} from 'react-native';\nimport { Permissions, Notifications } from 'expo';\n```", "```jsx\nconst PUSH_REGISTRATION_ENDPOINT = 'http://generated-ngrok-url/token';\nconst MESSAGE_ENPOINT = 'http://generated-ngrok-url/message';\n```", "```jsx\nexport default class App extends React.Component {\n  state = {\n    notification: null,\n    messageText: ''\n  }\n\n // Defined in following steps\n}\n```", "```jsx\n  registerForPushNotificationsAsync = async () => {\n    const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n    if (status !== 'granted') {\n      return;\n    }\n    let token = await Notifications.getExpoPushTokenAsync();\n\n    // Defined in following steps\n  }\n```", "```jsx\n  registerForPushNotificationsAsync = async () => {\n    // Defined in above step\n\n fetch(PUSH_REGISTRATION_ENDPOINT, {\n method: 'POST',\n headers: {\n 'Accept': 'application/json',\n 'Content-Type': 'application/json',\n },\n body: JSON.stringify({\n token: {\n value: token,\n },\n user: {\n username: 'warly',\n name: 'Dan Ward'\n },\n }),\n });\n\n    // Defined in next step\n  }\n```", "```jsx\n  registerForPushNotificationsAsync = async () => {\n    // Defined in above steps\n\n    this.notificationSubscription = \n    Notifications.addListener(this.handleNotification);\n  }\n```", "```jsx\nhandleNotification = (notification) => {\n  this.setState({ notification });\n}\n```", "```jsx\n  componentDidMount() {\n    this.registerForPushNotificationsAsync();\n  }\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        <TextInput\n          value={this.state.messageText}\n          onChangeText={this.handleChangeText}\n          style={styles.textInput}\n        />\n        <TouchableOpacity\n          style={styles.button}\n          onPress={this.sendMessage}\n        >\n          <Text style={styles.buttonText}>Send</Text>\n        </TouchableOpacity>\n        {this.state.notification ?\n          this.renderNotification()\n        : null}\n      </View>\n    );\n  }\n```", "```jsx\n  handleChangeText = (text) => {\n    this.setState({ messageText: text });\n  }\n```", "```jsx\n  sendMessage = async () => {\n    fetch(MESSAGE_ENPOINT, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        message: this.state.messageText,\n      }),\n    });\n    this.setState({ messageText: '' });\n  } \n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#474747',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  textInput: {\n    height: 50,\n    width: 300,\n    borderColor: '#f6f6f6',\n    borderWidth: 1,\n    backgroundColor: '#fff',\n    padding: 10\n  },\n  button: {\n    padding: 10\n  },\n  buttonText: {\n    fontSize: 18,\n    color: '#fff'\n  },\n  label: {\n    fontSize: 18\n  }\n});\n```", "```jsx\nimport express from 'express';\nimport Expo from 'expo-server-sdk';\n\nconst app = express();\nconst expo = new Expo();\n\nlet savedPushTokens = [];\nconst PORT_NUMBER = 3000;\n\n```", "```jsx\nconst saveToken = (token) => {\n  if (savedPushTokens.indexOf(token === -1)) {\n    savedPushTokens.push(token);\n  }\n}\n```", "```jsx\nconst handlePushTokens = (message) => {\n  let notifications = [];\n  for (let pushToken of savedPushTokens) {\n    if (!Expo.isExpoPushToken(pushToken)) {\n      console.error(`Push token ${pushToken} is not a valid Expo push token`);\n      continue;\n    }\n    notifications.push({\n      to: pushToken,\n      sound: 'default',\n      title: 'Message received!',\n      body: message,\n      data: { message }\n    })\n  }\n\n  // Defined in following step\n}\n```", "```jsx\nconst handlePushTokens = (message) => {\n  // Defined in previous step\n\n let chunks = expo.chunkPushNotifications(notifications);\n\n (async () => {\n for (let chunk of chunks) {\n try {\n let receipts = await expo.sendPushNotificationsAsync(chunk);\n console.log(receipts);\n } catch (error) {\n console.error(error);\n }\n }\n })();\n}\n```", "```jsx\napp.use(express.json());\n```", "```jsx\napp.get('/', (req, res) => {\n  res.send('Push Notification Server Running');\n});\n```", "```jsx\napp.post('/token', (req, res) => {\n  saveToken(req.body.token.value);\n  console.log(`Received push token, ${req.body.token.value}`);\n  res.send(`Received push token, ${req.body.token.value}`);\n});\n```", "```jsx\napp.post('/message', (req, res) => {\n  handlePushTokens(req.body.message);\n  console.log(`Received message, ${req.body.message}`);\n  res.send(`Received message, ${req.body.message}`);\n});\n```", "```jsx\napp.listen(PORT_NUMBER, () => {\n  console.log('Server Online on Port ${PORT_NUMBER}');\n});\n```", "```jsx\n{\n  \"main\": \"node_modules/expo/AppEntry.js\",\n  \"private\": true,\n  \"dependencies\": {\n    \"esm\": \"^3.0.28\",\n    \"expo\": \"^27.0.1\",\n    \"expo-server-sdk\": \"^2.3.3\",\n    \"express\": \"^4.16.3\",\n    \"react\": \"16.3.1\",\n    \"react-native\": \"https://github.com/expo/react-native/archive/sdk-27.0.0.tar.gz\"\n  },\n \"scripts\": {\n \"serve\": \"node -r esm server/index.js\"\n }\n}\n```", "```jsx\n yarn run serve\n npm run serve\n```", "```jsx\n ngrok http 3000\n```", "```jsx\nconst PUSH_REGISTRATION_ENDPOINT = 'http://ddf558bd.ngrok.io/token';\nconst MESSAGE_ENPOINT = 'http://ddf558bd.ngrok.io/message';\n```", "```jsx\n ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]\n```", "```jsx\nnpm run [custom-script-name]\n```", "```jsx\nyarn run [custom-script-name]\n```", "```jsx\nimport React, { Component } from 'react';\nimport { TouchableOpacity, StyleSheet, Text, View } from 'react-native';\nimport { AuthSession } from 'expo';\nimport { FontAwesome } from '@expo/vector-icons';\n```", "```jsx\nconst CLIENT_ID = Your-Spotify-App-Client-ID;\n```", "```jsx\nexport default class App extends React.Component {\n  state = {\n    userInfo: null,\n    didError: false\n  };\n\n  // Defined in following steps\n}\n```", "```jsx\n  handleSpotifyLogin = async () => {\n    let redirectUrl = AuthSession.getRedirectUrl();\n    let results = await AuthSession.startAsync({\n      authUrl:\n      `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}\n      &redirect_uri=${encodeURIComponent(redirectUrl)}\n      &scope=user-read-email&response_type=token`\n    });\n\n    // Defined in next step\n  };\n```", "```jsx\n  handleSpotifyLogin = async () => {\n\n    if (results.type !== 'success') {\n      this.setState({ didError: true });\n    } else {\n      const userInfo = await axios.get(`https://api.spotify.com/v1/me`, {\n        headers: {\n          \"Authorization\": `Bearer ${results.params.access_token}`\n        }\n      });\n      this.setState({ userInfo: userInfo.data });\n    }\n  };\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        <FontAwesome\n          name=\"spotify\"\n          color=\"#2FD566\"\n          size={128}\n        />\n        <TouchableOpacity\n          style={styles.button}\n          onPress={this.handleSpotifyLogin}\n          disabled={this.state.userInfo ? true : false}\n        >\n          <Text style={styles.buttonText}>\n            Login with Spotify\n          </Text>\n        </TouchableOpacity>\n        {this.state.didError ?\n          this.displayError() :\n          this.displayResults()\n        }\n      </View>\n    );\n  }\n```", "```jsx\n  displayError = () => {\n    return (\n      <View style={styles.userInfo}>\n        <Text style={styles.errorText}>\n          There was an error, please try again.\n        </Text>\n      </View>\n    );\n  }\n```", "```jsx\n  displayResults = () => {\n    { return this.state.userInfo ? (\n      <View style={styles.userInfo}>\n        <Image\n          style={styles.profileImage}\n          source={ {'uri': this.state.userInfo.images[0].url} }\n        />\n        <View>\n          <Text style={styles.userInfoText}>\n            Username:\n          </Text>\n          <Text style={styles.userInfoText}>\n            {this.state.userInfo.id}\n          </Text>\n          <Text style={styles.userInfoText}>\n            Email:\n          </Text>\n          <Text style={styles.userInfoText}>\n            {this.state.userInfo.email}\n          </Text>\n        </View>\n      </View>\n    ) : (\n      <View style={styles.userInfo}>\n        <Text style={styles.userInfoText}>\n          Login to Spotify to see user data.\n        </Text>\n      </View>\n    )}\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n container: {\n  flexDirection: 'column',\n  backgroundColor: '#000',\n  flex: 1,\n  alignItems: 'center',\n  justifyContent: 'space-evenly',\n },\n button: {\n  backgroundColor: '#2FD566',\n  padding: 20\n },\n buttonText: {\n  color: '#000',\n  fontSize: 20\n },\n userInfo: {\n  height: 250,\n  width: 200,\n  alignItems: 'center',\n },\n userInfoText: {\n  color: '#fff',\n  fontSize: 18\n },\n errorText: {\n  color: '#fff',\n  fontSize: 18\n },\n profileImage: {\n  height: 64,\n  width: 64,\n  marginBottom: 32\n }\n});\n```"]