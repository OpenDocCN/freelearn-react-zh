["```jsx\nimport React, { Component } from 'react';\nimport {\n  AppState,\n  StyleSheet,\n  Text,\n  View\n} from 'react-native';\n```", "```jsx\nexport default class App extends Component {\n  previousAppState = null;\n  currentAppState = 'active';\n  state = {\n    statusMessage: 'Welcome!'\n  }\n  // Defined on following steps\n}\n```", "```jsx\n  componentWillMount() {\n    AppState.addEventListener('change', this.handleAppStateChange);\n  }\n```", "```jsx\n  handleAppStateChange = (appState) => {\n    let statusMessage;\n\n    this.previousAppState = this.currentAppState;\n    this.currentAppState = appState;\n    switch(appState) {\n      case 'inactive':\n        statusMessage = \"Good Bye.\";\n        break;\n      case 'background':\n        statusMessage = \"App Is Hidden...\";\n        break;\n      case 'active':\n        statusMessage = 'Welcome Back!'\n        break;\n    }\n    this.setState({ statusMessage });\n  }\n```", "```jsx\n render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>\n          {this.state.statusMessage}\n        </Text>\n      </View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n  },\n  welcome: {\n    fontSize: 40,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n```", "```jsx\nnpm install react-native-button\n```", "```jsx\nyarn add react-native-button\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Clipboard,\n  TextInput\n} from 'react-native';\nimport Button from 'react-native-button';\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    clipboardContent: null\n  }\n  // Defined in following steps\n}\n```", "```jsx\n  copyToClipboard = () => {\n    const sourceText = this.refs.sourceText.props.children;\n    Clipboard.setString(sourceText);\n  }\n```", "```jsx\n  getClipboardContent = async () => {\n    const clipboardContent = await Clipboard.getString();\n    this.setState({\n      clipboardContent\n    });\n  }\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.instructions}>\n          Tap and Hold the next line to copy it to the Clipboard:\n        </Text>\n        <Text\n          ref=\"sourceText\"\n          onLongPress={this.copyToClipboard}\n        >\n          React Native Cookbook\n        </Text>\n        <Text style={styles.instructions}>\n          Input some text into the TextInput below and Cut/Copy as\n          you normally would:\n        </Text>\n        <TextInput style={styles.textInput} />\n\n        // Defined on next step\n      </View>\n    );\n  }\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        // Defined in previous step\n <View style={styles.row}>\n <Text style={styles.rowText}>\n Clipboard Contents:\n </Text>\n </View>\n <View style={styles.row}>\n <Text style={styles.content}>\n {this.state.clipboardContent}\n </Text>\n </View>\n <Button\n containerStyle={styles.buttonContainer}\n style={styles.buttonStyle}\n onPress={this.getClipboardContent}\n >\n Paste Clipboard\n </Button>\n      </View>\n    );\n  }\n```", "```jsx\nnpm install react-native-button react-native-touch-id --save\n```", "```jsx\nyarn add react-native-button react-native-touch-id\n```", "```jsx\nreact-native link\n```", "```jsx\n<uses-permission android:name=\"android.permission.USE_FINGERPRINT\" />\n```", "```jsx\n<key>NSFaceIDUsageDescription</key>\n<string>Enabling Face ID allows you quick and secure access to your account.</string>\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View\n} from 'react-native';\nimport Button from 'react-native-button';\nimport TouchID from 'react-native-touch-id';\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    authStatus: null\n  }\n  // Defined in following steps\n}\n```", "```jsx\n  authenticate = () => {\n    TouchID.authenticate('Access secret information!')\n      .then(this.handleAuthSuccess)\n      .catch(this.handleAuthFailure);\n  }\n```", "```jsx\n  handleAuthSuccess = () => {\n    this.setState({\n      authStatus : 'Authenticated'\n    });\n  }\n```", "```jsx\n  handleAuthFailure = () => {\n    this.setState({\n      authStatus : 'Not Authenticated'\n    });\n  }\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        <Button\n          containerStyle={styles.buttonContainer}\n          style={styles.button}\n          onPress={this.authenticate}>\n            Authenticate\n        </Button>\n        <Text style={styles.label}>Authentication Status</Text>\n        <Text style={styles.welcome}>{this.state.authStatus}</Text>\n      </View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  label: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n  buttonContainer: {\n    width: 150,\n    padding: 10,\n    margin: 5,\n    height: 40,\n    overflow: 'hidden',\n    backgroundColor: '#FF5722'\n  },\n  button: {\n    fontSize: 16,\n    color: 'white'\n  }\n});\n```", "```jsx\n#import \"AppDelegate.h\"\n\n#import <React/RCTBundleURLProvider.h>\n#import <React/RCTRootView.h>\n\n@implementation AppDelegate {\n UIImageView *imageView;\n}\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  NSURL *jsCodeLocation;\n\n  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n\n  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation\n                                                      moduleName:@\"HiddenContentApp\"\n                                               initialProperties:nil\n                                                   launchOptions:launchOptions];\n  rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n  UIViewController *rootViewController = [UIViewController new];\n  rootViewController.view = rootView;\n  self.window.rootViewController = rootViewController;\n  [self.window makeKeyAndVisible];\n  return YES;\n}\n\n- (void)applicationWillResignActive:(UIApplication *)application {\n imageView = [[UIImageView alloc] initWithFrame:[self.window frame]];\n [imageView setImage:[UIImage imageNamed:@\"hidden.jpg\"]];\n [self.window addSubview:imageView];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n if(imageView != nil) {\n [imageView removeFromSuperview];\n imageView = nil;\n }\n}\n\n@end\n```", "```jsx\npackage com.hiddencontentapp;\n\nimport com.facebook.react.ReactActivity;\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.modules.core.DeviceEventManagerModule;\n\npublic class MainActivity extends ReactActivity {\n\n  /**\n  * Returns the name of the main component registered from JavaScript.\n  * This is used to schedule rendering of the component.\n  */\n  @Override\n  protected String getMainComponentName() {\n    return \"HiddenContentApp\";\n  }\n\n @Override\n public void onWindowFocusChanged(boolean hasFocus) {\n super.onWindowFocusChanged(hasFocus);\n if (getReactNativeHost().getReactInstanceManager().getCurrentReactContext() != null) {\n WritableMap params = Arguments.createMap();\n params.putBoolean(\"appHasFocus\", hasFocus);\n\n getReactNativeHost().getReactInstanceManager()\n .getCurrentReactContext()\n .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)\n .emit(\"focusChange\", params);\n }\n }\n}\n```", "```jsx\nimport React, {Component} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  DeviceEventEmitter,\n  Image\n} from 'react-native';\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    showMask: null\n  }\n  // Defined in following steps\n}\n```", "```jsx\n  componentWillMount() {\n    this.subscription = DeviceEventEmitter.addListener(\n      'focusChange',\n      this.onFocusChange\n    );\n  }\n```", "```jsx\n  componentWillUnmount() {\n    this.subscription.remove();\n  }\n```", "```jsx\n  onFocusChange = (params) => {\n    this.setState({showMask: !params.appHasFocus})\n  }\n```", "```jsx\n  render() {\n    if(this.state.showMask) {\n      return (<Image source={require('./assets/hidden.jpg')} />);\n    }\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>Welcome to React Native!</Text>\n      </View>\n    );\n  }\n```", "```jsx\n     getReactNativeHost().getReactInstanceManager()\n       .getCurrentReactContext()\n       .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)\n       .emit(\"focusChange\", params);\n     }\n```", "```jsx\nnpm install react-native-button --save\n```", "```jsx\nyarn add react-native-button --save\n```", "```jsx\n#import <Foundation/Foundation.h>\n#import <dispatch/dispatch.h>\n#import \"RCTBridgeModule.h\"\n\n@interface BackgroundTaskManager : NSObject <RCTBridgeModule> {\n dispatch_queue_t backgroundQueue;\n}\n\n@end\n```", "```jsx\n#import \"BackgroundTaskManager.h\"\n#import \"RCTBridge.h\"\n#import \"RCTEventDispatcher.h\"\n\n@implementation BackgroundTaskManager\n\n@synthesize bridge = _bridge;\n\nRCT_EXPORT_MODULE();\n\nRCT_EXPORT_METHOD(loadInBackground) {\n backgroundQueue = dispatch_queue_create(\"com.moduscreate.bgqueue\", NULL);\n\n dispatch_async(backgroundQueue, ^{\n NSLog(@\"processing background\");\n [self.bridge.eventDispatcher sendAppEventWithName:@\"backgroundProgress\" body:@{@\"status\": @\"Loading\"}];\n [NSThread sleepForTimeInterval:5];\n NSLog(@\"slept\");\n dispatch_async(dispatch_get_main_queue(), ^{\n NSLog(@\"Done processing; main thread\");\n [self.bridge.eventDispatcher sendAppEventWithName:@\"backgroundProgress\" body:@{@\"status\": @\"Done\"}];\n });\n });\n}\n\n@end\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  NativeModules,\n  NativeAppEventEmitter\n} from 'react-native';\nimport Button from 'react-native-button'; \n\nconst BackgroundTaskManager = NativeModules.BackgroundTaskManager;\n```", "```jsx\n export default class App extends Component {\n  state = {\n    backgroundTaskStatus: 'Not Started',\n    counter: 0\n  }\n  // Defined in following steps\n}\n```", "```jsx\n  componentWillMount = () => {\n    this.subscription = NativeAppEventEmitter.addListener(\n      'backgroundProgress',\n      event => this.setState({ backgroundTaskStatus: event.status })\n    );\n  }\n```", "```jsx\n  componentWillUnmount = () => {\n    this.subscription.remove();\n  }\n```", "```jsx\n  runBackgroundTask = () => {\n    BackgroundTaskManager.loadInBackground();\n  }\n\n  increaseCounter = () => {\n    this.setState({\n      counter: this.state.counter + 1\n    });\n  }\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        <Button\n          containerStyle={styles.buttonContainer}\n          style={styles.buttonStyle}\n          onPress={this.runBackgroundTask}>\n            Run Task\n        </Button>\n        <Text style={styles.instructions}>\n          Background Task Status:\n        </Text>\n        <Text style={styles.welcome}>\n          {this.state.backgroundTaskStatus}\n        </Text>\n        <Text style={styles.instructions}>\n          Pressing \"Increase Conter\" button shows that the task is\n          not blocking the main thread\n        </Text>\n        <Button\n          containerStyle={[\n            styles.buttonContainer,\n            styles.altButtonContainer\n          ]}\n          style={styles.buttonStyle}\n          onPress={this.increaseCounter}\n        >\n            Increase Counter\n        </Button>\n        <Text style={styles.instructions}>\n          Current Count:\n        </Text>\n        <Text style={styles.welcome}>\n          {this.state.counter}\n        </Text>\n      </View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n    marginLeft: 20,\n    marginRight: 20\n  },\n  buttonContainer: {\n    width: 150,\n    padding: 10,\n    margin: 5,\n    height: 40,\n    overflow: 'hidden',\n    borderRadius: 4,\n    backgroundColor: '#FF5722'\n  },\n  altButtonContainer : {\n    backgroundColor : '#CDDC39',\n    marginTop : 30\n  },\n  buttonStyle: {\n    fontSize: 16,\n    color: 'white'\n  }\n});\n```", "```jsx\nnpm install react-native-button --save\n```", "```jsx\nyarn add react-native-button\n```", "```jsx\npackage com.multithreadingapp;   import android.os.AsyncTask;   import com.facebook.react.bridge.Arguments; import com.facebook.react.bridge.ReactApplicationContext; import com.facebook.react.bridge.ReactContextBaseJavaModule; import com.facebook.react.bridge.ReactMethod; import com.facebook.react.bridge.WritableMap; import com.facebook.react.modules.core.DeviceEventManagerModule;\n\npublic class BackgroundTaskManager extends ReactContextBaseJavaModule {\n  public BackgroundTaskManager(ReactApplicationContext reactApplicationContext) {\n    super(reactApplicationContext);\n  }\n\n  @Override\n  public String getName() {\n    return \"BackgroundTaskManager\";\n  }\n\n  // Defined in following steps\n}\n```", "```jsx\npublic class BackgroundTaskManager extends ReactContextBaseJavaModule {\n // Defined in previous step\n  @ReactMethod\n public void loadInBackground() {\n BackgroundLoadTask backgroundLoadTask = new BackgroundLoadTask();\n backgroundLoadTask.execute();\n }\n}\n```", "```jsx\npublic class BackgroundTaskManager extends ReactContextBaseJavaModule {\n  // Defined in steps above\n\n private void sendEvent(String eventName, WritableMap params) {\n getReactApplicationContext().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(eventName, params);\n }\n}\n```", "```jsx\npublic class BackgroundTaskManager extends ReactContextBaseJavaModule {\n  // Defined in above steps\n\n private class BackgroundLoadTask extends AsyncTask<String, String, String> {\n @Override\n protected String doInBackground(String... params) {\n publishProgress(\"Loading\");\n try {\n Thread.sleep(5000);\n } catch (Exception e) {\n e.printStackTrace();\n }\n return \"Done\";\n }\n\n @Override\n protected void onProgressUpdate(String... values) {\n WritableMap params = Arguments.createMap();\n params.putString(\"status\", \"Loading\");\n sendEvent(\"backgroundProgress\", params);\n }\n\n @Override\n protected void onPostExecute(String s) {\n WritableMap params = Arguments.createMap();\n params.putString(\"status\", \"Done\");\n sendEvent(\"backgroundProgress\", params);\n }\n }\n}\n```", "```jsx\nnpm install react-native-button --save\n```", "```jsx\nyarn add react-native-button\n```", "```jsx\n#import <Foundation/Foundation.h>\n#import <MediaPlayer/MediaPlayer.h>\n\n#import <React/RCTBridgeModule.h>\n#import <React/RCTEventDispatcher.h>\n\n@interface MediaManager : NSObject<RCTBridgeModule, MPMediaPickerControllerDelegate>\n\n@property (nonatomic, retain) MPMediaPickerController *mediaPicker;\n@property (nonatomic, retain) MPMusicPlayerController *musicPlayer;\n\n@end\n```", "```jsx\n#import \"MediaManager.h\"\n#import \"AppDelegate.h\"\n\n@implementation MediaManager\nRCT_EXPORT_MODULE();\n\n@synthesize bridge = _bridge;\n@synthesize musicPlayer;\n\n#pragma mark private-methods\n\n-(void)showMediaPicker {\n if(self.mediaPicker == nil) {\n self.mediaPicker = [[MPMediaPickerController alloc] initWithMediaTypes:MPMediaTypeAnyAudio];\n\n [self.mediaPicker setDelegate:self];\n [self.mediaPicker setAllowsPickingMultipleItems:NO];\n [self.mediaPicker setShowsCloudItems:NO];\n self.mediaPicker.prompt = @\"Select song\";\n }\n\n AppDelegate *delegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n\n [delegate.window.rootViewController presentViewController:self.mediaPicker animated:YES completion:nil];\n}\n\nvoid hideMediaPicker() {\n AppDelegate *delegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n [delegate.window.rootViewController dismissViewControllerAnimated:YES completion:nil];\n}\n\n// Defined on following steps\n\n@end\n```", "```jsx\n-(void) mediaPicker:(MPMediaPickerController *)mediaPicker didPickMediaItems:(MPMediaItemCollection *)mediaItemCollection {\n  MPMediaItem *mediaItem = mediaItemCollection.items[0];\n  NSURL *assetURL = [mediaItem valueForProperty:MPMediaItemPropertyAssetURL];\n\n  [self.bridge.eventDispatcher sendAppEventWithName:@\"SongPlaying\"\n                                               body:[mediaItem valueForProperty:MPMediaItemPropertyTitle]];\n\n  if(musicPlayer == nil) {\n    musicPlayer = [MPMusicPlayerController systemMusicPlayer];\n  }\n\n  [musicPlayer setQueueWithItemCollection:mediaItemCollection];\n  [musicPlayer play];\n\n  hideMediaPicker();\n}\n\n-(void) mediaPickerDidCancel:(MPMediaPickerController *)mediaPicker {\n  hideMediaPicker();\n}\n```", "```jsx\nRCT_EXPORT_MODULE(); \nRCT_EXPORT_METHOD(showSongs) { \n  [self showMediaPicker]; \n} \n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  NativeModules,\n  NativeAppEventEmitter\n} from 'react-native';\nimport Button from 'react-native-button';\nconst MediaManager = NativeModules.MediaManager;\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    currentSong: null\n  }\n\n  // Defined on following steps\n}\n```", "```jsx\n  componentWillMount() {\n    this.subscription = NativeAppEventEmitter.addListener(\n      'SongPlaying',\n      this.updateCurrentlyPlaying\n    );\n  }\n\n  componentWillUnmount = () => {\n    this.subscription.remove();\n  }\n```", "```jsx\n  updateCurrentlyPlaying = (currentSong) => {\n    this.setState({ currentSong });\n  }\n\n  showSongs() {\n    MediaManager.showSongs();\n  }\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        <Button\n          containerStyle={styles.buttonContainer}\n          style={styles.buttonStyle}\n          onPress={this.showSongs}>\n            Pick Song\n        </Button>\n        <Text style={styles.instructions}>Song Playing:</Text>\n        <Text style={styles.welcome}>{this.state.currentSong}</Text>\n      </View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n  buttonContainer: {\n    width: 150,\n    padding: 10,\n    margin: 5,\n    height: 40,\n    overflow: 'hidden',\n    borderRadius: 4,\n    backgroundColor: '#3B5998'\n  },\n  buttonStyle: {\n    fontSize: 16,\n    color: '#fff'\n  }\n});\n```", "```jsx\n $ npm install react-native-button --save\n```", "```jsx\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.media.AudioManager;\nimport android.media.MediaMetadataRetriever;\nimport android.media.MediaPlayer;\nimport android.net.Uri;\nimport android.provider.MediaStore;\n\nimport com.facebook.react.bridge.ActivityEventListener;\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.bridge.ReactContextBaseJavaModule;\nimport com.facebook.react.bridge.ReactMethod;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.modules.core.DeviceEventManagerModule;\n```", "```jsx\npublic class MediaManager extends ReactContextBaseJavaModule implements ActivityEventListener {\n  private MediaPlayer mediaPlayer = null;\n  private MediaMetadataRetriever mediaMetadataRetriever = null;\n\n  public MediaManager(ReactApplicationContext reactApplicationContext) {\n    super(reactApplicationContext);\n    reactApplicationContext.addActivityEventListener(this);\n  }\n\n  @Override\n  public String getName() {\n    return \"MediaManager\";\n  }\n\n  @Override\n  public void onCatalystInstanceDestroy() {\n    super.onCatalystInstanceDestroy();\n    mediaPlayer.stop();\n    mediaPlayer.release();\n    mediaPlayer = null;\n  }\n\n  @ReactMethod\n  public void showSongs() {\n    Activity activity = getCurrentActivity();\n    Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Audio.Media.EXTERNAL_CONTENT_URI);\n    activity.startActivityForResult(intent, 10);\n  }\n\n  @Override\n  public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {\n    if (data != null) {\n      playSong(data.getData());\n    }\n  }\n\n  @Override\n  public void onNewIntent(Intent intent) {\n  }\n\n  private void playSong(Uri uri) {\n    try {\n      if (mediaPlayer != null) {\n        mediaPlayer.stop();\n        mediaPlayer.reset();\n      } else {\n        mediaMetadataRetriever = new MediaMetadataRetriever();\n        mediaPlayer = new MediaPlayer();\n        mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\n      }\n\n      mediaPlayer.setDataSource(getReactApplicationContext(), uri);\n\n      mediaPlayer.prepare();\n      mediaPlayer.start();\n\n      mediaMetadataRetriever.setDataSource(getReactApplicationContext(), uri);\n      String artist = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ARTIST);\n      String songTitle = mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_TITLE);\n\n      WritableMap params = Arguments.createMap();\n      params.putString(\"songPlaying\", artist + \" - \" + songTitle);\n\n      getReactApplicationContext()\n        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)\n        .emit(\"SongPlaying\", params);\n    } catch (Exception ex) {\n      ex.printStackTrace();\n    }\n  }\n}\n```", "```jsx\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n          new MainReactPackage(),\n new MediaPackage()\n      );\n    }\n```", "```jsx\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.uimanager.ViewManager;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class MediaPackage implements ReactPackage {\n  @Override\n  public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {\n    return Collections.emptyList();\n  }\n\n  @Override\n  public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {\n    List<NativeModule> modules = new ArrayList<>();\n\n    modules.add(new MediaManager(reactContext));\n\n    return modules;\n  }\n}\n```"]