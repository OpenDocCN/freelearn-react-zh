- en: Deploying Your App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署您的应用程序
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Deploying development builds to an iOS device
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将开发构建部署到iOS设备
- en: Deploying development builds to an Android device
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将开发构建部署到Android设备
- en: Deploying test builds to HockeyApp
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将测试构建部署到HockeyApp
- en: Deploying iOS test builds to TestFlight
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将iOS测试构建部署到TestFlight
- en: Deploying production builds to the Apple App Store
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将生产构建部署到Apple应用商店
- en: Deploying production builds to the Google Play Store
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将生产构建部署到Google Play商店
- en: Deploying Over-The-Air updates
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署空中更新
- en: Optimizing React Native app size
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化React Native应用程序大小
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: If you're an independent developer, you're likely to go through a few different
    stages of development. The first stage will find you testing your app on your
    personal iOS or Android device. After exhausting this stage, you're probably going
    to want to share it with a select group of people to get user feedback. Eventually,
    you're going to reach a point where your app is ready to be released into the
    world via app stores. This chapter will walk through each one of these stages
    and cover pushing updates to your app, along with a few optimization tips.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是独立开发者，您可能会经历几个不同的开发阶段。第一阶段将使您在个人iOS或Android设备上测试您的应用程序。在耗尽这个阶段之后，您可能会想要与一小部分人分享它，以获得用户反馈。最终，您将达到一个可以通过应用商店发布应用程序的阶段。本章将逐个介绍这些阶段，并涵盖推送更新到您的应用程序以及一些优化技巧。
- en: Deploying development builds to an iOS device
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将开发构建部署到iOS设备
- en: During development, you'll likely spend much of your time testing your iOS app
    using the iOS Simulator that comes installed with Xcode. While the iOS Simulator
    is by far the best performing and closest method to running our application on
    an iOS device, it's still not the same as the real thing. The iOS Simulator uses
    the computer's CPU and GPU to render the simulated OS, so depending on your development
    machine, it may end up performing better (or worse) than the actual device.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，您可能会花费大部分时间使用Xcode安装的iOS模拟器测试您的iOS应用程序。虽然iOS模拟器是迄今为止性能最好且最接近在iOS设备上运行应用程序的方法，但它仍然不同于真实设备。iOS模拟器使用计算机的CPU和GPU来渲染模拟的操作系统，因此根据您的开发机器，它可能表现得比实际设备更好（或更差）。
- en: Thankfully, Expo's ability to test running code on an actual device comes one
    step closer to the real end product, but there are still differences between a
    final app and a development app running in Expo. And if you're building a pure
    React Native app, you won't have the luxury of using Expo to easily run the app
    on a device.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Expo能够在实际设备上测试运行代码，这让我们离真正的最终产品更近了一步，但最终应用程序和在Expo中运行的开发应用程序之间仍然存在差异。如果您正在构建纯React
    Native应用程序，您将无法像使用Expo那样轻松地在设备上运行应用程序。
- en: Either way, you'll eventually want to test the real app on a physical device
    so you can experience the actual UX and performance of the end product.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，您最终都希望在实际设备上测试真正的应用程序，以便体验最终产品的实际用户体验和性能。
- en: In this recipe, we will walk you through taking a React Native app and deploying
    it to an iPhone or iPad.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将指导您将React Native应用程序部署到iPhone或iPad。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll just need a new pure React Native app, which we''ll name `TestDeployApp`.
    You can create the app via the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要一个新的纯React Native应用程序，我们将其命名为`TestDeployApp`。您可以通过以下命令创建该应用程序：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Also, make sure your iOS device is connected to your development machine via
    USB.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请确保您的iOS设备通过USB连接到开发机器。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's first open the newly created React Native iOS project in Xcode. Open the
    Project Editor by selecting the root of the project in the left panel.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先在Xcode中打开新创建的React Native iOS项目。通过在左侧面板中选择项目的根目录来打开项目编辑器。
- en: 'Under the General tab of the Project Editor, select the iOS app in the TARGETS
    section on the left. Under the Signing section, select your Team, as follows:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目编辑器的“常规”选项卡下，在左侧的“目标”部分中选择iOS应用程序。在“签名”部分下，选择您的团队，如下所示：
- en: '![](assets/17f1f486-4562-4110-8a55-a7129058c416.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/17f1f486-4562-4110-8a55-a7129058c416.png)'
- en: Repeat this step for two each of the entries in the TARGETS list.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于“目标”列表中的每个条目，重复此步骤两次。
- en: 'Select your device in the destination selector, as follows:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目标选择器中选择您的设备，如下所示：
- en: '![](assets/b959d5eb-7689-4e8e-8475-3f6e9afcb951.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b959d5eb-7689-4e8e-8475-3f6e9afcb951.png)'
- en: To start running the app on your connected device, just press the Play button.
    You'll have to make sure your device is plugged in, unlocked, and trusted for
    it to show up in the devices list in Xcode. If this is the first time running
    an app you've developed on this device, you'll also need to adjust the settings
    to trust apps from your developer account. On the iOS device, this setting can
    be found in Settings | General | Device Management.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在连接的设备上开始运行应用程序，只需按下播放按钮。您必须确保您的设备已插入，已解锁，并且已信任，才能在Xcode的设备列表中显示出来。如果这是您在此设备上首次运行您开发的应用程序，您还需要调整设置以信任来自您的开发者帐户的应用程序。在iOS设备上，此设置可以在“设置”|“常规”|“设备管理”中找到。
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Deploying our development build to the device simply involves designating a
    Team, then running the app as you would for use on the Xcode simulator, but targeting
    the plugged in device instead. We use the localhost packager to create our bundle
    file. This file then gets saved locally on the device for the future. Note that,
    since this is a development build, the code is not yet as optimized as it will
    be in a final release. You will see a significant performance increase when moving
    to a production release.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的开发构建部署到设备上只涉及指定一个团队，然后像在Xcode模拟器上使用一样运行应用程序，但是将目标设备更改为已插入的设备。我们使用本地主机打包程序来创建我们的捆绑文件。然后将此文件保存在设备上以供将来使用。请注意，由于这是开发构建，因此代码尚未像在最终发布时那样进行优化。在转到生产版本时，您将看到显着的性能提升。
- en: Deploying development builds to an Android device
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将开发构建部署到Android设备
- en: While developing an Android application, you'll most often probably be running
    the app on an Android emulator. While convenient, an emulator will have poor performance
    when compared with a real Android device.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发Android应用程序时，您最有可能会在Android模拟器上运行应用程序。虽然方便，但与真实的Android设备相比，模拟器的性能较差。
- en: The best way to test an app is to use a physical Android device. This recipe
    will walk through deploying a React Native app to a physical Android device.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应用程序的最佳方法是使用实际的Android设备。本教程将介绍将React Native应用程序部署到实际的Android设备。
- en: Getting ready
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We''ll just need a new pure React Native app, which we''ll name `TestDeployApp`.
    You can create the app via this command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要一个新的纯React Native应用程序，我们将其命名为`TestDeployApp`。您可以通过以下命令创建该应用程序：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Also, make sure your iOS device is connected to your development machine via
    USB.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请确保您的iOS设备通过USB连接到开发计算机。
- en: How to do it...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's start by opening our React Native Android project in Android Studio.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先在Android Studio中打开我们的React Native Android项目。
- en: 'Next, press the run button, as follows:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照以下步骤按下运行按钮：
- en: '![](assets/7c3b453b-faae-4e88-9c3f-0c2b632fdd57.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7c3b453b-faae-4e88-9c3f-0c2b632fdd57.png)'
- en: 'Make sure the Choose a running device radio button is selected, and that your
    device is displayed in the list. Press OK to continue, as follows:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保选择“选择运行设备”单选按钮，并且您的设备显示在列表中。按OK继续，如下所示：
- en: '![](assets/e716a726-e91d-46c2-b09c-2cd2946e7c81.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e716a726-e91d-46c2-b09c-2cd2946e7c81.png)'
- en: There's more...
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The React Native packager should start when you run the application. If it
    doesn''t, you''ll have to manually start the packager. If you see an error screen
    with the message Could not get BatchedBridge, please make sure your bundle is
    packaged correctly or Could not connect to development server, you should be able
    to fix this by running the following command in the Terminal:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行应用程序时，React Native打包程序应该会启动。如果没有，您将需要手动启动打包程序。如果您看到一个带有消息“无法获取BatchedBridge”的错误屏幕，请确保您的捆绑包正确打包，或者“无法连接到开发服务器”，您应该能够通过在终端中运行以下命令来解决这个问题：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Much like Xcode, we can run our app by simply plugging in a real device, pressing
    Run, and selecting the device the app should run on. The only complication that
    might arise is setting up communication between the device and the development
    machine. These problems can often be solved with the command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 与Xcode类似，我们可以通过简单地插入一个真实的设备，按下运行，然后选择应用程序应该运行的设备来运行我们的应用程序。可能出现的唯一复杂情况是设置设备和开发机之间的通信。这些问题通常可以通过以下命令解决：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This establishes a port forward from the device to the host computer. This is
    a development build, and the code is not yet optimized, so there will be a performance
    increase once the app is built as a production release.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从设备到主机计算机建立一个端口转发。这是一个开发版本，代码还没有优化，所以一旦应用程序作为生产版本构建，性能将会提高。
- en: Deploying test builds to HockeyApp
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将测试版本部署到HockeyApp
- en: 'Before releasing an app into the wild, it''s important to stress test your
    app and to get user feedback when possible. To accomplish this, you need to create
    a signed build of your app that you can share with a group of test users. For
    a robust test build, you''ll need two things: analytics/reporting on app performance,
    and a mechanism for delivery. HockeyApp provides this and more for your test builds
    on both iOS and Android. While both of the official platforms for releasing applications
    to the Apple App Store and Google Play Store provide functionality for testing
    and analytics, HockeyApp provides a unified place for handling these concerns,
    and a secondary source of metrics, crash reporting, and more.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在将应用程序发布到市场之前，重要的是对应用程序进行压力测试，并在可能的情况下获得用户反馈。为了实现这一点，您需要创建一个签名的应用程序构建，可以与一组测试用户共享。对于一个强大的测试构建，您需要两样东西：应用程序性能的分析/报告，以及交付的机制。HockeyApp为iOS和Android上的测试构建提供了这些以及更多功能。虽然苹果应用商店和谷歌Play商店的官方平台都提供了测试和分析功能，但HockeyApp提供了一个统一的处理这些问题的地方，以及度量、崩溃报告等的第二来源。
- en: It should be noted that HockeyApp was recently acquired by Microsoft. They have
    announced that the HockeyApp product will be discontinued in favor of Microsoft's
    App Center in November of 2019\. You can read more about it on the product transition
    page at [https://hockeyapp.net/transition](https://hockeyapp.net/transition). This
    recipe will walk through deploying a React Native app to HockeyApp for testing
    purposes. We will walk through both iOS and Android releases.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，HockeyApp最近被微软收购。他们宣布HockeyApp产品将在2019年11月停止，并转而使用微软的App Center。您可以在产品过渡页面上阅读更多信息[https://hockeyapp.net/transition](https://hockeyapp.net/transition)。本食谱将介绍如何将React
    Native应用程序部署到HockeyApp进行测试。我们将介绍iOS和Android版本的发布。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'For this recipe, we will be using the same empty, pure React Native app from
    the last two recipes, which we named `TestDeployApp`. For iOS deployments, you
    will need to be enrolled in the Apple Developer Program, and you''ll need to have
    `cocoapods` installed. The easiest way to install `cocoapods` is to use homebrew,
    via this command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们将使用上两个食谱中的相同的空的、纯净的React Native应用，我们将其命名为`TestDeployApp`。对于iOS部署，您需要加入苹果开发者计划，并且需要安装`cocoapods`。安装`cocoapods`的最简单方法是使用homebrew，通过以下命令：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You'll also need to have a HockeyApp account, which you can sign up for at their
    website at [https://hockeyapp.net/](https://hockeyapp.net/)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要拥有 HockeyApp 帐户，您可以在他们的网站 [https://hockeyapp.net/](https://hockeyapp.net/)
    上注册。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'First, we need to install the `react-native-hockeyapp` module in our application.
    Open the Terminal, go to your application''s root project directory, and enter
    the following command:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在我们的应用程序中安装 `react-native-hockeyapp` 模块。打开终端，转到应用程序的根项目目录，并输入以下命令：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Go into your `ios/` directory and initialize your Podfile:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入你的 `ios/` 目录并初始化你的 Podfile：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Open your Podfile and add `pod "HockeySDK"` to your target.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的 Podfile 并在你的目标中添加 `pod "HockeySDK"`。
- en: 'Back in the Terminal, install the Podfile, as follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到终端，按照以下步骤安装 Podfile：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s open up Xcode and open our React Native project: (`ios/TestDeployApp.xcodeproj`).'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们打开 Xcode 并打开我们的 React Native 项目：(`ios/TestDeployApp.xcodeproj`)。
- en: 'I recommend changing your Bundle Identifier to something more meaningful than
    the default, so please change it in your General Settings dialog, as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我建议将您的 Bundle 标识符更改为比默认值更有意义的内容，请在常规设置对话框中更改如下：
- en: '![](assets/dcb61823-96a7-4a23-9fae-8ec0ceb79d7c.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dcb61823-96a7-4a23-9fae-8ec0ceb79d7c.png)'
- en: 'Drag and drop `./ios/Pods/Pods.xcodeproj` into the Libraries group in your
    project navigator, as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `./ios/Pods/Pods.xcodeproj` 拖放到项目导航器中的 Libraries 组中，如下所示：
- en: '![](assets/a9faaea8-c68a-4626-85a4-a77f0bb0f697.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a9faaea8-c68a-4626-85a4-a77f0bb0f697.png)'
- en: Drag and drop the `RNHockeyApp.h` and `RNHockeyApp.m` files located in `./node_modules/react-native-hockeyapp/RNHockeyApp/RNHockeyApp` into
    the same Libraries group.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将位于 `./node_modules/react-native-hockeyapp/RNHockeyApp/RNHockeyApp` 的 `RNHockeyApp.h`
    和 `RNHockeyApp.m` 文件拖放到相同的 Libraries 组中。
- en: Next, we'll go to the HockeyApp site and create our app there. Log in and click
    the New App.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将转到 HockeyApp 网站并在那里创建我们的应用程序。登录并点击新应用。
- en: Since we do not have our build ready yet, click manually in the phrase Don't
    want to upload a build? Create the app manually instead in the following modal.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们的构建还没有准备好，所以在下一个模态中点击手动，而不是上传构建？创建应用程序。
- en: 'When filling out the fields in the Create App form, be sure to match the Title
    and Bundle Identifier that we defined earlier in *step 6,* then press Save, as
    follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建应用程序表单中填写字段时，请确保与我们在 *步骤 6* 中定义的标题和 Bundle 标识符匹配，然后点击保存，如下所示：
- en: '![](assets/7c49595c-2cde-4474-9626-6ed48f719a08.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7c49595c-2cde-4474-9626-6ed48f719a08.png)'
- en: Make a note of the App ID since we'll be using it in the next step.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记下应用程序 ID，因为我们将在下一步中使用它。
- en: 'Open `App.js` and add the following code:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `App.js` 并添加以下代码：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Back in Xcode, set Generic iOS Device as your destination target and build
    (Product | Build) the app, as follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到 Xcode，将通用 iOS 设备设置为目标目标并构建（Product | Build）应用程序，如下所示：
- en: '![](assets/c8579b2c-6812-44fa-b86b-aa9288275ef3.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c8579b2c-6812-44fa-b86b-aa9288275ef3.png)'
- en: Now, we need to create our `.ipa` file. This can be done from the Xcode menu
    via Product | Archive.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要创建我们的 `.ipa` 文件。这可以通过 Xcode 菜单中的 Product | Archive 完成。
- en: This will open the Archives list. Press the Distribute App button to start the
    process of creating the `.ipa`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开归档列表。点击分发应用程序按钮开始创建 `.ipa` 的过程。
- en: Select the Development option and press Next.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择开发选项并点击下一步。
- en: Your provisioning team should automatically be selected. With the correct Team
    selected, press Next.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的配置团队应该会自动选择。选择正确的团队后，点击下一步。
- en: Leave the default Export settings and press Next. On the summary page, also
    press Next.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留默认的导出设置并点击下一步。在摘要页面上，也点击下一步。
- en: Select the destination directory and press Export.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择目标目录并点击导出。
- en: Back in the *HockeyApp* browser window, click Add Version.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到 *HockeyApp* 浏览器窗口，点击添加版本。
- en: Drag the `.ipa` file we just exported into the modal window.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将刚刚导出的`.ipa`文件拖放到模态窗口中。
- en: We can leave the settings here set to their defaults, so continue pressing Next until
    the last modal screen, then press Done at the summary screen. That's it for the
    iOS app. You can add users to your *HockeyApp* app, and your testers should then
    be able to download your app. Let's switch over to the Android side of things.
    Open Android Studio, then open the Android folder in our React Native.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以将设置保留为默认设置，所以继续按下一步，直到最后一个模态屏幕，然后在摘要屏幕上按下完成。这就是iOS应用的全部内容。您可以向*HockeyApp*应用添加用户，然后您的测试人员应该能够下载您的应用。让我们转到Android端。打开Android
    Studio，然后打开React Native中的Android文件夹。
- en: 'Repeat *step 8* to *step 11*, changing the Platform to Android, as follows:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤8*到*步骤11*，将平台更改为Android，如下所示：
- en: '![](assets/dc9b38e8-c6ac-4821-8f03-b3dfe396616b.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dc9b38e8-c6ac-4821-8f03-b3dfe396616b.png)'
- en: 'Now, we need to build our `.apk` file. You can find the most up-to-date method
    for building the `.apk` in the React Native documentation, located at:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要构建我们的`.apk`文件。您可以在React Native文档中找到构建`.apk`的最新方法，位于：
- en: '[https://facebook.github.io/react-native/docs/signed-apk-android.html](https://facebook.github.io/react-native/docs/signed-apk-android.html)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/react-native/docs/signed-apk-android.html](https://facebook.github.io/react-native/docs/signed-apk-android.html)'
- en: Repeat *step **21* and *step* *22* for the `.apk` generated from our Android
    project.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复从我们的Android项目生成的`.apk`的*步骤21*和*步骤22*。
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'For this recipe, we used *HockeyApp* for its two main features: its beta distribution
    and its HockeySDK (which supports crash reporting, metrics, feedback, authentication,
    and notifications for updates). For iOS, beta distribution is done through the
    OTA enterprise distribution mechanism hosted by *HockeyApp*. When you sign your
    app, you control which devices can open it. *HockeyApp* just sends notifications
    and provides the URL for beta testers to download your app through its enterprise
    app store. Android is simpler since there is no need to worry about how apps are
    transferred. This means *HockeyApp* hosts the `.apk` file on a web server that
    testers can download and install.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们使用*HockeyApp*的两个主要功能：其beta分发和其HockeySDK（支持崩溃报告、指标、反馈、身份验证和更新通知）。对于iOS，beta分发是通过*HockeyApp*托管的OTA企业分发机制完成的。当您签署您的应用时，您可以控制哪些设备可以打开它。*HockeyApp*只是发送通知并提供URL供beta测试人员通过其企业应用商店下载您的应用。Android更简单，因为不需要担心应用是如何传输的。这意味着*HockeyApp*将`.apk`文件托管在测试人员可以下载和安装的Web服务器上。
- en: For more info on setting up *HockeyApp* on Android, you can read the official
    documentation at [https://support.hockeyapp.net/kb/client-integration-android/hockeyapp-for-android-sdk](https://support.hockeyapp.net/kb/client-integration-android/hockeyapp-for-android-sdk).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在Android上设置*HockeyApp*的更多信息，您可以阅读官方文档[https://support.hockeyapp.net/kb/client-integration-android/hockeyapp-for-android-sdk](https://support.hockeyapp.net/kb/client-integration-android/hockeyapp-for-android-sdk)。
- en: Deploying iOS test builds to TestFlight
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将iOS测试构建部署到TestFlight
- en: 'Before *HockeyApp* came along, the most popular service for beta testing mobile
    apps was TestFlight. In fact, it was so good at doing just that, that Apple purchased
    its parent company and integrated it into iTunes Connect. TestFlight now serves
    as the official app testing platform for Apple. There are a few differences between
    TestFlight and *HockeyApp* to consider. First and foremost, TestFlight became
    iOS only when it was purchased by Apple. Second, there are two styles of testing
    in TestFlight: internal and external. **Internal testing** involves sharing the
    application with Developer or Admin role members of your team, and limits distribution
    to 25 testers across 10 devices each. **External testing** allows you to invite
    up to 2,000 testers who do not have to be members of your organization. This also
    means that these testers do not use up your device quota. External testing applications
    go through the **Beta App Review** performed by Apple, which is not quite as rigorous
    as Apple''s review for releasing an app to the App Store, but it is a good first
    pass.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在*HockeyApp*出现之前，用于测试移动应用程序的最流行的服务是TestFlight。事实上，它在这方面做得非常好，以至于苹果收购了其母公司并将其整合到了iTunes
    Connect中。TestFlight现在作为苹果的官方应用程序测试平台。TestFlight和*HockeyApp*之间有一些区别需要考虑。首先，TestFlight在被苹果收购后变成了仅适用于iOS。其次，在TestFlight中有两种测试样式：内部和外部。**内部测试**涉及与团队的开发人员或管理员角色成员共享应用程序，并将分发限制为每个设备10个设备上的25个测试人员。**外部测试**允许您邀请最多2,000名不必是您组织成员的测试人员。这也意味着这些测试人员不会使用您的设备配额。外部测试应用程序需要经过苹果进行的**Beta
    App Review**，这并不像苹果对将应用程序发布到App Store的审查那样严格，但这是一个很好的第一步。
- en: This recipe focuses on taking our React Native app and deploying a test build
    to TestFlight. We will be setting up an internal test, since we do not want Apple
    reviewing our example React Native app, but the procedure is the same for both
    internal and external testing.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱侧重于将我们的React Native应用程序部署到TestFlight进行测试构建。我们将设置一个内部测试，因为我们不希望苹果审查我们的示例React
    Native应用程序，但是内部和外部测试的程序是相同的。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will be using the same boilerplate React Native app from
    previous recipes, which we've named `TestDeployApp`. You will also need to be
    enrolled in the Apple Developer Program, you'll need to have your development
    and distribution certificates set up in Xcode, and your app will need to have
    its AppIcon set.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们将使用之前食谱中的相同的React Native应用程序模板，我们将其命名为`TestDeployApp`。您还需要加入苹果开发者计划，需要在Xcode中设置开发和分发证书，并且您的应用程序需要设置其AppIcon。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: Let's start by opening our project in Xcode via the `ios/TestDeployApp.xcodeproj`
    file.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先通过`ios/TestDeployApp.xcodeproj`文件在Xcode中打开我们的项目。
- en: 'As stated in the last recipe, I also recommend changing your Bundle Identifier
    to something more meaningful than the default, for example:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如上一篇食谱中所述，我还建议将您的Bundle Identifier更改为比默认值更有意义的内容，例如：
- en: '![](assets/6fc38221-6cfa-4128-94c1-667c5811eab1.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6fc38221-6cfa-4128-94c1-667c5811eab1.png)'
- en: Next, let's log in to the Apple Developer Program and navigate to the App ID
    registration page, located at [https//:developer.apple.com/account/ios/identifier/bundle](https://developer.apple.com/account/ios/identifier/bundle).
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们登录到苹果开发者计划，并转到位于[https//:developer.apple.com/account/ios/identifier/bundle](https://developer.apple.com/account/ios/identifier/bundle)的App
    ID注册页面。
- en: Here, fill out the Name and Bundle ID for your project, then press the Continue
    button, followed by the Register button, and finally the Done button to complete
    registration of the app.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，填写项目的名称和Bundle ID，然后按下“继续”按钮，接着按“注册”按钮，最后按“完成”按钮完成应用程序的注册。
- en: Next, we'll log in to the iTunes Connect site, located at [https://itunesconnect.apple.com](https://itunesconnect.apple.com).
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将登录到位于[https://itunesconnect.apple.com](https://itunesconnect.apple.com)的iTunes
    Connect网站。
- en: In iTunes Connect, navigate to My Apps, then press the Plus (+) button and select
    New App to add a new app.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在iTunes Connect中，导航到“我的应用程序”，然后按“加号（+）”按钮并选择“新应用程序”以添加新应用程序。
- en: In the New App dialog, fill out the Name and Language. Select the Bundle ID
    to match the one you created previously, and add a unique app reference in the
    SKU field, then press Create.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新应用程序对话框中，填写名称和语言。选择与之前创建的Bundle ID匹配的Bundle ID，并在SKU字段中添加一个唯一的应用程序引用，然后按“创建”。
- en: Next, navigate to the TestFlight section for your app and be sure to fill out
    the Localizable Information section.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，导航到您的应用程序的TestFlight部分，并确保填写本地化信息部分。
- en: Let's return to Xcode to create the `.ipa` file. Select Generic iOS Device for
    the active scheme, then create the file via the Xcode menu (Product | Archive).
    This will open the Archives list, where you can press the Upload to App Store
    button to upload the app.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们返回Xcode创建`.ipa`文件。选择通用iOS设备作为活动方案，然后通过Xcode菜单（产品|存档）创建文件。这将打开存档列表，您可以按“上传到App
    Store”按钮上传应用程序。
- en: Your provisioning team should automatically be selected. Be sure the correct
    team is selected and press Choose. Once the archive is created, press the Upload
    button.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的配置团队应该自动选择。确保选择正确的团队，然后按“选择”。创建存档后，按“上传”按钮。
- en: After uploading the app, you'll need to wait until you receive an email from
    iTunes Connect informing you that the build has completed processing. Once processing
    is complete, you can return to the iTunes Connect page and open the Internal Testing
    view.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传应用程序后，您需要等待直到收到来自iTunes Connect的电子邮件，通知您构建已完成处理。处理完成后，您可以返回iTunes Connect页面并打开内部测试视图。
- en: In the Internal Testing section, click Select Version to Test and select your
    build, then click the Next button. At the Export Compliance screen, press OK.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内部测试部分，单击“选择要测试的版本”，然后选择您的构建，然后单击“下一步”按钮。在“导出合规性”屏幕上，按“确定”。
- en: We're ready to add internal testers. Select the users you would like to test
    the app, then click the Start Testing button and confirm your selection in the
    following modal. Your users should now get an invitation email to test your app!
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们准备添加内部测试人员。选择您想要测试该应用程序的用户，然后单击“开始测试”按钮，并在随后的模态中确认您的选择。您的用户现在应该收到邀请邮件来测试您的应用程序！
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: TestFlight serves as a first-class citizen in the App Store publishing pipeline.
    Apple has integrated its support for application beta testing distribution directly
    into iTunes Connect, creating a smooth and seamless process for developers. This
    procedure is largely the same as deploying to the App Store, except that when
    using iTunes Connect, you must enable and configure testing.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: TestFlight在App Store发布流程中扮演着一流的角色。苹果已经将其支持应用程序测试分发的支持直接集成到iTunes Connect中，为开发人员创建了一个流畅无缝的流程。这个过程与部署到App
    Store基本相同，只是在使用iTunes Connect时，您必须启用和配置测试。
- en: It is a seamless experience for the tester as well. As soon as you add test
    users in iTunes Connect, they are notified to install the TestFlight app, where
    they will have easy access to the apps they can test. TestFlight also makes the
    process easier for developers by not requiring them to add any extra third-party
    libraries or code to support TestFlight, as would be needed with *HockeyApp*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试人员来说，这也是一个无缝的体验。一旦您在iTunes Connect中添加了测试用户，他们将收到安装TestFlight应用程序的通知，从而可以轻松访问他们可以测试的应用程序。TestFlight还通过不需要开发人员添加任何额外的第三方库或代码来支持TestFlight，使开发人员的流程更加简单，而这在使用*HockeyApp*时是必需的。
- en: Deploying production builds to the Apple App Store
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将生产版本部署到苹果应用商店
- en: 'Once you''ve thoroughly tested your app, you''re ready to move on to the next
    (and likely the most exciting) step in the iOS app making process: releasing to
    the Apple App Store.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您彻底测试了您的应用程序，您就可以继续进行下一个（可能也是最激动人心的）步骤：发布到Apple应用商店。
- en: This recipe will walk through the process of preparing your production build
    and submitting it to the Apple App Store. We won't actually be submitting the
    app to the store, since we're working with an example app instead of a production-ready
    one. The last few steps in the process, however, are very straightforward.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤将指导您准备生产版本并将其提交到Apple应用商店。我们实际上不会将应用提交到商店，因为我们使用的是示例应用而不是生产就绪的应用。然而，流程的最后几个步骤非常简单。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will again be using the simple React Native example app
    from earlier recipes, `TestDeployApp`. You'll of course also need to be enrolled
    in the Apple Developer Program, and have your development and distribution certificates
    set up in Xcode as discussed earlier in this chapter. For a real production app
    deployment, you will also need to have both the AppIcon set and screenshots of
    the app ready for use in iTunes.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们将再次使用之前的示例应用程序`TestDeployApp`。当然，您还需要加入苹果开发者计划，并在Xcode中设置开发和分发证书，就像本章前面讨论的那样。对于真正的生产应用程序部署，您还需要设置AppIcon并准备用于iTunes的应用程序截图。
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's start by opening up Xcode using the `ios/TestDeployApp.xcodeproj` file.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从使用`ios/TestDeployApp.xcodeproj`文件打开Xcode开始。
- en: As stated before, it's recommended that you change your Bundle Identifier to
    something more meaningful than the default, so be sure to change it in the General
    Settings dialog.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，建议您将Bundle Identifier更改为比默认值更有意义的内容，因此请务必在“常规设置”对话框中更改它。
- en: 'It''s also a good idea to test your app in Production Mode on your device.
    This can be done by changing your app scheme''s Build Configuration (found via
    the Product | Scheme | Edit Scheme menus) to Release, as follows:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上以生产模式测试应用程序也是一个好主意。这可以通过将应用程序方案的构建配置（通过“产品”|“方案”|“编辑方案”菜单找到）更改为Release来完成，如下所示：
- en: '![](assets/af39d72a-9c2b-48f2-a5c4-9b56602d1a30.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/af39d72a-9c2b-48f2-a5c4-9b56602d1a30.png)'
- en: 'Next, you''ll need to register the app on the App ID registration page, located
    at:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要在App ID注册页面上注册应用，该页面位于：
- en: '[https://developer.apple.com/account/ios/identifier/bundle](https://developer.apple.com/account/ios/identifier/bundle)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/account/ios/identifier/bundle](https://developer.apple.com/account/ios/identifier/bundle)'
- en: This step requires an active Apple Developer Program account.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步需要一个活跃的苹果开发者计划账户。
- en: Fill out the Name and Bundle ID fields for your project and press the Continue
    button.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写项目的名称和Bundle ID字段，然后按Continue按钮。
- en: Next, we'll log in to the iTunes Connect site, located at [https://itunesconnect.apple.com](https://itunesconnect.apple.com).
    In the My Apps section, press the Plus (+) button and select New App.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将登录到位于[https://itunesconnect.apple.com](https://itunesconnect.apple.com)的iTunes
    Connect网站。在“My Apps”部分，按加号(+)按钮，然后选择“新建应用”。
- en: You'll need to fill out the Name and Language in the following dialog, then
    select the Bundle ID matching the one you created earlier in the recipe. Also,
    add a unique app reference for the SKU and press the Create button.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要在以下对话框中填写名称和语言，然后选择与之前在步骤中创建的Bundle ID相匹配的Bundle ID。此外，添加一个唯一的应用程序引用SKU，并按Create按钮。
- en: Let's return to Xcode and create the `.ipa` file. Select Generic iOS Device
    for the active scheme, and create the file via the menus (Product | Archive),
    which will open the Archives list. Finally, press Upload to App Store.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们返回Xcode并创建`.ipa`文件。选择Generic iOS Device作为活动方案，并通过菜单（产品|存档）创建文件，这将打开存档列表。最后，按“上传到App
    Store”。
- en: Select your Provisioning Team, then press Choose.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的配置团队，然后按“选择”。
- en: Once the archive has been created, press the Upload button. Once the build has
    been processed, you'll receive an email from iTunes Connect.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦存档创建完成，按“上传”按钮。一旦构建完成，您将收到来自iTunes Connect的电子邮件。
- en: Once the app is processed, return to iTunes Connect. Under the App Store section,
    open App Information and select the category that your app fits into.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序处理完毕后，返回到iTunes Connect。在App Store部分，打开App信息并选择您的应用所适合的类别。
- en: Open the 1.0 Prepare for Submission section under iOS APP. Fill out all the
    required fields, including App Screenshots, Description, Keywords, and Support
    URL.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在iOS APP下的1.0准备提交部分中打开。填写所有必填字段，包括应用程序截图、描述、关键字和支持URL。
- en: Next, under the Build section, select the `.ipa` we built in *step* 8.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在“构建”部分，选择我们在第8步中构建的`.ipa`。
- en: Finally, fill out the Copyright and App Review Information sections, then click
    the Submit for Review button.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，填写版权和应用程序审查信息部分，然后点击“提交审核”按钮。
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we covered the standard process for publishing iOS apps to the
    App Store. There are no React Native-specific steps we needed to follow in this
    case, since the final product (the `.ipa` file) contains all of the code needed
    to run the React Native packager, which will in turn build the `main.jsbundle`
    file in release mode.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们介绍了将iOS应用程序发布到App Store的标准流程。在这种情况下，我们不需要遵循任何React Native特定的步骤，因为最终产品（`.ipa`文件）包含了运行React
    Native打包程序所需的所有代码，这将进而以发布模式构建`main.jsbundle`文件。
- en: Deploying production builds to Google Play Store
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将生产版本部署到Google Play商店
- en: This recipe will walk through the process of preparing a production build of
    our app and submitting it to the Google Play Store. As in the last recipe, we'll
    stop right before actually submitting to the App Store, since this is only an
    example React Native app, but the rest of this process is also straightforward.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将介绍准备我们的应用程序的生产版本并将其提交到Google Play商店的过程。与上一个食谱一样，我们将在实际提交到App Store之前停下来，因为这只是一个示例React
    Native应用程序，但是这个过程的其余部分也很简单。
- en: Getting ready
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will be using the same simple React Native app we've used
    throughout this chapter, `TestDeployApp`. You will need to have a Google Play
    Developer account in order to submit an app to the store, and you'll also need
    to have all the icons and screenshots ready for the Play Store if you want to actually
    publish your app.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们将使用本章节中一直使用的相同简单的React Native应用程序`TestDeployApp`。您需要拥有Google Play开发者帐户才能将应用程序提交到商店，并且如果您想要实际发布应用程序，还需要准备好所有的图标和Play商店的截图。
- en: How to do it...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's start by opening the React Native project in Android Studio. The first
    step is building the `.apk` file. As mentioned earlier in this chapter, the process
    of creating a production Android app from a React Native project is involved and
    prone to change. Visit the React Native Documentation for creating the `.apk` at [https://facebook.github.io/react-native/docs/signed-apk-android.html](https://facebook.github.io/react-native/docs/signed-apk-android.html).
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从在Android Studio中打开React Native项目开始。第一步是构建`.apk`文件。正如本章前面提到的，从React Native项目创建生产Android应用程序的过程是复杂的，而且容易发生变化。访问React
    Native文档以获取有关创建`.apk`的信息：[https://facebook.github.io/react-native/docs/signed-apk-android.html](https://facebook.github.io/react-native/docs/signed-apk-android.html)。
- en: Next, let's open the Google Play Developer Console in a web browser, located
    at [https://play.google.com/apps/publish/](https://play.google.com/apps/publish/).
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们在Web浏览器中打开Google Play开发者控制台，网址是[https://play.google.com/apps/publish/](https://play.google.com/apps/publish/)。
- en: 'Let''s kick off the process by clicking Add new application. Fill out the Title field,
    and click the Upload APK button, as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过点击“添加新应用程序”来开始这个过程。填写标题字段，然后点击“上传APK”按钮，如下所示：
- en: '![](assets/2082ac1f-1326-45f1-bb3a-2ba990af147a.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2082ac1f-1326-45f1-bb3a-2ba990af147a.png)'
- en: You'll see the APK section of the Publish screen next. Click Upload your first
    APK to Production, then drag and drop (or select) your `.apk` file.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将看到发布屏幕的APK部分。点击“上传您的第一个APK到生产”，然后拖放（或选择）您的`.apk`文件。
- en: A series of self-explanatory modals will follow. Go through each of the categories
    in the side menu on the left (Store Listing, Content Rating, and so on). and fill
    out all of the information accordingly.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来将出现一系列不言自明的模态。浏览左侧侧边菜单中的每个类别（商店列表、内容评级等），并相应地填写所有信息。
- en: Once you have satisfied all the requirements, press the Publish App button.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦满足所有要求，点击“发布应用程序”按钮。
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we covered the process for publishing Android apps to the Google
    Play Store. By following the directions linked to in *step* 2, your React Native
    app will have been through the Gradle `assembleRelease` process. The `assemble`
    process runs the packager to create the JavaScript bundle file, compile the Java
    classes, package them together with the appropriate resources, and finally allow
    you to sign the app into an `.apk`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们介绍了将Android应用程序发布到Google Play商店的过程。通过按照*步骤*2中链接的说明，您的React Native应用程序将经历Gradle
    `assembleRelease`过程。`assemble`过程运行打包程序以创建JavaScript捆绑文件，编译Java类，将它们与适当的资源打包在一起，最后允许您将应用程序签名为`.apk`。
- en: Deploying Over-The-Air updates
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署Over-The-Air更新
- en: One useful side effect of our React Native app being written in JavaScript is
    that the code is loaded at runtime, which is similar to how Cordova hybrid applications
    work. We can leverage this functionality to push updates to our application using
    **Over-The-Air** (**OTA**). This allows for adding features and bug fixes without
    having to go through the App Store approval process. The only limitation to OTA
    updates for React Native is that we cannot push compiled (Objective-C or Java)
    code, which means the update code must be in the JavaScript layer only. There
    are a few popular services that provide cloud-based OTA app updates. We will be
    highlighting `CodePush`, a service by Microsoft.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的React Native应用程序以JavaScript编写的一个有用的副作用是，代码是在运行时加载的，这类似于Cordova混合应用程序的工作方式。我们可以利用这个功能来使用**OTA**（Over-The-Air）推送更新到我们的应用程序。这允许添加功能和修复错误，而无需经过应用商店的批准流程。对于React
    Native的OTA更新的唯一限制是，我们不能推送编译的（Objective-C或Java）代码，这意味着更新代码必须仅在JavaScript层中。有一些流行的服务提供基于云的OTA应用程序更新。我们将重点介绍微软的服务`CodePush`。
- en: This recipe will cover setting up and pushing updates using `CodePush` for our
    React Native app on both iOS and Android.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将涵盖在iOS和Android上为我们的React Native应用程序设置和推送更新使用`CodePush`。
- en: Getting ready
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will be using the same simple React Native app we've used
    throughout this chapter, `TestDeployApp`. We'll be deploying the apps to physical
    devices running in production/release mode, which will allow the app to receive
    updates from the CodePush servers.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们将使用相同的简单的React Native应用程序，我们在本章中一直在使用的`TestDeployApp`。我们将把应用程序部署到以生产/发布模式运行的物理设备上，这将允许应用程序从CodePush服务器接收更新。
- en: How to do it...
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In order to use CodePush, we will need to install the CodePush CLI and create
    a free account. This can be done in a Terminal by running the following two commands:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用CodePush，我们需要安装CodePush CLI并创建一个免费帐户。这可以通过在终端中运行以下两个命令来完成：
- en: '[PRE9]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next step is to register our app with CodePush. Make a note of the deployment
    keys for the app provided by the output from running `code-push register`. We
    will be using the **staging key** for this recipe. The documentation suggests
    adding one app per platform, with an `-IOS` or `-Android` suffix for each. To
    add the app to CodePush, use this command:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是向CodePush注册我们的应用程序。记下通过运行`code-push register`输出提供的应用程序的部署密钥。我们将在这个示例中使用**暂存密钥**。文档建议为每个平台添加一个应用程序，每个应用程序都带有`-IOS`或`-Android`后缀。要将应用程序添加到CodePush，请使用此命令：
- en: '[PRE10]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We''re also going to need the React Native CodePush module installed in the
    React Native project directory. This can be done with `npm`, as follows:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要在React Native项目目录中安装React Native CodePush模块。可以使用`npm`完成这个操作，如下所示：
- en: '[PRE11]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Or, with `yarn`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用`yarn`：
- en: '[PRE12]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The next step is linking the CodePush native modules with our project. When
    prompted for your deployment key for Android and iOS, use the staging key discussed
    in *step 2*. Linking the native modules can be done with the following command:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将CodePush本机模块与我们的项目进行链接。在提示输入Android和iOS的部署密钥时，请使用*步骤2*中讨论的暂存密钥。可以使用以下命令链接本机模块：
- en: '[PRE13]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we need to set our React Native app up to use CodePush. Inside of `index.js`,
    we''ll need to add three things: the CodePush import, an options object, and a
    call to the imported `codePush` module when registering the app via `AppRegistry.registerComponent`.
    Set up the app as follows:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置我们的React Native应用程序以使用CodePush。在`index.js`中，我们需要添加三个东西：CodePush导入，一个选项对象，以及在通过`AppRegistry.registerComponent`注册应用程序时调用导入的`codePush`模块。设置应用程序如下：
- en: '[PRE14]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To test out our changes in the iOS app, let''s deploy to our iOS device. Open
    the React Native project in Xcode, change your scheme''s Build Configuration (Product
    | Scheme | Edit Scheme...) to Release, then press Run, as follows:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试我们在iOS应用程序中的更改，让我们部署到我们的iOS设备。在Xcode中打开React Native项目，将方案的构建配置（产品|方案|编辑方案...）更改为Release，然后按照以下步骤运行：
- en: '![](assets/0b2c207c-df88-4ee7-9e38-3b1022ab7b51.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0b2c207c-df88-4ee7-9e38-3b1022ab7b51.png)'
- en: 'Next, make some sort of arbitrary change to the React Native code in the app,
    then in the Terminal, run the following command to update the app with the new
    code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在应用程序中对React Native代码进行某种任意更改，然后在终端中运行以下命令以使用新代码更新应用程序：
- en: '[PRE15]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, close and reopen the app on your iOS device. You should see the following
    prompt:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在您的iOS设备上关闭并重新打开应用程序。您应该会看到以下提示：
- en: '![](assets/c759c174-a9f6-49de-b2b5-de304a017076.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c759c174-a9f6-49de-b2b5-de304a017076.png)'
- en: After continuing past the prompt, the app will update itself to the latest version!
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续通过提示后，应用程序将自动更新到最新版本！
- en: Let's also test the feature on Android. You'll need to have made your Android
    app into a `.apk` file by following the steps outlined in the React Native documentation
    at [https://facebook.github.io/react-native/docs/signed-apk-android.html](https://facebook.github.io/react-native/docs/signed-apk-android.html).
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们还在Android上测试一下这个功能。您需要按照React Native文档中[https://facebook.github.io/react-native/docs/signed-apk-android.html](https://facebook.github.io/react-native/docs/signed-apk-android.html)中概述的步骤将您的Android应用程序制作成`.apk`文件。
- en: 'With your Android device plugged into your development machine, run the following
    command in the Terminal from the `android/` directory:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Android设备连接到开发计算机后，在`android/`目录中运行以下命令：
- en: '[PRE16]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, make a change to the React Native JavaScript code. As long as new code
    is added, we can use that changed code to update the app. Then, run the following
    command in the Terminal:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，对React Native JavaScript代码进行更改。只要添加了新代码，我们就可以使用该更改的代码来更新应用程序。然后，在终端中运行以下命令：
- en: '[PRE17]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once again, close and reopen your app on your Android device to get the following
    prompt:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次在Android设备上关闭并重新打开应用程序，以获得以下提示：
- en: '![](assets/321c9e80-f6db-4c2a-8ad3-7dee57827d17.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/321c9e80-f6db-4c2a-8ad3-7dee57827d17.png)'
- en: After proceeding past the prompt, the app will update itself to the latest version.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续操作提示之后，应用程序将自行更新到最新版本。
- en: How it works...
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: CodePush (as well as other cloud-hosted OTA update platforms) works by using
    the same technique that has existed in React Native since its inception. React
    Native loads a JavaScript bundle when the app is initialized. During development,
    this bundle is loaded from `localhost:3000`. Once we've deployed an app, however,
    it will look for a file named `main.jsbundle` that has been included in the final
    product. By adding the call to `codePush` in `registerComponent` in *step 5*,
    the app will check in with the CodePush API to see if there is an update. If there
    is a new update, it will prompt the user about it. Accepting the prompt downloads
    the new `jsbundle` file and restarts the app, causing the code to be updated.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: CodePush（以及其他云托管的OTA更新平台）的工作原理与React Native自诞生以来一直存在的技术相同。当应用程序初始化时，React Native会加载一个JavaScript捆绑包。在开发过程中，此捆绑包从`localhost:3000`加载。然而，一旦我们部署了一个应用程序，它将寻找一个名为`main.jsbundle`的文件，该文件已包含在最终产品中。通过在*步骤5*中的`registerComponent`中添加对`codePush`的调用，应用程序将与CodePush
    API进行检查以查看是否有更新。如果有新的更新，它将提示用户。接受提示会下载新的`jsbundle`文件并重新启动应用程序，从而更新代码。
- en: Optimizing React Native app size
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化React Native应用程序大小
- en: Before deploying our app to production, it's always a good idea to shrink the
    app bundle size to as small a file as possible, and there are several techniques
    we can leverage to do so. These can involve supporting fewer devices or compressing
    included assets.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在将我们的应用程序部署到生产环境之前，将应用程序捆绑包的大小缩小到尽可能小的文件是一个很好的主意，我们可以利用几种技术来实现这一点。这可能涉及支持更少的设备或压缩包含的资产。
- en: This recipe will cover a few techniques for limiting production package file
    sizes in both iOS and Android React Native apps.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将涵盖一些限制iOS和Android React Native应用程序生产包文件大小的技术。
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will be using the same simple React Native app we've used
    throughout this chapter, `TestDeployApp`. You'll also need to have code signing
    working for iOS, and the ability to create `.apk` files as covered in previous
    recipes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用本章节中一直使用的相同简单的React Native应用程序，`TestDeployApp`。您还需要在iOS上使用代码签名，并且能够创建`.apk`文件，就像在之前的配方中介绍的那样。
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will start off with some simple optimizations performed on our bundled assets,
    which often includes images and external fonts:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从对我们捆绑的资产进行一些简单的优化开始，这通常包括图像和外部字体：
- en: For PNG and JPEG compression, you can use a service such as [http://www.tinypng.com](http://www.tinypng.com)
    to reduce the file size with little to no reduction in image quality.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于PNG和JPEG压缩，您可以使用诸如[http://www.tinypng.com](http://www.tinypng.com)之类的服务来减小文件大小，几乎不会降低图像质量。
- en: If you use the `react-native-vector-icons` library, you will notice that it
    bundles eight different font icon sets. It's recommended that you remove any of
    the icon font libraries that are not being used by your app.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用`react-native-vector-icons`库，您会注意到它捆绑了八种不同的字体图标集。建议您删除应用程序未使用的任何图标字体库。
- en: SVG files can also be compressed and optimized. One service for this purpose
    is [http://compressor.io](http://compressor.io).
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG文件也可以进行压缩和优化。用于此目的的一个服务是[http://compressor.io](http://compressor.io)。
- en: Any audio assets packaged with your app should be using a file format that can
    leverage high quality compression, such as MP3 or AAC.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包到您的应用程序中的任何音频资产应该使用可以利用高质量压缩的文件格式，例如MP3或AAC。
- en: For iOS, there's not much that can be done to further reduce file size beyond
    the settings that are enabled by default on the release scheme. These include
    enabling Bitcode for app thinning and setting the compiler optimization to Fastest,
    Smallest [-Os].
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于iOS，除了默认启用的发布方案设置外，几乎没有什么可以进一步减小文件大小的方法。这些设置包括为应用瘦身启用Bitcode和将编译器优化设置为Fastest,
    Smallest [-Os]。
- en: 'For Android, there are two things you can do that could improve file size:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Android，有两件事情可以改善文件大小：
- en: 'In Android Studio, open `android/app/build.gradle` and locate the following
    lines, then update their values to the following:'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android Studio中，打开`android/app/build.gradle`文件，找到以下行，然后将它们的值更新为以下内容：
- en: '[PRE18]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you plan to only target ARM-based Android devices, we can prevent it from
    building for x86 altogether. In the `build.gradle` file, locate the `splits abi`
    object and add the following line to not include x86 support:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您只打算针对基于ARM架构的Android设备，我们可以完全阻止其构建x86支持。在`build.gradle`文件中，找到`splits abi`对象，并添加以下行以不包括x86支持：
- en: '[PRE19]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can read more about ABI management in the Android docs at:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Android文档中阅读有关ABI管理的更多信息：
- en: '[https://developer.android.com/ndk/guides/abis](https://developer.android.com/ndk/guides/abis)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/ndk/guides/abis](https://developer.android.com/ndk/guides/abis)'
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we covered techniques that can be used to reduce app file size.
    The smaller the JavaScript bundle is, the faster the JavaScript interpreter will
    be able to parse the code, translating into faster app load times, and quicker
    OTA updates. The smaller we can keep our `.ipa` and `.apk` files, the faster our
    users will be able to download the app.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们介绍了可以用来减小应用文件大小的技术。JavaScript捆绑包越小，JavaScript解释器就能更快地解析代码，从而实现更快的应用加载时间和更快的OTA更新。我们能够保持`.ipa`和`.apk`文件越小，用户就能越快地下载应用。
