["```jsx\nimport React, { Component } from 'react';\nimport {\n  Alert,\n  AsyncStorage,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from 'react-native';\n```", "```jsx\nconst key = '@MyApp:key';\n\nexport default class App extends Component {\n  state = {\n    text: '',\n    storedValue: '',\n  };\n  //Defined in later steps\n}\n```", "```jsx\n  componentWillMount() {\n    this.onLoad();\n  }\n```", "```jsx\n  onLoad = async () => {\n    try {\n      const storedValue = await AsyncStorage.getItem(key);\n      this.setState({ storedValue });\n    } catch (error) {\n      Alert.alert('Error', 'There was an error while loading the \n      data');\n    }\n  }\n```", "```jsx\n  onSave = async () => {\n    const { text } = this.state;\n\n    try {\n      await AsyncStorage.setItem(key, text);\n      Alert.alert('Saved', 'Successfully saved on device');\n    } catch (error) {\n      Alert.alert('Error', 'There was an error while saving the\n      data');\n    }\n  }\n```", "```jsx\n        onChange = (text) => { \n          this.setState({ text }); \n        }  \n```", "```jsx\n  render() {\n    const { storedValue, text } = this.state;\n\n    return (\n      <View style={styles.container}>\n        <Text style={styles.preview}>{storedValue}</Text>\n        <View>\n          <TextInput\n            style={styles.input}\n            onChangeText={this.onChange}\n            value={text}\n            placeholder=\"Type something here...\"\n          />\n          <TouchableOpacity onPress={this.onSave} style=\n          {styles.button}>\n            <Text>Save locally</Text>\n          </TouchableOpacity>\n          <TouchableOpacity onPress={this.onLoad} style=\n          {styles.button}>\n            <Text>Load data</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n  },\n  preview: {\n    backgroundColor: '#bdc3c7',\n    width: 300,\n    height: 80,\n    padding: 10,\n    borderRadius: 5,\n    color: '#333',\n    marginBottom: 50,\n  },\n  input: {\n    backgroundColor: '#ecf0f1',\n    borderRadius: 3,\n    width: 300,\n    height: 40,\n    padding: 5,\n  },\n  button: {\n    backgroundColor: '#f39c12',\n    padding: 10,\n    borderRadius: 3,\n    marginTop: 10,\n  },\n});\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View\n} from 'react-native';\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    results: '',\n  };\n  // Defined later\n}\n\nconst styles = StyleSheet.create({\n  // Defined later\n});\n```", "```jsx\n  onLoad = async () => {\n    this.setState({ results: 'Loading, please wait...' });\n    const response = await fetch('http://jsonplaceholder.typicode.com/users', {\n      method: 'GET',\n    });\n    const results = await response.text();\n    this.setState({ results });\n  }\n```", "```jsx\n  render() {\n    const { results } = this.state;\n\n    return (\n      <View style={styles.container}>\n        <View>\n          <TextInput\n            style={styles.preview}\n            value={results}\n            placeholder=\"Results...\"\n            editable={false}\n            multiline\n          />\n          <TouchableOpacity onPress={this.onLoad} style=\n          {styles.btn}>\n            <Text>Load data</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n  },\n  preview: {\n    backgroundColor: '#bdc3c7',\n    width: 300,\n    height: 400,\n    padding: 10,\n    borderRadius: 5,\n    color: '#333',\n    marginBottom: 50,\n  },\n  btn: {\n    backgroundColor: '#3498db',\n    padding: 10,\n    borderRadius: 3,\n    marginTop: 10,\n  },\n});\n```", "```jsx\nyarn add axios\n```", "```jsx\nnpm install axios --save\n```", "```jsx\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport {\n  Alert,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  SafeAreaView,\n} from 'react-native';\n```", "```jsx\nconst endpoint = 'http://jsonplaceholder.typicode.com/posts';\n\nexport default class App extends Component {\n  state = {\n    results: '',\n    title: '',\n    body: '',\n  };\n\n  const styles = StyleSheet.create({ \n    // Defined later \n  }); \n}\n```", "```jsx\n  onLoad = async () => {\n    this.setState({ results: 'Loading, please wait...' });\n    const response = await axios.get(endpoint);\n    const results = JSON.stringify(response);\n    this.setState({ results });\n  }\n```", "```jsx\n  onSave = async () => {\n    const { title, body } = this.state;\n    try {\n      const response = await axios.post(endpoint, {\n        headers: {\n          'Content-Type': 'application/json;charset=UTF-8',\n        },\n        params: {\n          userId: 1,\n          title,\n          body\n        }\n      });\n      const results = JSON.stringify(response);\n      Alert.alert('Success', 'Post successfully saved');\n      this.onLoad();\n    } catch (error) {\n      Alert.alert('Error', `There was an error while saving the \n      post: ${error}`);\n    }\n  }\n```", "```jsx\n  onTitleChange = (title) => this.setState({ title });\n  onPostChange = (body) => this.setState({ body });\n```", "```jsx\n  render() {\n    const { results, title, body } = this.state;\n\n    return (\n      <SafeAreaView style={styles.container}>\n        <Text style={styles.toolbar}>Add a new post</Text>\n        <ScrollView style={styles.content}>\n          <TextInput\n            style={styles.input}\n            onChangeText={this.onTitleChange}\n            value={title}\n            placeholder=\"Title\"\n          />\n          <TextInput\n            style={styles.input}\n            onChangeText={this.onPostChange}\n            value={body}\n            placeholder=\"Post body...\"\n          />\n          <TouchableOpacity onPress={this.onSave} style=\n          {styles.button}>\n            <Text>Save</Text>\n          </TouchableOpacity>\n          <TextInput\n            style={styles.preview}\n            value={results}\n            placeholder=\"Results...\"\n            editable={false}\n            multiline\n          />\n        </ScrollView>\n      </SafeAreaView>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n container: {\n  flex: 1,\n  backgroundColor: '#fff',\n },\n toolbar: {\n  backgroundColor: '#3498db',\n  color: '#fff',\n  textAlign: 'center',\n  padding: 25,\n  fontSize: 20,\n },\n content: {\n  flex: 1,\n  padding: 10,\n },\n preview: {\n  backgroundColor: '#bdc3c7',\n  flex: 1,\n  height: 500,\n },\n input: {\n  backgroundColor: '#ecf0f1',\n  borderRadius: 3,\n  height: 40,\n  padding: 5,\n  marginBottom: 10,\n  flex: 1,\n },\n button: {\n  backgroundColor: '#3498db',\n  padding: 10,\n  borderRadius: 3,\n  marginBottom: 30,\n },\n});\n```", "```jsx\nyarn add ws\n```", "```jsx\nnpm install --save ws\n```", "```jsx\nconst port = 3001;\nconst WebSocketServer = require('ws').Server;\nconst server = new WebSocketServer({ port });\n\nserver.on('connection', (socket) => {\n  socket.on('message', (message) => {\n    console.log('received: %s', message);\n\n    server.clients.forEach(client => {\n      if (client !== socket) {\n        client.send(message);\n      }\n    });\n  });\n});\n\nconsole.log(`Web Socket Server running on port ${port}`);\n```", "```jsx\nnode server/index.js\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  Dimensions,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TextInput,\n  SafeAreaView,\n  View,\n  Platform\n} from 'react-native';\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    history: [],\n  };\n    // Defined in later steps \n} \n\nconst styles = StyleSheet.create({ \n  // Defined in later steps \n}); \n```", "```jsx\n  componentWillMount() {\n    const localhost = Platform.OS === 'android' ? '10.0.3.2' :\n    'localhost';\n\n    this.ws = new WebSocket(`ws://${localhost}:3001`);\n    this.ws.onopen = this.onOpenConnection;\n    this.ws.onmessage = this.onMessageReceived;\n    this.ws.onerror = this.onError;\n    this.ws.onclose = this.onCloseConnection;\n  }\n```", "```jsx\n  onOpenConnection = () => {\n    console.log('Open!');\n  }\n\n  onError = (event) => {\n    console.log('onerror', event.message);\n  }\n\n  onCloseConnection = (event) => {\n    console.log('onclose', event.code, event.reason);\n  }\n```", "```jsx\n  onMessageReceived = (event) => {\n    this.setState({\n      history: [\n        ...this.state.history,\n        { isSentByMe: false, messageText: event.data },\n      ],\n    });\n  }\n```", "```jsx\n  onSendMessage = () => {\n    const { text } = this.state;\n\n    this.setState({\n      text: '',\n      history: [\n        ...this.state.history,\n        { isSentByMe: true, messageText: text },\n      ],\n    });\n    this.ws.send(text);\n  }\n```", "```jsx\n  onChangeText = (text) => {\n    this.setState({ text });\n  }\n```", "```jsx\n  render() {\n    const { history, text } = this.state;\n\n    return (\n      <SafeAreaView style={[styles.container, android]}>\n        <Text style={styles.toolbar}>Simple Chat</Text>\n        <ScrollView style={styles.content}>\n          { history.map(this.renderMessage) }\n        </ScrollView>\n        <View style={styles.inputContainer}>\n          <TextInput\n            style={styles.input}\n            value={text}\n            onChangeText={this.onChangeText}\n            onSubmitEditing={this.onSendMessage}\n          />\n        </View>\n      </SafeAreaView>\n    );\n  }\n```", "```jsx\n  renderMessage(item, index){\n    const sender = item.isSentByMe ? styles.me : styles.friend;\n\n    return (\n      <View style={[styles.msg, sender]} key={index}>\n        <Text>{item.msg}</Text>\n      </View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#ecf0f1',\n    flex: 1,\n  },\n  toolbar: {\n    backgroundColor: '#34495e',\n    color: '#fff',\n    fontSize: 20,\n    padding: 25,\n    textAlign: 'center',\n  },\n  content: {\n    flex: 1,\n  },\n  inputContainer: {\n    backgroundColor: '#bdc3c7',\n    padding: 5,\n  },\n  input: {\n    height: 40,\n    backgroundColor: '#fff',\n  },\n  // Defined in next step\n}); \n```", "```jsx\n  msg: {\n    margin: 5,\n    padding: 10,\n    borderRadius: 10,\n  },\n  me: {\n    alignSelf: 'flex-start',\n    backgroundColor: '#1abc9c',\n    marginRight: 100,\n  },\n  friend: {\n    alignSelf: 'flex-end',\n    backgroundColor: '#fff',\n    marginLeft: 100,\n  }\n```", "```jsx\n  react-native link\n```", "```jsx\n react-native init \n```", "```jsx\n  expo init \n```", "```jsx\n expo eject \n```", "```jsx\n pod install\n```", "```jsx\nyarn add realm\n```", "```jsx\nnpm install --save realm\n```", "```jsx\nreact-native link realm\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity\n} from 'react-native';\nimport Realm from 'realm';\n```", "```jsx\nexport default class App extends Component {\n  realm;\n  componentWillMount() {\n    const realm = this.realm = new Realm({\n     schema: [\n      {\n        name: 'User',\n        properties: {\n          firstName: 'string',\n          lastName: 'string',\n          email: 'string'\n        }\n      }\n   ]\n });\n }\n // Defined in later steps.\n}\n```", "```jsx\n  getRandomUser() {\n    return fetch('https://randomuser.me/api/')\n      .then(response => response.json());\n  }\n```", "```jsx\n  createUser = () => {\n    const realm = this.realm;\n\n    this.getRandomUser().then((response) => {\n      const user = response.results[0];\n      const userName = user.name;\n      realm.write(() => {\n        realm.create('User', {\n          firstName: userName.first,\n          lastName: userName.last,\n          email: user.email\n        });\n        this.setState({users:realm.objects('User')});\n      });\n    });\n  }\n```", "```jsx\n  updateUser = () => {\n    const realm = this.realm;\n    const users = realm.objects('User');\n\n    realm.write(() => {\n      if(users.length) {\n        let firstUser = users.slice(0,1)[0];\n        firstUser.firstName = 'Bob';\n        firstUser.lastName = 'Cookbook';\n        firstUser.email = 'react.native@cookbook.com';\n        this.setState(users);\n      }\n    });\n  }\n```", "```jsx\n  deleteUsers = () => {\n    const realm = this.realm;\n    realm.write(() => {\n      realm.deleteAll();\n      this.setState({users:realm.objects('User')});\n    });\n  }\n```", "```jsx\n  render() {\n    const realm = this.realm;\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>\n          Welcome to Realm DB Test!\n        </Text>\n        <View style={styles.buttonContainer}>\n           <TouchableOpacity style={styles.button}\n           onPress={this.createUser}>\n            <Text style={styles.buttontext}>Add User</Text>\n          </TouchableOpacity>\n           <TouchableOpacity style={styles.button}\n            onPress={this.updateUser}>\n            <Text>Update First User</Text>\n          </TouchableOpacity>\n           <TouchableOpacity style={styles.button}\n            onPress={this.deleteUsers}>\n            <Text>Remove All Users</Text>\n          </TouchableOpacity>\n        </View>\n        <View style={styles.container}>\n        <Text style={styles.welcome}>Users:</Text>\n        {this.state.users.map((user, idx) => {\n          return <Text key={idx}>{user.firstName} {user.lastName}\n         {user.email}</Text>;\n        })}\n        </View>\n      </View>\n    );\n  }\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  SafeAreaView,\n  NetInfo,\n  StyleSheet,\n  Text,\n  View,\n  Platform\n} from 'react-native';\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    online: null,\n    offline: null,\n  };\n\n  // Defined in later steps\n}\n```", "```jsx\n  componentWillMount() {\n    NetInfo.getConnectionInfo().then((connectionInfo) => {\n      this.onConnectivityChange(connectionInfo);\n    });\n    NetInfo.addEventListener('connectionChange', \n    this.onConnectivityChange);\n  }\n```", "```jsx\n  componentWillUnmount() {\n    NetInfo.removeEventListener('connectionChange', \n    this.onConnectivityChange);\n  }\n```", "```jsx\n  onConnectivityChange = connectionInfo => {\n    this.setState({\n      online: connectionInfo.type !== 'none',\n      offline: connectionInfo.type === 'none',\n    });\n  }\n```", "```jsx\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Text style={styles.toolbar}>My Awesome App</Text>\n        <Text style={styles.text}>Lorem...</Text>\n        <Text style={styles.text}>Lorem ipsum...</Text>\n        {this.renderMask()}\n      </SafeAreaView>\n    );\n  }\n```", "```jsx\n  renderMask() {\n    if (this.state.offline) {\n      return (\n        <View style={styles.mask}>\n          <View style={styles.msg}>\n            <Text style={styles.alert}>Seems like you do not have\n             network connection anymore.</Text>\n            <Text style={styles.alert}>You can still continue\n            using the app, with limited content.</Text>\n          </View>\n        </View>\n      );\n    }\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F5FCFF',\n  },\n  toolbar: {\n    backgroundColor: '#3498db',\n    padding: 15,\n    fontSize: 20,\n    color: '#fff',\n    textAlign: 'center',\n  },\n  text: {\n    padding: 10,\n  },\n  // Defined in next step\n}\n```", "```jsx\nconst styles = StyleSheet.create({\n  // Defined in previous step\n  mask: {\n    alignItems: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    bottom: 0,\n    justifyContent: 'center',\n    left: 0,\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n  msg: {\n    backgroundColor: '#ecf0f1',\n    borderRadius: 10,\n    height: 200,\n    justifyContent: 'center',\n    padding: 10,\n    width: 300,\n  },\n  alert: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 5,\n  }\n});\n```", "```jsx\nimport React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  NetInfo,\n  TouchableOpacity\n} from 'react-native';\n```", "```jsx\nexport default class App extends React.Component {\n  pendingSync;\n\n  state = {\n    isConnected: null,\n    syncStatus: null,\n    serverResponse: null\n  }\n\n  // Defined in later steps\n}\n```", "```jsx\n  componentWillMount() {\n    NetInfo.isConnected.fetch().then(isConnected => {\n      this.setState({isConnected});\n    });\n    NetInfo.isConnected.addEventListener('connectionChange', \n    this.onConnectionChange);\n  }\n```", "```jsx\n  onConnectionChange = (isConnected) => {\n    this.setState({isConnected});\n    if (this.pendingSync) {\n      this.setState({syncStatus : 'Syncing'});\n      this.submitData(this.pendingSync).then(() => {\n        this.setState({syncStatus : 'Sync Complete'});\n      });\n    }\n  }\n```", "```jsx\n  submitData(requestBody) {\n    return fetch('http://jsonplaceholder.typicode.com/posts', {\n      method : 'POST',\n      body : JSON.stringify(requestBody)\n    }).then((response) => {\n      return response.text();\n    }).then((responseText) => {\n      this.setState({\n        serverResponse : responseText\n      });\n    });\n  }\n```", "```jsx\n  onSubmitPress = () => {\n    const requestBody = {\n      title: 'foo',\n      body: 'bar',\n      userId: 1\n    };\n    if (this.state.isConnected) {\n      this.submitData(requestBody);\n    } else {\n      this.pendingSync = requestBody;\n      this.setState({syncStatus : 'Pending'});\n    }\n  }\n```", "```jsx\n  render() {\n    const {\n      isConnected,\n      syncStatus,\n      serverResponse\n    } = this.state;\n    return (\n      <View style={styles.container}>\n        <TouchableOpacity onPress={this.onSubmitPress}>\n          <View style={styles.button}>\n            <Text style={styles.buttonText}>Submit Data</Text>\n          </View>\n        </TouchableOpacity>\n        <Text style={styles.status}>\n          Connection Status: {isConnected ? 'Connected' : \n          'Disconnected'}\n        </Text>\n        <Text style={styles.status}>\n          Sync Status: {syncStatus}\n        </Text>\n        <Text style={styles.status}>\n          Server Response: {serverResponse}\n        </Text>\n      </View>\n    );\n  }\n```", "```jsx\nimport React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  Alert\n} from 'react-native';\nimport Expo from 'expo';\n```", "```jsx\nexport default class App extends React.Component {\n  state = {\n    loggedIn: false,\n    facebookUserInfo: {}\n  }\n  // Defined in later steps\n}\n```", "```jsx\n  logIn = async () => {\n    const { type, token } = await \n    Facebook.logInWithReadPermissionsAsync(APP_ID, {\n      permissions: ['public_profile'],\n    });\n\n    // Defined in next step\n  }\n```", "```jsx\n  logIn = async () => {\n    //Defined in step above\n\n if (type === 'success') {\n const response = await fetch(`https://graph.facebook.com/me?\n      access_token=${token}`);\n const facebookUserInfo = await response.json();\n this.setState({\n facebookUserInfo,\n loggedIn: true\n });\n }\n  }\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.headerText}>Login via Facebook</Text>\n        <TouchableOpacity\n          onPress={this.logIn}\n          style={styles.button}\n        >\n          <Text style={styles.buttonText}>Login</Text>\n        </TouchableOpacity>\n\n        {this.renderFacebookUserInfo()}\n      </View>\n    );\n  }\n```", "```jsx\n  renderFacebookUserInfo = () => {\n    return this.state.loggedIn ? (\n      <View style={styles.facebookUserInfo}>\n        <Text style={styles.facebookUserInfoLabel}>Name:</Text>\n        <Text style={styles.facebookUserInfoText}>\n        {this.state.facebookUserInfo.name}</Text>\n        <Text style={styles.facebookUserInfoLabel}>User ID:</Text>\n        <Text style={styles.facebookUserInfoText}>\n        {this.state.facebookUserInfo.id}</Text>\n      </View>\n    ) : null;\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    marginTop: 30,\n    padding: 10,\n    backgroundColor: '#3B5998'\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 30\n  },\n  headerText: {\n    fontSize: 30\n  },\n  facebookUserInfo: {\n    paddingTop: 30\n  },\n  facebookUserInfoText: {\n    fontSize: 24\n  },\n  facebookUserInfoLabel: {\n    fontSize: 20,\n    marginTop: 10,\n    color: '#474747'\n  }\n});\n```"]