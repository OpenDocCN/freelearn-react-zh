["```jsx\nlet myArray = [1,2,3,4,5,6,7];\nlet newArray;\n\n// Slower: \nfunction filterFn(element) { \n  return element > 2; \n} \nnewArray = myArray.filter(filterFn); \n\n// Faster: \nfunction filterArray(array) { \n  var length = array.length, \n    myNewArray = [], \n    element, \n    i; \n\n  for(i = 0; i < length; i++) { \n    element = array[i]; \n    if(element > 2) { \n      myNewArray.push(array[i]); \n    } \n  } \n  return myNewArray; \n} \n\nnewArray = filterArray(myArray); \n```", "```jsx\nfunction findInArray(propertyerties, appConfig) { \n  for (let i = 0; i < propertyerties.length; i++) { \n    if (propertyerties[i].somepropertyerty ===\n    appConfig.userConfig.permissions[0]) { \n      // do something \n    } \n  } \n} \n\nfunction fasterFindInArray(propertyerties, appConfig) { \n  let matchPermission = appConfig.userConfig.permissions[0];\n  let length = propertyerties.length;\n  let i = 0; \n\n  for (; i < length; i++) { \n    if (propertyerties[i].somepropertyerty === matchPermission) { \n      // do something \n    } \n  } \n} \n```", "```jsx\nfunction canViewApp(user, isSuperUser) { \n  if (getUserPermissions(user).canView || isSuperUser) { \n      return true; \n  } \n} \n\nfunction canViewApp(user, isSuperUser) { \n  if (isSuperUser || getUserPermissions(user).canView) { \n      return true; \n  } \n}\n```", "```jsx\n// unoptimized \nrender() { \n  let output; \n  const isAdminView = this.propertys.isAdminView; \n\n  if(isAdminView) { \n    output = (<AdminButton/>); \n  } else { \n    output = ( \n      <View style={styles.button}> \n        <Text>{this.propertys.buttonLabel}</Text> \n      </View> \n    ); \n  } \n  return output; \n} \n\n// optimized \nrender() { \n  const isAdminView = this.propertys.isAdminView; \n\n  if (isAdminView) { \n    return (<AdminButton/>); \n  } \n  return ( \n    <View style={styles.button}> \n      <Text>{this.propertys.buttonLabel}</Text> \n    </View> \n  ); \n} \n```", "```jsx\nimport React, { PureComponent } from 'react'; \n\nexport default class Button extends PureComponent {\n\n} \n```", "```jsx\ncomponentWillMount() { \n  this.setState({ \n    fadeAnimimation: new Animated.Value(0) \n  }); \n} \n\ncomponentDidMount() { \n  Animated.timing(this.state.fadeAnimimation, { \n    toValue: 1, \n    useNativeDriver: true \n  }).start(); \n}\n```", "```jsx\ncomponentWillMount() { \n  this.setState({ \n    isAnimationDone: false \n  }); \n} \ncomponentWillUpdate() { \n  LayoutAnimation.easeInAndOut(); \n} \n\ncomponentDidMount() { \n  InteractionManager.runAfterInteractions(() => { \n    this.setState({ \n      isAnimationDone: true \n    }); \n  }) \n} \n\nrender() { \n  if (!this.state.isAnimationDone) { \n    return this.renderPlaceholder(); \n  } \n  return this.renderMainScene(); \n} \n```", "```jsx\nrenderRow(row) { \n  return ( \n    <View style={{height:44, overflow:'hidden'}}> \n      <Text>Item {row.index}</Text> \n    </View> \n  ) \n} \n\nrender() { \n  return ( \n    <View style={{flex:1}}> \n      <ListView \n        dataSource={this.state.dataSource} \n        renderRow={this.renderRow} \n        pageSize={10} \n        initialListSize={1} \n        pageSize={10} \n        scrollAheadDistance={200} \n        /> \n    </View> \n  ) \n} \n```", "```jsx\nyarn add babel-plugin-transform-remove-console\n```", "```jsx\nnpm install babel-plugin-transform-remove-console --save \n```", "```jsx\n{ \n  \"presets\": [\"react-native\"], \n  \"env\": { \n    \"production\": { \n        \"plugins\": [\"transform-remove-console\"] \n    } \n  } \n} \n```", "```jsx\n- (NSDate*)dateFromUnixTimestamp:(NSTimeInterval)timestamp {\n  return [NSDate dateWithTimeIntervalSince1970:timestamp]; \n} \n```", "```jsx\n     SparseArray<SomeType> map = new SparseArray<SomeType>(); \n     map.put(1, myObjectInstance); \n```", "```jsx\nRCT_EXPORT_MODULE() \n\n- (UIView *)view { \n  UIView *view = [[UIView alloc] init]; \n\n  view.layer.masksToBounds = NO; \n  view.layer.shadowColor = [UIColor blackColor].CGColor; \n  view.layer.shadowOffset = CGSizeMake(0.0f, 5.0f); \n  view.layer.shadowOpacity = 0.5f; \n\n  view.layer.shadowPath = [[UIBezierPath bezierPathWithRect:view.bounds] CGPath]; \n\n  return view; \n} \n```", "```jsx\nmyView.animate() \n  .alpha(0.0f) \n  .withLayer() \n  .start(); \n```"]