["```jsx\n react-native init\n```", "```jsx\n react-native init\n```", "```jsx\n react-native init \n```", "```jsx\n react-native link \n```", "```jsx\nexpo eject\n```", "```jsx\nreact-native init \n```", "```jsx\n pod install\n```", "```jsx\n ruby -v \n```", "```jsx\n brew install ruby\n```", "```jsx\nsudo gem install cocoapods\n```", "```jsx\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```", "```jsx\nnode -v\n```", "```jsx\nbrew install node\n```", "```jsx\nbrew install watchman\n```", "```jsx\nnpm install -g react-native-cli\n```", "```jsx\nreact-native init name-of-project\n```", "```jsx\nreact-native run-ios\n```", "```jsx\nreact-native run-android\n```", "```jsx\nnpm install -g expo-cli\n```", "```jsx\nnpm install -g react-native-cli\n```", "```jsx\n react-native init NativeBase\n```", "```jsx\nnpm install native-base --save\n```", "```jsx\nyarn add native-base\n```", "```jsx\nreact-native link\n```", "```jsx\nimport { AppRegistry } from 'react-native';\nimport App from './App';\n\nAppRegistry.registerComponent('NativeBase', () => App);\n```", "```jsx\n react-native link\n```", "```jsx\n expo init native-base \n```", "```jsx\nnpm install native-base @expo/vector-icons --save\n```", "```jsx\nyarn add native-base @expo/vector-icons\n```", "```jsx\n expo start \n```", "```jsx\nimport React, { Component } from 'react';\nimport { View, Text, StyleSheet } from 'react-native'\nimport {\n  Spinner,\n  Button,\n  Body,\n  Title,\n  Container,\n  Header,\n  Fab,\n  Icon,\n} from 'native-base';\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    loading: true\n    fabActive: false\n  }\n  // Defined on following steps\n}\n```", "```jsx\n// Other import statements import { Font, AppLoaded } from 'expo';\n\nexport default class App extends Component {\n  state = {\n    fabActive: false\n  }\n\n async componentWillMount() {\n await Font.loadAsync({\n 'Roboto': require('native-base/Fonts/Roboto.ttf'),\n 'Roboto_medium': require('native-base/Fonts/Roboto_medium.ttf'),\n 'Ionicons': require('@expo/vector-icons/fonts/Ionicons.ttf'),\n });\n    this.setState({ loading: false });\n }\n  // Defined on following steps\n}\n```", "```jsx\n  render() {\n    if (this.state.loading) {\n      return <AppLoading />;\n    } else {\n      return (\n        <Container>\n          <Header>\n            <Body>\n              <Title>Header Title!</Title>\n            </Body>\n          </Header>\n        </Container>\n      );\n    }\n  }\n```", "```jsx\n      <Container>\n        <Header>\n          <Body>\n            <Title>Header Title!</Title>\n          </Body>\n        </Header>\n <View style={styles.view}>\n <Spinner color='green' style={styles.spinner} />\n <Button block info\n onPress={() => { console.log('button 1 pressed') }}\n >\n <Text style={styles.buttonText}>Click Me! </Text>\n </Button>\n <Button block success\n onPress={() => { console.log('button 2 pressed') }}\n >\n <Text style={styles.buttonText}>No Click Me!</Text>\n </Button>\n {this.renderFab()}\n </View>\n      </Container>\n```", "```jsx\n  renderFab = () => {\n    return (\n      <Fab active={this.state.fabActive}\n        direction=\"up\"\n        style={styles.fab}\n        position=\"bottomRight\"\n        onPress={() => this.setState({ fabActive:\n        !this.state.fabActive })}>\n        <Icon name=\"share\" />\n        <Button style={styles.facebookButton}\n          onPress={() => { console.log('facebook button pressed') }}\n        >\n          <Icon name=\"logo-facebook\" />\n        </Button>\n        <Button style={styles.twitterButton}\n          onPress={() => { console.log('twitter button pressed')}}\n        >\n          <Icon name=\"logo-twitter\" />\n        </Button>\n      </Fab>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingBottom: 40\n  },\n  buttonText: {\n    color: '#fff'\n  },\n  fab: {\n    backgroundColor: '#007AFF'\n  },\n  twitterButton: {\n    backgroundColor: '#1DA1F2'\n  },\n  facebookButton: {\n    backgroundColor: '#3B5998'\n  },\n  spinner: {\n    marginBottom: 180\n  }\n});\n```", "```jsx\nreact-native link\n```", "```jsx\nnpm install --save glamorous-native\n```", "```jsx\nyarn add glamorous-native\n```", "```jsx\nimport React from 'react';\nimport glamorous from 'glamorous-native';\n```", "```jsx\nconst Container = glamorous.view({\n  flex: 1,\n  justifyContent: 'center',\n  alignItems: 'center',\n  backgroundColor: '#fff',\n});\n```", "```jsx\nconst Headline = glamorous.text({\n  fontSize: 30,\n  paddingBottom: 8\n});\n\nconst SubHeading = glamorous.text({\n  fontSize: 26,\n  paddingBottom: 8\n});\n\nconst ButtonText = glamorous.text({\n  fontSize: 18,\n  color: 'white'\n});\n```", "```jsx\nconst Button = glamorous.touchableHighlight(\n  { padding: 10 },\n  props => ({backgroundColor: props.warning ? 'red' : 'blue'})\n);\n```", "```jsx\nconst { Image } = glamorous;\n```", "```jsx\nexport default class App extends React.Component {\n  render() {\n    // Defined in following steps.\n  }\n}\n```", "```jsx\n  render() {\n return (\n <Container>\n // Defined on following steps\n </Container>\n );\n  }\n```", "```jsx\n      <Container>\n <Image\n height={250}\n width={250}\n borderRadius={20}\n source={{ uri: 'http://placehold.it/250/3B5998' }}\n />\n        // Defined on following steps\n      </Container>\n```", "```jsx\n      <Container>\n        <Image\n          height={250}\n          width={250}\n          borderRadius={20}\n          source={{ uri: 'http://placehold.it/250/3B5998' }}\n        />\n <Headline>I am a headline</Headline>\n <SubHeading>I am a subheading</SubHeading>\n        // Defined in following steps\n      <Container>\n```", "```jsx\n        <Button\n          onPress={() => console.log('Thanks for clicking me!')}\n        >\n          <ButtonText>\n            Click Me!\n          </ButtonText>\n        </Button>\n        <Button\n          warning\n          onPress={() => console.log(`You shouldn't have clicked me!`)}\n        >\n          <ButtonText>\n            Don't Click Me!\n          </ButtonText>\n        </Button>\n```", "```jsx\nreact-native link\n```", "```jsx\nreact-native init SpinKitApp\n```", "```jsx\nnpm install react-native-spinkit@latest --save\n```", "```jsx\nyarn add react-native-spinkit@latest\n```", "```jsx\nreact-native link\n```", "```jsx\nreact-native run-ios\n```", "```jsx\nreact-native run-android\n```", "```jsx\nnpm install randomcolor --save\n```", "```jsx\nyarn add randomcolor\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  StyleSheet,\n  View,\n  TouchableOpacity,\n  Text\n} from 'react-native';\nimport Spinner from 'react-native-spinkit';\nimport randomColor from 'randomcolor';\n```", "```jsx\nconst types = [\n  'Bounce',\n  'Wave',\n  'WanderingCubes',\n  'Pulse',\n  'ChasingDots',\n  'ThreeBounce',\n  'Circle',\n  '9CubeGrid',\n  'FadingCircleAlt',\n  'FadingCircle',\n  'CircleFlip',\n  'WordPress',\n  'Arc',\n  'ArcAlt'\n];\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    isVisible: true,\n    typeIndex: 0,\n    type: types[0],\n    color: randomColor()\n  }\n}\n```", "```jsx\n  changeSpinner = () => {\n    const { typeIndex } = this.state;\n    let nextType = typeIndex === types.length - 1 ? 0 : typeIndex +\n    1;\n    this.setState({\n      color: randomColor(),\n      typeIndex: nextType,\n      type: types[nextType]\n    });\n  }\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.container}>\n        <TouchableOpacity onPress={this.changeSpinner}>\n          <Spinner\n            isVisible={this.state.isVisible}\n            size={120}\n            type={this.state.type}\n            color={this.state.color}\n          />\n        </TouchableOpacity>\n        <Text style={styles.text}>{this.state.type}</Text>\n      </View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n  },\n  text: {\n    paddingTop: 40,\n    fontSize: 25\n  }\n});\n```", "```jsx\n react-native link\n```", "```jsx\nnpm install react-native-side-menu --save\n```", "```jsx\nyarn add react-native-side-menu\n```", "```jsx\nimport React from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport SideMenu from 'react-native-side-menu';\nimport Menu from './components/Menu';\n```", "```jsx\nexport default class App extends React.Component {\n  state = {\n    isOpen: false,\n    selectedBackgroundColor: 'green'\n  }\n  // Defined in following steps\n}\n```", "```jsx\n  changeBackgroundColor = color => {\n    this.setState({\n      isOpen: false,\n      selectedBackgroundColor: color,\n    });\n  }\n```", "```jsx\n  render() {\n    const menu = <Menu onColorSelected={this.changeBackgroundColor}\n   />;\n\n    // Defined in next step\n  }\n```", "```jsx\n  render() {\n    const menu = <Menu onColorSelected={this.changeBackgroundColor} />;\n\n    return (\n <SideMenu\n menu={menu}\n isOpen={this.state.isOpen}\n onChange={(isOpen) => this.setState({ isOpen })}\n >\n <View style={[\n styles.container,\n { backgroundColor: this.state.selectedBackgroundColor }\n ]}>\n <TouchableOpacity\n style={styles.button}\n onPress={() => this.setState({ isOpen: true })}\n >\n <Text style={styles.buttonText}>Open Menu</Text>\n </TouchableOpacity>\n </View>\n </SideMenu>\n );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    backgroundColor: 'black',\n    padding: 20,\n    borderRadius: 10\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 25\n  }\n});\n```", "```jsx\nimport React from 'react';\nimport {\n  Dimensions,\n  StyleSheet,\n  View,\n  Text,\n  TouchableOpacity\n} from 'react-native';\n\nconst window = Dimensions.get('window');\n```", "```jsx\nconst Menu = ({ onColorSelected }) => {\n  return (\n    // Defined on next step\n  );\n}\n\nexport default Menu;\n```", "```jsx\n    <View style={styles.menu}>\n      <Text style={styles.heading}>Select a Color</Text>\n      <TouchableOpacity onPress={() => onColorSelected('green')}>\n        <Text style={styles.item}>\n          Green\n        </Text>\n      </TouchableOpacity>\n      <TouchableOpacity onPress={() => onColorSelected('blue')}>\n        <Text style={styles.item}>\n          Blue\n        </Text>\n      </TouchableOpacity>\n      <TouchableOpacity onPress={() => onColorSelected('orange')}>\n        <Text style={styles.item}>\n          Orange\n        </Text>\n      </TouchableOpacity>\n      <TouchableOpacity onPress={() => onColorSelected('pink')}>\n        <Text style={styles.item}>\n          Pink\n        </Text>\n      </TouchableOpacity>\n      <TouchableOpacity onPress={() => onColorSelected('cyan')}>\n        <Text style={styles.item}>\n          Cyan\n        </Text>\n      </TouchableOpacity>\n      <TouchableOpacity onPress={() => onColorSelected('yellow')}>\n        <Text style={styles.item}>\n          Yellow\n        </Text>\n      </TouchableOpacity>\n      <TouchableOpacity onPress={() => onColorSelected('purple')}>\n        <Text style={styles.item}>\n          Purple\n        </Text>\n      </TouchableOpacity>\n    </View>\n```", "```jsx\nconst styles = StyleSheet.create({\n  menu: {\n    flex: 1,\n    width: window.width,\n    height: window.height,\n    backgroundColor: '#3C3C3C',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  heading: {\n    fontSize: 22,\n    color: '#f6f6f6',\n    fontWeight: 'bold',\n    paddingBottom: 20\n  },\n  item: {\n    fontSize: 25,\n    paddingTop: 10,\n    color: '#f6f6f6'\n  }\n});\n```", "```jsx\nnpm install react-native-modalbox --save\n```", "```jsx\nyarn add react-native-modalbox\n```", "```jsx\nimport React from 'react';\nimport Modal from 'react-native-modalbox';\nimport {\n  Text,\n  StyleSheet,\n  View,\n  TouchableOpacity\n} from 'react-native';\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    isOpen: false\n  };\n  // Defined on following steps\n}\n```", "```jsx\n  render = () => {\n    return (\n      <View style={styles.container}>\n        <TouchableOpacity\n          onPress={this.openModal1}\n          style={styles.button}\n        >\n          <Text style={styles.buttonText}>\n            Open Modal 1\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={this.openModal2}\n          style={styles.button}\n        >\n          <Text style={styles.buttonText}>\n            Open Modal 2\n          </Text>\n        </TouchableOpacity>\n        {this.renderModal1()}\n        {this.renderModal2()}\n      </View>\n    );\n  }\n```", "```jsx\n  renderModal1 = () => {\n    return(\n      <Modal\n        style={[styles.modal, styles.modal1]}\n        ref={'modal1'}\n        onClosed={this.onClose}\n        onOpened={this.onOpen}\n      >\n        <Text style={styles.modalText}>\n          Hello from Modal 1\n        </Text>\n      </Modal>\n    )\n  }\n```", "```jsx\n  openModal1 = () => {\n    this.refs.modal1.open();\n  }\n```", "```jsx\n  onClose = () => {\n    console.log('modal is closed');\n  }\n\n  onOpen = () => {\n    console.log('modal is open');\n  }\n```", "```jsx\nrenderModal2 = () => {\n    return(\n      <Modal\n        style={[styles.modal, styles.modal2]}\n        ref={'modal2'}\n        position={'bottom'}\n        onClosed={this.onCloseModal2}\n        isOpen={this.state.isOpen}\n      >\n        <Text style={styles.modalText}>\n          Hello from Modal 2\n        </Text>\n        <TouchableOpacity\n          onPress={() => this.setState({isOpen: false})}\n          style={styles.button}\n        >\n          <Text style={styles.buttonText}>\n            OK\n          </Text>\n        </TouchableOpacity>\n      </Modal>\n    )\n  }\n```", "```jsx\n  openModal2 = () => {\n    this.setState({ isOpen: true });\n  }\n```", "```jsx\n  onCloseModal2 = () => {\n    this.setState({ isOpen: false });\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f6f6f6',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  modal: {\n    width: 300,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  modal1: {\n    height: 200,\n    backgroundColor: \"#4AC9B0\"\n  },\n  modal2: {\n    height: 300,\n    backgroundColor: \"#6CCEFF\"\n  },\n  modalText: {\n    fontSize: 25,\n    padding: 10,\n    color: '#474747'\n  },\n  button: {\n    backgroundColor: '#000',\n    padding: 16,\n    borderRadius: 10,\n    marginTop: 20\n  },\n  buttonText: {\n    fontSize: 30,\n    color: '#fff'\n  }\n});\n```"]