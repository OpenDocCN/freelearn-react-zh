["```jsx\nimport React, { Component } from 'react';\nimport {\n  Animated,\n  Easing,\n  Dimensions,\n  StyleSheet,\n  View,\n} from 'react-native';\n```", "```jsx\nconst { width, height } = Dimensions.get('window');\nconst cloudImage = require('./assets/images/cloud.png');\nconst imageHeight = 200;\nconst imageWidth = 300;\n```", "```jsx\nexport default class App extends Component { \n  componentWillMount() { \n    // Defined on step 4 \n  } \n\n  componentDidMount() { \n    // Defined on step 7 \n  } \n\n  startAnimation () { \n    // Defined on step 5 \n  } \n\n  render() { \n    // Defined on step 6 \n  } \n} \n\nconst styles = StyleSheet.create({ \n  // Defined on step 8 \n}); \n```", "```jsx\n  componentWillMount() {\n    this.animatedValue = new Animated.Value();\n  }\n```", "```jsx\n  startAnimation() {\n    this.animatedValue.setValue(width);\n    Animated.timing(\n      this.animatedValue,\n      {\n        toValue: -imageWidth,\n        duration: 6000,\n        easing: Easing.linear,\n        useNativeDriver: true,\n      }\n    ).start(() => this.startAnimation());\n  }\n```", "```jsx\n  render() {\n    return (\n      <View style={styles.background}>\n        <Animated.Image\n          style={[\n            styles.image,\n            { left: this.animatedValue },\n          ]}\n          source={cloudImage}\n        />\n      </View>\n    );\n  }\n```", "```jsx\n  componentDidMount() {\n    this.startAnimation();\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    backgroundColor: 'cyan',\n  },\n  image: {\n    height: imageHeight,\n    position: 'absolute',\n    top: height / 3,\n    width: imageWidth,\n  },\n});\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  View,\n  Animated,\n  Image,\n  Easing,\n  Dimensions,\n  StyleSheet,\n} from 'react-native';\n```", "```jsx\nconst { width, height } = Dimensions.get('window');\nconst cloudImage1 = require('./assets/images/cloud.png');\nconst cloudImage2 = require('./assets/images/cloud.png');\nconst planeImage = require('./assets/images/plane.gif');\nconst cloudHeight = 100;\nconst cloudWidth = 150;\nconst planeHeight = 60;\nconst planeWidth = 100;\n```", "```jsx\nexport default class App extends Component { \n  componentWillMount() { \n    this.animatedValue = new Animated.Value(); \n  } \n\n  componentDidMount() { \n    this.startAnimation(); \n  } \n\n  startAnimation () { \n    this.animatedValue.setValue(1); \n    Animated.timing( \n      this.animatedValue, \n      { \n        toValue: 0, \n        duration: 6000, \n        easing: Easing.linear, \n      } \n    ).start(() => this.startAnimation()); \n  } \n\n  render() { \n    // Defined in a later step\n  } \n} \n\nconst styles = StyleSheet.create({ \n  // Defined in a later step\n}); \n```", "```jsx\n  render() {\n    const left1 = this.animatedValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [-cloudWidth, width],\n    });\n\n    const left2 = this.animatedValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [-cloudWidth*5, width + cloudWidth*5],\n    });\n\n    // Defined in a later step\n  } \n```", "```jsx\n  render() {\n    // Defined in a later step\n\n    return (\n      <View style={styles.background}>\n        <Animated.Image\n          style={[\n            styles.cloud1,\n            { left: left1 },\n          ]}\n          source={cloudImage1}\n        />\n        <Image\n          style={styles.plane}\n          source={planeImage}\n        />\n        <Animated.Image\n          style={[\n            styles.cloud2,\n            { left: left2 },\n          ]}\n          source={cloudImage2}\n        />\n      </View>\n    );\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    backgroundColor: 'cyan',\n  },\n  cloud1: {\n    position: 'absolute',\n    width: cloudWidth,\n    height: cloudHeight,\n    top: height / 3 - cloudWidth / 2,\n  },\n  cloud2: {\n    position: 'absolute',\n    width: cloudWidth * 1.5,\n    height: cloudHeight * 1.5,\n    top: height/2,\n  },\n  plane: {\n    position: 'absolute',\n    height: planeHeight,\n    width: planeWidth,\n    top: height / 2 - planeHeight,\n    left: width / 2 - planeWidth,\n  }\n});\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  View,\n  SafeAreaView,\n} from 'react-native';\nimport Notification from './Notification';\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    notify: false,\n    message: 'This is a notification!',\n  };\n\n  toggleNotification = () => {\n    // Defined on later step\n  }\n\n  render() {\n    // Defined on later step\n  }\n}\n\nconst styles = StyleSheet.create({\n    // Defined on later step\n});\n\n```", "```jsx\n  render() {\n    const notify = this.state.notify\n      ? <Notification\n          autoHide\n          message={this.state.message}\n          onClose={this.toggleNotification}\n        />\n    : null;\n    // Defined on next step\n  }\n```", "```jsx\n  render() {\n    // Code from previous step\n    return (\n      <SafeAreaView>\n        <Text style={styles.toolbar}>Main toolbar</Text>\n        <View style={styles.content}>\n          <Text>\n            Lorem ipsum dolor sit amet, consectetur adipiscing \n            elit,\n            sed do eiusmod tempor incididunt ut labore et \n            dolore magna.\n          </Text>\n          <TouchableOpacity\n            onPress={this.toggleNotification}\n            style={styles.btn}\n          >\n            <Text style={styles.text}>Show notification</Text>\n          </TouchableOpacity>\n          <Text>\n            Sed ut perspiciatis unde omnis iste natus error sit \n            accusantium doloremque laudantium.\n          </Text>\n          {notify}\n        </View>\n      </SafeAreaView>\n    );\n  }\n```", "```jsx\n  toggleNotification = () => {\n    this.setState({\n      notify: !this.state.notify,\n    });\n  }\n```", "```jsx\n        const styles = StyleSheet.create({ \n          toolbar: { \n            backgroundColor: '#8e44ad', \n            color: '#fff', \n            fontSize: 22, \n            padding: 20, \n            textAlign: 'center', \n          }, \n          content: { \n            padding: 10, \n            overflow: 'hidden', \n          }, \n          btn: { \n            margin: 10, \n            backgroundColor: '#9b59b6', \n            borderRadius: 3, \n            padding: 10, \n          }, \n          text: { \n            textAlign: 'center', \n            color: '#fff', \n          }, \n        }); \n```", "```jsx\nimport React, { Componen } from 'react';\nimport {\n  Animated,\n  Easing,\n  StyleSheet,\n  Text,\n} from 'react-native';\n```", "```jsx\nexport default class Notification extends Component {\n  static defaultProps = {\n    delay: 5000,\n    onClose: () => {},\n    onOpen: () => {},\n  };\n\n  state = {\n    height: -1000,\n  };\n}\n```", "```jsx\n  componentWillMount() {\n    this.animatedValue = new Animated.Value();\n  }\n\n  componentDidMount() {\n    this.startSlideIn();\n  }\n\n  getAnimation(value, autoHide) {\n    const { delay } = this.props;\n    return Animated.timing(\n      this.animatedValue,\n      {\n        toValue: value,\n        duration: 500,\n        easing: Easing.cubic,\n        delay: autoHide ? delay : 0,\n      }\n    );\n  }\n```", "```jsx\n  startSlideIn () {\n    const { onOpen, autoHide } = this.props;\n\n    this.animatedValue.setValue(0);\n    this.getAnimation(1)\n      .start(() => {\n        onOpen();\n        if (autoHide){\n          this.startSlideOut();\n        }\n      });\n  }\n```", "```jsx\n  startSlideOut() {\n    const { autoHide, onClose } = this.props;\n\n    this.animatedValue.setValue(1);\n    this.getAnimation(0, autoHide)\n      .start(() => onClose());\n  }\n```", "```jsx\n  render() {\n    const { message } = this.props;\n    const { height } = this.state;\n    const top = this.animatedValue.interpolate({\n       inputRange: [0, 1],\n       outputRange: [-height, 0],\n     });\n    // Defined on next step\n   }\n}\n```", "```jsx\n  render() {\n     // Code from previous step\n     return (\n      <Animated.View\n        onLayout={this.onLayoutChange}\n        style={[\n          styles.main,\n          { top }\n        ]}\n      >\n        <Text style={styles.text}>{message}</Text>\n      </Animated.View>\n    );\n   }\n}\n```", "```jsx\n  onLayoutChange = (event) => {\n    const {layout: { height } } = event.nativeEvent;\n     this.setState({ height });\n   }\n```", "```jsx\n        const styles = StyleSheet.create({ \n          main: { \n            backgroundColor: 'rgba(0, 0, 0, 0.7)', \n            padding: 10, \n            position: 'absolute', \n            left: 0, \n            right: 0, \n          }, \n          text: { \n            color: '#fff', \n          }, \n       }); \n```", "```jsx\nonLayoutChange = (event) => { \n  const {layout: { height } } = event.nativeEvent; \n if (this.state.height === -1000) { \n    this.setState({ height }); \n } \n} \n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  View,\n  LayoutAnimation,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n} from 'react-native';\n```", "```jsx\nexport default class Panel extends Component {\n  static defaultProps = {\n    expanded: false\n  };\n}\n\nconst styles = StyleSheet.create({\n  // Defined on later step\n});\n```", "```jsx\n  state = {\n    height: this.props.expanded ? null : 0,\n  };\n```", "```jsx\n  render() {\n    const { children, style, title } = this.props;\n    const { height } = this.state;\n\n    return (\n      <View style={[styles.main, style]}>\n        <TouchableOpacity onPress={this.toggle}>\n          <Text style={styles.title}>\n            {title}\n          </Text>\n        </TouchableOpacity>\n        <View style={{ height }}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n```", "```jsx\n  toggle = () => {\n    LayoutAnimation.spring();\n    this.setState({\n      height: this.state.height === null ? 0 : null,\n    })\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  main: {\n    backgroundColor: '#fff',\n    borderRadius: 3,\n    overflow: 'hidden',\n    paddingLeft: 30,\n    paddingRight: 30,\n  },\n  title: {\n    fontWeight: 'bold',\n    paddingTop: 15,\n    paddingBottom: 15,\n  }\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  Text,\n  StyleSheet,\n  View,\n  SafeAreaView,\n  Platform,\n  UIManager\n} from 'react-native';\nimport Panel from './Panel';\n```", "```jsx\n export default class App extends Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.main]}>\n        <Text style={styles.toolbar}>Animated containers</Text>\n        <View style={styles.content}>\n          <Panel\n            title={'Container 1'}\n            style={styles.panel}\n          >\n            <Text style={styles.panelText}>\n              Temporibus autem quibusdam et aut officiis\n              debitis aut rerum necessitatibus saepe\n              eveniet ut et voluptates repudiandae sint et\n              molestiae non recusandae.\n            </Text>\n          </Panel>\n          <Panel\n            title={'Container 2'}\n            style={styles.panel}\n              >\n            <Text style={styles.panelText}>\n              Et harum quidem rerum facilis est et expedita \n              distinctio. Nam libero tempore,\n              cum soluta nobis est eligendi optio cumque.\n            </Text>\n          </Panel>\n          <Panel\n            expanded\n            title={'Container 3'}\n            style={styles.panel}\n           >\n            <Text style={styles.panelText}>\n              Nullam lobortis eu lorem ut vulputate.\n            </Text>\n            <Text style={styles.panelText}>\n              Donec id elementum orci. Donec fringilla lobortis \n              ipsum, vitae commodo urna.\n            </Text>\n          </Panel>\n        </View>\n      </SafeAreaView>\n    );\n  }\n}\n```", "```jsx\n  componentWillMount() {\n    if (Platform.OS === 'android') {\n      UIManager.setLayoutAnimationEnabledExperimental(true);\n    }\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n  },\n  toolbar: {\n    backgroundColor: '#3498db',\n    color: '#fff',\n    fontSize: 22,\n    padding: 20,\n    textAlign: 'center',\n  },\n  content: {\n    padding: 10,\n    backgroundColor: '#ecf0f1',\n    flex: 1,\n  },\n  panel: {\n    marginBottom: 10,\n  },\n  panelText: {\n    paddingBottom: 15,\n  }\n});\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  ActivityIndicator,\n  LayoutAnimation,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\n```", "```jsx\nexport default class Button extends Component {\n  static defaultProps = {\n    loading: false,\n    onPress: () => {},\n  };\n  // Defined on later steps\n}\n```", "```jsx\n  render() {\n    const { loading, style } = this.props;\n\n    return (\n      <TouchableOpacity\n        style={[\n          styles.main,\n          style,\n          loading ? styles.loading : null,\n        ]}\n        activeOpacity={0.6}\n        onPress={this.handleButtonPress}\n      >\n        <View>\n          {this.renderLabel()}\n          {this.renderActivityIndicator()}\n        </View>\n      </TouchableOpacity>\n    );\n  }\n```", "```jsx\n  renderLabel() {\n    const { label, loading } = this.props;\n    if(!loading) {\n      return (\n        <Text style={styles.label}>{label}</Text>\n      );\n    }\n  }\n```", "```jsx\n  renderActivityIndicator() {\n    if (this.props.loading) {\n      return (\n        <ActivityIndicator size=\"small\" color=\"#fff\" />\n      );\n    }\n  }\n```", "```jsx\n  handleButtonPress = () => {\n    const { loading, onPress } = this.props;\n\n    LayoutAnimation.easeInEaseOut();\n    onPress(!loading);\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  main: {\n    backgroundColor: '#e67e22',\n    borderRadius: 20,\n    padding: 10,\n    paddingLeft: 50,\n    paddingRight: 50,\n  },\n  label: {\n    color: '#fff',\n    fontWeight: 'bold',\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  loading: {\n    padding: 10,\n    paddingLeft: 10,\n    paddingRight: 10,\n  },\n});\n```", "```jsx\nimport React, { Component } from 'react';\nimport {\n  Text,\n  StyleSheet,\n  View,\n  SafeAreaView,\n  Platform,\n  UIManager\n} from 'react-native';\nimport Button from './Button';\n```", "```jsx\nexport default class App extends Component {\n  state = {\n    loading: false,\n  };\n\n  // Defined on next step\n\n  handleButtonPress = (loading) => {\n    this.setState({ loading });\n  }\n\n  render() {\n    const { loading } = this.state;\n\n    return (\n      <SafeAreaView style={[styles.main, android]}>\n        <Text style={styles.toolbar}>Animated containers</Text>\n        <View style={styles.content}>\n          <Button\n            label=\"Login\"\n            loading={loading}\n            onPress={this.handleButtonPress}\n          />\n        </View>\n      </SafeAreaView>\n    );\n  }\n}\n```", "```jsx\n  componentWillMount() {\n    if (Platform.OS === 'android') {\n      UIManager.setLayoutAnimationEnabledExperimental(true);\n    }\n  }\n```", "```jsx\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n  },\n  toolbar: {\n    backgroundColor: '#f39c12',\n    color: '#fff',\n    fontSize: 22,\n    padding: 20,\n    textAlign: 'center',\n  },\n  content: {\n    padding: 10,\n    backgroundColor: '#ecf0f1',\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```"]