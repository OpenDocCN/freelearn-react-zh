- en: Using the Link and NavLink Components to Navigate to a Route
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Link 和 NavLink 组件导航到路由
- en: React-Router provides the `<Link>` and `<NavLink>` components, which allow you
    to navigate to different routes defined in the application. These navigation components
    can be thought of as being like anchor links on the page that allow you to navigate
    to other pages in the site. In a traditional website, when you navigate through
    the application using anchor links, it results in a page refresh, and all the
    components in the page are re-rendered. Navigation links created with `<Link>`
    and `<NavLink>` do not result in a page refresh, and only those certain sections
    of the page that are defined using the `<Route>` and match the URL path are updated.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React-Router 提供了 `<Link>` 和 `<NavLink>` 组件，允许您导航到应用程序中定义的不同路由。这些导航组件可以被视为页面上的锚链接，允许您导航到站点中的其他页面。在传统网站中，使用锚链接导航应用程序会导致页面刷新，并且页面中的所有组件都会重新渲染。使用
    `<Link>` 和 `<NavLink>` 创建的导航链接不会导致页面刷新，只有使用 `<Route>` 定义的页面特定部分并匹配 URL 路径的部分会更新。
- en: Similar to a `<Route>` component, the navigation components `<Link>` and `<NavLink>`
    are React components that allow you to define navigation links declaratively.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `<Route>` 组件类似，导航组件 `<Link>` 和 `<NavLink>` 是 React 组件，允许您声明性地定义导航链接。
- en: 'In this chapter, we will take a look at the various options available for navigating
    to routes defined in the application. This includes the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看导航到应用程序中定义的路由的各种选项。这包括以下内容：
- en: The `<Link>` component and its props
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<Link>` 组件及其属性'
- en: The `<NavLink>` component and its props
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<NavLink>` 组件及其属性'
- en: Navigating to a nested route using the `match` prop
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `match` 属性导航到嵌套路由
- en: Navigating to a route programmatically using `history`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `history` 程序化地导航到路由
- en: Using a High Order Component `withRouter`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用高阶组件 `withRouter`
- en: Preventing route transitions using the `<Prompt>` component
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `<Prompt>` 组件阻止路由转换
- en: <Link> component
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <Link> 组件
- en: 'A `<Link>` component is used to navigate to an `<indexentry content=" component:about">`
    existing route that is defined using the `<Route>` component. To navigate to a
    route, specify the pathname used in the route as a value to the `to` prop:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `<Link>` 组件导航到使用 `<Route>` 组件定义的现有路由。要导航到一个路由，将路由中使用的路径名指定为 `to` 属性的值：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Notice that the `to` prop''s value is the same as the value assigned to the
    `path` prop in `<Route>`. The page now renders two links:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `to` 属性的值与 `<Route>` 中分配给 `path` 属性的值相同。页面现在呈现两个链接：
- en: '![](Images/935a19d9-f2c7-4d1e-af10-4ce9d5dacb91.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/935a19d9-f2c7-4d1e-af10-4ce9d5dacb91.png)'
- en: When you click on Home, you will see the text Inside Home route displayed, and,
    when you click on Dashboard, you will be navigated to the route with its `path` prop
    set to `/dashboard`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击主页时，您将看到显示的文本“Inside Home route”，当您点击仪表板时，您将被导航到其 `path` 属性设置为 `/dashboard`
    的路由。
- en: When you navigate to a route using `<Link>`, `history.push()` is called, which
    adds an entry to the history stack. Thus, when you click the browser's back button,
    you will be navigated to the previous route that you were accessing (the Home
    route). As mentioned in the previous chapter, the `history` library is used by
    React-Router to maintain the state of the application as the user traverses through
    various routes during the application journey.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用 `<Link>` 导航到一个路由时，会调用 `history.push()`，这会向历史堆栈添加一个条目。因此，当您点击浏览器的返回按钮时，您将被导航到之前访问的上一个路由（主页路由）。如前一章所述，React-Router
    使用 `history` 库来在用户在应用程序旅程中穿越各种路由时维护应用程序的状态。
- en: The `<Link>` component has two other props—`replace` and `innerRef`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Link>` 组件还有两个其他属性——`replace` 和 `innerRef`。'
- en: replace prop
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: replace 属性
- en: 'The `replace` prop in `<Link>` calls `history.replace()`, which replaces the
    current entry in the history stack with the new path name mentioned in the `to` prop:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`replace`属性在`<Link>`中调用`history.replace()`，用`to`属性中提到的新路径名替换历史堆栈中的当前条目：'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For example, if you access the page at the path `/home`, accessing the preceding
    link will replace the current entry in the history stack with `/dashboard`, which
    basically replaces the entry `/home` with `/dashboard`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您访问路径为`/home`的页面，则访问上述链接将用`/dashboard`替换历史堆栈中的当前条目，这基本上将条目`/home`替换为`/dashboard`。
- en: innerRef prop
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: innerRef属性
- en: React provides `ref` to get a reference to the rendered DOM element. This reference
    (`ref`) can then be used to perform certain operations outside the regular flow,
    such as focusing on the input element, media playback, and so on. `<Link>` is
    a composite component and it renders an anchor element on the DOM.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: React提供`ref`来获取对渲染的DOM元素的引用。然后可以使用此引用（`ref`）来执行常规流程之外的某些操作，例如聚焦输入元素，媒体播放等。`<Link>`是一个复合组件，在DOM上呈现一个锚元素。
- en: 'The `<Link>` component mentioned in the previous code snippet translates to
    anchor elements as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中提到的`<Link>`组件翻译为以下锚元素：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To get a reference to this rendered anchor element, the prop `innerRef` is
    added to `<Link>`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取对此渲染的锚元素的引用，需要将`innerRef`属性添加到`<Link>`中：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `innerRef` prop accepts a callback function as its value; here, a function
    `refCallback` is specified as a value to the `innerRef` prop. The `refCallback`
    gets the reference to the inner element of the `<Link>` component:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`innerRef`属性接受回调函数作为其值；在这里，函数`refCallback`被指定为`innerRef`属性的值。`refCallback`获取对`<Link>`组件的内部元素的引用：'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The callback function—`refCallback`—is called when the `<Link>` component mounts.
    From the preceding code snippet, we can see that a `mouseover` handler is added
    for both the anchor elements rendered by the two `<Link>` components. When the
    user hovers over the link, the corresponding anchor gets a focus.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数`refCallback`在`<Link>`组件挂载时被调用。从上述代码片段中，我们可以看到为两个`<Link>`组件渲染的锚元素都添加了`mouseover`处理程序。当用户悬停在链接上时，相应的锚点获得焦点。
- en: to prop with an object
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有对象的to属性
- en: 'The `to` prop can be either a string or an object. The object can contain the
    following properties:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`to`属性可以是字符串，也可以是对象。该对象可以包含以下属性：'
- en: '`pathname`: The path to navigate to'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pathname`：要导航到的路径'
- en: '`search`: The query parameters to the path, represented as a string value'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`search`：路径的查询参数，表示为字符串值'
- en: '`hash`: a hash string to add to the URL'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hash`：要添加到URL的哈希字符串'
- en: '`state`: an object containing state information that the rendered component
    can consume'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`：包含渲染组件可以使用的状态信息的对象'
- en: 'Using these parameters, let''s add a `<Link>` component:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些参数，让我们添加一个`<Link>`组件：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code translates to the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码翻译为以下内容：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `state` information is not included in the URL path; however, it''s available
    to the component that gets rendered as a result of a `<Route>` match:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`state`信息不包含在URL路径中；但是，它可用于作为`<Route>`匹配的结果呈现的组件：'
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `location` object contains all of the previously defined parameters, including
    the `state` object.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`location`对象包含所有先前定义的参数，包括`state`对象。'
- en: The `state` object can be used to store data as the user navigates through the
    application and provide this data to the component that gets rendered next as
    a result of `<Route>` match.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`state`对象可用于在用户浏览应用程序时存储数据，并将此数据提供给由于`<Route>`匹配而呈现的下一个组件。'
- en: <NavLink> component
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <NavLink>组件
- en: The `<NavLink>` component is similar to the `<Link>` component, except that
    several props can be specified that help you to conditionally add styling attributes
    to the rendered element. It accepts the same set of props as the `<Link>` component
    (`to`, `replace`, and `innerRef`) for navigating to a route, and it includes props
    to style the selected route.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`<NavLink>`组件类似于`<Link>`组件，不同之处在于可以指定多个属性，这些属性可以帮助您有条件地向呈现的元素添加样式属性。它接受与`<Link>`组件相同的一组属性（`to`，`replace`和`innerRef`）用于导航到一个路由，并包括用于样式化选定路由的属性。'
- en: Let's take a look at these props that help you style the `<NavLink>` component.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些属性，它们可以帮助您为`<NavLink>`组件设置样式。
- en: activeClassName prop
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: activeClassName属性
- en: 'By default, the class name `active` is applied to the active `<NavLink>` component.
    For example, when a `<NavLink>` is clicked and the corresponding route is rendered,
    the selected `<NavLink>` has its class name set to `active`. To change this class
    name, specify the `activeClassName` prop on the `<NavLink>` component with its
    value set as the CSS class name that you want to apply:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，类名`active`将应用于活动的`<NavLink>`组件。例如，当点击`<NavLink>`并呈现相应的路由时，所选的`<NavLink>`的类名将设置为`active`。要更改此类名，请在`<NavLink>`组件上指定`activeClassName`属性，并将其值设置为要应用的CSS类名：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next step is to specify the styles for the CSS class `selectedLink` in
    your application''s CSS file. Note that the first `<NavLink>` does not specify
    the `activeClassName` prop. In this case, when the `<NavLink>` is clicked, the `active` class
    is added:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在应用程序的CSS文件中指定CSS类`selectedLink`的样式。请注意，第一个`<NavLink>`没有指定`activeClassName`属性。在这种情况下，当点击`<NavLink>`时，将添加`active`类：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'However, when the second `<NavLink>` is clicked, the `selectedLink` class is
    applied:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当点击第二个`<NavLink>`时，将应用`selectedLink`类：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: activeStyle prop
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: activeStyle属性
- en: 'The `activeStyle` prop is also used to style the selected `<NavLink>`. However,
    instead of providing a class to apply when the `<NavLink>` is selected, the CSS
    style properties can be provided inline:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeStyle`属性也用于为选定的`<NavLink>`设置样式。但是，与其在`<NavLink>`被选中时提供一个类不同，可以在内联中提供CSS样式属性：'
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: exact prop
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: exact属性
- en: When you click on the `<NavLink>` with the `to` prop `/dashboard`, the `active`
    class (or inline style specified in `activeStyle` prop) is applied to both the
    `<NavLink>` components in the page. Similar to the `<Route>` component, the `/` in
    `/dashboard` matches the path specified in the `to` prop, and thus the active
    class is applied to both the `<NavLink>` components.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击具有`to`属性`/dashboard`的`<NavLink>`时，`active`类（或在`activeStyle`属性中指定的内联样式）将应用于页面中的两个`<NavLink>`组件。与`<Route>`组件类似，`/dashboard`中的`/`与`to`属性中指定的路径匹配，因此将`active`类应用于两个`<NavLink>`组件。
- en: 'In this case, the `exact` prop can be used to apply the `active` class or `activeStyle`
    only when the path matches the browser''s URL:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`exact`属性可用于仅在路径与浏览器的URL匹配时应用`active`类或`activeStyle`。
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: strict prop
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: strict属性
- en: 'The `<NavLink>` component also supports the `strict` prop, which can be used
    to match the trailing slash specified in the `to` prop:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`<NavLink>`组件还支持`strict`属性，可用于匹配`to`属性中指定的尾随斜杠。'
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, the class `selectedLink` is applied to the `<NavLink>` component only
    when the browser's URL path matches the path `/dashboard/`—for example, when a
    trailing slash is present in the URL.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当浏览器的URL路径匹配路径“/dashboard/”时，类“selectedLink”仅应用于`<NavLink>`组件，例如，当URL中存在尾随斜杠时。
- en: isActive prop
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: isActive属性
- en: 'The `isActive` prop is used to determine whether the `<NavLink>` component
    should have the `active` class applied (or inline styles specified in `activeStyle`
    prop). The function specified as a value to the `isActive` prop should return
    a Boolean value:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`isActive` 属性用于确定 `<NavLink>` 组件是否应用 `active` 类（或在 `activeStyle` 属性中指定的内联样式）。作为
    `isActive` 属性值指定的函数应返回一个布尔值：'
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: From the preceding example, the function accepts two parameters—`match` and
    `location`. The styles defined in the `activeStyle` prop are applied only when
    the condition `match.isExact && searchParams.has('id')` evaluates to true, so,
    only when the `match` is `exact` and the URL has a query parameter `id`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的例子中，该函数接受两个参数——`match` 和 `location`。仅当条件 `match.isExact && searchParams.has('id')`
    评估为 true 时，才会应用在 `activeStyle` 属性中定义的样式，因此，只有当 `match` 是 `exact` 并且 URL 具有查询参数
    `id` 时。
- en: When the browser's URL is `/user`, the corresponding route defined with `<Route>`
    is displayed. However, the `<NavLink>` component will have the default styling
    and not the styles mentioned in the `activeStyle` prop, since the query parameter
    `id` is missing.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器的 URL 是 `/user` 时，与 `<Route>` 定义的相应路由将显示。然而，`<NavLink>` 组件将具有默认样式，而不是 `activeStyle`
    属性中提到的样式，因为缺少查询参数 `id`。
- en: location prop
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位置属性
- en: 'The `isActive` function in `<NavLink>` receives the browser''s history `location` and
    determines whether the browser''s `location.pathname` matches the given condition.
    To provide a different location, include the `location` prop:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`<NavLink>` 中的 `isActive` 函数接收浏览器的历史 `location`，并确定浏览器的 `location.pathname`
    是否与给定条件匹配。要提供不同的位置，包括 `location` 属性：'
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice that the `to` prop doesn't specify the `search` parameter; however, the
    `location` prop includes it, and thus, when the browser's location is `/user`,
    the `isActive` function returns true, since the search parameter includes the
    `id` property.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`to` 属性没有指定 `search` 参数；然而，`location` 属性包括它，因此当浏览器的位置是 `/user` 时，`isActive`
    函数返回 true，因为搜索参数包括 `id` 属性。
- en: Navigating to nested routes
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航到嵌套路由
- en: 'In the last chapter, we saw how to create nested routes using the `match` prop
    that the rendered component receives. The `match.url` property contains the browser''s
    URL path that matched the `<Route>` component''s path. Similarly, the `<Link>`
    and `<NavLink>` components can be used to create navigation links to access these
    nested routes:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到如何使用渲染组件接收的 `match` 属性创建嵌套路由。`match.url` 属性包含与 `<Route>` 组件的路径匹配的浏览器
    URL 路径。同样，`<Link>` 和 `<NavLink>` 组件可用于创建导航链接以访问这些嵌套路由：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code snippet, the `<Link>` and `<NavLink>` components make
    use of `match.url` to get a reference to the current rendered route and add the
    additional path values required to navigate to the nested route.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`<Link>` 和 `<NavLink>` 组件利用 `match.url` 来获取对当前渲染路由的引用，并添加所需的附加路径值以导航到嵌套路由。
- en: Navigating to a route programmatically using history
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用历史对象以编程方式导航到路由
- en: 'The `<Link>` and `<NavLink>` components render anchor links on the page, which
    allow you to navigate from the current route to the new route. However, in many
    cases, the user should be navigated to a new route programmatically when an event
    occurs. For example, the user should be navigated to a new route upon clicking
    the Submit button in the login form. The `history` object available to the rendered
    component can be used in such cases:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Link>` 和 `<NavLink>` 组件在页面上呈现锚链接，允许您从当前路由导航到新路由。然而，在许多情况下，当事件发生时，用户应该以编程方式导航到新的路由。例如，在登录表单中点击提交按钮时，用户应该被导航到新的路由。在这种情况下，渲染组件可用的
    `history` 对象可以被使用：'
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, the `DashboardComponent` receives `props` as its argument, which contains
    the `history` object. The `onClick` handler calls `props.history.push` with the
    pathname `/user`. This call adds an entry to the history stack, and navigates
    the user to the `<Route>` with the path `/user`. The `history` object can also
    be used to replace the current entry in the history stack by using `history.replace` in
    place of `history.push`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`DashboardComponent`将`props`作为其参数，其中包含`history`对象。`onClick`处理程序调用`props.history.push`，路径名为`/user`。此调用将向历史堆栈添加一个条目，并将用户导航到路径为`/user`的`<Route>`。`history`对象还可以用于使用`history.replace`替换历史堆栈中的当前条目，而不是使用`history.push`。
- en: Using the withRouter higher–order component
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用withRouter高阶组件
- en: The `history` object is available to the component rendered with a `<Route>`
    match. In the preceding example, the `DashboardComponent` was rendered as a result
    of navigation to the path `/dashboard`. The rendered component received the `props`,
    which contained the `history` object (as well as `match`, `location`, and `staticContext`).
    In a case where, the rendered component on the page is not the outcome of a route
    navigation, the `history` object will not be available to the component.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`history`对象可用于使用`<Route>`匹配渲染的组件。在前面的示例中，`DashboardComponent`作为导航到路径`/dashboard`的结果进行了渲染。渲染的组件接收了包含`history`对象（以及`match`，`location`和`staticContext`）的`props`。在页面上渲染的组件不是路由导航的结果时，`history`对象将不可用于该组件。'
- en: 'Consider a `FooterComponent` included in `App.js` :'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑在`App.js`中包含的`FooterComponent`：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `FooterComponent` has two buttons that call `history.push` to navigate
    to one of the pages in the application. On clicking the button, the error `TypeError:
    Cannot read property ''push'' of undefined` is thrown. The error is thrown because
    the `history` object is not available in the `props` property, as the component
    is not rendered as a result of navigation. To circumvent this, use the higher-order
    component `withRouter`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`FooterComponent`有两个按钮，调用`history.push`导航到应用程序中的一个页面。单击按钮时，会抛出错误`TypeError:
    Cannot read property ''push'' of undefined`。错误是因为`history`对象在`props`属性中不可用，因为该组件不是作为导航的结果进行渲染的。为了避免这种情况，使用高阶组件`withRouter`：'
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, the `withRouter` function defined in the `react-router` package accepts
    a React component as its argument and augments it to provide the necessary objects
    on the `props` property—`history`, `match`, `location`, and `staticContext`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`react-router`包中定义的`withRouter`函数接受一个React组件作为其参数，并增强它以在`props`属性上提供必要的对象—`history`，`match`，`location`和`staticContext`。
- en: 'React documentation on HOC: A higher-order component is a function that takes
    a component and returns a new component**.** Although a component transforms props
    into UI, a higher-order component transforms a component into another component.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有关HOC的React文档：高阶组件是一个接受组件并返回新组件的函数。尽管组件将props转换为UI，但高阶组件将组件转换为另一个组件。
- en: 'A component wrapped inside a `withRouter` HOC can define routes and navigation
    links using `<Route>`, `<Link>`, and `<NavLink>`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 包装在`withRouter` HOC中的组件可以使用`<Route>`，`<Link>`和`<NavLink>`定义路由和导航链接：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding code snippet, the `withRouter` HOC enables the component to
    get the context of the router, and hence makes components such as `Link`, `NavLink`,
    and `Route` available.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`withRouter` HOC使组件能够获取路由器的上下文，因此使诸如`Link`，`NavLink`和`Route`之类的组件可用。
- en: Preventing transitions with <Prompt>
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用<Prompt>阻止转换
- en: When you navigate between the pages in the application, the transition to the
    new route occurs instantly. However, there are scenarios in which you want to
    prevent this transition based on the state of the application. One such common
    example is when a user has entered data into form fields and has spent several
    minutes (or hours) filling up the form data. If the user clicks on a navigation
    link accidentally, all the data entered in the form will be lost. The user should
    be notified of this route navigation, so that the user gets a chance to save the
    data entered into the form.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在应用程序中的页面之间导航时，转换到新路由会立即发生。然而，有些情况下，您希望根据应用程序的状态来阻止这种转换。一个常见的例子是，当用户在表单字段中输入数据并花费了几分钟（或几个小时）填写表单数据时。如果用户意外点击导航链接，所有在表单中输入的数据将丢失。用户应该被通知这种路由导航，以便用户有机会保存输入到表单中的数据。
- en: 'Traditional websites keep track of the state of the form and display a confirmation
    message when the user tries to navigate away from a page that contains a form
    that has not been submitted to the server. In these scenarios, a confirmation
    dialog box is shown with two options, OK and CANCEL; the former option allows
    the user to transition to the next step and the latter cancels the transition:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 传统网站会跟踪表单的状态，并在用户尝试离开包含尚未提交到服务器的表单的页面时显示确认消息。在这些情况下，将显示一个带有两个选项（OK和CANCEL）的确认对话框；前者允许用户转换到下一步，后者取消转换：
- en: '![](Images/986b5084-e5e1-445d-a608-0279df2edbff.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/986b5084-e5e1-445d-a608-0279df2edbff.png)'
- en: 'React-Router provides the `<Prompt>` component, which can be used to display
    a confirmation dialog box to prevent the user from navigating away from the current
    `<Route>` accidentally:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: React-Router提供了`<Prompt>`组件，可以用来显示确认对话框，以防止用户意外离开当前的`<Route>`：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `<Prompt>` component here accepts two props—`when` and `message`. From the
    preceding code snippet, it can be seen that a confirmation dialog box with the
    message Are you sure? is shown to the user if the value of the `state` property `isFormSubmitted` is
    `true`, and when the user tries to navigate away from the current route.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Prompt>`组件在这里接受两个属性——`when`和`message`。从前面的代码片段可以看出，如果`state`属性`isFormSubmitted`的值为`true`，并且用户尝试离开当前路由时，将向用户显示带有消息“您确定吗？”的确认对话框。'
- en: Please note, the `<Prompt>` message is shown only when the user tries to navigate
    away from the current route. No message is shown when the `state` property is
    set to `true`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，只有当用户尝试离开当前路由时，才会显示`<Prompt>`消息。当`state`属性设置为`true`时，不会显示任何消息。
- en: The value assigned to the `when` prop can be any Boolean variable or a Boolean
    value. In React, the component's `state` is used as a View-Model to maintain the
    state of the rendered component. The `state` properties are ideal in cases such
    as these to determine whether the `<Prompt>` should be shown when the user tries
    to navigate away from the current route.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 分配给`when`属性的值可以是任何布尔变量或布尔值。在React中，组件的`state`被用作视图模型来维护呈现组件的状态。在这种情况下，`state`属性非常理想，可以确定当用户尝试离开当前路由时是否应该显示`<Prompt>`。
- en: 'The value of the `message` prop can be a string or a function:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`message`属性的值可以是字符串或函数：'
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The function receives the `location` parameter, which includes the location
    information about the route that the user is trying to navigate to.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接收`location`参数，其中包括用户试图导航到的路由的位置信息。
- en: Similar to other components in the `'react-router-dom'` package, the `<Prompt>`
    component should be used inside a rendered `<Route>`. When you try to use a `<Prompt>`
    without it having the context of the current route, the message. You should not
    use `<Prompt>` outside a `<Router>` is shown.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与`'react-router-dom'`包中的其他组件类似，`<Prompt>`组件应该在渲染的`<Route>`内使用。当您尝试在没有当前路由上下文的情况下使用`<Prompt>`时，会显示消息。您不应该在`<Router>`之外使用`<Prompt>`。
- en: 'It''s also possible to show a message whenever the user tries to navigate away
    from the current route (irrespective of the `state` of the application) by not
    including the `when` prop:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过不包括`when`属性来在用户尝试离开当前路由时（不考虑应用程序的`state`）显示消息。
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: More often than not, the `when` prop is included in `<Prompt>`, and the value
    assigned to the `when` prop is used to determine whether the confirmation dialog
    box should be shown.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 往往在`<Prompt>`中包含`when`属性，并且分配给`when`属性的值用于确定是否应该显示确认对话框。
- en: When you're trying these examples, ensure that you have only one `<Prompt>`
    for the given `<Route>`, else the library will report the warning `A history supports
    only one prompt at a time`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试这些示例时，请确保给定的`<Route>`只有一个`<Prompt>`，否则库将报告警告`历史记录一次只支持一个提示`。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how the `<Link>` and `<NavLink>` navigation components
    can be used to navigate to various routes defined in the application. These components
    render `anchor` links in the page, and, when the user clicks on these links, sections
    of the page are updated as opposed to doing a complete page reload, thus providing
    a lucid user experience. The `<Link>` component accepts the props `to`, `replace`,
    and `innerRef`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了如何使用`<Link>`和`<NavLink>`导航组件导航到应用程序中定义的各种路由。这些组件在页面中呈现`anchor`链接，当用户点击这些链接时，页面的部分会更新，而不是进行完整的页面重新加载，从而提供清晰的用户体验。`<Link>`组件接受`to`、`replace`和`innerRef`等props。
- en: The `<NavLink>` component is similar to the `<Link>` component, and it accepts
    all the props that the `<Link>` component works with. In addition to adding a
    link to the page, the `<NavLink>` component accepts several props—`activeClassName`,
    `activeStyle`, `exact`, `strict`, and `isActive`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`<NavLink>`组件类似于`<Link>`组件，并接受`<Link>`组件使用的所有props。除了向页面添加链接外，`<NavLink>`组件还接受几个props——`activeClassName`、`activeStyle`、`exact`、`strict`和`isActive`。'
- en: To create links to the nested routes, the `<Link>` and `<NavLink>` components
    can use the prefix `match.url` in the `to` prop. Also, you can programmatically
    navigate using `history.push` or `history.replace` in the event–handler function.
    Props—`history`, `match`, `location`, and `staticContext`—can be made available
    to components rendered outside the Route context via the `withRouter` higher order
    component. The `'react-router-dom'` package includes a `<Prompt>` component that
    can be used to display a confirmation dialog box when the user tries to navigate
    to route by accidentally clicking on a navigation link. The `<Prompt>` component
    accepts the `when` and `message` prop, and, based on the Boolean value assigned
    to the `when` prop, the message specified in the `message` prop will be shown
    to the user.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建到嵌套路由的链接，`<Link>`和`<NavLink>`组件可以在`to`属性中使用前缀`match.url`。此外，您还可以在事件处理程序函数中使用`history.push`或`history.replace`进行程序化导航。通过`withRouter`高阶组件，可以使`history`、`match`、`location`和`staticContext`等props在Route上下文之外呈现的组件中可用。`'react-router-dom'`包包括一个`<Prompt>`组件，可用于在用户尝试通过意外点击导航链接导航到路由时显示确认对话框。`<Prompt>`组件接受`when`和`message`属性，并根据分配给`when`属性的布尔值，将显示在`message`属性中指定的消息给用户。
- en: In [Chapter 4](c1e1a628-b860-4291-bbf6-f8a370050224.xhtml), *Using the Redirect
    and Switch Components*, we will take a look at the `<Redirect>` and `<Switch>` components.
    Also, we will see how these components can be used to protect the routes and display
    a Page Not Found page when none of the routes in the page match the requested
    URL.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](c1e1a628-b860-4291-bbf6-f8a370050224.xhtml)中，*使用重定向和切换组件*，我们将看看`<Redirect>`和`<Switch>`组件。此外，我们将看到这些组件如何用于保护路由，并在页面中没有任何路由匹配请求的URL时显示一个未找到页面。
