- en: Using the Redirect and Switch Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用重定向和切换组件
- en: Redirecting the user from one route to the other can be achieved using React-Router's
    `<Redirect>` component. In traditional websites, where pages are rendered on the
    server side, the web server hosting the application is configured with rewrite
    rules that redirect the user to a different URL. This redirection could be used
    when the content has moved to a new page, and in cases where certain pages of
    the site are still under construction. HTTP redirection is an expensive operation
    and thus the application's performance is also affected.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React-Router的`<Redirect>`组件可以将用户从一个路由重定向到另一个路由。在传统网站中，页面是在服务器端呈现的，托管应用程序的Web服务器配置了重写规则，将用户重定向到不同的URL。当内容已经移动到新页面或者网站的某些页面仍在建设中时，可以使用此重定向。HTTP重定向是一项昂贵的操作，因此也会影响应用程序的性能。
- en: In **single–page application **(**SPA**), the redirection occurs on the browser,
    where the user is redirected to a different route based on a certain condition.
    This redirection is faster, since there's no HTTP roundtrip involved, and the
    transition is similar to navigating from one route to the other using the `<Link>`
    or `<NavLink>` components.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在单页应用程序（SPA）中，重定向发生在浏览器上，根据特定条件将用户重定向到不同的路由。这种重定向更快，因为没有涉及HTTP往返，并且转换类似于使用`<Link>`或`<NavLink>`组件从一个路由导航到另一个路由。
- en: 'In this chapter, the following topics are discussed:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论以下主题：
- en: '`<Redirect>` component: Redirecting the user from one route to the other route'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<Redirect>`组件：将用户从一个路由重定向到另一个路由'
- en: 'Protecting routes and authorization: A use case where the user is redirected
    to the login page when an attempt is made to access a protected route'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护路由和授权：一种情况是当用户尝试访问受保护的路由时，将用户重定向到登录页面
- en: '`<Switch>` component:  Rendering the first matching `<Route>`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<Switch>`组件：渲染第一个匹配的`<Route>`'
- en: 'Adding a 404 Page Not Found page: A use case where `<Switch>` and `<Route>`
    or `<Switch>` and `<Redirect>` components are used to render a 404 page when none
    of the `<Route>` components match the browser''s URL path'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加404页面未找到页面：一种情况是当没有任何`<Route>`组件匹配浏览器的URL路径时，使用`<Switch>`和`<Route>`或`<Switch>`和`<Redirect>`组件来渲染404页面
- en: The <Redirect> component
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<Redirect>`组件'
- en: 'The `<Redirect>` component is included in the `react-router-dom` package. It
    helps in redirecting the user from the component where it''s included to the route
    specified in the `''to''` prop:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Redirect>`组件包含在`react-router-dom`包中。它帮助将用户从包含它的组件重定向到`''to''`属性中指定的路由：'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding scenario, when `HomeComponent` is rendered (based on a `<Route>`
    match), the user is redirected to the `'/dashboard'` route. For example, when
    the user accesses the home page (at path `'/'`), the `<Route>` with the path `'/'`
    renders the previous component and then the user is immediately redirected to
    the `<Route>` with its path value as `'/dashboard'`. This is similar to how a
    `<Link>` or `<NavLink>` component with a `'to'` prop is used to navigate the user
    to a different route. Here, instead of triggering the navigation as a result of
    a user action, the redirection happens when the component is rendered.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，当`HomeComponent`被渲染时（基于`<Route>`匹配），用户将被重定向到`'/dashboard'`路由。例如，当用户访问主页（路径为`'/'`）时，具有路径`'/'`的`<Route>`会渲染先前的组件，然后用户立即被重定向到具有路径值`'/dashboard'`的`<Route>`。这类似于使用带有`'to'`属性的`<Link>`或`<NavLink>`组件将用户导航到不同的路由。在这里，重定向发生在组件被渲染时，而不是作为用户操作的结果触发导航。
- en: The redirection example mentioned previously is ideal in scenarios where certain
    pages in the application have moved to a different directory.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 先前提到的重定向示例在应用程序中的某些页面已经移动到不同的目录的情况下是理想的。
- en: The `<Redirect>` component is similar to other components in React-Router, such
    as `<Route>` and `<Link>`. As observed previously, it's a React component that
    can be included in the render function. Also, the `<Redirect>` component accepts
    a similar set of props to the `<Link>` component.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Redirect>`组件类似于React-Router中的其他组件，如`<Route>`和`<Link>`。正如之前观察到的那样，它是一个可以包含在渲染函数中的React组件。此外，`<Redirect>`组件接受与`<Link>`组件相似的一组props。'
- en: The to prop
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: to属性
- en: The to prop is used to specify the route to which the user should be redirected.
    If a matching `<Route>` is found, the user is redirected to the specified path
    and the corresponding component is rendered.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: to属性用于指定用户应该被重定向到的路由。如果找到匹配的`<Route>`，用户将被重定向到指定的路径，并渲染相应的组件。
- en: 'The to prop can also accept an object that specifies the values for the `pathname`,
    `search`, `hash`, and `state` properties:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: to属性还可以接受一个对象，该对象指定了`pathname`、`search`、`hash`和`state`属性的值：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Similar to the `<Link>` component, the previously mentioned properties are
    specified in the to prop of the `<Redirect>` component. Notice that the state
    property has the value `{ from: match.url }`.  Here, `match.url` provides the
    current value of the browser''s URL path and this value is then provided to the
    rendered component when the redirection occurs.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '与`<Link>`组件类似，前面提到的属性被指定在`<Redirect>`组件的to属性中。请注意，状态属性的值为`{ from: match.url
    }`。在这里，`match.url`提供了浏览器URL路径的当前值，然后在重定向发生时将该值提供给渲染的组件。'
- en: 'The rendered component can then read the state information using `this.props.location.state`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，渲染的组件可以使用`this.props.location.state`来读取状态信息：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding example, `DashboardComponent` is rendered as a result of a
    redirection from the `HomeComponent`. The value of `location.state.from` shares
    the path information to the redirected component about the page from which the
    redirection occurred. This is useful when you have a generic page to which you
    want to be redirected and the redirected page has to display information about
    the path from which the redirection occurred. For example, when an error occurs
    in the application, the user should be redirected to a page that renders the error
    message, providing information on the page where the error occurred. In this case,
    the state information could include properties—`errorMessage` and `from`; the
    latter's value as `match.url` that is the page where the error occurred.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`DashboardComponent`作为从`HomeComponent`重定向的结果进行渲染。`location.state.from`的值与被重定向的组件共享有关重定向发生的页面的路径信息。当您希望被重定向到一个通用页面，并且被重定向的页面必须显示有关重定向发生的路径的信息时，这将非常有用。例如，当应用程序发生错误时，用户应该被重定向到一个呈现错误消息的页面，提供有关发生错误的页面的信息。在这种情况下，状态信息可以包括属性`errorMessage`和`from`；后者的值为`match.url`，即发生错误的页面。
- en: If the redirected `<Route>` is not found, the browser's URL is updated and no
    errors are thrown. This is by design; ideally, if there is no matching route,
    the user should be redirected to a `404` or a `Page Not Found` page. The `<Route>`
    to render when there's no match is discussed in the next section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未找到被重定向的`<Route>`，浏览器的URL将被更新，不会抛出错误。这是有意设计的；理想情况下，如果没有匹配的路由，用户应该被重定向到一个`404`或`Page
    Not Found`页面。在下一节中将讨论当没有匹配时渲染的`<Route>`。
- en: 'Inside the component, when you try to redirect to the same route, React-Router
    throws a warning message Warning: You tried to redirect to the same route you''re
    currently on: `"/home"`. This check ensures that the redirect does not lead to
    an infinite loop.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '在组件内部，当您尝试重定向到相同的路由时，React-Router会抛出警告消息Warning: You tried to redirect to the
    same route you''re currently on: `"/home"`。这个检查确保重定向不会导致无限循环。'
- en: It's also possible to run into a situation where the redirected component includes
    a `<Redirect>` in its render method, redirecting back to the same route, that
    is, following this route redirect `path: /home => /dashboard => /home`. This runs
    into a loop until React stops rendering the component; React then throws an error
    Maximum update depth exceeded. This can happen when a component repeatedly calls
    `setState` inside `componentWillUpdate` or `componentDidUpdate`. React limits
    the number of nested updates to prevent infinite loops. React-Router uses state
    to keep track of the user's location in the application journey and thus the preceding
    error occurs when React tries to update the state several times because of redirection.
    When working with redirection, you need to ensure that it does not lead to an
    infinite loop of redirection.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '还可能遇到这样的情况，被重定向的组件在其渲染方法中包含一个`<Redirect>`，将用户重定向回相同的路由，也就是说，按照这个路由重定向`path:
    /home => /dashboard => /home`。这样会一直循环，直到React停止渲染组件；然后React会抛出一个错误，最大更新深度超过。当组件在`componentWillUpdate`或`componentDidUpdate`中重复调用`setState`时，就会发生这种情况。React限制了嵌套更新的次数，以防止无限循环。React-Router使用状态来跟踪用户在应用程序旅程中的位置，因此在重定向时，由于重定向的原因，React尝试多次更新状态而导致前面的错误发生。在处理重定向时，您需要确保它不会导致无限循环的重定向。'
- en: The push prop
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推送属性
- en: 'The `<Redirect>` component redirects the user to the given path by calling
    `history.replace(<path>)`, that is, replacing the current entry in the history
    stack with the new path. By specifying the push prop in the `<Redirect>` component, history.push
    is called instead of `history.replace`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Redirect>`组件通过调用`history.replace(<path>)`将用户重定向到给定的路径，即用新路径替换历史堆栈中的当前条目。通过在`<Redirect>`组件中指定推送属性，将调用`history.push`而不是`history.replace`：'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Protecting routes and authorization
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护路由和授权
- en: The routes defined using the `<Route>` component can be accessed through the
    browser's URL, by navigating to the route using `<Link>` or `<NavLink>`, or by
    redirecting the user with the `<Redirect>` component. However, in most applications,
    some of the routes should be accessible only to authorized or logged-in users.
    For example, say the `/user` path displays the logged-in user's data; this path
    should be protected and only the logged-in user should be allowed to access the
    route. In these cases, the `<Redirect>` component comes in handy for redirecting
    the user to the login page (at the path `/login`) when you try to access the path
    `/user`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`<Route>`组件定义的路由可以通过浏览器的URL访问，通过使用`<Link>`或`<NavLink>`导航到路由，或者通过使用`<Redirect>`组件将用户重定向。但是，在大多数应用程序中，一些路由应该只对授权或已登录的用户可用。例如，假设`/user`路径显示已登录用户的数据；这个路径应该受到保护，只有已登录用户才能访问该路径。在这些情况下，当您尝试访问路径`/user`时，`<Redirect>`组件非常有用，它会将用户重定向到登录页面（在路径`/login`）。
- en: 'To demonstrate this, let''s create a component called `UserComponent`, which
    will be rendered when you try to access the path `/user`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这一点，让我们创建一个名为`UserComponent`的组件，当您尝试访问路径`/user`时，它将被渲染出来：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: From the preceding code snippet, we can see that `UserComponent` displays state
    information available in t`his.props.location` and the LOGOUT button.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码片段中，我们可以看到`UserComponent`显示了在`this.props.location`中可用的状态信息和LOGOUT按钮。
- en: 'To check whether the user has logged in, a request to the server should be
    made to check if the user''s session exists. However, in our case, a check to
    see if the user is logged in would be made by referring to a variable in the browser''s
    `localStorage`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查用户是否已登录，应该向服务器发出请求，以检查用户的会话是否存在。但是，在我们的情况下，通过引用浏览器的`localStorage`中的变量来检查用户是否已登录：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, the component's state property, `isUserLoggedIn`, will be updated with
    the value stored in the localStorage variable of the same name.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，组件的状态属性`isUserLoggedIn`将使用存储在同名localStorage变量中的值进行更新。
- en: 'The next step is to use this state information in the render function of the
    `UserComponent` class and redirect the user using the `<Redirect>` component:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在`UserComponent`类的渲染函数中使用此状态信息，并使用`<Redirect>`组件重定向用户：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, the value of the state property, `isUserLoggedIn`, is checked, and, if
    it evaluates to false, or if it's not found, then the user is redirected to the
    route with the path `'/login'`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，将检查状态属性`isUserLoggedIn`的值，如果评估为false，或者未找到，则将用户重定向到路径`'/login'`。
- en: 'The last step would be to implement the `logout` function, which is called
    when the user clicks the LOGOUT button:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是实现`logout`函数，当用户点击LOGOUT按钮时调用：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Logging the user out involves removing the `localStorage` variable and updating
    the state property `isUserLoggedIn` to `'false'`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 登出用户涉及删除`localStorage`变量并将状态属性`isUserLoggedIn`更新为`'false'`。
- en: With these changes, when the state property—`isUserLoggedIn`—is set to false,
    the `UserComponent` is rerendered and the user is redirected to the path `/login`,
    asking the user to provide credentials to access the page. Also, now when you
    try to access the path `/user` by the entering the same in the browser's address
    bar, the `<Route>` with its path prop `/user` would match. However, when `UserComponent`
    is rendered, the state property `isUserLoggedIn` would evaluate to false, redirecting
    the user to the `/login` page.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些更改，当状态属性`isUserLoggedIn`设置为false时，`UserComponent`会重新渲染，并将用户重定向到路径`/login`，要求用户提供凭据以访问页面。此外，现在当您尝试通过在浏览器地址栏中输入路径`/user`来访问时，具有路径属性`/user`的`<Route>`将匹配。然而，当`UserComponent`被渲染时，状态属性`isUserLoggedIn`将评估为false，将用户重定向到`/login`页面。
- en: Redirecting with a callback route
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用回调路由进行重定向
- en: When you try to access a protected `<Route>`, you will be redirected to the
    login page to provide credentials. After providing credentials, you should be
    redirected to the page that you tried to access earlier. For example, when you
    try to access the protected route at the path `/stocks`, you would be redirected
    to the path `/login`, and then, on providing correct credentials, you should be
    redirected to the same path `/stocks` that you tried to access earlier. However,
    from the previous example, you would be redirected to the path `/user` and the
    user's profile information would be displayed. The desired behavior is to be redirected
    to the protected route `/stocks` instead of the path `/user`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当您尝试访问受保护的`<Route>`时，将被重定向到登录页面以提供凭据。提供凭据后，您应该被重定向到之前尝试访问的页面。例如，当您尝试访问路径`/stocks`的受保护路由时，您将被重定向到路径`/login`，然后，在提供正确的凭据后，您应该被重定向到之前尝试访问的相同路径`/stocks`。然而，根据先前的示例，您将被重定向到路径`/user`，并显示用户的个人资料信息。期望的行为是重定向到受保护的路径`/stocks`，而不是路径`/user`。
- en: This can be accomplished by providing state information when redirecting the
    user.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过在重定向用户时提供状态信息来实现。
- en: 'In `StocksComponent` (a component rendered as a result of a `<Route>` match, `/stocks`),
    when you redirect the user to the login page, provide the state information in
    the to prop:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在`StocksComponent`（作为`<Route>`匹配结果呈现的组件，`/stocks`），当您将用户重定向到登录页面时，在to属性中提供状态信息：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the component's render function, the user is redirected to the login page
    using the `<Redirect>` component. The `<Redirect>` component here includes a to
    prop specifying the `pathname` to which the user should be redirected, and it
    also includes a state object mentioning the `callbackURL` property. The value
    of the `callbackURL` property is `match.url`, that is, the current browser URL
    path `/stocks`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件的渲染函数中，用户使用`<Redirect>`组件被重定向到登录页面。这里的`<Redirect>`组件包括一个to属性，指定用户应该被重定向到的`pathname`，它还包括一个状态对象，提到了`callbackURL`属性。`callbackURL`属性的值是`match.url`，即当前浏览器的URL路径`/stocks`。
- en: 'This state information can then be used in the `LoginComponent` to redirect
    the user to the path `/stocks`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以在`LoginComponent`中使用这些状态信息将用户重定向到路径`/stocks`：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, when the user provides credentials to access the protected route, the
    `<Redirect>` component redirects the user to the path mentioned in the `state.callbackURL`.
    If `callbackURL` is not available, the user would be redirected to the default
    route, which is redirected to the path `/user`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当用户提供凭据访问受保护的路由时，`<Redirect>`组件将用户重定向到`state.callbackURL`中提到的路径。如果`callbackURL`不可用，用户将被重定向到默认路由，该路由将重定向到路径`/user`。
- en: A combination of Route component props, `match.url`, and location.state can
    be used to redirect the user to the protected route that was requested earlier.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Route组件的props、`match.url`和location.state的组合可以用来将用户重定向到之前请求的受保护路由。
- en: Exclusive routing with the <Switch> component
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用<Switch>组件进行独占路由
- en: 'When a URL is presented to `<BrowserRouter>`, it will look for routes created
    with `<Route>` components and render all the routes that match the browser''s
    URL path. For example, consider the following routes:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当URL被提供给`<BrowserRouter>`时，它将寻找使用`<Route>`组件创建的路由，并渲染所有与浏览器URL路径匹配的路由。例如，考虑以下路由：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here, both the routes with the paths `/login` and `/:id` match the `/login` URL
    path. React-Router renders all the `<Route>` components that match the URL path.
    However, to render only the first matching route, the library provides the `<Switch>`
    component.  The `<Switch>` component accepts a list of `<Route>` components as
    its children and it renders only the first `<Route>` that matches the browser''s
    URL:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，具有路径`/login`和`/:id`的两个路由都匹配`/login`的URL路径。React-Router渲染所有与URL路径匹配的`<Route>`组件。然而，为了只渲染第一个匹配的路由，该库提供了`<Switch>`组件。`<Switch>`组件接受一组`<Route>`组件作为其子组件，并且只渲染与浏览器URL匹配的第一个`<Route>`：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: By wrapping a list of <Route> components inside a <Switch> component, React-Router
    sequentially searches for a <Route> matching the browser's URL path. Once a matching  <Route>
    is found, <Switch> stops the search and renders the matching <Route>.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将一组`<Route>`组件包装在`<Switch>`组件内，React-Router会顺序搜索与浏览器URL路径匹配的`<Route>`。一旦找到匹配的`<Route>`，`<Switch>`就会停止搜索并渲染匹配的`<Route>`。
- en: In the preceding example, the first <Route> in <Switch> is rendered only if
    the browser's URL path is /login and paths other than /login (/123, /products,
    /stocks and so on) would match the second route and render the corresponding component.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，如果浏览器的URL路径是/login，那么`<Switch>`中的第一个`<Route>`将被渲染，而除/login之外的路径（如/123、/products、/stocks等）将匹配第二个路由并渲染相应的组件。
- en: If the order of the previous two <Route> components is swapped (that is, the
    <Route> with path /:id is listed above the <Route> with path /login), the <Route>
    with path /login would never get rendered because <Switch> allows only one and
    the first matching route to be rendered.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果交换前两个`<Route>`组件的顺序（即，将具有路径/:id的`<Route>`列在具有路径/login的`<Route>`之上），那么具有路径/login的`<Route>`将永远不会被渲染，因为`<Switch>`只允许渲染一个第一个匹配的路由。
- en: Ordering of the <Route> components in <Switch>
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <Switch>中<Route>组件的顺序
- en: 'The ordering of the `<Route>` components inside `<Switch>` matters because
    the `<Switch>` component looks for a matching `<Route>` sequentially, and once
    a `<Route>` matching the browser''s URL is found, it stops the search. This behavior
    may not be desired and you may want to render another route listed inside `<Switch>`.
    However, it can be corrected by changing the order in which `<Route>` are listed
    in `<Switch>`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Switch>`中`<Route>`组件的顺序很重要，因为`<Switch>`组件会顺序查找匹配的`<Route>`，一旦找到与浏览器URL匹配的`<Route>`，就会停止搜索。这种行为可能不是期望的，您可能希望渲染`<Switch>`中列出的另一个路由。但是，可以通过更改在`<Switch>`中列出`<Route>`的顺序来纠正这一点：'
- en: 'In the following examples, some of the common mistakes in listing the <Route>
    components in `<Switch>` are mentioned:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，提到了在`<Switch>`中列出`<Route>`组件时的一些常见错误：
- en: <Route> with path '/' as the first child in <Switch>
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有路径'/'的`<Route>`作为`<Switch>`的第一个子级
- en: 'Consider the following code snippet:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码片段：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If the browser's URL path is `/dashboard`, it would match the first `<Route>`
    with path `/` and the `<Route>` with path `/dashboard` would never be matched
    and rendered. To fix this, either include the exact prop or list the `<Route>`
    with path `/` as the last entry in `<Switch>`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果浏览器的URL路径是`/dashboard`，它将匹配第一个路径为`/`的`<Route>`，而路径为`/dashboard`的`<Route>`将永远不会匹配和渲染。要解决这个问题，要么包括`exact`属性，要么将路径为`/`的`<Route>`列为`<Switch>`中的最后一个条目。
- en: <Route> with path params
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有路径参数的`<Route>`
- en: 'In the following code snippet, a `<Route>` with a path param is listed as the
    second entry:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，将带有路径参数的`<Route>`列为第二个条目：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the previous example, `<Route>` with path `/github` would match the URL path
    `/github` as well as path `/github/mjackson`; thus, the first `<Route>` is rendered
    even when a `<Route>` with a specific path is available. To fix this, either provide
    the exact prop or list the `<Route>` with path `/github` below the `<Route>` with
    path `/github/:userId`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，路径为`/github`的`<Route>`将匹配URL路径`/github`以及路径`/github/mjackson`；因此，即使有特定路径的`<Route>`可用，第一个`<Route>`也会被渲染。要解决这个问题，要么提供`exact`属性，要么将路径为`/github`的`<Route>`列在路径为`/github/:userId`的`<Route>`下面。
- en: From both cases mentioned in the previous paragraph, listing `<Route>` components
    with specific paths above `<Route>` components with generic paths would avoid
    undesirable results.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从前一段提到的两种情况中，将具体路径的`<Route>`组件列在通用路径的`<Route>`组件上面，可以避免不良结果。
- en: Adding a 404 – Page Not Found
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加404 - 未找到页面
- en: As mentioned, the `<Switch>` component looks through all the `<Route>` components
    sequentially for a match and stops the search once a `<Route>` with its path matching
    the browser's URL is found. This is unlike a list `<Route>` in a page, where every
    matched `<Route>` is rendered. The `<Switch>` thus becomes a good fit for rendering
    a `Page Not Found` page, that is, rendering a component when none of the `<Route>` mentioned
    as children to `<Switch>` match the browser's URL.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`<Switch>`组件会顺序查找所有`<Route>`组件，一旦找到与浏览器URL匹配的`<Route>`，就会停止搜索。这与在页面中列出`<Route>`的列表不同，页面中的每个匹配的`<Route>`都会被渲染。因此，`<Switch>`非常适合渲染`Page
    Not Found`页面，即在`<Switch>`的子级中没有任何匹配浏览器URL的`<Route>`时渲染一个组件。
- en: 'Let''s include a `<Route>` with no path prop as the last entry in `<Switch>`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`<Switch>`中包含一个没有路径属性的`<Route>`作为最后一个条目：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: From the preceding code snippet, we can see that when none of the `<Route>` with
    a path prop match the browser's URL, the last `<Route>` without the path prop
    would match and render.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码片段中，我们可以看到当没有任何带有路径属性的`<Route>`与浏览器的URL匹配时，最后一个没有路径属性的`<Route>`将匹配并渲染。
- en: It's important to include the `Page Not Found <Route>` as the last entry because
    the `<Switch>` component stops the search once a matching `<Route>` is found.
    In the preceding case, if the `<Route>` with no prop is included above other `<Route>`,
    then the `Page Not Found` route would be rendered even if a `<Route>` matching
    the browser's URL was present in the list.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 包括`Page Not Found <Route>`作为最后一个条目是很重要的，因为`<Switch>`组件一旦找到匹配的`<Route>`就会停止搜索。在前面的情况下，如果没有属性的`<Route>`被包括在其他`<Route>`上面，那么即使列表中存在与浏览器URL匹配的`<Route>`，`Page
    Not Found`路由也会被渲染。
- en: 'You could also specify a `<Route>` with its path prop value as `*` instead
    of `<Route>` with no path prop, to render a `Page Not Found` page:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以指定一个`<Route>`，其路径属性值为`*`，而不是没有路径属性的`<Route>`，以渲染`Page Not Found`页面：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In both cases, the path would match the browser's URL and render the `Page Not
    Found` page.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，路径将匹配浏览器的URL并渲染`Page Not Found`页面。
- en: Using <Redirect> in <Switch> to redirect to a Page Not Found page
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在`<Switch>`中使用`<Redirect>`重定向到一个Page Not Found页面
- en: 'The `<Switch>` component''s children can include a list of `<Route>` and `<Redirect>`
    components as well. The `<Redirect>` component, when included as the last entry
    in `<Switch>`, will redirect the user to the given path if none of the `<Route>` mentioned
    above the `<Redirect>` component match the browser''s URL:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Switch>`组件的子元素也可以包括一系列`<Route>`和`<Redirect>`组件。当包括为`<Switch>`中的最后一个条目时，`<Redirect>`组件将在没有任何在`<Redirect>`组件上面提到的`<Route>`匹配浏览器URL时将用户重定向到给定路径：'
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `<Redirect>` component mentioned previously redirects the user to the `<Route>`
    with path `/home`. This is similar to displaying a `404: Page Not Found page`;
    instead of displaying the component in line, the user is redirected to a different
    route.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的`<Redirect>`组件将用户重定向到路径为`/home`的`<Route>`。这类似于显示`404：Page Not Found`页面；而不是在行内显示组件，用户被重定向到不同的路径。
- en: For example, if the browser's URL path is `/dashboard`, the first two routes
    (with the paths `/login` and `/user`) wouldn't match, and thus the user is redirected
    using the `<Redirect>` component mentioned as the last entry in `<Switch>`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果浏览器的URL路径是`/dashboard`，前两个路径（路径为`/login`和`/user`）不会匹配，因此用户将使用在`<Switch>`中作为最后一个条目提到的`<Redirect>`组件进行重定向。
- en: Redirecting from an old path to a new path
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从旧路径重定向到新路径
- en: 'The `<Redirect>` component can also be used to redirect the user from a given
    path to a new path. The `<Redirect>` component accepts a prop,  from, which can
    be used to specify the path that should match the browser''s URL from which the
    user should be redirected. Also, the path that the user should be redirected to
    should be specified in the to prop:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Redirect>`组件也可以用于将用户从给定路径重定向到新路径。`<Redirect>`组件接受一个`from`属性，该属性可用于指定应该匹配用户应该被重定向的浏览器URL的路径。此外，应该在`to`属性中指定用户应该被重定向到的路径。'
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: From the preceding example, we can see that when the browser's URL path is `/home`,
    the `<Redirect>` component with the from prop would match the given path and redirect
    the user to the `<Route>` with the path `/login`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的例子中，我们可以看到当浏览器的URL路径是`/home`时，具有`from`属性的`<Redirect>`组件将匹配给定路径并将用户重定向到路径为`/login`的`<Route>`。
- en: The `<Redirect>` component's from prop is useful when some of the pages on the
    site have been moved to a new directory. For example, if the user page has been
    moved to a new directory path, `settings/user`, then `<Redirect from="/user" to="/settings/user"
    />` will redirect the user to the new path.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Redirect>`组件的`from`属性在网站上的一些页面已经移动到新目录时非常有用。例如，如果用户页面已经移动到新的目录路径`settings/user`，那么`<Redirect
    from="/user" to="/settings/user" />`将把用户重定向到新路径。'
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The `<Redirect>` component can be used to redirect the user from the current
    rendered route to a new route. The component accepts props: to and push. This
    redirection could be used when the components in the application have moved to
    a different directory, or when the user is not authorized to visit the page. The
    `<Redirect>` component is helpful when a user visits a protected route and only
    authorized users are allowed to view the page.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Redirect>`组件可用于将用户从当前渲染的路由重定向到新的路由。该组件接受props：to和push。当应用程序中的组件已经移动到不同的目录，或者用户未被授权访问页面时，可以使用此重定向。`<Redirect>`组件在用户访问受保护的路由并且只有授权用户被允许查看页面时非常有用。'
- en: The `<Switch>` component is used when only one `<Route>` out of a list of `<Route>`
    should be rendered. The `<Switch>` component accepts a list of `<Route>` and `<Redirect>`
    components as its children, and sequentially searches for a matching `<Route>`
    or a `<Redirect>` component. When a match is found, `<Switch>` renders the component
    and stops looking for a matching path.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Switch>`组件用于在一组`<Route>`中只渲染一个`<Route>`。`<Switch>`组件接受`<Route>`和`<Redirect>`组件的列表作为其子组件，并依次搜索匹配的`<Route>`或`<Redirect>`组件。当找到匹配时，`<Switch>`渲染该组件并停止寻找匹配的路径。'
- en: 'This behavior of `<Switch>` can be leveraged to build a `404: Page Not Found`,
    which would be rendered when none of the `<Route>` components listed in `<Switch>`
    match the browser''s URL path. By listing a `<Route>` without any path prop as
    the last entry in `<Switch>`, the `<Route>` is rendered if none of the `<Route>`
    components listed above match the browser''s URL path. Alternatively, the `<Redirect>`
    component can be listed as the last entry to redirect the user to a page when
    none of the `<Route>` components in the `<Switch>` match.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Switch>`的这种行为可以用来构建一个`404：页面未找到`，当`<Switch>`中列出的`<Route>`组件都不匹配浏览器的URL路径时，将会渲染该页面。通过在`<Switch>`的最后一个条目中列出一个没有任何路径属性的`<Route>`，如果上面列出的`<Route>`组件都不匹配浏览器的URL路径，那么将会渲染该`<Route>`。另外，也可以将`<Redirect>`组件列为最后一个条目，以在`<Switch>`中没有匹配的`<Route>`组件时将用户重定向到另一个页面。'
