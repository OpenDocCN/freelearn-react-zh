["```jsx\nlet todoId = 0;\nexport const addTodo = text => ({\n    type: 'ADD_TODO'\n    payload: {\n        text,\n        id: todoId++,\n        isCompleted: false\n    }\n})\n```", "```jsx\nexport const increment = () => ({\n    type: 'INCREMENT'\n})\n```", "```jsx\nconst todoReducer  = (state  = [], action) => { switch (action.type) { case  '**ADD_TODO**':\n            return [\n                ...state,\n                {\n                    id: action.payload.id,\n                    text: action.payload.text,\n                    isCompleted: action.payload.isCompleted\n                }\n            ];  default: return  state; } }\n```", "```jsx\nnpm install --save redux react-redux \n```", "```jsx\nexport  const  increment  = () => ({ **type:****'INCREMENT'** }); export  const  decrement  = () => ({ type: **'DECREMENT'** });\n```", "```jsx\nconst  counterReducer  = (state  =  0, action) => {    switch (action.type) { case  'INCREMENT': return  state  +  1; case  'DECREMENT': return  state  -  1; default: return  state; }\n}\n\nexport  default **counterReducer**;\n```", "```jsx\nimport { combineReducers } from  'redux'; import  counterReducer  from  './counter'; const  rootReducer  =  combineReducers({ count:  counterReducer,\n    todo: todoReducer }); export  default  rootReducer;\n```", "```jsx\nimport { createStore } from 'redux';\n\nconst  store  =  createStore(\n    rootReducer\n);\n```", "```jsx\nReactDOM.render(\n **<**Provider  store={store}**>**\n **<**Counter **/>**\n **</**Provider>,\n document.getElementById('root')\n);\n```", "```jsx\nimport { increment, decrement } from  '../actions/counter'; const  Counter  = ({ count, increment, decrement }) => ( <div> <h4>Counter</h4> <button  onClick={decrement}>-</button> <span>{count}</span> <button  onClick={increment}>+</button> </div> )\n```", "```jsx\nimport { connect } from  'react-redux'; import { increment, decrement } from  '../actions/counter';  ... const  mapStateToProps  =  state  => ({    count:  state.count });\n\nconst  mapDispatchToProps  =  dispatch  => ({    increment: () =>  dispatch(increment()),\n    decrement: () =>  dispatch(decrement()) })\n\nexport  default  connect(mapStateToProps, mapDispatchToProps)(Counter**)**;\n```", "```jsx\nnpm install --save connected-react-router  react-router  react-router-dom  history\n```", "```jsx\nimport { applyMiddleware, createStore, compose } from  'redux'; import { ConnectedRouter, connectRouter, routerMiddleware } from  'connected-react-router'; const  history  =  createBrowserHistory(); const  composeEnhancer  =  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__  ||  compose; const  store  =  createStore( connectRouter(history)(rootReducer), composeEnhancer(applyMiddleware(routerMiddleware(history))) );\n```", "```jsx\ncreateStore(reducer, preloadedState, enhancer) \n```", "```jsx\nconnectRouter(history)(rootReducer)\n```", "```jsx\ncomposeEnhancer  =  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__  ||  compose;\n... composeEnhancer(applyMiddleware(routerMiddleware(history)))\n```", "```jsx\nReactDOM.render(\n **<**Provider  store={store}> <ConnectedRouter  history={history}**>** <App  /> </ConnectedRouter> </Provider>, document.getElementById('root'));\n```", "```jsx\n<Link\n **to**={{ pathname: '/dashboard', search: 'q=1', hash: 'test',\n        state: { key: 'value' } }**}** > Dashboard </Link> ...\n<Route  path='/dashboard'  component={Dashboard}  />\n```", "```jsx\nconst  Dashboard  = ({ pathname, search, hash, state, count }) => { return ( <div> <h4>In Dashboard</h4> <div> Pathname   : {pathname}  </div> <div> Search     : {search}  </div> <div> Hash       : {hash}  </div> <div> State-Key  : {state? state.key : null} </div>  </div> ) } const  mapStateToProps  =  state  => ({ pathname:  state.router.location.pathname, search:  state.router.location.search, hash:  state.router.location.hash, state:  state.router.location.state  }); export  default  connect(mapStateToProps)(Dashboard);\n```", "```jsx\nimport {push, replace} from 'connected-react-router'; const  Dashboard  = ({ pathname, search, hash, state, count, push, replace }) => {    return ( ...\n<button  onClick={() => {push('/')}}>HOME</button> <button  onClick={() => {replace('/counter')}}>COUNTER</button>\n        ...\n ) } \nconst  mapStateToProps  =  state  => ({ ...\n}); \nconst  mapDispatchToProps  =  dispatch  => ({ push: (path) =>  dispatch(push(path**))**, replace: (path) =>  dispatch(replace(path**))** });\n\nexport  default  connect(mapStateToProps, mapDispatchToProps)(Dashboard**)**;\n```"]