- en: Redux Bindings with connected-react-router
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用connected-react-router的Redux绑定
- en: In previous chapters, we looked at how the component's state can be used to
    store model data and how React updates the view when the model is updated as a
    result of a user action. In large applications, this state information should
    be made available not only to the current component and its children but also
    to other components in the application tree. There are various state management
    libraries available that aid in keeping the user interface components in sync
    with the application state. Redux is one such library that uses a central data
    store to manage the state of the application. The store serves as a source of
    truth and the components in the application can rely on the state maintained in
    the store.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们看到了如何使用组件的状态来存储模型数据，以及当模型由于用户操作而更新时，React如何更新视图。在大型应用程序中，此状态信息不仅应该对当前组件及其子组件可用，还应该对应用程序树中的其他组件可用。有各种状态管理库可用，可帮助使用户界面组件与应用程序状态保持同步。Redux是一个这样的库，它使用一个中央数据存储来管理应用程序的状态。存储作为真相的来源，应用程序中的组件可以依赖于存储中维护的状态。
- en: 'In this chapter, we will take a look at the `connected-react-router` library,
    which provides Redux bindings for React Router. The following topics are discussed
    in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下`connected-react-router`库，它为React Router提供了Redux绑定。本章讨论以下主题：
- en: State management with Redux—An introduction to Redux concepts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Redux进行状态管理-介绍Redux概念
- en: Getting started with `connected-react-router`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用`connected-react-router`
- en: Reading the react-router state from the Redux store
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Redux存储中读取react-router状态
- en: Navigating to different routes by dispatching actions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过分派操作导航到不同路由
- en: State management with Redux
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Redux进行状态管理
- en: As mentioned, Redux uses a single store to manage the state of the application.
    Apart from `Store`, there are two other building blocks: `Actions` and `Reducers`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Redux使用单个存储来管理应用程序的状态。除了`Store`，还有另外两个构建块：`Actions`和`Reducers`。
- en: Let's take a look at how these building blocks help maintain `state` and update
    the view when `state` in `Store` changes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些构建块如何帮助维护`state`并在`Store`中的`state`更改时更新视图。
- en: Actions
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作
- en: 'Actions let you define the operations that the user can perform to update the
    state of the application. An Action is a JavaScript object of the `{ type, payload
    }` shape, where `type` is a string mentioning the user action and `payload` is
    the data with which the state should be updated:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 操作让您定义用户可以执行的操作，以更新应用程序的状态。操作是一个JavaScript对象，具有`{ type，payload }`的形状，其中`type`是指用户操作的字符串，`payload`是应该更新状态的数据：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, the `addTodo` action accepts a TODO text and indicates that the Action
    is used to add a TODO to a list of TODOs. `payload` here is an object containing
    the TODO `text`, a TODO `ID`, and a Boolean flag, `isCompleted` (set to false).
    It''s also possible to have actions that don''t require the `payload` property
    to be included. For example, consider the following action:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`addTodo`操作接受TODO文本，并指示该操作用于将TODO添加到TODO列表中。`payload`在这里是一个包含TODO `text`，TODO
    `ID`和布尔标志`isCompleted`（设置为false）的对象。也可以有不需要包含`payload`属性的操作。例如，考虑以下操作：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the `action` type `INCREMENT` indicates that the value of an entity has
    to be incremented by one. The preceding `action` does not need a `payload` property
    and based on the action type, the state of the entity can be updated.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`action`类型`INCREMENT`表示实体的值必须增加1。前面的`action`不需要`payload`属性，并且根据操作类型，可以更新实体的状态。
- en: Reducers
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减速器
- en: 'A Reducer in Redux alters the state of an entity based on the action dispatched
    to the store. A Reducer is a pure function that accepts two parameters: `state`
    and `action`. The Reducer then returns an updated state based on the value store
    in `action.type`. For example, consider the following reducer:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Redux中的Reducer根据分派到存储的操作改变实体的状态。Reducer是一个纯函数，接受两个参数：`state`和`action`。然后根据存储在`action.type`中的值返回更新后的状态。例如，考虑以下reducer：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The initial state of `todoReducer` is set to an empty array (state parameter's
    default value) and a TODO is added to the list when the action type is `ADD_TODO`.
    One of the core tenets of Redux is not to mutate the state tree, but rather return
    a new state tree as a result of an action dispatched by the component. This helps
    to keep the reducer function pure (that is, with no side effects), and helps in
    recognizing the new state change when the React component re-renders the view
    elements.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`todoReducer`的初始状态设置为空数组（状态参数的默认值），当操作类型为`ADD_TODO`时，TODO被添加到列表中。Redux的核心原则之一是不要改变状态树，而是返回一个新的状态树作为组件分派的操作的结果。这有助于保持reducer函数的纯净（即没有副作用），并有助于在React组件重新渲染视图元素时识别新的状态变化。'
- en: Similarly, there could be multiple actions that update the TODO state (such
    as `MARK_COMPLETED` and `DELETE`), and the reducer can alter the state of the
    TODO list based on the action type dispatched to the store.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，可能会有多个更新TODO状态的操作（如`MARK_COMPLETED`和`DELETE`），并且根据分派到存储的操作类型，reducer可以改变TODO列表的状态。
- en: Store
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储
- en: Store is a central data object from which the application state can be derived.
    The components in the application subscribe to the changes in the store's state
    and update the view.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 存储是一个中心数据对象，应用程序的状态可以从中派生。应用程序中的组件订阅存储状态的变化并更新视图。
- en: 'Here''s how the data flows in Redux:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Redux中数据的流动方式如下：
- en: '![](Images/cb8a8480-c8bd-4a97-af97-49da8821c08d.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cb8a8480-c8bd-4a97-af97-49da8821c08d.png)'
- en: 'The user performs an operation, such as submitting a form or clicking a button,
    thus dispatching an action to the store. The application defines various actions
    that the user can perform and reducer is coded so that it can handle these actions
    and update the state of the entity. The state of various entities in the application
    is maintained in one central location: the store. For example, the application
    could have various entities, such as Todo and the User profile, and the store
    would maintain the state information for these entities. Whenever the reducer
    updates the state value of a particular entity in the store, the user interface
    component receives an update from the store, updating the component''s state information
    and re-rendering the view with the updated state.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 用户执行操作，比如提交表单或点击按钮，从而向存储分派一个操作。应用程序定义了用户可以执行的各种操作，reducer被编码以便处理这些操作并更新实体的状态。应用程序中各种实体的状态都在一个中心位置维护：存储。例如，应用程序可能有各种实体，如Todo和用户配置文件，存储将维护这些实体的状态信息。每当reducer更新存储中特定实体的状态值时，用户界面组件从存储接收更新，更新组件的状态信息并重新渲染视图以显示更新后的状态。
- en: Redux in React
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React中的Redux
- en: 'After creating a project using the `create-react-app` CLI, include the dependencies
    `redux` and `react-redux` dependencies:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`create-react-app`CLI创建项目后，包括依赖`redux`和`react-redux`：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `redux` library includes the `createStore`, `combineReducers`, `bindActionCreators`,
    `applyMiddleware`, and `compose` helper functions; whereas the `react-redux` library
    includes Redux bindings that help your React components communicate with the Redux
    store.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`redux`库包括`createStore`、`combineReducers`、`bindActionCreators`、`applyMiddleware`和`compose`辅助函数；而`react-redux`库包括Redux绑定，帮助你的React组件与Redux存储通信。'
- en: The next step is to define actions that the user can initiate from the user
    interface. In our example, we will create a `Counter` component that can `increment`
    and `decrement` the counter value.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是定义用户可以从用户界面发起的动作。在我们的示例中，我们将创建一个`Counter`组件，该组件可以`增加`和`减少`计数器的值。
- en: 'In `actions/counter.js`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`actions/counter.js`中：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After defining actions for our counter entity, the `reducer` that updates the
    state of the `counter` needs to be defined:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在为我们的计数器实体定义动作之后，需要定义更新`counter`状态的`reducer`：
- en: 'In `reducers/counter.js`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`reducers/counter.js`中：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `reducer` defined here updates the `state` value based on the type of `action` triggered
    by the user. Similarly, you can have various reducers and actions in the application
    that update the entity's state when a certain action is triggered by the user.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里定义的`reducer`根据用户触发的`action`类型更新`state`值。同样，应用程序中可以有各种reducers和actions，它们在用户触发某个动作时更新实体的状态。
- en: The `combineReducers` utility from `redux` allows you to combine all the reducers
    into one single reducer, which can then be used in `initializing` the store for
    the application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`redux`中的`combineReducers`实用程序允许您将所有reducers组合成一个单一的reducer，然后可以在应用程序的存储中使用它来进行初始化。'
- en: 'In `reducers/index.js`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在`reducers/index.js`中：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A `rootReducer` is created using the `combineReducers` function, which accepts
    an object with a key-value mapping of an entity and a reducer. Here `counterReducer`
    is assigned to the `count` entity and `todoReducer` is assigned to an entity with
    the `todo` key.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`combineReducers`函数创建了一个`rootReducer`，它接受一个包含实体和reducer键值映射的对象。这里`counterReducer`分配给了`count`实体，`todoReducer`分配给了一个带有`todo`键的实体。
- en: '`rootReducer` is then used in the `createStore` function to create a store.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在`createStore`函数中使用`rootReducer`来创建一个store。
- en: 'In `index.js`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`中：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The store is made available to the components in the application using the
    `<Provider>` component defined in the `react-redux` library:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`react-redux`库中定义的`<Provider>`组件，将store提供给应用程序中的组件：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The components in the application can now subscribe to the state changes in
    the entities (`count` and `todo`) in the store using the `connect` higher-order
    function. A `Counter` component is created, which will display the current state
    value of `count` and will dispatch the `increment` and `decrement` actions that
    we defined in `actions/counter.js`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中的组件现在可以使用`connect`高阶函数订阅存储中实体（`count`和`todo`）的状态更改。创建了一个`Counter`组件，它将显示`count`的当前状态值，并将分发我们在`actions/counter.js`中定义的`increment`和`decrement`动作。
- en: 'In `components/counter.component.js`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在`components/counter.component.js`中：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `count`, `increment`, and `decrement` props are made available from the
    `store` using the following `connect` method:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下`connect`方法从`store`中提供`count`、`increment`和`decrement`属性：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `connect` higher-order function from `react-redux` helps you to inject the
    Redux state into your React components. The `connect` HOC accepts two arguments: `mapStateToProps` 
    and `mapDispathToProps`. As observed, the Redux state `count` property is assigned
    to the component's state `count` property in `mapStateToProps`, and similarly,
    the component can dispatch actions to the store using the `increment` and `decrement`
    actions specified in `mapDispatchToProps`. Here, to read the state values from
    the Redux store, `mapStateToProps` is used, and `connect` provides the entire
    state tree to the component so that the component can read from various objects
    in the state tree. To alter the state of the tree, `mapDispatchToProps` helps
    in dispatching actions registered with the store. The `connect` HOC provides the
    `dispatch` method so that the component can invoke actions on the store.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-redux`中的`connect`高阶函数帮助您将Redux状态注入到您的React组件中。`connect` HOC接受两个参数：`mapStateToProps`和`mapDispathToProps`。如观察到的，Redux状态`count`属性在`mapStateToProps`中分配给了组件的状态`count`属性，同样地，组件可以使用`mapDispatchToProps`中指定的`increment`和`decrement`动作向存储分发动作。在这里，为了从Redux存储中读取状态值，使用了`mapStateToProps`，`connect`提供了整个状态树给组件，以便组件可以从状态树中的各种对象中读取。为了改变状态树的状态，`mapDispatchToProps`帮助分发与存储注册的动作。`connect`
    HOC提供了`dispatch`方法，以便组件可以在存储上调用动作。'
- en: Getting started with connected-react-router
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用connected-react-router
- en: The `connected-react-router` library provides Redux bindings for React Router;
    for example, the application's history can be read from a Redux store and you
    can navigate to different routes in the application by dispatching actions to
    the store.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`connected-react-router`库为React Router提供了Redux绑定；例如，可以从Redux存储中读取应用程序的历史记录，并且可以通过向存储分发动作来导航到应用程序中的不同路由。'
- en: 'Let''s first install `connected-react-router` and other libraries using `npm`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先使用`npm`安装`connected-react-router`和其他库：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Next, we will update the store settings.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更新存储设置。
- en: 'In `index.js`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`中：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `createStore` function has the following signature:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`createStore`函数具有以下签名：'
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It accepts three parameters: the first parameter is the `reducer` function,
    which returns the next state tree given the current state tree and the action
    to handle; the second parameter specifies the initial `state` of the application
    and should be an object with the same shape as the one used in `combineReducers`;
    the third parameter specifies the store `enhancer`, which adds more capabilities
    to the store, such as time travel, persistence, and so on.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受三个参数：第一个参数是`reducer`函数，它根据当前状态树和要处理的动作返回下一个状态树；第二个参数指定应用程序的初始`state`，应该是一个与`combineReducers`中使用的形状相同的对象；第三个参数指定存储`enhancer`，它为存储添加更多功能，如时间旅行、持久性等。
- en: 'In our example, the first parameter is as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，第一个参数如下：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`connectRouter` from `connected-react-router` wraps `rootReducer` and returns
    a new root reducer with the `router` state in it. The `connectRouter` reducer
    responds to actions with type `@@router/LOCATION_CHANGE` to update the router
    state. Notice that `connectRouter` accepts the `history` object as its parameter; `connectRouter`
    then uses the history object to initialize the router state with the `location`
    and `action` properties.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`connected-react-router`中的`connectRouter`包装`rootReducer`并返回一个带有`router`状态的新根reducer。`connectRouter`
    reducer响应类型为`@@router/LOCATION_CHANGE`的动作以更新路由器状态。注意，`connectRouter`接受`history`对象作为其参数；然后使用`history`对象初始化路由器状态的`location`和`action`属性。'
- en: 'The second parameter to `createStore` is enhancer:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`createStore`的第二个参数是增强器：'
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Please note that we're specifying `enhancer` as the second parameter. The `createStore`
    method marks the second parameter as `enhancer` if it is a function and when the
    third parameter to `createStore` is not specified. The `compose` utility in `redux`
    returns a function obtained by composing given functions from right to left. In
    the previous case, we are checking whether the `Redux Devtools Extension` is available
    in the browser, which enables you to view the state of various entities in the
    application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将 `enhancer` 指定为第二个参数。如果 `createStore` 方法的第二个参数是函数，并且未指定 `createStore`
    的第三个参数，则将第二个参数标记为 `enhancer`。`redux` 中的 `compose` 实用程序返回通过从右到左组合给定函数获得的函数。在前面的情况下，我们正在检查浏览器中是否可用
    `Redux Devtools Extension`，它使您能够查看应用程序中各种实体的状态。
- en: '`routerMiddleware` defined in `connected-react-router` is a middleware function
    used to redirect the user using the provided `history` object. If an action of
    the `''CALL_HISTORY_METHOD''` type is dispatched, the middleware function will
    navigate the user to the requested route by calling one of the methods on the
    `history` object. It also prevents the action (`CALL_HISTORY_METHOD`) from reaching
    other reducers defined in the application and the middleware components that are
    defined after `routerMiddleware`.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`routerMiddleware` 在 `connected-react-router` 中定义，是一个中间件函数，用于使用提供的 `history`
    对象重定向用户。如果分发了一个 `''CALL_HISTORY_METHOD''` 类型的动作，中间件函数将通过调用 `history` 对象上的方法将用户导航到请求的路由。它还阻止了动作
    (`CALL_HISTORY_METHOD`) 到达应用程序中定义的其他 reducer 和在 `routerMiddleware` 之后定义的中间件组件。'
- en: The `applyMiddleware` utility in Redux is used to create a store enhancer, which
    applies middleware to the dispatch method of the Redux store.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Redux 中的 `applyMiddleware` 实用程序用于创建存储增强器，它将中间件应用于 Redux 存储的分发方法。
- en: 'The next step is to make the store (created with `createStore`) available to
    the components in the application using the `<Provider>` component:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用 `<Provider>` 组件使存储（使用 `createStore` 创建）可用于应用程序中的组件：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, we have wrapped the application root component inside the `<ConnectedRouter>`
    component, which, in turn, is wrapped inside the `<Provider>` component. This
    is required since `ConnectedRouter` subscribes to the changes in the `router`
    state to see whether the `location` property has changed and then calls the `history.push` method
    to navigate the user to the requested route.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将应用程序根组件包装在 `<ConnectedRouter>` 组件内部，而 `<ConnectedRouter>` 组件又包装在 `<Provider>`
    组件内部。这是必需的，因为 `ConnectedRouter` 订阅了 `router` 状态的更改，以查看 `location` 属性是否已更改，然后调用
    `history.push` 方法将用户导航到请求的路由。
- en: With these changes, the components in our application can now read the state
    information from the store and also dispatch actions to navigate to various routes
    defined in the application.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些更改，我们应用程序中的组件现在可以从存储中读取状态信息，并分发动作以导航到应用程序中定义的各种路由。
- en: Reading state information from the Redux store
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Redux 存储中读取状态信息
- en: 'To test the preceding setup, let''s first create a `<Link>` component in our
    navbar and a corresponding `<Route>` with the same path name:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试上述设置，让我们首先在我们的导航栏中创建一个 `<Link>` 组件和一个相应的具有相同路径名的 `<Route>`：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Notice that the `<Link>` component specifies the `to` object with the `pathname`,
    `search`, `hash`, and `state` properties. We will read this information from the
    Redux store in our rendered component:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`<Link>` 组件指定了带有 `pathname`、`search`、`hash` 和 `state` 属性的 `to` 对象。我们将从 Redux
    存储中读取此信息在我们的渲染组件中：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: From this code snippet, the `pathname`, `search`, `location`, and `hash` properties
    are read from `state.router.location`. As mentioned earlier, the `connectRouter`
    function creates the `router` state and it updates the value when an action of
    type `LOCATION_CHANGE` has been dispatched. The `<ConnectRouter>` component listens
    to the changes in the history object and then dispatches the `LOCATION_CHANGE` action
    whenever you try to navigate using the `<Link>` component.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中，`pathname`、`search`、`location`和`hash`属性从`state.router.location`中读取。正如前面提到的，`connectRouter`函数创建了`router`状态，并在分发了`LOCATION_CHANGE`类型的动作时更新了值。`<ConnectRouter>`组件监听历史对象的变化，然后在你使用`<Link>`组件尝试导航时分发`LOCATION_CHANGE`动作。
- en: 'If you have Redux Dev Tools installed in Chrome (available in the Chrome Web
    Store), you can observe the action dispatched when you try to navigate from one
    route to the other:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Chrome中安装了Redux Dev Tools（在Chrome Web Store中可用），你可以观察到当你尝试从一个路由导航到另一个路由时分发的动作。
- en: '![](Images/0e48d393-6727-4d43-8fb2-cc9ef8fb8b28.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0e48d393-6727-4d43-8fb2-cc9ef8fb8b28.png)'
- en: In this Dev Tools window, the `@@router/LOCATION_CHANGE` action is dispatched
    when you try to navigate, and the action in the following section shows the payload
    provided when dispatching the action.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个Dev Tools窗口中，当你尝试导航时，会分发`@@router/LOCATION_CHANGE`动作，下一节中的动作显示了分发动作时提供的有效载荷。
- en: Navigating by dispatching actions
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过分发动作进行导航
- en: The `connected-react-router` library provides actions that you can dispatch
    from your components to navigate to the routes defined in the application. These
    include `push`, `replace`, `go`, `goBack`, and `goForward`. These methods call
    the corresponding methods on the history object to navigate to the specified path.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`connected-react-router`库提供了可以从组件中分发的动作，以导航到应用程序中定义的路由。这些包括`push`、`replace`、`go`、`goBack`和`goForward`。这些方法调用历史对象上的相应方法，以导航到指定的路径。'
- en: 'The `DashboardComponent` in the previous example can now be updated to use
    `mapDispatchToProps`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面例子中的`DashboardComponent`现在可以更新为使用`mapDispatchToProps`：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding component now dispatches `push` and `replace` actions when you
    click on the HOME and the COUNTER buttons respectively. The `mapDispatchToProps` function
    enables you to dispatch actions to the store and, in our example, the `push` and
    `replace` functions accept a `pathname` to dispatch actions.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的组件现在在你点击HOME和COUNTER按钮时分发`push`和`replace`动作。`mapDispatchToProps`函数使你能够向store分发动作，在我们的例子中，`push`和`replace`函数接受一个`pathname`来分发动作。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how the Redux library can be used to create a
    store to manage various state entities in the application. The store receives
    actions and the reducers alter the state of the application when an action is
    dispatched. The `connected-react-router` library provides Redux bindings for React
    Router and it includes a higher-order function, `connectRouter`, which wraps `rootReducer`
    and creates a `router` state. The `connectRouter` function is then used in the
    `createStore` function to make the `router` state available to the components
    in the application.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何使用Redux库创建一个存储来管理应用程序中的各种状态实体。存储接收动作，当分发动作时，减少器改变应用程序的状态。`connected-react-router`库为React
    Router提供了Redux绑定，其中包括一个高阶函数`connectRouter`，它包装了`rootReducer`并创建了一个`router`状态。然后在`createStore`函数中使用`connectRouter`函数，使`router`状态可用于应用程序中的组件。
- en: The `<ConnectedRouter>` component in `connected-react-router` listens to the
    changes in the `history` location and dispatches the `LOCATION_CHANGE` action
    to update the `router` state property. This `router` state property can then be
    read by the rendered route component by reading the state information from the
    store.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`connected-react-router`中的`<ConnectedRouter>`组件监听`history`位置的变化，并分发`LOCATION_CHANGE`动作来更新`router`状态属性。然后渲染的路由组件可以通过从存储中读取状态信息来读取这个`router`状态属性。'
- en: The library also includes the `push`, `replace`, `go`, `goBack`, and `goForward` actions, which
    the component can dispatch to navigate to the routes defined in the application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 该库还包括`push`、`replace`、`go`、`goBack`和`goForward`动作，组件可以分发这些动作来导航到应用程序中定义的路由。
