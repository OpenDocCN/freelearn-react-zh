- en: Using StaticRouter in a Server-Side Rendered React Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在服务器端呈现的React应用程序中使用StaticRouter
- en: '**Server-Side Rendering** (**SSR**) is a technique of rendering client-side
    only **single-page applications** (**SPAs**) on the server and sending the fully
    rendered page as a response to the user''s request. In client-side SPAs, the JavaScript
    bundle is included as a script tag, and, initially, no content is rendered in
    the page. The bundle is first downloaded, and then the DOM nodes are populated
    by executing the code in the bundle. There are two downsides to this—on poor connections,
    it might take more time to download the bundle, and the crawlers that don''t execute
    JavaScript will not be able to see any content, thus affecting the page''s SEO.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器端渲染**（**SSR**）是一种在服务器上呈现仅客户端的**单页面应用程序**（**SPAs**）的技术，并将完全呈现的页面作为响应发送给用户的请求。在客户端端SPAs中，JavaScript捆绑包被包含为脚本标签，并且最初页面中没有呈现任何内容。捆绑包首先被下载，然后DOM节点通过执行捆绑包中的代码进行填充。这有两个缺点——在较差的连接上，可能需要更长时间来下载捆绑包，并且不执行JavaScript的爬虫将无法看到任何内容，从而影响页面的SEO。'
- en: SSR solves these problems by loading HTML, CSS, and JavaScript in response to
    the user's request; the content is rendered on the server and the final HTML is
    given to the crawler. A React application can be rendered on the server using
    Node.js and the components available in React-Router can be used to define routes
    in the application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SSR通过在用户请求时加载HTML、CSS和JavaScript来解决这些问题；内容在服务器上呈现，并且最终的HTML交给爬虫。可以使用Node.js在服务器上呈现React应用程序，并且React-Router中可用的组件可以用来定义应用程序中的路由。
- en: 'In this chapter, we will take a look at how React-Router components can be
    used in a server-side rendered React application:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何在服务器端呈现的React应用程序中使用React-Router组件：
- en: Performing SSR of a React application using Node.js and Express.js
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js和Express.js执行React应用程序的SSR
- en: Adding `<StaticRouter>` component and creating routes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`<StaticRouter>`组件并创建路由
- en: Understanding the `<StaticRouter>` props
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`<StaticRouter>`属性
- en: Creating Isomorphic React applications by rendering the first page on the server
    and then allowing the client-side code to take over the rendering of subsequent
    pages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在服务器上呈现第一页，然后允许客户端代码接管后续页面的呈现来创建同构React应用程序
- en: Performing SSR of a React application using Node.js and Express.js
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js和Express.js执行React应用程序的SSR
- en: In this example, we will use Node.js and Express.js to create a server-side
    application that will render the React application on the server. Node.js is a
    cross-platform JavaScript runtime environment for servers and applications. It
    is built on Google's V8 JavaScript engine, and it uses an event-driven, non-blocking
    I/O model, which makes it efficient and lightweight. Express.js is one of the
    most popular routing and middleware web-framework modules used in the Node.js
    environment. It allows you to create middleware that helps with handling HTTP
    requests from clients.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用Node.js和Express.js创建一个服务器端应用程序，该应用程序将在服务器上呈现React应用程序。Node.js是一个用于服务器和应用程序的跨平台JavaScript运行时环境。它构建在Google的V8
    JavaScript引擎上，并且使用事件驱动的非阻塞I/O模型，使其高效且轻量级。Express.js是Node.js环境中使用的最流行的路由和中间件Web框架模块之一。它允许您创建中间件，以帮助处理来自客户端的HTTP请求。
- en: Installing dependencies
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: 'Let''s first create a server-side application using the `npm init` command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先使用`npm init`命令创建一个服务器端应用程序：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will create a file, `package.json`, with default values for various fields.
    The next step is to add dependencies:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`package.json`的文件，并为各种字段添加默认值。下一步是添加依赖项：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding command will add all the necessary libraries to the `dependencies`
    list in the package.json file. Please note that we are not creating a React application
    using the `create-react-app` CLI; instead, we will add the required dependencies
    and write the configuration files for building the application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将把所有必要的库添加到`package.json`文件中的`dependencies`列表中。请注意，我们不是使用`create-react-app`
    CLI创建React应用程序；相反，我们将添加所需的依赖项并编写构建应用程序的配置文件。
- en: 'To build the application, the following dev dependencies are added to the `devDependencies`
    list:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建应用程序，以下开发依赖项被添加到`devDependencies`列表中：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding command will add the libraries required to build the application
    for the `devDependencies` list in the `package.json` file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将把构建应用程序所需的库添加到`package.json`文件中的`devDependencies`列表中。
- en: The next step is to write a build configuration, so that the server-side application
    can be built.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是编写构建配置，以便构建服务器端应用程序。
- en: Webpack build configuration
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack构建配置
- en: 'This is from Webpack''s documentation:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自Webpack文档的：
- en: At its core, **W****ebPack** is a *static module bundler* for modern JavaScript
    applications. When webpack processes your application, it internally builds a *dependency
    graph* which maps every module your project needs and generates one or more *bundles*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**Webpack**的核心是现代JavaScript应用程序的*静态模块打包程序*。当webpack处理您的应用程序时，它在内部构建一个*依赖图*，该图将映射项目所需的每个模块，并生成一个或多个*捆绑包*。'
- en: Webpack has become the de facto standard for creating bundles for JavaScript
    applications. The `create-react-app` CLI includes scripts that internally use `webpack`
    to create bundles for development and production environments.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack已成为为JavaScript应用程序创建捆绑包的事实标准。`create-react-app` CLI包含内部使用`webpack`为开发和生产环境创建捆绑包的脚本。
- en: 'Create a file called `webpack-server.config.babel.js`, and include the following
    configuration:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`webpack-server.config.babel.js`的文件，并包含以下配置：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: From the preceding configuration, the file `index.js` (at the `./src/server` path)
    is mentioned as the entry point, and the generated output file `server.js` is
    copied to the `dist` directory. The `webpack` plugin `babel-loader` is used to
    transpile JavaScript files in the application using `Babel` and `Webpack`. The
    `nodemon-webpack-plugin` is used to run the `nodemon` utility, which will monitor
    the changes in the JavaScript files in the application, and reload and build the
    application when `webpack` is running in watch mode.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述配置，文件`index.js`（位于`./src/server`路径）被指定为入口点，并且生成的输出文件`server.js`被复制到`dist`目录。使用`Webpack`的`babel-loader`插件来使用`Babel`和`Webpack`转译应用程序中的JavaScript文件。使用`nodemon-webpack-plugin`来运行`nodemon`实用程序，它将监视应用程序中JavaScript文件的更改，并在`webpack`以观察模式运行时重新加载和构建应用程序。
- en: 'The next step is to create a `.babelrc` file, which will list the presets required
    to build the application:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个`.babelrc`文件，其中将列出构建应用程序所需的预设：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `babel-preset-env` and `babel-preset-react` plugins are used to transpile
    ES6 and React code down to ES5\. As the last step, add a script command in the `package.json`
    file to start the application using the configuration mentioned in the `webpack-server.config.babel.js` file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`babel-preset-env`和`babel-preset-react`插件用于将ES6和React代码转译为ES5。作为最后一步，在`package.json`文件中添加一个脚本命令，以使用`webpack-server.config.babel.js`文件中提到的配置启动应用程序：'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The command `npm start` will build the application, and will listen to the changes
    in the JavaScript files in the application and rebuild it when a change is detected.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 命令`npm start`将构建应用程序，并将监听应用程序中JavaScript文件的更改，并在检测到更改时重新构建应用程序。
- en: Server-Side application
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端应用程序
- en: 'As mentioned in the `webpack` configuration, the entry point to the application
    is at  `/src/server/index.js`. Let''s create the `index.js` file at this path,
    and include the following code, which starts the server application at a given
    port:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如`webpack`配置中所述，应用程序的入口点位于`/src/server/index.js`。让我们在此路径下创建`index.js`文件，并包含以下代码，该代码在给定端口启动服务器应用程序：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you run the `npm start` command and access the application at the URL `http://localhost:3001`,
    the preceding HTML content is rendered. This ensures that the `webpack` configuration
    builds the application and runs the preceding server-side code at port `3001`,
    with `nodemon` monitoring the changes in the file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行`npm start`命令并访问URL`http://localhost:3001`时，将呈现前面的HTML内容。这确保了`webpack`配置构建了应用程序，并在端口`3001`上运行前面的服务器端代码，`nodemon`监视文件的更改。
- en: Rendering a React application using ReactDOMServer.renderToString
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ReactDOMServer.renderToString呈现React应用程序
- en: 'To render a React application on the server-side, let''s first create a React
    component file —`shared/App.js`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要在服务器端呈现React应用程序，首先让我们创建一个React组件文件—`shared/App.js`：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, render the preceding component in the `server/index.js` file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`server/index.js`文件中呈现前面的组件：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `ReactDOMServer` class includes various methods for rendering React components
    in a server-side Node.js application. The `renderToString` method in `ReactDOMServer`
    class renders the React component on the server-side and returns the generated
    markup. This generated markup string can then be included in the response being
    sent to the user.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReactDOMServer`类包括用于在服务器端Node.js应用程序中呈现React组件的各种方法。`ReactDOMServer`类中的`renderToString`方法在服务器端呈现React组件并返回生成的标记。然后，可以将此生成的标记字符串包含在发送给用户的响应中。'
- en: When you visit the page at `http://localhost:3001`, you will notice that the
    message Inside React App (rendered with SSR) is displayed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问`http://localhost:3001`页面时，您会注意到显示了消息“Inside React App (rendered with SSR)”。
- en: 'To confirm that the content is indeed rendered on the server-side, you can
    right click on the page and select the View page source option from the context
    menu. The page source is shown in a new tab, and it includes the following content:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 确认内容确实是在服务器端呈现的，您可以右键单击页面，然后从上下文菜单中选择“查看页面源代码”选项。页面源代码将显示在新标签页中，其中包括以下内容：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding content is helpful when the crawler visits the application. By
    rendering the React component on the server-side, the markup is populated and
    included as the response from the server. This content is then indexed by the
    search engine's crawler, helping with the application's SEO aspects.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当爬虫访问应用程序时，前面的内容很有帮助。通过在服务器端呈现React组件，标记被填充并作为来自服务器的响应包含。然后，此内容将被搜索引擎的爬虫索引，有助于应用程序的SEO方面。
- en: Adding <StaticRouter> and creating routes
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加<StaticRouter>并创建路由
- en: The `<StaticRouter>` component is part of the `react-router-dom` package (uses
    `<StaticRouter>` definition in `react-router`), and it's used in rendering React-Router
    components on the server-side. The `<StaticRouter>` component is similar to the
    other Router components, as it accepts only one child component—the React application's
    root component (`<App />`). This component should be used in a stateless application,
    where the user is not clicking around to navigate to different sections of the
    page.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`<StaticRouter>`组件是`react-router-dom`包的一部分（在`react-router`中使用`<StaticRouter>`定义），它用于在服务器端呈现React-Router组件。`<StaticRouter>`组件类似于其他路由器组件，因为它只接受一个子组件——React应用程序的根组件（`<App
    />`）。此组件应该在无状态应用程序中使用，用户不会点击以导航到页面的不同部分。'
- en: 'Let''s include the `<StaticRouter>` component by wrapping the application''s
    root component:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过包装应用程序的根组件来包含`<StaticRouter>`组件：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that the `<StaticRouter>` component accepts two props—`context` and `location`.
    The `context` object is an empty object and is populated with properties when
    one of the `<Route>` components inside `<App />` is rendered as a result of the
    browser's location match.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`<StaticRouter>`组件接受两个属性——`context`和`location`。`context`对象是一个空对象，在`<App
    />`中的一个`<Route>`组件作为浏览器位置匹配的结果进行渲染时，它会被填充属性。
- en: The `location` object is usually the requested URL, and this information is
    available to the middleware function. The request object (`req`) contains the
    `url` property specifying the requested URL.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`location`对象通常是请求的URL，这些信息对中间件函数是可用的。请求对象（`req`）包含指定请求的URL的`url`属性。'
- en: 'Let''s include a couple of `<Route>` components in `App.js`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`App.js`中包含一对`<Route>`组件：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `<Route>` components match the requested URL specified in the `<StaticRouter>`
    component's `location` property and render.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Route>`组件匹配`<StaticRouter>`组件的`location`属性中指定的请求URL并进行渲染。'
- en: Server-Side redirect using the <Redirect> and staticContext
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`<Redirect>`和`staticContext`进行服务器端重定向
- en: 'From the previous example, let''s redirect the user from the `/` path to the `/home` path
    using the `<Redirect>` component:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的例子中，让我们使用`<Redirect>`组件将用户从`/`路径重定向到`/home`路径：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When you try accessing the URL `http://localhost:3001/`, you will notice that
    the redirection does not take place and the browser''s URL is not updated. The
    preceding redirect would have sufficed in the client-side environment. However,
    in the server-side environment, the server is responsible for handling the redirect.
    In this case, the `context` object mentioned in the `<StaticRouter>` component
    is populated with necessary details:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当您尝试访问URL `http://localhost:3001/`时，您会注意到重定向没有发生，浏览器的URL也没有更新。在客户端环境中，前面的重定向已经足够了。但是，在服务器端环境中，服务器负责处理重定向。在这种情况下，`<StaticRouter>`组件中提到的`context`对象被填充了必要的细节：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `context` object contains the result of the component render. It's usually
    an empty object when the component renders just the content. However, it's populated
    with the preceding details when the rendered component redirects to a different
    path. Notice that the `url` property specifies the path to which the user should
    be redirected—to the `'/home'` path.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`context`对象包含组件渲染的结果。当组件仅渲染内容时，它通常是一个空对象。但是，当渲染的组件重定向到不同的路径时，它会填充前面的细节。请注意，`url`属性指定了应将用户重定向到的路径——到`''/home''`路径。'
- en: 'A check can be added to see if the `url` property exists in the `context` object,
    and then the user can be redirected by using the `redirect` method on the `response`
    object:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可以添加一个检查，看看`context`对象中是否存在`url`属性，然后可以使用`response`对象上的`redirect`方法来重定向用户：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `redirect` method in the `response` object is used to perform the server-side
    redirection, and mentions the status code and the URL to redirect to.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`response`对象中的`redirect`方法用于执行服务器端重定向，并提到状态代码和要重定向到的URL。'
- en: 'It''s also possible to populate the `context` object with more properties by
    using the `staticContext` prop in the rendered component:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用渲染组件中的`staticContext`属性向`context`对象中填充更多属性：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here, the `staticContext` prop is available in the rendered component, and
    the `status` property is added to it before redirecting the user using the `<Redirect>`
    component. The `status` property is then available in the `context` object:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`staticContext`属性在渲染的组件中可用，并且在使用`<Redirect>`组件重定向用户之前，`status`属性被添加到其中。然后`status`属性在`context`对象中可用：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, the `status` property in the `context` object is used to set the HTTP
    status when the user is redirected using the `redirect` method.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`context`对象中的`status`属性用于在使用`redirect`方法重定向用户时设置HTTP状态。
- en: Request URL matching with matchPath
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用matchPath进行请求URL匹配
- en: 'When rendering the React application on the server-side, it is also helpful
    to know whether the requested URL matches any of the existing routes in the application.
    Only if the route is available should the corresponding component be rendered
    on the server-side. However, if the route is not available, the user should be
    presented with a Page Not Found page (404). The `matchPath` function in the `react-router` package
    allows you match the requested URL against an object containing route-matching
    properties such as `path`, `exact`, `strict`, and `sensitive`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端渲染React应用程序时，了解请求的URL是否与应用程序中现有路由中的任何一个匹配也是有帮助的。只有在路由可用时，才应在服务器端呈现相应的组件。但是，如果路由不可用，则应向用户呈现一个未找到页面（404）。`react-router`包中的`matchPath`函数允许您将请求的URL与包含路由匹配属性（如`path`，`exact`，`strict`和`sensitive`）的对象进行匹配：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `matchPath` function is similar to how the library matches `<Route>` components
    against the requested URL path. The first parameter passed to the `matchPath`
    function is the requested URL, and the second parameter is the object against
    which the requested URL should be matched. When the route matches, the `matchPath`
    function returns an object detailing how the requested URL matched the object.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`matchPath`函数类似于库如何将`<Route>`组件与请求的URL路径进行匹配。传递给`matchPath`函数的第一个参数是请求的URL，第二个参数是请求的URL应该匹配的对象。当路由匹配时，`matchPath`函数返回一个详细说明请求的URL如何与对象匹配的对象。'
- en: 'For example, if the requested URL is `/dashboard/`, the `matchPath` function
    returns the following object:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果请求的URL是`/dashboard/`，`matchPath`函数将返回以下对象：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here, the `path` property mentions the path pattern used to match the requested
    URL, the `url` property mentions the matched portion of the URL, the `isExact` Boolean
    property is set to `true` if the requested URL and path matched exactly, and the
    `params` property lists the params that matched the provided pathname. Consider
    the following example, which mentions parameters in the path:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`path`属性提到了用于匹配请求的URL的路径模式，`url`属性提到了URL的匹配部分，`isExact`布尔属性如果请求的URL和路径完全匹配，则设置为`true`，`params`属性列出了与提供的路径名匹配的参数。考虑以下示例，其中提到了路径中的参数：
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here, instead of specifying an object as a second parameter, a path string
    is specified. This short notation is useful if you want to match the path against
    the requested URL, and use the default values for the `exact`, `strict`, and `sensitive`
    properties. The matched object will return the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，不是将对象指定为第二个参数，而是指定了一个路径字符串。如果要将路径与请求的URL进行匹配，并使用`exact`，`strict`和`sensitive`属性的默认值，则这种简短的表示法非常有用。匹配的对象将返回以下内容：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Notice that the `params` property is now populated with the list of params mentioned
    in the `path`, with the values provided in the requested URL.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`params`属性现在填充了在`path`中提到的参数列表，并提供了请求的URL中的值。
- en: On the server-side, before initializing the `<StaticRouter>` and rendering the
    React application, a check can be performed to see if the requested URL matches
    any of the routes defined in a collection of objects. For example, consider a
    collection of route objects.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，在初始化`<StaticRouter>`并渲染React应用程序之前，可以执行检查，以查看请求的URL是否与对象集合中定义的任何路由匹配。例如，考虑一个路由对象集合。
- en: 'In `shared/routes.js` we have the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`shared/routes.js`中，我们有以下内容：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding array contains route objects that can then be used in `matchPath`
    to check if the requested URL matches any of the routes in the preceding list:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的数组包含路由对象，然后可以在`matchPath`中使用它们来检查请求的URL是否与前面列表中的任何路由匹配：
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If the requested URL is found, then `isRouteAvailalbe` will be the matched
    object in the `ROUTES` list, else it''s set to `undefined` when none of the route
    objects match the requested URL. In the latter case, a Page Not Found markup can
    be sent to the user:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找到请求的URL，则`isRouteAvailalbe`将是`ROUTES`列表中的匹配对象，否则当没有路由对象匹配请求的URL时，它被设置为`undefined`。在后一种情况下，可以向用户发送页面未找到的标记：
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When the user requests a path, say `/user`, none of the objects mentioned in
    the `ROUTES` would match, and the preceding response is sent, mentioning the `404`
    HTTP status, with the response body mentioning that the requested path `/user` was
    not found.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户请求路径，比如`/user`，`ROUTES`中提到的对象都不匹配时，前面的响应被发送，提到`404`HTTP状态，响应主体提到请求的路径`/user`未找到。
- en: StaticRouter context prop
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StaticRouter上下文属性
- en: The `<StaticRouter>` component accepts props `basename`, `location`, and `context`.
    Similar to other Router implementations, the `basename` prop in `<StaticRouter>`
    is used to specify the `baseURL` location and the `location`, prop is used to
    specify the location properties—`pathname`, `hash`, `search`, and `state`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`<StaticRouter>`组件接受`basename`、`location`和`context`等props。与其他路由器实现类似，`<StaticRouter>`中的`basename`属性用于指定`baseURL`位置，`location`属性用于指定位置属性——`pathname`、`hash`、`search`和`state`。'
- en: The `context` prop is used only in the `<StaticRouter>` implementation, and
    it contains the result of the component render. As mentioned previously, the `context`
    object can be populated with an HTTP status code and with other arbitrary properties
    as well.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`context`属性仅在`<StaticRouter>`实现中使用，它包含组件渲染的结果。如前所述，`context`对象可以填充HTTP状态码和其他任意属性。'
- en: 'At the time of initialization, the context object can contain properties that
    can then be consumed by the rendered component:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化时，上下文对象可以包含属性，然后由渲染的组件消耗：
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here, the context object contains a `message` property, and when the `<Route>`
    component that matches the requested URL is found, the `staticContext` object
    containing this property is available to the rendered component:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，上下文对象包含`message`属性，当找到匹配请求URL的`<Route>`组件时，包含此属性的`staticContext`对象可用于渲染组件：
- en: '[PRE26]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: When you try to access the `/home` path, the preceding `<Route>` matches and
    the value mentioned in the `staticContext` message property is rendered.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当您尝试访问`/home`路径时，前面的`<Route>`匹配，并且在`staticContext`消息属性中提到的值被渲染。
- en: 'The `staticContext` prop is available only in the server-side environment,
    and thus, when you try to refer the `staticContext` object in an isomorphic application
    (discussed in the next section), an error stating that you''re trying to access
    the property message of undefined is thrown. A check can be added to see if the
    `staticContext` is available or if the value of the `__isBrowser__` property defined
    in the webpack configuration can be checked:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`staticContext`属性仅在服务器端环境中可用，因此，在同构应用程序中尝试引用`staticContext`对象（在下一节中讨论），会抛出一个错误，指出您正在尝试访问未定义的属性消息。可以添加检查以查看`staticContext`是否可用，或者可以检查在webpack配置中定义的`__isBrowser__`属性的值：'
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding example, if the page is rendered on the server-side, then the
    `__isBrowser__` property will be `false` and the message specified in the `staticContext`
    object will be rendered.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，如果页面在服务器端渲染，则`__isBrowser__`属性将为`false`，并且`staticContext`对象中指定的消息将被渲染。
- en: Creating Isomorphic React applications
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建同构React应用程序
- en: An application where the code can run on server-and client-side environments
    with little or no change is referred to as an Isomorphic application. In an Isomorphic
    application, the first request made by the user's web browser is processed by
    the server, and any subsequent request is processed by the client. By processing
    and rendering the first request on the server-side, and sending HTML, CSS, and
    JavaScript code provides a better user experience, and also helps search engine
    crawlers to index the page. All subsequent requests can then be processed by the
    client-side code, which is sent as part of the first response from the server.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一个应用程序，其中代码可以在服务器端和客户端环境中运行，几乎没有或没有变化，被称为同构应用程序。在同构应用程序中，用户的网络浏览器发出的第一个请求由服务器处理，任何后续请求由客户端处理。通过在服务器端处理和渲染第一个请求，并发送HTML、CSS和JavaScript代码，提供更好的用户体验，并帮助搜索引擎爬虫索引页面。然后，所有后续请求可以由客户端代码处理，该代码作为服务器的第一个响应的一部分发送。
- en: 'Here''s the updated request-response flow:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是更新后的请求-响应流程：
- en: '![](Images/5968e318-34f0-48bd-8fab-5731d0c8a64d.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5968e318-34f0-48bd-8fab-5731d0c8a64d.png)'
- en: To render the application on the client-side, either of the `<BrowserRouter>`
    or `<HashRouter>` components can be used. For the purpose of this example, we
    will use the `<BrowserRouter>` component.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在客户端渲染应用程序，可以使用`<BrowserRouter>`或`<HashRouter>`组件中的任何一个。在本例中，我们将使用`<BrowserRouter>`组件。
- en: 'The application structure after adding a directory for the client-side code
    is as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了用于客户端代码的目录后，应用程序结构如下：
- en: '[PRE28]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here, the `shared` directory will contain code that can be used by both the
    server-and the client-side code. The client-side specific code that uses the `<BrowserRouter>`
    component resides in the `index.js` file in the `client` directory:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`shared`目录将包含可以被服务器端和客户端代码使用的代码。使用`<BrowserRouter>`组件的客户端特定代码位于`client`目录中的`index.js`文件中：
- en: '[PRE29]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, the `hydrate` method in the `ReactDOM` class is used instead of calling
    the `render` method to render the application. The `hydrate` method is specifically
    designed to handle cases where the initial render happens on the server-side (using
    `ReactDOMServer`), and all the subsequent route-change requests to update specific
    sections of the page are handled by the client-side code. The `hydrate` method
    is used to attach event listeners to the markup rendered on the server-side.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`ReactDOM`类中的`hydrate`方法被用来渲染应用程序，而不是调用`render`方法。`hydrate`方法专门设计用来处理初始渲染发生在服务器端（使用`ReactDOMServer`）的情况，以及所有后续的路由更改请求来更新页面的特定部分都由客户端代码处理。`hydrate`方法用于将事件监听器附加到在服务器端渲染的标记上。
- en: The next step is to build the application, so that the client-side bundle is
    generated at the build time and included in the first response from the server.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是构建应用程序，以便在构建时生成客户端包，并包含在服务器的第一个响应中。
- en: Webpack configuration
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack配置
- en: 'The existing webpack configuration builds the server-side application and runs
    the `nodemon` utility to monitor the changes. To generate a client-side bundle,
    we need to include another webpack configuration file—`webpack-client.config.babel.js`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的webpack配置构建了服务器端应用程序，并运行`nodemon`实用程序来监视更改。为了生成客户端包，我们需要包含另一个webpack配置文件—`webpack-client.config.babel.js`：
- en: '[PRE30]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The preceding configuration resolves the dependencies in the `/src/client/index.j`s
    file and creates a bundle at `/dist/public/bundle.js`. This bundle contains all
    the client-side code required to run the application; not only the code in the
    `index.js` file but also the components declared in the `shared` directory.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置解析了`/src/client/index.js`文件中的依赖关系，并在`/dist/public/bundle.js`处创建了一个包。这个包包含了运行应用程序所需的所有客户端代码；不仅是`index.js`文件中的代码，还包括`shared`目录中声明的组件。
- en: 'The current `npm start` script also needs to be modified so that the client-side
    application code builds along with the server-side code. Let''s create a file
    that exports both the server and client webpack configurations—`webpack.config.babel.js`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的`npm start`脚本还需要修改，以便客户端应用程序代码与服务器端代码一起构建。让我们创建一个文件，导出服务器和客户端webpack配置——`webpack.config.babel.js`：
- en: '[PRE31]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, the `npm start` script is updated to refer to the preceding configuration
    file:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更新`npm start`脚本，以引用上述配置文件：
- en: '[PRE32]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The preceding script will generate `server.js`, which contains the server-side
    code, and `bundle.js`, which contains the client-side code.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 上述脚本将生成`server.js`，其中包含服务器端代码，以及`bundle.js`，其中包含客户端代码。
- en: Server-Side configuration
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端配置
- en: 'The last step is to update the server-side code to include the client-side
    bundle (`bundle.js`) as part of the first response. The server-side code can include
    a `<script>` tag which specifies the `bundle.js` file in the source (`src`) attribute:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是更新服务器端代码，将客户端bundle（`bundle.js`）包含在第一个响应中。服务器端代码可以包含一个`<script>`标签，其中指定了`bundle.js`文件的源（`src`）属性：
- en: '[PRE33]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Also, for our express server to serve a JavaScript file, we include the middleware
    function for serving static content:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，为了使我们的express服务器能够提供JavaScript文件，我们包括了用于提供静态内容的中间件函数：
- en: '[PRE34]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The preceding code allows static files such as JavaScript files, CSS files,
    and Images, to be served from the `dist/public` directory. The preceding statement
    should be included before `app.get()` is used.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码允许从`dist/public`目录提供静态文件，如JavaScript文件、CSS文件和图像。在使用`app.get()`之前，应包含上述语句。
- en: When you access the application at the `/home` path, the first response is from
    the server, and, in addition to rendering the `<Route>` that matched the `/home` path,
    the client-side bundle—`bundle.js`—is also included in the response. The `bundle.js`
    file is downloaded by the browser, and any change in the route path is then handled
    by the client-side code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问`/home`路径的应用程序时，第一个响应来自服务器，并且除了渲染与`/home`路径匹配的`<Route>`之外，客户端bundle——`bundle.js`也包含在响应中。`bundle.js`文件由浏览器下载，然后路由路径的任何更改都由客户端代码处理。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at how a React application can be rendered on the
    server-side (with Node.js and Express.js) using the `ReactDOMserver.renderToString`
    method. The `<StaticRouter>` component in React-Router can be used to wrap the
    application's root component, thus enabling you to add `<Route>` components that
    match the requested URL path on the server-side. The `<StaticRouter>` component
    accepts props `context` and `location`. The `staticContext` prop (available only
    on the server-side) in the rendered component contains the data provided by the
    `<StaticRouter>` in the `context` prop. It can also be used to add properties
    when you want to redirect the user using the `<Redirect>` component.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一下如何使用`ReactDOMserver.renderToString`方法在服务器端（使用Node.js和Express.js）呈现React应用程序。React-Router中的`<StaticRouter>`组件可用于包装应用程序的根组件，从而使您能够在服务器端添加与请求的URL路径匹配的`<Route>`组件。`<StaticRouter>`组件接受`context`和`location`属性。在渲染的组件中，`staticContext`属性（仅在服务器端可用）包含`context`属性中由`<StaticRouter>`提供的数据。它还可以用于在使用`<Redirect>`组件时添加属性以重定向用户。
- en: 'The `matchPath` function is used to determine whether the requested URL matches
    the provided object of the shape `{path, exact, strict, sensitive}`. It''s similar
    to how the library matches the requested URL with the available `<Route>` components
    in the page. The `matchPath` function gives us the ability to determine if the
    requested URL matches any of the routes object in the collection; this provides
    us with an opportunity to send a 404: Page not found response up front.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`matchPath` 函数用于确定请求的 URL 是否与提供的对象 `{path, exact, strict, sensitive}` 匹配。这类似于库如何将请求的
    URL 与页面中可用的 `<Route>` 组件进行匹配。`matchPath` 函数使我们能够确定请求的 URL 是否与集合中的任何路由对象匹配；这为我们提供了一个机会，可以提前发送
    404：页面未找到的响应。'
- en: It's also possible to create an isomorphic React application that renders the
    first request on the server-side and the subsequent requests on the client side.
    This is accomplished by including the client-side bundle file when sending the
    first response from the server. The client-side code takes over after the first
    request, which enables you to update specific sections of the page that match
    the requested route.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以创建一个同构的 React 应用程序，它在服务器端渲染第一个请求，然后在客户端渲染后续请求。这是通过在从服务器发送第一个响应时包含客户端捆绑文件来实现的。客户端代码在第一个请求之后接管，这使您能够更新与请求的路由匹配的页面的特定部分。
- en: In [Chapter 7](0928d71c-c469-46a1-a4a1-238921180019.xhtml), *Using NativeRouter
    in a React Native Application*, we will take a look at how the `NativeRouter`
    component can be used to define routes in a native mobile application created
    with React-Native.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](0928d71c-c469-46a1-a4a1-238921180019.xhtml)中，*在 React Native 应用程序中使用
    NativeRouter*，我们将看看如何使用 `NativeRouter` 组件来定义 React-Native 创建的原生移动应用程序中的路由。
