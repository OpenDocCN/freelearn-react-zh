- en: Understanding the Core Router, and Configuring the BrowserRouter and HashRouter
    components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解核心路由器，并配置`BrowserRouter`和`HashRouter`组件
- en: The React-Router library provides several components that address various use
    cases, such as adding navigation links with `<Link>` and `<NavLink>`, redirecting
    the user using the `<Redirect>`  component, and so on. The `<BrowserRouter>` component
    wraps the application's root component (`<App />`) and enables these components
    to interact with the `history` object. When the application initializes, the `<BrowserRouter>`
    component initializes the `history` object and makes it available to all its child
    components using React's `context`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React-Router库提供了几个组件，用于解决各种用例，例如使用`<Link>`和`<NavLink>`添加导航链接，使用`<Redirect>`组件重定向用户等。`<BrowserRouter>`组件包装了应用程序的根组件（`<App
    />`），并使这些组件能够与`history`对象交互。当应用程序初始化时，`<BrowserRouter>`组件初始化`history`对象，并使用React的`context`使其可用于所有子组件。
- en: Routing in a single-page application is not really routing; rather, it's conditional
    rendering of components. The `<BrowserRouter>` component creates the `history`
    object, and the `history` object has methods such as `push`, `replace`, `pop`,
    and so on, which are used when navigation occurs. The `history` object enables
    the application to maintain history when the user is navigating between the pages.
    Other than `<BrowserRouter>`, React-Router provides various Router implementations—`<HashRouter>`,
    `<StaticRouter>`, `<MemoryRouter>`, and `<NativeRouter>`. These Routers make use
    of the low-level `Router` interface, which is included in the `react-router` core
    package.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 单页应用程序中的路由实际上并不是真正的路由；相反，它是组件的条件渲染。`<BrowserRouter>`组件创建了`history`对象，`history`对象具有诸如`push`、`replace`、`pop`等方法，这些方法在导航发生时被使用。`history`对象使应用程序能够在用户在页面之间导航时保持历史记录。除了`<BrowserRouter>`，React-Router还提供了各种Router实现——`<HashRouter>`、`<StaticRouter>`、`<MemoryRouter>`和`<NativeRouter>`。这些路由器利用了包含在`react-router`核心包中的低级`Router`接口。
- en: 'In this chapter, we will take a look at the low-level `<Router>` component
    and various router implementations:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下低级`<Router>`组件和各种路由器实现：
- en: '`<Router>` and the `react-router` package'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<Router>`和`react-router`包'
- en: '`<BrowserRouter>` props'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<BrowserRouter>`属性'
- en: '`HashRouter`—a Router implementation for use in legacy browsers'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HashRouter`——用于在旧版浏览器中使用的Router实现'
- en: Other `<Router>` implementations, such as `<StaticRouter>`, `<MemoryRouter>`,
    and `<NativeRouter>`, are discussed in the next chapters.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 其他`<Router>`实现，如`<StaticRouter>`、`<MemoryRouter>`和`<NativeRouter>`，将在接下来的章节中讨论。
- en: <Router> component
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<Router>`组件'
- en: 'As previously mentioned, React-Router provides various Router implementations:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，React-Router提供了各种Router实现：
- en: '`<BrowserRouter>`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<BrowserRouter>`'
- en: '`<HashRouter>`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<HashRouter>`'
- en: '`<MemoryRouter>`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<MemoryRouter>`'
- en: '`<StaticRouter>`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<StaticRouter>`'
- en: '`<NativeRouter>`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<NativeRouter>`'
- en: These Routers make use of a low-level interface—`<Router>`. The `<Router>` component
    is part of the core `react-router` package, and the functionality provided by
    the `<Router>` interface is extended by these Router implementations.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些路由器利用了低级接口`<Router>`。`<Router>`组件是`react-router`包的一部分，`<Router>`接口提供的功能由这些Router实现扩展。
- en: The `<Router>` component accepts two props—`history` and `children`. The `history`
    object can be a reference to the browser's history or it can be the application's
    history maintained in memory (which is useful in native applications where an
    instance of browser's history is not available). The `<Router>` component accepts
    one child component, which is generally the application's root component. Also,
    it creates a `context` object, `context.router`, through which all its descendent
    child components, such as `<Route>`, `<Link>`, `<Switch>`, and so on, get a reference
    for the `history` object.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Router>`组件接受两个props——`history`和`children`。`history`对象可以是对浏览器历史记录的引用，也可以是应用程序中维护的内存中的历史记录（这在原生应用程序中很有用，因为浏览器历史记录的实例不可用）。`<Router>`组件接受一个子组件，通常是应用程序的根组件。此外，它创建一个`context`对象，`context.router`，通过它，所有后代子组件，如`<Route>`、`<Link>`、`<Switch>`等，都可以获得`history`对象的引用。'
- en: 'From reactjs.org:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 来自reactjs.org：
- en: Context provides a way to pass data through the component tree without having
    to pass props down manually at every level.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文提供了一种通过组件树传递数据的方式，而无需在每个级别手动传递props。
- en: The `<Router>` interface is generally not used in building applications; instead,
    one of the high-level Router components that is suitable for the given environment
    is used. One of the common use cases for using the `<Router>` interface is to
    synchronize a custom `history` object with state–management libraries such as `Redux`
    and `MobX`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不使用`<Router>`接口来构建应用程序；而是使用适合给定环境的高级别Router组件之一。使用`<Router>`接口的常见用例之一是将自定义的`history`对象与诸如`Redux`和`MobX`之类的状态管理库同步。
- en: Including <Router> from react-router
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包括来自react-router的<Router>
- en: 'The core `react-router` package can be installed via `npm`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 核心的`react-router`包可以通过`npm`安装：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `Router` class can then be included in the application file:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Router`类然后可以包含在应用程序文件中：'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The next step is to create a `history` object that can then be provided as
    a value to the `history` prop of `<Router>`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个`history`对象，然后将其作为值提供给`<Router>`的`history` prop：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the `createBrowserHistory` class from the `history` package is used to
    create a `history` object for the browser environment. The `history` package includes
    classes suitable for various environments.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，使用`history`包中的`createBrowserHistory`类来为浏览器环境创建`history`对象。`history`包包括适用于各种环境的类。
- en: 'The last step is to wrap the application''s root component with the `<Router>`
    component and render the application:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是用`<Router>`组件包装应用程序的根组件并渲染应用程序：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that the `<Router>` component accepts a `history` prop whose value is
    the `history` object created with `createBrowserHistory`. Similar to the `<BrowserRouter>`
    component, the `<Router>` component accepts only one child, and throws an error
    when there is more than one child component.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`<Router>`组件接受一个`history` prop，其值是使用`createBrowserHistory`创建的`history`对象。与`<BrowserRouter>`组件类似，`<Router>`组件只接受一个子组件，在有多个子组件时会抛出错误。
- en: 'React allows its prop values to change and it re-renders the component whenever
    a change is detected. In this case, if we try to change the value assigned to
    the history prop, React-Router throws a warning message. Consider the following
    code snippet:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: React允许其prop值发生变化，并在检测到变化时重新渲染组件。在这种情况下，如果我们尝试更改分配给history prop的值，React-Router会抛出警告消息。考虑以下代码片段：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding example, the state property `customHistory` contains the `history`
    object, which is provided to the `<Router>` component. However, when the value
    of `customHistory` changes in the `componentDidMount` lifecycle function, React-Router
    throws the warning message Warning: You cannot change <Router> history.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的例子中，state属性`customHistory`包含了提供给`<Router>`组件的`history`对象。然而，当`customHistory`的值在`componentDidMount`生命周期函数中改变时，React-Router会抛出警告消息Warning:
    You cannot change <Router> history。'
- en: react-router package
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: react-router包
- en: 'The `react-router` package includes some of the core components, such as the
    `<Router>` component mentioned previously. The package also includes several other
    components that are then used by components available in the `react-router-dom` and
    `react-router-native` packages. The `react-router` package exports these components:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-router`包括一些核心组件，比如之前提到的`<Router>`组件。该包还包括其他一些组件，然后被`react-router-dom`和`react-router-native`包中的组件使用。`react-router`包导出这些组件：'
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Some of the components mentioned here were discussed in earlier chapters. The
    package also provides helper functions, such as `generatePath` and `matchPath`,
    and router implementations, such as `<MemoryRouter>` and `<StaticRouter>`. The
    components and services defined in `react-router-dom` and `react-router-native` import
    these components and services, and are included in their respective packages.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提到的一些组件在之前的章节中已经讨论过。该包还提供了一些辅助函数，比如`generatePath`和`matchPath`，以及Router实现，比如`<MemoryRouter>`和`<StaticRouter>`。`react-router-dom`和`react-router-native`中定义的组件和服务导入了这些组件和服务，并包含在各自的包中。
- en: react-router-dom package
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: react-router-dom包
- en: 'The `react-router-dom` package provides components that can be used in a browser-based
    application. It declares a dependency on the `react-router` package and exports
    the following components:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-router-dom`包提供了可以在基于浏览器的应用程序中使用的组件。它声明了对`react-router`包的依赖，并导出以下组件：'
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Notice that some of the components mentioned here are also included in the
    `react-router` package. The components in `react-router-dom` import the components
    defined in `react-router` and then export them. For example, take a look at the
    `<Route>` component:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里提到的一些组件也包含在`react-router`包中。`react-router-dom`中的组件导入了`react-router`中定义的组件，然后导出它们。例如，看一下`<Route>`组件：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The Router implementations `BrowserRouter`, `<HashRouter>`, and `<MemoryRouter>`
    create a `history` object specific to the given environment, and render the `<Router>`
    component. We will take a look at these Router implementations shortly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrowserRouter`、`<HashRouter>`和`<MemoryRouter>`的Router实现会创建一个特定于给定环境的`history`对象，并渲染`<Router>`组件。我们很快将会看一下这些Router实现。'
- en: The `react-router-native` package makes use of the `<MemoryRouter>` implementation
    in `react-router`, and provides a `<NativeRouter>` interface. The `NativeRouter`
    implementation and its packaging details are discussed in upcoming chapters.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-router-native`包使用了`react-router`中的`<MemoryRouter>`实现，并提供了一个`<NativeRouter>`接口。`NativeRouter`的实现和其打包细节将在接下来的章节中讨论。'
- en: <BrowserRouter> component
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <BrowserRouter>组件
- en: The `<BrowserRouter>` component was discussed briefly in the first chapter.
    As the name suggests, the `<BrowserRouter>` component is used in browser-based
    applications and it uses HTML5's history API to keep the UI in sync with the browser's
    URL. Here, we take a look at how the component creates a `history` object for
    the browser environment and provides this `history` object to the `<Router>`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`<BrowserRouter>`组件在第一章中简要讨论过。正如其名称所示，`<BrowserRouter>`组件用于基于浏览器的应用程序，并使用HTML5的history
    API来保持UI与浏览器的URL同步。在这里，我们将看一下该组件如何为浏览器环境创建`history`对象并将其提供给`<Router>`。'
- en: 'The `<BrowserRouter>` component accepts the following props:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`<BrowserRouter>`组件接受以下属性：'
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Similar to the `<Router>` interface, the `<BrowserRouter>` accepts only one
    child component (usually the application''s root component). The `children` prop
    mentioned in the preceding code snippet refers to this child node. The `createBrowserHistory`
    method from the  `history`  package is used to create a `history` object for initializing
    the `<Router>`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与`<Router>`接口类似，`<BrowserRouter>`只接受一个子组件（通常是应用程序的根组件）。前面代码片段中提到的`children`属性指的是这个子节点。使用`history`包中的`createBrowserHistory`方法来创建一个用于初始化`<Router>`的`history`对象：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code snippet, the `<BrowserRouter>` uses the provided props
    to create a `history` object using the `history/createBrowserHistory` class. The
    component then renders the `<Router>` component, and provides the created `history`
    object and the `children` object from props.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`<BrowserRouter>`使用提供的属性使用`history/createBrowserHistory`类创建一个`history`对象。然后渲染`<Router>`组件，并从属性中提供创建的`history`对象和`children`对象。
- en: basename prop
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: basename属性
- en: 'The `basename` prop is used to provide a base URL path for all the locations
    in the application. For example, if you want to render your application at the `/admin` path
    instead of rendering at the root path `/`, then specify the `basename` prop in
    `<BrowserRouter>`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`basename`属性用于为应用程序中的所有位置提供基本的URL路径。例如，如果您希望在`/admin`路径上呈现应用程序，而不是在根路径`/`上呈现，则在`<BrowserRouter>`中指定`basename`属性：'
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `basename` prop now adds the base URL path `/admin` to the application.
    When you navigate using `<Link>` and `<NavLink>`, the `basename` path is added
    to the URL. For example, consider the following code with two `<Link>` components:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`basename`属性现在将基本URL路径`/admin`添加到应用程序中。当您使用`<Link>`和`<NavLink>`进行导航时，`basename`路径将添加到URL中。例如，考虑以下带有两个`<Link>`组件的代码：'
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When you click on the `Home` link (path `/`), you''ll notice that the URL path
    is updated to `/admin` instead of `/`. And, when you click on the `Dashboard`
    link, the updated URL path is `/admin/dashboard`. With the `basename` prop in
    `<BrowserRouter>`, the preceding `<Link>` components translate to the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击`Home`链接（路径`/`）时，您会注意到URL路径更新为`/admin`而不是`/`。当您点击`Dashboard`链接时，更新后的URL路径为`/admin/dashboard`。使用`<BrowserRouter>`中的`basename`属性，前面的`<Link>`组件转换为以下内容：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The anchor link's `href` attribute is prefixed with the `/admin` path.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 锚链接的`href`属性前缀为`/admin`路径。
- en: forceRefresh prop
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: forceRefresh属性
- en: 'The `forceRefresh` prop is a Boolean prop, and when set to `true`, navigation
    to any route will result in a page refresh—instead of updating specific sections
    of the page, the entire page is reloaded:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`forceRefresh`属性是一个布尔属性，当设置为`true`时，导航到任何路由都会导致页面刷新 - 而不是更新页面的特定部分，整个页面都会重新加载：'
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When you click on the navigation link `Dashboard`, you'll notice that the page
    reloads when requesting for the URL path `/dashboard`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击导航链接`Dashboard`时，您会注意到在请求URL路径`/dashboard`时页面重新加载。
- en: keyLengthprop
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: keyLength属性
- en: 'The `keyLength` prop is used to specify the length for the `location.key`.
    The `locaction.key` property represents a unique key that is provided to a location.
    Take a look at the following code snippet:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`keyLength`属性用于指定`location.key`的长度。`locaction.key`属性表示提供给位置的唯一键。看一下以下代码片段：'
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When you navigate to either of the `/dashboard` or `/user` paths, the value
    of `location.key` will be a random alphanumeric string of length 10\. By default,
    the value of `keyLength` prop used to generate the key is 6.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当您导航到`/dashboard`或`/user`路径中的任何一个时，`location.key`的值将是一个长度为10的随机字母数字字符串。默认情况下，用于生成密钥的`keyLength`属性的值为6。
- en: When you navigate back and forth between the `/dashboard` and `/user` paths
    by using the navigation links, you'll notice that a new key is generated for every
    navigation. This is because will you navigate using the navigation links, `history.push`
    is called and a new key is generated, and the key is unique for each entry in
    the history stack. Thus, when you navigate by clicking the browser's back button, `history.pop`
    is called, and you'll notice that the key generated for the location is shown
    and a new key is not generated.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用导航链接在`/dashboard`和`/user`路径之间来回导航时，您会注意到每次导航都会生成一个新的键。这是因为当您使用导航链接导航时，会调用`history.push`并生成一个新的键，而该键对于历史堆栈中的每个条目都是唯一的。因此，当您通过单击浏览器的后退按钮导航时，将调用`history.pop`，您会注意到为位置生成的键，并且不会生成新的键。
- en: getUserConfirmation prop
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: getUserConfirmation属性
- en: The `getUserConfirmation` prop accepts a function as its value, and it's executed
    when the user-initiated navigation is blocked using the `<Prompt>` component.
    The `<Prompt>` component shows a confirmation dialog box using the `window.confirm`
    method, and navigates the user to the selected path only if the user clicks the
    OK button. However, when the `<BrowserRouter>` component specifies the `getUserConfirmation` prop,
    the function provided as a value to this prop will be executed. This provides
    an opportunity to display a custom dialog box.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`getUserConfirmation`属性接受一个函数作为其值，并且当用户发起的导航被`<Prompt>`组件阻止时执行。`<Prompt>`组件使用`window.confirm`方法显示一个确认对话框，并且仅当用户单击确定按钮时才将用户导航到所选路径。然而，当`<BrowserRouter>`组件指定了`getUserConfirmation`属性时，将执行作为该属性值的函数。这提供了显示自定义对话框的机会。'
- en: 'Let''s take a look at the following configuration:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下配置：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Suppose the current URL path is `/user` and you try to navigate to a different
    route, such as `/dashboard`, by clicking the navigation link provided in the `nav`
    menu. The `<Prompt>` message will be shown if the `getUserConfirmation` prop is
    not specified. In this case, the function `userConfirmationFunc`, which is defined
    in the component's class, is executed.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设当前的URL路径是`/user`，您尝试通过单击`nav`菜单中提供的导航链接来导航到不同的路由，比如`/dashboard`。如果未指定`getUserConfirmation`属性，则会显示`<Prompt>`消息。在这种情况下，将执行在组件类中定义的`userConfirmationFunc`函数。
- en: 'You can call `window.confirm` to display a confirmation dialog box asking the
    user about the navigation:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以调用`window.confirm`来显示一个确认对话框，询问用户是否导航：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The function accepts two parameters—`message` and `callback`. The `message` parameter
    specifies the message that needs to be displayed, and the `message` prop included
    in the `<Prompt>` component provides this value. The function is expected to execute
    the callback function provided as the second parameter.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受两个参数——`message`和`callback`。`message`参数指定需要显示的消息，而`<Prompt>`组件中包含的`message`属性提供了该值。该函数预计执行作为第二个参数提供的回调函数。
- en: Here, a callback function is provided as the second parameter by the `<BrowserRouter>`.
    The `window.confirm` function is called with the provided `message`, and the user
    is presented with two buttons—OK and CANCEL; on clicking OK, `status` is set to
    true, and, on clicking CANCEL, `status` is set to `false`. The `callback` function
    provided as the second parameter is called with this `status` value; it is a true
    value that allows the user to navigate to the selected route.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<BrowserRouter>`的第二个参数提供了一个回调函数。使用提供的`message`调用`window.confirm`函数，用户将看到两个按钮——确定和取消；单击确定时，`status`设置为true，单击取消时，`status`设置为`false`。将使用作为第二个参数提供的`callback`函数调用此`status`值；这是一个允许用户导航到所选路由的真值。
- en: This the default behavior; a native-browser-confirmation dialog box is shown
    before allowing the user to navigate to the selected page. However, this behavior
    can be changed in the `userConfirmationFunc` mentioned previously; you can show
    a custom dialog box instead of displaying the browser's native-confirmation dialog
    box.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认行为；在允许用户导航到所选页面之前，会显示一个原生浏览器确认对话框。然而，这种行为可以在前面提到的`userConfirmationFunc`中进行更改；你可以显示一个自定义对话框，而不是显示浏览器的原生确认对话框。
- en: Showing a custom dialog box using the getUserConfirmation prop
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用getUserConfirmation prop显示自定义对话框
- en: 'For the purpose of this example, let''s add `material-UI`, which includes a
    custom dialog box component:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个例子，让我们添加`material-UI`，其中包括一个自定义对话框组件：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s create a custom dialog box that wraps the `Dialog` component in `@material-ui/core`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个自定义对话框，将`Dialog`组件包装在`@material-ui/core`中：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This component accepts three props—`message`, `handleClose`, and `isOpen`. The
    `message` prop is the message that you want to show in the custom dialog box,
    and the `handleClose` prop is a function reference provided to the component that
    is invoked when the user clicks on the buttons OK or CANCEL, which allow or cancel
    the transition to the selected path, respectively.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件接受三个props——`message`、`handleClose`和`isOpen`。`message` prop是你想在自定义对话框中显示的消息，`handleClose`
    prop是一个函数引用，当用户点击OK或CANCEL按钮时调用该函数引用，分别允许或取消转换到所选路径。
- en: 'Let''s use this in our root component file (in `App.js`), and show the `ConfirmationDialog`
    when the user tries to navigate to a different route:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在根组件文件（在`App.js`中）中使用这个，并在用户尝试导航到不同的路由时显示`ConfirmationDialog`：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will first set the `state` properties to their initial values in the React
    Component. The `state` properties mentioned previously change when the user tries
    to navigate to a different route:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在React组件中将`state`属性设置为它们的初始值。当用户尝试导航到不同的路由时，前面提到的`state`属性会发生变化：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding `userConfirmationFunc` function sets the `state` properties such
    that it will display the custom confirmation dialog box (`ConfirmationDialog`)
    when the user tries to navigate away from the current route.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`userConfirmationFunc`函数设置`state`属性，以便在用户尝试离开当前路由时显示自定义确认对话框(`ConfirmationDialog`)。
- en: 'The following `handleClose` function, defined in the `App` component, will
    be provided to the `ConfirmationDialog` component that we created earlier:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App`组件中定义的以下`handleClose`函数将提供给我们之前创建的`ConfirmationDialog`组件：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This provides us with a way to hide the custom confirmation dialog box and to
    reset the component's `state` properties to their initial values. The `this.state.callback(status)` statement
    will close the confirmation dialog box, and either navigate the user to the selected
    route (if the status is true) or cancel the navigation (if the status is false).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了一种隐藏自定义确认对话框和将组件的`state`属性重置为它们的初始值的方法。`this.state.callback(status)`语句将关闭确认对话框，并且根据状态为真还是假，将用户导航到所选路由（如果状态为真）或取消导航（如果状态为假）。
- en: 'Here''s the updated render method of the component class:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是组件类的更新渲染方法：
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the preceding render method, the custom `ConfirmationDialog` box is included,
    and it''s rendered only if the state property `showConrfirmationDialog` is set
    to `true`. The `userConfirmationFunc` sets the `state` properties and the custom
    dialog is shown as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的渲染方法中，包括了自定义的`ConfirmationDialog`对话框，并且只有当`state`属性`showConrfirmationDialog`设置为`true`时才会渲染。`userConfirmationFunc`设置`state`属性，自定义对话框显示如下：
- en: '![](Images/afdee1c8-4d60-4068-a613-05f1941e945e.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/afdee1c8-4d60-4068-a613-05f1941e945e.png)'
- en: The `handleClose` function in the preceding code snippet is called by the `ConfirmDialog`
    box when the user clicks either of the buttons OK or CANCEL. The OK button will
    send the value `true`, whereas the CANCEL button sends a `false` value to the
    `handleClose` function defined previously.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`handleClose` 函数是由 `ConfirmDialog` 框在用户单击 OK 或 CANCEL 按钮时调用的。OK 按钮将发送值
    `true`，而 CANCEL 按钮将发送值 `false` 到先前定义的 `handleClose` 函数。
- en: <HashRouter> component
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <HashRouter> 组件
- en: 'The `<HashRouter>` component is part of the `react-router-dom` package, and,
    similar to `<BrowserRouter>`, it''s also used in building applications for the
    browser environment. The primary difference between `<BrowserRouter>` and `<HashRouter>`
    is the URL that the component creates:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`<HashRouter>` 组件是 `react-router-dom` 包的一部分，与 `<BrowserRouter>` 类似，也用于构建浏览器环境的应用程序。`<BrowserRouter>`
    和 `<HashRouter>` 之间的主要区别是组件创建的 URL：'
- en: 'A `<BrowserRouter>` creates a URL as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`<BrowserRouter>` 创建的 URL 如下：'
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Whereas the `<HashRouter>` adds a hash to the URL:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`<HashRouter>` 在 URL 中添加了一个哈希：'
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `<BrowserRouter>` component leverages the HTML5 History API to keep track
    of the router history, whereas the `<HashRouter>` component uses `window.location.hash`
    (the hash portion of the URL) to remember the changes in the browser's history
    stack. The `<BrowserRouter>` should be used in building applications that work
    on modern browsers that support the HTML5's History API, and the `<HashRouter>`
    should be used in applications that need to support legacy browsers.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`<BrowserRouter>` 组件利用 HTML5 History API 来跟踪路由历史记录，而 `<HashRouter>` 组件使用 `window.location.hash`（URL
    的哈希部分）来记住浏览器历史堆栈中的更改。应该在支持 HTML5 History API 的现代浏览器上构建应用程序时使用 `<BrowserRouter>`，而在需要支持旧版浏览器的应用程序中使用
    `<HashRouter>`。'
- en: 'The `<HashRouter>` uses the `createHashHistory` class to create the `history`
    object. This `history` object is then provided to the core `<Router>` component:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`<HashRouter>` 使用 `createHashHistory` 类来创建 `history` 对象。然后将此 `history` 对象提供给核心
    `<Router>` 组件：'
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `<HashRouter>` accepts the following props:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`<HashRouter>` 接受以下 props：'
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Similar to `<BrowserRouter>`, the props `basename` and `getUserConfirmation`
    are used to specify the base URL path and function to confirm navigation to the
    selected URL respectively. However, the `<HashRouter>` does not support `location.key`
    and `location.state`, thus the prop `keyLength` is not supported. Also, the prop
    `forceRefresh` is not supported.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 与`<BrowserRouter>`类似，props `basename` 和 `getUserConfirmation` 用于分别指定基本 URL 路径和确认导航到所选
    URL 的函数。然而，`<HashRouter>` 不支持 `location.key` 和 `location.state`，因此不支持 prop `keyLength`。此外，也不支持
    prop `forceRefresh`。
- en: Let's take a look at the `hashType` prop.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 `hashType` prop。
- en: hashType prop
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: hashType prop
- en: The `hashType` prop is used to specify the encoding method to use for `window.location.hash`.
    The possible values are `slash`, `noslash`, and `hashbang`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`hashType` prop 用于指定用于 `window.location.hash` 的编码方法。可能的值包括 `slash`、`noslash`
    和 `hashbang`。'
- en: 'Let''s take a look at how the URLs are formed when you include the `hashType`
    prop with one of these values:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看在包含 `hashType` prop 时如何形成 URL：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When you specify `slash` as the value to the `hashType` prop, a slash (`/`)
    is added after the hash (`#`). Thus, the URLs will be of the forms —`#/`, `#/dashboard`,
    `#/user`, and so on.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将 `slash` 指定为 `hashType` prop 的值时，会在哈希 (`#`) 后添加斜杠 (`/`)。因此，URL 将采用以下形式 —
    `#/`，`#/dashboard`，`#/user` 等。
- en: Please note, `slash` is the default value for the prop `hashType`, and it's
    not required to include the `hashType` prop when you want to add a slash after
    the `#`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`slash` 是 prop `hashType` 的默认值，如果要在 `#` 后添加斜杠，则不需要包括 `hashType` prop。
- en: 'Similarly, when the value of the `hashType` prop is `noslash`, the URLs are
    of the forms —`#`, `#dashboard`, `#user`, and so on:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，当`hashType`属性的值为`noslash`时，URL的形式为—`#`、`#dashboard`、`#user`等：
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When the value `hashbang` is assigned to the `hashType` prop, it creates URLs
    of the form—`#!/`, `#!/dashboard`, `#!/user`, and so on:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当`hashType`属性分配值`hashbang`时，它创建的URL形式为—`#!/`、`#!/dashboard`、`#!/user`等：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `hashbang` was added so that the search engine bots can crawl and index
    single-page application. However, Google has deprecated this crawling strategy.
    Read about it here:  [https://webmasters.googleblog.com/2015/10/deprecating-our-ajax-crawling-scheme.html](https://webmasters.googleblog.com/2015/10/deprecating-our-ajax-crawling-scheme.html).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`hashbang`是为了让搜索引擎爬虫可以爬取和索引单页面应用程序而添加的。然而，谷歌已经弃用了这种爬取策略。在这里阅读更多信息：[https://webmasters.googleblog.com/2015/10/deprecating-our-ajax-crawling-scheme.html](https://webmasters.googleblog.com/2015/10/deprecating-our-ajax-crawling-scheme.html)。'
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The `<Router>` component in the `react-router` package provides a low-level
    implementation of the router interface. Various routers in `react-router-dom` and
    `react-router-native` use this low-level `<Router>` interface to provide routing
    features for the given environment. The `history` prop in `<Router>` is used to
    specify the `history` object for the given environment. For example, the `<BrowserRouter>`
    component uses `history/createBrowserHistory` to create a `history` object in
    the browser environment. All the Router components accept only one child, and
    it's usually the application's root component.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-router`包中的`<Router>`组件提供了路由器接口的低级实现。`react-router-dom`和`react-router-native`中的各种路由器使用这个低级的`<Router>`接口为特定环境提供路由功能。`<Router>`中的`history`属性用于指定给定环境的`history`对象。例如，`<BrowserRouter>`组件在浏览器环境中使用`history/createBrowserHistory`来创建`history`对象。所有的Router组件只接受一个子组件，通常是应用程序的根组件。'
- en: The `BrowserRouter` component in `react-router-dom` makes use of the HTML5 history
    API to keep the application's URL in sync with the browser's history. It accepts
    props—`basename`, `keyLength`, `forceRefresh`, and `getUserConfirmation`. The
    `<HashRouter>`, on the other hand, adds a hash (#) to the browser's URL and uses
    `window.location.hash` to track history. It accepts props `basename`, `getUserConfirmation`,
    and `hashType`. The `hashType` prop is used to specify the encoding method to
    use for `window.location.hash`; possible values are `slash`, `noslash`, and `hashbang`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-router-dom`中的`BrowserRouter`组件利用HTML5历史API与浏览器历史记录同步以保持应用程序的URL。它接受`basename`、`keyLength`、`forceRefresh`和`getUserConfirmation`等props。另一方面，`<HashRouter>`在浏览器的URL中添加一个哈希(#)并使用`window.location.hash`来跟踪历史记录。它接受`basename`、`getUserConfirmation`和`hashType`等props。`hashType`属性用于指定用于`window.location.hash`的编码方法；可能的值有`slash`、`noslash`和`hashbang`。'
- en: In [Chapter 6](990cdd9a-efde-4922-a931-3f4db8421e13.xhtml), *Using StaticRouter
    in a Server-Side Rendered React Application*, we will take a look at server-side
    rendering with the `<StaticRouter>` component.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](990cdd9a-efde-4922-a931-3f4db8421e13.xhtml)中，*在服务器端渲染的React应用程序中使用StaticRouter*，我们将介绍使用`<StaticRouter>`组件进行服务器端渲染。
