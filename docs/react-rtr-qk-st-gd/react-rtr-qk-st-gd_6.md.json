["```jsx\nnpm init -y\n```", "```jsx\nnpm install --save react react-dom react-router react-router-dom express\n```", "```jsx\nnpm install --save-dev webpack webpack-cli nodemon-webpack-plugin webpack-node-externals babel-core babel-loader babel-preset-env babel-preset-react \n```", "```jsx\nimport path from 'path'; import  webpack  from  'webpack'; import  nodemonPlugin  from  'nodemon-webpack-plugin'; import  nodeExternals  from  'webpack-node-externals'; export  default  { entry:  './src/server/index.js', target:  'node', externals:  [nodeExternals()], output:  { path:  path.resolve(__dirname,  'dist'), filename:  'server.js', publicPath:  '/' },\n    module:  { rules:  [ {\n                test:  /\\.js$/, use:  'babel-loader' }\n        ]\n    },\n    plugins:  [ new  webpack.DefinePlugin({ __isBrowser__:  false }),\n        new  nodemonPlugin()\n    ]\n}\n```", "```jsx\n{\n \"presets\": [\"env\",\"react\"] }\n```", "```jsx\n\"scripts\": {\n \"start\": \"webpack --config webpack-server.config.babel.js --watch --mode development\" }\n```", "```jsx\nimport  express  from  'express'; const  PORT  =  process.env.PORT  ||  3001; const  app  =  express(); app.get('*', (req, res) => { res.send(` <!DOCTYPE HTML>\n <html>\n <head>\n <title>React SSR example</title>\n </head>\n <body>\n <main id='app'>Rendered on the server side</main>\n </body>\n </html>\n `); });\n\napp.listen(PORT, () => { console.log(`SSR React Router app running at ${PORT}`); });\n```", "```jsx\nimport  React, { Component } from  'react'; export  class  App  extends  Component { render() { return ( <div>Inside React App (rendered with SSR)</div> ); }\n}\n```", "```jsx\nimport  express  from  'express'; import  React  from  'react'; import  ReactDOMServer  from  'react-dom/server'; import { App } from  '../shared/App'; app.get('*', (req, res) => { const  reactMarkup  =  ReactDOMServer.renderToString(<App  />**)**; res.send(` <!DOCTYPE HTML>\n        <html>\n        ...\n **<main id='app'>**${reactMarkup}</main>   \n        ...\n        </html>\n    `); });\n```", "```jsx\n<main id='app'>\n <div data-reactroot=\"\"> Inside React App (rendered with SSR) **</div>** </main>\n```", "```jsx\nimport { StaticRouter } from  'react-router-dom'**;** app.get('*', (req, res) => { const  context  = {}; const  reactMarkup  =  ReactDOMServer.renderToString( <StaticRouter  context={context}  location={req.url}> <App  /> </StaticRouter**>**  );\n\n    res.send(` ...\n        <main id='app'>${reactMarkup}</main> ...\n    `);\n});\n```", "```jsx\nexport  class  App  extends  Component {    render() { return ( <div> Inside React App (rendered with SSR) <Route exact\n path='/' render={() =>  <div>Inside Route at path '/'</div>} />\n <Route path='/home' render={() =>  <div>Inside Home Route at path '/home'</div> }\n```", "```jsx\n />\n            </div> ); }\n}\n```", "```jsx\n<Route\n path=\"/\" render={() =>  <Redirect  to=\"/home\"  />**}** exact />\n```", "```jsx\n{\n    \"action\": \"REPLACE\",\n    \"location\": {\n        \"pathname\": \"/home\",\n        \"search\": \"\",\n        \"hash\": \"\",\n        \"state\": undefined\n    },\n    \"url\": \"/home\"\n}\n```", "```jsx\n...\nconst  reactMarkup  =  ReactDOMServer.renderToString(\n <StaticRouter  context={context}  location={req.url}> <App  /> </StaticRouter> ); if (context.url) { res.redirect(301, 'http://'  +  req.headers.host  +  context.url); } else { res.send(`\n        <!DOCTYPE HTML>\n        <html>\n            ...\n        </html>\n    `);\n}\n\n```", "```jsx\n<Route\n path=\"/\" exact render={({ staticContext, }) => { if (staticContext) { staticContext.status = 301**;** } return ( <Redirect  to=\"/home\"  /> ) }} />\n```", "```jsx\nres.redirect(context.status, 'http://'  +  req.headers.host  +  context.url);\n```", "```jsx\nimport { matchPath } from 'react-router'\n\napp.use('*', (req, res) => {\n    const isRouteAvailable = **matchPath(req.url, {** path: '/dashboard/',\n strict: true\n });\n    ...\n\n});\n```", "```jsx\n{\n    path: '/dashboard/',\n    url: '/dashboard/',\n    isExact: true,\n    params: {}\n}\n```", "```jsx\nconst  matchedObject  =  matchPath(req.url, '/github/:githubID');\n```", "```jsx\n{\n    path: '/github/:githubID',\n    url: '/github/sagar.ganatra',\n    isExact: true,\n    params: { githubID: 'sagar.ganatra' } \n}\n```", "```jsx\nexport  const  ROUTES  = [ { path:  '/', exact:  true  }, { path:  '/dashboard/', strict:  true }, { path:  '/github/:githubId' } ];\n```", "```jsx\napp.get('*', (req, res) => {\n const isRouteAvailable = ROUTES.find(route => { return matchPath(req.url, route**)**; })\n    ...\n});\n```", "```jsx\nif (!isRouteAvailable) {\n **res**.status(404**);** res.send(` <!DOCTYPE HTML> <html> <head><title>React SSR example</title></head> <body> <main id='app'> Requested page '${req.url}**' not found** </main> </body> </html>`); res.end(); }\n```", "```jsx\nconst  context  = { message:  'From StaticRouter\\'s context object' **}** const  reactMarkup  =  ReactDOMServer.renderToString( <StaticRouter  context={context}  location={req.url}  > <App  /> </StaticRouter> );\n```", "```jsx\n<Route\n path='/home' render={({ staticContext }) => { return ( <div> Inside Home Route, Message - {staticContext.message**}** </div> ); }} />\n```", "```jsx\n<Route\n path='/home' render={({ staticContext }) => { if (!__isBrowser__) { return ( <div> Inside Home Route, Message - {staticContext.message} </div> ); } return ( <div>Inside Home Route, Message</div> ); }} />\n```", "```jsx\n/server-side-app\n|--/src\n|----/client\n|------index.js\n|----/server\n|------index.js\n|----/shared\n|------App.js\n```", "```jsx\nimport  React  from  \"react\"; import  ReactDOM  from  \"react-dom\"; import { BrowserRouter } from  \"react-router-dom\"; import { App } from  \"../shared/App\"; // using hydrate instead of render in SSR app ReactDOM.hydrate( <BrowserRouter> <App  /> </BrowserRouter>, document.getElementById(\"app\") );\n```", "```jsx\nimport  path  from  'path'; import  webpack  from  'webpack'; export  default { entry:  './src/client/index.js', output: { path:  path.resolve(__dirname, './dist/public'), filename:  'bundle.js', publicPath:  '/' }, module: { rules: [ { test: /\\.js$/, use:  'babel-loader' } ] }, plugins: [ new  webpack.DefinePlugin({ __isBrowser__:  \"true\" }) ] }\n```", "```jsx\nimport clientConfig from './webpack-client.config.babel'; import serverConfig from './webpack-server.config.babel'; export default [clientConfig, serverConfig];\n```", "```jsx\n\"start\": \"webpack --config webpack.config.babel.js --mode development --watch\"\n```", "```jsx\nres.send(`\n <!DOCTYPE HTML> <html> <head> <title>React SSR example</title> **<script src='/bundle.js' defer></script>** ...\n    </html>\n`);\n```", "```jsx\napp.use(express.static('dist/public'))\n```"]