- en: Configuring Routes - Using Various Options in the Route Component
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置路由-使用路由组件中的各种选项
- en: React-Router allows you to declaratively define routes using the `<Route>` component.
    It's the main building block of React-Router, and renders the component mentioned
    in the `component` prop when the path value mentioned in the `path` prop matches
    the browser's URL location. The `<Route>` component, like any other React component,
    accepts a set of props. These props provide more granular control over how the
    browser's URL path should match the `<Route>` component's path, and a couple of
    other rendering options as well.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React-Router允许您使用`<Route>`组件声明性地定义路由。它是React-Router的主要构建块，并在`path` prop中提到的路径值与浏览器的URL位置匹配时呈现`component`
    prop中提到的组件。`<Route>`组件像任何其他React组件一样，接受一组props。这些props可以更精细地控制浏览器的URL路径应该如何匹配`<Route>`组件的路径，以及一些其他呈现选项。
- en: 'In the previous chapter, we briefly saw how a `<Route>` component is used to
    match the URL path and render a component. In this chapter, we will take a look
    at the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们简要地看到了如何使用`<Route>`组件来匹配URL路径并呈现组件。在本章中，我们将看一下以下内容：
- en: A deep dive into various props that can be added to a `<Route>` component, such
    as `exact`, `strict`, `render`, `children`, and `sensitive`.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入研究可以添加到`<Route>`组件的各种props，例如`exact`，`strict`，`render`，`children`和`sensitive`。
- en: '**Route component props**: the component, which gets rendered as a result of
    a `<Route>` path match, receives data as props that can then be used to create
    nested routes.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由组件props**：作为`<Route>`路径匹配的结果呈现的组件接收数据作为props，然后可以用于创建嵌套路由。'
- en: '**Route parameters**: The `<Route>` component''s path can be configured to
    accept additional params from the URL segment, and these params can be read in
    the rendered component.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由参数**：`<Route>`组件的路径可以配置为从URL段接受附加参数，并且可以在呈现的组件中读取这些参数。'
- en: '**Nested or dynamic routes**: a `<Route>` component can be added inside a rendered
    component instead of defining routes at the application level. The rendered component
    thus provides the next step in the application journey.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌套或动态路由**：可以在呈现的组件中添加`<Route>`组件，而不是在应用程序级别定义路由。因此，呈现的组件为应用程序旅程提供了下一步。'
- en: '**Generating routes from JSON configuration**: Route information available
    in the JSON object can be used to add routes to the application.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从JSON配置生成路由**：JSON对象中可用的路由信息可用于向应用程序添加路由。'
- en: Route props
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由props
- en: 'When you look at the source code of React-Router, the `<Route>` component accepts
    the following props:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当您查看React-Router的源代码时，`<Route>`组件接受以下props：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's take a look at each of these props in the following section.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中看看这些props的每一个。
- en: The exact prop
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: exact prop
- en: 'In our previous `<Route>` example, let''s change the `''/home''` route path
    to `''/''`, as shown here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的`<Route>`示例中，让我们将`'/home'`路由路径更改为`'/'`，如下所示：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With these routes in place, when the browser''s URL is set to `/dashboard`,
    you''ll notice that the content from both components is displayed as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些路由，当浏览器的URL设置为`/dashboard`时，您会注意到两个组件的内容如下显示：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, the `''/''` in `''/dashboard''` matches both of the `<Route>` paths, `''/''`
    and `''/dashboard''` ; therefore it renders content from both the components.
    To match the browser''s `location.pathname` exactly with the `<Route>` component''s
    path, add the exact prop to the `<Route>`, as shown here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`'/dashboard'`中的`'/'`匹配`<Route>`的两个路径`'/'`和`'/dashboard'`；因此它从两个组件中呈现内容。要使浏览器的`location.pathname`与`<Route>`组件的路径完全匹配，请向`<Route>`添加exact
    prop，如下所示：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Similarly, when you try to access the `'/dashboard'` and `'/dashboard/portfolio'` paths,
    you'll notice that in both instances, `DashboardComponent` is rendered. To prevent `'/dashboard/portfolio'`
    from matching the `<Route>` component with the `'/dashboard'` path, add the `exact` prop.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，当您尝试访问`'/dashboard'`和`'/dashboard/portfolio'`路径时，您会注意到在两种情况下都会呈现`DashboardComponent`。为了防止`'/dashboard/portfolio'`与具有`'/dashboard'`路径的`<Route>`组件匹配，添加`exact`属性。
- en: React-Router uses the `path-to-regexp` library internally to determine whether
    a route element's path prop matches the current location.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: React-Router在内部使用`path-to-regexp`库来确定路由元素的路径属性是否与当前位置匹配。
- en: The strict prop
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 严格属性
- en: When the `<Route>` path has a trailing slash, and you would like to match this
    path, including the trailing slash, with the browser's URL, then include the `strict`
    prop. For example, after changing the `<Route>` path from `'/dashboard'` to `'/dashboard/'`,
    the `<Route>` component would still match the URL path without the trailing slash.
    In other words, `'/dashboard'` would match the `<Route>` component with the `'/dashboard/'` path.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当`<Route>`路径有尾随斜杠，并且您希望将此路径与浏览器的URL匹配，包括尾随斜杠时，请包括`strict`属性。例如，在将`<Route>`路径从`'/dashboard'`更改为`'/dashboard/'`后，`<Route>`组件仍将匹配不带尾随斜杠的URL路径。换句话说，`'/dashboard'`将匹配具有`'/dashboard/'`路径的`<Route>`组件。
- en: 'However, after adding the `strict` prop, React-Router ensures that `<Route>`
    matches only if the URL has a trailing slash:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在添加`strict`属性之后，React-Router确保`<Route>`仅在URL有尾随斜杠时匹配：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With this `<Route>` configuration in place, the `'/dashboard'` path would not
    match. However, when you add a trailing slash to the URL, as in `'/dashboard/'`,
    the `<Route>` component with a `strict` prop will match and the `DashboardComponent`
    would be rendered.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个`<Route>`配置，`'/dashboard'`路径将不匹配。但是，当您在URL中添加尾随斜杠时，例如`'/dashboard/'`，具有`strict`属性的`<Route>`组件将匹配，并且将呈现`DashboardComponent`。
- en: Please note, if you mention additional URL segments, then it would still match
    the `path` prop mentioned in the `<Route>` component. For example, if the URL
    path is `'/dashboard/123'`, it would match the `'/dashboard/'` path with a `<Route>` component
    that has the `strict` prop. To match a path including the additional URL segments,
    you can specify the `exact` prop along with the `strict` prop.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您提到额外的URL段，那么它仍将匹配`<Route>`组件中提到的`path`属性。例如，如果URL路径是`'/dashboard/123'`，它将与具有`strict`属性的`<Route>`组件匹配`'/dashboard/'`路径。要匹配包括额外URL段的路径，可以在`strict`属性旁边指定`exact`属性。
- en: The sensitive prop
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏感属性
- en: 'A `<Route>` component''s path is not case-sensitive, that is, a `<Route>` component
    with its path prop value set to `''/Dashboard''` would match the `''/dashboard''`
    or `''/DASHBOARD''` URL path. To make a `<Route>` component''s path case-sensitive,
    add the `sensitive` prop:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Route>`组件的路径不区分大小写，也就是说，`<Route>`组件的路径属性值设置为`''/Dashboard''`将匹配`''/dashboard''`或`''/DASHBOARD''`的URL路径。要使`<Route>`组件的路径区分大小写，添加`sensitive`属性：'
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `sensitive` prop ensures that the path prop''s case is taken into consideration
    when matching it with the browser''s URL path. By adding the `sensitive` prop,
    one can define routes with the same pathname, but do so using a different case:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`sensitive`属性确保在将其与浏览器的URL路径匹配时，考虑路径属性的大小写。通过添加`sensitive`属性，可以使用不同的大小写定义具有相同路径名的路由。'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code would create two distinct routes and would render the corresponding
    component when the `<Route>` component's case-sensitive path matches the browser's
    URL path.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将创建两个不同的路由，并且当`<Route>`组件的区分大小写路径与浏览器的URL路径匹配时，将呈现相应的组件。
- en: Inline rendering with the render prop
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用render prop进行内联渲染
- en: We have already taken a look at how the `component` prop can be used to render
    a view when the `<Route>` path matches the browser's `location.pathname`. There
    are two other props available to render a view: `render` and `children`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过`component`属性如何在`<Route>`路径匹配浏览器的`location.pathname`时用于渲染视图。还有两个其他可用于渲染视图的属性：`render`和`children`。
- en: 'The `render` prop is used for inline rendering. The function mentioned as a
    value to the `render` prop should return a React element similar to the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`render`属性用于内联渲染。作为`render`属性值的函数应返回一个类似于以下的React元素：'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: From the preceding code snippet, when the `'/user'` path matches the browser's
    URL, the function specified as a value to the `render` prop is executed, and the
    React element returned from this function is rendered.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码片段中，当`'/user'`路径匹配浏览器的URL时，作为`render`属性值指定的函数被执行，并且从该函数返回的React元素被渲染。
- en: When you specify both `component` and `render` props in the same `<Route>` component,
    the `component` prop will take precedence.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当在同一个`<Route>`组件中同时指定`component`和`render`属性时，`component`属性将优先。
- en: Inline rendering with the children prop
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用children属性进行内联渲染
- en: 'The `children` prop should be used in a case where you want to render the view
    irrespective of whether or not there''s a path match. The syntax for the `children`
    prop is similar to the `render` prop, as shown here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`children`属性应该在您想要渲染视图的情况下使用，无论是否有路径匹配。`children`属性的语法与`render`属性类似，如下所示：'
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `<Route>` component with a `children` prop is rendered even if the `path`
    prop is not specified. Also, the `exact` and `strict` props will not have any
    effect on a `<Route>` component with a `children` prop.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`children`属性的`<Route>`组件即使未指定`path`属性也会被渲染。此外，`exact`和`strict`属性对具有`children`属性的`<Route>`组件没有任何影响。
- en: Both the `component` and `render` props take precedence over the `children`
    prop. Also, when either the `component` or `render` props are mentioned, the view
    is rendered only if the path matches the requested URL.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`component`和`render`属性都优先于`children`属性。此外，当`component`或`render`属性被提及时，只有当路径匹配请求的URL时才会渲染视图。'
- en: 'A `<Route>` component with a `children` prop is rendered based on its position
    in the list of routes. For example, if the previous `<Route>` component is specified
    as the last entry in the list of routes, then it is rendered after all the preceding
    matching routes have been rendered. Also, if the previous `<Route>` component
    is listed before the matching route, then the route''s content is rendered before
    rendering the matching route''s content, as seen here:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 基于路由列表中的位置，具有`children`属性的`<Route>`组件被渲染。例如，如果前一个`<Route>`组件被指定为路由列表中的最后一个条目，则在渲染所有先前匹配的路由之后被渲染。此外，如果前一个`<Route>`组件在匹配路由之前列出，则路由的内容在渲染匹配路由的内容之前被渲染，如下所示：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, when you try to access the `'/user'` path, the `<Route>` component with
    a `children` prop is rendered before rendering the route with the `'/user'` path.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当您尝试访问`'/user'`路径时，具有`children`属性的`<Route>`组件在渲染`'/user'`路径之前被渲染。
- en: Route component props
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由组件属性
- en: The component that gets rendered when the `<Route>` path matches the browser's
    URL path receives certain `props`, such as `history`, `location`, `match`, and
    `staticContext`. The data provided by these props includes information pertaining
    to the route. The props are available to the component that gets rendered using
    the `component`, `render`, or `children` props of the `<Route>` component.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当`<Route>`路径匹配浏览器的URL路径时，被渲染的组件接收特定的`props`，例如`history`、`location`、`match`和`staticContext`。这些props提供的数据包括与路由相关的信息。这些props可用于使用`<Route>`组件的`component`、`render`或`children`属性渲染的组件。
- en: The `staticContext` property is set when you are rendering the application on
    the server side and it is not available (as in, set to `undefined`) in the client-side
    router that is, when using the `<BrowserRouter>` interface. Server-side rendering
    of the application is covered in the upcoming chapters.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在服务器端渲染应用程序时设置`staticContext`属性，并且在客户端路由器中（即使用`<BrowserRouter>`接口时）不可用（即设置为`undefined`）时。
- en: History
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 历史
- en: 'React-Router has a dependency on the `history` package. `history` is a JavaScript
    library used in maintaining sessions in any JavaScript application. Consider the
    following quote from history’s documentation ([https://github.com/ReactTraining/history](https://github.com/ReactTraining/history)):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: React-Router依赖于`history`包。`history`是一个JavaScript库，用于在任何JavaScript应用程序中维护会话。请考虑来自`history`文档的以下引用（[https://github.com/ReactTraining/history](https://github.com/ReactTraining/history)）：
- en: '"**history** is a JavaScript library that lets you easily manage session history
    anywhere JavaScript runs. history abstracts away the differences in various environments
    and provides a minimal API that lets you manage the history stack, navigate, confirm
    navigation, and persist state between sessions."'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: “**history**是一个JavaScript库，让您可以轻松地在JavaScript运行的任何地方管理会话历史。`history`抽象了各种环境的差异，并提供了一个最小的API，让您可以管理历史堆栈、导航、确认导航和在会话之间保持状态。”
- en: 'The `history` object has several properties and methods:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`history`对象有几个属性和方法：'
- en: '**action**: The current action, `PUSH`, `POP`, or `REPLACE`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动作：当前动作，`PUSH`、`POP`或`REPLACE`
- en: '**length**: The count of entries in the history stack'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长度：历史堆栈中条目的计数
- en: '**location**: The current location, which includes the `hash`, `pathname`, `search`,
    and `state` properties'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置：包括`hash`、`pathname`、`search`和`state`属性的当前位置
- en: '**hash**: Hash fragment'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hash`：哈希片段'
- en: '**pathname**: URL path'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pathname`：URL路径'
- en: '**search**: URL query string'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`search`：URL查询字符串'
- en: '**state**: The state information provided when navigating from one route to
    the other using `location.pushState`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态：使用`location.pushState`从一个路由导航到另一个路由时提供的状态信息
- en: '`block()`: A function that registers a prompt message that will be displayed
    when the user tries to navigate away from the current page.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`block()`: 注册一个提示消息的函数，当用户尝试离开当前页面时将显示该消息。'
- en: '`createHref()`: A function that constructs a URL segment; it accepts an object
    with the `pathname`, `search`, and `hash` properties.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createHref()`: 构造URL段的函数；它接受一个带有`pathname`、`search`和`hash`属性的对象。'
- en: '`go(n)`: A function that navigates through the history stack. `history.go(-1)`
    moves the pointer back by one position and `history.go(1)` moves the pointer forward
    by one position in the `history` stack.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`go(n)`: 导航历史堆栈。`history.go(-1)`将指针向后移动一个位置，`history.go(1)`将指针向前移动一个位置。'
- en: '`goBack()`: A function that navigates the pointer back by one position in the
    `history` stack; the same as `history.go(-1)`.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`goBack()`: 将指针向后移动一个位置在`history`堆栈中；与`history.go(-1)`相同。'
- en: '`goForward()`: A function that navigates the pointer forward by one position
    in the `history` stack; the same as `history.go(1)`.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`goForward()`: 将指针向前移动一个位置在`history`堆栈中；与`history.go(1)`相同。'
- en: '`listen(listenerFn)`: A function that registers a listener function that gets
    called whenever there''s a change in `history.location`.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`listen(listenerFn)`: 注册一个监听器函数，每当`history.location`发生变化时就会调用该函数。'
- en: '`push(path, state?)`: A function that navigates to the given pathname, adding
    an entry to the `history` stack. It optionally accepts a `state` parameter, which
    can be used to pass application state data.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push(path, state?)`: 导航到给定的路径名，向`history`堆栈添加一个条目。它可以选择接受一个`state`参数，用于传递应用程序状态数据。'
- en: '`replace(path, state?)`: A function that navigates to the given pathname, replacing
    the current entry in the `history` stack. It also accepts an optional `state`
    parameter.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`replace(path, state?)`: 一个函数，用于导航到给定的路径名，替换`history`堆栈中的当前条目。它还接受一个可选的`state`参数。'
- en: The `history` object is used by React-Router internally to update the entries
    in the history stack when the user tries to navigate between pages. It's provided
    to the rendered component as a prop so that the user can be navigated to different
    pages using the aforementioned methods in the `history` object. In the next chapter,
    we will take a look at various APIs provided by React-Router that help you navigate
    to different routes defined in the application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`history`对象由React-Router在内部使用，用于在用户尝试在页面之间导航时更新历史堆栈中的条目。它作为prop提供给渲染的组件，以便用户可以使用`history`对象中的上述方法导航到不同的页面。在下一章中，我们将看看React-Router提供的各种API，帮助您导航到应用程序中定义的不同路由。'
- en: The location object
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位置对象
- en: The `location` object gives a snapshot of data representing the current state
    of the application. It includes the following properties: `pathname`, `hash`,
    `search`, and `state`. The navigation components can provide values to these props,
    which can then be read by the rendered component that matches the browser's URL.
    As mentioned previously, we will take a look at various navigation components
    in [Chapter3](9ac59d4f-1b5c-4da6-98f0-986ac2b7e3ae.xhtml), *Using Link and NavLink
    Components to Navigate to a Route*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`location`对象提供了表示应用程序当前状态的数据快照。它包括以下属性：`pathname`、`hash`、`search`和`state`。导航组件可以为这些prop提供值，然后由匹配浏览器URL的渲染组件读取。如前所述，我们将在[第3章](9ac59d4f-1b5c-4da6-98f0-986ac2b7e3ae.xhtml)中看看各种导航组件，*使用Link和NavLink组件导航到路由*。'
- en: The location information is also found in the `history` object; however, the `history`
    object is mutable, and thus, accessing the location in the `history` object should
    be avoided.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 位置信息也可以在`history`对象中找到；但是，`history`对象是可变的，因此应避免在`history`对象中访问位置。
- en: The match object
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匹配对象
- en: The `match` object contains information on how the `<Route>` path matches the
    current URL. It includes the `url`, `path`, `isExact`, and `params` properties.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`match`对象包含有关`<Route>`路径如何匹配当前URL的信息。它包括`url`、`path`、`isExact`和`params`属性。'
- en: 'Let''s refer to one of the earlier routes where the `render` prop is used:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们参考之前使用`render` prop的路由之一：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When you try accessing the `/user` path, the `match` object''s properties will
    have the following values:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当您尝试访问`/user`路径时，`match`对象的属性将具有以下值：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`url`: A string that returns the matched portion of the URL'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`: 返回URL的匹配部分的字符串'
- en: '`path`: A string that returns the route''s path string, that is, the path pattern
    mentioned in the `<Route>` component''s path prop'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path`: 返回路由路径字符串的字符串，即在`<Route>`组件的路径prop中提到的路径模式'
- en: '`params`: An object containing a list of path params passed to the route (there
    will be more on params in the upcoming sections)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params`: 包含传递给路由的路径参数列表的对象（在接下来的部分中将更多地介绍参数）'
- en: '`isExact`: A Boolean value; this is `true` if the URL matches the provided
    `path` prop in its entirety'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isExact`: 一个布尔值；如果URL完全匹配提供的`path` prop，则为`true`'
- en: The `isExact` property is `false` if only a part of the URL segment matches
    the `<Route>` component's path. For example, the `<Route>` component with the `/user` path
    doesn't match the URL of `/user/123` in its entirety, and in this case, `isExact`
    is false.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果URL段的部分仅匹配`<Route>`组件的路径，则`isExact`属性为`false`。例如，具有`/user`路径的`<Route>`组件与`/user/123`的URL不完全匹配，在这种情况下，`isExact`为false。
- en: 'As mentioned earlier, a `<Route>` component with a `children` prop is rendered
    irrespective of whether or not the `path` prop matches the browser''s URL path.
    Here, the `match` object would be set to null if the path does not match the URL
    segment:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，带有 `children` 属性的 `<Route>` 组件会被渲染，无论 `path` 属性是否匹配浏览器的 URL 路径。在这种情况下，如果路径不匹配
    URL 段，`match` 对象将被设置为 null：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With this `<Route>` configuration, when you try to access the `/user` path,
    the `<Route>` component with the `/sidenav` path is matched, since it has a `children` prop.
    However, here the `match` object is set to null. This helps in determining whether
    a path matched the URL segment or not for a `<Route>` component with a `children`
    prop.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个 `<Route>` 配置时，当您尝试访问 `/user` 路径时，将匹配带有 `/sidenav` 路径的 `<Route>` 组件，因为它有一个
    `children` 属性。然而，在这里，`match` 对象被设置为 null。这有助于确定带有 `children` 属性的 `<Route>` 组件的路径是否匹配了
    URL 段。
- en: Route parameters
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由参数
- en: A `<Route>` component in React-Router can be configured to accept URL parameters
    that change for a given object. For example, to display user information for a
    given `userID`, the URL path could look like `'/user/1'` for a user with a `userID` of `'1'`, and `'/user/123'` for
    a user with a `userID` of `'123'`. The last portion of the URL is dynamic; however,
    in each instance, the rendered component would perform the same operation for
    a given `userID`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React-Router 中，可以配置 `<Route>` 组件来接受给定对象的 URL 参数。例如，要显示给定 `userID` 的用户信息，URL
    路径可能看起来像 `'/user/1'`（`userID` 为 `'1'` 的用户）和 `'/user/123'`（`userID` 为 `'123'` 的用户）。URL
    的最后部分是动态的；然而，在每种情况下，渲染的组件都会对给定的 `userID` 执行相同的操作。
- en: An example of such a use case is Twitter's profile page. The page accepts `twitterID` and
    displays the feed for the given user.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的用例示例是 Twitter 的个人资料页面。该页面接受 `twitterID` 并显示给定用户的动态。
- en: 'A `<Route>` component can be configured to accept the dynamic portion in the
    URL by appending an additional path in the `''to''` prop, prefixed with a colon
    (:) as seen here:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `to` 属性中附加一个以冒号 (:) 为前缀的额外路径，可以配置 React-Router 中的 `<Route>` 组件来接受 URL 中的动态部分，如下所示：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, the `'/:githubID'` path is dynamic, and can match paths such as `'/github/ryanflorence'` and `'/github/mjackson'` (the
    GitHub IDs of the creators of React-Router).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`'/:githubID'` 路径是动态的，可以匹配诸如 `'/github/ryanflorence'` 和 `'/github/mjackson'`
    这样的路径（React-Router 的创建者的 GitHub ID）。
- en: 'These matched URL parameters can then be consumed in the rendered component
    using `match.params`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以在渲染的组件中使用 `match.params` 来使用这些匹配的 URL 参数：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When you try accessing the `''/github/mjackson''` URL path, you''ll see this
    message:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当您尝试访问 `'/github/mjackson'` URL 路径时，您将看到这条消息：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `match.params` object contains key-value pairs of the matching params in
    the route. The `<Route>` component can also accept multiple params in the URL,
    as shown here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`match.params` 对象包含路由中匹配参数的键值对。`<Route>` 组件也可以接受 URL 中的多个参数，如下所示：'
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, the `githubID` and `twitterID` params are dynamic and can match URL paths
    such as `'/github/ryanflorence/mjackson'`. The second param, `twitterID`, can
    be read in the component using `match.params.twitterID`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`githubID` 和 `twitterID` 参数是动态的，可以匹配 URL 路径，比如 `'/github/ryanflorence/mjackson'`。第二个参数
    `twitterID` 可以在组件中使用 `match.params.twitterID` 进行读取。
- en: 'In the previous `<Route>` configuration, the `githubID` and `twitterID` params
    are required params, that is, the route won''t match if both the params are not
    present in the URL path. To mark a param as optional, suffix the param with a
    question mark (`?`), as shown in the following snippet:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的 `<Route>` 配置中，`githubID` 和 `twitterID` 参数是必需的参数，也就是说，如果 URL 路径中没有这两个参数，路由就不会匹配。要将参数标记为可选的，可以在参数后面加上问号
    (`?`)，如下面的代码片段所示：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding `<Route>` configuration, the `twitterID` param is marked as
    optional. This means that when you try to access the `'/github/ryanflorence'` path,
    that is, access the path without providing a value to the `twitterID` param in
    the URL, then the path will match the URL and the component will be rendered.
    However, when the component tries to access the param using `match.params.twitterID`,
    it will return `undefined`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`<Route>`配置中，`twitterID`参数被标记为可选。这意味着当您尝试访问`'/github/ryanflorence'`路径，即在URL中不提供`twitterID`参数的值时，路径将匹配URL并渲染组件。然而，当组件尝试使用`match.params.twitterID`访问参数时，它将返回`undefined`。
- en: 'The `<Route>` path can also be configured to accept params that match a regular
    expression, as shown here:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Route>`路径也可以配置为接受与正则表达式匹配的参数，如下所示：'
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, the `githubID` param is restricted to alphanumeric strings, and the `userID` param
    is restricted to numeric values. The param is suffixed with a regex pattern to
    define the kind of values that the `<Route>` param would accept, that is, a pattern
    that restricts the values that can be provided to the param.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`githubID`参数限制为字母数字字符串，`userID`参数限制为数字值。参数后缀有一个正则表达式模式，用于定义`<Route>`参数将接受的值的类型，即限制可以提供给参数的值的模式。
- en: Nested routes and dynamic routing
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套路由和动态路由
- en: 'The earlier versions of React-Router required the routes to be defined upfront,
    and the child routes to be nested inside another route, as seen here:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: React-Router的早期版本要求预先定义路由，并将子路由嵌套在另一个路由内，如下所示：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This code can be considered static routing, wherein the route configuration
    is required by the library when the application initializes. Here, the route with
    the `'/'` path serves as the parent of all the routes, and the route with the `'user'` path
    is a child route of `'/'`, and a parent route for the route with the `'instagram'` path.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码可以被认为是静态路由，即在应用程序初始化时，库需要路由配置。在这里，具有`'/'`路径的路由作为所有路由的父路由，具有`'user'`路径的路由是`'/'`的子路由，也是具有`'instagram'`路径的路由的父路由。
- en: In React-Router v4, nested routes can be defined inside the rendered components,
    that is, routes get registered as the user navigates through the application. With
    the rewrite in v4, `<Route>` is a React component, and thus can be included in
    any component's `render` method.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在React-Router v4中，可以在渲染的组件内定义嵌套路由，也就是说，随着用户在应用程序中导航，路由会被注册。通过v4的重写，`<Route>`是一个React组件，因此可以包含在任何组件的`render`方法中。
- en: 'Consider a parent route as defined in `App.js` (the `<App />` root component):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑在`App.js`（`<App />`根组件）中定义的父路由：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, the `'/category'` path is mapped to the `CategoryComponent` component.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`'/category'`路径映射到`CategoryComponent`组件。
- en: '`CategoryComponent` can, in turn, render other routes using the same `<Route>`
    component. However, when defining routes inside the rendered component (`CategoryComponent`),
    a reference to the current matching URL is required to be specified in the `<Route>`
    component''s `to` prop. For example, a sub route with a `''/pictures''` path can
    be created using a `<Route>` component; however, an absolute path needs to be
    specified in the `to` prop, that is, `''/category/pictures''` or, more generally, `''/<current_matching_url>/pictures''`.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`CategoryComponent`可以反过来使用相同的`<Route>`组件渲染其他路由。然而，在渲染组件（`CategoryComponent`）内部定义路由时，需要在`<Route>`组件的`to`属性中指定对当前匹配URL的引用。例如，可以使用`<Route>`组件创建一个带有`''/pictures''`路径的子路由；然而，在`to`属性中需要指定绝对路径，即`''/category/pictures''`或更一般地，`''/<current_matching_url>/pictures''`。'
- en: 'As mentioned earlier, the `match` prop passed to the rendered component contains
    information on how the path matched the current URL. The `match` prop''s URL property
    can be used to refer to the parent URL:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，传递给呈现组件的`match`属性包含有关路径如何匹配当前URL的信息。`match`属性的URL属性可用于引用父URL：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `CategoryComponent` defined in the preceding snippet accepts the `match` prop,
    and the routes defined in the component have path values in the format of `'${match.url}/<child_route_path>'`.
    The `match.url` template variable contains the parent route's URL value, in this
    case, `/category`. Using the same principle, routes with the paths of `'/category/pictures'`
    and `'/category/books'` are also defined.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面片段中定义的`CategoryComponent`接受`match`属性，并且组件中定义的路由具有`'${match.url}/<child_route_path>'`格式的路径值。`match.url`模板变量包含父路由的URL值，在本例中为`/category`。使用相同的原则，还定义了路径为`'/category/pictures'`和`'/category/books'`的路由。
- en: 'Let''s test these routes:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试这些路由：
- en: '**Scenario 1**: `location.pathname` is `''/category''`:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景1**：`location.pathname` 是 `''/category''`：'
- en: 'Here, the parent route is rendered and the page will render the route information
    as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，将呈现父路由，并且页面将呈现如下路由信息：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, `match.isExact` is true, since there are no additional URL segments after
    the `/category` path.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`match.isExact`为true，因为在`/category`路径之后没有其他URL段。
- en: '**Scenario 2:** `location.pathname` is `''/category/pictures''` or `''/category/books''`:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景2**：`location.pathname` 是 `''/category/pictures''` 或 `''/category/books''`：'
- en: 'After rendering the `''/category''` parent route, the library looks for `<Route>` components
    with the paths of `''/category/pictures''` and `''/category/books''`. It finds
    one and renders the corresponding component:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 呈现`'/category'`父路由后，库会查找具有`'/category/pictures'`和`'/category/books'`路径的`<Route>`组件。它找到一个并呈现相应的组件：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, `match.isExact` in the parent route (a `<Route>` component with a `'/category'`
    path) is false; however, it's true in the child route.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在父路由（具有`'/category'`路径的`<Route>`组件）中，`match.isExact`为false；但是在子路由中为true。
- en: '**Scenario 3**: `location.pathname` is `''/category/books/popular''`:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景3**：`location.pathname` 是 `''/category/books/popular''`：'
- en: 'It''s possible to nest as many routes as you wish. Here, `''/books''` is a
    nested route, and also has another nested route, `''/popular''`, which matches
    the `''/category/books/popular''` path:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以嵌套任意多个路由。在这里，`'/books'` 是一个嵌套路由，并且还有另一个嵌套路由，`'/popular'`，它匹配了`'/category/books/popular'`路径：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `match` prop is very useful in creating nested routes. These nested routes
    become accessible only when their parent route is rendered, allowing you to add
    your routes dynamically.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`match`属性在创建嵌套路由时非常有用。这些嵌套路由只有在呈现其父路由时才可访问，从而允许您动态添加路由。'
- en: Dynamic routes from JSON
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 来自JSON的动态路由
- en: A set of `<Route>` components can also be generated by looking up an array containing
    a collection of route configuration options. Each route option should contain
    the necessary details, such as `'path'` and `'component'`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过查找包含路由配置选项集合的数组来生成一组`<Route>`组件。每个路由选项应包含必要的详细信息，如`'path'`和`'component'`。
- en: 'A collection of routes could look like the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一组路由可能如下所示：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Each object in the preceding array contains a `''path''` key specifying the
    route path, and a `''component''` key containing a reference to the component
    that you want to render when the user visits the route. The preceding collection
    can then be used inside the component''s `render` method to generate a list of
    `<Route>` components, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 前面数组中的每个对象都包含一个指定路由路径的`'path'`键，以及包含用户访问路由时要呈现的组件的引用的`'component'`键。然后可以在组件的`render`方法中使用前面的集合来生成一组`<Route>`组件，如下所示：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The route configuration defined in `STOCK_ROUTES` is used to add a list of `<Route>`
    components when the `StockComponent` renders. The parent `<Route>` component is
    rendered at the `'/stocks'` path, hence the use of `match.url` in the path when
    generating the `<Route>` component under the `'/stocks'` path.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在`STOCK_ROUTES`中定义的路由配置用于在`StockComponent`渲染时添加一系列`<Route>`组件。父级`<Route>`组件在`'/stocks'`路径处渲染，因此在生成`'/stocks'`路径下的`<Route>`组件时使用了`match.url`。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned that the `<Route>` component can be configured using
    various props. This includes using the `exact` prop to render a component only
    when the browser's URL path matches the value mentioned in the `<Route>` component's
    path; using the `strict` prop in a `<Route>` component to ensure that the URL
    path matches the trailing slash mentioned in the `path` prop; including the `sensitive`
    prop to make the `path` prop value case-sensitive; and using the `render` and
    `children` props for inline rendering. The `<Route>` component with the `children`
    prop renders irrespective of the value specified in the `path` prop. This is useful
    in cases where you have several view components in the page layout and these should
    be rendered irrespective of the value specified in the `path` prop.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到`<Route>`组件可以使用各种props进行配置。这包括使用`exact` prop仅在浏览器的URL路径与`<Route>`组件中的路径值匹配时才渲染组件；在`<Route>`组件中使用`strict`
    prop确保URL路径与`path` prop中指定的尾部斜杠匹配；包括`sensitive` prop使`path` prop的值区分大小写；以及使用`render`和`children`
    props进行内联渲染。带有`children` prop的`<Route>`组件会渲染，而不管`path` prop中指定的值是什么。这在页面布局中有多个视图组件并且这些组件应该渲染时非常有用，而不管`path`
    prop中指定的值是什么。
- en: The component rendered as a result of the `<Route>` path match can receive data
    as props. This includes props such as `history`, `location`, `match`, and `staticContext`.
    The `match` prop can be used to used create nested routes, that is, the `url`
    property in the `match` prop contains information that can then be used in the
    `path` prop of the `<Route>` component included in the rendered component. The `<Route>`
    components can also be added by looking up the configuration specified in an object.
    An array containing `path` and `component` information can then be used to add
    multiple routes in the application.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`<Route>`路径匹配的结果组件可以接收数据作为props。这包括props，如`history`、`location`、`match`和`staticContext`。`match`
    prop可用于创建嵌套路由，即`match` prop中的`url`属性包含的信息可以用于渲染组件中包含的`<Route>`组件的`path` prop中。`<Route>`组件也可以通过查找对象中指定的配置来添加。然后可以使用包含`path`和`component`信息的数组来在应用程序中添加多个路由。
- en: The `<Route>` component's `path` prop can be configured to accept URL segments
    as path params. These params can then be read by the rendered component using
    `match.params`. The params can be configured to accept certain values by specifying
    a regular expression as a suffix to the `path` param.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Route>`组件的`path` prop可以配置为接受URL段作为路径参数。然后渲染的组件可以使用`match.params`来读取这些参数。可以通过在`path`参数的后缀中指定正则表达式来配置参数以接受特定值。'
