["```jsx\n@action onClick = () => {\n    this.props.todo.completed = true\n}\n```", "```jsx\n@observable todos = [\n    { title: 'Learn MobX', completed: false }\n]\n```", "```jsx\n@computed get activeTodos () {\n    return this.todos.filter(todo => !todo.completed)\n}\n```", "```jsx\nconst TodoList = observer(({ todos }) => (\n    <div>\n        {todos.map(todo => <TodoItem {...todo} />)}\n    </div>\n)\n```", "```jsx\n> npm install --save mobx mobx-react\n```", "```jsx\nimport { observable, action, computed, decorate } from 'mobx'\n```", "```jsx\nimport { fetchAPITodos, generateID } from './api'\n```", "```jsx\nexport default class TodoStore {\n```", "```jsx\n    todos = []\n    filter = 'all'\n```", "```jsx\n    get filteredTodos () {\n        switch (this.filter) {\n            case 'active':\n                return this.todos.filter(t => t.completed === false)\n\n            case 'completed':\n                return this.todos.filter(t => t.completed === true)\n\n            default:\n            case 'all':\n                return this.todos\n        }\n    }\n```", "```jsx\n    fetch () {\n        fetchAPITodos().then((fetchedTodos) => {\n            this.todos = fetchedTodos\n        })\n    }\n```", "```jsx\n    addTodo (title) {\n        this.todos.push({ id: generateID(), title, completed: false })\n    }\n```", "```jsx\n    toggleTodo (id) {\n        for (let todo of this.todos) {\n            if (todo.id === id) {\n                todo.completed = !todo.completed\n                break\n            }\n        }\n    }\n```", "```jsx\n    removeTodo (id) {\n        let index = 0\n        for (let todo of this.todos) {\n            if (todo.id === id) {\n                break\n            } else {\n                index++\n            }\n        }\n```", "```jsx\n        this.todos.splice(index, 1)\n    }\n```", "```jsx\n    filterTodos (filterName) {\n        this.filter = filterName\n    }\n}\n```", "```jsx\ndecorate(TodoStore, {\n```", "```jsx\n    todos: observable,\n    filter: observable,\n```", "```jsx\n    filteredTodos: computed,\n```", "```jsx\n    fetch: action,\n    addTodo: action,\n    toggleTodo: action,\n    removeTodo: action,\n    filterTodos: action\n})\n```", "```jsx\nimport { Provider } from 'mobx-react'\n```", "```jsx\nimport TodoStore from './store'\n```", "```jsx\nconst store = new TodoStore()\n```", "```jsx\nReactDOM.render(\n    <Provider todoStore={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n```", "```jsx\nimport { inject } from 'mobx-react'\n```", "```jsx\nexport default inject('todoStore')(function App ({ todoStore }) {\n```", "```jsx\n    useEffect(() => {\n todoStore.fetch()\n    }, [ todoStore ])\n```", "```jsx\n    return (\n        <div style={{ width: 400 }}>\n            <Header />\n            <AddTodo />\n            <hr />\n            <TodoList />\n            <hr />\n            <TodoFilter />\n        </div>\n    )\n})\n```", "```jsx\nimport { inject, observer } from 'mobx-react'\n```", "```jsx\nexport default inject('todoStore')(observer(function TodoList ({ todoStore }) {\n```", "```jsx\n    return todoStore.filteredTodos.map(item =>\n        <TodoItem key={item.id} item={item} />\n    )\n}))\n```", "```jsx\nimport { inject, observer } from 'mobx-react'\n```", "```jsx\nexport default inject('todoStore')(observer(function TodoItem ({ item, todoStore }) {\n```", "```jsx\n    const { title, completed, id } = item\n```", "```jsx\n    function handleToggle () {\n        todoStore.toggleTodo(id)\n    }\n\n    function handleRemove () {\n        todoStore.removeTodo(id)\n    }\n```", "```jsx\nimport { inject } from 'mobx-react'\n```", "```jsx\nexport default inject('todoStore')(function AddTodo ({ todoStore }) {\n```", "```jsx\n    function handleAdd () {\n        if (input) {\n            todoStore.addTodo(input)\n            setInput('')\n        }\n    }\n```", "```jsx\nimport { inject, observer } from 'mobx-react'\n```", "```jsx\nconst TodoFilterItem = inject('todoStore')(observer(function TodoFilterItemWrapped ({ name, todoStore }) {\n```", "```jsx\n    function handleFilter () {\n        todoStore.filterTodos(name)\n    }\n```", "```jsx\n    const style = {\n        color: 'blue',\n        cursor: 'pointer',\n        fontWeight: (todoStore.filter === name) ? 'bold': 'normal'\n    }\n```", "```jsx\nexport  default  function  TodoFilter  (props)  {\n  return ( <div> <TodoFilterItem {...props} name=\"all\" />{' / '} <TodoFilterItem {...props} name=\"active\" />{' / '} <TodoFilterItem {...props} name=\"completed\" /> </div> ) }\n```", "```jsx\nimport { useContext } from 'react'\nimport { MobXProviderContext } from 'mobx-react'\n```", "```jsx\nexport function useStores () {\n    return useContext(MobXProviderContext)\n}\n```", "```jsx\nexport function useTodoStore () {\n    const { todoStore } = useStores()\n    return todoStore\n}\n```", "```jsx\nimport { inject } from 'mobx-react'\n```", "```jsx\nimport { useTodoStore } from './hooks'\n```", "```jsx\nexport default function App () {\n```", "```jsx\n    const todoStore = useTodoStore()\n```", "```jsx\nimport { inject, observer } from 'mobx-react'\n```", "```jsx\nimport { useObserver } from 'mobx-react'\nimport { useTodoStore } from './hooks'\n```", "```jsx\nexport default function TodoList () {\n```", "```jsx\n    const todoStore = useTodoStore()\n```", "```jsx\n    return useObserver(() =>\n        todoStore.filteredTodos.map(item =>\n            <TodoItem key={item.id} item={item} />\n        )\n    )\n}\n```", "```jsx\nimport { inject, observer } from 'mobx-react'\n```", "```jsx\nimport { useObserver } from 'mobx-react'\n\nimport { useTodoStore } from './hooks'\n```", "```jsx\nexport default function TodoItem ({ item }) {\n```", "```jsx\n const { title, completed, id } = item\n```", "```jsx\n    const todoStore = useTodoStore()\n```", "```jsx\n    function handleToggle () {\n        todoStore.toggleTodo(item.id)\n    }\n\n    function handleRemove () {\n        todoStore.removeTodo(item.id)\n    }\n```", "```jsx\n    return useObserver(() => {\n const { title, completed } = item\n        return (\n            <div style={{ width: 400, height: 25 }}>\n                <input type=\"checkbox\" checked={completed} onChange={handleToggle} />\n                {title}\n                <button style={{ float: 'right' }} onClick={handleRemove}>x</button>\n            </div>\n        )\n    })\n}\n```", "```jsx\n    return useObserver(() => {\n        const { title, completed, id } = item\n\n        function handleToggle () {\n            todoStore.toggleTodo(id)\n        }\n\n        function handleRemove () {\n            todoStore.removeTodo(id)\n        }\n\n        return (\n            <div style={{ width: 400, height: 25 }}>\n                <input type=\"checkbox\" checked={completed} onChange={handleToggle} />\n                {title}\n                <button style={{ float: 'right' }} onClick={handleRemove}>x</button>\n            </div>\n        )\n    })\n```", "```jsx\nimport { inject } from 'mobx-react'\n```", "```jsx\nimport { useTodoStore } from './hooks'\n```", "```jsx\nexport default function AddTodo () {\n```", "```jsx\n    const todoStore = useTodoStore()\n```", "```jsx\nimport { inject, observer } from 'mobx-react'\n```", "```jsx\nimport { useObserver } from 'mobx-react'\nimport { useTodoStore } from './hooks'\n```", "```jsx\nfunction TodoFilterItem ({ name }) {\n```", "```jsx\n    const todoStore = useTodoStore()\n```", "```jsx\n    const style = useObserver(() => ({\n        color: 'blue',\n        cursor: 'pointer',\n        fontWeight: (todoStore.filter === name) ? 'bold' : 'normal'\n    }))\n```", "```jsx\nimport { useLocalStore, useObserver } from 'mobx-react'\n```", "```jsx\n    const [ input, setInput ] = useState('')\n```", "```jsx\n    const inputStore = useLocalStore(() => ({\n```", "```jsx\n        value: '',\n```", "```jsx\n        get disabled () {\n            return !this.value\n        },\n```", "```jsx\n        updateFromInput (e) {\n            this.value = e.target.value\n        },\n```", "```jsx\n        update (val) {\n            this.value = val\n        }\n    }))\n```", "```jsx\n    function handleInput (e) {\n        inputStore.updateFromInput(e)\n    }\n```", "```jsx\n    function handleAdd () {\n        if (inputStore.value) {\n            todoStore.addTodo(inputStore.value)\n            inputStore.update('') }}\n```", "```jsx\n    return useObserver(() => (\n        <form onSubmit={e => { e.preventDefault(); handleAdd() }}>\n            <input\n                type=\"text\"\n                placeholder=\"enter new task...\"\n                style={{ width: 350, height: 15 }}\n                value={inputStore.value}\n                onChange={handleInput}\n            />\n            <input\n                type=\"submit\"\n                style={{ float: 'right', marginTop: 2 }}\n                disabled={inputStore.disabled}\n                value=\"add\"\n            />\n        </form>\n    ))\n}\n```"]