["```jsx\n> npx create-react-app chapter11_1\n```", "```jsx\n    margin: 20px;\n```", "```jsx\nimport React from 'react'\n\nimport Header from './Header'\nimport AddTodo from './AddTodo'\nimport TodoList from './TodoList'\nimport TodoFilter from './TodoFilter'\n```", "```jsx\nexport default class App extends React.Component {\n    render () {\n        return (\n            <div style={{ width: 400 }}>\n                <Header />\n                <AddTodo />\n                <hr />\n                <TodoList />\n                <hr />\n                <TodoFilter />\n            </div>\n        )\n    }\n}\n```", "```jsx\nimport React from 'react'\n\nexport default class Header extends React.Component {\n    render () {\n        return <h1>ToDo</h1>\n    }\n}\n```", "```jsx\nimport React from 'react'\n\nexport default class AddTodo extends React.Component {\n    render () {\n        return (\n```", "```jsx\n            <form>\n                <input type=\"text\" placeholder=\"enter new task...\" style={{ width: 350, height: 15 }} />\n                <input type=\"submit\" style={{ float: 'right', marginTop: 2 }} value=\"add\" />\n            </form>\n        )\n    }\n}\n```", "```jsx\nimport React from 'react'\n\nimport TodoItem from './TodoItem'\n```", "```jsx\nexport default class TodoList extends React.Component {\n    render () {\n```", "```jsx\n        const items = [\n            { id: 1, title: 'Write React Hooks book', completed: true },\n            { id: 2, title: 'Promote book', completed: false }\n        ]\n```", "```jsx\n        return items.map(item =>\n            <TodoItem {...item} key={item.id} />\n        )\n    }\n}\n```", "```jsx\nimport React from 'react'\n\nexport default class TodoItem extends React.Component {\n    render () {\n```", "```jsx\n        const { title, completed } = this.props\n```", "```jsx\n        return (\n            <div style={{ width: 400, height: 25 }}>\n                <input type=\"checkbox\" checked={completed} />\n                {title}\n                <button style={{ float: 'right' }}>x</button>\n            </div>\n        )\n    }\n}\n```", "```jsx\nclass TodoFilterItem extends React.Component {\n    render () {\n```", "```jsx\n        const { name } = this.props\n```", "```jsx\n        const style = {\n            color: 'blue',\n            cursor: 'pointer'\n        }\n```", "```jsx\n        return <span style={style}>{name}</span>\n    }\n}\n```", "```jsx\nexport default class TodoFilter extends React.Component {\n    render () {\n        return (\n            <div>\n                <TodoFilterItem name=\"all\" />{' / '}\n                <TodoFilterItem name=\"active\" />{' / '}\n                <TodoFilterItem name=\"completed\" />\n            </div>\n        )\n    }\n}\n```", "```jsx\nexport const generateID = () => {\n    const S4 = () =>(((1+Math.random())*0x10000)|0).toString(16).substring(1)\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4())\n}\n```", "```jsx\nexport const fetchAPITodos = () =>\n    new Promise((resolve) =>\n        setTimeout(() => resolve([\n            { id: generateID(), title: 'Write React Hooks book', completed: true },\n            { id: generateID(), title: 'Promote book', completed: false }\n        ]), 100)\n    )\n```", "```jsx\nimport React from 'react'\n```", "```jsx\nconst StateContext = React.createContext([])\n```", "```jsx\nexport default StateContext\n```", "```jsx\nimport StateContext from './StateContext'\n```", "```jsx\nimport { fetchAPITodos, generateID } from './api'\n```", "```jsx\nexport default class App extends React.Component {\n constructor (props) {\n```", "```jsx\n        super(props)\n```", "```jsx\n        this.state = { todos: [], filteredTodos: [], filter: 'all' }\n    }\n```", "```jsx\n    componentDidMount () {\n        this.fetchTodos()\n    }\n```", "```jsx\n    fetchTodos () {\n        fetchAPITodos().then((todos) => {\n            this.setState({ todos })\n            this.filterTodos()\n        })\n    }\n```", "```jsx\n    addTodo (title) {\n        const { todos } = this.state\n\n        const newTodo = { id: generateID(), title, completed: false }\n\n        this.setState({ todos: [ newTodo, ...todos ] })\n        this.filterTodos()\n    }\n```", "```jsx\n    toggleTodo (id) {\n        const { todos } = this.state\n\n        const newTodos = todos.map(t => {\n            if (t.id === id) {\n                return { ...t, completed: !t.completed }\n            }\n            return t\n        }, [])\n\n        this.setState({ todos: newTodos })\n        this.filterTodos()\n    }\n```", "```jsx\n    removeTodo (id) {\n        const { todos } = this.state\n\n        const newTodos = todos.filter(t => {\n            if (t.id === id) {\n                return false\n            }\n             return true\n        })\n\n        this.setState({ todos: newTodos })\n        this.filterTodos()\n    }\n```", "```jsx\n    applyFilter (todos, filter) {\n        switch (filter) {\n            case 'active':\n                return todos.filter(t => t.completed === false)\n\n            case 'completed':\n                return todos.filter(t => t.completed === true)\n\n            default:\n            case 'all':\n                return todos\n        }\n    }\n```", "```jsx\n    filterTodos (filterArg) {\n        this.setState(({ todos, filter }) => ({\n            filter: filterArg || filter,\n            filteredTodos: this.applyFilter(todos, filterArg || filter)\n        }))\n    }\n```", "```jsx\n    render () {\n const { filter, filteredTodos } = this.state\n\n        return (\n <StateContext.Provider value={filteredTodos}>\n                <div style={{ width: 400 }}>\n                    <Header />\n                    <AddTodo addTodo={this.addTodo} />\n                    <hr />\n                    <TodoList toggleTodo={this.toggleTodo} removeTodo={this.removeTodo} />\n                    <hr />\n                    <TodoFilter filter={filter} filterTodos={this.filterTodos} />\n                </div>\n </StateContext.Provider>\n        )\n    }\n```", "```jsx\n            constructor () {\n                super(props)\n\n                this.state = { todos: [], filteredTodos: [], filter: \n                  'all' }\n\n this.fetchTodos = this.fetchTodos.bind(this)\n this.addTodo = this.addTodo.bind(this)\n this.toggleTodo = this.toggleTodo.bind(this)\n this.removeTodo = this.removeTodo.bind(this)\n this.filterTodos = this.filterTodos.bind(this)\n            }\n```", "```jsx\nexport default class AddTodo extends React.Component {\n    constructor (props) {\n        super(props)\n\n        this.state = {\n            input: ''\n        }\n    }\n```", "```jsx\n    handleInput (e) {\n        this.setState({ input: e.target.value })\n    }\n```", "```jsx\n    handleAdd () {\n        const { input } = this.state\n        const { addTodo } = this.props\n\n        if (input) {\n            addTodo(input)\n            this.setState({ input: '' })\n        }\n    }\n```", "```jsx\n    render () {\n        const { input } = this.state\n\n        return (\n            <form onSubmit={e => { e.preventDefault(); this.handleAdd() }}>\n                <input\n                    type=\"text\"\n                    placeholder=\"enter new task...\"\n                    style={{ width: 350, height: 15 }}\n value={input}\n onChange={this.handleInput} />\n                <input\n                    type=\"submit\"\n                    style={{ float: 'right', marginTop: 2 }}\n disabled={!input}                    value=\"add\"\n                />\n            </form>\n        )\n    }\n```", "```jsx\n    constructor () {\n        super(props)\n\n        this.state = {\n            input: ''\n        }\n\n this.handleInput = this.handleInput.bind(this)\n this.handleAdd = this.handleAdd.bind(this)\n    }\n```", "```jsx\nimport StateContext from './StateContext'\n```", "```jsx\nexport default class TodoList extends React.Component {\n static contextType = StateContext\n```", "```jsx\n    render () {\n const items = this.context\n```", "```jsx\n        return items.map(item =>\n            <TodoItem {...item} {...this.props} key={item.id} />\n        )\n    }\n```", "```jsx\n    handleToggle () {\n        const { toggleTodo, id } = this.props\n        toggleTodo(id)\n    }\n\n    handleRemove () {\n        const { removeTodo, id } = this.props\n        removeTodo(id)\n    }\n```", "```jsx\n    render () {\n        const { title, completed } = this.props\n        return (\n            <div style={{ width: 400, height: 25 }}>\n                <input type=\"checkbox\" checked={completed} onChange={this.handleToggle} />\n                {title}\n                <button style={{ float: 'right' }} onClick={this.handleRemove}>x</button>\n            </div>\n        )\n    }\n```", "```jsx\nexport default class TodoItem extends React.Component {\n constructor (props) {\n super(props)\n\n this.handleToggle = this.handleToggle.bind(this)\n this.handleRemove = this.handleRemove.bind(this)\n }\n```", "```jsx\nexport default class TodoFilter extends React.Component {\n    render () {\n        return (\n            <div>\n                <TodoFilterItem {...this.props} name=\"all\" />{' / '}\n                <TodoFilterItem {...this.props} name=\"active\" />{' / '}\n                <TodoFilterItem {...this.props} name=\"completed\" />\n            </div>\n        )\n    }\n}\n```", "```jsx\n    handleFilter () {\n        const { name, filterTodos } = this.props\n        filterTodos(name)\n    }\n```", "```jsx\n    render () {\n        const { name, filter = 'all' } = this.props\n```", "```jsx\n        const style = {\n            color: 'blue',\n            cursor: 'pointer',\n            fontWeight: (filter === name) ? 'bold' : 'normal'\n        }\n```", "```jsx\n        return <span style={style} onClick={this.handleFilter}>{name}</span>\n    }\n```", "```jsx\nclass TodoFilterItem extends React.Component {\n constructor (props) {\n super(props)\n\n this.handleFilter = this.handleFilter.bind(this)\n }\n```", "```jsx\nexport default function TodoItem ({ title, completed, id, toggleTodo, removeTodo }) {\n```", "```jsx\n    function handleToggle () {\n        toggleTodo(id)\n    }\n\n    function handleRemove () {\n        removeTodo(id)\n    }\n```", "```jsx\n    return (\n        <div style={{ width: 400, height: 25 }}>\n            <input type=\"checkbox\" checked={completed} onChange={handleToggle} />\n            {title}\n            <button style={{ float: 'right' }} onClick={handleRemove}>x</button>\n        </div>\n    )\n}\n```", "```jsx\nimport React, { useContext } from 'react'\n```", "```jsx\nexport default function TodoList (props) {\n```", "```jsx\n    const items = useContext(StateContext)\n```", "```jsx\n    return items.map(item =>\n        <TodoItem {...item} {...props} key={item.id} />\n    )\n}\n```", "```jsx\nfunction TodoFilterItem ({ name, filterTodos, filter = 'all' }) {\n```", "```jsx\n    function handleFilter () {\n        filterTodos(name)\n    }\n```", "```jsx\n    const style = {\n        color: 'blue',\n        cursor: 'pointer',\n        fontWeight: (filter === name) ? 'bold' : 'normal'\n    }\n```", "```jsx\n    return <span style={style} onClick={handleFilter}>{name}</span>\n}\n```", "```jsx\nexport default function TodoFilter (props) {\n```", "```jsx\n    return (\n        <div>\n            <TodoFilterItem {...props} name=\"all\" />{' / '}\n            <TodoFilterItem {...props} name=\"active\" />{' / '}\n            <TodoFilterItem {...props} name=\"completed\" />\n        </div>\n    )\n}\n```", "```jsx\nimport React, { useState } from 'react'\n```", "```jsx\nexport default function AddTodo ({ addTodo }) {\n```", "```jsx\n    const [ input, setInput ] = useState('')\n```", "```jsx\n    function handleInput (e) {\n        setInput(e.target.value)\n    }\n\n    function handleAdd () {\n        if (input) {\n            addTodo(input)\n            setInput('')\n        }\n    }\n```", "```jsx\n    return (\n        <form onSubmit={e => { e.preventDefault(); handleAdd() }}>\n            <input\n                type=\"text\"\n                placeholder=\"enter new task...\"\n                style={{ width: 350, height: 15 }}\n                value={input}\n                onChange={handleInput}\n            />\n            <input\n                type=\"submit\"\n                style={{ float: 'right', marginTop: 2 }}\n                disabled={!input}\n                value=\"add\"\n            />\n        </form>\n    )\n}\n```", "```jsx\nimport { generateID } from './api'\n```", "```jsx\nfunction filterReducer (state, action) {\n    if (action.type === 'FILTER_TODOS') {\n        return action.filter\n    } else {\n        return state\n    }\n}\n```", "```jsx\nfunction todosReducer (state, action) {\n    switch (action.type) {\n```", "```jsx\n        case 'FETCH_TODOS':\n            return action.todos\n```", "```jsx\n        case 'ADD_TODO':\n            const newTodo = {\n                id: generateID(),\n                title: action.title,\n                completed: false\n            }\n            return [ newTodo, ...state ]\n```", "```jsx\n        case 'TOGGLE_TODO':\n            return state.map(t => {\n                if (t.id === action.id) {\n                    return { ...t, completed: !t.completed }\n                }\n                return t\n            }, [])\n```", "```jsx\n        case 'REMOVE_TODO':\n            return state.filter(t => {\n                if (t.id === action.id) {\n                    return false\n                }\n                return true\n            })\n```", "```jsx\n        default:\n            return state\n    }\n}\n```", "```jsx\nexport default function appReducer (state, action) {\n```", "```jsx\n    return {\n        todos: todosReducer(state.todos, action),\n        filter: filterReducer(state.filter, action)\n    }\n}\n```", "```jsx\nimport React, { useReducer, useEffect, useMemo } from 'react'\n```", "```jsx\nimport appReducer from './reducers'\n```", "```jsx\nexport default function App () {\n```", "```jsx\n    const [ state, dispatch ] = useReducer(appReducer, { todos: [], filter: 'all' })\n```", "```jsx\n    useEffect(() => {\n        fetchAPITodos().then((todos) =>\n            dispatch({ type: 'FETCH_TODOS', todos })\n        )\n    }, [])\n```", "```jsx\n    const filteredTodos = useMemo(() => {\n        const { filter, todos } = state\n        switch (filter) {\n            case 'active':\n                return todos.filter(t => t.completed === false)\n\n            case 'completed':\n                return todos.filter(t => t.completed === true)\n\n            default:\n            case 'all':\n                return todos\n        }\n    }, [ state ])\n```", "```jsx\n    function addTodo (title) {\n        dispatch({ type: 'ADD_TODO', title })\n    }\n\n    function toggleTodo (id) {\n        dispatch({ type: 'TOGGLE_TODO', id })\n    }\n\n    function removeTodo (id) {\n        dispatch({ type: 'REMOVE_TODO', id })\n    }\n\n    function filterTodos (filter) {\n        dispatch({ type: 'FILTER_TODOS', filter })\n    }\n```", "```jsx\n    return (\n        <StateContext.Provider value={filteredTodos}>\n            <div style={{ width: 400 }}>\n                <Header />\n                <AddTodo addTodo={addTodo} />\n                <hr />\n                <TodoList toggleTodo={toggleTodo} removeTodo={removeTodo} />\n                <hr />\n                <TodoFilter filter={state.filter} filterTodos={filterTodos} />\n            </div>\n        </StateContext.Provider>\n    )\n}\n```"]