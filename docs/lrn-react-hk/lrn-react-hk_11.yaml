- en: Rules of Hooks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hooks的规则
- en: In the previous chapter, we learned about using various Hooks that have been
    developed by the React community, as well as where to find more of them. We learned
    about replacing React life cycle methods with Hooks, utility and data management
    Hooks, responsive design with Hooks, and implementing undo/redo functionality
    with Hooks. Finally, we learned where to find other Hooks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用由React社区开发的各种Hooks，以及在哪里找到更多的Hooks。我们学习了如何用Hooks替换React生命周期方法，使用实用程序和数据管理Hooks，使用Hooks进行响应式设计，以及使用Hooks实现撤销/重做功能。最后，我们学习了在哪里找到其他Hooks。
- en: In this chapter, we are going to learn about everything that there is to know
    about using Hooks, and what to watch out for when using and developing our own
    Hooks. Hooks have certain limitations regarding the order that they are called.
    Violating the rules of Hooks can cause bugs or unexpected behavior, so we need
    to make sure that we learn and enforce the rules.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习有关使用Hooks的一切知识，以及在使用和开发自己的Hooks时需要注意的事项。Hooks在调用顺序方面有一定的限制。违反Hooks的规则可能会导致错误或意外行为，因此我们需要确保学习并强制执行规则。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Calling Hooks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用Hooks
- en: Order of Hooks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hooks的顺序
- en: Names of Hooks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hooks的名称
- en: Enforcing the rules of Hooks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制执行Hooks的规则
- en: Dealing with `useEffect` dependencies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理`useEffect`的依赖关系
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应该已经安装了相当新的Node.js版本（v11.12.0或更高）。还需要安装Node.js的`npm`包管理器。
- en: 'The code for this chapter can be found on the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter09](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter09)[.](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter09)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在GitHub存储库中找到：[https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter09](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter09)。
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的运行情况：
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that have been provided. It is important to
    write the code yourself in order to learn and understand properly. However, if
    you run into any issues, you can always refer to the code example.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，强烈建议您自己编写代码。不要简单地运行提供的代码示例。重要的是要自己编写代码以便正确学习和理解。但是，如果遇到任何问题，您可以随时参考代码示例。
- en: Now, let's get started with the chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始本章。
- en: Calling Hooks
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用Hooks
- en: Hooks should only be called in*React function components* or *custom Hooks*.
    They cannot be used in class components or regular JavaScript functions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Hooks应该只在*React函数组件*或*自定义Hooks*中调用。它们不能在类组件或常规JavaScript函数中使用。
- en: 'Hooks can be called at the top level of the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Hooks可以在以下顶层调用：
- en: React function components
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React函数组件
- en: Custom Hooks (we are going to learn about creating custom Hooks in the next
    chapter)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义Hooks（我们将在下一章学习如何创建自定义Hooks）
- en: As we can see, Hooks are mostly normal JavaScript functions, except that they
    rely on being defined in a React function component. Of course, custom Hooks that
    use other Hooks can be *defined* outside of React function components, but when
    *using* Hooks, we always need to make sure that we call them inside a React function
    component. Next, we are going to learn about the rules regarding the order of
    Hooks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，Hooks大多是普通的JavaScript函数，只是它们依赖于在React函数组件中定义。当然，使用其他Hooks的自定义Hooks可以在React函数组件之外*定义*，但是在*使用*Hooks时，我们总是需要确保在React函数组件内调用它们。接下来，我们将学习有关Hooks顺序的规则。
- en: Order of Hooks
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hooks的顺序
- en: Only call Hooks **at the top level**/**beginning** of function components or
    custom Hooks.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 只在函数组件或自定义Hooks的**顶层**/**开头**调用Hooks。
- en: Do not call Hooks inside conditions, loops, or nested functions—doing so changes
    the order of Hooks, which causes bugs. We have already learned that changing the
    order of Hooks causes the state to get mixed up between multiple Hooks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不要在条件、循环或嵌套函数中调用Hooks——这样会改变Hooks的顺序，导致错误。我们已经学到改变Hooks的顺序会导致多个Hooks之间的状态混乱。
- en: 'In [Chapter 2](15999013-914d-41bf-b0ad-c96fc1811c90.xhtml), *Using the State
    Hook*, we learned that we cannot do the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](15999013-914d-41bf-b0ad-c96fc1811c90.xhtml)中，*使用State Hook*，我们学到不能做以下事情：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We rendered a checkbox and two input fields for the `firstName` and `lastName`,
    and then we entered some text in the `lastName` field:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们渲染了一个复选框和两个输入字段用于`firstName`和`lastName`，然后在`lastName`字段中输入了一些文本：
- en: '![](assets/cc2657a7-8583-4cb4-8266-c13e22d2d7bd.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cc2657a7-8583-4cb4-8266-c13e22d2d7bd.png)'
- en: Revisiting our example from Chapter 2, Using the State Hook
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 重新查看我们在第2章“使用State Hook”中的示例
- en: 'At the moment, the order of Hooks is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Hooks的顺序如下：
- en: '`enableFirstName`'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`enableFirstName`'
- en: '`lastName`'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lastName`'
- en: 'Next, we clicked on the checkbox to enable the `firstName` field. Doing so
    changed the order of Hooks, because now our Hook definitions look like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们点击复选框以启用`firstName`字段。这样做改变了Hooks的顺序，因为现在我们的Hook定义如下：
- en: '`enableFirstName`'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`enableFirstName`'
- en: '`firstName`'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`firstName`'
- en: '`lastName`'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lastName`'
- en: 'Since React solely relies on the order of Hooks to manage their state, the
    `firstName` field is now the second Hook, so it gets the state from the `lastName`
    field:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于React仅依赖于Hooks的顺序来管理它们的状态，`firstName`字段现在是第二个Hook，因此它从`lastName`字段获取状态：
- en: '![](assets/e8742fba-6847-40a0-9ce7-de2c5e7f560d.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e8742fba-6847-40a0-9ce7-de2c5e7f560d.png)'
- en: Problem of changing the order of Hooks from Chapter 2, Using the State Hook
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从第2章“使用State Hook”中改变Hooks的问题
- en: 'If we use the real `useState` Hook from React in example 2 *Can we define conditional
    Hooks?* from [Chapter 2](15999013-914d-41bf-b0ad-c96fc1811c90.xhtml), *Using the
    State Hook*, we can see that React automatically detects when the order of Hooks
    has changed, and it will show a warning:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在[第2章](15999013-914d-41bf-b0ad-c96fc1811c90.xhtml)的示例2“我们能定义条件Hooks吗？”中使用React中真正的`useState`
    Hook，我们可以看到React会自动检测Hooks的顺序是否改变，并显示警告：
- en: '![](assets/4b1132d7-6f4a-4342-94e4-101b9bf33b36.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4b1132d7-6f4a-4342-94e4-101b9bf33b36.png)'
- en: React printing a warning when detecting that the order of Hooks has changed
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: React在检测到Hooks的顺序已改变时打印警告
- en: 'When running React in development mode, it will additionally crash with an
    Uncaught Invariant Violation error message when rendering more Hooks than in the
    previous render:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发模式下运行React时，如果渲染的Hooks数量比上一次渲染多，它还会崩溃并显示一个Uncaught Invariant Violation错误消息：
- en: '![](assets/217c1d37-366b-414a-a70d-64d9d5252f7e.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/217c1d37-366b-414a-a70d-64d9d5252f7e.png)'
- en: React crashing in development mode when the number of Hooks changed
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发模式下，当Hooks的数量改变时，React会崩溃
- en: As we can see, changing the order of Hooks or conditionally enabling Hooks is
    not possible, as React internally uses the order of Hooks to keep track of which
    data belongs to which Hook.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，改变Hooks的顺序或有条件地启用Hooks是不可能的，因为React在内部使用Hooks的顺序来跟踪哪些数据属于哪个Hook。
- en: Names of Hooks
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hooks的命名
- en: 'There is a convention that Hook functions should always be prefixed with `use`,
    followed by the Hook name starting with a capital letter; for example: `useState`,
    `useEffect`, and `useResource`. This is important, because otherwise we would
    not know which JavaScript functions are Hooks, and which are not. Especially when
    enforcing the rules of Hooks, we need to know which functions are Hooks so that
    we can make sure they are not being called conditionally or in loops.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个约定，即Hook函数应始终以`use`为前缀，后面跟着以大写字母开头的Hook名称；例如：`useState`、`useEffect`和`useResource`。这很重要，因为否则我们将不知道哪些JavaScript函数是Hooks，哪些不是。特别是在强制执行Hooks的规则时，我们需要知道哪些函数是Hooks，以便确保它们不会在条件语句或循环中被调用。
- en: As we can see, naming conventions are not technically required, but they make
    life a lot easier for developers. Knowing the difference between normal functions
    and Hooks makes it very easy to automatically enforce the rules of Hooks. In the
    next section, we are going to learn how to automatically enforce the rules using
    the `eslint` tool.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，命名约定在技术上并不是必需的，但对开发人员来说会大大简化生活。知道普通函数和Hooks之间的区别使得自动执行Hooks的规则变得非常容易。在下一节中，我们将学习如何使用`eslint`工具自动执行规则。
- en: Enforcing the rules of Hooks
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强制执行Hooks的规则
- en: 'If we stick to the convention of prefixing Hook functions with `use`, we can
    automatically enforce the other two rules:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们遵循在Hook函数前加上`use`的约定，我们可以自动执行另外两条规则：
- en: Only call Hooks from React function components or custom Hooks
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只从React函数组件或自定义Hooks中调用Hooks
- en: Only call Hooks at the top level (not inside loops, conditions, or nested functions)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只在顶层调用Hooks（不在循环、条件或嵌套函数内部）
- en: In order to enforce the rules automatically, React provides an `eslint` plugin
    called `eslint-plugin-react-hooks`, which will automatically detect when Hooks
    are used, and will ensure that the rules are not broken. ESLint is a linter, which
    is a tool that analyzes source code and finds problems such as stylistic mistakes,
    potential bugs, and programming errors.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动执行规则，React提供了一个名为`eslint-plugin-react-hooks`的`eslint`插件，它将自动检测何时使用了Hooks，并确保规则不被违反。ESLint是一个代码检查工具，它分析源代码并找出样式错误、潜在的bug和编程错误等问题。
- en: In the future, `create-react-app` is going to include this plugin by default.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将来，`create-react-app`将默认包含此插件。
- en: Setting up eslint-plugin-react-hooks
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置eslint-plugin-react-hooks
- en: We are now going to set up the React Hooks `eslint` plugin to automatically
    enforce the rules of Hooks.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在要设置React Hooks `eslint`插件，自动执行Hooks的规则。
- en: 'Let''s start installing and enabling the `eslint` plugin:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始安装和启用`eslint`插件：
- en: 'First, we have to install the plugin via `npm`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须通过`npm`安装插件：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We use the `--save-dev` flag here, because `eslint` and its plugins are not
    required to be installed when deploying the app. We only need them during the
    development of our app.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用`--save-dev`标志，因为在部署应用程序时不需要安装`eslint`及其插件。我们只在开发应用程序时需要它们。
- en: 'Then, we create a new `.eslintrc.json` file in the root of our project folder,
    with the following contents. We start by extending from the `react-app` ESLint
    configuration:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在项目文件夹的根目录下创建一个新的`.eslintrc.json`文件，内容如下。我们首先从`react-app`的ESLint配置中扩展：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we include the `react-hooks` plugin that we installed earlier:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们包括之前安装的`react-hooks`插件。
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we enable two rules. First, we tell `eslint` to show an error when we violate
    the `rules-of-hooks` rule. Additionally, we enable the `exhaustive-deps` rule
    as a warning:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们启用了两个规则。首先，我们告诉 `eslint` 在违反 `rules-of-hooks` 规则时显示错误。此外，我们将 `exhaustive-deps`
    规则设置为警告：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we adjust `package.json` to define a new `lint` script, which is going
    to call `eslint`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们调整 `package.json` 来定义一个新的 `lint` 脚本，它将调用 `eslint`：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we can execute `npm run lint`, and we are going to see that there are
    5 warnings and 0 errors:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以执行 `npm run lint`，然后我们会看到有 5 个警告和 0 个错误：
- en: '![](assets/647045f4-5f7a-4179-a026-a2f7a347dab1.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/647045f4-5f7a-4179-a026-a2f7a347dab1.png)'
- en: Executing ESLint with the react-hooks plugin
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 react-hooks 插件执行 ESLint
- en: 'We will now try to break the rules of Hooks; for example, by editing `src/user/Login.js` and
    making the second Input Hook conditional:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将尝试违反 Hooks 规则；例如，通过编辑 `src/user/Login.js` 并使第二个 Input Hook 有条件：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When we execute `npm run lint` again, we can see that there is now an error:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 再次执行 `npm run lint` 时，我们可以看到现在有一个错误：
- en: '![](assets/53184548-1539-43e2-8ab0-4bd38f34e9c6.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/53184548-1539-43e2-8ab0-4bd38f34e9c6.png)'
- en: Executing ESLint after breaking the rules of Hooks
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在违反 Hooks 规则后执行 ESLint
- en: As we can see, `eslint` helps us by forcing us to stick to the rules of Hooks.
    The linter will throw an error when we violate any rules, and show warnings when
    Effect Hooks have missing dependencies. Listening to `eslint` will help us to
    avoid bugs and unexpected behavior, so we should never ignore its errors or warnings.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`eslint` 通过强制我们遵守 Hooks 规则来帮助我们。当我们违反任何规则时，linter 会抛出错误，并在 Effect Hooks
    缺少依赖项时显示警告。听从 `eslint` 将帮助我们避免错误和意外行为，因此我们永远不应该忽略它的错误或警告。
- en: Example code
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码
- en: The example code can be found in the `Chapter09/chapter9_1` folder.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码可以在 `Chapter09/chapter9_1` 文件夹中找到。
- en: Just run `npm install` in order to install all dependencies and execute `npm
    run lint` to run the linter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行 `npm install` 来安装所有依赖项，并执行 `npm run lint` 来运行 linter。
- en: Dealing with useEffect dependencies
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 useEffect 依赖关系
- en: In addition to enforcing the rules of Hooks, we are also checking whether all
    the variables that are used in an Effect Hook are passed to its dependency array.
    This *exhaustive dependencies* rule ensures that whenever something that is used
    inside the Effect Hook changes (a function, value, and so on), the Hook will trigger
    again.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 除了强制执行 Hooks 规则之外，我们还检查了在 Effect Hook 中使用的所有变量是否都传递给了它的依赖数组。这个 *详尽的依赖* 规则确保每当
    Effect Hook 中使用的东西发生变化（函数、值等），Hook 就会再次触发。
- en: As we have seen in the previous section, there are a couple warnings related
    to the exhaustive dependencies rule when running the linter with `npm run lint`.
    Often, it has to do with the `dispatch` function or other functions not being
    part of the dependency array. Usually, these functions should not change, but
    we can never be sure, so it is better to just add them to the dependencies.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中看到的，当使用 `npm run lint` 运行 linter 时，会有一些与详尽的依赖规则相关的警告。通常，这与 `dispatch`
    函数或其他函数不在依赖数组中有关。通常情况下，这些函数不应该改变，但我们永远不能确定，所以最好将它们添加到依赖项中。
- en: Automatically fixing warnings with eslint
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 eslint 自动修复警告
- en: As the exhaustive dependencies rule is quite simple and straightforward to fix,
    we can automatically let `eslint` fix it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于详尽的依赖规则相当简单且容易修复，我们可以让 `eslint` 自动修复它。
- en: 'To do so, we need to pass the `--fix` flag to `eslint`. Using `npm run`, we
    can pass flags by using an additional `--` as a separator, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要向 `eslint` 传递 `--fix` 标志。使用 `npm run`，我们可以通过使用额外的 `--` 作为分隔符来传递标志，如下所示：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After running the preceding command, we can run `npm run lint` again, and we
    are going to see that all warnings have automatically been fixed:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行了上述命令之后，我们可以再次运行 `npm run lint`，然后我们会看到所有警告都已经自动修复了：
- en: '![](assets/aec44b71-f218-47d5-bcde-25306ede9272.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aec44b71-f218-47d5-bcde-25306ede9272.png)'
- en: No warnings after letting eslint fix them
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让eslint修复后没有警告
- en: As we can see, `eslint` not only warns us about problems, it can even fix some
    of them automatically for us!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`eslint`不仅警告我们有问题，甚至可以自动为我们修复其中一些问题！
- en: Example code
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码
- en: The example code can be found in the `Chapter09/chapter9_2` folder.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码可以在`Chapter09/chapter9_2`文件夹中找到。
- en: Just run `npm install` in order to install all dependencies and execute `npm
    run lint` to run the linter.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行`npm install`来安装所有依赖项，并执行`npm run lint`来运行linter。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we first learned about two rules of Hooks: that we should
    only call Hooks from React function components, and that we need to ensure that
    the order of Hooks stays the same. Furthermore, we learned about the naming convention
    of Hooks, and that they should always start with the `use` prefix. Then, we learned
    how to enforce the rules of Hooks using `eslint`. Finally, we learned about `useEffect`
    dependencies, and how to fix missing dependencies automatically using `eslint`.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先了解了Hooks的两个规则：我们应该只从React函数组件中调用Hooks，并且我们需要确保Hooks的顺序保持不变。此外，我们还了解了Hooks的命名约定，它们应该始终以`use`前缀开头。然后，我们学习了如何使用`eslint`强制执行Hooks的规则。最后，我们学习了关于`useEffect`依赖项，以及如何使用`eslint`自动修复缺少的依赖项。
- en: Knowing about the rules of Hooks, and enforcing them, is very important in order
    to avoid bugs and unexpected behavior. These rules will be especially important
    when creating our own Hooks. Now that we have a good grasp on how Hooks work,
    including their rules and conventions, in the next chapter, we are going to learn
    how to create our own Hooks!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 了解Hooks的规则，并强制执行它们，对于避免错误和意外行为非常重要。在创建我们自己的Hooks时，这些规则将特别重要。现在我们对Hooks的工作原理有了很好的理解，包括它们的规则和约定，在下一章中，我们将学习如何创建我们自己的Hooks！
- en: Questions
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'In order to recap what we have learned in this chapter, try answering the following
    questions:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结本章学到的知识，请尝试回答以下问题：
- en: Where can Hooks be called?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Hooks可以在哪里调用？
- en: Can we use Hooks in React class components?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在React类组件中使用Hooks吗？
- en: What do we need to watch out for regarding the order of Hooks?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于Hooks的顺序，我们需要注意什么？
- en: Can Hooks be called inside conditions, loops, or nested functions?
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Hooks可以在条件、循环或嵌套函数中调用吗？
- en: What is the naming convention for Hooks?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Hooks的命名约定是什么？
- en: How can we automatically enforce the rules of Hooks?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何自动强制执行Hooks的规则？
- en: What is the exhaustive dependencies rule?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是完整的依赖规则？
- en: How can we automatically fix linter warnings?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何自动修复linter警告？
- en: Further reading
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following reading material:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对本章学到的概念感兴趣，可以查看以下阅读材料：
- en: Rules of Hooks in the official React documentation: [https://reactjs.org/docs/hooks-rules.html](https://reactjs.org/docs/hooks-rules.html).
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方React文档中的Hooks规则：[https://reactjs.org/docs/hooks-rules.html](https://reactjs.org/docs/hooks-rules.html)。
- en: Official website of ESLint: [https://eslint.org/](https://eslint.org/).
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESLint的官方网站：[https://eslint.org/](https://eslint.org/)。
