["```jsx\nconst [ config, setConfig ] = useState({ filter: 'all', expandPosts: true })\n```", "```jsx\nsetConfig({ filter: { byAuthor: 'Daniel Bugl', fromDate: '2019-04-29' } })\n```", "```jsx\nsetConfig({ ...config, filter: { byAuthor: 'Daniel Bugl', fromDate: '2019-04-29' } })\n```", "```jsx\nsetConfig({ ...config, filter: { ...config.filter, fromDate: '2019-04-30' } })\n```", "```jsx\n{ filter: { '0': 'a', '1': 'l', '2': 'l', fromDate: '2019-04-30' },\n  expandPosts: true }\n```", "```jsx\n{ type: 'TOGGLE_EXPAND' }\n```", "```jsx\n{ type: 'CHANGE_FILTER', all: true }\n{ type: 'CHANGE_FILTER', fromDate: '2019-04-29' }\n{ type: 'CHANGE_FILTER', byAuthor: 'Daniel Bugl' }\n{ type: 'CHANGE_FILTER', fromDate: '2019-04-30' }\n```", "```jsx\n{ type: 'CHANGE_FILTER', all: true }\n```", "```jsx\nfunction reducer (state, action) {\n```", "```jsx\n    switch (action.type) {\n```", "```jsx\n        case 'TOGGLE_EXPAND':\n            return { ...state, expandPosts: !state.expandPosts }\n```", "```jsx\n        case 'CHANGE_FILTER':\n            if (action.all) {\n                return { ...state, filter: 'all' }\n            }\n```", "```jsx\n            let filter = typeof state.filter === 'object' ? state.filter : {}\n```", "```jsx\n            if (action.fromDate) {\n                filter = { ...filter, fromDate: action.fromDate }\n            }\n            if (action.byAuthor) {\n                filter = { ...filter, byAuthor: action.byAuthor }\n            }\n```", "```jsx\n            return { ...state, filter }\n```", "```jsx\n        default:\n            throw new Error()\n    }\n}\n```", "```jsx\nconst [ state, dispatch ] = useReducer(reducer, initialState)\n```", "```jsx\nconst initialState = { all: true }\n```", "```jsx\ndispatch({ type: 'TOGGLE_EXPAND' })\n```", "```jsx\ndispatch({ type: 'CHANGE_FILTER', fromDate: '2019-04-30' })\n```", "```jsx\n{ type: 'LOGIN', username: 'Daniel Bugl', password: 'notsosecure' }\n```", "```jsx\n{ type: 'REGISTER', username: 'Daniel Bugl', password: 'notsosecure', passwordRepeat: 'notsosecure' }\n```", "```jsx\n{ type: 'LOGOUT' }\n```", "```jsx\nfunction userReducer (state, action) {\n```", "```jsx\n    switch (action.type) {\n```", "```jsx\n        case 'LOGIN':\n        case 'REGISTER':\n            return action.username\n```", "```jsx\n        case 'LOGOUT':\n            return ''\n```", "```jsx\n        default:\n            throw new Error()\n    }\n}\n```", "```jsx\nimport React, { useState, useReducer } from 'react'\n```", "```jsx\n    const [ user, setUser ] = useState('')\n```", "```jsx\n    const [ user, dispatchUser ] = useReducer(userReducer, '')\n```", "```jsx\n            <UserBar user={user} dispatch={dispatchUser} />\n```", "```jsx\nexport default function UserBar ({ user, dispatch }) {\n    if (user) {\n        return <Logout user={user} dispatch={dispatch} />\n    } else {\n        return (\n            <React.Fragment>\n                <Login dispatch={dispatch} />\n                <Register dispatch={dispatch} />\n            </React.Fragment>\n        )\n    }\n}\n```", "```jsx\nexport default function Login ({ dispatch }) {\n```", "```jsx\n            <form onSubmit={e => { e.preventDefault(); dispatch({ type: 'LOGIN', username }) }}>\n```", "```jsx\nexport default function Register ({ dispatch }) {\n    // ...\n            <form onSubmit={e => { e.preventDefault(); dispatch({ type: 'REGISTER', username }) }}>\n```", "```jsx\nexport default function Logout ({ user, dispatch }) {\n    // ...\n            <form onSubmit={e => { e.preventDefault(); dispatch({ type: 'LOGOUT' }) }}>\n```", "```jsx\n{ type: 'CREATE_POST', title: 'React Hooks', content: 'The greatest thing since sliced bread!', author: 'Daniel Bugl' }\n```", "```jsx\nfunction postsReducer (state, action) {\n    switch (action.type) {\n```", "```jsx\n        case 'CREATE_POST':\n            const newPost = { title: action.title, content: action.content, author: action.author }\n            return [ newPost, ...state ]\n```", "```jsx\n        default:\n            throw new Error()\n    }\n}\n```", "```jsx\n       const [ posts, setPosts ] = useState(defaultPosts)\n```", "```jsx\n       const [ posts, dispatchPosts ] = useReducer(postsReducer, defaultPosts)\n```", "```jsx\n            {user && <CreatePost user={user} posts={posts} dispatch={dispatchPosts} />}\n```", "```jsx\nexport default function CreatePost ({ user, posts, dispatch }) {\n```", "```jsx\n    function handleCreate () {\n        dispatch({ type: 'CREATE_POST', title, content, author: user })\n    }\n```", "```jsx\nfunction userReducer (state, action) {\n    switch (action.type) {\n        case 'LOGIN':\n        case 'REGISTER':\n            return action.username\n\n        case 'LOGOUT':\n            return ''\n\n        default:\n            throw new Error()\n    }\n}\n\nfunction postsReducer (state, action) {\n    switch (action.type) {\n        case 'CREATE_POST':\n            const newPost = { title: action.title, content: action.content, author: action.author }\n            return [ newPost, ...state ]\n\n        default:\n            throw new Error()\n    }\n}\n```", "```jsx\nexport default function appReducer (state, action) {\n```", "```jsx\n    return {\n        user: userReducer(state.user, action),\n        posts: postsReducer(state.posts, action)\n    }\n}\n```", "```jsx\nimport  appReducer  from  './reducers'\n```", "```jsx\n            const [ user, dispatchUser ] = useReducer(userReducer,\n             '')\n            const [ posts, dispatchPosts = useReducer(postsReducer, \n         defaultPosts)\n```", "```jsx\n    const [ state, dispatch ] = useReducer(appReducer, { user: '', posts: defaultPosts })\n```", "```jsx\n    const { user, posts } = state\n```", "```jsx\n            <UserBar user={user} dispatch={dispatch} />\n            <br />\n            {user && <CreatePost user={user} posts={posts} dispatch={dispatch} />}\n```", "```jsx\n        default:\n            throw new Error()\n```", "```jsx\n            default:\n                return state\n```", "```jsx\nimport React from 'react'\n\nclass App extends React.Component {\n componentDidMount () {\n const { title } = this.props document.title = title\n }\n\n    render () {\n        return (\n            <div>Test App</div>\n        )\n    }\n}\n```", "```jsx\nimport React from 'react'\n\nclass App extends React.Component {\n    componentDidMount () {\n        const { title } = this.props\n        document.title = title\n    }\n\n componentDidUpdate (prevProps) {\n const { title } = this.props\n        if (title !== prevProps.title) {\n document.title = title\n        }\n }\n\n    render () {\n        return (\n            <div>Test App</div>\n        )\n    }\n}\n```", "```jsx\nimport React from 'react'\n\nclass App extends React.Component {\n updateTitle () {\n const { title } = this.props\n document.title = title\n }\n\n    componentDidMount () {\n        this.updateTitle()\n    }\n\n    componentDidUpdate (prevProps) {\n        if (this.props.title !== prevProps.title) {\n this.updateTitle()\n        }\n    }\n\n    render () {\n        return (\n            <div>Test App</div>\n        )\n    }\n}\n```", "```jsx\nimport React, { useEffect } from 'react'\n\nfunction App ({ title }) {\n    useEffect(() => {\n        document.title = title\n    })\n\n    return (\n        <div>Test App</div>\n    )\n}\n```", "```jsx\n    useEffect(() => {\n        document.title = title\n    }, [title])\n```", "```jsx\n    const [ title, setTitle ] = useState('')\n    useEffect(() => {\n        document.title = title\n    }, [title])\n```", "```jsx\n    useEffect(() => {\n        document.title = title\n    }, [])\n```", "```jsx\n    useEffect(() => {\n        const updateInterval = setInterval(() => console.log('fetching update'), updateTime)\n\n        return () => clearInterval(updateInterval)\n    }, [updateTime])\n```", "```jsx\nimport React, { useReducer, useEffect } from 'react'\n```", "```jsx\n    useEffect(() => {\n```", "```jsx:\n\n```", "```jsx\n\n4.  Otherwise, if the user is not logged in, we simply set the `document.title` to `React Hooks Blog`:\n\n```", "```jsx\n\n5.  Finally, we pass the `user` value as the second argument to the Effect Hook, in order to ensure that whenever the `user` value updates, our effect function triggers again:\n\n```"]