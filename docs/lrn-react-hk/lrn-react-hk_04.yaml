- en: Writing Your First Application with React Hooks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React Hooks编写您的第一个应用程序
- en: After learning about the State Hook in depth, we are now going to make use of
    it by creating a blog application from scratch. Throughout this chapter, we are
    going to learn how to structure React apps in a way that scales well, how to use
    multiple Hooks, where to store state, and how to solve common use cases with Hooks.
    At the end of this chapter, we are going to have a basic blog application, where
    we can log in, register, and create posts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 深入了解State Hook后，我们现在将利用它从头开始创建一个博客应用程序。在本章中，我们将学习如何以可扩展的方式构建React应用程序，如何使用多个Hooks，如何存储状态以及如何使用Hooks解决常见用例。在本章结束时，我们将拥有一个基本的博客应用程序，可以在其中登录、注册和创建帖子。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Structuring React projects in a scalable way
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以可扩展的方式构建React项目
- en: Implementing static React components from a mock-up
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从模拟中实现静态的React组件
- en: Implementing stateful components with Hooks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Hooks实现有状态的组件
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 应该已经安装了相当新的Node.js版本（v11.12.0或更高）。还需要安装Node.js的`npm`包管理器。
- en: The code for this chapter can be found in the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter03](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter03).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在GitHub存储库中找到：[https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter03](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter03)。
- en: 'Check out the following video to see the code in action:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the previously provided code examples. It is important that
    you write the code yourself in order to be able to learn and understand properly.
    However, if you run into any issues, you can always refer to the code example.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，强烈建议您自己编写代码。不要简单地运行先前提供的代码示例。重要的是您自己编写代码，以便能够正确学习和理解。但是，如果遇到任何问题，您可以随时参考代码示例。
- en: Now, let's get started with the chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始本章。
- en: Structuring React projects
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建React项目
- en: After learning about the principles of React, how to use the `useState` Hook,
    and how Hooks work internally, we are now going to make use of the real `useState` Hook
    in order to develop a blog application. First, we are going to create a new project,
    and structure the folders in a way that will allow us to scale the project later
    on. Then, we are going to define the components that we are going to need in order
    to cover the basic features of a blog application. Finally, we are going to use
    Hooks to introduce state to our application! Throughout this chapter, we are also
    going to learn about **JSX**, and new JavaScript features that have been introduced
    in **ES6**, up to **ES2018**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习了React的原则、如何使用`useState` Hook以及Hooks的内部工作原理后，我们现在将利用真正的`useState` Hook来开发一个博客应用程序。首先，我们将创建一个新项目，并以一种可以在以后扩展项目的方式来构建文件夹结构。然后，我们将定义我们需要的组件，以涵盖博客应用程序的基本功能。最后，我们将使用Hooks为我们的应用程序引入状态！在本章中，我们还将学习**JSX**，以及在**ES6**到**ES2018**中引入的新JavaScript功能。
- en: Folder structure
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件夹结构
- en: There are many ways that projects can be structured, and different structures
    can do well for different projects. Usually, we create a `src/` folder, and group
    our files there by features. Another popular way to structure projects is to group
    them by routes. For some projects, it might make sense to additionally separate
    by the kind of code, such as `src/api/` and `src/components/`. However, for our
    project, we are mainly going to focus on the **user interface** (**UI**). As a
    result, we are going to group our files by features in the `src/` folder.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 项目可以有许多不同的结构方式，不同的结构方式适用于不同的项目。通常，我们创建一个`src/`文件夹，并按功能将文件分组在那里。另一种流行的项目结构方式是按路由进行分组。对于一些项目，此外还可能根据代码的类型进行分离，比如`src/api/`和`src/components/`。然而，对于我们的项目，我们主要关注**用户界面**（**UI**）。因此，我们将按功能在`src/`文件夹中将文件分组。
- en: It is a good idea to start with a simple structure at first, and only nest more
    deeply when you actually need it. Do not spend too much time thinking about the
    file structure when starting a project, because usually, you do not know up front
    how files should be grouped.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最好一开始从一个简单的结构开始，只有在实际需要时才进行更深的嵌套。在开始项目时不要花太多时间考虑文件结构，因为通常情况下，你不知道文件应该如何分组。
- en: Choosing the features
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择功能
- en: 'We first have to think about which features we are going to implement in our
    blog application. At the bare minimum, we want to implement the following features:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先必须考虑在我们的博客应用程序中要实现哪些功能。至少，我们希望实现以下功能：
- en: Registering users
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册用户
- en: Logging in/out
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录/登出
- en: Viewing a single post
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看单个帖子
- en: Creating a new post
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新帖子
- en: Listing posts
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出帖子
- en: Now that we have chosen the features, let's come up with an initial folder structure.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经选择了功能，让我们提出一个初始的文件夹结构。
- en: Coming up with an initial structure
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提出一个初始结构
- en: 'From our previous functionalities, we can abstract a couple of feature groups:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们之前的功能中，我们可以抽象出一些功能组：
- en: User (registering, log in/log out)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户（注册，登录/登出）
- en: Post (creating, viewing, listing)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帖子（创建，查看，列出）
- en: 'We could now just keep it very simple, and create all of the components in
    the `src/` folder, without any nesting. However, since we already have quite a
    clear picture on the features that a blog application is going to need, we can
    come up with a simple folder structure now:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以保持非常简单，将所有组件创建在`src/`文件夹中，不进行任何嵌套。然而，由于我们已经对博客应用程序需要的功能有了相当清晰的了解，我们现在可以提出一个简单的文件夹结构：
- en: '`src/`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/`'
- en: '`src/user/`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/user/`'
- en: '`src/post/`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/post/`'
- en: After defining the folder structure, we can move on to the component structure.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义文件夹结构之后，我们可以继续进行组件结构。
- en: Component structure
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件结构
- en: The idea of components in React is to have each component deal with a single
    task or UI element. We should try to make components as fine-grained as possible,
    in order to be able to reuse code. If we find ourselves copying and pasting code
    from one component to another, it might be a good idea to create a new component,
    and reuse it in multiple other components.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，组件的理念是让每个组件处理单个任务或UI元素。我们应该尽量将组件做得细粒度，以便能够重用代码。如果我们发现自己在从一个组件复制和粘贴代码到另一个组件，那么创建一个新组件并在多个其他组件中重用它可能是个好主意。
- en: 'Usually, when developing software, we start with a UI mock-up. For our blog
    application, a mock-up would look as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在开发软件时，我们会从UI模拟开始。对于我们的博客应用程序，模拟将如下所示：
- en: '![](assets/3ead741d-7e4f-402b-9dca-710eb2d8ced0.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3ead741d-7e4f-402b-9dca-710eb2d8ced0.png)'
- en: Initial mock-up of our blog application
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们博客应用程序的初始模拟
- en: When splitting components, we use the single responsibility principle, which
    states that every module should have responsibility over a single encapsulated
    part of the functionality.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在拆分组件时，我们使用单一职责原则，该原则规定每个模块应对功能的一个封装部分负责。
- en: 'In this mock-up, we can draw boxes around each component and subcomponent,
    and give them names. Keep in mind that each component should have exactly one
    responsibility. We start with the fundamental components that make up this app:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模拟中，我们可以在每个组件和子组件周围画框，并给它们命名。请记住，每个组件应该只负责一个功能。我们从构成这个应用程序的基本组件开始：
- en: '![](assets/76bb8249-2b7f-4058-86dc-166e76f0844b.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/76bb8249-2b7f-4058-86dc-166e76f0844b.png)'
- en: Defining the fundamental components from our mock-up
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的模拟中定义基本组件
- en: We defined a `Logout` component for the logout feature, a `CreatePost` component,
    which contains the form to create a new post, and a `Post` component to display
    the actual posts.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为注销功能定义了一个`Logout`组件，一个包含创建新帖子表单的`CreatePost`组件，以及一个用于显示实际帖子的`Post`组件。
- en: 'Now that we have defined our fundamental components, we are going to look at
    which components logically belong together, thereby forming a group. To do so,
    we now define the container components, which we need in order to group the components
    together:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了我们的基本组件，我们将看看哪些组件在逻辑上属于一起，从而形成一个组。为此，我们现在定义容器组件，这样我们就可以将组件组合在一起：
- en: '![](assets/dea42556-65fd-4997-b85f-f2a6ba394f71.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dea42556-65fd-4997-b85f-f2a6ba394f71.png)'
- en: Defining the container components from our mock-up
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的模拟中定义容器组件
- en: We defined a `PostList` component in order to group posts together, then a `UserBar`
    component in order to deal with login/logout and registration. Finally, we defined
    an `App` component in order to group everything together, and define the structure
    of our app.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个`PostList`组件来将帖子分组，然后定义了一个`UserBar`组件来处理登录/注销和注册。最后，我们定义了一个`App`组件来将所有内容组合在一起，并定义我们应用程序的结构。
- en: Now that we are done with structuring our React project, we can move on to implementing
    the static components.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了对我们的React项目进行结构化，我们可以继续实现静态组件。
- en: Implementing static components
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现静态组件
- en: Before we start adding state via Hooks to our blog application, we are going
    to model the basic features of our application as static React components. Doing
    this means that we have to deal with the static view structure of our application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始通过Hooks向我们的博客应用程序添加状态之前，我们将模拟应用程序的基本功能作为静态React组件。这样做意味着我们必须处理应用程序的静态视图结构。
- en: It makes sense to deal with the static structure first, so as to avoid having
    to move dynamic code to different components later on. Furthermore, it is easier
    to deal only with **Hypertext Markup Language (HTML)** and CSS first—helping us
    to get started with projects quickly. Then, we can move on to implementing dynamic
    code and handling state.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先处理静态结构是有意义的，这样可以避免以后将动态代码移动到不同的组件中。此外，首先只处理**超文本标记语言（HTML）**和CSS更容易——这有助于我们快速启动项目。然后，我们可以继续实现动态代码和处理状态。
- en: Doing this step by step, instead of implementing everything at once, helps us
    to quickly get started with new projects without having to think about too much
    at once, and lets us avoid having to restructure projects later!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步进行这一步，而不是一次实现所有内容，有助于我们快速启动新项目，而不必一次考虑太多，并且让我们避免以后重新构建项目！
- en: Setting up the project
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: 'We have already learned how to set up a new React project. As we have learned,
    we can use the `create-react-app` tool to easily initialize a new project. We
    are going to do so now:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何设置一个新的React项目。正如我们所学到的，我们可以使用`create-react-app`工具轻松初始化一个新项目。我们现在要这样做：
- en: 'First, we use `create-react-app` to initialize our project:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用`create-react-app`来初始化我们的项目：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we create folders for our features:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们为我们的功能创建文件夹：
- en: '**Create folder**: `src/user/`'
  id: totrans-59
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建文件夹**：`src/user/`'
- en: '**Create folder**: `src/post/`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建文件夹**：`src/post/`'
- en: Now that our project structure is set up, we can start implementing components.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的项目结构已经设置好，我们可以开始实施组件。
- en: Implementing users
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施用户
- en: 'We are going to start with the simplest feature in terms of static components:
    implementing user-related functionality. As we have seen from our mock-up, we
    are going to need four components here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从静态组件方面最简单的功能开始：实施与用户相关的功能。正如我们从模拟中看到的，我们在这里需要四个组件：
- en: A `Login` component, which we are going to show when the user is not logged
    in yet
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Login`组件，当用户尚未登录时我们将展示它
- en: A `Register` component, which we are also going to show when the user is not
    logged in yet
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Register`组件，当用户尚未登录时我们也会展示它
- en: A `Logout` component, which is going to be shown after the user is logged in
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Logout`组件，当用户登录后将显示
- en: A `UserBar` component, which will display the other components conditionally
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`UserBar`组件，它将有条件地显示其他组件
- en: We are going to start by defining the first three components, which are all
    stand-alone components. Lastly, we will define the `UserBar` component, because
    it depends on the other components being defined.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先定义前三个组件，它们都是独立的组件。最后，我们将定义`UserBar`组件，因为它依赖于其他组件的定义。
- en: The Login component
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录组件
- en: 'First, we define the `Login` component, where we show two fields: a Username
    field, and a Password field. Furthermore, we show a Login button:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义`Login`组件，其中我们展示两个字段：用户名字段和密码字段。此外，我们展示一个登录按钮：
- en: We start by creating a new file for our component: `src/user/Login.js`
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先为我们的组件创建一个新文件：`src/user/Login.js`
- en: 'In the newly created `src/user/Login.js` file, we import `React`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的`src/user/Login.js`文件中，我们导入`React`：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we define our function component. For now, the `Login` component will
    not accept any props:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义我们的函数组件。目前，`Login`组件不会接受任何props：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we return the two fields and the Login button, via JSX. We also define
    a `form` container element to wrap them in. To avoid a page refresh when the form
    is submitted, we have to define an `onSubmit` handler and call `e.preventDefault()`
    on the event object:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们通过JSX返回两个字段和登录按钮。我们还定义了一个`form`容器元素来包裹它们。为了在提交表单时避免页面刷新，我们必须定义一个`onSubmit`处理程序并在事件对象上调用`e.preventDefault()`：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we are using an anonymous function to define the `onSubmit` handler. Anonymous
    functions are defined as follows, if they do not have any arguments: `() => {
    ... }`, instead of `function () { ... }`. With arguments, we could write `(arg1,
    arg2) => { ... }`, instead of `function (arg1, arg2) { ... }`. We can omit the
    `()` brackets if we only have a single argument. Additionally, we can omit the `{}` brackets
    if we only have a single statement in our function, like this: `e => e.preventDefault()`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用匿名函数来定义`onSubmit`处理程序。匿名函数的定义如下，如果它们没有任何参数：`() => { ... }`，而不是`function
    () { ... }`。有了参数，我们可以写成`(arg1, arg2) => { ... }`，而不是`function (arg1, arg2) { ...
    }`。如果我们只有一个参数，我们可以省略`()`括号。此外，如果我们的函数中只有一个语句，我们可以省略`{}`括号，就像这样：`e => e.preventDefault()`。
- en: Using semantic HTML elements such as `<form>` and `<label>` make your app easier
    to navigate for people using accessibility assistance software, such as screen
    readers. Furthermore, when using semantic HTML, keyboard shortcuts, such as submitting
    forms by pressing the return key, automatically work.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用语义化的HTML元素，如`<form>`和`<label>`，可以使您的应用程序更易于使用辅助功能软件的人导航，例如屏幕阅读器。此外，当使用语义化的HTML时，键盘快捷键，例如按回车键提交表单，会自动生效。
- en: Our `Login` component is implemented, and is now ready to be tested.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Login`组件已经实现，现在可以进行测试了。
- en: Testing out our component
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的组件
- en: 'Now that we have defined our first component, let''s render it and see what
    it looks like:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经定义了我们的第一个组件，让我们渲染它并看看它的样子：
- en: First, we edit `src/App.js`, and remove all its contents.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们编辑`src/App.js`，并删除所有内容。
- en: 'Then, we start by importing `React` and the `Login` component:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们首先导入`React`和`Login`组件：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It is a good idea to group imports in blocks of code that belong together. In
    this case, we separate external imports, such as React, from local imports, such
    as our `Login` component, by adding an empty line in between. Doing so keeps our
    code readable, especially when we add more import statements later.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将导入分组成属于一起的代码块是一个好主意。在这种情况下，我们通过在外部导入（如React）和本地导入（如我们的`Login`组件）之间添加空行来分隔它们。这样做可以保持我们的代码可读性，特别是当我们以后添加更多导入语句时。
- en: 'Finally, we define the `App` component, and return the `Login` component:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们定义`App`组件，并返回`Login`组件：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If we are only returning a single component, we can omit the brackets in the
    `return` statement. Instead of writing `return (<Login />)`, we can simply write `return
    <Login />`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只返回一个组件，可以在`return`语句中省略括号。而不是写`return (<Login />)`，我们可以简单地写`return <Login
    />`。
- en: 'Open `http://localhost:3000` in your browser, and you should see the `Login`
    component being rendered. If you already had the page open in your browser, it
    should refresh automatically when you change the code:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost:3000`，您应该看到`Login`组件被渲染。如果您已经在浏览器中打开了页面，当您更改代码时，它应该会自动刷新：
- en: '![](assets/98b35abf-b0b4-4890-823f-2fbb0affbb34.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/98b35abf-b0b4-4890-823f-2fbb0affbb34.png)'
- en: 'The first component of our blog application: logging in by username and password'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们博客应用的第一个组件：通过用户名和密码登录
- en: As we can see, the static `Login` component renders fine in React. We can now
    move on to the `Logout` component.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，静态的`Login`组件在React中渲染得很好。现在我们可以继续进行`Logout`组件。
- en: The Logout component
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登出组件
- en: 'Next, we define the `Logout` component, which is going to display the currently
    logged in user, and a button to log out:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义`Logout`组件，它将显示当前登录的用户和一个登出按钮：
- en: 'Create a new file: `src/user/Logout.js`'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件：`src/user/Logout.js`
- en: 'Import `React`, as follows:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`React`，如下所示：
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This time, our function is going to take a `user` prop, which we are going
    to use to display the currently logged-in user:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次，我们的函数将接受一个`user`属性，我们将使用它来显示当前登录的用户：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here we use destructuring in order to extract the `user` key from the `props`
    object. React passes all component props, in a single object, as the first argument
    to a function. Using destructuring on the first argument is similar to doing `const
    { user } = this.props` in a class component.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用解构来从`props`对象中提取`user`键。React将所有组件props作为单个对象作为函数的第一个参数传递。在第一个参数上使用解构类似于在类组件中执行`const
    { user } = this.props`。
- en: 'Finally, we return a text that shows the currently logged-in `user` and the
    Logout button:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们返回一个文本，显示当前登录的`user`和登出按钮：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can now replace the `Login` component with the `Logout` component in `src/App.js`,
    in order to see our newly defined component (do not forget to pass the `user` prop
    to it!):'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在`src/App.js`中用`Logout`组件替换`Login`组件，以便看到我们新定义的组件（不要忘记将`user`属性传递给它！）：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, the `Logout` component is defined, and we can move on to the `Register`
    component.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`Logout`组件已经定义，我们可以继续定义`Register`组件。
- en: The Register component
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册组件
- en: The static `Register` component will be very similar to the `Login` component,
    with an additional field to repeat the password. You might get the idea to merge
    them into one component if they are so similar, and add a prop to toggle the Repeat
    password field. However, it is best to stick to the single responsibility principle,
    and to have each component deal with only one functionality. Later on, we are
    going to extend the static components with dynamic code, and then `Register` and
    `Login` will have vastly different code. As a result, we would need to split them
    up again later.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 静态的`Register`组件将与`Login`组件非常相似，只是多了一个重复密码的字段。如果它们如此相似，您可能会想将它们合并为一个组件，并添加一个prop来切换重复密码字段。然而，最好遵循单一职责原则，让每个组件只处理一个功能。稍后，我们将使用动态代码扩展静态组件，然后`Register`和`Login`的代码将大不相同。因此，我们稍后需要再次拆分它们。
- en: 'Nevertheless, let''s start working on the code for the `Register` component:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，让我们开始编写`Register`组件的代码：
- en: 'We start by creating a new `src/user/Register.js` file, and copying the code
    from the `Login` component, as the static components are very similar, after all.
    Make sure to change the name of the component to `Register`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建一个新的`src/user/Register.js`文件，并从`Login`组件中复制代码，因为静态组件毕竟非常相似。确保将组件的名称更改为`Register`：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we add the Repeat password field, right below the Password field code:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在Password字段代码下方添加重复密码字段：
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, we also change the value of the submit button to Register:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们还将提交按钮的值更改为Register：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Again, we can edit `src/App.js` in order to show our component, in a similar
    way to how we did with the `Login` component:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，我们可以编辑`src/App.js`以类似的方式显示我们的组件，就像我们在`Login`组件中所做的那样：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As we can see, our `Register` component looks very similar to the `Login` component.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们的`Register`组件看起来与`Login`组件非常相似。
- en: The UserBar component
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UserBar组件
- en: Now it is time to put our user-related components together into a `UserBar`
    component. Here we are going to conditionally show either the `Login` and `Register`
    components, or the `Logout` component, depending on whether the user is already
    logged in or not.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将我们与用户相关的组件放在一个`UserBar`组件中了。在这里，我们将有条件地显示`Login`和`Register`组件，或者`Logout`组件，这取决于用户是否已经登录。
- en: 'Let''s start implementing the `UserBar` component:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始实现`UserBar`组件：
- en: 'First, we create a new `src/user/UserBar.js` file, and import `React` as well
    as the three components that we defined:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建一个新的`src/user/UserBar.js`文件，并导入`React`以及我们定义的三个组件：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we define our function component, and a value for the `user`. For now,
    we just save it in a static variable:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义我们的函数组件，并为`user`定义一个值。现在，我们只是将它保存在一个静态变量中：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, we check whether the user is logged in or not. If the user is logged
    in, we display the `Logout` component, and pass the `user` value to it:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们检查用户是否已登录。如果用户已登录，我们显示`Logout`组件，并将`user`值传递给它：
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Otherwise, we show the `Login` and `Register` components. Here, we can use
    `React.Fragment` instead of a `<div>` container element. This keeps our UI tree
    clean, as the components will simply be rendered side by side, instead of being
    wrapped in another element:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，我们展示`Login`和`Register`组件。在这里，我们可以使用`React.Fragment`而不是`<div>`容器元素。这样可以保持我们的UI树干净，因为组件将简单地并排渲染，而不是包裹在另一个元素中：
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Again, we edit `src/App.js`, and now we show our `UserBar` component:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次编辑`src/App.js`，现在我们展示我们的`UserBar`组件：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As we can see, it works! We now show both the `Login` and `Register` components:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到，它起作用了！我们现在展示`Login`和`Register`组件：
- en: '![](assets/8de0c0af-3059-426e-9428-5be16c081648.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8de0c0af-3059-426e-9428-5be16c081648.png)'
- en: Our UserBar component, showing both the Login and Register components
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的UserBar组件，展示了Login和Register组件
- en: 'Next, we can edit the `src/user/UserBar.js` file, and set the `user` value
    to a string:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以编辑`src/user/UserBar.js`文件，并将`user`值设置为一个字符串：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After doing so, our app now shows the `Logout` component:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样做之后，我们的应用程序现在显示`Logout`组件：
- en: '![](assets/810249b7-c3e0-428f-a41e-72ef8e97006f.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/810249b7-c3e0-428f-a41e-72ef8e97006f.png)'
- en: Our app showing the Logout component after defining the user value
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序在定义`user`值后显示了Logout组件
- en: Later on in this chapter, we are going to add Hooks to our application, so that
    we can log in and have the state change dynamically without having to edit the
    code!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面，我们将向我们的应用程序添加Hooks，这样我们就可以登录并使状态动态更改，而无需编辑代码！
- en: Example code
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码
- en: The example code for the user-related components can be found in the `Chapter03/chapter3_1` folder.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 与用户相关的组件的示例代码可以在`Chapter03/chapter3_1`文件夹中找到。
- en: Just run `npm install` to install all dependencies, and `npm start` to start
    the application, then visit `http://localhost:3000` in your browser (if it did
    not open automatically).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行`npm install`来安装所有依赖项，然后运行`npm start`来启动应用程序，然后在浏览器中访问`http://localhost:3000`（如果没有自动打开）。
- en: Implementing posts
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现帖子
- en: 'After implementing all the user-related components, we move on to implementing
    posts in our blog app. We are going to define the following components:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现了所有与用户相关的组件之后，我们继续在博客应用中实现帖子。我们将定义以下组件：
- en: A `Post` component to display a single post
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Post`组件用于显示单个帖子
- en: A `CreatePost` component for creating new posts
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`CreatePost`组件用于创建新的帖子
- en: A `PostList` component to show multiple posts
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`PostList`组件用于显示多个帖子
- en: Let's get started implementing the post related components now.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始实现与帖子相关的组件。
- en: The Post component
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Post组件
- en: We have already thought about which elements a post has when creating the mock-up.
    A post should have a title, content, and an author (the user who wrote the post).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建模型时，我们已经考虑了帖子具有哪些元素。帖子应该有一个标题，内容和作者（撰写帖子的用户）。
- en: 'Let''s implement the `Post` component now:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现`Post`组件：
- en: First, we create a new file: `src/post/Post.js`
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建一个新文件：`src/post/Post.js`
- en: 'Then, we import `React`, and define our function component, accepting three
    props: `title`, `content`, and `author`:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们导入`React`，并定义我们的函数组件，接受三个属性：`title`，`content`和`author`：
- en: '[PRE20]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we render all props in a way that resembles the mock-up:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们以类似模型的方式呈现所有属性：
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As always, we can test our component by editing the `src/App.js` file:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样，我们可以通过编辑`src/App.js`文件来测试我们的组件：
- en: '[PRE22]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now, the static `Post` component has been implemented, and we can move on to
    the `CreatePost` component.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，静态的`Post`组件已经实现，我们可以继续进行`CreatePost`组件。
- en: The CreatePost component
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CreatePost组件
- en: Next, we implement a form to allow for the creation of new posts. Here, we pass
    the `user` value as a prop to the component, as the author should always be the
    currently logged-in user. Then, we show the author, and provide an input field
    for the `title`, and a `<textarea>` element for the content of the blog post.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们实现一个表单来允许创建新的帖子。在这里，我们将`user`值作为属性传递给组件，因为作者应该始终是当前登录的用户。然后，我们显示作者，并为博客帖子的`title`提供一个输入字段，以及一个`<textarea>`元素用于内容。
- en: 'Let''s implement the `CreatePost` component now:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现`CreatePost`组件：
- en: Create a new file: `src/post/CreatePost.js`
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件：`src/post/CreatePost.js`
- en: 'Define the following component:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义以下组件：
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As always, we can test our component by editing the `src/App.js` file:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样，我们可以通过编辑`src/App.js`文件来测试我们的组件：
- en: '[PRE24]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As we can see, the `CreatePost` component renders fine. We can now move on to
    the `PostList` component.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`CreatePost`组件渲染正常。我们现在可以继续进行`PostList`组件。
- en: The PostList component
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PostList组件
- en: 'After implementing the other post-related components, we can now implement
    the most important part of our blog app: the feed of blog posts. For now, the
    feed is simply going to show a list of blog posts.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现其他与文章相关的组件之后，我们现在可以实现博客应用程序最重要的部分：博客文章的动态更新。目前，动态更新只是简单地显示博客文章列表。
- en: 'Let''s start implementing the `PostList` component now:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在开始实现`PostList`组件：
- en: 'We start by importing `React` and the `Post` component:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先导入`React`和`Post`组件：
- en: '[PRE25]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, we define our `PostList` function component, accepting a `posts` array
    as a prop. If `posts` is not defined, we set it to an empty array, by default:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义我们的`PostList`函数组件，接受一个`posts`数组作为prop。如果`posts`未定义，我们将其默认设置为空数组：
- en: '[PRE26]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, we render all `posts` by using the `.map` function and the spread syntax:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用`.map`函数和扩展语法来渲染所有`posts`：
- en: '[PRE27]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If we are rendering a list of elements, we have to give each element a unique `key`
    prop. React uses this `key` prop to efficiently compute the difference of two
    lists, when the data has changed.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要渲染一个元素列表，我们必须给每个元素一个唯一的`key` prop。当数据发生变化时，React使用这个`key` prop来高效地计算两个列表的差异。
- en: 'Here, we use the `map` function, which applies a function to all the elements
    of an array. This is similar to using a `for` loop, and storing all the results,
    but it is much more concise, declarative, and easier to read! Alternatively, we
    could do the following instead of using the `map` function:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`map`函数，它将一个函数应用于数组的所有元素。这类似于使用`for`循环并存储所有结果，但它更加简洁、声明性，并且更容易阅读！或者，我们可以使用`map`函数的替代方法：
- en: '[PRE28]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We then return the `<Post>` component for each post, and pass all the keys
    from the post object, `p`, to the component as props. We do this by using the
    spread syntax, which has the same effect as listing all the keys from the object
    manually as props, as follows: `<Post title={p.title} content={p.content} author={p.author}
    />`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们为每篇文章返回`<Post>`组件，并将文章对象`p`的所有键作为props传递给组件。我们使用扩展语法来实现这一点，它的效果与手动列出对象中所有键作为props相同，如下所示：`<Post
    title={p.title} content={p.content} author={p.author} />`
- en: 'In the mock-up, we have a horizontal line after each blog post. We can implement
    this without an additional `<div>` container element, by using `React.Fragment`:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模型中，每篇博客文章之后都有一条水平线。我们可以通过使用`React.Fragment`来实现这一点，而无需额外的`<div>`容器元素：
- en: '[PRE29]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `key` prop always has to be added to the uppermost parent element that is
    rendered within the `map` function. In this case, we had to move the `key` prop
    from the `Post` component to the `React.Fragment` component.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`key` prop始终必须添加到在`map`函数中渲染的最上层父元素。在这种情况下，我们不得不将`key` prop从`Post`组件移动到`React.Fragment`组件中。'
- en: 'Again, we test our component by editing the `src/App.js` file:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过编辑`src/App.js`文件来测试我们的组件：
- en: '[PRE30]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we can see that our app lists all the posts that we defined in the `posts`
    array:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到我们的应用程序列出了我们在`posts`数组中定义的所有文章：
- en: '![](assets/e96b9030-8422-4caa-9f22-df847b8557e7.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e96b9030-8422-4caa-9f22-df847b8557e7.png)'
- en: Showing multiple posts using the PostList component
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PostList组件显示多篇文章
- en: As we can see, listing multiple posts via the `PostList` component works fine.
    We can now move on to putting the app together.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，通过`PostList`组件列出多篇文章是可以的。现在我们可以继续组合应用程序。
- en: Putting the app together
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合应用程序
- en: After implementing all components, in order to reproduce the mock-up, we now
    only have to put everything together in the `App` component. Then, we will have
    successfully reproduced the mock-up!
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现所有组件之后，为了复制模型，我们现在只需要将所有内容放在`App`组件中。然后，我们将成功复制模型！
- en: 'Let''s start modifying the `App` component, and putting our app together:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始修改`App`组件，并组合我们的应用程序：
- en: Edit `src/App.js`, and remove all of the current code.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/App.js`，并删除所有当前代码。
- en: 'First, we import `React`, `PostList`, `CreatePost`, and the `UserBar` components:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入`React`、`PostList`、`CreatePost`和`UserBar`组件：
- en: '[PRE31]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, we define some mock data for our app:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们为我们的应用程序定义一些模拟数据：
- en: '[PRE32]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, we define the `App` component, and return a `<div>` container element,
    where we set some padding:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义`App`组件，并返回一个`<div>`容器元素，在这里我们设置一些填充：
- en: '[PRE33]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, we insert the `UserBar` and `CreatePost` components, passing the `user` prop
    to the `CreatePost` component:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们插入`UserBar`和`CreatePost`组件，将`user`属性传递给`CreatePost`组件：
- en: '[PRE34]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Please note that you should always prefer spacing via CSS, rather than using
    the `<br />` HTML tag. However, at the moment, we are focusing on the UI, rather
    than its style, so we simply use HTML whenever possible.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您应该始终优先使用CSS进行间距设置，而不是使用`<br />`HTML标记。但是，目前我们专注于UI，而不是其样式，因此我们尽可能使用HTML。
- en: 'Finally, we display the `PostList` component, listing all `posts`:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们显示`PostList`组件，列出所有的`posts`：
- en: '[PRE35]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'After saving the file, `http://localhost:3000` should automatically refresh,
    and we can now see the full UI:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件后，`http://localhost:3000`应该会自动刷新，现在我们可以看到完整的UI了：
- en: '![](assets/84ac3159-6797-4900-8367-b09b754b990f.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/84ac3159-6797-4900-8367-b09b754b990f.png)'
- en: Full implementation of our static blog app, according to the mock-up
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 根据模拟的静态博客应用程序的完整实现
- en: As we can see, all of the static components that we defined earlier are rendered
    together in one `App` component. Our app now looks just like the mock-up. Next,
    we can move on to making all of the components dynamic.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们之前定义的所有静态组件都在一个`App`组件中一起呈现。我们的应用程序现在看起来就像模拟一样。接下来，我们可以继续使所有组件都变得动态。
- en: Example code
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码
- en: The example code for the static implementation of our blog app can be found
    in the `Chapter03/chapter3_2` folder.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们博客应用程序静态实现的示例代码可以在`Chapter03/chapter3_2`文件夹中找到。
- en: Just run `npm install` to install all dependencies and `npm start` to start
    the application, then visit `http://localhost:3000` in your browser (if it did
    not open automatically).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行`npm install`来安装所有依赖项，然后运行`npm start`来启动应用程序，然后在浏览器中访问`http://localhost:3000`（如果没有自动打开）。
- en: Implementing stateful components with Hooks
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Hooks实现有状态的组件
- en: Now that we have implemented the static structure of our application, we are
    going to add `useState` Hooks to it, in order to be able to handle state and dynamic
    interactions!
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实现了应用程序的静态结构，我们将为它添加`useState` Hooks，以便能够处理状态和动态交互！
- en: Adding Hooks for the users feature
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为用户功能添加Hooks
- en: To add Hooks for the users feature, we are going to have to replace the static `user` value
    with a State Hook. Then, we need to adjust the value when we log in, register
    and log out.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为用户功能添加Hooks，我们需要用一个State Hook替换静态的`user`值。然后，我们需要在登录、注册和注销时调整这个值。
- en: Adjusting UserBar
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整UserBar
- en: Recall that when we created the `UserBar` component, we statically defined the `user` value.
    We are now going to replace this value with a State Hook!
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，当我们创建`UserBar`组件时，我们静态定义了`user`值。现在我们将用一个State Hook替换这个值！
- en: 'Let''s start modifying the `UserBar` component to make it dynamic:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始修改`UserBar`组件，使其变得动态：
- en: 'Edit `src/user/UserBar.js`, and import the `useState` Hook by adjusting the
    `React` import statement, as follows:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/user/UserBar.js`，通过调整`React`导入语句导入`useState` Hook，如下所示：
- en: '[PRE36]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Remove the following line of code:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除以下代码行：
- en: '[PRE37]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Replace it with a State Hook, using an empty user `''''` as the default value:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 用一个空的用户`''`作为默认值替换它：
- en: '[PRE38]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, we pass the `setUser` function to the `Login`, `Register`, and `Logout`
    components:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将`setUser`函数传递给`Login`、`Register`和`Logout`组件：
- en: '[PRE39]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Now, the `UserBar` component provides a `setUser` function, which can be used
    in the `Login`, `Register`, and `Logout` components to set or unset the `user`
    value.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`UserBar`组件提供了一个`setUser`函数，可以在`Login`、`Register`和`Logout`组件中使用，以设置或取消`user`的值。
- en: Adjusting the Login and Register components
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整登录和注册组件
- en: In the `Login` and `Register` components, we need to use the `setUser` function
    to set the value of `user` accordingly, when we log in or register.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Login`和`Register`组件中，我们需要使用`setUser`函数来相应地设置`user`的值，当我们登录或注册时。
- en: Login
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录
- en: In the `Login` component, we just ignore the Password field for now, and only
    process the Username field.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Login`组件中，我们现在暂时忽略密码字段，只处理用户名字段。
- en: 'Let''s start by modifying the `Login` component in order to make it dynamic:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先修改`Login`组件以使其动态化：
- en: 'Edit `src/user/Login.js`, and import the `useState` Hook:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/user/Login.js`，并导入`useState` Hook：
- en: '[PRE40]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then, adjust the function definition to accept the `setUser` prop:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，调整函数定义以接受`setUser`属性：
- en: '[PRE41]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, we define a new State Hook for the value of the Username field:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们为用户名字段的值定义一个新的State Hook：
- en: '[PRE42]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next, we define a handler function:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个处理程序函数：
- en: '[PRE43]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, we adjust the `input` field, in order to use the `username` value, and
    call the `handleUsername` function when the input changes:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们调整`input`字段，以使用`username`的值，并在输入更改时调用`handleUsername`函数：
- en: '[PRE44]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, we need to call the `setUser` function when the Login button is pressed,
    and thus the `form` is submitted:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，当按下登录按钮并且表单被提交时，我们需要调用`setUser`函数：
- en: '[PRE45]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Additionally, we can disable the Login button when the `username` value is
    empty:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，当`username`值为空时，我们可以禁用登录按钮：
- en: '[PRE46]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: And it works—we can now enter a username, press the Login button, and then our
    `UserBar` component will change its state, and show the `Logout` component!
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 它起作用了——我们现在可以输入用户名，按下登录按钮，然后我们的`UserBar`组件将改变其状态，并显示`Logout`组件！
- en: Register
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册
- en: For registration, we are additionally going to check whether the entered passwords
    are the same, and only then will we set the `user` value.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 对于注册，我们还将检查输入的密码是否相同，只有在这种情况下我们才会设置`user`的值。
- en: 'Let''s start by modifying the `Register` component in order to make it dynamic:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先修改`Register`组件以使其动态化：
- en: 'First, we do the same steps as we did for `Login`, in order to handle the `username`
    field:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们执行与“登录”相同的步骤，以处理“用户名”字段：
- en: '[PRE47]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, we define two new State Hooks for the Password and Repeat password fields:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们为`密码`和`重复密码`字段定义了两个新的State Hooks：
- en: '[PRE48]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Then, we define two handler functions for them:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们为它们定义两个处理程序函数：
- en: '[PRE49]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: You might have noticed that we are always writing similar handler functions
    for `input` fields. Actually, this is the perfect use case for creating a custom
    Hook! We are going to learn how to do that in a future chapter.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我们总是为`input`字段编写类似的处理程序函数。实际上，这是创建自定义Hook的完美用例！我们将在未来的章节中学习如何做到这一点。
- en: 'Next, we assign the `value` and `onChange` handler functions to the `input`
    fields:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将`value`和`onChange`处理程序函数分配给`input`字段：
- en: '[PRE50]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Finally, we check if the passwords match, and if they do not, we keep the button
    `disabled`:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们检查密码是否匹配，如果不匹配，我们保持按钮处于禁用状态：
- en: '[PRE51]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: And now we have successfully implemented a check on whether the passwords are
    equal, and we implemented registration!
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们成功地实现了检查密码是否相等，并且我们实现了注册！
- en: Adjusting Logout
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整登出
- en: There is still one thing missing for the users feature—we cannot log out yet.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户功能，还有一件事情还缺少——我们还不能注销。
- en: 'Let''s make the `Logout` component dynamic now:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使`Logout`组件动态化：
- en: 'Edit `src/user/Logout.js`, and add the `setUser` prop:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/user/Logout.js`，并添加`setUser`属性：
- en: '[PRE52]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then, adjust the `onSubmit` handler of `form` and set the user to `''''`:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，调整`form`的`onSubmit`处理程序并将用户设置为`''`：
- en: '[PRE53]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: As we are not creating a new Hook here, we do not need to import the `useState` Hook
    from React. We can simply use the `setUser` function passed to the `Logout` component
    as a prop.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这里不创建新的Hook，所以不需要从React中导入`useState` Hook。我们可以简单地使用传递给`Logout`组件的`setUser`函数作为prop。
- en: Now, the `Logout` component sets the `user` value to `''` when we click on the
    Logout button.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们点击注销按钮时，`Logout`组件将`user`值设置为`''`。
- en: Passing the user to CreatePost
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将用户传递给CreatePost
- en: As you might have noticed, the `CreatePost` component still uses the hardcoded
    username. To be able to access the `user` value there, we need to move the Hook
    from the `UserBar` component, to the `App` component.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，`CreatePost`组件仍然使用硬编码的用户名。为了能够在那里访问`user`值，我们需要将Hook从`UserBar`组件移动到`App`组件。
- en: 'Let''s refactor the definition of the `user` State Hook now:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们重构`user` State Hook的定义：
- en: 'Edit `src/user/UserBar.js`, and cut/remove the Hook definition that is there:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/user/UserBar.js`，并删除那里的Hook定义：
- en: '[PRE54]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Then, we edit the function definition, and accept these two values as props:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们编辑函数定义，并接受这两个值作为props：
- en: '[PRE55]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, we edit `src/App.js`, and import the `useState` Hook there:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们编辑`src/App.js`，并在那里导入`useState` Hook：
- en: '[PRE56]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Next, we remove the static `user` value definition:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们删除静态的`user`值定义：
- en: '[PRE57]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Then, we insert the `user` State Hook that we cut earlier into the `App` component
    function:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将之前剪切的`user` State Hook插入`App`组件函数中：
- en: '[PRE58]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now, we can pass `user` and `setUser` as props to the `UserBar` component:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以将`user`和`setUser`作为props传递给`UserBar`组件：
- en: '[PRE59]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `user` state is a global state, so we are going to need it in many components
    across the app. At the moment, this means that we need to pass down the `user` value
    and the `setUser`function to each component that needs it. In a future chapter,
    we are going to learn about React Context Hooks, which solve the problem of having
    to pass down props in such a way.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`user`状态是全局状态，因此我们需要在应用程序中的许多组件中使用它。目前，这意味着我们需要将`user`值和`setUser`函数传递给每个需要它的组件。在未来的章节中，我们将学习关于React
    Context Hooks，它解决了必须以这种方式传递props的问题。'
- en: 'Finally, we only show the `CreatePost` component when the user is logged in.
    To do this, we use a pattern, which allows us to show a component based on a condition:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，只有在用户登录时才显示`CreatePost`组件。为了做到这一点，我们使用一种模式，它允许我们根据条件显示组件：
- en: '[PRE60]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Now, the users feature is fully implemented—we can use the `Login` and `Register`
    components, and the `user` value also gets passed to the `CreatePost` component!
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，用户功能已经完全实现了——我们可以使用`Login`和`Register`组件，并且`user`值也传递给了`CreatePost`组件！
- en: Adding Hooks for the posts feature
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为帖子功能添加Hooks
- en: After implementing the users feature, we are now going to implement the dynamic
    creation of posts. We do so by first adjusting the `App` component and then modifying
    the `CreatePost` component, in order to be able to insert new posts.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 实现用户功能后，我们现在要实现动态创建帖子。我们首先调整`App`组件，然后修改`CreatePost`组件，以便能够插入新帖子。
- en: Let's get started by adjusting the App component.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始调整App组件。
- en: Adjusting the App component
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整App组件
- en: As we know from the users feature, posts are also going to be global state,
    so we should define it in the `App` component.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从用户功能中所知道的，帖子也将是全局状态，因此我们应该在`App`组件中定义它。
- en: 'Let''s implement the `posts` value as global state now:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将`posts`值作为全局状态实现：
- en: 'Edit `src/App.js`, and rename the current `posts` array to `defaultPosts`:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/App.js`，并将当前的`posts`数组重命名为`defaultPosts`：
- en: '[PRE61]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Then, define a new State Hook for the `posts` state:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为`posts`状态定义一个新的State Hook：
- en: '[PRE62]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now, we pass the `posts` value and `setPosts` function as props to the `CreatePost`
    component:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将`posts`值和`setPosts`函数作为props传递给`CreatePost`组件：
- en: '[PRE63]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Now, our `App` component provides the `posts` array, and a `setPosts` function
    to the `CreatePost` component. Let's move on to adjusting the CreatePost component.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`App`组件为`CreatePost`组件提供了`posts`数组和`setPosts`函数。让我们继续调整CreatePost组件。
- en: Adjusting the CreatePost component
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整CreatePost组件
- en: Next, we need to use the `setPosts` function in order to insert a new post,
    when we press the Create button.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要使用`setPosts`函数来在按下Create按钮时插入一个新的帖子。
- en: 'Let''s start modifying the `CreatePost` component in order to make it dynamic:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始修改`CreatePost`组件，以使其动态化：
- en: 'Edit `src/posts/CreatePost.js`, and import the `useState` Hook:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/posts/CreatePost.js`，并导入`useState` Hook：
- en: '[PRE64]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Then, adjust the function definition to accept the `posts` and `setPosts` props:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，调整函数定义以接受`posts`和`setPosts`属性：
- en: '[PRE65]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Next, we define two new State Hooks—one for the `title` value, and one for
    the `content` value:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义两个新的State Hooks——一个用于`title`值，一个用于`content`值：
- en: '[PRE66]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Now, we define two handler functions—one for the `input` field, and one for
    the `textarea`:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们定义了两个处理函数——一个用于`input`字段，一个用于`textarea`：
- en: '[PRE67]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We also define a handler function for the Create button:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还为Create按钮定义了一个处理函数：
- en: '[PRE68]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'In this function, we first create a `newPost` object from the `input` field
    values:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个函数中，我们首先从`input`字段的值创建一个`newPost`对象：
- en: '[PRE69]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In newer JavaScript versions, we can shorten the following object assignment: `{
    title: title }`, to `{ title }`, and it will have the same effect. So, instead
    of doing `{ title: title, contents: contents }`, we can simply do `{ title, contents
    }`.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '在较新的JavaScript版本中，我们可以将以下对象赋值缩短为`{ title: title }`，变为`{ title }`，并且会产生相同的效果。因此，我们可以简单地使用`{
    title, contents }`来代替`{ title: title, contents: contents }`。'
- en: 'Then, we set the new `posts` array by first adding `newPost` to the array,
    then using the spread syntax to list all of the existing `posts`:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过首先将`newPost`添加到数组中，然后使用扩展语法列出所有现有的`posts`来设置新的`posts`数组：
- en: '[PRE70]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Next, we add the `value` and handler functions to the `input` field and `textarea` element:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将`value`和处理函数添加到`input`字段和`textarea`元素中：
- en: '[PRE71]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Usually in HTML, we put the value of `textarea` as its children. However, in
    React, `textarea` can be handled like any other `input` field, by using the `value` and `onChange` props.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在HTML中，我们将`textarea`的值放在其子元素中。然而，在React中，`textarea`可以像任何其他`input`字段一样处理，通过使用`value`和`onChange`属性。
- en: 'Finally, we pass the `handleCreate` function to the `onSubmit` handler of the
    `form` element:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将`handleCreate`函数传递给`form`元素的`onSubmit`处理程序：
- en: '[PRE72]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Now, we can log in and create a new post, and it will be inserted at the beginning
    of the feed:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以登录并创建一个新的帖子，它将被插入到动态源的开头：
- en: '![](assets/e09c94b6-d289-4cb9-98c5-38f8dec399c6.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e09c94b6-d289-4cb9-98c5-38f8dec399c6.png)'
- en: Our first version of the blog app using Hooks, after inserting a new blog post
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Hooks插入新博客帖子后的博客应用程序的第一个版本
- en: As we can see, now our application is fully dynamic, and we can use all of its
    features!
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，现在我们的应用程序是完全动态的，我们可以使用它的所有功能！
- en: Example code
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码
- en: The example code for the dynamic implementation of our blog app with Hooks can
    be found in the `Chapter03/chapter3_3` folder.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Hooks实现我们的博客应用程序的动态示例代码可以在`Chapter03/chapter3_3`文件夹中找到。
- en: Just run `npm install` to install all dependencies, and `npm start` to start
    the application, then visit `http://localhost:3000` in your browser (if it did
    not open automatically).
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行`npm install`来安装所有依赖项，然后运行`npm start`来启动应用程序，然后在浏览器中访问`http://localhost:3000`（如果没有自动打开）。
- en: Summary
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we developed our own blog application from scratch! We started
    with a mock-up, then created static components to resemble it. Afterward, we implemented
    Hooks, to allow for dynamic behavior. Throughout the chapter, we learned how to
    deal with local and global states, using Hooks. Furthermore, we learned how to
    use multiple Hooks, and in which components to define Hooks and store state. We
    also learned how to solve common use cases, such as handling input fields with
    the use of Hooks.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从头开始开发了自己的博客应用程序！我们从一个模型开始，然后创建了静态组件来模拟它。之后，我们实现了Hooks，以实现动态行为。在整个章节中，我们学会了如何使用Hooks处理本地和全局状态。此外，我们学会了如何使用多个Hooks，以及在哪些组件中定义Hooks和存储状态。我们还学会了如何解决常见用例，比如使用Hooks处理输入字段。
- en: In the next chapter, we are going to learn about the `useReducer` Hook, which
    allows us to deal with certain state changes more easily. Furthermore, we are
    going to learn about the `useEffect` Hook, which allows us to run code with side
    effects.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习`useReducer` Hook，它使我们能够更轻松地处理特定状态变化。此外，我们将学习`useEffect` Hook，它使我们能够运行具有副作用的代码。
- en: Questions
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结我们在本章学到的内容，试着回答以下问题：
- en: What is the best practice for folder structures in React?
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在React中，文件夹结构的最佳实践是什么？
- en: Which principle should we use when splitting up React components?
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在拆分React组件时应该使用哪个原则？
- en: What does the `map` function do?
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`map`函数是做什么的？'
- en: How does destructuring work, and when do we use it?
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解构是如何工作的，我们什么时候使用它？
- en: How does the spread operator work, and when do we use it?
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开运算符是如何工作的，我们什么时候使用它？
- en: How do we deal with input fields using React Hooks?
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何使用React Hooks处理输入字段？
- en: Where should local State Hooks be defined?
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地状态 Hook 应该在哪里定义？
- en: What is global state?
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是全局状态？
- en: Where should global State Hooks be defined?
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全局状态 Hook 应该在哪里定义？
- en: Further reading
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following reading material:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对本章学到的概念更感兴趣，可以查看以下阅读材料：
- en: 'Official docs on *Thinking in React*: [https://reactjs.org/docs/thinking-in-react.html](https://reactjs.org/docs/thinking-in-react.html)'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*React思维*的官方文档：[https://reactjs.org/docs/thinking-in-react.html](https://reactjs.org/docs/thinking-in-react.html)'
- en: Handling input fields with React: [https://reactjs.org/docs/forms.html](https://reactjs.org/docs/forms.html)
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用React处理输入字段：[https://reactjs.org/docs/forms.html](https://reactjs.org/docs/forms.html)
