["```jsx\nimport React from 'react'\nimport { useInput } from 'react-hookedup'\n\nexport default function App () {\n    const { value, onChange } = useInput('')\n\n    return <input value={value} onChange={onChange} />\n}\n```", "```jsx\n    const { clear } = useInput('')\n```", "```jsx\nimport React from 'react'\nimport { useInput } from 'react-hookedup'\n\nconst ToggleButton = ({ value, onChange }) => { ... } // custom component that renders a toggle button\n\nexport default function App () {\n    const { bind, bindToInput } = useInput('')\n\n    return (\n        <div>\n            <input {...bindToInput} />\n            <ToggleButton {...bind} />\n        </div>\n    )\n}\n```", "```jsx\n> npm install --save react-hookedup\n```", "```jsx\nimport { useInput } from 'react-hookedup'\n```", "```jsx\n    const [ username, setUsername ] = useState('')\n```", "```jsx\n    const { value: username, bindToInput: bindUsername } = useInput('')\n```", "```jsx\n    const [ password, setPassword ] = useState('')\n```", "```jsx\n    const { value: password, bindToInput: bindPassword } = useInput('')\n```", "```jsx\n    function handleUsername (evt) {\n        setUsername(evt.target.value)\n    }\n\n    function handlePassword (evt) {\n        setPassword(evt.target.value)\n    }\n```", "```jsx\n            <input type=\"text\" value={username} {...bindUsername} name=\"login-username\" id=\"login-username\" />\n            <input type=\"password\" value={password} {...bindPassword} name=\"login-password\" id=\"login-password\" />\n```", "```jsx\nimport { useInput } from 'react-hookedup'\n```", "```jsx\n    const [ username, setUsername ] = useState('')\n    const [ password, setPassword ] = useState('')\n    const [ passwordRepeat, setPasswordRepeat ] = useState('')\n```", "```jsx\n    const { value: username, bindToInput: bindUsername } = useInput('')\n    const { value: password, bindToInput: bindPassword } = useInput('')\n    const { value: passwordRepeat, bindToInput: bindPasswordRepeat } = useInput('')\n```", "```jsx\n function  handleUsername  (evt)  { setUsername(evt.target.value)\n } function  handlePassword  (evt)  { setPassword(evt.target.value)\n } function  handlePasswordRepeat  (evt)  { setPasswordRepeat(evt.target.value)\n }\n```", "```jsx\n <input  type=\"text\"  value={username} **{...bindUsername****}** name=\"register-username\" id=\"register-username\" /> <input  type=\"password\"  value={password} **{...bindPassword****}** name=\"register-password\" id=\"register-password\" /> <input  type=\"password\"  value={passwordRepeat} **{...bindPasswordRepeat}** name=\"register-password-repeat\" id=\"register-password-repeat/>\n```", "```jsx\nimport { useInput } from 'react-hookedup'\n```", "```jsx\n    const [ title, setTitle ] = useState('')\n    const [ content, setContent ] = useState('')\n```", "```jsx\n    const { value: title, bindToInput: bindTitle } = useInput('')\n    const { value: content, bindToInput: bindContent } = useInput('')\n```", "```jsx\n function  handleTitle  (evt)  { setTitle(evt.target.value)\n } function  handleContent  (evt)  { setContent(evt.target.value)\n }\n```", "```jsx\n <input  type=\"text\"  value={title} **{...bindTitle}** name=\"create-title\" id=\"create-title\" />\n        </div>\n <textarea  value={content} **{...bindContent}** />\n```", "```jsx\nimport React from 'react'\nimport { useOnMount } from 'react-hookedup'\n\nexport default function UseOnMount () {\n    useOnMount(() => console.log('mounted'))\n\n    return <div>look at the console :)</div>\n}\n```", "```jsx\nimport React, { useEffect } from 'react'\n\nexport default function OnMountWithEffect () {\n    useEffect(() => console.log('mounted with effect'), [])\n\n    return <div>look at the console :)</div>\n}\n```", "```jsx\nimport React from 'react'\nimport { useOnUnmount } from 'react-hookedup'\n\nexport default function UseOnUnmount () {\n    useOnUnmount(() => console.log('unmounting'))\n\n    return <div>click the \"unmount\" button above and look at the console</div>\n}\n```", "```jsx\nimport React, { useEffect } from 'react'\n\nexport default function OnUnmountWithEffect () {\n    useEffect(() => {\n        return () => console.log('unmounting with effect')\n    }, [])\n\n    return <div>click the \"unmount\" button above and look at the console</div>\n}\n```", "```jsx\nimport React from 'react'\nimport { useLifecycleHooks } from 'react-hookedup'\n\nexport default function UseLifecycleHooks () {\n    useLifecycleHooks({\n        onMount: () => console.log('lifecycle mounted'),\n        onUnmount: () => console.log('lifecycle unmounting')\n    })\n\n    return <div>look at the console and click the button</div>\n}\n```", "```jsx\nimport React from 'react'\nimport { useOnMount, useOnUnmount } from 'react-hookedup'\n\nexport default function UseLifecycleHooksSeparate () {\n    useOnMount(() => console.log('separate lifecycle mounted'))\n    useOnUnmount(() => console.log('separate lifecycle unmounting'))\n\n    return <div>look at the console and click the button</div>\n}\n```", "```jsx\nimport React, { useEffect } from 'react'\n\nexport default function LifecycleHooksWithEffect () {\n    useEffect(() => {\n        console.log('lifecycle mounted with effect')\n        return () => console.log('lifecycle unmounting with effect')\n    }, [])\n\n    return <div>look at the console and click the button</div>\n}\n```", "```jsx\nimport React, { useState } from 'react'\n```", "```jsx\nexport default function MergeState () {\n    const [ state, setState ] = useState({ loaded: true, counter: 0 })\n```", "```jsx\n    function handleClick () {\n        setState({ counter: state.counter + 1 })\n    }\n```", "```jsx\n    return (\n        <div>\n            Count: {state.counter}\n            <button onClick={handleClick} disabled={!state.loaded}>+1</button>\n        </div>\n    )\n}\n```", "```jsx\n    function handleClick () {\n        setState({ ...state, counter: state.counter + 1 })\n    }\n```", "```jsx\nimport React from 'react'\nimport { useMergeState } from 'react-hookedup'\n\nexport default function UseMergeState () {\n    const { state, setState } = useMergeState({ loaded: true, counter: 0 })\n```", "```jsx\nimport React, { useState } from 'react'\nimport { usePrevious } from 'react-hookedup'\n```", "```jsx\nexport default function UsePrevious () {\n    const [ count, setCount ] = useState(0)\n```", "```jsx\n    const prevCount = usePrevious(count)\n```", "```jsx\n    function handleClick () {\n        setCount(count + 1)\n    }\n```", "```jsx\n    return (\n        <div>\n            Count was {prevCount} and is {count} now.\n            <button onClick={handleClick}>+1</button>\n        </div>\n    )\n}\n```", "```jsx\nimport React, { useState } from 'react'\nimport { useInterval } from 'react-hookedup'\n```", "```jsx\nexport default function UseInterval () {\n    const [ count, setCount ] = useState(0)\n```", "```jsx\n    useInterval(() => setCount(count + 1), 1000)\n```", "```jsx\n    return <div>{count} seconds passed</div>\n}\n```", "```jsx\nimport React, { useState, useEffect } from 'react'\n\nexport default function IntervalWithEffect () {\n    const [ count, setCount ] = useState(0)\n    useEffect(() => {\n        const interval = setInterval(() => setCount(count + 1), 1000)\n        return () => clearInterval(interval)\n    })\n\n    return <div>{count} seconds passed</div>\n}\n```", "```jsx\nimport React, { useState } from 'react'\nimport { useTimeout } from 'react-hookedup'\n```", "```jsx\nexport default function UseTimeout () {\n    const [ ready, setReady ] = useState(false)\n```", "```jsx\n    useTimeout(() => setReady(true), 10000)\n```", "```jsx\n    return <div>{ready ? 'ready' : 'waiting...'}</div>\n}\n```", "```jsx\nimport React, { useState, useEffect } from 'react'\n\nexport default function TimeoutWithEffect () {\n    const [ ready, setReady ] = useState(false)\n    useEffect(() => {\n        const timeout = setTimeout(() => setReady(true), 10000)\n        return () => clearTimeout(timeout)\n    })\n\n    return <div>{ready ? 'ready' : 'waiting...'}</div>\n}\n```", "```jsx\nimport React from 'react'\nimport { useOnlineStatus } from 'react-hookedup'\n\nexport default function App () {\n    const { online } = useOnlineStatus()\n\n    return <div>You are {online ? 'online' : 'offline'}!</div>\n}\n```", "```jsx\nimport React, { useEffect } from 'react'\nimport { useOnlineStatus, usePrevious } from 'react-hookedup'\n\nexport default function App () {\n    const { online } = useOnlineStatus()\n    const prevOnline = usePrevious(online)\n\n    useEffect(() => {\n        if (prevOnline === false && online === true) {\n            alert('syncing data')\n        }\n    }, [prevOnline, online])\n\n    return <div>You are {online ? 'online' : 'offline'}!</div>\n}\n```", "```jsx\nimport React from 'react'\nimport { useBoolean } from 'react-hookedup'\n```", "```jsx\nexport default function UseBoolean () {\n    const { toggle, value } = useBoolean(false)\n```", "```jsx\n    return (\n        <div>\n            <button onClick={toggle}>{value ? 'on' : 'off'}</button>\n        </div>\n    )\n}\n```", "```jsx\nimport React from 'react'\nimport { useArray } from 'react-hookedup'\n```", "```jsx\nexport default function UseArray () {\n    const { value, add, clear, removeIndex } = useArray(['one', 'two', 'three'])\n```", "```jsx\n    return (\n        <div>\n            <p>current array: {JSON.stringify(value)}</p>\n```", "```jsx\n            <button onClick={() => add('test')}>add element</button>\n```", "```jsx\n            <button onClick={() => removeIndex(0)}>remove first element</button>\n```", "```jsx\n            <button onClick={() => clear()}>clear elements</button>\n        </div>\n    )\n}\n```", "```jsx\nimport React from 'react'\nimport { useCounter } from 'react-hookedup'\n```", "```jsx\nexport default function UseCounter () {\n    const { value, increase, decrease } = useCounter(0, { upperLimit: 3, lowerLimit: 0, loop: true })\n```", "```jsx\n    return (\n        <div>\n            <b>{value}</b>\n            <button onClick={increase}>+</button>\n            <button onClick={decrease}>-</button>\n        </div>\n    )\n}\n```", "```jsx\nimport React from 'react'\nimport { useFocus } from 'react-hookedup'\n```", "```jsx\nexport default function UseFocus () {\n    const { focused, bind } = useFocus()\n```", "```jsx\n    return (\n        <div>\n            <input {...bind} value={focused ? 'focused' : 'not focused'} />\n        </div>\n    )\n}\n```", "```jsx\nimport React from 'react'\nimport { useHover } from 'react-hookedup'\n```", "```jsx\nexport default function UseHover () {\n    const { hovered, bind } = useHover()\n```", "```jsx\n    return (\n        <div {...bind}>Hover me {hovered && 'THANKS!!!'}</div>\n    )\n}\n```", "```jsx\n> npm install --save @rehooks/window-size\n```", "```jsx\nimport useWindowSize from '@rehooks/window-size'\n```", "```jsx\n            const { innerWidth } = useWindowSize()\n```", "```jsx\n            const mobilePhone = innerWidth < 640\n```", "```jsx\n {!mobilePhone && <ChangeTheme theme={theme} setTheme={setTheme} />}\n             {!mobilePhone && <br />}\n             {!mobilePhone && <React.Suspense fallback={\"Loading...\"}>\n                 <UserBar />\n             </React.Suspense>}\n             {!mobilePhone && <br />} \n```", "```jsx\n> npm install --save use-undo\n```", "```jsx\nimport useUndo from 'use-undo'\n```", "```jsx\n    const { value: content, bindToInput: bindContent } = useInput('')\n```", "```jsx\n    const [ undoContent, {\n        set: setContent,\n        undo,\n        redo,\n        canUndo,\n        canRedo\n    } ] = useUndo('')\n```", "```jsx\n    const content = undoContent.present\n```", "```jsx\n    function handleContent (e) {\n        setContent(e.target.value)\n    }\n```", "```jsx\n            <textarea value={content} onChange={handleContent} />\n```", "```jsx\n            <button type=\"button\" onClick={undo} disabled={!canUndo}>Undo</button>\n            <button type=\"button\" onClick={redo} disabled={!canRedo}>Redo</button>\n```", "```jsx\nconst [ text, setText ] = useState('')\nconst [ value ] = useDebounce(text, 1000)\n```", "```jsx\nconst [ text, setText ] = useState('')\nconst [ debouncedSet, cancelDebounce ] = useDebouncedCallback(\n    (value) => setText(value),\n    1000\n)\n```", "```jsx\n> npm install --save use-debounce\n```", "```jsx\nimport React, { useState, useContext, useEffect } from 'react'\n```", "```jsx\nimport { useDebouncedCallback } from 'use-debounce'\n```", "```jsx\n    const [ content, setInput ] = useState('')\n```", "```jsx\n    const content = undoContent.present\n```", "```jsx\n    const [ setDebounce, cancelDebounce ] = useDebouncedCallback(\n```", "```jsx\n        (value) => {\n            setContent(value)\n        },\n```", "```jsx\n        200\n    )\n```", "```jsx\n    useEffect(() => {\n        cancelDebounce()\n        setInput(undoContent.present)\n    }, [undoContent])\n```", "```jsx\n    function handleContent (e) \n        const { value } = e.target\n        setInput(value)\n        setDebounce(value)\n    }\n```"]