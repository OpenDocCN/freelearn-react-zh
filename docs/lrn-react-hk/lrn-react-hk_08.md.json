["```jsx\n[ { **\"id\": \"react-hooks\",** \"title\": \"React Hooks\", \"content\":  \"The greatest thing since sliced bread!\", \"author\":  \"Daniel Bugl\"  }, { **\"id\": \"react-fragments\",** \"title\":  \"Using React Fragments\", \"content\":  \"Keeping the DOM tree clean!\", \"author\":  \"Daniel Bugl\"  } ]\n```", "```jsx\n[\n    { \"id\": 1, \"username\": \"Daniel Bugl\", \"password\": \"supersecure42\" }\n]\n```", "```jsx\n[\n    { \"id\": 1, \"primaryColor\": \"deepskyblue\", \"secondaryColor\": \"coral\" },\n    { \"id\": 2, \"primaryColor\": \"orchid\", \"secondaryColor\": \"mediumseagreen\" },\n    { \"id\": 3, \"primaryColor\": \"darkslategray\", \"secondaryColor\": \"slategray\" }\n]\n```", "```jsx\n{\n    \"posts\": [ { **\"id\": \"react-hooks\",** \"title\": \"React Hooks\", \"content\":  \"The greatest thing since sliced bread!\", \"author\":  \"Daniel Bugl\"  }, { **\"id\": \"react-fragments\",** \"title\":  \"Using React Fragments\", \"content\":  \"Keeping the DOM tree clean!\", \"author\":  \"Daniel Bugl\"  }\n ],\n    \"users\": [\n        { \"id\": 1, \"username\": \"Daniel Bugl\", \"password\": \"supersecure42\" }\n    ],\n    \"themes\": [\n        { \"id\": 1, \"primaryColor\": \"deepskyblue\", \"secondaryColor\": \"coral\" },\n        { \"id\": 2, \"primaryColor\": \"orchid\", \"secondaryColor\": \"mediumseagreen\" },\n        { \"id\": 3, \"primaryColor\": \"darkslategray\", \"secondaryColor\": \"slategray\" }\n    ]\n}\n```", "```jsx\n> npm install --save json-server\n```", "```jsx\n>npx json-server --watch server/db.json\n```", "```jsx\n    \"scripts\": {\n        \"start:server\": \"npx json-server --watch server/db.json --port 4000\",\n        \"start\": \"react-scripts start\",\n```", "```jsx\n    \"scripts\": {\n        \"start:server\": \"npx json-server --watch server/db.json\",\n        \"start:client\": \"react-scripts start\",\n```", "```jsx\n> npm install --save concurrently\n```", "```jsx\n    \"scripts\": {\n \"start\": \"npx concurrently \\\"npm run start:server\\\" \\\"npm run start:client\\\"\",\n```", "```jsx\n> npm install --save http-proxy-middleware\n```", "```jsx\nconst proxy = require('http-proxy-middleware')\n\nmodule.exports = function (app) {\n    app.use(proxy('/api', {\n```", "```jsx\n        target: 'http://localhost:4000',\n```", "```jsx\n        pathRewrite: { '^/api': '' }\n    }))\n}\n```", "```jsx\n> npm start\n```", "```jsx\n{\n    \"/login/:username/:password\": \"/users?username=:username&password=:password\"\n}\n```", "```jsx\n        \"start:server\": \"npx json-server --watch server/db.json --port 4000 --routes server/routes.json\",\n```", "```jsx\nimport React, { useEffect, useState } from 'react'\n```", "```jsx\nconst  THEMES  = [ { primaryColor:  'deepskyblue', secondaryColor:  'coral'  }, { primaryColor:  'orchid', secondaryColor:  'mediumseagreen'  } ] \n```", "```jsx\nexport default function ChangeTheme ({ theme, setTheme }) {\n const [ themes, setThemes ] = useState([])\n```", "```jsx\n    useEffect(() => {\n```", "```jsx\n        fetch('/api/themes')\n```", "```jsx\n            .then(result => result.json())\n```", "```jsx\n            .then(themes => setThemes(themes))\n```", "```jsx\n    }, [])\n```", "```jsx\n            {themes.map(t =>\n```", "```jsx\nconst  defaultPosts  = [ { title:  'React Hooks', content:  'The greatest thing since sliced bread!', author:  'Daniel Bugl'  }, { title:  'Using React Fragments', content:  'Keeping the DOM tree clean!', author:  'Daniel Bugl'  } ]\n```", "```jsx\n const  [  state,  dispatch  ]  =  useReducer(appReducer,  { user:  '', posts:  []  })\n```", "```jsx\nfunction postsReducer (state, action) {\n    switch (action.type) {\n case 'FETCH_POSTS':\n return action.posts\n```", "```jsx\n    useEffect(() => {\n```", "```jsx\n        fetch('/api/posts')\n            .then(result => result.json())\n```", "```jsx\n            .then(posts => dispatch({ type: 'FETCH_POSTS', posts }))\n```", "```jsx\n    }, [])\n```", "```jsx\n>npm install --save react-request-hook axios\n```", "```jsx\nimport { RequestProvider } from 'react-request-hook'\nimport axios from 'axios'\n```", "```jsx\nconst axiosInstance = axios.create({\n    baseURL: 'http://localhost:3000/api/'\n})\n```", "```jsx\nReactDOM.render(<App />, document.getElementById('root'));\n```", "```jsx\nReactDOM.render(\n    <RequestProvider value={axiosInstance}>\n        <App />\n    </RequestProvider>,\n    document.getElementById('root')\n)\n```", "```jsx\nimport { useResource } from 'react-request-hook'\n```", "```jsx\nexport default function ChangeTheme ({ theme, setTheme }) {\n const [ themes, getThemes ] = useResource(() => ({\n```", "```jsx\n        url: '/themes',\n        method: 'get'\n    }))\n```", "```jsx\n    const { data, isLoading } = themes\n```", "```jsx\n    useEffect(getThemes, [])\n```", "```jsx\n            {isLoading && ' Loading themes...'}\n```", "```jsx\n            {data && data.map(t =>\n```", "```jsx\nimport { useResource } from 'react-request-hook'\n```", "```jsx\n    const [ posts, getPosts ] = useResource(() => ({\n        url: '/posts',\n        method: 'get'\n    }))\n```", "```jsx\n    useEffect(getPosts, [])\n```", "```jsx\n    useEffect(() => {\n        if (posts && posts.data) {\n            dispatch({ type: 'FETCH_POSTS', posts: posts.data })\n        }\n```", "```jsx\n    }, [posts])\n```", "```jsx\nfunction errorReducer (state, action) {\n    switch (action.type) {\n        case 'POSTS_ERROR':\n            return 'Failed to fetch posts'\n\n        default:\n            return state\n    }\n}\n```", "```jsx\nexport default function appReducer (state, action) {\n    return {\n        user: userReducer(state.user, action),\n        posts: postsReducer(state.posts, action),\n error: errorReducer(state.error, action)\n    }\n}\n```", "```jsx\n    const [ state, dispatch ] = useReducer(appReducer, { user: '', posts: [], error: '' })\n```", "```jsx\n    const { user, error } = state\n```", "```jsx\n    useEffect(() => {\n if (posts && posts.error) {\n dispatch({ type: 'POSTS_ERROR' })\n }\n        if (posts && posts.data) {\n            dispatch({ type: 'FETCH_POSTS', posts: posts.data })\n        }\n    }, [posts])\n```", "```jsx\n {error && <b>{error}</b>}\n                 <PostList />\n```", "```jsx\nimport { useResource } from 'react-request-hook'\n```", "```jsx\n    const [ , createPost ] = useResource(({ title, content, author }) => ({\n        url: '/posts',\n        method: 'post',\n        data: { title, content, author }\n    }))\n```", "```jsx\n    function handleCreate () {\n createPost({ title, content, author: user })\n        dispatch({ type: 'CREATE_POST', title, content, author: user })\n    }\n```", "```jsx\n        if (posts && posts.data) {\n            dispatch({ type: 'FETCH_POSTS', posts: posts.data.reverse() })\n        }\n```", "```jsx\nimport React, { useState, useContext, useEffect } from 'react'\nimport { useResource } from 'react-request-hook'\n```", "```jsx\n    const [ user, register ] = useResource((username, password) => ({\n        url: '/users',\n        method: 'post',\n        data: { username, password }\n    }))\n```", "```jsx\n    useEffect(() => {\n        if (user && user.data) {\n            dispatch({ type: 'REGISTER', username: user.data.username })\n        }\n    }, [user])\n```", "```jsx\n        <form onSubmit={e => { e.preventDefault(); register(username, password) }}>\n```", "```jsx\nimport React, { useState, useContext, useEffect } from 'react'\nimport { useResource } from 'react-request-hook'\n```", "```jsx\n    const [ loginFailed, setLoginFailed ] = useState(false)\n```", "```jsx\n    const [ password, setPassword ] = useState('')\n```", "```jsx\n    function handlePassword (evt) {\n        setPassword(evt.target.value)\n    }\n```", "```jsx\n            <input type=\"password\" value={password} onChange={handlePassword} name=\"login-username\" id=\"login-username\" />\n```", "```jsx\n    const [ user, login ] = useResource((username, password) => ({\n        url: `/login/${encodeURI(username)}/${encodeURI(password)}`,\n        method: 'get'\n    }))\n```", "```jsx\n    useEffect(() => {\n        if (user && user.data) {\n```", "```jsx\n            if (user.data.length > 0) {\n                setLoginFailed(false)\n                dispatch({ type: 'LOGIN', username: user.data[0].username })\n            } else {\n```", "```jsx\n                setLoginFailed(true)\n            }\n        }\n```", "```jsx\n        if (user && user.error) {\n            setLoginFailed(true)\n        }\n```", "```jsx\n    }, [user])\n```", "```jsx\n <form onSubmit={e => { e.preventDefault(); login(username, password**)** }}>\n```", "```jsx\n            {loginFailed && <span style={{ color: 'red' }}>Invalid username or password</span>}\n```", "```jsx\nconst SomeComponent = () => ...\n\nexport default React.memo(SomeComponent)\n```", "```jsx\nexport default React.memo(SomeComponent, (prevProps, nextProps) => {\n    // compare props and return true if the props are equal and we should not update\n})\n```", "```jsx\nexport default function Post ({ title, content, author }) {\n console.log('rendering Post')\n```", "```jsx\nexport default function Post ({ title, content, author }) {\n```", "```jsx\nexport default React.memo(Post)\n```", "```jsx\nexport  default  React.memo(Post, (prev,  next)  =>  prev.title ===  next.title && prev.content === next.content && prev.author === next.author ) \n```", "```jsx\n                    <React.Suspense fallback={\"Loading...\"}>\n                        <UserBar />\n                    </React.Suspense>\n```", "```jsx\nimport Logout from './Logout'\n```", "```jsx\nconst Logout = React.lazy(() => import('./Logout'))\n```"]