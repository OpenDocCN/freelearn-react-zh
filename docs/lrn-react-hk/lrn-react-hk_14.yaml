- en: Migrating from React Class Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从React类组件迁移
- en: In the previous chapter we learned how to build our own Hooks by extracting
    custom Hooks from existing code. Then, we used our own Hooks in the blog app and
    learned about local Hooks and the interactions between Hooks. Finally, we learned
    how to write tests for Hooks using the React Hooks Testing Library, and implemented
    tests for our custom Hooks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何通过从现有代码中提取自定义Hooks来构建我们自己的Hooks。然后，我们在博客应用程序中使用了我们自己的Hooks，并学习了本地Hooks和Hooks之间的交互。最后，我们学习了如何使用React
    Hooks测试库为Hooks编写测试，并为我们的自定义Hooks实现了测试。
- en: In this chapter, we are going to start by implementing a ToDo app using React
    class components. In the next step, we are going to learn how to migrate an existing
    React class component application to Hooks. Seeing the differences between function
    components using Hooks and class components in practice will deepen our understanding
    about the trade-offs of using either solution. Furthermore, by the end of this
    chapter we will be able to migrate existing React applications to Hooks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先使用React类组件实现一个待办事项应用程序。接下来，我们将学习如何将现有的React类组件应用程序迁移到Hooks。在实践中看到使用Hooks的函数组件和类组件之间的差异将加深我们对使用任一解决方案的权衡的理解。此外，到本章结束时，我们将能够将现有的React应用程序迁移到Hooks。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Handling state with class components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类组件处理状态
- en: Migrating an app from class components to Hooks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从类组件迁移应用程序到Hooks
- en: Learning about the trade-offs of class components versus Hooks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解类组件与Hooks的权衡
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 应该已经安装了相当新的Node.js版本（v11.12.0或更高版本）。还需要安装Node.js的`npm`包管理器。
- en: The code for this chapter can be found on the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter11](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter11).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在GitHub存储库中找到：[https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter11](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter11)。
- en: 'Check out the following video to see the code in action:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that have been provided. It is important that
    you write the code yourself in order to be able to learn and understand properly.
    However, if you run into any issues, you can always refer to the code example.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，强烈建议您自己编写代码。不要简单地运行提供的代码示例。重要的是您自己编写代码，以便能够正确学习和理解。但是，如果遇到任何问题，您可以随时参考代码示例。
- en: Now, let's get started with the chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始本章。
- en: Handling state with class components
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类组件处理状态
- en: Before we start migrating from class components to Hooks, we are going to create
    a small ToDo list app using React class components. In the next section, we are
    going to turn these class components into function components using Hooks. Finally,
    we are going to compare the two solutions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始从类组件迁移到Hooks之前，我们将使用React类组件创建一个小型的待办事项列表应用程序。在下一节中，我们将使用Hooks将这些类组件转换为函数组件。最后，我们将比较这两种解决方案。
- en: Designing the app structure
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计应用程序结构
- en: 'As we did before with the blog app, we are going to start by thinking about
    the basic structure of our app. For this app, we are going to need the following
    features:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前在博客应用程序中所做的一样，我们将首先考虑我们应用程序的基本结构。对于这个应用程序，我们将需要以下功能：
- en: A header
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个标题
- en: A way to add new todo items
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新待办事项的方法
- en: A way to show all todo items in a list
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以列表的方式显示所有待办事项
- en: A filter for the todo items
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 待办事项的筛选器
- en: 'It is always a good idea to start with a mock-up. So, let''s begin:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从模拟开始总是一个好主意。所以，让我们开始吧：
- en: 'We start by drawing a mock-up of an interface for our ToDo app:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先绘制一个ToDo应用程序界面的模拟：
- en: '![](assets/cb6fb71f-d7d3-49d9-aa60-9f8a1f4908bd.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cb6fb71f-d7d3-49d9-aa60-9f8a1f4908bd.png)'
- en: Mock-up of our ToDo app
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的ToDo应用程序的模拟
- en: 'Next, we define the fundamental components, in a similar way to how we did
    it with the blog app:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们以类似的方式定义基本组件，就像我们在博客应用程序中所做的那样：
- en: '![](assets/d6cb7c71-175a-45ca-a341-a92bd7d43a81.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d6cb7c71-175a-45ca-a341-a92bd7d43a81.png)'
- en: Defining fundamental components in our app mock-up
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们应用程序的模拟中定义基本组件
- en: 'Now we can define the container components:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以定义容器组件：
- en: '![](assets/c3499ce0-7f78-450f-9eca-e257c62eeef5.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3499ce0-7f78-450f-9eca-e257c62eeef5.png)'
- en: Defining container components in our app mock-up
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们应用程序的模拟中定义容器组件
- en: 'As we can see, we are going to need the following components:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们将需要以下组件：
- en: '`App`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App`'
- en: '`Header`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题
- en: '`AddTodo`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加待办事项
- en: '`TodoList`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoList`'
- en: '`TodoItem`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoItem`'
- en: '`TodoFilter (+ TodoFilterItem)`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoFilter（+ TodoFilterItem）`'
- en: The `TodoList` component makes use of a `TodoItem` component, which is used
    to show an item, with a checkbox to complete and a button to remove it. The `TodoFilter`
    component internally uses a `TodoFilterItem` component to show the various filters.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`TodoList`组件使用`TodoItem`组件，用于显示一个带有复选框完成和删除按钮的项目。`TodoFilter`组件内部使用`TodoFilterItem`组件来显示各种筛选器。'
- en: Initializing the project
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化项目
- en: 'We are going to use `create-react-app` in order to create a new project. Let''s
    initialize the project now:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`create-react-app`来创建一个新项目。让我们现在初始化项目：
- en: 'Run the following command:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then, remove `src/App.css`, as we are not going to need it.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，删除`src/App.css`，因为我们不需要它。
- en: 'Next, edit `src/index.css`, and adjust the margin as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，编辑`src/index.css`，并调整边距如下：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Finally, remove the current `src/App.js` file, as we are going to create a new
    one in the next step.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，删除当前的`src/App.js`文件，因为我们将在下一步创建一个新的文件。
- en: Now, our project has been initialized, and we can start defining the app structure.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的项目已经初始化，我们可以开始定义应用程序结构。
- en: Defining the app structure
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义应用程序结构
- en: 'We already know what the basic structure of our app is going to be like from
    the mock-up, so let''s start by defining the `App` component:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从模拟中知道了我们的应用程序的基本结构，所以让我们从定义`App`组件开始：
- en: Create a new `src/App.js` file.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/App.js`文件。
- en: 'Import `React` and the `Header`, `AddTodo`, `TodoList`, and `TodoFilter` components:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`React`和`Header`，`AddTodo`，`TodoList`和`TodoFilter`组件：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now define the `App` component as a class component. For now, we are only going
    to define the `render` method:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将`App`组件定义为类组件。现在，我们只会定义`render`方法：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `App` component defines the basic structure of our app. It will consist
    of a header, a way to add new todo items, a list of todo items, and a filter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`App`组件定义了我们应用程序的基本结构。它将包括一个标题，一种添加新待办事项的方法，待办事项列表和一个筛选器。'
- en: Defining the components
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义组件
- en: 'Now, we are going to define the components as static components. Later in this
    chapter, we are going to implement dynamic functionality to them. For now, we
    are going to implement the following static components:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将定义组件作为静态组件。在本章的后面，我们将为它们实现动态功能。现在，我们将实现以下静态组件：
- en: '`Header`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题
- en: '`AddTodo`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加待办事项
- en: '`TodoList`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoList`'
- en: '`TodoItem`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoItem`'
- en: '`TodoFilter`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoFilter`'
- en: Let's get started implementing the components now.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始实现这些组件。
- en: Defining the Header component
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义标题组件
- en: 'We are going to start with the `Header` component, as it is the most simple
    out of all the components:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`Header`组件开始，因为它是所有组件中最简单的：
- en: Create a new `src/Header.js` file.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/Header.js`文件。
- en: 'Import `React` and define the class component with a `render` method:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`React`并定义带有`render`方法的类组件：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, the `Header` component for our app is defined.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经定义了应用程序的`Header`组件。
- en: Defining the AddTodo component
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义AddTodo组件
- en: Next, we are going to define the `AddTodo` component, which renders an `input`
    field and a button.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义`AddTodo`组件，它渲染一个`input`字段和一个按钮。
- en: 'Let''s implement the `AddTodo` component now:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现`AddTodo`组件：
- en: Create a new `src/AddTodo.js` file.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/AddTodo.js`文件。
- en: 'Import `React` and define the class component and a `render` method:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`React`并定义类组件和`render`方法：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `render` method, we return a `form` that contains an `input` field and
    an add button:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`render`方法中，我们返回一个包含`input`字段和添加按钮的`form`：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we can see, the `AddTodo` component consists of an `input` field and a button.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`AddTodo`组件由一个`input`字段和一个按钮组成。
- en: Defining the TodoList component
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义TodoList组件
- en: Now, we define the `TodoList` component, which is going to make use of the `TodoItem`
    component. For now, we are going to statically define two todo items in this component.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们定义了`TodoList`组件，它将使用`TodoItem`组件。目前，我们将在这个组件中静态地定义两个待办事项。
- en: 'Let''s start defining the `TodoList` component:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始定义`TodoList`组件：
- en: Create a new `src/TodoList.js` file.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/TodoList.js`文件。
- en: 'Import `React` and the `TodoItem` component:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`React`和`TodoItem`组件：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, define the class component and a `render` method:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义类组件和`render`方法：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this `render` method, we statically define two todo items:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个`render`方法中，我们静态地定义了两个待办事项：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we are going to render the items using the `map` function:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将使用`map`函数来渲染项目：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we can see, the `TodoList` component renders a list of `TodoItem` components.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`TodoList`组件渲染了一系列`TodoItem`组件。
- en: Defining the TodoItem component
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义TodoItem组件
- en: After defining the `TodoList` component, we are now going to define the `TodoItem`
    component, in order to render single items.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了`TodoList`组件之后，我们现在将定义`TodoItem`组件，以便渲染单个项目。
- en: 'Let''s start defining the `TodoItem` component:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始定义`TodoItem`组件：
- en: Create a new `src/TodoItem.js` component.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/TodoItem.js`组件。
- en: 'Import `React`, and define the component, as well as the `render` method:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`React`，并定义组件，以及`render`方法：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we are going to use destructuring in order to get the `title` and `completed`
    props:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用解构来获取`title`和`completed`属性：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, we are going to render a `div` element containing a `checkbox`, a `title`,
    and a `button` to delete the item:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将渲染一个包含`checkbox`、`title`和`button`的`div`元素来删除项目：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `TodoItem` component consists of a checkbox, a `title`, and a `button` to
    delete the item.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`TodoItem`组件由一个复选框、`title`和一个删除项目的`button`组成。'
- en: Defining the TodoFilter component
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义TodoFilter组件
- en: Finally, we are going to define the `TodoFilter` component. In the same file,
    we are going to define another component for the `TodoFilterItem`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将定义`TodoFilter`组件。在同一个文件中，我们将为`TodoFilterItem`定义另一个组件。
- en: 'Let''s start defining the `TodoFilterItem` and `TodoFilter` components:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始定义`TodoFilterItem`和`TodoFilter`组件：
- en: Create a new `src/TodoFilter.js` file.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/TodoFilter.js`文件。
- en: 'Define a class component for the `TodoFilterItem`:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`TodoFilterItem`定义一个类组件：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this `render` method, we use destructuring in order to get the `name` prop:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个`render`方法中，我们使用解构来获取`name`属性：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we are going to define an object for the `style`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为`style`定义一个对象：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, we return a `span` element with the `name` value of the filter, and use
    the defined `style` object:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们返回一个带有过滤器`name`值的`span`元素，并使用定义的`style`对象：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, we can define the actual `TodoFilter` component, which is going to
    render three `TodoFilterItem` components, as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以定义实际的`TodoFilter`组件，它将呈现三个`TodoFilterItem`组件，如下所示：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we have a component that lists the three different filter possibilities:
    `all`, `active`, and `completed`.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个列出三种不同过滤可能性的组件：`all`，`active`和`completed`。
- en: Implementing dynamic code
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现动态代码
- en: Now that we have defined all of the static components, our app should look just
    like the mock-up. The next step is to implement dynamic code using React state,
    life cycle, and handler methods.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了所有静态组件，我们的应用程序应该看起来像模拟一样。下一步是使用React状态、生命周期和处理程序方法实现动态代码。
- en: 'In this section, we are going to do the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将执行以下操作：
- en: Define a mock API
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义模拟API
- en: Define a `StateContext`
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个`StateContext`
- en: Make the `App` component dynamic
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使`App`组件动态化
- en: Make the `AddTodo` component dynamic
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使`AddTodo`组件动态化
- en: Make the `TodoList` component dynamic
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使`TodoList`组件动态化
- en: Make the `TodoItem` component dynamic
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使`TodoItem`组件动态化
- en: Make the `TodoFilter` component dynamic
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使`TodoFilter`组件动态化
- en: Let's get started.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始。
- en: Defining the API code
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义API代码
- en: First of all, we are going to define an API that will fetch todo items. In our
    case, we are simply going to return an array of todo items, after a short delay.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将定义一个API，用于获取待办事项。在我们的情况下，我们将简单地在短暂延迟后返回一个待办事项数组。
- en: 'Let''s start implementing the mock API:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始实现模拟API：
- en: Create a new `src/api.js` file.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/api.js`文件。
- en: 'We are going to define a function that will generate a random ID for our todo
    items based on the **Universally Unique Identifier** (**UUID**) function:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将定义一个函数，根据**通用唯一标识符**（**UUID**）函数生成我们待办事项的随机ID：
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, we define the `fetchAPITodos` function, which returns a `Promise`, which
    resolves after a short delay:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义了`fetchAPITodos`函数，它返回一个`Promise`，在短暂延迟后解析：
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, we have a function that simulates fetching todo items from an API, by returning
    an array after a delay of `100` ms.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个函数，模拟从API获取待办事项，通过在`100`毫秒延迟后返回一个数组。
- en: Defining the StateContext
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义StateContext
- en: Next, we are going to define a context that will keep our current list of todo
    items. We are going to call this context `StateContext`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义一个上下文，用于保存我们当前的待办事项列表。我们将称此上下文为`StateContext`。
- en: 'Let''s start implementing the `StateContext` now:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在开始实现`StateContext`：
- en: Create a new `src/StateContext.js` file.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/StateContext.js`文件。
- en: 'Import `React`, as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`React`，如下所示：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, define the `StateContext` and set an empty array as the fallback value:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，定义`StateContext`并将空数组设置为回退值：
- en: '[PRE22]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, export the `StateContext`:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，导出`StateContext`：
- en: '[PRE23]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, we have a context where we can store our array of todo items.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个上下文，可以在其中存储我们的待办事项数组。
- en: Making the App component dynamic
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使App组件动态化
- en: We are now going to make the `App` component dynamic by adding functionality
    to fetch, add, toggle, filter, and remove todo items. Furthermore, we are going
    to define a `StateContext` provider.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过添加功能来获取、添加、切换、过滤和删除待办事项，使`App`组件动态化。此外，我们将定义一个`StateContext`提供程序。
- en: 'Let''s start making the `App` component dynamic:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使`App`组件动态化：
- en: 'In `src/App.js`, import the `StateContext`, after the other import statements:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/App.js`中，在其他导入语句之后导入`StateContext`：
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, import the `fetchAPITodos` and `generateID` functions from the `src/api.js`
    file:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从`src/api.js`文件导入`fetchAPITodos`和`generateID`函数：
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, we are going to modify our `App` class code, implementing a `constructor`,
    which will set the initial state:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将修改我们的`App`类代码，实现一个`constructor`，它将设置初始状态：
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In this `constructor`, we need to first call `super`, to make sure that the
    parent class (`React.Component`) constructor gets called, and the component gets
    initialized properly:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个`constructor`中，我们需要首先调用`super`，以确保父类（`React.Component`）的构造函数被调用，并且组件得到正确初始化：
- en: '[PRE27]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we can set the initial state by setting `this.state`. Initially, there
    will be no todo items, and the `filter` value will be set to `''all''`:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过设置`this.state`来设置初始状态。最初，没有待办事项，`filter`值将设置为`'all'`：
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, we define the `componentDidMount` life cycle method, which is going to
    fetch todo items when the component first renders:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义`componentDidMount`生命周期方法，该方法将在组件首次渲染时获取待办事项：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, we are going to define the actual `fetchTodos` method, which in our case,
    is simply going to set the state, because we are not going to connect this simple
    app to a backend. We are also going to call `this.filterTodos()` in order to update
    the `filteredTodos` array after fetching todos:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将定义实际的`fetchTodos`方法，在我们的情况下，它只是设置状态，因为我们不打算将这个简单的应用程序连接到后端。我们还将调用`this.filterTodos()`来在获取待办事项后更新`filteredTodos`数组：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, we define the `addTodo` method, which creates a new item, and adds it
    to the state array, similar to what we did in our blog app using Hooks:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义`addTodo`方法，它创建一个新项目，并将其添加到状态数组中，类似于我们在博客应用中使用Hooks所做的操作：
- en: '[PRE31]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, we define the `toggleTodo` method, which uses the `map` function to find
    and modify a certain todo item:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义`toggleTodo`方法，该方法使用`map`函数来查找和修改特定的待办事项：
- en: '[PRE32]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, we define the `removeTodo` method, which uses the `filter` function to
    find and remove a certain todo item:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们定义`removeTodo`方法，该方法使用`filter`函数来查找并删除特定的待办事项：
- en: '[PRE33]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then, we define a method to apply a certain `filter` to our todo items:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义一个方法来对我们的待办事项应用特定的`filter`：
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, we can define the `filterTodos` method, which is going to call the `applyFilter`
    method, and update the `filteredTodos` array and the `filter` value:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以定义`filterTodos`方法，该方法将调用`applyFilter`方法，并更新`filteredTodos`数组和`filter`值：
- en: '[PRE35]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We are using `filterTodos` in order to re-filter todos after adding/removing
    items, as well as changing the filter. To allow both functionalities to work correctly,
    we need to check whether the `filter` argument, `filterArg`, was passed. If not,
    we fall back to the current `filter` argument from the `state`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`filterTodos`来在添加/删除项目以及更改过滤器后重新过滤待办事项，为了使这两个功能都能正常工作，我们需要检查是否传递了`filter`参数`filterArg`。如果没有，我们将退回到`state`中的当前`filter`参数。
- en: 'Then, we adjust the `render` method in order to use state to provide a value
    for the `StateContext`, and we pass certain methods to the components:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们调整`render`方法，以使用状态为`StateContext`提供一个值，并将某些方法传递给组件：
- en: '[PRE36]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, we need to re-bind `this` to the class, so that we can pass the methods
    to our components without the `this` context changing. Adjust the `constructor`
    as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要重新绑定`this`到类，以便我们可以将方法传递给我们的组件，而不会改变`this`上下文。调整`constructor`如下：
- en: '[PRE37]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now, our `App` component can dynamically fetch, add, toggle, remove, and filter
    todo items. As we can see, when we use class components, we need to re-bind the
    `this` context of the handler functions to the class.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`App`组件可以动态地获取、添加、切换、删除和过滤待办事项。正如我们所看到的，当我们使用类组件时，我们需要重新绑定处理程序函数的`this`上下文到类。
- en: Making the AddTodo component dynamic
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使AddTodo组件动态化
- en: After making our `App` component dynamic, it is time to make all of our other
    components dynamic as well. We are going to start from the top, with the `AddTodo`
    component.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在使我们的`App`组件动态化之后，现在是时候使我们的所有其他组件也动态化了。我们将从顶部开始，从`AddTodo`组件开始。
- en: 'Let''s make the `AddTodo` component dynamic now:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让`AddTodo`组件动态化：
- en: 'In `src/AddTodo.js`, we first define a `constructor`, which sets the initial
    `state` for the `input` field:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/AddTodo.js`中，我们首先定义了一个`constructor`，它为`input`字段设置了初始`state`：
- en: '[PRE38]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, we define a method for handling changes in the `input` field:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义一个处理`input`字段变化的方法：
- en: '[PRE39]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, we are going to define a method that can handle a new todo item being
    added:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将定义一个可以处理添加新待办事项的方法：
- en: '[PRE40]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, we can assign the state value and handler methods to the `input` field
    and button:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以将状态值和处理程序方法分配给`input`字段和按钮：
- en: '[PRE41]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, we need to adjust the `constructor` in order to re-bind the `this`
    context for all of the handler methods:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要调整`constructor`以重新绑定所有处理程序方法的`this`上下文：
- en: '[PRE42]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Now, our `AddTodo` component will show a disabled button as long as no text
    is entered. When activated, clicking the button will trigger the `handleAdd` function
    that has been passed down from the `App` component.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`AddTodo`组件将在没有输入文本时显示禁用的按钮。激活后，单击按钮将触发从`App`组件传递下来的`handleAdd`函数。
- en: Making the TodoList component dynamic
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使TodoList组件动态
- en: The next component in our ToDo app is the `TodoList` component. Here, we just
    need to get the todo items from the `StateContext`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们ToDo应用程序中的下一个组件是`TodoList`组件。在这里，我们只需要从`StateContext`中获取待办事项。
- en: 'Let''s make the `TodoList` component dynamic now:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们让`TodoList`组件变得动态起来：
- en: 'In `src/TodoList.js`, we first import the `StateContext`, below the `TodoItem`
    import statement:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/TodoList.js`中，我们首先导入`StateContext`，在`TodoItem`导入语句下面：
- en: '[PRE43]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, we set the `contextType` to the `StateContext`, which will allow us to
    access the context via `this.context`:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将`contextType`设置为`StateContext`，这将允许我们通过`this.context`访问上下文：
- en: '[PRE44]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'With class components, if we want to use multiple contexts, we have to use
    the `StateContext.Consumer` component, as follows: `<StateContext.Consumer>{value
    => <div>State is: {value}</div>}</StateContext.Consumer>`.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '使用类组件，如果我们想要使用多个上下文，我们必须使用`StateContext.Consumer`组件，如下所示：`<StateContext.Consumer>{value
    => <div>State is: {value}</div>}</StateContext.Consumer>`。'
- en: As you can imagine, using multiple contexts like this, will result in a very
    deep component tree (wrapper hell), and our code will be hard to read and refactor.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所想象的那样，像这样使用多个上下文将导致非常深的组件树（包装器地狱），我们的代码将很难阅读和重构。
- en: 'Now, we can get the items from `this.context` instead of statically defining
    them:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以从`this.context`中获取项目，而不是静态定义它们：
- en: '[PRE45]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Finally, we pass all props to the `TodoItem` component so that we can use the
    `removeTodo` and `toggleTodo` methods there:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将所有props传递给`TodoItem`组件，以便我们可以在那里使用`removeTodo`和`toggleTodo`方法：
- en: '[PRE46]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Now, our `TodoList` component gets the items from the `StateContext` instead
    of statically defining them.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`TodoList`组件从`StateContext`中获取项目，而不是静态定义它们。
- en: Making the TodoItem component dynamic
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使TodoItem组件动态
- en: Now that we have passed on the `removeTodo` and `toggleTodo` methods as props
    to the `TodoItem` component, we can implement these features there.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将`removeTodo`和`toggleTodo`方法作为props传递给了`TodoItem`组件，我们可以在那里实现这些功能。
- en: 'Let''s make the `TodoItem` component dynamic now:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让`TodoItem`组件变得动态起来：
- en: 'In `src/TodoItem.js`, we start by defining the handler methods for the `toggleTodo`
    and `removeTodo` functions:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/TodoItem.js`中，我们首先定义了`toggleTodo`和`removeTodo`函数的处理程序方法：
- en: '[PRE47]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Then, we assign the handler methods to the `checkbox` and `button`, respectively:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们分别将处理程序方法分配给`checkbox`和`button`：
- en: '[PRE48]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Finally, we need to re-bind the `this` context for the handler methods. Create
    a new `constructor`, as follows:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要重新绑定处理程序方法的`this`上下文。创建一个新的`constructor`，如下所示：
- en: '[PRE49]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Now, the `TodoItem` component triggers the toggle and remove handler functions.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`TodoItem`组件触发了切换和删除处理程序函数。
- en: Making the TodoFilter component dynamic
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使TodoFilter组件动态
- en: Lastly, we are going to use the `filterTodos` method to dynamically filter our
    todo item list.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用`filterTodos`方法动态过滤我们的待办事项列表。
- en: 'Let''s start making the `TodoFilter` component dynamic:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使`TodoFilter`组件动态：
- en: 'In `src/TodoFilter.js`, in the `TodoFilter` class, we pass all props down to
    the `TodoFilterItem` components:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/TodoFilter.js`中，在`TodoFilter`类中，我们将所有props传递给`TodoFilterItem`组件：
- en: '[PRE50]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In `src/TodoFilter.js`, in the `TodoFilterItem` class, we first define a handler
    method for setting the filter:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/TodoFilter.js`中，在`TodoFilterItem`类中，我们首先定义一个用于设置过滤器的处理方法：
- en: '[PRE51]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We then get the `filter` prop from `TodoFilter`:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们从`TodoFilter`中获取`filter` prop：
- en: '[PRE52]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Next, we use the `filter` prop to display the currently selected filter in `bold`:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用`filter` prop来以`bold`显示当前选定的过滤器：
- en: '[PRE53]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then, we bind the handler method—via `onClick`—to the filter item:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过`onClick`将处理方法绑定到过滤器项：
- en: '[PRE54]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Finally, we create a new `constructor` for the `TodoFilterItem` class, and
    re-bind the `this` context of the handler method:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们为`TodoFilterItem`类创建一个新的`constructor`，并重新绑定处理方法的`this`上下文：
- en: '[PRE55]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Now, our `TodoFilter` component triggers the `handleFilter` method in order
    to change the filter. Our whole app is dynamic now, and we can use all of its
    functionalities.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`TodoFilter`组件触发`handleFilter`方法以更改过滤器。现在我们的整个应用程序是动态的，我们可以使用其所有功能。
- en: Example code
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码
- en: The example code can be found in the `Chapter11/chapter11_1` folder.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码可以在`Chapter11/chapter11_1`文件夹中找到。
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application, then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行`npm install`来安装所有依赖项，然后运行`npm start`启动应用程序，然后在浏览器中访问`http://localhost:3000`（如果没有自动打开）。
- en: Migrating from React class components
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从React类组件迁移
- en: After setting up our example project with React class components, we are now
    going to migrate this project to React Hooks. We are going to show how to migrate
    side effects, such as fetching todos when the component mounts, as well as state
    management, which we used for the inputs.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用React类组件设置示例项目之后，我们现在将把这个项目迁移到React Hooks。我们将展示如何迁移副作用，比如在组件挂载时获取待办事项，以及我们用于输入的状态管理。
- en: 'In this section, we are going to migrate the following components:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将迁移以下组件：
- en: '`TodoItem`'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoItem`'
- en: '`TodoList`'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoList`'
- en: '`TodoFilterItem`'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoFilterItem`'
- en: '``TodoFilter``'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``TodoFilter``'
- en: '`AddTodo`'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AddTodo`'
- en: '`App`'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App`'
- en: Migrating the TodoItem component
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移TodoItem组件
- en: One of the simplest components to migrate is the `TodoItem` component. It does
    not use any state or side effects so we can simply convert it to a function component.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的组件之一要迁移的是`TodoItem`组件。它不使用任何状态或副作用，因此我们可以简单地将其转换为函数组件。
- en: 'Let''s start migrating the `TodoItem` component:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始迁移`TodoItem`组件：
- en: Edit `src/TodoItem.js` and remove the class component code. We are going to
    define a function component instead now.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/TodoItem.js`并删除类组件代码。现在我们将定义一个函数组件。
- en: 'We start by defining the function, which accepts five props—the `title` value,
    the `completed` boolean, the `id` value, the `toggleTodo` function, and the `removeTodo`
    function:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先定义一个函数，它接受五个props——`title`值、`completed`布尔值、`id`值、`toggleTodo`函数和`removeTodo`函数：
- en: '[PRE56]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Next, we define our two handler functions:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义我们的两个处理函数：
- en: '[PRE57]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Finally, we return JSX code in order to render our component:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们返回JSX代码以渲染我们的组件：
- en: '[PRE58]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Try to keep your function components small, and combine them by creating new
    function components that wrap them. It is always a good idea to have many small
    components, rather than one large component. They are much easier to maintain,
    reuse, and refactor.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试保持函数组件的规模较小，并通过创建包装它们的新函数组件来组合它们。拥有许多小组件而不是一个大组件总是一个好主意。它们更容易维护、重用和重构。
- en: As we can see, function components do not require us to re-bind `this`, or to
    define constructors at all. Furthermore, we do not need to destructure from `this.props`
    multiple times. We can simply define all props in the header of our function.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，函数组件不需要我们重新绑定`this`，或者根本不需要定义构造函数。此外，我们不需要多次从`this.props`中解构。我们可以简单地在函数的头部定义所有props。
- en: Migrating the TodoList component
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移TodoList组件
- en: Next, we are going to migrate the `TodoList` component, which wraps the `TodoItem`
    component. Here, we use a context, which means that we can now use a Context Hook.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要迁移包裹`TodoItem`组件的`TodoList`组件。在这里，我们使用了一个上下文，这意味着我们现在可以使用上下文Hook。
- en: 'Let''s migrate the `TodoList` component now:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们迁移`TodoList`组件：
- en: 'Edit `src/TodoList.js` and import the `useContext` Hook from React:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/TodoList.js`并从React中导入`useContext` Hook：
- en: '[PRE59]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Remove the class component code. We are going to define a function component
    instead now.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除类组件代码。我们现在要定义一个函数组件。
- en: 'We start by defining the header of our function. In this case, we do not destructure
    props, but simply store them in a `props` object:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先定义函数的头部。在这种情况下，我们不解构props，而是简单地将它们存储在一个`props`对象中：
- en: '[PRE60]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now we define the Context Hook:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们定义Context Hook：
- en: '[PRE61]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Finally, we return the list of rendered `items`, passing the `item` and `props`
    objects to it using destructuring:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们返回渲染的`items`列表，使用解构将`item`和`props`对象传递给它：
- en: '[PRE62]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: We define the `key` prop last, in order to avoid overwriting it with the destructuring
    of the `item` and `props` objects.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后定义`key`属性，以避免在解构`item`和`props`对象时覆盖它。
- en: As we can see, using contexts with Hooks is much more straightforward. We can
    simply call a function, and use the return value. No magical assignment of `this.context` or
    wrapper hell when using multiple contexts!
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，使用Hooks与上下文更加直接。我们可以简单地调用一个函数，并使用返回值。当使用多个上下文时，不需要魔术赋值`this.context`或包装地狱！
- en: Furthermore, we can see that we can gradually migrate components to React Hooks,
    and our app will still work. There is no need to migrate all components to Hooks
    at once. React class components can work well together with function React components
    that use Hooks. The only limitation is that we cannot use Hooks in class components.
    Therefore, we need to migrate a whole component at a time.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以逐步将组件迁移到React Hooks，并且我们的应用仍然可以工作。没有必要一次性将所有组件迁移到Hooks。React类组件可以很好地与使用Hooks的函数组件一起工作。唯一的限制是我们不能在类组件中使用Hooks。因此，我们需要一次迁移一个完整的组件。
- en: Migrating the TodoFilter component
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移TodoFilter组件
- en: 'Next up is the `TodoFilter` component, which is not going to use any Hooks.
    However, we are going to replace the `TodoFilterItem` and `TodoFilter` components
    with two function components: one for the `TodoFilterItem`, and one for the `TodoFilter`
    component.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`TodoFilter`组件，它不会使用任何Hooks。然而，我们将用两个函数组件替换`TodoFilterItem`和`TodoFilter`组件：一个用于`TodoFilterItem`，一个用于`TodoFilter`组件。
- en: Migrating TodoFilterItem
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移TodoFilterItem
- en: 'First of all, we are going to migrate the `TodoFilterItem` component. Let''s
    start migrating the component now:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要迁移`TodoFilterItem`组件。现在让我们开始迁移组件：
- en: Edit `src/TodoFilter.js` and remove the class component code. We are going to
    define a function component instead now.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/TodoFilter.js`并移除类组件代码。我们现在要定义一个函数组件。
- en: 'Define a function for the `TodoFilterItem` component, which is going to accept
    three props—the `name` value, the `filterTodos` function, and the `filter` value:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`TodoFilterItem`组件定义一个函数，它将接受三个props——`name`值，`filterTodos`函数和`filter`值：
- en: '[PRE63]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'In this function, we define a handler function for changing the filter:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个函数中，我们定义了一个处理器函数来改变过滤器：
- en: '[PRE64]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Next, we define a `style` object for our `span` element:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们为我们的`span`元素定义一个`style`对象：
- en: '[PRE65]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Finally, we return and render the `span` element:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们返回并渲染`span`元素：
- en: '[PRE66]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: As we can see, a function component requires much less boilerplate code than
    the corresponding class component.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，函数组件比相应的类组件需要更少的样板代码。
- en: Migrating TodoFilter
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移TodoFilter
- en: 'Now that we have migrated the `TodoFilterItem` component, we can migrate the
    `TodoFilter` component. Let''s migrate it now:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经迁移了`TodoFilterItem`组件，我们可以迁移`TodoFilter`组件。让我们现在迁移它：
- en: Edit `src/TodoFilter.js` and remove the class component code. We are going to
    define a function component instead now.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/TodoFilter.js`并删除类组件代码。我们现在要定义一个函数组件。
- en: 'Define a function for the `TodoFilter` component. We are not going to use destructuring
    on the props here:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`TodoFilter`组件定义一个函数。我们这里不会在props上使用解构：
- en: '[PRE67]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In this component, we only return and render three `TodoFilterItem` components—passing
    the `props` down to them:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个组件中，我们只返回和渲染三个`TodoFilterItem`组件 - 将props传递给它们：
- en: '[PRE68]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Now, our `TodoFilter` component has been successfully migrated.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`TodoFilter`组件已成功迁移。
- en: Migrating the AddTodo component
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移AddTodo组件
- en: Next, we are going to migrate the `AddTodo` component. Here, we are going to
    use a State Hook to handle the `input` field state.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将迁移`AddTodo`组件。在这里，我们将使用State Hook来处理`input`字段状态。
- en: 'Let''s migrate the `AddTodo` component now:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在迁移`AddTodo`组件：
- en: 'Edit `src/AddTodo.js` and adjust the import statement to import the `useState` Hook
    from React:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/AddTodo.js`并调整导入语句以从React导入`useState` Hook：
- en: '[PRE69]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Remove the class component code. We are going to define a function component
    instead now.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除类组件代码。我们现在要定义一个函数组件。
- en: 'First, we define the function, which accepts only one prop—the `addTodo` function:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们定义一个函数，它只接受一个prop - `addTodo`函数：
- en: '[PRE70]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Next, we define a State Hook for the `input` field state:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们为`input`字段状态定义一个State Hook：
- en: '[PRE71]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now we can define the handler functions for the `input` field and the add button:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以为`input`字段和添加按钮定义处理函数：
- en: '[PRE72]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Finally, we return and render the `input` field and the add button:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们返回并渲染`input`字段和添加按钮：
- en: '[PRE73]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: As we can see, using the State Hook makes state management much simpler. We
    can define a separate value and setter function for each state value, instead
    of having to deal with a state object. Furthermore, we do not need to destructure
    from `this.state` all the time. As a result, our code is much more clean and concise.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，使用State Hook使状态管理变得更加简单。我们可以为每个状态值定义一个单独的值和setter函数，而不是不断处理一个状态对象。此外，我们不需要一直从`this.state`中解构。因此，我们的代码更加清晰简洁。
- en: Migrating the App component
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移App组件
- en: Lastly, all that is left to do is migrating the `App` component. Then, our whole
    ToDo app will have been migrated to React Hooks. Here, we are going to use a Reducer
    Hook to manage the state, an Effect Hook to fetch todos when the component mounts,
    and a Memo Hook to store the filtered todos list.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，剩下的就是迁移`App`组件。然后，我们整个待办事项应用程序将被迁移到React Hooks。在这里，我们将使用Reducer Hook来管理状态，Effect
    Hook在组件挂载时获取待办事项，以及Memo Hook来存储过滤后的待办事项列表。
- en: 'In this section, we are going to do the following:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将做以下事情：
- en: Define the actions
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义动作
- en: Define the reducers
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义reducers
- en: Migrate the `App` component
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移`App`组件
- en: Defining the actions
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义动作
- en: 'Our app is going to accept five actions:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用将接受五个动作：
- en: '`FETCH_TODOS`: To fetch a new list of todo items—`{ type: ''FETCH_TODOS'',
    todos: [] }`'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FETCH_TODOS`：获取新的待办事项列表 - `{ type: ''FETCH_TODOS'', todos: [] }`'
- en: '`ADD_TODO`: To insert a new todo item—`{ type: ''ADD_TODO'', title: ''Test
    ToDo app'' }`'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADD_TODO`：插入新的待办事项 - `{ type: ''ADD_TODO'', title: ''Test ToDo app'' }`'
- en: '`TOGGLE_TODO`: To toggle the `completed` value of a todo item—`{ type: ''TOGGLE_TODO'',
    id: ''xxx'' }`'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TOGGLE_TODO`：切换待办事项的`completed`值 - `{ type: ''TOGGLE_TODO'', id: ''xxx'' }`'
- en: '`REMOVE_TODO`: To remove a todo item—`{ type: ''REMOVE_TODO'', id: ''xxx''
    }`'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REMOVE_TODO`：移除一个待办事项—`{ type: ''REMOVE_TODO'', id: ''xxx'' }`'
- en: '`FILTER_TODOS`: To filter todo items—`{ type: ''FILTER_TODOS'', filter: ''completed''
    }`'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FILTER_TODOS`：过滤待办事项—`{ type: ''FILTER_TODOS'', filter: ''completed'' }`'
- en: After defining the actions, we can move on to defining the reducers.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义完动作之后，我们可以继续定义reducers。
- en: Defining the reducers
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义reducers
- en: 'We are now going to define the reducers for our state. We are going to need
    one app reducer and two sub-reducers: one for the todos and one for the filter.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要为我们的状态定义reducers。我们需要一个app reducer和两个子reducer：一个用于todos，一个用于filter。
- en: The filtered todos list is going to be computed on the fly by the `App` component.
    We can later use a Memo Hook to cache the result and avoid unnecessary re-computation
    of the filtered todos list.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤后的待办事项列表将由`App`组件动态计算。我们可以稍后使用Memo Hook来缓存结果，避免不必要地重新计算过滤后的待办事项列表。
- en: Defining the filter reducer
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义filter reducer
- en: 'We are going to start by defining the reducer for the `filter` value. Let''s
    define the filter reducer now:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先定义`filter`值的reducer。现在让我们定义filter reducer：
- en: 'Create a new `src/reducers.js` file and import the `generateID` function from
    the `src/api.js` file:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/reducers.js`文件，并从`src/api.js`文件中导入`generateID`函数：
- en: '[PRE74]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'In the `src/reducers.js` file, define a new function, which is going to handle
    the `FILTER_TODOS` action, and set the value accordingly:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/reducers.js`文件中，定义一个新函数，它将处理`FILTER_TODOS`动作，并相应地设置值：
- en: '[PRE75]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Now, the `filterReducer`  function is defined, and we can handle the `FILTER_TODOS`
    action properly.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`filterReducer`函数已经定义，我们可以正确处理`FILTER_TODOS`动作了。
- en: Defining the todos reducer
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义todos reducer
- en: Next, we are going to define a function for the todo items. Here, we are going
    to handle the `FETCH_TODOS`, `ADD_TODO`, `TOGGLE_TODO` and `REMOVE_TODO` actions.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为待办事项定义一个函数。在这里，我们将处理`FETCH_TODOS`、`ADD_TODO`、`TOGGLE_TODO`和`REMOVE_TODO`动作。
- en: 'Let''s define the `todosReducer` function now:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义`todosReducer`函数：
- en: 'In the `src/reducers.js` file, define a new function, which is going to handle
    these actions:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/reducers.js`文件中，定义一个新函数，它将处理这些动作：
- en: '[PRE76]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'For the `FETCH_TODOS` action, we simply replace the current state with the
    new `todos` array:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`FETCH_TODOS`动作，我们只需用新的`todos`数组替换当前状态：
- en: '[PRE77]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'For the `ADD_TODO` action, we are going to insert a new item at the beginning
    of the current state array:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`ADD_TODO`动作，我们将在当前状态数组的开头插入一个新项目：
- en: '[PRE78]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'For the `TOGGLE_TODO` action, we are going to use the `map` function to update
    a single todo item:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`TOGGLE_TODO`动作，我们将使用`map`函数来更新单个待办事项：
- en: '[PRE79]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'For the `REMOVE_TODO` action, we are going to use the `filter` function to
    remove a single todo item:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`REMOVE_TODO`动作，我们将使用`filter`函数来移除单个待办事项：
- en: '[PRE80]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'By default (for all other actions), we simply return the current `state`:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下（对于所有其他动作），我们只需返回当前的`state`：
- en: '[PRE81]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Now, the todos reducer is defined, and we can handle the `FETCH_TODOS`, `ADD_TODO`,
    `TOGGLE_TODO` and `REMOVE_TODO` actions.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，todos reducer已经定义，我们可以处理`FETCH_TODOS`、`ADD_TODO`、`TOGGLE_TODO`和`REMOVE_TODO`动作了。
- en: Defining the app reducer
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义app reducer
- en: 'Finally, we need to combine our other reducers into a single reducer for our
    app state. Let''s define the `appReducer` function now:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将其他reducers组合成一个单一的app状态的reducer。现在让我们定义`appReducer`函数：
- en: 'In the `src/reducers.js` file, define a new function for the `appReducer`:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/reducers.js`文件中，为`appReducer`定义一个新函数：
- en: '[PRE82]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'In this function, we return an object with the values from the other reducers.
    We simply pass the sub-state and action down to the other reducers:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个函数中，我们返回一个包含其他reducers值的对象。我们只需将子状态和动作传递给其他reducers：
- en: '[PRE83]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Now, our reducers are grouped together. So, we only have one `state` object
    and one `dispatch` function.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的reducers已经分组在一起。所以，我们只有一个`state`对象和一个`dispatch`函数。
- en: Migrating the component
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件迁移
- en: 'Now that we have defined our reducers, we can start migrating the `App` component.
    Let''s migrate it now:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了我们的reducers，我们可以开始迁移`App`组件。让我们现在迁移它：
- en: 'Edit `src/App.js` and adjust the import statement to import `useReducer`, `useEffect`,
    and `useMemo` from `React`:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/App.js`并调整导入语句，从`React`中导入`useReducer`、`useEffect`和`useMemo`：
- en: '[PRE84]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Import the `appReducer` function from `src/reducers.js`:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`src/reducers.js`中导入`appReducer`函数：
- en: '[PRE85]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Remove the class component code. We are going to define a function component
    instead now.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除类组件代码。现在我们要定义一个函数组件。
- en: 'First, we define the function, which is not going to accept any props:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们定义一个不接受任何props的函数：
- en: '[PRE86]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Now, we define a Reducer Hook using the `appReducer` function:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们使用`appReducer`函数定义一个Reducer Hook：
- en: '[PRE87]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Next, we define an Effect Hook, which is going to fetch `todos` via the API
    function, and then a `FETCH_TODOS` action will be dispatched:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个Effect Hook，它将通过API函数获取`todos`，然后将会派发一个`FETCH_TODOS`动作：
- en: '[PRE88]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Then, we implement the filter mechanism using a Memo Hook, in order to optimize
    performance and avoid re-computing the filtered todos list when nothing changes:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用Memo Hook实现过滤机制，以优化性能并避免在没有变化时重新计算过滤后的todos列表：
- en: '[PRE89]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Now, we define various functions that are going to dispatch actions and change
    the state:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们定义各种函数，这些函数将派发动作并改变状态：
- en: '[PRE90]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Finally, we return and render all the components that are needed for our ToDo
    app:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们返回并渲染所有需要的ToDo应用程序组件：
- en: '[PRE91]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: As we can see, using a reducer to handle complex state changes makes our code
    much more concise and easier to maintain. Our app is now fully migrated to Hooks!
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，使用reducer来处理复杂的状态变化使我们的代码更加简洁和易于维护。我们的应用现在完全迁移到了Hooks！
- en: Example code
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码
- en: The example code can be found in the `Chapter11/chapter11_2` folder.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码可以在`Chapter11/chapter11_2`文件夹中找到。
- en: Just run `npm install` in order to install all dependencies and run `npm start` to
    start the application, then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行`npm install`来安装所有依赖项，并运行`npm start`来启动应用程序，然后在浏览器中访问`http://localhost:3000`（如果没有自动打开）。
- en: Trade-offs of class components
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类组件的权衡
- en: Now that we have finished our migration from class components to Hooks, let's
    revise and sum up what we have learned.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了从类组件到Hooks的迁移，让我们回顾和总结我们学到的东西。
- en: Counting the lines of code, we can see that with 392 total lines of JavaScript
    code, function components with Hooks are more concise than class components, which
    required 430 total lines of JavaScript code. Additionally, the function components
    with Hooks are easier to understand and test since they simply use JavaScript
    functions instead of complex React constructs. Furthermore, we were able to refactor
    all of the state-changing logic into a separate `reducers.js` file, thus decoupling
    it from the `App` component and making it easier to refactor and test. This reduced
    the file size of `App.js` from 109 lines to 64 lines, with an additional 50 lines
    in the `reducers.js` file.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 通过计算代码行数，我们可以看到，总共有392行JavaScript代码的函数组件与Hooks比起需要430行JavaScript代码的类组件更加简洁。此外，函数组件与Hooks更容易理解和测试，因为它们只是使用JavaScript函数而不是复杂的React构造。此外，我们能够将所有的状态改变逻辑重构到一个单独的`reducers.js`文件中，从而将其与`App`组件解耦，并使其更容易重构和测试。这将`App.js`文件的大小从109行减少到64行，并在`reducers.js`文件中增加了50行。
- en: 'We can see the reduced lines of code in the following table:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在下表中看到减少的代码行数：
- en: '| **Comparison: lines of JavaScript code** |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| **比较：JavaScript代码行数** |'
- en: '| **Class components** | **Function components with Hooks** |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| **类组件** | **使用Hooks的函数组件** |'
- en: '| `36  ./TodoFilter.js` `15  ./TodoList.js`'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '| `36  ./TodoFilter.js` `15  ./TodoList.js`'
- en: '`59  ./AddTodo.js`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`59  ./AddTodo.js`'
- en: '`12  ./index.js`'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`12  ./index.js`'
- en: '`7   ./Header.js`'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`7   ./Header.js`'
- en: '`5   ./StateContext.js`'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`5   ./StateContext.js`'
- en: '`9   ./App.test.js`'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`9   ./App.test.js`'
- en: '`135 ./serviceWorker.js`'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`135 ./serviceWorker.js`'
- en: '`12  ./api.js`'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`12  ./api.js`'
- en: '`109 ./App.js`'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`109 ./App.js`'
- en: '`31  ./TodoItem.js` | `25  ./TodoFilter.js` `12  ./TodoList.js`'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`31  ./TodoItem.js` | `25  ./TodoFilter.js` `12  ./TodoList.js`'
- en: '`42  ./AddTodo.js`'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`42  ./AddTodo.js`'
- en: '`12  ./index.js`'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`12  ./index.js`'
- en: '`7   ./Header.js`'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`7   ./Header.js`'
- en: '`50  ./reducers.js`'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`50  ./reducers.js`'
- en: '`5   ./StateContext.js`'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`5   ./StateContext.js`'
- en: '`9   ./App.test.js`'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`9   ./App.test.js`'
- en: '`135 ./serviceWorker.js`'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`135 ./serviceWorker.js`'
- en: '`12  ./api.js`'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`12  ./api.js`'
- en: '`64  ./App.js`'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`64  ./App.js`'
- en: '`19  ./TodoItem.js` |'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`19  ./TodoItem.js` |'
- en: '| `430 total` | `392 total` |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| `430 总计` | `392 总计` |'
- en: 'With function components and Hooks, the following points do not need to be
    taken into consideration:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 使用函数组件和 Hooks，以下几点不需要考虑：
- en: No need to deal with constructors
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要处理构造函数
- en: No confusing `this` context (`this` re-binding)
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有混淆的 `this` 上下文（`this` 重新绑定）
- en: No need to destructure the same values over and over again
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要一遍又一遍地解构相同的值
- en: No magic when dealing with contexts, props, and state
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理上下文、props 和状态时没有魔法
- en: No need to define `componentDidMount` and `componentDidUpdate` if we want to
    re-fetch data when the props change
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们想在 props 改变时重新获取数据，就不需要定义 `componentDidMount` 和 `componentDidUpdate`
- en: 'Furthermore, function components have the following advantages:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，函数组件具有以下优势：
- en: Encourage making small and simple components
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励创建小而简单的组件
- en: Are easier to refactor
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易重构
- en: Are easier to test
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易测试
- en: Require less code
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要更少的代码
- en: Are easier to understand for beginners
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对初学者更容易理解
- en: Are more declarative
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更具声明性
- en: 'However, class components can be fine in the following situations:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在以下情况下，类组件可能是可以的：
- en: When sticking to certain conventions.
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循某些约定时。
- en: When using the latest JavaScript features to avoid `this` re-binding.
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最新的 JavaScript 特性来避免 `this` 重新绑定。
- en: Are possibly easier to understand for the team because of existing knowledge.
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能更容易理解，因为团队已经掌握了相关知识。
- en: Many projects still use classes. For libraries, this is not such a problem,
    because they can work well together with function components. At work, you might
    need to use classes, though.
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多项目仍在使用类。对于库来说，这不是什么问题，因为它们可以很好地与函数组件一起工作。在工作中，你可能需要使用类。
- en: Are not going to be removed from React anytime soon (according to the React
    team).
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据 React 团队的说法，类不会很快从 React 中移除。
- en: In the end, it is a matter of preference, but Hooks do have many advantages
    over classes! If you are starting a new project, definitely go for Hooks. If you
    are working on an existing project, consider whether it might make sense to refactor
    certain components to Hook-based components in order to make them simpler. However,
    you should not immediately port all your projects to Hooks, as refactoring can
    always introduce new bugs. The best way to adopt Hooks is to slowly but surely
    replace old class components with Hook-based function components when appropriate.
    For example, if you are already refactoring a component, you can refactor it to
    use Hooks!
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是一个偏好的问题，但是 Hooks 确实比类有很多优势！如果你正在开始一个新项目，一定要选择 Hooks。如果你正在处理一个现有项目，考虑是否有必要重构某些组件为基于
    Hook 的组件，以使它们更简单。然而，你不应该立即将所有项目都转换为 Hooks，因为重构总是可能引入新的 bug。采用 Hooks 的最佳方式是在适当的时候，慢慢但确定地用基于
    Hook 的函数组件替换旧的类组件。例如，如果你已经在重构一个组件，你可以将其重构为使用 Hooks！
- en: Summary
  id: totrans-430
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we first built a ToDo app using React class components. We
    started by designing the app structure, then implemented static components, and
    finally, we made them dynamic. In the next section, we learned how to migrate
    an existing project using class components, to function components using Hooks.
    Finally, we learned about the trade-offs of class components, when class components
    or Hooks should be used, and how one should go about migrating an existing project
    to Hooks.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先使用React类组件构建了一个ToDo应用程序。我们首先设计了应用程序结构，然后实现了静态组件，最后使它们变得动态。在接下来的部分，我们学习了如何将使用类组件的现有项目迁移到使用Hooks的函数组件。最后，我们学习了类组件的权衡，何时应该使用类组件或Hooks，以及如何迁移现有项目到Hooks。
- en: We have now seen in practice how React class components differ to function components
    with Hooks. Hooks make our code much more concise and easier to read and maintain.
    We have also learned that we should gradually migrate our components from class
    components to function components with Hooks—there is no need to immediately migrate
    the whole application.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经实际看到了React类组件与使用Hooks的函数组件的不同之处。Hooks使我们的代码更加简洁，更易于阅读和维护。我们还学到了应该逐步将我们的组件从类组件迁移到使用Hooks的函数组件——没有必要立即迁移整个应用程序。
- en: In the next chapter, we are going to learn about handling state with Redux,
    the trade-offs of using Redux versus just function components with Hooks, how
    to use Redux with Hooks, and how to migrate an existing Redux application to a
    Hook-based setup.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Redux处理状态，使用Redux与仅使用Hooks的函数组件相比的权衡，如何在Hooks中使用Redux，以及如何将现有的Redux应用程序迁移到基于Hook的设置。
- en: Questions
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'In order to recap what we have learned in this chapter, try to answer the following
    questions:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结本章学到的知识，请尝试回答以下问题：
- en: How are React class components defined?
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React类组件是如何定义的？
- en: What do we need to call when using a `constructor` with class components? Why?
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用类组件的`constructor`时，我们需要调用什么？为什么？
- en: How do we set the initial state with class components?
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在类组件中设置初始状态？
- en: How do we change the state with class components?
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在类组件中改变状态？
- en: Why do we need to re-bind the `this` context with class component methods?
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们需要重新绑定类组件方法的`this`上下文？
- en: How can we re-bind the `this` context?
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何重新绑定`this`上下文？
- en: How can we use React context with class components?
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在类组件中使用React上下文？
- en: What can we replace state management with when migrating to Hooks?
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在迁移到Hooks时，我们可以用什么替代状态管理？
- en: What are the trade-offs of using Hooks versus class components?
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Hooks与类组件相比有什么权衡之处？
- en: When and how should an existing project be migrated to Hooks?
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时以及如何迁移现有项目到Hooks？
- en: Further reading
  id: totrans-446
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following reading material:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对本章学到的概念更多信息感兴趣，请查看以下阅读材料：
- en: ES6 classes: [https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes)
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ES6类：[https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes)
- en: React class components: [https://www.robinwieruch.de/react-component-types/#react-class-components](https://www.robinwieruch.de/react-component-types/#react-class-components)
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React类组件：[https://www.robinwieruch.de/react-component-types/#react-class-components](https://www.robinwieruch.de/react-component-types/#react-class-components)
