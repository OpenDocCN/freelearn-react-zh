["```jsx\nimport  React,  {  useState  }  from  'react' \n```", "```jsx\nimport  React  from  'react'\nimport ReactDOM from 'react-dom'\n```", "```jsx\nfunction useState (initialState) {\n```", "```jsx\n    let value = initialState\n```", "```jsx\n    function setState (nextValue) {\n        value = nextValue\n        ReactDOM.render(<MyName />, document.getElementById('root'))\n    }\n```", "```jsx\n    return [ value, setState ]\n}\n```", "```jsx\nconst [ name, setName ] = useState('')\n```", "```jsx\nlet value\n\nfunction useState (initialState) {\n```", "```jsx\n       if (typeof value === 'undefined') value = initialState\n```", "```jsx\n    const [ name, setName ] = useState('')\n const [ lastName, setLastName ] = useState('')\n```", "```jsx\n    function handleLastNameChange (evt) {\n        setLastName(evt.target.value)\n    }\n```", "```jsx\n <h1>My name is: {name} **{lastName}**</h1>\n```", "```jsx\n            <input type=\"text\" value={lastName} onChange={handleLastNameChange}\n   />\n```", "```jsx\nlet value\n```", "```jsx\nlet values = []\nlet currentHook = 0\n```", "```jsx\n    if (typeof values[currentHook] === 'undefined') values[currentHook] = initialState\n```", "```jsx\n    let hookIndex = currentHook\n    function setState (nextValue) {\n        values[hookIndex] = nextValue\n        ReactDOM.render(<MyName />, document.getElementById('root'))\n    }\n```", "```jsx\n        return [ values[currentHook++], setState ]\n```", "```jsx\nfunction Name () {\n    currentHook = 0\n```", "```jsx\n    const [ enableFirstName, setEnableFirstName ] = useState(false)\n```", "```jsx\n function  handleEnableChange  (evt)  { setEnableFirstName(!enableFirstName) }\n```", "```jsx\n            <input type=\"checkbox\" value={enableFirstName} onChange={handleEnableChange} />\n```", "```jsx\n            <h1>My name is: {enableFirstName ? name : ''} {lastName}</h1>\n```", "```jsx\n    const [ name, setName ] = enableFirstName\n        ? useState('')\n        : [ '', () => {} ]\n```", "```jsx\n> npm install --save react-scripts@^2.1.8\n```", "```jsx\n// NOTE: Not the actual React Hook API\nconst [ name, setName ] = useState('nameHook', '')\n```", "```jsx\nfunction createUseState () {\n    const keyName = Symbol()\n\n    return function useState () {\n        // ... use unique key name to handle hook state ...\n    }\n}\n```", "```jsx\n// NOTE: Not the actual React Hook API\nconst useNameState = createUseState()\n\nfunction MyName () {\n    const [ name, setName ] = useNameState('')\n    // ...\n}\n```", "```jsx\nconst [ name, setName ] = useState('')\n```", "```jsx\nfunction UserInfo ({ username }) {\n    if (username) {\n        const info = useFetchUserInfo(username)\n        return <div>{info}</div>\n    }\n    return <div>Not logged in</div>\n}\n```", "```jsx\nfunction LoggedInUserInfo ({ username }) {\n    const info = useFetchUserInfo(username)\n    return <div>{info}</div>\n}\n\nfunction UserInfo ({ username }) {\n    if (username) {\n        return <LoggedInUserInfo username={username} />\n    }\n    return <div>Not logged in</div>\n}\n```", "```jsx\nfunction OnlineUsers ({ users }) {\n    const [ userInfos, setUserInfos ] = useState([])\n    // ... fetch & keep userInfos up to date ...\n    return (\n        <div>\n            {users.map(username => {\n                const user = userInfos.find(u => u.username === username)\n                return <UserInfo {...user} />\n            })}\n        </div>\n    )\n}\n```", "```jsx\nfunction OnlineUsers ({ users }) {\n    return (\n        <div>\n            {users.map(username => <UserInfo username={username} />)}\n        </div>\n    )\n}\n\nfunction UserInfo ({ username }) {\n    const info = useFetchUserInfo(username)\n    // ... keep user info up to date ...\n    return <div>{info}</div>\n}\n```", "```jsx\n const  [  name,  setName  ]  =  enableFirstName ?  useState('') : [ '',  ()  =>  {} ]\n```", "```jsx\n    const [ name, setName ] = useState('')\n```"]