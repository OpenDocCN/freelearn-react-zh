- en: Using a Service Worker to Send Push Notifications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用服务工作者发送推送通知
- en: In this chapter, we will complete our application's process for sending push
    notifications. The implementation is a little complicated; it requires many moving
    pieces to get things working (in my experience, this is true of any push notifications
    implementation, on mobile or web). The exciting part is that we get to interact
    with a lot of new areas of knowledge, such as **Device tokens** and **Cloud functions**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将完成我们应用程序发送推送通知的过程。这个实现有点复杂；它需要许多移动的部分来使事情正常运行（根据我的经验，这对于任何移动或网络上的推送通知实现都是真实的）。令人兴奋的部分是我们可以与许多新的知识领域互动，比如**设备令牌**和**云函数**。
- en: Before we begin, let's take a minute to outline the process for setting up push
    notifications. As of now, we have our messaging service worker up and running.
    This service worker will sit there and wait to be called with a new notification.
    Once that happens, it'll handle everything to do with displaying that notification,
    so we don't have to worry about that (at least).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我们花一分钟概述设置推送通知的过程。目前，我们的消息服务工作者已经启动并运行。这个服务工作者将坐在那里等待被调用以显示新通知。一旦发生这种情况，它将处理所有与显示通知有关的事情，所以我们不必担心（至少目前是这样）。
- en: What is up to us is sending that message to the service worker. Let's say that
    we have 1,000 users for our application, each with one unique device. Each device
    has a unique token, which identifies it to Firebase. We need to keep track of
    all of those tokens, because when we want to send a notification, we need to tell
    Firebase exactly what devices to send it to.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由我们负责的是将消息发送给服务工作者。假设我们的应用程序有1,000个用户，每个用户都有一个唯一的设备。每个设备都有一个唯一的令牌，用于将其标识给Firebase。我们需要跟踪所有这些令牌，因为当我们想要发送通知时，我们需要告诉Firebase要发送到哪些设备。
- en: So, that's step one--set up and maintain a database table of all tokens for
    devices using our app. As we'll see, that also necessarily involves asking the
    user whether they want notifications in the first place.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这是第一步 - 设置和维护一个包含我们应用程序使用的所有设备令牌的数据库表。正如我们将看到的，这也必然涉及询问用户是否首先想要通知。
- en: Once we have our tokens saved, we can then tell Firebase to listen for a new
    message in the database, and then send a notification to all devices (based on
    the tokens) with the message details. As a small additional complication, we have
    to ensure that we don't send the notification to the user who created the message.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们保存了我们的令牌，我们就可以告诉Firebase监听数据库中的新消息，然后向所有设备（基于令牌）发送消息详细信息的通知。作为一个小的额外复杂性，我们必须确保不向创建消息的用户发送通知。
- en: This stage (telling Firebase to send a notification) actually takes place outside
    of our application. It takes place in the mythical "Cloud", where we'll host a
    function to take care of this process; more on that later.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个阶段（告诉Firebase发送通知）实际上是在我们的应用程序之外进行的。它发生在神秘的“云”中，我们将在那里托管一个函数来处理这个过程；稍后会详细介绍。
- en: Our approach to this rather involved piece of engineering will be to approach
    it slowly, one piece at a time. Ensure that you follow the code examples carefully;
    the nature of notifications means we won’t be able to fully test our implementation
    until it is complete, so do your best to avoid small errors along the way.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对这个相当复杂的工程方法将是慢慢来，一次一个部分。确保你仔细跟随代码示例；通知的性质意味着在实现完全之前我们将无法完全测试我们的实现，所以尽力避免途中的小错误。
- en: 'In this chapter, we''ll cover these topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Requesting permission to show notifications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求显示通知的权限
- en: Tracking and saving user tokens
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪和保存用户令牌
- en: Using Cloud Functions to send notifications
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用云函数发送通知
- en: Alright, let’s do it!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，让我们开始吧！
- en: Requesting permission
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求权限
- en: As the preceding introduction explains, we have a lot of functionality to create
    in this chapter. In order to keep it all in one place, without cluttering up our
    `App.js`, we will create a separate JavaScript class to manage everything to do
    with notifications. This is a pattern I really like with React, to extract functionality
    not attached to any one component. In our `src/` folder, next to our `components`
    folder, let's create a folder called `resources`, and within that, a file called
    `NotificationResource.js`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的介绍所解释的，我们在这一章中有很多功能要创建。为了将所有内容放在一个地方，而不会使我们的`App.js`混乱，我们将创建一个单独的JavaScript类来管理与通知有关的一切。这是我在React中非常喜欢的一种模式，可以提取与任何一个组件无关的功能。在我们的`src/`文件夹中，紧挨着我们的`components`文件夹，让我们创建一个名为`resources`的文件夹，在其中创建一个名为`NotificationResource.js`的文件。
- en: 'The basic outline of our class looks like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的类的基本轮廓如下：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We create a JavaScript class and export it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个JavaScript类并导出它。
- en: For those unfamiliar with JavaScript classes (especially for those familiar
    with classes in other languages), I encourage you to read the MDN article explaining
    the basics, at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些不熟悉JavaScript类的人（特别是那些熟悉其他语言中的类的人），我鼓励你阅读MDN的文章，解释了基础知识，网址为[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)。
- en: 'Let’s import it in our `App.js` before we forget:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们忘记之前，让我们在`App.js`中导入它：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When our app starts up, we want to ask the user for permission to send them
    notifications. Note that Firebase remembers whether the user has already accepted
    or denied our request, so we won't be bothering them with a popup every time,
    only if they haven't been asked before.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的应用启动时，我们希望请求用户权限发送通知给他们。请注意，Firebase会记住用户是否已经接受或拒绝了我们的请求，因此我们不会每次都用弹出窗口打扰他们，只有在他们之前没有被问过的情况下才会这样做。
- en: 'Here''s how we''ll approach this process:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将如何处理这个过程：
- en: When our app mounts, we'll create a new instance of the `NotificationResource`
    class, passing it the Firebase messaging library (we pass this in to save us from
    having to import it into the `NotificationResource.js` file, since we already
    have access to it in `App.js`).
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们的应用挂载时，我们将创建一个`NotificationResource`类的新实例，将Firebase消息库传递给它（我们将这个传递进去是为了避免我们不得不在`NotificationResource.js`文件中导入它，因为我们已经在`App.js`中有了对它的访问）。
- en: When the `NotificationResource` class is first instantiated, we'll immediately
    ask the user for permission, using the Firebase messaging library passed in.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`NotificationResource`类首次实例化时，我们将立即使用传递进来的Firebase消息库请求用户权限。
- en: If these steps are clear to you, I encourage you to try implementing them on
    your own first. If you're totally confused about how we will do this, don't worry,
    we'll go through it all.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些步骤对你来说很清楚，我鼓励你首先尝试自己实现它们。如果你完全困惑于我们将如何做到这一点，不要担心，我们会一一讲解。
- en: 'Okay, let''s start with our App''s `componentDidMount`. This is where we want
    to create the instance of our `NotificationResource`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们从我们的App的`componentDidMount`开始。这是我们想要创建`NotificationResource`实例的地方：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We're setting the `NotificationResource` instance to be a property of `App`;
    this will allow us to access it elsewhere within `App.js`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`NotificationResource`实例设置为`App`的属性；这将允许我们在`App.js`中的其他地方访问它。
- en: 'As we said earlier, we also want to pass in the Firebase messaging library:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，我们还希望传入Firebase消息库：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Every JavaScript class automatically has a `constructor` method that is called
    when an instance is created. That is what we're called when we say new `NotificationResource()`.
    Whatever we put inside those brackets is passed as an argument to the constructor.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个JavaScript类都自动具有一个`constructor`方法，当创建一个实例时会调用该方法。这就是当我们说`new NotificationResource()`时会调用的方法。我们放在括号里的任何内容都作为参数传递给构造函数。
- en: 'Let’s jump back over to `NotificationResource.js` and set that up:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们跳回到`NotificationResource.js`并设置它：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you start up your app, you should see `"Instantiated!"` in the console as
    soon as `App` mounts.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您启动您的应用程序，您应该在`App`挂载时立即在控制台中看到`"Instantiated!"`。
- en: 'The next step is to use our `messaging` library to access the user for permission
    to send them notifications:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用我们的`messaging`库来请求用户的权限发送通知：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We do the same thing we did with the `NotificationResource` in `App` with the
    `messaging` library, that is, save it as a property of our resource so that we
    can use it elsewhere. Then, we tap into the `requestPermission` function.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用`messaging`库在`App`中做了与`NotificationResource`相同的事情，也就是将其保存为资源的属性，以便我们可以在其他地方使用它。然后，我们进入`requestPermission`函数。
- en: 'If we go back to our app, we see this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到我们的应用程序，我们会看到这个：
- en: '![](../images/00055.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00055.jpeg)'
- en: Click on Allow, and you should see Permission granted in the console.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 单击允许，您应该在控制台中看到权限已被授予。
- en: If you've previously built a personal project using `localhost:8080` and allowed
    notifications, you won't see this popup. You can forget your previous preference
    by clicking on the icon to the left of the URL in the preceding screenshot, and
    resetting notifications to Ask.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前使用`localhost:8080`构建了个人项目并允许通知，您将不会看到此弹出窗口。您可以通过单击前面截图中URL左侧的图标，并将通知重置为询问，来忘记您之前的偏好设置。
- en: Now that we have permission to start bugging our users, we will start keeping
    track of all their devices, via tokens.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了开始跟踪所有用户设备的权限，我们将开始跟踪他们的所有设备令牌。
- en: Tracking tokens
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪令牌
- en: A **token** is a unique identifier for your user's device. It helps Firebase
    figure out where to send push notifications. In order for our notifications to
    be sent properly, we need to keep a record of all current device tokens in our
    database, and ensure that it's up to date.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**令牌**是用户设备的唯一标识符。它帮助Firebase找出应该发送推送通知的位置。为了正确发送我们的通知，我们需要在我们的数据库中保留所有当前设备令牌的记录，并确保它是最新的。'
- en: 'We can access the token of our user''s device via the Firebase `messaging`
    library. Two methods in particular will be useful: `onTokenRefresh` and `getToken`.
    Both have fairly self-explanatory names, so we’ll dive right into the implementation:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过Firebase的`messaging`库访问用户设备的令牌。特别有用的是两种方法：`onTokenRefresh`和`getToken`。两者的名称都相当不言自明，所以我们将直接进入实现：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You'll see a very long string of numbers and letters when your app refreshes.
    This is your device's identity. We need to save this to the database.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的应用程序刷新时，您会看到一长串数字和字母。这是您设备的身份。我们需要将其保存到数据库中。
- en: Whenever the token changes `firebase.messaging().onTokenRefresh` is called.
    The token can be deleted by our application, or when the user clears browser data,
    in which case a new one will be generated. When that happens, we'll need to overwrite
    the old token in our database. The key part is overwriting; if we don't delete
    the old token, we'll end up wasting Firebase’s time by sending to devices that
    don’t exist.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每当令牌更改时，`firebase.messaging().onTokenRefresh`会被调用。令牌可以被我们的应用程序删除，或者当用户清除浏览器数据时，此时会生成一个新的令牌。当这种情况发生时，我们需要覆盖数据库中的旧令牌。关键部分是覆盖；如果我们不删除旧令牌，我们最终会浪费Firebase的时间，发送到不存在的设备。
- en: 'So, we have four steps to cover:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有四个步骤要涵盖：
- en: When the token changes, get the new token.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当令牌更改时，获取新令牌。
- en: Look for an existing token in the database.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库中查找现有令牌。
- en: If an old one exists, replace it.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果存在旧令牌，则替换它。
- en: Otherwise, add the new token to the database.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，将新令牌添加到数据库中。
- en: There's a bunch of intermediary tasks we'll have to complete in order to finish
    this checklist, but let's just dive in with this rough plan.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成此清单之前，我们将不得不完成一堆中间任务，但让我们先用这个粗略的计划开始。
- en: 'We will add four functions to our `NotificationResource`: `setupTokenRefresh`,
    `saveTokenToServer`, `findExistingToken`, and `registerToken`. You can see how
    the last two accord with the last two steps in our checklist.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向我们的`NotificationResource`添加四个函数：`setupTokenRefresh`，`saveTokenToServer`，`findExistingToken`和`registerToken`。您可以看到最后两个函数与我们清单中的最后两个步骤相符。
- en: 'Let''s start with `setupTokenRefresh`. We will call this from our constructor,
    because it will be in charge of registering the listener for token changes:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`setupTokenRefresh`开始。我们将从构造函数中调用它，因为它将负责注册令牌更改的监听器：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This pattern should be familiar after all the "on" listeners we've configured
    with Firebase.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式应该在我们配置了Firebase的所有“on”监听器后是熟悉的。
- en: 'Next, we''ll create `saveTokenToServer`, and call it from `setupTokenRefresh`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建`saveTokenToServer`，并从`setupTokenRefresh`中调用它：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Okay, now we can move through those comments one by one. We already know how
    to get the token:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们可以逐条浏览这些注释了。我们已经知道如何获取令牌：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For the next step, look for the existing token; we don't currently have access
    to the previous tokens saved in our database (okay, there aren’t any yet, but
    there will be).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，查找现有令牌；我们目前无法访问保存在我们的数据库中的先前令牌（好吧，目前还没有，但以后会有）。
- en: So, we need to create a table in our database to save our tokens. We’ll call
    it `fcmTokens` for ease. It doesn't exist yet, but it will as soon as we send
    some data to it. That's the beauty of the Firebase data--you can send data to
    a non-existent table, and it will be created and populated.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要在数据库中创建一个表来保存我们的令牌。我们将其称为`fcmTokens`以方便。它目前还不存在，但一旦我们向其发送一些数据，它就会存在。这就是Firebase数据的美妙之处--您可以向一个不存在的表发送数据，它将被创建并填充。
- en: 'Just as we did for messages in `App.js`, let''s add a listener for values from
    the `/fcmTokens` table inside the constructor of `NotificationResource`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在`App.js`中对消息所做的那样，让我们在`NotificationResource`的构造函数中为`/fcmTokens`表添加一个值的监听器：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You’ll note that we now expect a database instance to be passed into the constructor.
    Let''s hop back over to `App.js` to set that up:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们现在期望将数据库实例传递到构造函数中。让我们回到`App.js`来设置它：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Okay, this is perfect.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这很完美。
- en: 'If you `console.log` out `snapshot.val()` inside of the database listener,
    it''ll be null, since there are no values in our `/fcmTokens` table. Let''s work
    on registering one:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在数据库监听器中`console.log`出`snapshot.val()`，它将为null，因为我们的`/fcmTokens`表中没有值。让我们开始注册一个：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If the tokens are loaded, we can check for an existing one. If the tokens are
    not loaded, do nothing. This may seem odd, but we want to ensure that we don't
    create duplicate values.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果令牌已加载，我们可以检查是否存在现有令牌。如果令牌尚未加载，则不执行任何操作。这可能看起来有点奇怪，但我们希望确保不创建重复的值。
- en: 'How do we find an existing token? Well, in our constructor, we saved the result
    of loading the token values in the database to `this.allTokens`. We will simply
    loop through them and see whether any of them match the `res` variable generated
    from `getToken`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何找到现有的令牌？嗯，在我们的构造函数中，我们将从数据库中加载令牌值的结果保存到`this.allTokens`中。我们只需循环遍历它们，看看它们是否与从`getToken`生成的`res`变量匹配即可：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The important part of this method is that `tokenToSave` will be a string (the
    random assortment of numbers and letters seen earlier), and `this.allTokens` will
    be a collection of token objects loaded from the database and hence the `this.allTokens[tokenObject].token`
    business.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法的重要部分是`tokenToSave`将是一个字符串（之前看到的随机数字和字母的组合），而`this.allTokens`将是从数据库加载的令牌对象的集合，因此是`this.allTokens[tokenObject].token`的业务。
- en: '`findExistingToken` will thus either return the key of the token object that
    matches, or false. From there, we can either update that existing token object,
    or create a new one. We’ll see why it''s important to return the key (rather than
    the object itself) when we try to update the token.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`findExistingToken`将返回与之匹配的令牌对象的键，或false。从那里，我们可以更新现有的令牌对象，或者创建一个新的。当我们尝试更新令牌时，我们将看到为什么返回键（而不是对象本身）很重要。'
- en: Attaching a user to the token
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将用户附加到令牌
- en: Before we move on to covering the two cases though, let’s take a step back and
    think about how our push notifications will work, because there’s an important
    caveat we need to cover.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续涵盖这两种情况之前，让我们退一步，思考一下我们的推送通知将如何工作，因为我们需要解决一个重要的警告。
- en: When a user sends a message, we want to notify every user, except the user who
    created the message (that will be infuriating), so we need some way to send a
    notification to every token in our database, except for the ones that belong to
    the user who sent the message.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户发送消息时，我们希望通知每个用户，除了创建消息的用户（那将是令人恼火的），因此我们需要一种方法来向数据库中的每个令牌发送通知，除了属于发送消息的用户的令牌。
- en: How will we be able to prevent that? How can we match a user's message with
    a user's token?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将如何能够防止这种情况发生？我们如何将用户的消息与用户的令牌匹配起来？
- en: Well, we have access to the user ID in the message object (that is, we always
    save the ID along with the message content). What if we did something similar
    with the token, and saved the user ID along with it, so we can be sure to identify
    which user belongs to which device?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们可以在消息对象中访问用户ID（也就是说，我们总是保存ID和消息内容）。如果我们对令牌做类似的操作，并保存用户ID，这样我们就可以确定哪个用户属于哪个设备了。
- en: This seems like a pretty simple solution, but that means we need access to the
    current user’s ID inside `NotificationResource`. Let's do that right away, and
    then get back to writing and updating tokens.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎是一个非常简单的解决方案，但这意味着我们需要在`NotificationResource`中访问当前用户的ID。让我们立即做到这一点，然后回到编写和更新令牌。
- en: Changing the user inside NotificationResource
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在NotificationResource中更改用户
- en: 'We already have a method to handle user changes inside `App.js`--our old friend,
    `onAuthStateChanged`. Let''s hook in to that, and use that to call a method inside
    `NotificationResource`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有一个处理用户更改的方法在`App.js`中——我们的老朋友`onAuthStateChanged`。让我们连接到那里，并使用它来调用`NotificationResource`中的一个方法：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, inside `NotificationResource`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`NotificationResource`中：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Incidentally, this helps us solve another problem with tokens. As noted earlier,
    `onTokenRefresh` is called when a new token is generated, either because the user
    deleted browser data or because the web app deleted the previous token. However,
    if we''re saving the user ID along with the token, we need to ensure that we update
    that ID when the user changes, so we''ll have to call our `saveTokenToServer`
    method every time the user changes:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，这有助于解决令牌的另一个问题。如前所述，当生成新令牌时会调用`onTokenRefresh`，要么是因为用户删除了浏览器数据，要么是因为Web应用程序删除了先前的令牌。但是，如果我们将用户ID与令牌一起保存，我们需要确保在用户更改时更新该ID，因此我们将不得不在用户更改时调用我们的`saveTokenToServer`方法：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Okay, now we can go back to our `if`-`else` statement inside `saveTokenToServer`,
    and start saving some tokens.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们可以回到`saveTokenToServer`中的`if`-`else`语句，并开始保存一些令牌。
- en: Creating a new token
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新令牌
- en: 'Let''s start with covering the latter case, creating a new token. We''ll make
    a new method called `registerToken`, passing in the result of the `getToken` call:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从涵盖后一种情况开始，创建一个新的令牌。我们将创建一个名为`registerToken`的新方法，传入`getToken`调用的结果：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, our new method:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的新方法：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We save the token, along with the user ID. Perfect.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们保存令牌，以及用户ID。完美。
- en: Updating an existing token
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新现有令牌
- en: We'll do something similar with updating a token, but this time we need to access
    the existing token in the database.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将类似的方法用于更新令牌，但这次我们需要访问数据库中的现有令牌。
- en: 'Add a `console.log` here for testing purposes:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里添加一个`console.log`以进行测试：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, try logging in and out of the app with different users. You should see
    the same `existingToken` key each time:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，尝试使用不同的用户登录和退出应用程序。您应该每次看到相同的`existingToken`键：
- en: '![](../images/00056.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00056.jpeg)'
- en: 'We can use this to grab the existing entry from the `fcmToken` table in our
    database, and update it:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个来获取我们数据库中`fcmToken`表中的现有条目，并更新它：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Okay, that was a lot. Let's double-check that this is working correctly. Go
    to `console.firebase.com` and check the Database tab. Try logging in and out of
    the app again with two different users. You should see the matching token entry
    update its user ID each time. Then, try logging in on a different device (after
    doing another firebase deploy) and see another token appear. Magic!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这是很多内容。让我们再次确认这是否正常工作。转到`console.firebase.com`并检查数据库选项卡。尝试使用两个不同的用户登录和退出应用程序。您应该看到匹配的令牌条目每次更新其用户ID。然后，尝试在另一台设备上登录（在进行另一个firebase
    deploy之后），然后看到另一个令牌出现。神奇！
- en: We now have a table of tokens for every device that uses our app, along with
    the ID of the user last associated with that device. We're now ready to move to
    the best part of push notifications--actually sending them.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们为使用我们的应用程序的每个设备都有一个令牌表，以及上次与该设备关联的用户的ID。我们现在准备进入推送通知的最佳部分--实际发送它们。
- en: 'Here''s the final `NotificationResource.js`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终的`NotificationResource.js`：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Sending push notifications
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送推送通知
- en: Way back at the beginning of this book, when we initialized Firebase, we checked
    an option for Functions. This created a folder in our root directory called `functions`,
    which we have ignored as of yet (if you don't have this folder, you can run `firebase
    init` again, and ensure that you check off both Functions and Hosting for the
    first question. Reference the chapter on Firebase for more).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 回到本书的开头，当我们初始化Firebase时，我们勾选了一个Functions选项。这在我们的根目录中创建了一个名为`functions`的文件夹，到目前为止我们已经忽略了它（如果你没有这个文件夹，你可以再次运行`firebase
    init`，并确保你在第一个问题上都勾选了Functions和Hosting。参考Firebase章节了解更多信息）。
- en: 'The `functions` folder allows us to use Firebase Cloud Functions. Here''s how
    Google defines them:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`functions`文件夹允许我们使用Firebase云函数。这是Google如何定义它们的方式：'
- en: “Cloud Functions gives developers access to Firebase and Google Cloud events,
    along with scalable computing power to run code in response to those events.”
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: “Cloud Functions允许开发人员访问Firebase和Google Cloud事件，以及可扩展的计算能力来运行响应这些事件的代码。”
- en: That's the simplest definition--code that runs in response to events, outside
    of our application. We extract a bit of functionality that doesn't belong to any
    particular instance of our app (because it concerns all instances of our app)
    to the Cloud, and have it run automatically by Firebase.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单的定义--在事件发生时运行的代码，超出我们的应用程序之外。我们从我们的应用程序的任何特定实例中提取一些不属于任何特定实例的功能（因为它涉及我们应用程序的所有实例）到云端，并让Firebase自动运行它。
- en: Let's open up `functions /index.js` and get to work.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开`functions /index.js`并开始工作。
- en: Writing our Cloud function
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写我们的云函数
- en: 'First, we can initialize our app, as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以初始化我们的应用程序，如下所示：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Cloud functions = code run in response to events, so what's our event?
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 云函数=响应事件的代码，那么我们的事件是什么？
- en: We want to notify the user when a new message is created. So, the event is a
    new message, or, more specifically, when a new entry is created in the messages
    table of our database.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在创建新消息时通知用户。因此，事件是一个新消息，或者更具体地说，是在我们数据库的消息表中创建新条目时。
- en: 'We''ll define the export of our `index.js` to be a function called `sendNotifications`,
    which defines a listener for the `onWrite` event of `/messages`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义我们的`index.js`的导出为一个名为`sendNotifications`的函数，该函数定义了`/messages`的`onWrite`事件的监听器：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Everything else in this section will take place in the event listener.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的其他所有内容将在事件监听器中进行。
- en: 'First, we grab the snapshot from the event:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从事件中获取快照：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Right now, we don’t support editing messages; but one day we might. We don''t
    want a push notification in that event, so we''ll return early if `onWrite` is
    triggered by an update (the snapshot has a previous value):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们不支持编辑消息；但将来可能会支持。在这种情况下，我们不希望推送通知，因此如果`onWrite`由更新触发（快照具有先前值），我们将提前返回：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, we''ll construct our notification. We define an object with a nested
    notification object, with a `title`, `body`, `icon`, and `click_action`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将构建我们的通知。我们定义了一个带有嵌套通知对象的对象，其中包含`title`、`body`、`icon`和`click_action`：
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `title` comes from the user email associated with the message. The `body`
    is the message itself. Both of those are wrapped in template strings to ensure
    that they come out as strings. It's just a safety thing!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`title`来自与消息关联的用户电子邮件。`body`是消息本身。这两者都包裹在模板字符串中，以确保它们作为字符串输出。这只是一个安全措施！'
- en: Then, we use our app icon as the icon for the notification. Note the path--the
    icon doesn’t actually exist in our `functions` folder, but since it will be deployed
    to the root of our app (it's in the `build` folder), we can reference it.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用我们的应用图标作为通知的图标。请注意路径--图标实际上并不存在于我们的`functions`文件夹中，但由于它将部署到我们应用的根目录（在`build`文件夹中），我们可以引用它。
- en: Lastly, our `click_action` should take our user to the app. We grab the domain
    URL via our config.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的`click_action`应该将用户带到应用程序。我们通过我们的配置获取域URL。
- en: The next step is to send payload to the relevant devices. Buckle up, this will
    be a good chunk of code.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是向相关设备发送有效负载。准备好，这将是一大块代码。
- en: Sending to the tokens
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送到令牌
- en: 'Let''s write out the steps we need to take:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写出我们需要采取的步骤：
- en: Get a list of all tokens in our database.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取我们数据库中所有令牌的列表。
- en: Filter that list for only the tokens that don't belong to the user who sent
    the message.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 筛选该列表，仅保留不属于发送消息的用户的令牌。
- en: Send the notification to the devices.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向设备发送通知。
- en: If any devices fail to receive the notification due to an invalid or unregistered
    token, remove their tokens from the database.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果由于无效或未注册的令牌而导致任何设备无法接收通知，则从数据库中删除它们的令牌。
- en: The last step is to keep things clean by periodically removing invalid tokens
    from our database.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是定期从我们的数据库中删除无效令牌，以保持清洁。
- en: 'Okay, sounds like fun. Remember that this is all within the event listener
    of `onWrite`. Here''s the first step:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，听起来很有趣。请记住，这一切都在`onWrite`的事件监听器中。以下是第一步：
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This uses the database `.once` method to grab a one-time look at the token table.
    From there, we can proceed if we actually have some tokens saved.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用数据库的`.once`方法来一次性查看令牌表。从那里，如果我们实际上保存了一些令牌，我们就可以继续进行。
- en: 'To filter our results, we''ll do a loop very similar to our `findExistingToken`
    method:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了过滤我们的结果，我们将执行一个与我们的`findExistingToken`方法非常相似的循环：
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We loop through all tokens, and if the `user_id` does not match the `user_id`
    of the message, we push it into our array of valid tokens.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们循环遍历所有令牌，如果`user_id`与消息的`user_id`不匹配，我们将其推送到有效令牌数组中。
- en: 'Time for the third step; send the notification to every device, as illustrated:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 到了第三步了；向每个设备发送通知，如下所示：
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This is pretty straightforward. We pass `sendToDevice` an array of tokens, and
    our payload object.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单。我们向`sendToDevice`传递一个令牌数组和我们的有效负载对象。
- en: 'Lastly, let''s do the cleanup:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们进行清理：
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This code should be simple to look through, except perhaps returning the `Promise.all`.
    The reason for that is that called `remove()` on each token entry returns a promise,
    and we simply return the resolution of all such promises.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码应该很容易查看，除了可能会返回`Promise.all`。原因是在每个令牌条目上调用`remove()`会返回一个promise，我们只需返回所有这些promise的解析。
- en: 'Here''s the final file:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终文件：
- en: '[PRE31]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Testing our push notifications
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的推送通知
- en: Run `**yarn deploy**`, and then we can test out our push notifications.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`**yarn deploy**`，然后我们可以测试我们的推送通知。
- en: 'The easiest way to test it is to simply open up a tab of our deployed app,
    and then another version in an Incognito tab (using Chrome). Log in to each tab
    with different users, and when you send a message, you should see the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 测试它的最简单方法是简单地打开我们部署的应用程序的一个标签，然后在隐身标签中打开另一个版本（使用Chrome）。用不同的用户登录到每个标签，当你发送一条消息时，你应该看到以下内容：
- en: '![](../images/00057.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00057.jpeg)'
- en: Note that you must not have both tabs in focus; you need to open both tabs,
    but switch away from one, otherwise the notification won't display.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你不能同时拥有两个标签；你需要打开两个标签，但切换到另一个标签，否则通知不会显示。
- en: Debugging push notifications
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试推送通知
- en: If you encounter any problems, you can try the following steps.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到任何问题，你可以尝试以下步骤。
- en: Checking the Cloud Functions logs
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查云函数日志
- en: After you log in to `console.firebase.com`, under the Functions tab, there's
    a log tab that shows the execution of each function. Any errors will show up here
    and also, any of the old token deletions we configured. Check to ensure that A)
    the function is actually running when you send a message and B) there are no errors
    that interfere with the sending.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到`console.firebase.com`后，在“函数”选项卡下，有一个显示每个函数执行的日志选项卡。任何错误都会显示在这里，还有我们配置的任何旧令牌删除。检查以确保A）当你发送一条消息时函数实际上正在运行，B）没有干扰发送的任何错误。
- en: Checking the Service Worker
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查服务工作者
- en: As we said earlier, the Service Worker should update given any byte-difference
    in its size as well as after every reload if Update on reload is checked in Chrome
    DevTools | Application. However, even with those steps, I found that the service
    worker often did not actually update on redeployment. If you’re having problems,
    click on Unregister beside each instance under the Application | Service Workers
    tab of DevTools. Then, click on the name of each service worker file to ensure
    that the code matches what's in your `build` folder.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，服务工作者应该在其大小的任何字节差异以及在Chrome DevTools | Application中检查“重新加载时更新”后更新。然而，即使有了这些步骤，我发现服务工作者经常在重新部署时实际上并没有更新。如果你遇到问题，请在DevTools的Application
    | Service Workers标签下的每个实例旁边点击注销。然后，点击每个服务工作者文件的名称，以确保代码与你的`build`文件夹中的代码匹配。
- en: Checking the tokens
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查令牌
- en: Ensure that the tokens are saving and updating correctly in the database. There
    should be no duplicates with different user IDs.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 确保令牌在数据库中保存和更新正确。不应该有不同用户ID的重复。
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Push notifications are tricky. In this chapter, we had to write a lot of code
    with very few benchmarks to check in along the way. If you're running into problems,
    ensure that all your code matches the examples.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 推送通知很棘手。在本章中，我们不得不写很多代码，但很少有基准可以在其中检查。如果你遇到问题，请确保你的所有代码与示例匹配。
- en: Once your notifications are working, though, we'll have bridged a major gap
    between web apps and native applications. Now, it's time to take another step
    into the world of native apps, by making our apps installable by the user.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的通知功能正常工作，我们将填补网络应用和本地应用之间的重要差距。现在，是时候迈向本地应用的世界，让用户可以安装我们的应用程序了。
