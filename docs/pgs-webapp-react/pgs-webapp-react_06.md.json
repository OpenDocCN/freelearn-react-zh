["```jsx\nrender() {\n  return (\n    <div id=\"ChatContainer\">\n      <Header>\n        <button className=\"red\" onClick={this.handleLogout}>\n          Logout\n        </button>\n      </Header>\n      <div id=\"message-container\">\n\n </div>\n <div id=\"chat-input\">\n\n </div>\n     </div>\n   );\n}\n```", "```jsx\n<textarea placeholder=\"Add your message...\" />\n```", "```jsx\n<div id=\"chat-input\">\n  <textarea placeholder=\"Add your message...\" />\n  <button>\n <svg viewBox=\"0 0 24 24\">\n <path fill=\"#424242\" d=\"M2,21L23,12L2,3V10L17,12L2,14V21Z\" />\n </svg>\n </button>\n</div>\n```", "```jsx\n<div id=\"ChatContainer\" className=\"inner-container\">\n```", "```jsx\nstate = { newMessage: '' };\n```", "```jsx\nhandleInputChange = e => {\n  this.setState({ newMessage: e.target.value });\n};\n```", "```jsx\n<textarea\n    placeholder=\"Add your message...\"\n    onChange={this.handleInputChange}\n    value={this.state.newMessage} \n/>\n```", "```jsx\nhandleSubmit = () => {\n   this.props.onSubmit(this.state.newMessage);\n   this.setState({ newMessage: ‘’ });\n};\n```", "```jsx\n<button onClick={this.handleSubmit}>\n  <svg viewBox=\"0 0 24 24\">\n    <path fill=\"#424242\" d=\"M2,21L23,12L2,3V10L17,12L2,14V21Z\" />\n  </svg>\n</button>\n```", "```jsx\n<textarea\n    placeholder=\"Add your message...\"\n    onChange={this.handleInputChange}\n    onKeyDown={this.handleKeyDown}\n    value={this.state.newMessage} />\n```", "```jsx\nhandleKeyDown = e => {\n  if (e.key === 'Enter') {\n    e.preventDefault();\n    this.handleSubmit();\n  }\n}\n```", "```jsx\nimport React, { Component } from 'react';\nimport Header from './Header';\n\nexport default class ChatContainer extends Component {\n  state = { newMessage: '' };\n\n  handleLogout = () => {\n    firebase.auth().signOut();\n  };\n\n  handleInputChange = e => {\n    this.setState({ newMessage: e.target.value });\n  };\n\n  handleSubmit = () => {\n    this.props.onSubmit(this.state.newMessage);\n    this.setState({ newMessage: '' });\n  };\n\n  handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      this.handleSubmit();\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"ChatContainer\" className=\"inner-container\">\n        <Header>\n          <button className=\"red\" onClick={this.handleLogout}>\n            Logout\n          </button>\n        </Header>\n        <div id=\"message-container\" />\n        <div id=\"chat-input\">\n          <textarea\n            placeholder=\"Add your message...\"\n            onChange={this.handleInputChange}\n            onKeyDown={this.handleKeyDown}\n            value={this.state.newMessage}\n          />\n          <button onClick={this.handleSubmit}>\n            <svg viewBox=\"0 0 24 24\">\n              <path fill=\"#424242\" d=\"M2,21L23,12L2,3V10L17,12L2,14V21Z\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n```", "```jsx\n// in App.js\nhandleSubmitMessage = msg => {\n  // Send to database\n  console.log(msg);\n};\n```", "```jsx\n<Route exact path=\"/\" component={ChatContainer} />\n```", "```jsx\n<Route\n  exact\n  path=\"/\"\n  render={() => <ChatContainer onSubmit={this.handleSubmitMessage} />}\n/>\n```", "```jsx\n// App.js\nhandleSubmitMessage = msg => {\n  const data = {\n    msg,\n    author: this.state.user.email,\n    user_id: this.state.user.uid,\n    timestamp: Date.now()\n  };\n  // Send to database\n}\n```", "```jsx\nhandleSubmitMessage = (msg) => {\n  const data = {\n    msg,\n    author: this.state.user.email,\n    user_id: this.state.user.uid,\n    timestamp: Date.now()\n  };\n  firebase\n      .database()\n      .ref('messages/')\n      .push(data);\n}\n```", "```jsx\nclass App extends Component {\n  state = { user: null, messages: [] }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user });\n      } else {\n       this.props.history.push('/login')\n      }\n    });\n    firebase\n .database()\n .ref('/messages')\n .on('value', snapshot => {\n console.log(snapshot);\n });\n  }\n```", "```jsx\nfirebase.database().ref('/messages').on('value', snapshot => {\n  console.log(snapshot.val());\n});\n```", "```jsx\nclass App extends Component {\n  state = { user: null, messages: [] }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user });\n      } else {\n       this.props.history.push('/login')\n      }\n    });\n    firebase\n      .database()\n      .ref('/messages')\n      .on('value', snapshot => {\n        this.onMessage(snapshot);\n      });\n  }\n```", "```jsx\n  onMessage = snapshot => {\n    const messages = Object.keys(snapshot.val()).map(key => {\n      const msg = snapshot.val()[key];\n      msg.id = key;\n      return msg;\n    });\n    console.log(messages);\n  };\n```", "```jsx\nonMessage = (snapshot) => {\n  const messages = Object.keys(snapshot.val()).map(key => {\n    const msg = snapshot.val()[key]\n    msg.id = key\n    return msg\n  });\n  this.setState({ messages });\n}\n```", "```jsx\n<Route\n  exact\n  path=\"/\"\n  render={() => (\n    <ChatContainer\n      onSubmit={this.handleSubmitMessage}\n      messages={this.state.messages}\n    />\n  )}\n/>\n```", "```jsx\nimport React, { Component } from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport LoginContainer from './LoginContainer';\nimport ChatContainer from './ChatContainer';\nimport UserContainer from './UserContainer';\nimport './app.css';\n\nclass App extends Component {\n  state = { user: null, messages: [] };\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({ user });\n      } else {\n        this.props.history.push('/login');\n      }\n    });\n    firebase\n      .database()\n      .ref('/messages')\n      .on('value', snapshot => {\n        this.onMessage(snapshot);\n      });\n  }\n\n  onMessage = snapshot => {\n    const messages = Object.keys(snapshot.val()).map(key => {\n      const msg = snapshot.val()[key];\n      msg.id = key;\n      return msg;\n    });\n    this.setState({ messages });\n  };\n\n  handleSubmitMessage = msg => {\n    const data = {\n      msg,\n      author: this.state.user.email,\n      user_id: this.state.user.uid,\n      timestamp: Date.now()\n    };\n    firebase\n      .database()\n      .ref('messages/')\n      .push(data);\n  };\n\n  render() {\n    return (\n      <div id=\"container\">\n        <Route path=\"/login\" component={LoginContainer} />\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <ChatContainer\n              onSubmit={this.handleSubmitMessage}\n              messages={this.state.messages}\n            />\n          )}\n        />\n        <Route path=\"/users/:id\" component={UserContainer} />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n```", "```jsx\n<div id=\"message-container\">\n  {\n\n  }\n</div>\n```", "```jsx\n<div id=\"message-container\">\n  {this.props.messages.map(msg => (\n    <div key={msg.id} className=\"message\">\n      <p>{msg.msg}</p>\n    </div>\n  ))}\n</div>\n```", "```jsx\nimport { Link } from 'react-router-dom';\n```", "```jsx\n<div id=\"message-container\">\n  {this.props.messages.map(msg => (\n    <div key={msg.id} className=\"message\">\n      <p>{msg.msg}</p>\n      <p className=\"author\">\n <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>\n </p>\n    </div>\n  ))}\n</div>\n```", "```jsx\n<Route\n  exact\n  path=\"/\"\n  render={() => (\n    <ChatContainer\n      onSubmit={this.handleSubmitMessage}\n      user={this.state.user}\n      messages={this.state.messages}\n    />\n  )}\n/>\n```", "```jsx\n<div id=\"message-container\">\n  {this.props.messages.map(msg => (\n    <div\n      key={msg.id}\n      className={`message ${this.props.user.email === msg.author &&\n 'mine'}`}>\n      <p>{msg.msg}</p>\n      <p className=\"author\">\n        <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>\n      </p>\n    </div>\n  ))}\n</div>\n```", "```jsx\n<div id=\"message-container\">\n  {this.props.messages.map(msg => (\n    <div\n      key={msg.id}\n      className={`message ${this.props.user.email === msg.author &&\n        'mine'}`}>\n      <p>{msg.msg}</p>\n // Only if the next message's author is NOT the same as this message's    author, return the following:      <p className=\"author\">\n        <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>\n      </p>\n    </div>\n  ))}\n</div>\n```", "```jsx\n<div id=\"message-container\">\n  {this.props.messages.map((msg, i) => (\n    <div\n      key={msg.id}\n      className={`message ${this.props.user.email === msg.author &&\n        'mine'}`}>\n      <p>{msg.msg}</p>\n      {(!this.props.messages[i + 1] ||\n this.props.messages[i + 1].author !== msg.author) && (\n <p className=\"author\">\n <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>\n </p>\n )}\n    </div>\n  ))}\n</div>\n```", "```jsx\n<div id=\"message-container\">\n  {this.props.messages.map((msg, i) => (\n    <div\n      key={msg.id}\n      className={`message ${this.props.user.email === msg.author &&\n        'mine'}`}>\n      <p>{msg.msg}</p>\n      {this.getAuthor(msg, this.props.messages[i + 1])}\n    </div>\n  ))}\n</div>\n```", "```jsx\n  getAuthor = (msg, nextMsg) => {\n    if (!nextMsg || nextMsg.author !== msg.author) {\n      return (\n        <p className=\"author\">\n          <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>\n        </p>\n      );\n    }\n  };\n```", "```jsx\nexport default class ChatContainer extends Component {\n  state = { newMessage: '' };\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom = () => {\n\n  };\n```", "```jsx\ncomponentDidUpdate(previousProps) {\n  if (previousProps.messages.length !== this.props.messages.length) {\n    this.scrollToBottom();\n  }\n}\n```", "```jsx\n<div\n  id=\"message-container\"\n  ref={element => {\n    this.messageContainer = element;\n  }}>\n```", "```jsx\nimport ReactDOM from 'react-dom';\n```", "```jsx\n\nscrollToBottom = () => {\n  const messageContainer = ReactDOM.findDOMNode(this.messageContainer);\n}\n```", "```jsx\nscrollToBottom = () => {\n  const messageContainer = ReactDOM.findDOMNode(this.messageContainer);\n  if (messageContainer) {\n    messageContainer.scrollTop = messageContainer.scrollHeight;\n  }\n}\n```", "```jsx\n// Beginning of ChatContainer\n<Header>\n  <button className=\"red\" onClick={this.handleLogout}>\n    Logout\n  </button>\n</Header>\n{this.props.messagesLoaded ? (\n  <div\n    id=\"message-container\"\n    ref={element => {\n      this.messageContainer = element;\n    }}>\n    {this.props.messages.map((msg, i) => (\n      <div\n        key={msg.id}\n        className={`message ${this.props.user.email === msg.author &&\n          'mine'}`}>\n        <p>{msg.msg}</p>\n        {this.getAuthor(msg, this.props.messages[i + 1])}\n      </div>\n    ))}\n  </div>\n) : (\n <div id=\"loading-container\">\n <img src=\"img/icon.png\" alt=\"logo\" id=\"loader\" />\n </div>\n)}\n<div id=\"chat-input\">\n// Rest of ChatContainer\n```", "```jsx\nclass App extends Component {\n  state = { user: null, messages: [], messagesLoaded: false };\n```", "```jsx\ncomponentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({ user });\n      } else {\n        this.props.history.push('/login');\n      }\n    });\n    firebase\n      .database()\n      .ref('/messages')\n      .on('value', snapshot => {\n        this.onMessage(snapshot);\n        if (!this.state.messagesLoaded) {\n this.setState({ messagesLoaded: true });\n }\n      });\n  }\n```", "```jsx\n<Route exact path=\"/\" render={() => (\n  <ChatContainer\n    messagesLoaded={this.state.messagesLoaded}\n    onSubmit={this.handleSubmitMessage}\n    messages={this.state.messages}\n    user={this.state.user} />\n)} />\n```", "```jsx\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport Header from './Header';\n\nexport default class ChatContainer extends Component {\n  state = { newMessage: '' };\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate(previousProps) {\n    if (previousProps.messages.length !== this.props.messages.length) {\n      this.scrollToBottom();\n    }\n  }\n\n  scrollToBottom = () => {\n    const messageContainer = ReactDOM.findDOMNode(this.messageContainer);\n    if (messageContainer) {\n      messageContainer.scrollTop = messageContainer.scrollHeight;\n    }\n  };\n\n  handleLogout = () => {\n    firebase.auth().signOut();\n  };\n\n  handleInputChange = e => {\n    this.setState({ newMessage: e.target.value });\n  };\n\n  handleSubmit = () => {\n    this.props.onSubmit(this.state.newMessage);\n    this.setState({ newMessage: '' });\n  };\n\n  handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      this.handleSubmit();\n    }\n  };\n\n  getAuthor = (msg, nextMsg) => {\n    if (!nextMsg || nextMsg.author !== msg.author) {\n      return (\n        <p className=\"author\">\n          <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>\n        </p>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"ChatContainer\" className=\"inner-container\">\n        <Header>\n          <button className=\"red\" onClick={this.handleLogout}>\n            Logout\n          </button>\n        </Header>\n        {this.props.messagesLoaded ? (\n          <div\n            id=\"message-container\"\n            ref={element => {\n              this.messageContainer = element;\n            }}>\n            {this.props.messages.map((msg, i) => (\n              <div\n                key={msg.id}\n                className={`message ${this.props.user.email ===       \n                                                    msg.author &&\n                  'mine'}`}>\n                <p>{msg.msg}</p>\n                {this.getAuthor(msg, this.props.messages[i + 1])}\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div id=\"loading-container\">\n            <img src=\"img/icon.png\" alt=\"logo\" id=\"loader\" />\n          </div>\n        )}\n        <div id=\"chat-input\">\n          <textarea\n            placeholder=\"Add your message...\"\n            onChange={this.handleInputChange}\n            onKeyDown={this.handleKeyDown}\n            value={this.state.newMessage}\n          />\n          <button onClick={this.handleSubmit}>\n            <svg viewBox=\"0 0 24 24\">\n              <path fill=\"#424242\"  \n                d=\"M2,21L23,12L2,3V10L17,12L2,14V21Z\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n```", "```jsx\n<Route\n  path=\"/users/:id\"\n  render={({ history, match }) => (\n    <UserContainer\n      messages={this.state.messages}\n      messagesLoaded={this.state.messagesLoaded}\n      userID={match.params.id}\n    />\n  )}\n/>\n```", "```jsx\n<div id=\"UserContainer\" className=\"inner-container\">\n  <Header>\n    <Link to=\"/\">\n      <button className=\"red\">Back To Chat</button>\n    </Link>\n  </Header>\n  {this.props.messagesLoaded ? (\n <h1>Messages go here</h1>\n ) : (\n <div id=\"loading-container\">\n <img src=\"img/icon.png\" alt=\"logo\" id=\"loader\" />\n &lt;/div>\n )}\n</div>\n```", "```jsx\n{this.props.messagesLoaded ? (\n <div id=\"message-container\">\n {this.props.messages.map(msg => {\n if (msg.user_id === this.props.userID) {\n return (\n <div key={msg.id} className=\"message\">\n <p>{msg.msg}</p>\n </div>\n );\n }\n })}\n </div>\n) : (\n  <div id=\"loading-container\">\n    <img src=\"img/icon.png\" alt=\"logo\" id=\"loader\" />\n  </div>\n)}\n```", "```jsx\nexport default class UserContainer extends Component {\n  renderedUserEmail = false;\n\n  render() {\n    return (\n```", "```jsx\n<div id=\"message-container\">\n  {this.props.messages.map(msg => {\n    if (msg.user_id === this.props.userID) {\n      return (\n        <div key={msg.id} className=\"message\">\n          {this.getAuthor(msg.author)}\n          <p>{msg.msg}</p>\n        </div>\n      );\n    }\n  })}\n</div>\n```", "```jsx\n  getAuthor = author => {\n    if (!this.renderedUserEmail) {\n      this.renderedUserEmail = true;\n      return <p className=\"author\">{author}</p>;\n    }\n  };\n```", "```jsx\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Header from './Header';\n\nexport default class UserContainer extends Component {\n  renderedUserEmail = false;\n\n  getAuthor = author => {\n    if (!this.renderedUserEmail) {\n      this.renderedUserEmail = true;\n      return <p className=\"author\">{author}</p>;\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"UserContainer\" className=\"inner-container\">\n        <Header>\n          <Link to=\"/\">\n            <button className=\"red\">Back To Chat</button>\n          </Link>\n        </Header>\n        {this.props.messagesLoaded ? (\n          <div id=\"message-container\">\n            {this.props.messages.map(msg => {\n              if (msg.user_id === this.props.userID) {\n                return (\n                  <div key={msg.id} className=\"message\">\n                    {this.getAuthor(msg.author)}\n                    <p>{msg.msg}</p>\n                  </div>\n                );\n              }\n            })}\n          </div>\n        ) : (\n          <div id=\"loading-container\">\n            <img src=\"img/icon.png\" alt=\"logo\" id=\"loader\" />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n```"]