- en: Chunking JavaScript to Optimize Performance with Webpack
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Webpack对JavaScript进行分块以优化性能
- en: As we discussed in the last chapter, the biggest problem with converting React
    applications to Progressive Web Apps is React; more specifically, it's the amount
    of JavaScript that intrinsically comes along with building a modern JavaScript
    application. Parsing and running that JavaScript is the biggest single bottleneck
    for Chatastrophe’s performance.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中讨论的那样，将React应用程序转换为渐进式Web应用程序的最大问题是React；更具体地说，它是构建现代JavaScript应用程序时固有的大量JavaScript。解析和运行该JavaScript是Chatastrophe性能的最大瓶颈。
- en: In the last chapter, we took some measures to improve the perceived startup
    time of our application, by moving content out of our JavaScript and into our
    `index.html`. While this is a very effective method of displaying content to the
    user as quickly as possible, you'll note that we didn't do anything to actually
    change the size of our JavaScript, or reduce the time it takes to initialize all
    that React goodness.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们采取了一些措施来改善应用程序的感知启动时间，方法是将内容从JavaScript移出并放入我们的`index.html`中。虽然这是一种非常有效的向用户尽快显示内容的方法，但您会注意到，我们并没有做任何实际改变我们的JavaScript大小，或者减少初始化所有React功能所需的时间。
- en: Well, now's the time to do something about it. In this chapter, we'll look at
    how we can split up our JavaScript bundle for faster loading. We'll also introduce
    a new bit of Progressive Web App theory--the PRPL pattern.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候采取行动了。在本章中，我们将探讨如何将我们的JavaScript捆绑分割以实现更快的加载。我们还将介绍渐进式Web应用程序理论的一个新部分--PRPL模式。
- en: 'In this chapter, we''ll cover these topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is the PRPL pattern?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是PRPL模式？
- en: What is code splitting and how do we implement it?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是代码拆分，我们如何实现它？
- en: Creating our own higher-order component
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们自己的高阶组件
- en: Splitting code by route
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按路由拆分代码
- en: Lazy loading additional routes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟加载其他路由
- en: The PRPL pattern
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PRPL模式
- en: In the last chapter, we introduced some basic principles for performative apps.
    You want your user to spend as little time as possible waiting, which means loading
    the essentials as fast as possible and deferring loading the rest of the application
    to "idle" time for the processor.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了一些执行应用程序的基本原则。您希望用户尽可能少地等待，这意味着尽快加载必要的内容，并将其余的应用程序加载推迟到处理器的“空闲”时间。
- en: These two concepts form the 'I' and 'L' of the RAIL metric. We took a step toward
    improving the 'L' with the concept of the app shell. Now, we will move some of
    our 'L' (the initial load) into the 'I' (the idle time of our application) but,
    before we do that, let's introduce another acronym.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个概念构成RAIL指标的'I'和'L'。我们通过应用外壳的概念迈出了改善'L'的一步。现在，我们将把一些'L'（初始加载）移到'I'（应用程序的空闲时间），但在我们这样做之前，让我们介绍另一个缩写。
- en: '**PRPL** stands for **Push**, **Render**, **Pre-cache**, **Lazy-load**; it''s
    a step-by-step process for how an ideal application should get the content it
    needs from the server.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**PRPL**代表**推送**，**渲染**，**预缓存**，**延迟加载**；这是一个理想应用程序应该如何从服务器获取所需内容的逐步过程。'
- en: Before we dive in, however, I would like to caution the reader that the PRPL
    pattern is relatively new at the time of writing and may evolve quickly as Progressive
    Web Apps move into the mainstream. Like many of the concepts we've discussed in
    this book, it relies on experimental technology only available for certain browsers.
    This is cutting-edge stuff.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们深入讨论之前，我想警告读者，PRPL模式在撰写时相对较新，并且随着渐进式Web应用程序进入主流，可能会迅速发展。就像我们在本书中讨论的许多概念一样，它依赖于实验性技术，仅适用于某些浏览器。这是尖端的东西。
- en: 'This is how *Addy Osmani* puts it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是*Addy Osmani*的说法：
- en: For most real-world projects, it’s frankly too early to realize the PRPL vision
    in its purest, most complete form, but it’s definitely not too early to adopt
    the mindset, or to start chasing the vision from various angles. ([https://developers.google.com/web/fundamentals/performance/prpl-pattern/](https://developers.google.com/web/fundamentals/performance/prpl-pattern/))
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数现实世界的项目来说，以其最纯粹、最完整的形式实现PRPL愿景实际上还为时过早，但采用这种思维方式或从各个角度开始追求这一愿景绝对不为时过早。
    ([https://developers.google.com/web/fundamentals/performance/prpl-pattern/](https://developers.google.com/web/fundamentals/performance/prpl-pattern/))
- en: Let's go through each letter in turn and explain what it means for us and our
    application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们依次解释每个字母代表的意思，以及它对我们和我们的应用程序意味着什么。
- en: Push
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推送
- en: '*Addy Osmani* defines the PUSH of PRPL as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*Addy Osmani*将PRPL的PUSH定义如下：'
- en: “Push critical resources for the initial URL route.”
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “推送初始URL路由的关键资源。”
- en: Essentially, this means that your first priority is loading only what you need
    to render your initial route as fast as possible. Sound familiar? This is exactly
    the principle we followed with our application shell.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这意味着你的首要任务是尽快加载渲染初始路由所需的内容。听起来很熟悉吗？这正是我们在应用程序外壳中遵循的原则。
- en: A gentle definition of Push can be "load the critical content first, before
    anything else." This definition fits exactly with the app shell pattern, but it's
    not quite what *Osmani* means.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 推送的一个温和定义可以是“在任何其他内容之前，首先加载关键内容。”这个定义与应用程序外壳模式完全吻合，但这并不完全是*Osmani*的意思。
- en: The following section is a theoretical introduction to server *push* technology.
    Since we don't have control over our server (AKA Firebase), we won't be implementing
    this approach, but it's good to know about for your future PWAs that communicate
    with your own server.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分是对服务器*推送*技术的理论介绍。由于我们无法控制我们的服务器（又名Firebase），我们不会实施这种方法，但了解对于未来与自己的服务器通信的PWA是很有好处的。
- en: If you look at our `index.html`, you can see that it references several assets.
    It asks for the `favicon`, the `icon.png`, and `secrets.js`. After Webpack builds,
    it also requests our main JavaScript `bundle.js`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下我们的`index.html`，你会发现它引用了几个资产。它请求`favicon`，`icon.png`和`secrets.js`。在Webpack构建后，它还会请求我们的主JavaScript
    `bundle.js`。
- en: 'How a website normally works is like this: the browser requests `index.html`.
    Once it gets the file, it goes through and asks the server for all the dependencies
    listed earlier, each as a separate request.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 网站通常的工作方式是这样的：浏览器请求`index.html`。一旦得到文件，它会遍历并请求服务器上列出的所有依赖项，每个都作为单独的请求。
- en: The core inefficiency here is that `index.html` already contains all the information
    about its dependencies. In other words, when it responds with `index.html`, the
    server already "knows" what the browser will request next, so why not anticipate
    those requests and send all those dependencies along?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的核心低效性在于`index.html`已经包含了关于它的依赖项的所有信息。换句话说，当它响应`index.html`时，服务器已经“知道”浏览器接下来会请求什么，那么为什么不预期这些请求并发送所有这些依赖项呢？
- en: Enter HTTP 2.0 Server Push. This technology allows the server to create multiple
    responses to a single request. The browser asks for `index.html`, and gets `index.html`
    + `bundle.js` + `icon.png`, and so on.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 进入HTTP 2.0服务器推送。这项技术允许服务器对单个请求创建多个响应。浏览器请求`index.html`，然后得到`index.html` + `bundle.js`
    + `icon.png`，依此类推。
- en: As *Ilya Grigorik* puts it, Server Push "obsoletes inlining" ([https://www.igvita.com/2013/06/12/innovating-with-http-2.0-server-push/](https://www.igvita.com/2013/06/12/innovating-with-http-2.0-server-push/)).
    No longer do we have to inline our CSS to save trips to the server; we can program
    our server to send everything we need for our initial route in a single trip.
    This is exciting stuff; for more information (with a quick tutorial), check out
    the preceding link.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如*Ilya Grigorik*所说，服务器推送“使内联过时”（[https://www.igvita.com/2013/06/12/innovating-with-http-2.0-server-push/](https://www.igvita.com/2013/06/12/innovating-with-http-2.0-server-push/)）。我们不再需要内联我们的CSS来节省对服务器的请求；我们可以编写我们的服务器以在单次请求中发送我们初始路由所需的一切。这是令人兴奋的事情；有关更多信息（以及快速教程），请查看上述链接。
- en: Render
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染
- en: After (ideally) pushing all the necessary resources to the client, we render
    our initial route. Again, we have covered this already, with a fast render, thanks
    to the app shell pattern.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在（理想情况下）将所有必要的资源推送到客户端之后，我们渲染我们的初始路由。同样，由于应用程序外壳模式的快速渲染，我们已经涵盖了这一点。
- en: Pre-cache
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预缓存
- en: Once we have rendered our initial route, we still have assets required for the
    other routes. Precaching means that once those assets are loaded, they will go
    straight into the cache and, if they're requested again, we load them from the
    cache.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们渲染了初始路由，我们仍然需要其他路由所需的资源。预缓存意味着一旦加载了这些资源，它们将直接进入缓存，如果再次请求，我们将从缓存中加载它们。
- en: We'll cover this in more detail in the next chapter, as we move into the world
    of caching.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们进入缓存世界，我们将在下一章中更详细地介绍这一点。
- en: Lazy-load
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟加载
- en: Here's where the meat of this chapter will take place.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本章的重点所在。
- en: We want to load the resources needed for our initial route first, to get that
    initial rendering done as fast as possible. This means resources needed for other
    routes will not be loaded.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望首先加载我们初始路由所需的资源，以尽快完成初始渲染。这意味着不会加载其他路由所需的资源。
- en: In practical terms, this means that we want to load `LoginContainer` first (if
    the user is not logged in) and defer loading `UserContainer`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中，这意味着我们希望首先加载`LoginContainer`（如果用户尚未登录），并推迟加载`UserContainer`。
- en: However, once that initial route is rendered and the user can see the login
    screen, we want to prepare for the future. If they then click over to the `UserContainer`,
    we want to display it as fast as possible. This means loading `UserContainer`
    resources in the background, once loading the initial route is done.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一旦渲染了初始路由并且用户可以看到登录屏幕，我们希望为未来做好准备。如果他们随后切换到`UserContainer`，我们希望尽快显示它。这意味着一旦加载了初始路由，我们就会在后台加载`UserContainer`资源。
- en: This process is called **lazy-loading**--loading resources that aren't needed
    immediately, but may be needed in the future.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程被称为**延迟加载**-加载不需要立即使用的资源，但将来可能需要。
- en: The tool we use to do so is code splitting.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用来做到这一点的工具就是代码拆分。
- en: What is code splitting?
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是代码拆分？
- en: '**Code splitting** is the act of splitting up our JavaScript file into meaningful
    chunks in order to improve performance, but why do we need it?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码拆分**是将我们的JavaScript文件分割成有意义的块，以提高性能，但为什么我们需要它呢？'
- en: Well, when a user first accesses our application, we only need the JavaScript
    for the route they're currently on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，当用户首次访问我们的应用程序时，我们只需要当前所在路由的JavaScript。
- en: This means when they're on `/login`, we only need `LoginContainer.js` and its
    dependencies. We don't need `UserContainer.js`, so we want to immediately load
    `LoginContainer.js` and lazy-load `UserContainer.js`. However, our current Webpack
    setup creates a single `bundle.js` file. All our JavaScript is tied together and
    must be loaded together. Code splitting is a way to fix that. Instead of a single
    monolithic JavaScript file, we get multiple JavaScript files, one for each route.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当它们在`/login`时，我们只需要`LoginContainer.js`及其依赖项。我们不需要`UserContainer.js`，所以我们希望立即加载`LoginContainer.js`并延迟加载`UserContainer.js`。然而，我们当前的Webpack设置创建了一个单一的`bundle.js`文件。我们所有的JavaScript都被绑在一起，必须一起加载。代码拆分是解决这个问题的一种方法。我们不再是一个单一的庞大的JavaScript文件，而是得到了多个JavaScript文件，每个路由一个。
- en: So, we'll get one bundle for `/login`, one for `/user/:id`, and one for `/`.
    Additionally, we’ll get another `main` bundle with all the dependencies.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将得到一个用于`/login`，一个用于`/user/:id`，一个用于`/`的捆绑包。此外，我们还将得到另一个包含所有依赖项的`main`捆绑包。
- en: Whatever route the user visits first, they'll get the bundle for that route
    and the main bundle. In the background, meanwhile, we'll load the bundles for
    the other two routes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 无论用户首先访问哪个路由，他们都会得到该路由的捆绑包和主要捆绑包。与此同时，我们将在后台加载其他两个路由的捆绑包。
- en: Code splitting does not necessarily have to take place on a route-by-route basis,
    but it makes the most sense for our application. Additionally, code splitting
    with Webpack and React Router in this way is relatively straightforward to do.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 代码拆分不一定要基于路由进行，但对于我们的应用程序来说是最合理的。此外，使用Webpack和React Router进行这种方式的代码拆分相对来说是比较简单的。
- en: In fact, Webpack will handle this automatically for you, as long as you provide
    some basic setup. Let's get started with that setup!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，只要您提供一些基本的设置，Webpack就会自动处理这个问题。让我们开始吧！
- en: Webpack configuration
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack配置
- en: 'Our strategy, as discussed earlier, goes like this: we want to split our `bundle.js`
    into separate chunks, based on the route.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讨论过的策略是这样的：我们希望根据路由将我们的`bundle.js`拆分成单独的块。
- en: 'The purpose of this section is to do two things: one, set up a naming convention
    for the chunks of JavaScript, and two, add support for conditional imports (more
    on those soon).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的目的是做两件事：一是为JavaScript的块设置命名约定，二是为条件导入添加支持（稍后会详细介绍）。
- en: Open up `webpack.config.prod.js` and let's do the first step (this only applies
    to the `PRODUCTION` build, so only modify our production Webpack config; we don't
    need code splitting in development).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`webpack.config.prod.js`，让我们进行第一步（这仅适用于`PRODUCTION`构建，因此只修改我们的生产Webpack配置；我们不需要在开发中进行代码拆分）。
- en: 'As it stands, our output configuration looks like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前而言，我们的输出配置如下：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We create a single JavaScript file in our `build` folder, named `bundle.js`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`build`文件夹中创建一个名为`bundle.js`的单个JavaScript文件。
- en: 'Let''s change this whole section to the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将整个部分改为以下内容：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What's going on here?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？
- en: First, we're moving our JavaScript output to `build/static/js`, just for organization
    purposes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将我们的JavaScript输出移动到`build/static/js`，仅仅是为了组织目的。
- en: 'Next, we''re using two variables in our naming: `name` and `hash`. The name
    variable is automatically generated by Webpack, using a numbering convention for
    our chunks. We''ll see that in a second.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在我们的命名中使用了两个变量：`name`和`hash`。`name`变量是由Webpack自动生成的，使用了我们的块的编号约定。我们马上就会看到这一点。
- en: Then, we use a `hash` variable. Every single time Webpack builds, it generates
    a new hash--a string of random letters and numbers. We use those to name our files
    so that each build will have distinct filenames. This will be important in the
    next chapter because it means our users will never have the issue of the app having
    been updated, but the cache still holding on to the old files. Since the new files
    will have new names, they will be downloaded instead of whatever is in the cache.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用一个`hash`变量。每次Webpack构建时，它都会生成一个新的哈希--一串随机字母和数字。我们使用这些来命名我们的文件，这样每次构建都会有不同的文件名。这在下一章中将很重要，因为这意味着我们的用户永远不会遇到应用程序已更新但缓存仍然保留旧文件的问题。由于新文件将具有新名称，它们将被下载，而不是缓存中的任何内容。
- en: Next, we're appending a `.chunk` to our code split files (the files for each
    route). This isn't necessary, but it's recommended if you want to do any special
    caching with your chunks.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们的代码拆分文件（每个路由的文件）后添加一个`.chunk`。这并非必需，但如果您想对块进行任何特殊缓存，建议这样做。
- en: All of the mentioned will make a lot more sense once our code splitting is complete,
    so let's get there as soon as possible! However, before we move on, we need to
    add one more thing to our Webpack config.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的代码拆分完成，所有提到的内容将更加清晰，所以让我们尽快完成吧！然而，在继续之前，我们需要在我们的Webpack配置中再添加一件事。
- en: Babel stage 1
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Babel阶段1
- en: As we explained in the Webpack chapter, Babel is the tool we use to allow us
    to use cutting edge JavaScript features and then transpile those into a version
    of JavaScript the browser will understand.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在Webpack章节中解释的那样，Babel是我们用来允许我们使用尖端JavaScript功能，然后将其转译为浏览器将理解的JavaScript版本的工具。
- en: 'In this chapter, we will use another cutting edge feature: conditional imports.
    Before we get started with those, however, we need to change our Babel configuration.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用另一个尖端功能：条件导入。然而，在开始之前，我们需要更改我们的Babel配置。
- en: 'The JavaScript language is constantly evolving. The committee in charge of
    updating it is called TC39 and they develop updates according to the **TC39 process.**
    It works as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript语言不断发展。负责更新它的委员会称为TC39，他们根据TC39流程开发更新。它的工作方式如下：
- en: A new JavaScript feature is suggested, at which point it is called "stage 0"
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议一个新的JavaScript功能，此时它被称为“阶段0”
- en: A proposal is created for how it will work ("stage 1")
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为其工作创建一个提案（“阶段1”）
- en: An implementation is created ("stage 2")
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个实现（“阶段2”）
- en: It is polished for inclusion ("stage 3")
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它被打磨以包含（“阶段3”）
- en: It is added to the language
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它被添加到语言中
- en: At any point in time, there are multiple features in every stage. The problem
    is that JavaScript developers are impatient, and any time they hear about a neat
    feature, they want to start using it, even if it’s in stage 3, or 2, or even 0.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候，每个阶段都有多个功能。问题在于JavaScript开发人员很不耐烦，每当他们听说一个新功能时，即使它处于第3阶段、第2阶段甚至第0阶段，他们也想开始使用它。
- en: Babel provides a way of doing so with its **stage** presets. You can install
    a preset for each stage and get access to all the features currently in that stage.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Babel提供了一种方法来做到这一点，即其**stage**预设。您可以为每个阶段安装一个预设，并获得当前处于该阶段的所有功能。
- en: 'The feature we''re interested in (conditional imports) is currently in stage
    2\. In order to use it, we need to install the appropriate babel preset:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感兴趣的功能（条件导入）目前处于第2阶段。为了使用它，我们需要安装适当的babel预设：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, in both Webpack configs, add it under module | loaders | the JavaScript
    test | query | presets:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在两个Webpack配置中，将其添加到module | loaders | JavaScript测试 | query | presets下：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Remember to add this to both `webpack.config.js` and `webpack.config.prod.js`.
    We'll need it in both production and development.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 记得将其添加到`webpack.config.js`和`webpack.config.prod.js`中。我们在生产和开发中都需要它。
- en: Conditional imports
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件导入
- en: With that done, it's time to ask what conditional imports are.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 搞定了这些，现在是时候问一下条件导入是什么了。
- en: 'Right now, we import all our dependencies at the top of each JavaScript file,
    as shown:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们在每个JavaScript文件的顶部导入所有的依赖项，如下所示：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We will always need React, so this import makes sense. It's static, in that
    it will never change, but the preceding means that React is a dependency of this
    file and it will always need to be loaded.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们始终需要React，所以这个导入是有意义的。它是静态的，因为它永远不会改变，但前面的意思是React是这个文件的依赖项，它将始终需要被加载。
- en: 'Currently, in `App.js`, we do the same with each container:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，在`App.js`中，我们对每个容器都是这样做的：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Doing so means that those containers are a dependency of `App.js`, so Webpack
    will always bundle them together; we can't split them apart.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做意味着这些容器是`App.js`的依赖，所以Webpack将始终将它们捆绑在一起；我们无法将它们分开。
- en: Instead, we want to import them conditionally, only when we need them.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们希望在需要时有条件地导入它们。
- en: 'The mechanism to do so is a little complicated, but it will look as follows, in
    essence:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的机制有点复杂，但本质上看起来是这样的：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So, how can we implement this?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们该如何实现呢？
- en: Higher-order components
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高阶组件
- en: We discussed higher-order components in [Chapter 5](part0086.html#2I0GC0-7dd7c66301294003b85168009fe95fa4),
    *Routing with React*, with the discussion of `withRouter` from React Router; now,
    we will build one, but first, let's take a quick refresher.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第5章](part0086.html#2I0GC0-7dd7c66301294003b85168009fe95fa4)中讨论了高阶组件，*使用React进行路由*，讨论了来自React
    Router的`withRouter`；现在，我们将构建一个，但首先，让我们快速复习一下。
- en: Higher-order components are a fantastically useful pattern in React. If you
    learn to use them well, you'll open up a whole bunch of possibilities to keep
    a large code base maintainable and reusable, but they’re not as intuitive as regular
    components, so let's ensure that we cover them well.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 高阶组件在React中是一个非常有用的模式。如果你学会了如何使用它们，你将打开一系列可能性，使得大型代码库易于维护和可重用，但它们并不像常规组件那样直观，所以让我们确保我们充分涵盖它们。
- en: At a most basic level, a higher-order component is a function that returns a
    component.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在最基本的层面上，高阶组件是一个返回组件的函数。
- en: 'Imagine that we have a `button` component:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下我们有一个`button`组件：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This can also be written using `class` syntax, if you''re more familiar with
    that:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更熟悉`class`语法，也可以用这种方式来写：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We use a color prop to control the color of the text. Let's say we use this
    button all over our application. Often, we find ourselves setting the text to
    red--about 50% of the time.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个颜色属性来控制文本的颜色。假设我们在整个应用程序中都使用这个按钮。通常情况下，我们发现自己将文本设置为红色--大约50%的时间。
- en: We can simply continue to pass the `color=”red”` prop to our button. This will,
    in this contrived example, be the superior choice, but we can also make a higher-order
    component which, in more complex use cases, is the way to go (as we shall see).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地继续将`color=”red”`属性传递给我们的按钮。在这个假设的例子中，这将是更好的选择，但在更复杂的用例中，我们也可以制作一个高阶组件（正如我们将看到的）。
- en: 'Let’s create a function called `RedColouredComponent`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`RedColouredComponent`的函数：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The function takes in a component as an argument. All it does is return a component
    class, which in turn returns that component with the `color=”red”` prop applied.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受一个组件作为参数。它所做的就是返回一个组件类，然后返回该组件并应用`color=”red”`属性。
- en: 'We can then render our button in another file, as illustrated:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在另一个文件中渲染我们的按钮，如下所示：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Then, we can pass any component to `RedColouredComponent` and thus create a
    red-colored version.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将任何组件传递给`RedColouredComponent`，从而创建一个红色版本。
- en: Doing so opens up new worlds of composition--creating components out of combinations
    of higher-order components.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做打开了新的组合世界--通过高阶组件的组合创建组件。
- en: This is the essence of React, after all--composing UI out of reusable bits of
    code. Higher order components are a great way to keep our application clean and
    maintainable, but enough of contrived examples, let’s make our own now!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这毕竟是React的本质——用可重用的代码片段组合UI。高阶组件是保持我们的应用程序清晰和可维护的好方法，但是足够的人为例子，现在让我们自己来做吧！
- en: AsyncComponent
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AsyncComponent
- en: The goal of this section is to create a higher-order component that helps us
    with code splitting.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目标是创建一个帮助我们进行代码拆分的高阶组件。
- en: This component will only load its dependencies when it is rendered, or when
    we explicitly tell it to. This means that if we pass it `LoginContainer.js`, it
    will only load that file when the user navigates to `/login`, or if we tell it
    to load it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件只有在渲染时才会加载它的依赖项，或者当我们明确告诉它要加载它时。这意味着，如果我们传递给它`LoginContainer.js`，它只会在用户导航到`/login`时加载该文件，或者我们告诉它加载它时。
- en: In other words, this component will give us complete control over when our JavaScript
    files are loaded and opens up the world of lazy loading. However, it also means
    that whenever a route is rendered, the relevant files will be automatically loaded.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，这个组件将完全控制我们的JavaScript文件何时加载，并打开了懒加载的世界。然而，这也意味着每当渲染一个路由时，相关文件将自动加载。
- en: If that sounds abstract, let's see it in action.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这听起来抽象，让我们看看它的实际应用。
- en: 'Create a new file in your `components/` directory called `AsyncComponent.js` and
    add the basic skeleton, as demonstrated:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`components/`目录中创建一个名为`AsyncComponent.js`的新文件，并添加基本的骨架，如下所示：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`asyncComponent` is a function that takes an import statement as an argument,
    which we call `getComponent`. We know that, as a higher-order component, it will
    return a `component` class:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncComponent`是一个以导入语句作为参数的函数，我们称之为`getComponent`。我们知道，作为一个高阶组件，它将返回一个`component`类：'
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The key for `AsyncComponent` will be the `componentWillMount` life cycle method.
    This is when `AsyncComponent` will know to go get the dependency file. In this
    way, the component waits until it is needed, before loading in any files.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`AsyncComponent`的关键将是`componentWillMount`生命周期方法。这是`AsyncComponent`将知道何时去获取依赖文件的时候。这样，组件在需要之前等待，然后加载任何文件。'
- en: 'However, what do we do with the component after we get it? Simple, store it
    in state:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们得到组件后，我们该怎么办呢？简单，将其存储在状态中：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If we have not yet loaded the component, go import it (we''ll assume that `getComponent`
    returns a `Promise`). Once the import is complete, set the state to the imported
    component, which in turn means our `render` should look like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还没有加载组件，就去导入它（我们假设`getComponent`返回一个`Promise`）。一旦导入完成，将状态设置为导入的组件，这意味着我们的`render`应该是这样的：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: All this should look familiar to you, except perhaps the `{...this.props}` in
    the `return` statement. This is the JavaScript spread operator. It's a complicated
    little thing (more on it at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator))
    but in this case, it basically means take the `this.props` object and copy all
    its keys and values onto the `props` of `Component`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些对你来说应该很熟悉，除了`return`语句中的`{...this.props}`。这是JavaScript的展开运算符。这是一个复杂的小东西（更多信息请参见[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator)），但在这种情况下，它基本上意味着将`this.props`对象的所有键和值复制到`Component`的`props`上。
- en: In this way, we can pass props to the component returned by `asyncComponent` and
    have them passed to the `Component` rendered. Every prop applied to `AsyncComponent`
    will be applied to the `Component` in its `render` function.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以将props传递给`asyncComponent`返回的组件，并将它们传递给`Component`渲染。应用于`AsyncComponent`的每个prop都将应用于其`render`函数中的`Component`。
- en: 'The full component, for reference, is as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 供参考的完整组件如下：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Route splitting
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由拆分
- en: Let's hop back to `App.js`, and bring it all together.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到`App.js`，把它全部整合起来。
- en: 'First, we''ll eliminate App''s dependence on the three containers. Replace
    those imports with an import for `AsyncComponent` so that the top of the file
    looks like this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将消除App对这三个容器的依赖。用`AsyncComponent`的导入替换这些导入，使文件顶部看起来像这样：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, we will define three `load()` functions, one for each container. These
    are the functions we''ll pass to `asyncComponent`. They must return a promise:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义三个`load()`函数，每个容器一个。这些是我们将传递给`asyncComponent`的函数。它们必须返回一个promise：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Behold the magic of conditional imports. When these functions are called, the
    three JavaScript files will be imported. We then grab the export default from
    each file and `resolve()` the `Promise` with it.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 看，条件导入的魔力。当调用这些函数时，将导入三个JavaScript文件。然后我们从每个文件中获取默认导出，并用它来`resolve()` `Promise`。
- en: 'This means we can redefine our components inside `App.js`, as shown, after
    the preceding function declarations (which come after the import statements at
    the top of the file):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以在`App.js`中重新定义我们的组件，如下所示，在前面的函数声明之后（这些函数声明在文件顶部的导入语句之后）：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: No other changes are necessary! You can keep the app's `render` statement exactly
    the same. Now, when we refer to `ChatContainer`, it refers to the `AsyncComponent`
    wrapper around `loadChat…`, which will go get `ChatContainer.js` when needed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要其他更改！您可以保持应用程序的`render`语句完全相同。现在，当我们提到`ChatContainer`时，它指的是`loadChat…`周围的`AsyncComponent`包装器，它在需要时会获取`ChatContainer.js`。
- en: 'Let''s see whether it works. Run `yarn build`, and look at the output:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是否有效。运行`yarn build`，并查看输出：
- en: '![](../images/00086.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00086.jpeg)'
- en: We have four JavaScript files instead of one. We have our `main.js` file, which
    contains `App.js` plus our necessary `node_modules`. Then, we have three chunks,
    one for each container.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有四个JavaScript文件而不是一个。我们有我们的`main.js`文件，其中包含`App.js`加上我们必需的`node_modules`。然后，我们有三个块，每个容器一个。
- en: Take a look at the file sizes as well and you can see that we didn't gain all
    too much by this code splitting, a few kilobytes were shed from the main file.
    However, as our app grows, and each route becomes much more complicated, the benefits
    of code splitting will scale with it. How easy was that?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 还要查看文件大小，您会发现我们并没有通过这种代码拆分获得太多好处，主文件减少了几千字节。然而，随着我们的应用程序增长，每个路由变得更加复杂，代码拆分的好处也会随之增加。这有多简单？
- en: Lazy loading
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 懒加载
- en: Lazy loading is the last piece of our PRPL puzzle and is the process of using
    our application's idle time to load the rest of the JavaScript.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 懒加载是我们PRPL拼图的最后一块，它是利用应用程序的空闲时间来加载其余的JavaScript的过程。
- en: 'If you **`yarn deploy`** our application and navigate to the Network tab in
    DevTools, you''ll see something similar to the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您**`yarn deploy`**我们的应用程序并导航到DevTools中的网络选项卡，您将看到类似以下的内容：
- en: '![](../images/00087.jpeg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00087.jpeg)'
- en: We load our main file and then whatever chunk is relevant to the current URL,
    but then we stop.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们加载我们的主文件，然后加载与当前URL相关的任何块，然后停止。
- en: We're not loading the other routes during the idle time of our application!
    We need some way to trigger that loading process as soon as the initial route
    rendering is done, as soon as the `App` has mounted.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在应用程序的空闲时间内没有加载其他路由！我们需要一种方式来触发加载过程，即在初始路由渲染完成后，即`App`挂载后。
- en: 'I think you know where this is going. In the `componentDidMount` method of
    `App`, we simply need to call our three loading methods:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我想你知道这将会发生什么。在`App`的`componentDidMount`方法中，我们只需要调用我们的三个加载方法：
- en: '[PRE19]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, whenever we're done rendering the current route, we'll get the other routes
    ready to go as well.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当我们完成渲染当前路由时，我们也会准备好其他路由。
- en: 'If you open the Performance tab of DevTools again, you will see this reflected
    in the network requests:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您再次打开DevTools的性能选项卡，您将看到网络请求中反映出这一点：
- en: '![](../images/00088.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00088.jpeg)'
- en: To the left, the bottom yellow chunk is our `main.js` file being loaded. This
    means our app can start initialized. To the right, the three yellow blocks correspond
    to our three route chunks. The one we need is loaded first, followed soon after
    by the other two.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在左边，底部的黄色块是我们加载的`main.js`文件。这意味着我们的应用程序可以开始初始化。在右边，三个黄色块对应我们的三个路由块。我们首先加载需要的块，然后很快加载其他两个块。
- en: We're now using much more of our application’s idle time, spreading out the
    work of initializing our app.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在更多地利用了应用程序的空闲时间，分散了初始化应用程序的工作。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We covered a lot in this chapter, taking enormous strides to a more performative
    app. We split up our JavaScript by route and streamlined the loading process so
    that we load what we need and defer the rest to idle time.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了很多内容，大步迈向了更高性能的应用程序。我们按路由拆分了我们的JavaScript，并简化了加载过程，以便加载我们需要的内容，并将其推迟到空闲时间。
- en: However, all of this was really just paving the way for the next section. We
    need our app to perform under all network conditions, even an absence of any network.
    How can we make our application work offline?
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，所有这些实际上只是为下一节铺平了道路。我们需要我们的应用程序在所有网络条件下都能正常运行，甚至在没有任何网络的情况下。我们如何使我们的应用程序在离线状态下工作？
- en: Next, we dive into the world of caching and further improve our app's performance
    for any network condition, even the absence of a network.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入研究缓存的世界，并进一步改善我们应用程序在任何网络条件下的性能，甚至在没有网络的情况下。
