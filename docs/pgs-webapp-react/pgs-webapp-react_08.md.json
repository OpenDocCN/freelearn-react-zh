["```jsx\nexport default class NotificationResource {\n\n}\n```", "```jsx\nimport NotificationResource from '../resources/NotificationResource';\n```", "```jsx\ncomponentDidMount() {\n   this.notifications = new NotificationResource();\n```", "```jsx\ncomponentDidMount() {\n   this.notifications = new NotificationResource(firebase.messaging());\n```", "```jsx\nexport default class NotificationResource {\n  constructor(messaging) {\n    console.log(\u201cInstantiated!\u201d);\n  }\n}\n```", "```jsx\nexport default class NotificationResource {\n     constructor(messaging) {\n       this.messaging = messaging;\n try {\n this.messaging\n .requestPermission()\n .then(res => {\n console.log('Permission granted');\n })\n .catch(err => {\n console.log('no access', err);\n });\n } catch(err) {\n console.log('No notification support.', err);\n }\n} } \n```", "```jsx\n export default class NotificationResource {\n     constructor(messaging) {\n       this.messaging = messaging;\n      try {\n        this.messaging\n          .requestPermission()\n          .then(res => {\n            console.log('Permission granted');\n          })\n         .catch(err => {\n          console.log('no access', err);\n          });\n      } catch(err) {\n        console.log('No notification support.', err);\n      }\n};\n   this.messaging.getToken().then(res => {\n console.log(res);\n });\n }\n\n```", "```jsx\n   export default class NotificationResource {\n     constructor(messaging) {\n       this.messaging = messaging;\n      try {\n        this.messaging\n          .requestPermission()\n          .then(res => {\n            console.log('Permission granted');\n          })\n         .catch(err => {\n          console.log('no access', err);\n          });\n      } catch(err) {\n        console.log('No notification support.', err);\n      }\n  } \n} \n```", "```jsx\n setupTokenRefresh() {\n   this.messaging.onTokenRefresh(() => {\n     this.saveTokenToServer();\n   });\n }\n\n saveTokenToServer() {\n   // Get token\n   // Look for existing token\n   // If it exists, replace\n   // Otherwise, create a new one\n }\n```", "```jsx\nsaveTokenToServer() {\n   this.messaging.getToken().then(res => {\n     // Look for existing token\n     // If it exists, replace\n     // Otherwise, create a new one\n   });\n }\n```", "```jsx\nexport default class NotificationResource {\n  allTokens = [];\n tokensLoaded = false;\n\n  constructor(messaging, database) {\n    this.database = database;\n    this.messaging = messaging;\n         try {\n        this.messaging\n          .requestPermission()\n          .then(res => {\n            console.log('Permission granted');\n          })\n         .catch(err => {\n          console.log('no access', err);\n          });\n      } catch(err) {\n        console.log('No notification support.', err);\n      }};\n    this.setupTokenRefresh();\n    this.database.ref('/fcmTokens').on('value', snapshot => {\n this.allTokens = snapshot.val();\n this.tokensLoaded = true;\n });\n  }\n```", "```jsx\ncomponentDidMount() {\n   this.notifications = new NotificationResource(\n      firebase.messaging(),\n      firebase.database()\n    );\n```", "```jsx\nsaveTokenToServer() {\n   this.messaging.getToken().then(res => {\n     if (this.tokensLoaded) {\n       const existingToken = this.findExistingToken(res);\n       if (existingToken) {\n         // Replace existing toke\n       } else {\n         // Create a new one\n       }\n     }\n   });\n }\n```", "```jsx\nfindExistingToken(tokenToSave) {\n   for (let tokenKey in this.allTokens) {\n     const token = this.allTokens[tokenKey].token;\n     if (token === tokenToSave) {\n       return tokenKey;\n     }\n   }\n   return false;\n }\n```", "```jsx\ncomponentDidMount() {\n   this.notifications = new NotificationResource(firebase.messaging(), firebase.database());\n  firebase.auth().onAuthStateChanged((user) => {\n     if (user) {\n       this.setState({ user });\n       this.listenForMessages();\n       this.notifications.changeUser(user);\n     } else {\n       this.props.history.push('/login')\n     }\n   });\n```", "```jsx\nchangeUser(user) {\n   this.user = user;\n }\n```", "```jsx\nchangeUser(user) {\n   this.user = user;\n   this.saveTokenToServer();\n }\n```", "```jsx\nsaveTokenToServer() {\n   this.messaging.getToken().then(res => {\n     if (this.tokensLoaded) {\n       const existingToken = this.findExistingToken(res);\n       if (existingToken) {\n         // Replace existing token\n       } else {\n         this.registerToken(res);\n       }\n     }\n   });\n }\n```", "```jsx\n  registerToken(token) {\n    firebase\n      .database()\n      .ref('fcmTokens/')\n      .push({\n        token: token,\n        user_id: this.user.uid\n      });\n  }\n```", "```jsx\nsaveTokenToServer() {\n   this.messaging.getToken().then(res => {\n     if (this.tokensLoaded) {\n       const existingToken = this.findExistingToken(res);\n       if (existingToken) {\n         console.log(existingToken);\n       } else {\n         this.registerToken(res);\n       }\n     }\n   });\n }\n```", "```jsx\nsaveTokenToServer() {\n  this.messaging.getToken().then(res => {\n    if (this.tokensLoaded) {\n      const existingToken = this.findExistingToken(res);\n      if (existingToken) {\n        firebase\n .database()\n .ref(`/fcmTokens/${existingToken}`)\n .set({\n token: res,\n user_id: this.user.uid\n });\n      } else {\n        this.registerToken(res);\n      }\n    }\n  });\n}\n```", "```jsx\nexport default class NotificationResource {\n  allTokens = [];\n  tokensLoaded = false;\n  user = null;\n\n  constructor(messaging, database) {\n    this.messaging = messaging;\n    this.database = database;\n          try {\n        this.messaging\n          .requestPermission()\n          .then(res => {\n            console.log('Permission granted');\n          })\n         .catch(err => {\n          console.log('no access', err);\n          });\n      } catch(err) {\n        console.log('No notification support.', err);\n      };\n    this.setupTokenRefresh();\n    this.database.ref('/fcmTokens').on('value', snapshot => {\n      this.allTokens = snapshot.val();\n      this.tokensLoaded = true;\n    });\n  }\n\n  setupTokenRefresh() {\n    this.messaging.onTokenRefresh(() => {\n      this.saveTokenToServer();\n    });\n  }\n\n  saveTokenToServer() {\n    this.messaging.getToken().then(res => {\n      if (this.tokensLoaded) {\n        const existingToken = this.findExistingToken(res);\n        if (existingToken) {\n          firebase\n            .database()\n            .ref(`/fcmTokens/${existingToken}`)\n            .set({\n              token: res,\n              user_id: this.user.uid\n            });\n        } else {\n          this.registerToken(res);\n        }\n      }\n    });\n  }\n\n  registerToken(token) {\n    firebase\n      .database()\n      .ref('fcmTokens/')\n      .push({\n        token: token,\n        user_id: this.user.uid\n      });\n  }\n\n  findExistingToken(tokenToSave) {\n    for (let tokenKey in this.allTokens) {\n      const token = this.allTokens[tokenKey].token;\n      if (token === tokenToSave) {\n        return tokenKey;\n      }\n    }\n    return false;\n  }\n\n  changeUser(user) {\n    this.user = user;\n    this.saveTokenToServer();\n  }\n}\n```", "```jsx\nconst functions = require('firebase-functions');\nconst admin = require('firebase-admin');\nadmin.initializeApp(functions.config().firebase);\n```", "```jsx\nexports.sendNotifications = functions.database\n  .ref('/messages/{messageId}')\n  .onWrite(event => {});\n```", "```jsx\n const snapshot = event.data;\n```", "```jsx\nconst snapshot = event.data;\nif (snapshot.previous.val()) {\n   return;\n }\n```", "```jsx\nconst payload = {\n   notification: {\n     title: `${snapshot.val().author}`,\n     body: `${snapshot.val().msg}`,\n     icon: 'assets/icon.png',\n     click_action: `https://${functions.config().firebase.authDomain}`\n   }\n };\n```", "```jsx\nreturn admin\n      .database()\n      .ref('fcmTokens')\n      .once('value')\n      .then(allTokens => {\n        if (allTokens.val()) {\n\n        }\n      });\n```", "```jsx\n.then(allTokens => {\n  if (allTokens.val()) {\n    const tokens = [];\n for (let fcmTokenKey in allTokens.val()) {\n const fcmToken = allTokens.val()[fcmTokenKey];\n if (fcmToken.user_id !== snapshot.val().user_id) {\n tokens.push(fcmToken.token);\n }\n }\n  }\n});\n```", "```jsx\n.then(allTokens => {\n  if (allTokens.val()) {\n    const tokens = [];\n    for (let fcmTokenKey in allTokens.val()) {\n      const fcmToken = allTokens.val()[fcmTokenKey];\n      if (fcmToken.user_id !== snapshot.val().user_id) {\n        tokens.push(fcmToken.token);\n      }\n    }\n    if (tokens.length > 0) {\n return admin\n .messaging()\n .sendToDevice(tokens, payload)\n .then(response => {});\n }\n  }\n});\n```", "```jsx\nif (tokens.length > 0) {\n  return admin\n    .messaging()\n    .sendToDevice(tokens, payload)\n    .then(response => {\n      const tokensToRemove = [];\n response.results.forEach((result, index) => {\n const error = result.error;\n if (error) {\n console.error(\n 'Failure sending notification to',\n tokens[index],\n error\n );\n if (\n error.code === 'messaging/invalid-registration-token' ||\n error.code ===\n 'messaging/registration-token-not-registered'\n ) {\n tokensToRemove.push(\n allTokens.ref.child(tokens[index]).remove()\n );\n }\n }\n });\n return Promise.all(tokensToRemove);\n });\n}\n```", "```jsx\nconst functions = require('firebase-functions');\nconst admin = require('firebase-admin');\nadmin.initializeApp(functions.config().firebase);\n\nexports.sendNotifications = functions.database\n  .ref('/messages/{messageId}')\n  .onWrite(event => {\n    const snapshot = event.data;\n    if (snapshot.previous.val()) {\n      return;\n    }\n    const payload = {\n      notification: {\n        title: `${snapshot.val().author}`,\n        body: `${snapshot.val().msg}`,\n        icon: 'assets/icon.png',\n        click_action: `https://${functions.config().firebase.authDomain}`\n      }\n    };\n    return admin\n      .database()\n      .ref('fcmTokens')\n      .once('value')\n      .then(allTokens => {\n        if (allTokens.val()) {\n          const tokens = [];\n          for (let fcmTokenKey in allTokens.val()) {\n            const fcmToken = allTokens.val()[fcmTokenKey];\n            if (fcmToken.user_id !== snapshot.val().user_id) {\n              tokens.push(fcmToken.token);\n            }\n          }\n          if (tokens.length > 0) {\n            return admin\n              .messaging()\n              .sendToDevice(tokens, payload)\n              .then(response => {\n                const tokensToRemove = [];\n                response.results.forEach((result, index) => {\n                  const error = result.error;\n                  if (error) {\n                    console.error(\n                      'Failure sending notification to',\n                      tokens[index],\n                      error\n                    );\n                    if (\n                      error.code === 'messaging/invalid-registration-token' ||\n                      error.code ===\n                        'messaging/registration-token-not-registered'\n                    ) {\n                      tokensToRemove.push(\n                        allTokens.ref.child(tokens[index]).remove()\n                      );\n                    }\n                  }\n                });\n                return Promise.all(tokensToRemove);\n              });\n          }\n        }\n      });\n  });\n```"]