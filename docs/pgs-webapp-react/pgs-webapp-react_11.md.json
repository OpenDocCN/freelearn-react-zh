["```jsx\noutput: {\n   path: __dirname + \"/build\",\n   filename: \"bundle.js\",\n   publicPath: './'\n},\n```", "```jsx\noutput: {\n   path: __dirname + \"/build\",\n   filename: 'static/js/[name].[hash:8].js',\n   chunkFilename: 'static/js/[name].[hash:8].chunk.js',\n   publicPath: './'\n},\n```", "```jsx\nyarn add --dev babel-preset-stage-2\n```", "```jsx\nmodule: {\n  loaders: [\n  {\n  test: /\\.js$/,\n  exclude: /node_modules/,\n  loader: 'babel-loader',\n  query: {\n         presets: ['es2015','react','stage-2'],\n         plugins: ['react-hot-loader/babel', 'transform-class-properties']\n       }\n  },\n```", "```jsx\nimport React, { Component } from 'react';\n```", "```jsx\nimport LoginContainer from './LoginContainer';\nimport ChatContainer from './ChatContainer';\nimport UserContainer from './UserContainer';\n```", "```jsx\nIf (path === \u2018/login\u2019)\n  import('./LoginContainer')\n} else if (path === \u2018/user/:id\u2019)\n  import(\u2018./UserContainer)\n} else {\n  import(\u2018./ChatContainer)\n}\n```", "```jsx\nfunction Button(props) {\n return <button color={props.color}>Hello</button>\n}\n```", "```jsx\nclass Button extends Component {\n render() {\n   return <button color={this.props.color}>Hello</button>\n }\n}\n```", "```jsx\nfunction colorRed(Component) {\n  return class RedColoredComppnent extends Component {\n    render () {\n      return <Component color=\"red\" />\n    }\n  }\n}\n```", "```jsx\nimport Button from './Button';\nimport RedColouredComponent from './RedColouredComponent';\n\nconst RedButton = RedColouredComponent(Button);\n\nfunction App() {\n return (\n   <div>\n     <RedButton />\n   </div>\n )\n}\n```", "```jsx\nimport React, { Component } from 'react'\n\nexport default function asyncComponent(getComponent) {\n\n}\n```", "```jsx\nexport default function asyncComponent(getComponent) {\n return class AsyncComponent extends Component {\n   render() {\n     return (\n\n     )\n   }\n }\n}\n```", "```jsx\n  componentWillMount() {\n     if (!this.state.Component) {\n       getComponent().then(Component => {\n         this.setState({ Component });\n       });\n     }\n   }\n```", "```jsx\n  render() {\n     const { Component } = this.state;\n     if (Component) {\n       return <Component {...this.props} />;\n     }\n     return null;\n   }\n```", "```jsx\nimport React, { Component } from 'react';\n\nexport default function asyncComponent(getComponent) {\n return class AsyncComponent extends Component {\n   state = { Component: null };\n\n   componentWillMount() {\n     if (!this.state.Component) {\n       getComponent().then(Component => {\n         this.setState({ Component });\n       });\n     }\n   }\n\n   render() {\n     const { Component } = this.state;\n     if (Component) {\n       return <Component {...this.props} />;\n     }\n     return null;\n   }\n };\n}\n```", "```jsx\nimport React, { Component } from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport AsyncComponent from './AsyncComponent';\nimport NotificationResource from '../resources/NotificationResource';\nimport './app.css';\n```", "```jsx\nconst loadLogin = () => {\n return import('./LoginContainer').then(module => module.default);\n};\n\nconst loadChat = () => {\n return import('./ChatContainer').then(module => module.default);\n};\n\nconst loadUser = () => {\n return import('./UserContainer').then(module => module.default);\n};\n```", "```jsx\nconst LoginContainer = AsyncComponent(loadLogin);\nconst UserContainer = AsyncComponent(loadUser);\nconst ChatContainer = AsyncComponent(loadChat);\n```", "```jsx\ncomponentDidMount() {\n    this.notifications = new NotificationResource(\n      firebase.messaging(),\n      firebase.database()\n    );\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({ user });\n        this.listenForMessages();\n        this.notifications.changeUser(user);\n      } else {\n        this.props.history.push('/login');\n      }\n    });\n    this.listenForMessages();\n    this.listenForInstallBanner();\n loadChat();\n loadLogin();\n loadUser();\n  }\n```"]