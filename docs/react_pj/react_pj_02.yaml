- en: Creating a Progressive Web Application with Reusable React Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用可重用的React组件创建渐进式Web应用程序
- en: Do you already feel familiar with React's core concepts after completing the
    first chapter? Great! This chapter will be no problem for you! If not, don't worry
    – most of the concepts you came across in the previous chapter will be repeated.
    However, if you want to get more experience with webpack and Babel, it's recommended
    that you try creating the project in [Chapter 1](db49c15f-af33-4d8f-a804-057f3876748e.xhtml), *Creating
    a Movie List Application in React*, again since this chapter won't be covering
    those topics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成第一章后，您是否已经对React的核心概念感到熟悉？太好了！这一章对您来说将不成问题！如果没有，不要担心-您在上一章中遇到的大多数概念将被重复。但是，如果您想获得更多关于webpack和Babel的经验，建议您再次尝试在[第1章](db49c15f-af33-4d8f-a804-057f3876748e.xhtml)中创建项目，*在React中创建电影列表应用程序*，因为本章不会涵盖这些主题。
- en: In this chapter, you'll work with Create React App, a starter kit (created by
    the React core team to get you started with React quickly) that can be used as
    a **Progressive Web App** (**PWA**) – a web application that behaves like a mobile
    application. It will make the configuration of module bundlers and compilers such
    as webpack and Babel unnecessary as this will be taken care of in the Create React
    App package. This means you can focus on building your GitHub portfolio application
    as a PWA that reuses React components and styling.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您将使用Create React App，这是一个由React核心团队创建的入门套件，可以快速开始使用React，并且可以用作**渐进式Web应用程序**（**PWA**）-一种行为类似移动应用程序的Web应用程序。这将使模块捆绑器和编译器（如webpack和Babel）的配置变得不必要，因为这将在Create
    React App包中处理。这意味着您可以专注于构建您的GitHub作品集应用程序，将其作为一个PWA，重用React组件和样式。
- en: 'Alongside setting up Create React App, the following topics will be covered
    in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了设置Create React App之外，本章还将涵盖以下主题：
- en: Creating a Progressive Web App
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建渐进式Web应用程序
- en: Building reusable React components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建可重用的React组件
- en: Styling in React with `styled-components`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`styled-components`在React中进行样式设置
- en: Can't wait? Let's continue!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 迫不及待？让我们继续吧！
- en: Project overview
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this chapter, we will create a PWA that has reusable React components and
    styling using Create React App and `styled-components`. The application will use
    data  fetched from the public GitHub API.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用Create React App和`styled-components`创建具有可重用React组件和样式的PWA。该应用程序将使用从公共GitHub
    API获取的数据。
- en: The build time is 1.5-2 hours.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 建立时间为1.5-2小时。
- en: Getting started
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: The project you'll create in this chapter will use the public API from GitHub,
    which you can find at [https://developer.github.com/v3/](https://developer.github.com/v3/).
    To be able to use this API, you need to have a GitHub account, since you'll want
    to retrieve information from a GitHub user account. If you don't have a GitHub
    account yet, you can create one by registering on its website. Also, you need
    to download the GitHub logo pack from here: [https://github-media-downloads.s3.amazonaws.com/GitHub-Mark.zip](https://github-media-downloads.s3.amazonaws.com/GitHub-Mark.zip).
    The complete source code for this application can also be found on GitHub: [https://github.com/PacktPublishing/React-Projects/tree/ch2](https://github.com/PacktPublishing/React-Projects/tree/ch2).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将创建的项目将使用GitHub的公共API，您可以在[https://developer.github.com/v3/](https://developer.github.com/v3/)找到。要使用此API，您需要拥有GitHub帐户，因为您将希望从GitHub用户帐户中检索信息。如果您还没有GitHub帐户，可以通过在其网站上注册来创建一个。此外，您需要从这里下载GitHub标志包：[https://github-media-downloads.s3.amazonaws.com/GitHub-Mark.zip](https://github-media-downloads.s3.amazonaws.com/GitHub-Mark.zip)。此应用程序的完整源代码也可以在GitHub上找到：[https://github.com/PacktPublishing/React-Projects/tree/ch2](https://github.com/PacktPublishing/React-Projects/tree/ch2)。
- en: GitHub portfolio application
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub作品集应用程序
- en: In this section, we will learn how to create a new React project using Create
    React App and set it up as a PWA that reuses React components and styling with
    `styled-components`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将学习如何使用Create React App创建一个新的React项目，并将其设置为一个可以重用React组件和使用`styled-components`进行样式设置的PWA。
- en: Creating a PWA with Create React App
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Create React App创建PWA
- en: Having to configure webpack and Babel every time we create a new React project
    can be quite time-consuming. Also, the settings for every project can change and
    it becomes hard to manage all of these configurations when we want to add new
    features to our project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每次创建新的React项目都需要配置webpack和Babel可能会非常耗时。此外，每个项目的设置可能会发生变化，当我们想要为我们的项目添加新功能时，管理所有这些配置变得困难。
- en: Therefore, the React core team introduced a starter kit known as Create React
    App and released a stable version of it, 2.0, in 2018\. By using Create React
    App, we no longer have to worry about managing compile and build configurations,
    even when newer versions of React are released, which means we can focus on coding
    instead of configurations. Also, it has features we can use to easily create a
    PWA.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，React核心团队推出了一个名为Create React App的起始工具包，并在2018年发布了稳定版本2.0。通过使用Create React
    App，我们不再需要担心管理编译和构建配置，即使React的新版本发布了，这意味着我们可以专注于编码而不是配置。此外，它还具有我们可以使用的功能，可以轻松创建PWA。
- en: A PWA is usually faster and more reliable than regular web applications as it
    focuses on an offline/cache-first approach. This makes it possible for users to
    still open our application when they have no or a slow internet connection due
    to its focus on caching. Also, users can add our application to the home screen
    of their smartphone or tablet and open it like a native application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: PWA通常比普通的Web应用程序更快、更可靠，因为它专注于离线/缓存优先的方法。这使得用户在没有或者网络连接缓慢的情况下仍然可以打开我们的应用程序，因为它专注于缓存。此外，用户可以将我们的应用程序添加到他们的智能手机或平板电脑的主屏幕，并像本地应用程序一样打开它。
- en: This section will show us how to create a React application with PWA features,
    starting with setting up a new application with Create React App.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分将向我们展示如何创建一个具有PWA功能的React应用程序，从设置一个新的应用程序开始，使用Create React App。
- en: Installing Create React App
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Create React App
- en: 'Create React App can be installed by using the command line, where we should
    install it globally so that the package is available everywhere on our local computer
    and not just in a specific project:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App可以通过命令行安装，我们应该全局安装它，这样该包就可以在我们本地计算机的任何地方使用，而不仅仅是在特定项目中：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that the `create-react-app` package has been installed, we''re ready to
    create our first Create React App project. There are multiple ways to set up a
    new project, but since we''re already familiar with `npm`, there are only two
    methods we need to learn about. Let''s get started:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`create-react-app`包已经安装完成，我们准备创建我们的第一个Create React App项目。有多种设置新项目的方法，但由于我们已经熟悉了`npm`，我们只需要学习两种方法。让我们开始吧：
- en: 'The first method is to create a new project with `npm` by running the following
    command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一种方法是使用`npm`创建一个新项目，运行以下命令：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can replace `github-portfolio` with any other name you want to use for this
    project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`github-portfolio`替换为您想要为此项目使用的任何其他名称。
- en: 'Alternatively, we can use `npx`, a tool that comes preinstalled with `npm`
    (v5.2.0 or higher) and simplifies the way we execute `npm` packages:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，我们也可以使用`npx`，这是一个与`npm`（v5.2.0或更高版本）预装的工具，简化了我们执行`npm`包的方式：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Both methods will start the installation process for Create React App, which
    can take several minutes, depending on your hardware. Although we're only executing
    one command, the installer for Create React App will install the packages we need
    to run our React application. Therefore, it will install `react`, `react-dom`,
    and `react-scripts`, where the last package includes all the configuration for
    compiling, running, and building React applications.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都将启动Create React App的安装过程，这可能需要几分钟，具体取决于您的硬件。虽然我们只执行一个命令，但Create React
    App的安装程序将安装我们运行React应用程序所需的软件包。因此，它将安装`react`，`react-dom`和`react-scripts`，其中最后一个软件包包含了编译、运行和构建React应用程序的所有配置。
- en: 'If we move into the project''s root directory, which is named after our project
    name, we will see that it has the following structure:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进入项目的根目录，该目录以我们的项目名称命名，我们会看到它具有以下结构：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This structure looks a lot like the one we set up in the first chapter, although
    there are some slight differences. The `public` directory includes all the files
    that shouldn't be included in the compile and build process, and the files inside
    this directory are the only files that can be directly used inside the `index.html` file.
    The `manifest.json` file contains the default configuration for a PWA, which is
    something we'll learn more about later on in this chapter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结构看起来很像我们在第一章设置的结构，尽管有一些细微的差异。`public`目录包括所有不应包含在编译和构建过程中的文件，而该目录中的文件是唯一可以直接在`index.html`文件中使用的文件。`manifest.json`文件包含PWA的默认配置，这是我们将在本章后面学到更多的内容。
- en: In the other directory, called `src`, we will find all the files that will be
    compiled and built when we execute any of the scripts inside the `package.json`
    file. There is a component called `App`, which is defined by the `App.js`, `App.test.js`,
    and `App.css` files, and a file called `index.js`, which is the entry point for
    Create React App. The `serviceWorker.js` file is needed to set up the PWA and
    is also something that will be discussed in the next part of this section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个名为`src`的目录中，我们将找到在执行`package.json`文件中的任何脚本时将被编译和构建的所有文件。有一个名为`App`的组件，它由`App.js`，`App.test.js`和`App.css`文件定义，以及一个名为`index.js`的文件，它是Create
    React App的入口点。`serviceWorker.js`文件是设置PWA所需的，这也是本节下一部分将讨论的内容。
- en: 'If we open the `package.json` file, we''ll see that three scripts have been
    defined: `start`, `build`, and `test`. Since testing is something that isn''t
    yet handled at this point yet, we can ignore this script for now. To be able to
    open the project in the browser, we can simply type in the following command into
    the command line, which runs `package react-scripts` in development mode:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开`package.json`文件，我们会看到定义了三个脚本：`start`，`build`和`test`。由于测试是目前尚未处理的事情，我们现在可以忽略这个脚本。为了能够在浏览器中打开项目，我们只需在命令行中输入以下命令，即以开发模式运行`package
    react-scripts`：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we visit `http://localhost:3000/`, the default Create React App page will
    look as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们访问`http://localhost:3000/`，默认的Create React App页面将如下所示：
- en: '![](assets/9bb5ddd7-fd07-4bc3-b309-718f18728581.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9bb5ddd7-fd07-4bc3-b309-718f18728581.png)'
- en: Since `react-scripts` supports hot reloading by default, any changes we make
    to the code will result in a page reload. If we  run the build script, a new directory
    called `build` will be created in the projects' root directory, where the minified
    bundle of our application can be found.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`react-scripts`默认支持热重载，我们对代码所做的任何更改都将导致页面重新加载。如果我们运行构建脚本，将在项目的根目录中创建一个名为`build`的新目录，其中可以找到我们应用程序的缩小捆绑包。
- en: With the basic installation of Create React App in place, the next part of this
    section will show us how to enable the features that turn this application into
    a PWA.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基本的Create React App安装完成后，本节的下一部分将向我们展示如何启用功能，将该应用程序转变为PWA。
- en: Creating a PWA
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建PWA
- en: 'Create React App comes with a configuration for that supports PWA, generated
    when we initiate the build script. We can set up our Create React App project
    as a PWA by accessing the `src/index.js` file and changing the last line, which
    will register the  `serviceWorker`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App自带了一个支持PWA的配置，在我们初始化构建脚本时生成。我们可以通过访问`src/index.js`文件并修改最后一行来将我们的Create
    React App项目设置为PWA，这将注册`serviceWorker`：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, when we run the build script, the minified bundle of our application will
    use the offline/cache first approach. Under the hood, `react-scripts` uses a package
    called `workbox-webpack-plugin`, which works together with webpack 4 to serve
    our application as a PWA. It doesn't only cache local assets placed in the `public` directory;
    it also caches navigation requests so that our application acts more reliably
    on unstable mobile networks.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们运行构建脚本时，我们的应用程序的压缩包将使用离线/缓存优先的方法。在幕后，`react-scripts`使用一个名为`workbox-webpack-plugin`的包，它与webpack
    4一起工作，将我们的应用程序作为PWA提供。它不仅缓存放在`public`目录中的本地资产；它还缓存导航请求，以便我们的应用程序在不稳定的移动网络上更可靠地运行。
- en: 'The other file that plays a part in setting up the PWA using Create React App
    is `manifest.json`. Most of the configuration for our PWA is placed here, which
    we can see if we open the `public/manifest.json` file. In this configuration JSON
    file, we will find the most important pieces for operating systems and browsers.
    Let''s break this down:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个在使用Create React App设置PWA中起作用的文件是`manifest.json`。我们的PWA的大部分配置都放在这里，如果我们打开`public/manifest.json`文件就可以看到。在这个配置JSON文件中，我们会找到操作系统和浏览器的最重要的部分。让我们来分解一下：
- en: 'This file contains the `short_name` and `name` fields, which describe how our
    application should be identified to users:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个文件包含了`short_name`和`name`字段，描述了我们的应用程序应该如何被用户识别：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `short_name` field should be no longer than 12 characters and will be shown
    underneath the application icon on the user's home screen. For the `name` field, we
    can use up to 45 characters. This is the main identifier for our application and
    can be seen during the process of adding the application to the home screen.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`short_name`字段的长度不应超过12个字符，并将显示在用户主屏幕上应用程序图标的下方。对于`name`字段，我们最多可以使用45个字符。这是我们应用程序的主要标识符，并且可以在将应用程序添加到主屏幕的过程中看到。'
- en: 'Which particular icon users see when they add our application to the home screen
    can be configured in the `icons` field:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户将我们的应用程序添加到主屏幕时，他们看到的特定图标可以在`icons`字段中配置：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, the `favicon.ico` file is used as the only icon and is served
    in multiple sizes in `image/x-icon` format. As we mentioned previously, the same
    rule for `index.html` applies to `manifest.json`. Only files that are placed in
    the public directory can be referred to from this file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，`favicon.ico`文件被用作唯一的图标，并以`image/x-icon`格式以多种尺寸提供。对于`manifest.json`，同样的规则适用于`index.html`。只有放在public目录中的文件才能从这个文件中引用。
- en: 'Finally, using the `theme_color` and `background_color` fields, we can set
    the colors (in HEX format) for the top bar when our application is opened from
    the home screen on a mobile device:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用`theme_color`和`background_color`字段，我们可以为打开我们的应用程序时在移动设备主屏幕上设置顶部栏的颜色（以十六进制格式）：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The default toolbar with the URL box isn't displayed; instead, a top bar is
    shown. This behavior is similar to native mobile applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的工具栏和URL框不会显示；相反，会显示一个顶部栏。这种行为类似于原生移动应用程序。
- en: Another thing we can handle with this configuration file is internalization,
    which is useful when our application serves content in different languages. We
    can also add versioning to this file if there are multiple versions of our application
    in production.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件还可以处理的另一件事是国际化，当我们的应用程序以不同的语言提供内容时，这将非常有用。如果我们的应用程序有多个版本在生产中，我们还可以在这个文件中添加版本控制。
- en: The changes we made here configured the application so that it functions as
    a PWA, but don't make these features available to the user just yet. In the next
    part of this section, we'll learn how to serve this PWA and make it visible in
    the browser.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的更改配置了应用程序，使其作为PWA运行，但目前还不向用户提供这些功能。在本节的下一部分，我们将学习如何提供这个PWA并在浏览器中显示出来。
- en: Serving the PWA
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供PWA
- en: 'With the configuration of our PWA in place, it''s time to see how this will
    affect the application. If you still have your Create React App running (if not,
    execute the `npm start` command again), visit the project at `http://localhost:3000/`.
    We will see that nothing has changed yet. As we mentioned previously, the PWA
    will only be visible when the build version of our application is open. To do
    this, execute the following command in the projects'' root directory:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: PWA的配置已经就绪，现在是时候看看这将如何影响应用程序了。如果您仍在运行Create React App（如果没有，请再次执行`npm start`命令），请访问项目`http://localhost:3000/`。我们会发现目前还没有任何变化。正如我们之前提到的，只有当我们的应用程序的构建版本打开时，PWA才会可见。为了做到这一点，请在项目的根目录中执行以下命令：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will initiate the build process, which minifies our application to a bundle
    that''s stored inside the `build` directory. This built version of our application
    can be served from our local machine. If we look at the output of the build process
    on the command line, we will see that Create React App suggested how we should
    serve this build version:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动构建过程，将我们的应用程序最小化为存储在`build`目录中的捆绑包。我们可以从本地机器上提供这个构建版本的应用程序。如果我们在命令行上查看构建过程的输出，我们会看到Create
    React App建议我们如何提供这个构建版本。
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `npm install` command installs the `serve` package, which is used to serve
    built static sites or, in this case, JavaScript applications. After installing
    this package, we can use it to deploy the `build` directory on our server or local
    machine by running the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install`命令安装了`serve`包，用于提供构建的静态站点或者JavaScript应用程序。安装完这个包后，我们可以使用它在服务器或本地机器上部署`build`目录，方法如下：'
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `-s` flag is used to redirect any navigation requests that aren't found
    back to our `index.js` file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`-s`标志用于将任何未找到的导航请求重定向回我们的`index.js`文件。'
- en: 'If we visit our project in the browser at `http://localhost:5000/`, we''ll
    see that everything looks exactly like the version we''re running on `http://localhost:3000/`.
    There is one big difference, however: the build version is running as a PWA. This
    means that if our internet connections fails, the application will still be shown.
    We can try this out by disconnecting our internet connection or stopping the `serve` package
    from the command line. If we refresh the browser on `http://localhost:5000/`,
    we will see the exact same application.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中访问我们的项目`http://localhost:5000/`，我们会发现一切看起来和我们在`http://localhost:3000/`上运行的版本完全一样。然而，有一个很大的不同：构建版本是作为PWA运行的。这意味着如果我们的互联网连接失败，应用程序仍然会显示。我们可以通过断开互联网连接或从命令行停止`serve`包来尝试这一点。如果我们在`http://localhost:5000/`上刷新浏览器，我们会看到完全相同的应用程序。
- en: 'How does this work? If we open up the Developer tools in our browser (Chrome
    or Firefox) and visit the Application tab, we''ll see items in the sidebar. The
    one we should open first is called Service Workers. The result will look similar
    to what''s shown in the following screenshot if you''re using Chrome as your browser:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何工作的？如果我们在浏览器（Chrome或Firefox）中打开开发者工具并访问应用程序选项卡，我们将看到侧边栏中的项目。我们首先应该打开的是Service
    Workers。如果您使用Chrome作为浏览器，结果将类似于以下截图所示：
- en: '![](assets/2c9e3fb0-c08f-48fe-bc28-e909727e7679.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2c9e3fb0-c08f-48fe-bc28-e909727e7679.png)'
- en: If we click on the Service Worker sidebar item, we will see a list of all the
    service workers that are running. For `localhost`, there's one active service
    worker that has `service-worker.js` as its source – the same file that is inside
    our project. This file makes sure that a cached version of our application is
    served if there is no or a slow internet connection.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击Service Worker侧边栏项目，我们将看到正在运行的所有service worker的列表。对于`localhost`，有一个活动的service
    worker，其源为`service-worker.js` - 这与我们项目中的文件相同。该文件确保在没有或者网络连接缓慢的情况下提供我们应用程序的缓存版本。
- en: The service worker shouldn't be active when we have a local instance of our
    application running with `npm start`. Since the service worker will cache our
    application, we won't be able to see any of the changes that we've made since
    the cached version will be a server.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`npm start`在本地运行应用程序时，service worker不应处于活动状态。由于service worker将缓存我们的应用程序，我们将无法看到我们所做的任何更改，因为缓存版本将是一个服务器。
- en: These cache files are stored inside the browser cache and can also be found
    in this toolbar under Cache Storage. Here, we may see multiple cache locations,
    which are created by the `workbox-webpack-plugin` package when we build the application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些缓存文件存储在浏览器缓存中，也可以在工具栏的缓存存储下找到。在这里，我们可能会看到多个缓存位置，这些位置是在构建应用程序时由`workbox-webpack-plugin`包创建的。
- en: 'The one that''s relevant to serving our application is called `workbox-precache-v2-http://localhost:5000/` and
    consists of all the cached files for our application:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们应用程序相关的一个是`workbox-precache-v2-http://localhost:5000/`，其中包含我们应用程序的所有缓存文件：
- en: '![](assets/66b6b067-7474-4ce0-842d-66e05cecdd46.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/66b6b067-7474-4ce0-842d-66e05cecdd46.png)'
- en: In the preceding screenshot, we can see which files are being cached by the
    browser for our application, where the `index.html` file is the entry point of
    the application and files starting with `static/` are created during the build
    process and represent the minified bundle of our application. As we can see, it
    consists of minified `.js`, `.css`, and `.svg` files, which are stored inside
    the browser cache. Each time a user loads our application, it will try to serve
    those files first before looking for an internet connection.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我们可以看到浏览器为我们的应用程序缓存了哪些文件，其中`index.html`文件是应用程序的入口点，以`static/`开头的文件是在构建过程中创建的，并代表我们应用程序的缩小捆绑包。正如我们所看到的，它包括缩小的`.js`、`.css`和`.svg`文件，这些文件存储在浏览器缓存中。每当用户加载我们的应用程序时，它都会尝试首先提供这些文件，然后再寻找网络连接。
- en: With our first PWA created and with Create React App in place, we will start
    looking at creating the components for our project and styling them.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了我们的第一个PWA并安装了Create React App后，我们将开始着手创建项目的组件并为它们设置样式。
- en: Building reusable React components
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建可重用的React组件
- en: Creating React components with JSX was briefly discussed in the previous chapter,
    but in this chapter, we'll explore this topic further by creating components that
    we can reuse throughout our application. First, let's look at how to structure
    our application, which builds upon the contents of the previous chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中简要讨论了使用JSX创建React组件，但在本章中，我们将通过创建可以在整个应用程序中重用的组件来进一步探讨这个主题。首先，让我们看看如何构建我们的应用程序，这是基于上一章的内容的。
- en: Structuring our application
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的应用程序
- en: To begin, we'll need to structure our application in the same way that we did
    in the first chapter. This means that we need to create two new directories called
    `components` and `containers` inside the `src` directory. The files for the `App` component
    can be moved to the `container` directory, and the `App.test.js` file can be deleted
    since testing hasn't been covered yet.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要以与第一章相同的方式构建我们的应用程序。这意味着我们需要在`src`目录内创建两个新目录，分别为`components`和`containers`。`App`组件的文件可以移动到`container`目录，`App.test.js`文件可以删除，因为测试还没有涉及到。
- en: 'After creating the directories and moving the files, our application structure
    will look as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完目录并移动文件后，我们的应用程序结构将如下所示：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Don''t forget to change the location of the import for the `App` component
    in `src/index.js`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在`src/index.js`中更改对`App`组件的导入位置：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Do the same for the location of the React `logo` in `src/containers/App.js`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/containers/App.js`中的React `logo`的位置也做同样的事情：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If we run `npm start` again and visit the project in the browser, there will
    be no visible changes since we've only changed the structure of the project and
    none of its content.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次运行`npm start`并在浏览器中访问项目，将不会有可见的变化，因为我们只是改变了项目的结构，而没有改变其内容。
- en: 'Our project still consists of only one component, which doesn''t make it very
    reusable. The next step will be to divide our `App` component into `Components`
    as well. If we look at the source code for this component in `App.js`, we''ll
    see that there''s already a CSS `header` element in the return function. Let''s
    change that `header` element into a React component:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目仍然只包含一个组件，这并不使它非常可重用。下一步将是将我们的`App`组件也分成`Components`。如果我们查看`App.js`中这个组件的源代码，我们会看到返回函数中已经有一个CSS
    `header`元素。让我们将`header`元素改成一个React组件：
- en: 'First, create a new directory called `Header` inside the `components` directory
    and copy the styling for `classNames`, `App-header`, `App-logo`, and `App-link` into
    a new file called `Header.css`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`components`目录内创建一个名为`Header`的新目录，并将`classNames`、`App-header`、`App-logo`和`App-link`的样式复制到一个名为`Header.css`的新文件中：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, create a file called `Header.js` inside this directory. This file should
    return the same content as the `<header>` element:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在这个目录内创建一个名为`Header.js`的文件。这个文件应该返回与`<header>`元素相同的内容。
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Import this `Header` component inside your `App` component and add it to the
    `return` function:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App`组件内导入这个`Header`组件，并将其添加到`return`函数中：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When we visit our project in the browser again, we''ll see an error saying
    that the value for the logo is undefined. This is because the new `Header` component
    can''t reach the `logo` constant that''s been defined inside the `App` component.
    From what we''ve learned in the first chapter, we know that this logo constant
    should be added as a prop to the `Header` component so that it can be displayed.
    Let''s do this now:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次在浏览器中访问我们的项目时，会看到一个错误，说logo的值是未定义的。这是因为新的`Header`组件无法访问在`App`组件内定义的`logo`常量。根据我们在第一章学到的知识，我们知道这个logo常量应该作为prop添加到`Header`组件中，以便显示出来。让我们现在来做这个：
- en: 'Send the `logo` constant as a prop to the `Header` component in `src/container/App.js`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`logo`常量作为prop发送到`src/container/App.js`中的`Header`组件：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Get the `logo` prop so that it can be used by the `img` element as an `src`
    attribute in `src/components/App/Header.js`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`logo`属性，以便它可以被`img`元素作为`src`属性在`src/components/App/Header.js`中使用：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the previous chapter, the use of the `prop-types` package was demonstrated
    but this is something that isn't used in this chapter. If you'd like to use `prop-types`
    in this chapter as well, you can install the package from `npm` using `npm install
    prop-types` and import it inside the files where you want to use it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，演示了`prop-types`包的使用，但在本章中没有使用。如果您想在本章中也使用`prop-types`，可以使用`npm install
    prop-types`从`npm`安装该包，并在要使用它的文件中导入它。
- en: 'Here, we won''t see any visible changes when we open the project in the browser.
    But if we open up the React Developer Tools, we will see that the project is now
    divided into an `App` component and a `Header` component. This component receives
    the `logo` prop in the form of a `.svg` file, as shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当我们在浏览器中打开项目时，我们看不到任何可见的变化。但是，如果我们打开React开发者工具，我们将看到项目现在被分成了一个`App`组件和一个`Header`组件。该组件以`.svg`文件的形式接收`logo`属性，如下截图所示：
- en: '![](assets/788394ba-bd16-4e9e-8b36-8e4216d6cd50.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/788394ba-bd16-4e9e-8b36-8e4216d6cd50.png)'
- en: The `Header` component is still divided into multiple elements that can be split
    into separate components. Looking at the `img` and `p` elements, they look pretty
    simple already. However, the `a` element looks more complicated and takes attributes
    such as `url`, `title`, `className`, and so in. To change this `a` element into
    a component we can reuse, it needs to be moved to a different location in our
    project.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`Header`组件仍然被分成多个可以拆分为单独组件的元素。看看`img`和`p`元素，它们看起来已经很简单了。但是，`a`元素看起来更复杂，需要接受诸如`url`、`title`、`className`等属性。为了将这个`a`元素改为可重用的组件，它需要被移动到我们项目中的不同位置。'
- en: 'To do this, create a new directory called `Link` inside the `components` directory.
    Inside this directory, create a new file called `Link.js`. This file should return
    the same `a` element that we''ve already got inside our `Header` component. Also,
    we can send both the `url` and `title` to this component as a prop. Let''s do
    this now:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，在`components`目录中创建一个名为`Link`的新目录。在该目录中，创建一个名为`Link.js`的新文件。该文件应返回与我们已经在`Header`组件中拥有的相同的`a`元素。此外，我们可以将`url`和`title`作为属性发送到该组件。现在让我们这样做：
- en: 'Delete the styling for the `App-link` class from `src/components/Header/Header.css`
    and place this inside a file called `Link.css`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`src/components/Header/Header.css`中删除`App-link`类的样式，并将其放置在名为`Link.css`的文件中：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a new component called `Link` that takes the `url` and `title` props.
    This component adds these props as attributes to the `<a>` element in `src/components/Link/Link.js`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Link`的新组件，该组件接受`url`和`title`属性。该组件将这些属性添加为`<a>`元素的属性，放在`src/components/Link/Link.js`中：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Import this `Link` component and place it inside the `Header` component in `src/components/Header/Header.js`:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入这个`Link`组件，并将其放置在`src/components/Header/Header.js`中的`Header`组件中：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Our code should now look like the following, meaning that we''ve successfully
    split the directories into `containers` and `components`, where the components
    are placed in separate subdirectories that have been named after the components:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码现在应该如下所示，这意味着我们已成功将目录分成了`containers`和`components`，其中组件被放置在以组件命名的单独子目录中：
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: However, if we take a look at the project in the browser, no visible changes
    are present. In React Developer Tools, however, the structure of our application
    has already taken shape. The `App` component is shown as the parent component
    in the component tree, while the `Header` component is a child component that
    has `Link` as a child.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们在浏览器中查看项目，就看不到任何可见的变化。然而，在React开发者工具中，我们的应用程序结构已经形成。`App`组件显示为组件树中的父组件，而`Header`组件是一个具有`Link`作为子组件的子组件。
- en: In the next part of this section, we'll add more components to the component
    tree of this application and make these reusable throughout the application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的下一部分，我们将向该应用程序的组件树中添加更多组件，并使这些组件在整个应用程序中可重用。
- en: Reusing components in React
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在React中重用组件
- en: The project we're building in this chapter is a GitHub portfolio page; it will
    show our public information and a list of public repositories. Therefore, we need
    to fetch the official GitHub REST API (v3) and pull information from two endpoints. Fetching
    data is something we did in the first chapter, but this time, the information
    won't come from a local JSON file. The method to retrieve the information is almost
    the same. We'll use the fetch API to do this.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中构建的项目是一个GitHub作品集页面；它将显示我们的公共信息和公共存储库的列表。因此，我们需要获取官方的GitHub REST API（v3）并从两个端点拉取信息。获取数据是我们在第一章中做过的事情，但这次信息不会来自本地JSON文件。检索信息的方法几乎是相同的。我们将使用fetch
    API来做这件事。
- en: 'We can retrieve our public GitHub information from GitHub by executing the
    following command. Replace the `username` at the end of the bold section of code
    with your own `username`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行以下命令从GitHub检索我们的公共GitHub信息。将代码的粗体部分末尾的`username`替换为您自己的`username`：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you don't have a GitHub profile or haven't filled out all the necessary information,
    you can also use the `octocat` username. This is the username of the GitHub `mascotte`
    and is already filled with sample data.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有GitHub个人资料或者没有填写所有必要的信息，您也可以使用`octocat`用户名。这是GitHub `吉祥物`的用户名，已经填充了示例数据。
- en: 'This request will return the following output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这个请求将返回以下输出：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Multiple fields in the JSON output are highlighted since these are the fields
    we'll use in the application. These are `avatar_url`, `html_url`, `repos_url`,
    `name`, `company`, `location`, `email`, and `bio`, where the value of the `repos_url` field
    is actually another API endpoint that we need to call to retrieve all the repositories
    of this user. This is something we'll do later in this chapter.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: JSON输出中的多个字段都被突出显示，因为这些是我们在应用程序中将使用的字段。这些字段是`avatar_url`，`html_url`，`repos_url`，`name`，`company`，`location`，`email`和`bio`，其中`repos_url`字段的值实际上是另一个我们需要调用以检索该用户所有存储库的API端点。这是我们将在本章稍后要做的事情。
- en: 'Since we want to display this result in the application, we need to do the
    following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们想在应用程序中显示这个结果，我们需要做以下事情：
- en: 'To retrieve this public information from GitHub, create a new container called
    `Profile` and add the following code to `src/containers/Profile.js`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从GitHub检索这些公共信息，请创建一个名为`Profile`的新容器，并将以下代码添加到`src/containers/Profile.js`中：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This new component contains a `constructor`, where the initial value for `state`
    is set and a `componentDidMount` life cycle method, which is used asynchronously,
    sets a new value for `state` when the fetched API returns a result. No result
    has been rendered yet since we still need to create new components to display
    the data.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新组件包含一个`constructor`，其中设置了`state`的初始值，以及一个`componentDidMount`生命周期方法，该方法在异步使用时，当获取的API返回结果时，为`state`设置一个新值。由于我们仍然需要创建新组件来显示数据，因此尚未呈现任何结果。
- en: 'Now, import this new component into the `App` component:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将这个新组件导入到`App`组件中：
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'A quick look at the browser where our project is running shows that this new
    `Profile` component isn''t visible yet. This is because the `Header.css` file
    has a `height` attribute with a `view-height` of `100`, meaning that the component
    will take up the entire height of the page. To change this, open the `scr/components/App/Header.css` file
    and change the following highlighted lines:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 快速查看我们项目运行的浏览器，我们会发现这个新的`Profile`组件还没有显示。这是因为`Header.css`文件具有`height`属性，其`view-height`为`100`，这意味着组件将占据整个页面的高度。要更改此设置，请打开`scr/components/App/Header.css`文件并更改以下突出显示的行：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'There should be enough free space on our page to display the `Profile` component,
    so we can open the `scr/containers/Profile.js` file once more and display the
     `avatar_url`, `html_url`, `repos_url`, `name`, `company`, `location`, `email` and `bio` fields
    that were returned by the Github API:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的页面上应该有足够的空间来显示`Profile`组件，因此我们可以再次打开`scr/containers/Profile.js`文件，并显示GitHub
    API返回的`avatar_url`、`html_url`、`repos_url`、`name`、`company`、`location`、`email`和`bio`字段：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once we''ve saved this file and visited our project in the browser, we will
    see a bulleted list of the GitHub information being displayed, as shown in the
    following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此文件并在浏览器中访问我们的项目后，我们将看到显示GitHub信息的项目列表，如下截图所示：
- en: '![](assets/7b14fcee-a574-4e35-a40a-ed63173b16df.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7b14fcee-a574-4e35-a40a-ed63173b16df.png)'
- en: 'Since this doesn''t look very pretty and the header doesn''t match with the
    content of the page, let''s make some changes to the `styling` files for these
    two components:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这看起来不太好看，页眉与页面内容不匹配，让我们对这两个组件的`样式`文件进行一些更改：
- en: 'Change the code for the `Header` component, remove the React logo, and replace
    it with the GitHub logo. We no longer need to take `logo` as a prop from the `App` component.
    Also, the `Link` component can be deleted from here as we''ll be using it in a
    `Profile` component later on:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`Header`组件的代码，删除React标志，并用GitHub标志替换它。我们不再需要从`App`组件中获取`logo`作为属性。此外，`Link`组件可以从这里删除，因为我们将在稍后在`Profile`组件中使用它：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Change the highlighted lines in `scr/containers/Profile.js`, where we''ll separate
    the avatar image from the bulleted list and add a `strong` element around the
    field names. Remember the `Link` component we created previously? This will be
    used to create a link to our profile on the GitHub website:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`scr/containers/Profile.js`中的突出显示的行，我们将把头像图像与项目列表分开，并在字段名称周围添加`strong`元素。还记得我们之前创建的`Link`组件吗？这将用于在GitHub网站上创建指向我们个人资料的链接：
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Don''t forget to create the `src/containers/Profile.css` file and paste the
    following code into it. This defines the styling for the `Profile` component:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记创建`src/containers/Profile.css`文件，并将以下代码粘贴到其中。这定义了`Profile`组件的样式：
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, we can see that the application is starting to look like a GitHub
    portfolio page, with a header showing the GitHub logo icon and a title, followed
    by our GitHub avatar and a list of our public information. This results in an
    application that looks similar to what''s shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以看到应用程序开始看起来像一个GitHub作品集页面，其中有一个显示GitHub标志图标和标题的页眉，接着是我们的GitHub头像和我们的公共信息列表。这导致应用程序看起来类似于以下截图中显示的内容：
- en: '![](assets/4a6bca76-315e-4f83-993b-f5d29a3e0840.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4a6bca76-315e-4f83-993b-f5d29a3e0840.png)'
- en: 'If we take a look at the code in the `Profile` component, we''ll see that there
    is a lot of duplicate code, so we need to transform the list that''s displaying
    our public information into a separate component. Let''s get started:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看`Profile`组件中的代码，我们会发现有很多重复的代码，因此我们需要将显示我们公共信息的列表转换为一个单独的组件。让我们开始吧：
- en: 'Create a new file called `List.js` inside the new `src/components/List` directory:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的`src/components/List`目录中创建一个名为`List.js`的新文件：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the `Profile` component, which can be found in the `src/containers/Profile.js` file,
    we can import this new `List` component, construct a new array containing all
    the items we want to display inside this list, and send it as a prop. For the
    `html_url` field, we''ll be sending the `Link` component as a value instead of
    the value that was returned from the GitHub API:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Profile`组件中，可以在`src/containers/Profile.js`文件中找到，我们可以导入这个新的`List`组件，构建一个包含我们想要在此列表中显示的所有项目的新数组，并将其作为一个prop发送。对于`html_url`字段，我们将发送`Link`组件作为值，而不是从GitHub
    API返回的值：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the `List` component, we can now map over the `items` prop and return the
    list items with styling:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`List`组件中，我们现在可以映射`items`属性并返回带有样式的列表项：
- en: '[PRE35]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Assuming we executed the preceding steps correctly, your application shouldn't
    have changed aesthetically. However, if we take a look at the React Developer
    Tools, we will see that some changes have been made to the component tree.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正确执行了前面的步骤，你的应用在美学上不应该有任何变化。然而，如果我们查看React开发者工具，我们会发现组件树已经发生了一些变化。
- en: In the next section, we'll style these components using `styled-components` instead
    of CSS and add repositories that are linked to our GitHub account.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用`styled-components`而不是CSS来为这些组件添加样式，并添加链接到我们GitHub账户的存储库。
- en: Styling in React with styled-components
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`styled-components`在React中添加样式
- en: So far, we've been using CSS files to add styling to our React components. However,
    this forces us to import these files across different components, which makes
    our code less reusable. Therefore, we'll add the `styled-components` package to
    the project, which allows us to write CSS inside JavaScript (so-called **CSS-in-JS**)
    and create components.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用CSS文件为我们的React组件添加样式。然而，这迫使我们在不同的组件之间导入这些文件，这使得我们的代码不够可重用。因此，我们将把`styled-components`包添加到项目中，这允许我们在JavaScript中编写CSS（所谓的**CSS-in-JS**）并创建组件。
- en: By doing this, we'll get more flexibility out of styling our components, will
    be able to prevent duplication or overlapping of styles due to `classNames`, and
    we'll add dynamic styling to components with ease. All of this can be done using
    the same syntax we used for CSS, right inside our React components.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们将更灵活地为我们的组件添加样式，可以防止由于`classNames`而产生样式重复或重叠，并且可以轻松地为组件添加动态样式。所有这些都可以使用我们用于CSS的相同语法来完成，就在我们的React组件内部。
- en: 'The first step is installing `styled-components` using `npm`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是使用`npm`安装`styled-components`：
- en: '[PRE36]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If you look at the official documentation of `styled-components`, you will notice
    that they strongly advise you to use the Babel plugin for this package as well.
    But since you're using Create React App to initialize your project, you don't
    need to add this plugin as all the compilation your application needs has already
    been taken care of by `react-scripts`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看`styled-components`的官方文档，你会注意到他们强烈建议你也使用这个包的Babel插件。但是，由于你使用Create React
    App来初始化你的项目，你不需要添加这个插件，因为所有编译你的应用程序需要的工作已经被`react-scripts`处理了。
- en: 'After installing `styled-components`, let''s try to delete the CSS file from
    one of our components. A good start would be the `Link` component since this is
    a very small component with limited functionality:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`styled-components`后，让我们尝试从其中一个组件中删除CSS文件。一个很好的开始是`Link`组件，因为这是一个非常小的组件，功能有限：
- en: 'Start by importing the `styled-components` package and creating a new styled
    component called `InnerLink`. This component extends an `a` element and takes
    the CSS rules we already got for the `className` `App-link`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先导入`styled-components`包并创建一个名为`InnerLink`的新样式化组件。这个组件扩展了一个`a`元素，并采用了我们已经为`className`
    `App-link`得到的CSS规则：
- en: '[PRE37]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Once we''ve added this component, we can replace the existing `<a>` element
    with this styled component. Also, we no longer have to import the `Link.css` file
    since all the styling is now being done inside this JavaScript file:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加了这个组件后，我们可以用这个styled component替换现有的`<a>`元素。此外，我们也不再需要导入`Link.css`文件，因为所有的样式现在都在这个JavaScript文件中进行了设置。
- en: '[PRE38]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If we visit our project in the browser after running `npm start` again, we''ll
    see that our application still looks the same after deleting the CSS file. The
    next step is to replace all the other components that import CSS files for styling:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次运行`npm start`并在浏览器中访问我们的项目，我们会看到删除CSS文件后，我们的应用程序仍然看起来一样。下一步是替换所有导入CSS文件进行样式设置的其他组件：
- en: 'Add `styled-components` and delete the CSS file for the `Header` component
    inside `src/components/Header/Header.js`:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`src/components/Header/Header.js`中的`Header`组件添加`styled-components`并删除CSS文件：
- en: '[PRE39]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add `styled-components` and delete the CSS file for the `App` component inside `src/containers/App.js`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`src/containers/App.js`中的`App`组件添加`styled-components`并删除CSS文件：
- en: '[PRE40]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add some styled components for the `ul`, `li`, and `strong` elements inside
    the `List` component:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`List`组件中的`ul`、`li`和`strong`元素添加一些styled components：
- en: '[PRE41]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, delete the `Profile.css` file from the `Profile` component by converting
    the last two elements with `classNames` into styled components:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过将`Profile`组件中的最后两个元素转换为styled components，删除`Profile.css`文件：
- en: '[PRE42]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Now, open the project in the browser again; our application should still look
    the same. All of our components have been converted so that they use `styled-components`
    and no longer use CSS files and `classNames` for styling. Don't forget to delete
    the `.css` files inside the `containers` and `components` directories and subdirectories.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次在浏览器中打开项目；我们的应用程序应该看起来仍然一样。我们所有的组件都已经转换为使用`styled-components`，不再使用CSS文件和`classNames`进行样式设置。不要忘记删除`containers`和`components`目录及子目录中的`.css`文件。
- en: However, there is still one CSS file in the project located directly inside
    the `src` directory. This CSS file contains the styling for the `<body>` element,
    which exists inside the `public/index.html` file and has been imported into the
    `src/index.js` file. To also delete this CSS file, we can use the `createGlobalStyle`
    function from `styled-components` to add styling for the `<body>` element to our
    application.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在项目中仍然有一个CSS文件直接位于`src`目录内。这个CSS文件包含了`<body>`元素的样式，该元素存在于`public/index.html`文件中，并已被导入到`src/index.js`文件中。为了删除这个CSS文件，我们可以使用`styled-components`中的`createGlobalStyle`函数来为我们的应用程序添加`<body>`元素的样式。
- en: 'We can create a styled component for global styles inside the `App` component
    and paste the CSS styling for the `body` element inside it. Since this component
    should be at the same hierarchy in the component tree as our `AppWrapper` component,
    we need to use **React Fragments** since JSX components should be wrapped inside
    an enclosing tag:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为`App`组件内的全局样式创建一个styled component，并将`<body>`元素的CSS样式粘贴到其中。由于这个组件应该与我们的`AppWrapper`组件在组件树中处于相同的层次结构，我们需要使用**React
    Fragments**，因为JSX组件应该被封装在一个封闭标签内。
- en: '[PRE43]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `<>` tag is shorthand for `<React.Fragment>`. These React Fragments are
    used to list children components inside a single enclosing tag without the need
    to add extra nodes to the DOM.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`<>`标签是`<React.Fragment>`的简写。这些React Fragments用于在单个封闭标签内列出子组件，而无需向DOM添加额外的节点。'
- en: Now, we should be able to delete the last CSS file in the project, that is, `src/index.css`.
    We can confirm this by looking at the project in the browser. We will see no changes
    to the `body` font that was being set by the `src/index.css` file.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该能够删除项目中的最后一个CSS文件，即`src/index.css`。我们可以通过在浏览器中查看项目来确认这一点。我们将看不到由`src/index.css`文件设置的`body`字体的任何更改。
- en: 'The very last step is to display the repositories from our Github profile on
    this Github Portfolio page. The API endpoint that retrieves these repositories
    was also returned by the endpoint to retrieve our user information. To display
    these repositories, we can reuse the `List` component we created earlier:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是在Github作品集页面上显示我们Github个人资料中的存储库。检索这些存储库的API端点也是由检索我们用户信息的端点返回的。要显示这些存储库，我们可以重用之前创建的`List`组件：
- en: '1\. Load the repository list from the API endpoint and add it to `state` in
    `src/containers/Profile.js`:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 从API端点加载存储库列表并将其添加到`src/containers/Profile.js`中的`state`中：
- en: '[PRE44]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Next, return a `List` component for the repositories and send a prop called
    `title` to this list. We''re doing this since we want to show the difference between
    the two lists:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为存储库返回一个`List`组件，并向该列表发送一个名为`title`的prop。我们这样做是因为我们想显示两个列表之间的区别：
- en: '[PRE45]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Make changes to the `List` component in `src/components/List/List.js` and display
    the title at the top of each list. In this scenario, we''ll use React Fragments
    to prevent unnecessary nodes being added to the DOM:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`src/components/List/List.js`中的`List`组件进行更改，并在每个列表的顶部显示标题。在这种情况下，我们将使用React
    Fragments来防止不必要的节点被添加到DOM中：
- en: '[PRE46]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, if we visit the project in the browser again, we will see the GitHub portfolio
    page we created in the chapter. This application will look something like what''s
    shown in the following screenshot, where the default GitHub user from the previous
    section is used to fetch the data:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次在浏览器中访问该项目，我们将看到我们在本章中创建的GitHub作品集页面。该应用程序将看起来像以下截图所示，其中使用了上一节中的默认GitHub用户来获取数据：
- en: '![](assets/00e9930a-3f0f-49b0-9e4d-9ff95764cf33.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/00e9930a-3f0f-49b0-9e4d-9ff95764cf33.png)'
- en: 'Now that we''ve used Create React App and enabled the project to be set up
    as a PWA, we should be able to see a cached version when we visit the `build`
    version of the project. To build the project, run the following command:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经使用了Create React App并启用了项目作为PWA的设置，当我们访问项目的`build`版本时，应该能够看到一个缓存版本。要构建项目，请运行以下命令：
- en: '[PRE47]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Then, serve the `build` version by running the following command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过运行以下命令来提供`build`版本：
- en: '[PRE48]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We can view the `build` version of our application by going to `http://localhost:5000/`.
    However, we''ll probably see the very first version of our application. This is
    because the project has been created as a PWA and therefore a cached version of
    the application will be shown. We can restart the Service Worker and cache a fresh
    version of our application by going to the `Application` tab in the Developer
    Tools of our browser:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过访问`http://localhost:5000/`来查看我们应用程序的`build`版本。但是，我们可能会看到我们应用程序的第一个版本。这是因为该项目已创建为PWA，因此将显示应用程序的缓存版本。我们可以通过转到浏览器的开发者工具中的`Application`选项卡来重新启动Service
    Worker并缓存我们应用程序的新版本：
- en: '![](assets/80bd80d0-95b5-4e87-b362-4ddb32fcb1af.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/80bd80d0-95b5-4e87-b362-4ddb32fcb1af.png)'
- en: On this page, select Service Workers in the sidebar. From here, we can update
    the service worker for `localhost` by pressing the Update button. The `service-worker.js` file
    will be called again and the currently cached version will be replaced by a new
    one. We can also test how our application will respond when the internet connection
    fails by checking the `Offline` checkbox.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面中，选择侧边栏中的Service Workers。从这里，我们可以通过按下`Update`按钮来更新`localhost`的service worker。`service-worker.js`文件将被再次调用，并且当前缓存的版本将被新版本替换。我们还可以通过检查`Offline`复选框来测试我们的应用程序在互联网连接失败时的响应方式。
- en: 'As we can see, the `Header` component has been cached properly, but no information
    from GitHub is being displayed. Instead, the `Profile` component displays a `Loading...` message
    since no information is being returned from the API request. If we open the Developer
    Tools in our browser and look at the console, we''ll see an error message. We
    can catch this error to display the reason why our application contains no content:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`Header`组件已经被正确缓存，但是没有来自GitHub的信息被显示出来。相反，`Profile`组件显示了一个`Loading...`消息，因为没有从API请求中返回任何信息。如果我们在浏览器中打开开发者工具并查看控制台，我们会看到一个错误消息。我们可以捕获这个错误来显示为什么我们的应用程序不包含任何内容的原因：
- en: 'To do this, we need to change the `src/containers/Profile.js` file and add
    a variable called `error` to `state`:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要改变`src/containers/Profile.js`文件，并向`state`添加一个名为`error`的变量：
- en: '[PRE49]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This variable will either be an empty string or will contain the error message
    that''s returned by the `try...catch` method:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个变量要么是一个空字符串，要么包含`try...catch`方法返回的错误消息：
- en: '[PRE50]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'When the component is rendered, the error state should also be taken from the
    state and displayed instead of the loading state if an error occurs:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当组件被渲染时，如果发生错误，错误状态也应该从状态中获取并显示，而不是显示加载状态。
- en: '[PRE51]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: With these changes, the state now has an initial value for the loading state,
    which displays the `Loading...` message when the application first mounts. The
    GitHub endpoint is wrapped in a `try...catch` statement, meaning that we can catch
    the error message when the `fetch` function fails. If this happens, the value
    for `loading` will be replaced by the error message.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些更改，状态现在具有加载状态的初始值，在应用程序首次挂载时显示`Loading...`消息。GitHub端点被包裹在`try...catch`语句中，这意味着当`fetch`函数失败时，我们可以捕获错误消息。如果发生这种情况，`loading`的值将被错误消息替换。
- en: 'We can check whether these changes are working by building our application
    again and running it locally, like so:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过再次构建我们的应用程序并在本地运行它来检查这些更改是否起作用，就像这样：
- en: '[PRE52]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: When we visit the project at `http://localhost:5000` and set the application
    to offline mode in the `Application` tab inside the browser's Developer Tools,
    we will see a `Failed to fetch` message being displayed. Now, we know that our
    users will see this message if they are using our application without an active
    internet connection.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问项目`http://localhost:5000`并在浏览器的开发者工具中的`Application`选项卡中将应用程序设置为离线模式时，我们将看到一个`Failed
    to fetch`消息被显示出来。现在，我们知道如果用户在没有活动互联网连接的情况下使用我们的应用程序，他们将看到这条消息。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you used Create React App to create your starter project for
    a React application, which comes with an initial configuration for libraries such
    as Babel and webpack. By doing this, you didn't have to configure these libraries
    yourself and don't have to worry about how your React code will run in the browser.
    Also, Create React App comes with a default setup for PWA, which you can use by
    registering a service worker. This makes your application run smoothly when there's
    no internet connection or when it's on a mobile device. Remember how you had to
    style your applications with CSS before? This chapter showed you how the `styled-components` package
    can be used to create components that are reusable and styled without importing
    any CSS files since it uses the CSS-in-JS principle.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您使用Create React App创建了React应用程序的起始项目，该项目具有用于库（如Babel和webpack）的初始配置。通过这样做，您不必自己配置这些库，也不必担心您的React代码将如何在浏览器中运行。此外，Create
    React App还提供了PWA的默认设置，您可以通过注册服务工作程序来使用。这使得您的应用程序在没有互联网连接或在移动设备上运行时可以平稳运行。还记得以前如何使用CSS来为应用程序添加样式吗？本章向您展示了如何使用`styled-components`包来创建可重用且无需导入任何CSS文件的样式化组件，因为它使用了CSS-in-JS原则。
- en: Upcoming chapters will all feature projects that are created with Create React
    App, meaning that these projects don't require you to make changes to webpack
    or Babel. Did you enjoy using `styled-components` in this chapter? Then you're
    in for a treat as most of the projects in this book are styled with this package,
    including the next chapter.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 即将到来的章节将全部使用Create React App创建的项目，这意味着这些项目不需要您对webpack或Babel进行更改。您在本章中喜欢使用`styled-components`吗？那么您将喜欢这本书中大多数项目都是使用这个包进行样式设计，包括下一章。
- en: In the next chapter, we will build upon this chapter by creating a dynamic project
    management board with React that uses features such as **Suspense**.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在本章的基础上创建一个使用React的动态项目管理板，其中使用了**Suspense**等功能。
- en: Further reading
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Create React App: [https://facebook.github.io/create-react-app/](https://facebook.github.io/create-react-app/)
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Create React App: [https://facebook.github.io/create-react-app/](https://facebook.github.io/create-react-app/)'
- en: Using npx: [https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b)
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用npx: [https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b)'
- en: PWA with Create React App [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Create React App创建PWA [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)
- en: About the `manifest.json` file:[ https://developers.chrome.com/apps/manifest](https://developers.chrome.com/apps/manifest)
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`manifest.json`文件：[https://developers.chrome.com/apps/manifest](https://developers.chrome.com/apps/manifest)
- en: Styled components: [https://www.styled-components.com/docs/basics](https://www.styled-components.com/docs/basics)
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Styled components: [https://www.styled-components.com/docs/basics](https://www.styled-components.com/docs/basics)'
