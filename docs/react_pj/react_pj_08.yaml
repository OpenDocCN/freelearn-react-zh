- en: Build a House Listing Application with React Native and Expo
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React Native和Expo构建房屋列表应用程序
- en: One of the taglines for development with React is *learn once, write anywhere,* which
    is due to the existence of React Native. With React Native, you can write native
    mobile applications using JavaScript and React while using the same features as
    React for things such as state management. Building on the React knowledge that
    you've already gathered from this book, you'll start exploring React Native from
    this chapter on. As React and React Native share a lot of similarities, it's advised
    that you have another look at some of the previous chapters whenever you feel
    insecure about your React knowledge.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: React开发的一个标语是*学一次，随处编写*，这是由于React Native的存在。使用React Native，您可以使用JavaScript和React编写原生移动应用程序，同时使用React的相同功能，例如状态管理。在本书中已经获取的React知识的基础上，您将从本章开始探索React
    Native。由于React和React Native有很多相似之处，建议您在对React知识感到不安时再次查看一些以前的章节。
- en: In this chapter, you'll create a mobile application using React Native, which
    uses the same syntax and patterns that you've seen in the previous chapters. You'll
    set up basic routing, explore the differences between development for iOS and
    Android, and learn about styling React Native components with `styled-components`.
    Also, a toolchain called **Expo** will be used to run and deploy your React Native
    application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用React Native创建一个移动应用程序，该应用程序使用了您在之前章节中看到的相同语法和模式。您将设置基本路由，探索iOS和Android开发之间的差异，并学习如何使用`styled-components`对React
    Native组件进行样式设置。此外，将使用名为**Expo**的工具链来运行和部署您的React Native应用程序。
- en: 'In this chapter, the following topics will be covered:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating a React Native project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建React Native项目
- en: Routing for mobile applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用程序的路由
- en: Life cycles in React Native
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Native中的生命周期
- en: Styling components in React Native
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在React Native中设置组件样式
- en: Project overview
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this chapter, we will create a house listing application that shows an overview
    of the available houses with a detail page of every listing, with `styled-components`
    for styling and **React Navigation** for routing. The data is fetched from a mock
    API.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个房屋列表应用程序，显示可用房屋的概述，并使用`styled-components`进行样式设置和**React Navigation**进行路由。数据是从模拟API中获取的。
- en: The build time is 1.5 hours.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间为1.5小时。
- en: Getting started
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: Make sure you have the Expo Client application installed on your iOS or Android
    device to be able to run the application that you'll create in this chapter. Expo
    Client is available in both the Apple App Store and the Google Play Store.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已在iOS或Android设备上安装了Expo客户端应用程序，以便能够运行您在本章中创建的应用程序。Expo客户端可在Apple应用商店和Google
    Play商店中下载。
- en: Once you've downloaded the application, you need to create an Expo account to
    make the development process smoother. Make sure you store your account details
    somewhere safe, as you'll need these later on in this chapter. **Don't forget
    to verify your email address by clicking the link that was sent to you by email.**
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您下载了应用程序，您需要创建一个Expo账户，以使开发过程更加顺利。确保将您的账户详细信息存储在安全的地方，因为您稍后在本章中会需要这些信息。**不要忘记通过点击您收到的电子邮件中的链接来验证您的电子邮件地址。**
- en: The complete code for this chapter can be found on GitHub: [https://github.com/PacktPublishing/React-Projects/tree/ch8](https://github.com/PacktPublishing/React-Projects/tree/ch8)[.](https://github.com/PacktPublishing/React-Projects/tree/ch7)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整代码可以在GitHub上找到：[https://github.com/PacktPublishing/React-Projects/tree/ch8](https://github.com/PacktPublishing/React-Projects/tree/ch8)[.](https://github.com/PacktPublishing/React-Projects/tree/ch7)
- en: This application was created using **Expo SDK version 33.0.0** and so you need
    to make sure the version of Expo you're using on your local machine is similar.
    Since React Native and Expo are updated frequently, make sure that you're working
    with this version to ensure the patterns described in this chapter behave as expected. In
    case your application won't start or you're receiving errors, make sure to check
    the Expo documentation to learn more about updating the Expo SDK.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序是使用Expo SDK版本33.0.0创建的，因此您需要确保您在本地计算机上使用的Expo版本相似。由于React Native和Expo经常更新，请确保您使用此版本，以确保本章描述的模式表现如预期。如果您的应用程序无法启动或收到错误消息，请务必查看Expo文档，以了解有关更新Expo
    SDK的更多信息。
- en: Building a house listing application with React Native and Expo
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React Native和Expo构建房源列表应用程序
- en: In this section, you'll build a house listing application with React Native
    and Expo, which allows you to use the same syntax and patterns you already know
    from React, as it's using the React library. Also, Expo makes it possible to prevent
    having to install and configure Xcode (for iOS) or Android Studio to start creating
    native applications on your machine. Therefore, you can write applications for
    both the iOS and Android platforms from any machine.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将使用React Native和Expo构建一个房源列表应用程序，这使您可以使用与React相同的语法和模式，因为它使用了React库。此外，Expo使得无需安装和配置Xcode（用于iOS）或Android
    Studio即可开始在您的计算机上创建原生应用程序成为可能。因此，您可以从任何计算机上为iOS和Android平台编写应用程序。
- en: You can also run a React Native application in the browser using Expo web to
    create **Progressive Web Applications** (**PWAs**). However, developing for iOS,
    Android, and the web at the same time is still experimental and might need a lot
    of performance and architectural fixes. Also, not all the packages that work in
    React Native on mobile devices will work on Expo web as well.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用Expo web在浏览器中运行React Native应用程序，以创建渐进式Web应用程序（PWA）。但是，同时为iOS、Android和Web开发仍处于实验阶段，可能需要大量性能和架构修复。此外，并非所有在移动设备上的React
    Native中工作的包也会在Expo web上工作。
- en: Expo combines React APIs and JavaScript APIs with the React Native development
    process in order to allow features such as JSX components, Hooks, and native features
    such as camera access. Roughly, the Expo toolchain consists of multiple tools
    that help you with React Native, such as the Expo CLI, which allows you to create
    React Native projects from your Terminal, with all of the dependencies that you
    need to run React Native. With the Expo Client, you can open these projects from
    iOS and Android mobile devices that are connected to your local network. Expo
    SDK is the package that contains all of the libraries that make it possible to
    run your application on multiple devices and platforms.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Expo将React API和JavaScript API与React Native开发流程结合在一起，以便允许诸如JSX组件、Hooks和原生功能（如相机访问）等功能。大致上，Expo工具链由多个工具组成，这些工具可以帮助您进行React
    Native开发，例如Expo CLI，它允许您从终端创建React Native项目，并提供运行React Native所需的所有依赖项。使用Expo客户端，您可以从连接到本地网络的iOS和Android移动设备上打开这些项目。Expo
    SDK是一个包，其中包含了使您的应用能够在多个设备和平台上运行的所有库。
- en: Create a React Native project
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建React Native项目
- en: 'Previously, the starting point of every new React project in this book was
    using Create React App to create a boilerplate for your application. For React
    Native, a similar boilerplate is available, which is part of the Expo CLI, and
    it can be set up just as easily:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，每个新的React项目的起点都是使用Create React App为您的应用程序创建一个样板。对于React Native，有一个类似的样板可用，它是Expo
    CLI的一部分，并且可以像这样轻松设置：
- en: 'You need to globally install the Expo CLI with the following command using
    `npm`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用以下命令使用`npm`全局安装Expo CLI：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will start the installation process, which can take some time as it will
    install the Expo CLI with all of its dependencies that help you develop mobile
    applications. After this, you''re able to create a new project using the `init`
    command from the Expo CLI:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动安装过程，这可能需要一些时间，因为它将安装帮助您开发移动应用程序的所有依赖项的Expo CLI。之后，您可以使用Expo CLI的“init”命令创建新项目：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Expo will now create the project for you but, first, it will ask you to answer
    the following questions:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Expo现在将为您创建项目，但首先会要求您回答以下问题：
- en: 'It will ask you whether to create just a blank template, a blank template with
    TypeScript configuration, or a sample template with some example screens set up.
    For this chapter, you''ll need to choose the first option: blank (`expo-template-blank`).'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会询问您是否要创建一个空白模板，带有TypeScript配置的空白模板，或者带有一些示例屏幕设置的示例模板。在本章中，您需要选择第一个选项：空白（`expo-template-blank`）。
- en: After selecting a template, you need to type in the name of your application,
    which is house listing in this case. This name will be added to the `app.json`
    file with configuration information about your application.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择模板后，您需要输入应用程序的名称，在这种情况下是房源列表。此名称将添加到`app.json`文件中，其中包含有关您的应用程序的配置信息。
- en: Expo automatically detects whether you have Yarn installed on your machine.
    If so, it will ask you to use Yarn to install other dependencies that are needed
    to set up your computer. If you have Yarn installed, select `yes`; otherwise, `npm`
    will be used by default. For this chapter, it's advised to use `npm` instead of
    Yarn so that you're consistent with the previous chapters.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Expo会自动检测您的计算机上是否安装了Yarn。如果安装了Yarn，它将要求您使用Yarn安装其他必要的依赖项来设置您的计算机。如果安装了Yarn，请选择“是”；否则，默认情况下将使用npm。在本章中，建议使用npm而不是Yarn，以便与之前的章节保持一致。
- en: 'Now, your application will be created using the settings you''ve selected.
    This application can now be started by moving into the directory that was just
    created by Expo using the following commands:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的应用程序将使用您选择的设置创建。可以通过以下命令进入Expo刚刚创建的目录来启动此应用程序：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will start Expo and give you the ability to start your project both from
    the Terminal or from your browser, making it possible to either run the application
    on your mobile device or by using the iOS or Android Emulator. In your Terminal,
    there are multiple ways to open the application:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动Expo，并使您能够从终端或浏览器启动项目，从而可以在移动设备上运行应用程序，或者使用iOS或Android模拟器。在终端中，有多种方法可以打开应用程序：
- en: Sign in using the username from your Expo Client on Android or iOS. Your projects
    will automatically appear in the Projects tab on your mobile device.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Android或iOS上Expo Client的用户名登录。您的项目将自动显示在移动设备的“项目”选项卡中。
- en: Scan the displayed QR Code from your mobile device that runs on Android or iOS. If
    you're using an Android device, you can scan the QR Code directly from the Expo
    Client application. On iOS, you need to use your camera to scan the code that
    will ask you to open Expo Client.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用运行在Android或iOS上的移动设备扫描显示的QR码。如果您使用的是Android设备，可以直接从Expo Client应用程序扫描QR码。在iOS上，您需要使用相机扫描该代码，然后会要求您打开Expo
    Client。
- en: Press `a` to open the Android Emulator or `i` for the iOS Emulator. Keep in
    mind that you need to have Xcode and/or Android Studio installed to use either
    one of the emulators.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下“a”键打开Android模拟器，或按下“i”键打开iOS模拟器。请记住，您需要安装Xcode和/或Android Studio才能使用其中一个模拟器。
- en: By pressing `e` to send a link to you by email, this link can be opened from
    a mobile device that has the Expo Client application installed on it.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过按下“e”键将链接发送到您的电子邮件，这个链接可以从安装有Expo Client应用程序的移动设备上打开。
- en: 'Alternatively, running the `npm start` command will open your browser on the
    `http://localhost:19002/` URL, showing the Expo Developer Tools. This page will
    look like this, assuming you have the version of the Expo SDK installed that was
    mentioned in the *Getting started* section:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，运行`npm start`命令会在`http://localhost:19002/`URL上打开你的浏览器，显示Expo开发者工具。这个页面看起来会像这样，假设你安装了在*入门*部分提到的Expo
    SDK的版本：
- en: '![](assets/6a61b79f-7752-49fc-897c-ad7f75cba8ae.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6a61b79f-7752-49fc-897c-ad7f75cba8ae.png)'
- en: On this page, you can see a sidebar on the left and the logs from your React
    Native application on the right. This sidebar contains buttons so that you can
    start the iOS or Android Emulator, for which you need to have either Xcode or Android
    Studio installed. Otherwise, you can also find a button to send a link to open
    the application by email or a QR Code on your mobile device using the Expo application
    you've previously installed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个页面上，你可以看到左边有一个侧边栏，右边是你的React Native应用的日志。这个侧边栏包含按钮，让你可以启动iOS或Android模拟器，你需要安装Xcode或Android
    Studio。另外，你也可以找到一个按钮，通过邮件发送一个链接或者使用之前安装的Expo应用在你的移动设备上生成一个QR码来打开应用。
- en: 'At this point, your application should look as follows. This screenshot was
    taken from an iOS device. It shouldn''t matter if you''ve opened the application
    using the emulator for iOS or Android or from an iOS or Android device:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你的应用应该看起来如下。这个截图是从一个iOS设备上拍摄的。无论你是使用iOS或Android模拟器打开应用，还是从iOS或Android设备上打开应用，都不应该有影响：
- en: '![](assets/5f4e5ce7-020e-42af-9b8e-bf29cf94ba4a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5f4e5ce7-020e-42af-9b8e-bf29cf94ba4a.png)'
- en: This application was created using **Expo SDK version 33.0.0** and so you need
    to make sure the version of Expo you're using on your local machine is similar.
    Since React Native and Expo are updated frequently, make sure that you're working
    with this version to ensure the patterns described in this chapter behave as expected. In
    case your application won't start or you're receiving errors, make sure to check
    the Expo documentation to learn more about updating the Expo SDK.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用是使用**Expo SDK版本33.0.0**创建的，所以你需要确保你本地机器上使用的Expo版本是相似的。由于React Native和Expo经常更新，确保你使用这个版本来确保本章描述的模式表现如预期。如果你的应用无法启动或者收到错误，确保查看Expo文档以了解更多关于更新Expo
    SDK的信息。
- en: 'The project structure from this React Native application, which we created
    with Expo, is quite similar to the React projects you''ve created in the previous
    chapters. It looks as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个React Native应用的项目结构与我们之前在前几章创建的React项目非常相似，我们是用Expo创建的。它看起来如下：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the `assets` directory, you can find the images that are used for the application
    icon on the home screen once you've installed this application on your mobile
    device, as well as the image that will serve as the splash screen, which is displayed
    when you start the application. The `App.js` file is the actual entry point of
    your application, where you'll return the component that will be rendered when
    the application mounts. Configurations for your application, for example, for
    the App Store are placed in `app.json`, while `babel.config.js` holds specific
    Babel configurations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在`assets`目录中，你可以找到用于应用主屏幕图标的图片，一旦你在移动设备上安装了这个应用，以及用作启动画面的图片，当你启动应用时会显示。`App.js`文件是你应用的实际入口点，在这里你会返回当应用挂载时将被渲染的组件。应用的配置，例如App
    Store的配置，被放置在`app.json`中，而`babel.config.js`包含特定的Babel配置。
- en: Setting up routing in React Native
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在React Native中设置路由
- en: As we mentioned previously, the `App.js` file is the entry point of your application,
    which is defined by Expo. If you open this file, you will see it consists of components
    and that `StyleSheet` has been imported directly from `react-native`. The syntax
    of writing styles in React Native is different from React being used in a browser,
    so you'll have to install `styled-components` later on in this chapter.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，`App.js`文件是您的应用程序的入口点，由Expo定义。如果您打开这个文件，您会看到它由组件组成，并且`StyleSheet`直接从`react-native`导入。在React
    Native中编写样式的语法与在浏览器中使用的React不同，因此您将不得不在本章后面安装`styled-components`。
- en: Creating routes with React Navigation
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React Navigation创建路由
- en: 'Let''s proceed by installing React Navigation. There are many packages available
    to help you handle routing in React Native, but this is one of the most popular
    and advised to use by Expo. Besides React Navigation, you must also install the
    related packages, called `react-navigation-stack` and `react-navigation-tabs`,
    which are needed to create the navigators for your application. React Navigation
    and its dependencies can be installed by running the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续安装React Navigation。在React Native中有许多可用的包来帮助您处理路由，但这是Expo推荐使用的最受欢迎的包之一。除了React
    Navigation，您还必须安装相关的包，称为`react-navigation-stack`和`react-navigation-tabs`，这些包需要为您的应用程序创建导航器。可以通过运行以下命令来安装React
    Navigation及其依赖项：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To add routing to your React Native application, you will need to understand
    the difference between routing in a browser and a mobile application. History
    in React Native doesn't behave the same way as it does in a browser, where users
    can navigate to different pages by changing the URL in the browser and the previously
    visited URLs will be added to the browser history. Instead, you will need to keep
    track of transitions between pages yourself and store a local history in your
    application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要向您的React Native应用程序添加路由，您需要了解在浏览器和移动应用程序中的路由之间的区别。在React Native中，历史记录的行为方式与在浏览器中不同，在浏览器中，用户可以通过更改浏览器中的URL导航到不同的页面，并且先前访问的URL将被添加到浏览器历史记录中。相反，您需要自己跟踪页面之间的转换并在应用程序中存储本地历史记录。
- en: 'With React Navigation, you can use multiple different navigators to help you
    do this, including a stack navigator and a tab navigator. The stack navigator
    behaves in a way that is very similar to the browser as it stacks pages after
    transitioning between them and lets you navigate using native gestures and animations
    for iOS and Android:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React Navigation，您可以使用多个不同的导航器来帮助您实现这一点，包括堆栈导航器和选项卡导航器。堆栈导航器的行为方式与浏览器非常相似，因为它在页面之间进行转换后堆叠页面，并允许您使用iOS和Android的本机手势和动画进行导航：
- en: 'You can set up a stack navigator by passing an object containing routing configuration
    to the `createStackNavigator` method, which can be imported from `react-navigation-stack` in
    the `App.js` file. Also, you will need to import `createAppContainer` from `react-navigation`,
    which helps you return a component that wraps all of the routes:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过将包含路由配置的对象传递给`createStackNavigator`方法来设置堆栈导航器，该方法可以从`react-navigation-stack`在`App.js`文件中导入。此外，您还需要从`react-navigation`导入`createAppContainer`，它可以帮助您返回一个包装所有路由的组件：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Instead of returning a component called `App`, you need to return the component
    that was created with `createStackNavigator`, which holds all of the routes for
    your application. This `StackNavigator` component needs to be exported using `createAppContainer`,
    as follows:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要返回使用`createStackNavigator`创建的组件，而不是返回一个名为`App`的组件，该组件保存了应用程序的所有路由。这个`StackNavigator`组件需要使用`createAppContainer`导出，如下所示：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Your application now has one route, which is `Home`, and renders the `Home` component.
    You can also add `title` for this screen by setting the `navigationOptions` field in
    the object that''s passed to `createStackNavigator` using the following code:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的应用程序现在有一个名为`Home`的路由，并呈现`Home`组件。您还可以通过在传递给`createStackNavigator`的对象中设置`navigationOptions`字段来为此屏幕添加`title`，如下所示：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To create another route, you can copy this process by adding a `Detail` component
    and add a route that renders this component as well:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建另一个路由，您可以通过添加`Detail`组件并添加呈现此组件的路由来复制此过程：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that you have two screens in your application, you will also need to set
    a default route that will be rendered when the application first mounts. You can
    do this by extending the routing configuration object passed to `createStackNavigator` using
    the following code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的应用程序中有两个屏幕，您还需要设置一个默认路由，该路由在应用程序首次挂载时将呈现。您可以通过使用以下代码扩展传递给`createStackNavigator`的路由配置对象来执行此操作：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can see that the `Detail` route is also rendering by changing the value
    for `initialRouteName` to `Detail`, and checking whether the screen that is rendered
    in your application has the title `Detail`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将`initialRouteName`的值更改为`Detail`，并检查应用程序中呈现的屏幕是否具有标题`Detail`，来看到`Detail`路由也正在呈现。
- en: In the next part of this section, you'll learn how to transition between the
    different screens that are created by this navigator.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的下一部分中，您将学习如何在此导航器创建的不同屏幕之间进行过渡。
- en: Transitioning between screens
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在屏幕之间过渡
- en: 'Transitioning between screens in React Native also works a bit differently
    than in the browser because again, there are no URLs. Instead, you need to use
    the `navigation` prop, which is available from components that are rendered by
    the stack navigator. The `navigation` prop can be used to handle routing by making
    the following changes:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在React Native中，在屏幕之间过渡也与在浏览器中有些不同，因为再次，没有URL。相反，您需要使用`navigation`属性，该属性可从堆栈导航器呈现的组件中获取。`navigation`属性可用于通过进行以下更改来处理路由：
- en: 'You can access the `navigation` prop in this example from the `Home` and `Detail`
    components:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从`Home`和`Detail`组件中访问此示例中的`navigation`属性：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `navigation` prop holds multiple values, including the `navigate` function,
    which  takes a route name as a parameter. You can use this function as an event
    on, for example, a `Button` component that you can import from `react-native`.
    Compared to what you''re used to with React, you can click a button by calling
    an `onPress` event handler instead of `onClick`. Also, the `Button` component
    doesn''t take any children as a prop but a `title` prop instead. To do this, change
    the following code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`navigation`属性包含多个值，包括`navigate`函数，该函数以路由名称作为参数。您可以将此函数用作事件，例如，您可以从`react-native`导入的`Button`组件上调用`onPress`事件处理程序来单击按钮。与您在React中习惯的方式相比，您可以通过调用`onPress`事件处理程序而不是`onClick`来单击按钮。此外，`Button`组件不接受子元素作为属性，而是接受`title`属性。要做到这一点，请更改以下代码：'
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When you press the button with the `Go to Detail` title, you''ll transition
    to the `Detail` screen. The header of this screen will also render a `Return`
    button, which will send you back to the `Home` screen when you press it. You can
    also create a custom return button by using the `goBack` function from the `navigation`
    prop, like this:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您按下标题为`转到详细信息`的按钮时，您将转到`Detail`屏幕。此屏幕的标题栏还将呈现一个`返回`按钮，当您按下它时，将返回到`Home`屏幕。您还可以使用`navigation`属性中的`goBack`函数创建自定义返回按钮，如下所示：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Usually, it''s good practice to store these components in a different directory
    and only use the `App.js` file to make your application more readable. To achieve
    this, you need to create a new directory called `Screens` in the root directory
    of your application, where you need to add a file for each of the two screens
    you''ve just created. Let''s learn how we can do that:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，将这些组件存储在不同的目录中，并且只使用`App.js`文件可以使您的应用程序更易读。为了实现这一点，您需要在应用程序的根目录中创建一个名为`Screens`的新目录，在其中需要为您刚刚创建的两个屏幕中的每一个添加一个文件。让我们学习如何做到这一点：
- en: 'Create a file called `Home.js` in the `Screens` directory and add the `Home` component
    to this file, including the imports of the used modules. The code for the `Home`
    component is as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Screens`目录中创建一个名为`Home.js`的文件，并将`Home`组件添加到该文件中，包括所使用模块的导入。`Home`组件的代码如下：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You need to do the same for the `Detail` screen by creating the `Screens/Detail.js` file
    and adding the code for the `Detail` component and the used modules to this file.
    You can do this by adding the following code block to that new file:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要为`Detail`屏幕做同样的事情，方法是创建`Screens/Detail.js`文件，并将`Detail`组件和所使用的模块的代码添加到该文件中。您可以通过向该新文件添加以下代码块来实现这一点：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `App.js` file, you need to import the `Home` and `Detail` components
    and remove the code blocks that created these two components previously, as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.js`文件中，您需要导入`Home`和`Detail`组件，并删除先前创建这两个组件的代码块，如下所示：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Your application only uses the `App.js` file to create the routes and set up
    the stack navigator. Many applications use multiple types of navigators next to
    each other, which is something that will be shown in the next part of this section.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序只使用`App.js`文件来创建路由并设置堆栈导航器。许多应用程序在彼此旁边使用多种类型的导航器，这将在本节的下一部分中展示。
- en: Using multiple navigators together
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将多个导航器一起使用
- en: 'For more complex applications, you don''t want all of your routes to be stacked
    on top of each other; you only want these stacks to be created for routes that
    are related to each other. Luckily, you can use different types of navigators
    next to each other with React Navigation. Using multiple navigators for the application
    can be done as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的应用程序，您不希望所有的路由都堆叠在一起；您只希望为彼此相关的路由创建这些堆栈。幸运的是，您可以在React Navigation中同时使用不同类型的导航器。可以通过以下方式使用多个导航器来完成应用程序：
- en: 'One of the most common ways of navigation in mobile applications is by using
    tabs; React Navigation can also create a tab navigator for you. Therefore, you''d
    need to pass a routing object to the `createBottomTabNavigator` method, which
    you can import from `react-navigation-tabs` using the following code:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在移动应用程序中导航的最常见方式之一是使用选项卡；React Navigation也可以为您创建选项卡导航器。因此，您需要将一个路由对象传递给`createBottomTabNavigator`方法，您可以使用以下代码从`react-navigation-tabs`导入它：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Suppose you want the `Home` screen and the adjoining `Detail` screen to be
    available on the same tab—you''d need to rename the stack navigator for these
    screens. This stack navigator should be added to the routing object that is passed
    to `createBottomTabNavigator`, which creates the tab navigator. The declaration
    of the initial route that is loaded is now also linked to the tab navigator:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您希望“主页”屏幕和相邻的“详细”屏幕在同一个选项卡上可用-您需要为这些屏幕重命名堆栈导航器。这个堆栈导航器应该被添加到传递给`createBottomTabNavigator`的路由对象中，该对象创建了选项卡导航器。加载的初始路由声明现在也与选项卡导航器相关联：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The main navigation for your application is now the tab navigator, which has
    only one tab, called `Home`. This tab will render the stack navigator that contains
    the `Home` and `Detail` routes, meaning you can still navigate to the `Detail`
    screen without having to leave the `Home` tab.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您应用程序的主要导航现在是选项卡导航器，只有一个名为`Home`的选项卡。此选项卡将呈现包含`Home`和`Detail`路由的堆栈导航器，这意味着您仍然可以在不离开`Home`选项卡的情况下导航到`Detail`屏幕。
- en: 'You can easily add another tab to the tab navigator that renders either a component
    or another stack navigator. Let''s create a new screen called `Settings`, for
    which you''ll first need to create a new component in the `Screens/Settings.js` file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以轻松地向选项卡导航器添加另一个选项卡，该选项卡将呈现组件或另一个堆栈导航器。让我们创建一个名为`Settings`的新屏幕，首先需要在`Screens/Settings.js`文件中创建一个新组件：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Import this component in `App.js` to add the new `Screens` route to the tab
    navigator. This screen renders the `Settings` component after you make these changes:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.js`中导入此组件，以将新的`Screens`路由添加到选项卡导航器。在您进行这些更改后，此屏幕将呈现`Settings`组件：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Your application now has a tab called `Settings`, which will render the `Settings` component.
    However, it isn''t possible to customize, for example, `title` of this screen.
    Therefore, you will need to create another stack navigator that only has the `Settings`
    route by using the following code:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的应用程序现在有一个名为`Settings`的选项卡，它将呈现`Settings`组件。但是，例如此屏幕的`title`是不可能自定义的。因此，您需要使用以下代码创建另一个只有`Settings`路由的堆栈导航器：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You''ve now added both a stack navigator and a tab navigator to your application,
    which allows you to navigate between screens and tabs at the same time. If you''re
    running your application using the iOS Emulator or on a device that runs iOS,
    it will look exactly like the following screenshot. For Android, the application
    should look very similar at this point:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经在应用程序中添加了堆栈导航器和选项卡导航器，这使您可以同时在屏幕和选项卡之间导航。如果您正在使用iOS模拟器或运行iOS的设备上运行应用程序，它将看起来完全像以下屏幕截图。对于Android，在这一点上，应用程序应该看起来非常相似：
- en: '![](assets/5a45f6bb-5a7a-4303-a513-1b6b9a2b3586.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5a45f6bb-5a7a-4303-a513-1b6b9a2b3586.png)'
- en: In the next section, you'll load data from the mock API and use React life cycles
    to load this data in the different screens.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将从模拟API加载数据，并使用React生命周期在不同的屏幕中加载这些数据。
- en: Using life cycles in React Native
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在React Native中使用生命周期
- en: Before you start adding styling to your React Native components, you need to
    fetch some data in your application that will be displayed by these components.
    Therefore, you will need to use life cycles to retrieve this data and add it to
    the local state of your application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始为React Native组件添加样式之前，您需要在应用程序中获取一些数据，这些数据将由这些组件显示。因此，您需要使用生命周期来检索这些数据并将其添加到应用程序的本地状态中。
- en: 'To fetch data, you''ll use the `fetch` API again and combine this with the
    `useState` and `useEffect` Hooks to retrieve this data within the life cycles.
    Once the data has been fetched from the mock API, it can be displayed in a React
    Native `FlatList` component. Life cycle methods can be added to your React Native
    application using Hooks by making the following additions:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取数据，您将再次使用`fetch` API，并结合`useState`和`useEffect` Hooks在生命周期内检索这些数据。一旦从模拟API中获取了数据，它可以在React
    Native的`FlatList`组件中显示。可以通过以下方式使用Hooks向React Native应用程序添加生命周期方法：
- en: 'You''ll use the `useState` Hook to set the constants for the loading indicator,
    error message, and displaying the data, where the `loading` constant should initially
    be true, the `error` constant should be empty, and the `data` constant should
    be an empty array:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将使用`useState` Hook来设置加载指示器、错误消息和显示数据的常量，其中`loading`常量应最初为true，`error`常量应为空，`data`常量应为空数组：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, you need to create an asynchronous function to retrieve the data from
    the mock API and call this function from a `useEffect` Hook that is invoked when
    the application mounts. The `fetchAPI` function will change both of the constants
    for `loading`, `error`, and `data` when the API request is successful. If not,
    the error message will be added to the `error` constant:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要创建一个异步函数，从模拟API中检索数据，并从应用程序挂载时调用`useEffect` Hook。当API请求成功时，`fetchAPI`函数将更改`loading`、`error`和`data`的两个常量。如果不成功，错误消息将被添加到`error`常量中。
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This data constant can now be added as a prop to a `FlatList` component, which
    iterates over the data and renders components that display this data. `FlatList` returns
    an object that contains a field called `item`, which contains the data of each
    iteration, as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，这个数据常量可以作为`FlatList`组件的一个prop添加，它会遍历数据并渲染显示这些数据的组件。`FlatList`返回一个包含名为`item`的字段的对象，其中包含每次迭代的数据，如下所示：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Just like we can with React, when using a `map` or `forEach` function, you
    need to specify a `key` prop on each iterated component. `FlatList` automatically
    looks for a `key` field in your `data` object, but if you don''t have a specific
    `key` field, you need to set this using the `keyExtractor` prop. It''s important
    to know that the value that''s used for the key should be a string, so you need
    to transform the `id` field that''s returned by the mock API into a string:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像我们在React中可以做的那样，当使用`map`或`forEach`函数时，您需要在每个迭代的组件上指定一个`key`属性。`FlatList`会自动查找`data`对象中的`key`字段，但如果您没有特定的`key`字段，您需要使用`keyExtractor`属性来设置它。重要的是要知道，用于键的值应该是一个字符串，因此您需要将模拟API返回的`id`字段转换为字符串：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, your application will display a list with titles of house listings from
    the mock API, without any routing to a specific listing or styling. This will
    make your application look as follows, where the differences between Android and
    iOS should be limited since we haven''t added any significant styling to the application
    yet:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的应用程序将显示来自模拟API的房源标题列表，而无需路由到特定的列表或样式。这将使您的应用程序看起来如下，Android和iOS之间的差异应该是有限的，因为我们尚未向应用程序添加任何重要的样式：
- en: '![](assets/841776ec-33b6-4991-8327-ba35ae187dab.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/841776ec-33b6-4991-8327-ba35ae187dab.png)'
- en: 'To add the navigation to the `Detail` route again, you need to return a component
    from `FlatList`, which supports `onPress` events. These are, for example, the
    `Button` component you used previously and the `TouchableOpacity` component. This
    last component can be used as a replacement for a `View` component, which doesn''t
    support `onPress` events. Creating navigation here is done by making the following
    changes:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要再次将导航添加到`Detail`路由，您需要从`FlatList`返回一个支持`onPress`事件的组件。例如，您之前使用的`Button`组件和`TouchableOpacity`组件。这个最后一个组件可以用作`View`组件的替代品，它不支持`onPress`事件。在这里创建导航是通过进行以下更改完成的：
- en: 'You need to import the `TouchableOpacity` component from `react-native` and
    wrap the `Text` component returned by `FlatList` with this component. The `onPress` event
    will call the `navigate` function from the `navigation` prop and navigate to the
    `Detail` route if we change the following code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要从`react-native`中导入`TouchableOpacity`组件，并用这个组件包装`FlatList`返回的`Text`组件。`onPress`事件将从`navigation`属性调用`navigate`函数，并导航到`Detail`路由，如果我们更改以下代码：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When you click on any of the titles that are displayed in your application,
    you''ll navigate to the `Detail` route. However, you want this screen to display
    the item you''ve just pressed. Therefore, you will need to pass parameters to
    this route once the `TouchableOpacity` components are pressed. To do this, you
    will need to pass these parameters inside an object to the `navigate` function:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您单击应用程序中显示的任何标题时，您将导航到“详细”路由。但是，您希望此屏幕显示您刚刚按下的项目。因此，一旦按下`TouchableOpacity`组件，您将需要向此路由传递参数。为此，您需要将这些参数作为对象传递给`navigate`函数：
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'From the component that is rendered by the `Detail` route, you can take this
    parameter object from the `navigation` prop and use this to display the item.
    To get the parameters from the `navigation` prop, you can use the `getParam` function,
    where you need to specify the name of the parameter you want to get and a fallback
    value for this parameter. Just like we did for the `Home` route, you can display `title`
    of the listing, which in this case should be `title` from the `item` parameter:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从由“详细”路由呈现的组件中，您可以从“navigation”属性中获取此参数对象，并使用它来显示该项目。要从“navigation”属性获取参数，您可以使用`getParam`函数，其中您需要指定要获取的参数的名称和此参数的回退值。就像我们为“主页”路由所做的那样，您可以显示列表的“title”，在这种情况下应该是来自“item”参数的“title”：
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Instead of passing the entire object containing the data from the item you've
    clicked, you could just send the ID of the item. That way, you could fetch the
    mock API to get the data for this listing and display it on the `Detail` route
    as well. To get an individual listing, you need to send a request to the `'listings/:id'` route.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 不要传递包含所点击项目数据的整个对象，而是只需发送项目的ID。这样，您可以获取模拟API以获取此列表的数据，并在“详细”路由上显示它。要获取单个列表，您需要发送请求到“'listings/:id'”路由。
- en: You're now able to view both a list of all of the listings from the mock API
    and a specific listing from this API. Styling will be added in the next section
    using `styled-components`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以查看来自模拟API的所有列表和来自此API的特定列表。下一节将使用`styled-components`添加样式。
- en: Styling React Native applications
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式化React Native应用程序
- en: 'The syntax you''ve used so far to style React Native components in this application
    looks a bit different from what you''ve used already. Therefore, you can install
    `styled-components` to use the syntax for writing styles you''re already familiar
    with. To install this, you need to run the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在此应用程序中用于样式化React Native组件的语法看起来与您已经使用的有些不同。因此，您可以安装`styled-components`以使用您已经熟悉的样式编写语法。要安装此内容，您需要运行以下命令：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This will install the `styled-components` package, after which you can proceed
    by creating styling for the components that are already present in your application:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装`styled-components`包，之后您可以继续为应用程序中已经存在的组件创建样式：
- en: 'Let''s start by transforming the `View` and `FlatList` components in the `Screens/Home.js` file into
    `styled-components`. To do this, you need to import `styled` from `styled-components/native` as
    you only want to import the specific native parts of the package:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从将“Screens/Home.js”文件中的`View`和`FlatList`组件转换为`styled-components`开始。为此，您需要从`styled-components/native`中导入`styled`，因为您只想导入包的特定本机部分：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`StyleSheet` at the bottom of the file creates the styling for the `View` component,
    which should be transformed into a component styled with `styled-components`.
    As we saw in the previous chapters, you can extend the style of existing components
    as well. Most of the styling rules can be copied and changed to the `styled-components`
    syntax, as seen in the following code block:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件底部的`StyleSheet`创建了`View`组件的样式，应该将其转换为使用`styled-components`样式的组件。正如我们在前几章中看到的那样，您也可以扩展现有组件的样式。大多数样式规则可以复制并更改为`styled-components`的语法，如下代码块所示：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The same can be done for the `FlatList` component, that is, by extending the
    style for this component with `styled` from `styled-components` and setting custom
    styling rules like this:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FlatList`组件也可以做同样的事情，即通过使用`styled-components`中的`styled`来扩展此组件的样式，并设置自定义样式规则，如下所示：'
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`FlatList` is currently only returning a `Text` component with `title`, while
    more data can be displayed. To do this, you need to create a new component that
    returns multiple components containing the listings data from the mock API. You
    can do this in a new directory called `Components`, which contains another directory
    called `Listing`. In this directory, you need to create the `ListingItem.js` file and
    place the following code block in there:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FlatList`目前只返回一个带有`title`的`Text`组件，而可以显示更多数据。为了做到这一点，您需要创建一个新的组件，该组件返回包含来自模拟API的列表数据的多个组件。您可以在一个名为`Components`的新目录中完成这个操作，该目录包含另一个名为`Listing`的目录。在这个目录中，您需要创建`ListingItem.js`文件，并将以下代码块放入其中：'
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In this code block, you import `styled` from `styled-components/native` and
    the components from React Native that you want to style. The `ListingItem` component
    that is exported at the bottom of the file takes an `item` and a `navigation`
    prop to display this data within the created components and handle navigation.
    As we saw with the styled `Image` component, a `source` prop is been given an
    object to display the thumbnail from the mock API.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码块中，您从`styled-components/native`中导入`styled`和您想要样式化的React Native组件。文件底部导出的`ListingItem`组件接受一个`item`和一个`navigation`属性，以在创建的组件中显示这些数据并处理导航。就像我们在样式化的`Image`组件中看到的那样，`source`属性被赋予一个对象，以显示来自模拟API的缩略图。
- en: 'This `ListingItem` component should now be imported into `Screens/Home.js`,
    where it will be used by `FlatList` to display the listings. This component takes
    both `item` and `navigation` as props, which is done in the following code block:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，应该将这个`ListingItem`组件导入到`Screens/Home.js`中，`FlatList`将使用它来显示列表。这个组件接受`item`和`navigation`作为属性，如下所示：
- en: '[PRE33]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In React Native, styling rules are scoped to components, meaning a `Text` component
    can only take styling rules that are specified for this component by React Native.
    When you try to add a styling rule that isn't supported, you'll receive an error
    and a list of all the possible styling rules for this component. Note that `styled-components` automatically
    renames styling rules for you to match the syntax for styling in React Native.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在React Native中，样式规则是针对组件的，这意味着`Text`组件只能接受由React Native为该组件指定的样式规则。当您尝试添加不受支持的样式规则时，您将收到一个错误和该组件的所有可能的样式规则的列表。请注意，`styled-components`会自动为您重命名样式规则，以匹配React
    Native中的样式语法。
- en: 'After these changes, you''ll have added the first `styled-components` to your
    application. Your application should look as follows when you''re using either
    the iOS Emulator or a device that runs on iOS:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 经过这些更改，您将向应用程序添加了第一个`styled-components`。当您使用iOS模拟器或运行iOS的设备时，您的应用程序应该如下所示：
- en: '![](assets/a6a3a96c-c928-4c90-ac6d-f7a551f9cc5a.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a6a3a96c-c928-4c90-ac6d-f7a551f9cc5a.png)'
- en: So far, the styling should look similar on both iOS and Android since we haven't
    added any platform-specific styling to the application yet. This will be done
    in the next part of this section, where you'll explore multiple ways to add styling
    that differs based on the platform that your application is running on.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，由于我们尚未向应用程序添加任何特定于平台的样式，因此iOS和Android上的样式应该看起来相似。这将在本节的下一部分中完成，在该部分中，您将探索根据应用程序运行的平台而不同的多种添加样式的方法。
- en: Differences in styling for iOS and Android
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS和Android的样式差异
- en: When styling your application, you might want to have different styling rules
    for iOS and Android, for example, to match the styling of the Android operating
    system better. There are multiple ways to apply different styling rules to different
    platforms; one of them is by using the `Platform` module,  which can be imported
    from React Native.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计应用程序时，您可能希望为iOS和Android设置不同的样式规则，例如，以更好地匹配Android操作系统的样式。有多种方法可以将不同的样式规则应用于不同的平台；其中一种方法是使用`Platform`模块，该模块可以从React
    Native中导入。
- en: 'Let''s try this by adding icons to the tabs in the `navigator` tab and have
    different icons for iOS and Android:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过向`navigator`选项卡中的选项卡添加图标，并为iOS和Android设置不同的图标。
- en: 'First, import the icons from Expo into the `App.js` file. There are a lot of
    icon sets available from Expo. For this application, you''ll import the `Ionicons` icon
    set:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从Expo中将图标导入到`App.js`文件中。Expo提供了许多图标集。对于此应用程序，您将导入`Ionicons`图标集：
- en: '[PRE34]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'When creating the tab navigator, you can define which icons should be added
    to the tabs for each route. Therefore, you need to create a `defaultNavigationOptions`
    field in the routing object that should contain a `tabBarIcon` field. In this
    field, you need to take the current route from the `navigation` prop and return
    the icon for this route:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建选项卡导航器时，您可以定义应该添加到每个路由选项卡的图标。因此，您需要在路由对象中创建一个`defaultNavigationOptions`字段，该字段应包含一个`tabBarIcon`字段。在此字段中，您需要从`navigation`属性中获取当前路由，并返回此路由的图标：
- en: '[PRE35]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '3\. To make a distinction between iOS and Android, you need to import the `Platform` module from
    `react-native`. With this module, you can check whether your mobile device is
    running iOS or Android by checking whether the value of `Platform.OS` is either `ios` or `android`.
    The module must be imported into the following code block:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 要区分iOS和Android，您需要从`react-native`中导入`Platform`模块。使用此模块，您可以通过检查`Platform.OS`的值是否为`ios`或`android`来检查您的移动设备是运行iOS还是Android。必须将该模块导入以下代码块中：
- en: '[PRE36]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Using the `Platform` module, you can change the icon that is being rendered
    for each of the tabs in the navigator. Besides icons designed for iOS, `Ionicons`
    also has icons designed for Android based on Material Design and can be used like
    this:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Platform`模块，您可以更改导航器中每个选项卡呈现的图标。除了为iOS设计的图标外，`Ionicons`还具有基于Material Design的Android设计图标，可以像这样使用：
- en: '[PRE37]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: When you're running the application on a mobile device with Android, the `navigator`
    tab will display the icons based on Material Design. If you're using an Apple
    device, it will display different icons; you can change the `Platform.OS === 'ios'` condition to `Platform.OS
    === 'android'` to add the Material Design icons to iOS instead.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在Android移动设备上运行应用程序时，`navigator`选项卡将显示基于Material Design的图标。如果您使用的是苹果设备，它将显示不同的图标；您可以将`Platform.OS
    === 'ios'`条件更改为`Platform.OS === 'android'`，以将Material Design图标添加到iOS中。
- en: 'The displayed icons are colored black, while the labels for the active and
    inactive tabs have a different color. You can  specify the colors of the icons
    and the labels in the active and inactive state by changing the configuration
    object. After the `tabBarIcon` field, you can create a new field called `tabBarOptions`
    and add the `activeTintColor` and `inActiveTintColor` fields to them as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示的图标是黑色的，而活动和非活动标签的标签具有不同的颜色。您可以通过更改配置对象来指定图标和标签在活动和非活动状态下的颜色。在`tabBarIcon`字段之后，您可以创建一个名为`tabBarOptions`的新字段，并将`activeTintColor`和`inActiveTintColor`字段添加到其中，如下所示：
- en: '[PRE38]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This only changes the value for the label, but the values for the active and
    inactive tint color are also available on the `tabBarIcon` field it will take
    the `tintColor` prop. This value can be passed to `Ionicons` to change the color
    of the icon as well:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这只改变了标签的值，但活动和非活动的色调颜色值也可以在`tabBarIcon`字段上使用`tintColor`属性。这个值可以传递给`Ionicons`来改变图标的颜色：
- en: '[PRE39]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, when you view the Home screen, both the tab icon and label are colored
    blue, while the Settings tab will be colored gray. Also, there will be a difference
    in the icons that are displayed on either iOS or Android no matter whether you''re
    running the application on the emulator or a mobile device. If you''re using iOS,
    the application should look like this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您查看主屏幕时，选项卡图标和标签都会呈蓝色，而设置选项卡将呈灰色。此外，无论您是在模拟器上还是在移动设备上运行应用程序，显示的图标都会有所不同。如果您使用iOS，应用程序应该如下所示：
- en: '![](assets/9222c634-8eda-4ae6-b05d-2ed7a4a6279d.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9222c634-8eda-4ae6-b05d-2ed7a4a6279d.png)'
- en: 'Another page that can be styled is the `Detail` screen. For this screen, you
    can also choose to have differences in styling between iOS and Android. As mentioned
    before, there are multiple ways to do this; besides using the `Platform` module,
    you can also use platform-specific file extensions. Any file that has the `*.ios.js`
    or `*.android.js` extension will only be rendered on the platform specified in
    the extension. Not only can you apply different styling rules, but also have changes
    in functionality on different platforms:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可以进行样式设置的页面是“详情”屏幕。对于这个屏幕，您也可以选择在iOS和Android之间进行样式上的差异。如前所述，有多种方法可以做到这一点；除了使用`Platform`模块之外，您还可以使用特定于平台的文件扩展名。任何具有`*.ios.js`或`*.android.js`扩展名的文件都只会在扩展名指定的平台上呈现。您不仅可以应用不同的样式规则，还可以在不同平台上进行功能上的变化：
- en: 'To create a specific `Detail` screen for mobile devices running Android, you
    need to create a new file called `Components/Listing/ListingDetail.android.js`.
    This file will have the following code inside:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在运行Android的移动设备上创建一个特定的“详情”屏幕，您需要创建一个名为`Components/Listing/ListingDetail.android.js`的新文件。这个文件里面将包含以下代码：
- en: '[PRE40]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As you can see, some components will be rendered by the `ListingDetail` component.
    Also, the `Dimensions` module is imported from `react-native`. This module can
    help you get the screen size of the device that which the application is running
    on. By getting the width, you can display an image over the entire width of the
    user's screen.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，一些组件将由`ListingDetail`组件呈现。还从`react-native`中导入了`Dimensions`模块。这个模块可以帮助您获取应用程序正在运行的设备的屏幕尺寸。通过获取宽度，您可以在用户屏幕的整个宽度上显示图像。
- en: 'For devices running iOS, you can do the same, but this time you need to create
    a new file called `Components/Listing/ListingDetail.ios.js`. This file will contain
    a variant of the code that''s running on Android, where the image will be displayed
    over the entire height of the screen using the `Dimensions` module. The `ListingDetail`
    component for iOS can be created by pasting the following code block into that
    file:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于运行iOS的设备，您也可以做同样的事情，但这次您需要创建一个名为`Components/Listing/ListingDetail.ios.js`的新文件。这个文件将包含在Android上运行的代码的变体，其中图像将使用`Dimensions`模块在整个屏幕高度上显示。iOS的`ListingDetail`组件可以通过将以下代码块粘贴到该文件中来创建：
- en: '[PRE41]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To display one of these components in your application, some changes need to
    made to the `Screens/Detail.js` file. The `ListingDetail` component should be
    imported into this file and returned with the `item` prop:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在应用程序中显示这些组件中的一个，需要对`Screens/Detail.js`文件进行一些更改。`ListingDetail`组件应该被导入到这个文件中，并使用`item`属性返回：
- en: '[PRE42]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Your application now has two different versions of the Detail screen for iOS
    and Android, and React Native will make sure that the file with the right extension
    will run on that operating system. You can check this by comparing the application
    that runs on your Android Emulator or mobile device with the following screenshot,
    which was taken from an iOS device:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序现在在iOS和Android上有两个不同版本的详细屏幕，React Native将确保具有正确扩展名的文件在该操作系统上运行。您可以通过比较在Android模拟器或移动设备上运行的应用程序与以下截图来检查这一点，该截图是从iOS设备上获取的：
- en: '![](assets/bb97a0eb-ee44-4098-946e-699afe265f14.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bb97a0eb-ee44-4098-946e-699afe265f14.png)'
- en: With these last changes, you've created your first React Native application
    that will run on both Android and iOS devices and has basic routing and styling
    implemented.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些最后的更改，您已经创建了您的第一个React Native应用程序，该应用程序将在Android和iOS设备上运行，并实现了基本的路由和样式。
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you created a house listing application with React Native for
    both iOS and Android mobile devices. Expo was used to create the first version
    of the application and provides a lot of functionality to smoothen the developer
    experience. The `react-navigation` package is used to handle different kinds of
    routing for mobile applications, while `styled-components` is utilized to handle
    styling for this React Native application.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您使用React Native为iOS和Android移动设备创建了一个房源应用程序。Expo用于创建应用程序的第一个版本，并提供了许多功能以平滑开发人员的体验。`react-navigation`包用于处理移动应用程序的不同类型的路由，而`styled-components`用于处理这个React
    Native应用程序的样式。
- en: Since this was probably your first introduction to React Native, you shouldn't
    feel bad if not everything was clear from the start. The basics you learned about
    in this chapter should provide a proper baseline so that we can continue your
    journey into the world of mobile app development. The project you'll create in
    the next chapter will build upon these principles further and handle features
    such as animations while we create a *Tic-Tac-Toe* game.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这可能是您对React Native的第一次介绍，如果一开始并不清楚一切，您不必感到难过。本章中学到的基础知识应该提供了一个合适的基线，以便我们可以继续您的移动应用开发之旅。在下一章中，您将创建的项目将进一步建立在这些原则之上，并处理诸如动画之类的功能，同时我们将创建一个*井字棋*游戏。
- en: Further reading
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: To find out more about custom headers in React Navigation, check out this link: [https://reactnavigation.org/docs/en/headers.html](https://reactnavigation.org/docs/en/headers.html).
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解有关React Navigation中自定义标题的更多信息，请查看此链接：[https://reactnavigation.org/docs/en/headers.html](https://reactnavigation.org/docs/en/headers.html)。
- en: You can find a list of Expo icons here: [https://expo.github.io/vector-icons/](https://expo.github.io/vector-icons/).
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在这里找到Expo图标的列表：[https://expo.github.io/vector-icons/](https://expo.github.io/vector-icons/)。
