["```jsx\nexport ANDROID_SDK=**ANDROID_SDK_LOCATION**export PATH=**ANDROID_SDK_LOCATION**/platform-tools:$PATH export PATH=**ANDROID_SDK_LOCATION**/tools:$PATH\n```", "```jsx\nnpm install && npm start\n```", "```jsx\nmessaging\n|-- client\n    |-- .expo\n    |-- assets\n        |-- icon.png\n        |-- splash.png\n    |-- Components\n        |-- // ...\n    |-- node_modules\n    |-- Screens\n        |-- AuthLoading.js\n        |-- Conversation.js\n        |-- Conversations.js\n        |-- Login.js\n        |-- Settings.js\n    |-- .watchmanconfig\n    |-- App.js\n    |-- AppContainer.js\n    |-- app.json\n    |-- babel.config.js\n    |-- package.json\n```", "```jsx\n|-- Components\n    |-- Button\n        |-- Button.js\n    |-- Conversation\n        |-- ConversationActions.js\n        |-- ConversationItem.js\n    |-- Message\n        |-- Message.js\n    |-- TextInput\n        |-- TextInput.js\n```", "```jsx\nipconfig\n```", "```jsx\nipconfig getifaddr en0\n```", "```jsx\n192.168.1.107\n```", "```jsx\ncd client && npm install graphql apollo-client apollo-link-http apollo-cache-inmemory react-apollo\n```", "```jsx\nimport React from 'react';\nimport AppContainer from './AppContainer';\n+ import { ApolloClient } from 'apollo-client';\n+ import { InMemoryCache } from 'apollo-cache-inmemory';\n+ import { HttpLink } from 'apollo-link-http';\n+ import { ApolloProvider } from 'react-apollo';\n\n+ const API_URL = 'http://192.168.1.107:4000/graphql';\n\n+ const cache = new InMemoryCache();\n+ const client = new ApolloClient({\n+   link: new HttpLink({\n+     uri: API_URL,\n+   }),\n+   cache\n+ });\n\n- const App = () => <AppContainer />;\n\n+ const App = () => (\n+  <ApolloProvider client={client}>\n+     <AppContainer />\n+  </ApolloProvider>\n+ );\n\nexport default App;\n```", "```jsx\nimport  React  from 'react'; import { FlatList, Text, View } from 'react-native'; import  styled  from 'styled-components/native'; + import { Query } from 'react-apollo';  + import { GET_CONVERSATIONS } from '../constants'; + import  ConversationItem  from '../Components/Conversations/ConversationItem'; ... const  Conversations  = () => (\n ...\n```", "```jsx\n...\n\nconst  Conversations  = () => (  <ConversationsWrapper> - <ConversationsText>Loading...</ConversationsText> +   <Query query={GET_CONVERSATIONS}> +     {({ loading, data }) => { +       if (loading) { +         return <ConversationsText>Loading...</ConversationsText> +       } +       return ( +         <ConversationsList +           data={data.conversations} +           keyExtractor={item => item.userName} +           renderItem={({ item }) => <ConversationItem item={item} /> } +         /> +       ); +     }} +   </Query>  </ConversationsWrapper> ); export default Conversations;\n```", "```jsx\n...\n\n- const  Conversations  = () => ( + const  Conversations  = ({ navigation ) => **(** <ConversationsWrapper>\n  <ConversationsText>Loading...</ConversationsText>\n <Query query={GET_CONVERSATIONS}> {({ loading, data }) => { if (loading) { return <ConversationsText>Loading...</ConversationsText> } return ( <ConversationsList data={data.conversations} keyExtractor={item => item.userName} -             renderItem={({ item }) => <ConversationItem item={item} /> }\n+ renderItem={({ item }) => <ConversationItem item={item} navigation={navigation} />}  /> ); }} </Query>  </ConversationsWrapper> ); export default Conversations;\n```", "```jsx\nimport  React  from 'react'; import { Platform, Text, View, TouchableOpacity } from 'react-native'; import { Ionicons }  from '@expo/vector-icons'; import  styled  from 'styled-components/native';\n\n... - const ConversationItem = ({ item }) => ( + const  ConversationItem  = ({ item, navigation }) => ( -   <ConversationItemWrapper> +   <ConversationItemWrapper +     onPress={() =>  navigation.navigate('Conversation', { item })} **+   >**\n      <ThumbnailWrapper>\n        ... \n```", "```jsx\nimport  React  from 'react'; import { Dimensions, ScrollView, Text, FlatList, View } from 'react-native'; + import { Query } from 'react-apollo'; import  styled  from 'styled-components/native'; + import  Message  from '../Components/Message/Message'; + import { GET_CONVERSATION } from '../constants'**;**\n\n... const  Conversation  = () => (  ...\n```", "```jsx\n... - const  Conversation  = () => { + const  Conversation  = ({ navigation }) => { +   const  userName  =  navigation.getParam('userName', '');  + return **(** <ConversationWrapper>  -       <ConversationBodyText>Loading...</ConversationBodyText> +       <Query query={GET_CONVERSATION} variables={{ userName }}>        <ConversationBody> +         {({ loading, data }) => { +           if (loading) { +             return <ConversationBodyText>Loading...</ConversationBodyText>; +           } +           const { messages } = data.conversation;\n  +           <MessagesList\n+ data={messages}\n+ keyExtractor={item  =>  String(item.id)}\n+ renderItem={({ item }) => (\n+ <Message  align={item.userName === 'me' ? 'left' : 'right'}>\n+ {item.text}\n+ </Message>\n+ )}\n+ />  +         }}        </ConversationBody>**+     </Query>**  <ConversationActions userName={userName}  />\n </ConversationWrapper>\n ); + }; export default Conversation;\n```", "```jsx\nimport  React  from 'react'; import { Platform } from 'react-native'; import { Ionicons }  from '@expo/vector-icons'; import {  + createSwitchContainer,    createAppContainer  } from 'react-navigation'; import { createStackNavigator } from 'react-navigation-stack';\nimport { createBottomTabNavigator } from 'react-navigation-tabs';\nimport  Conversations  from './Screens/Conversations'; import  Conversation  from './Screens/Conversation'; import  Settings  from './Screens/Settings'; + import  Login  from './Screens/Login'**;** const  ConversationsStack  =  createStackNavigator({\n  ... \n```", "```jsx\n...\n\n+ const SwitchNavigator = createSwitchNavigator( +   { +     Main: TabNavigator, +     Auth: Login +   }, +   { +     initialRouteName: 'Auth', +   } + ); - export default createAppContainer(TabNavigator); + export default createAppContainer(SwitchNavigator);\n```", "```jsx\nimport React from 'react';\nimport { View, TextInput } from 'react-native';\nimport styled from 'styled-components/native';\n+ import { Mutation } from 'react-apollo';\nimport Button from '../Components/Button/Button';\n+ import { LOGIN_USER } from '../constants';\n\n... const Login = () => {\n const [userName, setUserName] = React.useState('');\n const [password, setPassword] = React.useState('');\n\n return (\n+  <Mutation mutation={LOGIN_USER}>\n+    {loginUser => (\n       <LoginWrapper>\n          <StyledTextInput\n            onChangeText={setUserName}\n            value={userName}\n            placeholder='Your username'\n            textContentType='username'\n          />\n          <StyledTextInput\n            onChangeText={setPassword}\n            value={password}\n            placeholder='Your password'\n            textContentType='password'\n          />\n          <Button\n            title='Login'\n+           onPress={() => loginUser({ variables: { userName, password } })}\n          />\n        </LoginWrapper>\n+    )}\n+  </Mutation>\n );\n};\n\nexport default Login;\n```", "```jsx\n... export  const  LOGIN_USER  =  gql`\n mutation loginUser($userName: String!, $password: String!) {\n   loginUser(userName: $userName, password: $password) {\n     userName\n     token\n   }\n }\n`;\n...\n```", "```jsx\nimport React from 'react';\nimport { View, TextInput } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Mutation } from 'react-apollo';\nimport Button from '../Components/Button/Button';\nimport { LOGIN_USER } from '../constants'; ... const Login = () => {\n const [userName, setUserName] = React.useState('');\n const [password, setPassword] = React.useState('');\n\n return (\n  <Mutation mutation={LOGIN_USER}>\n-    {loginUser => (\n+    {(loginUser, { loading }) => (  <LoginWrapper>\n          <StyledTextInput\n            onChangeText={setUserName}\n            value={userName}\n            placeholder='Your username'\n            textContentType='username'\n          />\n          <StyledTextInput\n            onChangeText={setPassword}\n            value={password}\n            placeholder='Your password'\n            textContentType='password'\n          />\n          <Button\n-           title='Login'\n+           title={loading ? 'Loading...' : 'Login'}\n            onPress={() => loginUser({ variables: { userName, password } })}\n          />\n       </LoginWrapper>\n    }}\n   </Mutation>\n );\n};\n\nexport default Login;\n```", "```jsx\nimport React from 'react';\n- import { View, TextInput } from 'react-native';\n+ import { Alert, View, TextInput } from 'react-native';\nimport styled from 'styled-components/native';\nimport { Mutation } from 'react-apollo';\nimport Button from '../Components/Button/Button';\nimport { LOGIN_USER } from '../constants';\n\n...\n\n <Button\n   title={loading ? 'Loading...' : 'Login'}\n   onPress={() => {     loginUser({ variables: { userName, password } })\n**+** .catch(error  => {\n+ Alert.alert(\n+         'Error',\n+         error.graphQLErrors.map(({ message }) =>  message)[0] +        );\n+    });\n   }}\n />\n\n...\n```", "```jsx\nimport  React  from 'react';  - import { Alert, View, TextInput } from 'react-native';\n+ import { AsyncStorage, Alert, View, TextInput } from 'react-native';  import  styled  from 'styled-components/native';  import { Mutation } from 'react-apollo';  import  Button  from '../Components/Button/Button';  import { LOGIN_USER } from '../constants'; ... const  Login  = ({ navigation }) => {\n  ... \n  <Button\n    title={loading ? 'Loading...' : 'Login'}\n    onPress={() => {      loginUser({ variables: { userName, password } }) +       .then(({data}) => { +         const { token } = data.loginUser; +         AsyncStorage.setItem('token', token);  +       })\n        .catch(error  => {         if (error) {\n            Alert.alert(\n              'Error',\n              error.graphQLErrors.map(({ message }) =>  message)[0], );\n          }\n        });\n      }}\n    /> \n    ...\n```", "```jsx\nimport  React  from 'react';  import { AsyncStorage, Alert, View, TextInput } from 'react-native';  import  styled  from 'styled-components/native';  import { Mutation } from 'react-apollo';  import  Button  from '../Components/Button/Button';  import { LOGIN_USER } from '../constants'; ... - const  Login  = () => { + const  Login  = ({ navigation }) => { ... \n<Button\n title={loading ? 'Loading...' : 'Login'}\n onPress={() => { loginUser({ variables: { userName, password } })  .then(({data}) => {    const { token } = data.loginUser;\n**-** AsyncStorage.setItem('token', token) +   AsyncStorage.setItem('token', token).then(value  => { +     navigation.navigate('Main'); +   });    })\n  .catch(error  => { if (error) { Alert.alert( 'Error', error.graphQLErrors.map(({ message }) =>  message)[0], );\n    }\n  });\n }} />\n\n...\n```", "```jsx\nimport  React  from 'react';  import { Platform } from 'react-native';  import { Ionicons }  from '@expo/vector-icons';  import {   createSwitchNavigator,\n  createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { createBottomTabNavigator } from 'react-navigation-tabs';  import  Conversations  from './Screens/Conversations';  import  Conversation  from './Screens/Conversation';  import  Settings  from './Screens/Settings';  import  Login  from './Screens/Login';  + import  AuthLoading  from './Screens/AuthLoading'; const  ConversationsStack  =  createStackNavigator({\n\n  ...   const  SwitchNavigator  =  createSwitchNavigator(\n  {\n    Main:  TabNavigator,    Login,\n**+   AuthLoading,**\n  },\n  {\n-   initialRouteName: 'Login',\n+   initialRouteName: 'AuthLoading',\n  }\n);export default createAppContainer(SwitchNavigator);\n```", "```jsx\nimport  React  from 'react';  - import { Text, View } from 'react-native'; + import { AsyncStorage, Text, View } from 'react-native'; import  styled  from 'styled-components/native'; ... - const AuthLoading = () => ( + const  AuthLoading  = ({ navigation }) => { + React.useEffect(() => { + AsyncStorage.getItem('token').then(value  => { +       navigation.navigate(value  ? 'Main'  : 'Auth'); +     }); +   }, [navigation]); +   return **(** <AuthLoadingWrapper> <AuthLoadingText>Loading...</AuthLoadingText> </AuthLoadingWrapper>\n ); **+ };**\n\nexport default AuthLoading;\n```", "```jsx\nimport  React  from 'react';  - import { Text, View } from 'react-native'; + import { AsyncStorage, Text, View } from 'react-native';  import  styled  from 'styled-components/native';  import  Button  from '../Components/Button/Button'; ... - const Settings = () => ( + const  Settings  = ({ navigation }) => **(**\n      <SettingsWrapper> - <Button title='Log out' /> +       <Button +         title='Log out' +         onPress={() => { +           AsyncStorage.removeItem('token').then(() =>  navigation.navigate('AuthLoading')); +         }} **+       />**\n </SettingsWrapper>\n );\n\nexport default Settings;\n```", "```jsx\nnpm install apollo-link-context\n```", "```jsx\nimport  React  from 'react';  import { ApolloClient } from 'apollo-client';  import { InMemoryCache } from 'apollo-cache-inmemory'; **+ import { setContext }  from 'apollo-link-context';** import { HttpLink } from 'apollo-link-http';  import { ApolloProvider } from 'react-apollo';  import  AppContainer  from './AppContainer'; const API_URL = '..'; + const  httpLink  =  new  HttpLink({ + uri: API_URL,**+ });** const  cache  =  new  InMemoryCache(); const  client  =  new  ApolloClient({ - link: new HttpLink({ -   uri: API_URL, - }), + link:  httpLink**,**\n cache, }); const  App  = () => (\n ...\n```", "```jsx\nimport React from 'react';\n+ import { AsyncStorage } from 'react-native';\nimport AppContainer from './AppContainer';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from 'react-apollo';\n\nconst API_URL = '...';\n\nconst  httpLink  =  new  HttpLink({\n  uri:  API_URL,  }); \n+ const  authLink  =  setContext(async (_, { headers }) => { +   const  token  =  await  AsyncStorage.getItem('token'); +   return { +     headers: { +       ...headers, +       authorization:  token  ?  `Bearer ${token}`  : '',  +     }\n+   };\n+ });  ...\n```", "```jsx\n...\n\nconst  cache  =  new  InMemoryCache(); const  client  =  new  ApolloClient({ - link: httpLink,\n+ link:  authLink.concat(httpLink),  cache }); const  App  = () => (\n  ...\n```", "```jsx\nnpm install apollo-link-ws subscriptions-transport-ws apollo-utilities\n```", "```jsx\nimport  React  from 'react'; import { AsyncStorage } from 'react-native'; import { ApolloClient } from 'apollo-client';  import { InMemoryCache } from 'apollo-cache-inmemory'; import { setContext } from 'apollo-link-context'; import { HttpLink } from 'apollo-link-http';  + import { split } from 'apollo-link';  import { ApolloProvider } from 'react-apollo';  import  AppContainer  from './AppContainer'; const API_URL = '...';\n**+ const SOCKET_URL = 'ws://192.168.1.107/graphql';** ...\n\n+ const  wsLink  =  new  WebSocketLink({ +   uri: SOCKET_URL,  +   options: { +     reconnect:  true, +   },\n+ });\n\n...\n```", "```jsx\nimport  React  from 'react'; import { AsyncStorage } from 'react-native'; import { ApolloClient } from 'apollo-client';  import { InMemoryCache } from 'apollo-cache-inmemory'; import { setContext } from 'apollo-link-context'; import { HttpLink } from 'apollo-link-http';  import { split } from 'apollo-link'; + import { WebSocketLink } from 'apollo-link-ws';  + import { getMainDefinition } from 'apollo-utilities';  import { ApolloProvider } from 'react-apollo';  import  AppContainer  from './AppContainer'; ... + const  link  =  split( +   ({ query }) => { +     const  definition  =  getMainDefinition(query);\n+ +     return ( +       definition.kind  === 'OperationDefinition'  && definition.operation  === 'subscription' +     );\n+   },\n+   wsLink, +   httpLink,\n+ );\n\nconst  cache  =  new  InMemoryCache(); const  client  =  new  ApolloClient({ - link: authLink.concat(httpLink),\n+ link: authLink.concat(link),\n cache,\n});\n\nconst  App  = () => (\n ...\n```", "```jsx\nimport  React  from 'react';  import  styled  from 'styled-components/native';  import { Dimensions, ScrollView, FlatList } from 'react-native';  import  Message  from '../Message/Message';  const  ConversationBodyWrapper  =  styled(ScrollView)`\n width: 100%; padding: 2%;\n display: flex; height: ${Dimensions.get('window').height * 0.6}; `; const  MessagesList  =  styled(FlatList)`\n width: 100%; `; const  ConversationBody  = ({  userName, messages }) => {  return ( <ConversationBodyWrapper> <MessagesList data={messages} keyExtractor={item  =>  String(item.id)} renderItem={({ item }) => ( <Message  align={item.userName === 'me' ? 'left' : 'right'}> {item.text} </Message> )} /> </ConversationBodyWrapper>\n ); };  export  default  ConversationBody;\n```", "```jsx\nimport  React  from 'react';  - import { Dimensions, ScrollView, Text, FlatList, View } from 'react-native';  + import { Text, View } from 'react-native';  import { Query } from 'react-apollo';  import  styled  from 'styled-components/native';  - import  Message  from '../Components/Message/Message'; + import ConversationBody from '../Components/Conversation/ConversationBody'; import { GET_CONVERSATION } from '../constants';   ... const  Conversation  = ({ navigation }) => { const  userName  =  navigation.getParam('userName', ''); return ( <ConversationWrapper> <Query query={GET_CONVERSATION} variables={{ userName }}> -       <ConversationBody>   {({ loading, data }) => { if (loading) { return <ConversationBodyText>Loading...</ConversationBodyText>; } const { messages } = data.conversation;  -           return ( -             <MessagesList\n- data={messages}\n- keyExtractor={item  =>  String(item.id)}\n- renderItem={({ item }) => (\n- <Message  align={item.userName === 'me' ? 'left' : 'right'}>\n- {item.text}\n- </Message>\n- )}\n- /> -           ); -         }} +         return <ConversationBody messages={messages} userName={userName} /> }} -     </ConversationBody>   </Query>  <ConversationActions userName={userName}  />\n </ConversationWrapper>\n ); };\n\nexport default Conversation;\n```", "```jsx\n ...\n\n  return ( <ConversationWrapper> <Query query={GET_CONVERSATION} variables={{ userName }}> -       {({ loading, data }) => {\n+       {({ subscribeToMore, loading, data }) => {\n if (loading) { return <ConversationBodyText>Loading...</ConversationBodyText>; } const { messages } = data.conversation;  -         return <ConversationBody messages={messages} userName={userName} />\n+         return (\n+           <ConversationBody\n+             messages={messages}\n+             userName={userName}\n+             subscribeToMore={subscribeToMore}\n+           /> }} </Query>  <ConversationActions userName={userName}  />\n </ConversationWrapper>\n ); };\n```", "```jsx\nimport  React  from 'react';  import  styled  from 'styled-components/native';  import { Dimensions, ScrollView, FlatList } from 'react-native';  import  Message  from '../Message/Message';  + import { MESSAGE_ADDED } from '../../constants'; ... - const  ConversationBody  = ({  userName, messages }) => { + const  ConversationBody  = ({ subscribeToMore, userName, messages }) => **{**  return ( <ConversationBodyWrapper> <MessagesList data={messages} keyExtractor={item  =>  String(item.id)} renderItem={({ item }) => ( <Message  align={item.userName === 'me' ? 'left' : 'right'}> {item.text} </Message> )} /> </ConversationBodyWrapper>\n ); };\n\nexport default ConversationBody;\n```", "```jsx\n... const  ConversationBody  = ({ subscribeToMore, userName, messages }) => { +  React.useEffect(() => { +    subscribeToMore({ +      document:  MESSAGE_ADDED, +      variables: { userName }, +      updateQuery: (previous, { subscriptionData }) => { +        if (!subscriptionData.data) { +          return  previous; +        }\n+        const  messageAdded  =  subscriptionData.data.messageAdded;\n+ +        return  Object.assign({}, previous, { +          conversation: { +            ...previous.conversation, +            messages: [...previous.conversation.messages, messageAdded] +          }\n+        });\n+     }\n+   });\n+ }, []);\n   return ( <ConversationBodyWrapper>\n ...\n```", "```jsx\nimport  React  from 'react';  import { Platform, Text, View } from 'react-native';  import  styled  from 'styled-components/native';  import { Ionicons }  from '@expo/vector-icons';  + import { useMutation } from 'react-apollo'; import  TextInput  from '../TextInput/TextInput';  import  Button  from '../Button/Button';  + import { SEND_MESSAGE } from '../../constants'; ... const  ConversationActions  = ({ userName }) => {\n  ...\n```", "```jsx\n...\nconst  ConversationActions  = ({ userName }) => { + const [sendMessage] = useMutation(SEND_MESSAGE);   const [message, setMessage] =  React.useState('');\n return ( <ConversationActionsWrapper> + **<>** <TextInput width={75} marginBottom={0} onChangeText={setMessage} placeholder='Your message' value={message} /> <Button width={20} padding={10}\n**+** onPress={() => {\n+ sendMessage({ variables: { to:  userName, text:  message } });\n+ setMessage(''); +         }**}**\n title={ <Ionicons name={`${Platform.OS === 'ios' ? 'ios' : 'md'}-send`} size={42} color='white' /> } /> +     </>  +   </ConversationActionsWrapper**>**\n ); };\n```", "```jsx\nimport  React  from 'react';  - import { Platform, Text, View } from 'react-native';  + import { Platform, Text, KeyboardAvoidingView } from 'react-native';  import  styled  from 'styled-components/native';  import { Ionicons }  from '@expo/vector-icons';  import { useMutation } from 'react-apollo';  import  TextInput  from '../TextInput/TextInput';  import  Button  from '../Button/Button';  import { SEND_MESSAGE } from '../../constants';  - const  ConversationActionsWrapper  =  styled(View)` + const  ConversationActionsWrapper  =  styled(KeyboardAvoidingView)**`**\n    width: 100%;\n    background-color: #ccc;\n    padding: 2%;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-around;\n`; const  ConversationActions  = ({ userName }) => {\n\n ... \n```", "```jsx\n...\n\nconst  ConversationActions  = ({ userName }) => { const [sendMessage] = useMutation(SEND_MESSAGE);\n  const [message, setMessage] =  React.useState('');\n return ( -   <ConversationActionsWrapper +   <ConversationActionsWrapper +     keyboardVerticalOffset={Platform.OS === 'ios' ? 190 : 140} +     behavior=;padding' **+   >**\n <Mutation  mutation={SEND_MESSAGE}> ... \n```"]