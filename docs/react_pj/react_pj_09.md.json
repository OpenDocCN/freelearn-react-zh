["```jsx\nexport ANDROID_SDK=**ANDROID_SDK_LOCATION** export PATH=**ANDROID_SDK_LOCATION**/platform-tools:$PATH export PATH=**ANDROID_SDK_LOCATION**/tools:$PATH\n```", "```jsx\nnpm install && npm start\n```", "```jsx\ntic-tac-toe\n|-- .expo\n|-- assets\n    |-- icon.png\n    |-- splash.png\n    |-- winner.json\n|-- Components\n    |-- // ...\n|-- context\n    |-- AppContext.js\n|-- node_modules\n|-- Screens\n    |-- Game.js\n    |-- LeaderBoard.js\n    |-- Start.js\n|-- utils\n    |-- arrayContainsArray.js\n    |-- checkSlots.js\n.gitignore\nApp.js\nAppContainer.js\napp.json\nbabel.config.js\npackage.json\n```", "```jsx\n|-- Components\n    |-- Actions\n        |-- Actions.js\n    |-- Board\n        |-- Board.js\n    |-- Button\n        |-- Button.js\n    |-- Player\n        |-- Player.js\n    |-- Slot\n        |-- Slot.js\n        |-- Filled.js\n```", "```jsx\nimport  React  from  'react'; import { View } from 'react-native'; const  Filled  = ({ filled }) => { return ( <View style={{ position:  'absolute',\n            display: filled ? 'block' : 'none', width:  '100%',\n  height:  '100%', backgroundColor: filled === 1 ? 'blue' : 'green',  }}\n    />\n ); } export  default  Filled; \n```", "```jsx\nimport  React  from  'react'; import { TouchableOpacity, Dimensions } from  'react-native'; import  styled  from  'styled-components/native'; + import  Filled  from  './Filled'**;** const  SlotWrapper  =  styled(TouchableOpacity)` width: ${Dimensions.get('window').width * 0.3}; height: ${Dimensions.get('window').width * 0.3}; -   background-color: ${({ filled }) => filled ? (filled === 1 ? 'blue' : 'green') : 'grey'}; + **background-color: grey;**\n border: 1px solid #fff;\n`;  const Slot = ({ index, filled, handleOnPress }) => ( - <SlotWrapper filled={filled} onPress={() => !filled && handleOnPress(index)} />\n+ <SlotWrapper  onPress={() => !filled && handleOnPress(index)}> + <Filled filled={filled}  />  + </SlotWrapper**>** );  export  default  Slot;\n```", "```jsx\nimport  React  from  'react'; - import { TouchableOpacity, Dimensions } from  'react-native'; + import { TouchableWithoutFeedback, View, Dimensions } from  'react-native'; import  styled  from  'styled-components/native'; import  Filled  from  './Filled'; - const  SlotWrapper  =  styled(TouchableOpacity)` + const  SlotWrapper  =  styled(View)`  width: ${Dimensions.get('window').width * 0.3}; height: ${Dimensions.get('window').width * 0.3};  background-color: grey;\n border: 1px solid #fff;\n`;   const Slot = ({ index, filled, handleOnPress }) => ( - <SlotWrapper  onPress={() => !filled && handleOnPress(index)}> + <TouchableWithoutFeedback onPress={() => !filled && handleOnPress(index)}>  +   <SlotWrapper**>**\n  <Filled filled={filled} />  </SlotWrapper>\n**+ <TouchableWithoutFeedback>** );  export  default  Slot;\n```", "```jsx\nimport  React  from  'react';\n**- import { View } from 'react-native';** **+ import { Animated, View } from 'react-native';** const  Filled  = ({ filled }) => { return (\n    ... \n```", "```jsx\nimport  React  from  'react'; import { Animated, View } from 'react-native'; const  Filled  = ({ filled }) => {\n**+ const [opacityValue] = React.useState(new Animated.Value(0));** return (\n    ...\n```", "```jsx\nimport  React  from  'react'; import { Animated, View } from 'react-native'; const  Filled  = ({ filled }) => {\n  const [opacityValue] = React.useState(new Animated.Value(0)); **+** **R**eact.useEffect(() => {\n+    filled && Animated.timing(\n+        opacityValue, \n+ {\n+ toValue:  1,\n+ duration:  500, +        }\n+ ).start();\n+ **}, [filled]);** return ( <View style={{ position:  'absolute',\n **-          display: filled ? 'block' : 'none',** width:  '100%',\n  height:  '100%', backgroundColor: filled === 1 ? 'blue' : 'green',  }}\n    />\n ); } export  default  Filled;\n```", "```jsx\nimport  React  from  'react';\n**- import { Animated, View } from 'react-native';** + import { Animated } from 'react-native';  const  Filled  = ({ filled }) => {\n\n... return (    \n**-** **<View**\n**+   <Animated.View** style={{ position:  'absolute', width:  '100%',\n  height:  '100%', backgroundColor: filled === 1 ? 'blue : 'green',\n**+           opacity: opacityValue,**  }}\n    />\n ); } export  default  Filled;\n```", "```jsx\nimport  React  from  'react'; **- import { Animated } from 'react-native';**\n**+ import { Animated, Easing } from 'react-native';** const  Filled  = ({ filled }) => {\n  const [opacityValue] = React.useState(new Animated.Value(0));  React.useEffect(() => {\n    filled && Animated.timing(\n        opacityValue, { toValue:  1, duration: 1000, **+           easing: Easing.linear(),**\n        } ).start(); }, [filled]);\n\n  return (\n    ...\n```", "```jsx\nimport  React  from  'react'; import { Animated, Easing } from 'react-native'; const  Filled  = ({ filled }) => {\n  const [opacityValue] = React.useState(new Animated.Value(0));\n**+ const [scaleValue] = React.useState(new Animated.Value(0));**  React.useEffect(() => {\n    ...\n```", "```jsx\nimport  React  from  'react'; import { Animated, Easing } from  'react-native'; const  Filled  = ({ filled }) => { const [opacityValue]  = React.useState(new  Animated.Value(0)); const [scaleValue]  = React.useState(new  Animated.Value(0));  React.useEffect(() => {\n**+ filled &&** Animated.parallel**([\n- filled && Animated.timing(**\n**+** Animated.timing**(** opacityValue, { toValue:  1, duration:  1000, easing:  Easing.linear(),\n } **-   ).start();\n+  ),**\n**+** ]).start**();** }, [filled]); return (\n ... \n```", "```jsx\n...\nconst  Filled  = ({ filled }) => { const [opacityValue]  = React.useState(new  Animated.Value(0)); const [scaleValue]  = React.useState(new  Animated.Value(0)); React.useEffect(() => {\n      filled && Animated.parallel([ Animated.timing( opacityValue, { toValue:  1, duration:  1000, easing:  Easing.linear(),\n } ),\n**+       Animated.spring(**\n**+         scaleValue,**\n**+         {**\n**+           toValue: 1,**\n**+           easing: Easing.cubic(),**\n**+         },**\n**+       ),** ]).start(); }, [filled]); return (\n        ...\n```", "```jsx\n... return (    <Animated.View style={{ position:  'absolute', width:  '100%',\n  height:  '100%', backgroundColor: filled === 1 ? 'blue' : 'green',            opacity: opacityValue,\n**+           transform: [**\n**+             {**\n**+               scale: scaleValue,**\n**+             }**\n**+           ],**  }}\n    />\n ); } export  default  Filled\n```", "```jsx\nimport  React  from 'react'; import { View } from  'react-native'; import  styled  from  'styled-components/native'; import  Board  from  '../Components/Board/Board'; import  Actions  from  '../Components/Actions/Actions'; import  Player  from  '../Components/Player/Player'; import  checkSlots  from  '../utils/checkSlots'; import { AppContext } from  '../context/AppContext'; + export  const  ANIMATION_DURATION  =  1000**;**\n\n...\n```", "```jsx\n...\nconst  checkWinner  = (player) => { const  slots  =  state[`player${player}`]; if (slots.length  >=  3) { if (checkSlots(slots)) { + setTimeout(() => { setWinner(player);\n setPlayerWins(player); +     }, ANIMATION_DURATION**);**\n } } return  false;\n}\n\n...\n```", "```jsx\nimport  React  from  'react'; import { Animated, Easing } from  'react-native'; + import { ANIMATION_DURATION } from  '../../Screens/Game';  const  Filled  = ({ filled }) => { const [opacityValue]  = React.useState(new  Animated.Value(0)); const [scaleValue]  = React.useState(new  Animated.Value(0)); React.useEffect(() => {\n      filled && Animated.parallel([ Animated.timing( opacityValue, { toValue:  1,\n**-** duration:  1000**,**\n**+           duration: ANIMATION_DURATION,** easing:  Easing.linear(),\n }\n```", "```jsx\nnpm install lottie-react-native\n```", "```jsx\nimport React from 'react';\nimport Lottie from 'lottie-react-native';\n\nconst Winner = () => ();\n\nexport default Winner;\n```", "```jsx\nimport React from 'react';\nimport Lottie from 'lottie-react-native';\n\nconst Winner = () => (\n+    <Lottie\n+        autoPlay\n+        style={{\n+            width: '100%',\n+            height: '100%',\n+        }}\n+        source={require('../../assets/winner.json')}\n+    />\n);\n\nexport default Winner;\n```", "```jsx\nimport  React  from 'react'; import { View, Dimensions } from  'react-native'; import  styled  from  'styled-components/native'; import  Slot  from  '../Slot/Slot'; + import  Winner  from  '../Winner/Winner'**;**\n\n... const  Board  = ({ slots, winner, setSlot }) => (\n    ... \n```", "```jsx\nconst Board = ({ slots, winner, setSlot }) => (\n <BoardWrapper>\n    <SlotsWrapper>\n-    {slots.map((slot, index) =>\n+    {\n+      winner\n+      ? <Winner />\n+      : slots.map((slot, index) =>\n            <Slot\n              key={index}\n              index={index}\n              handleOnPress={!winner ? setSlot : () => { }}\n              filled={slot.filled}\n            />\n        )\n    }\n    </SlotsWrapper>\n  </BoardWrapper>\n);\n```", "```jsx\nimport  React  from  'react'; + import { Animated, Easing } from  'react-native'; import  Lottie  from  'lottie-react-native'; - const  Winner  = () => ( + const Winner = () => {\n+   const [progressValue]  = React.useState(new  Animated.Value(0**));**\n**+   return (** <Lottie autoPlay\n        style={{ width:  '100%', height:  '100%' , }} source={  require('../../assets/winner.json') } progress={progressValue} />\n  );\n+ };\n\nexport  default  Winner;\n```", "```jsx\n...\nconst  Winner  = () => { const [progressValue]  = React.useState(new  Animated.Value(0));\n\n**+** React.useEffect(() => { +    Animated.timing(progressValue, { +      toValue:  1, +      duration:  4000, +      easing:  Easing.linear,\n+ }).start(); **+ }, []);** return (\n  ... \n```", "```jsx\n...\n\nconst Winner = () => {\n const [progressValue]  = React.useState(new  Animated.Value(0));\n\n  ...\n\n  return ( <Lottie autoPlay\n      style={{ width:  '100%', height:  '100%' , }} source={  require('../../assets/winner.json') }\n**+** progress={progressValue**}** />\n  );\n};\n\nexport  default  Winner;\n```", "```jsx\nimport  React  from  'react'; - import { TouchableWithoutFeedback, View, Dimensions } from  'react-native';\n+ import {  View, Dimensions } from  'react-native';  + import **{ Tou**chableWithoutFeedback } from  'react-native-gesture-handler'; import  styled  from  'styled-components/native'; import  Filled  from  './Filled';\n\n... const  Slot  = ({ index, filled, handleOnPress }) => ( ...\n```", "```jsx\nimport  React  from  'react'; import { View, Dimensions } from  'react-native'; import { TapGestureHandler, State } from  'react-native-gesture-handler';  import  styled  from  'styled-components/native'; import  Filled  from  './Filled';\n\n... - const  Slot  = ({ index, filled, handleOnPress }) => ( + const  Slot  = ({ index, filled, handleOnPress }) => {  +  const [start, setStart] = React.useState(false);\n\n+  return ( -    <TouchableWithoutFeedback onPress={() => !filled && handleOnPress(index)}> +    <TouchableWithoutFeedback onPressIn={() => setStart()} onPressOut={() => !filled && handleOnPress(index)}>\n <SlotWrapper> - <Filled filled={filled}  /> + <Filled filled={filled} start={start}  />  </SlotWrapper>\n </TouchableWithoutFeedback>  );\n};\n\nexport default Slot;\n```", "```jsx\nimport  React  from  'react'; import { Animated, Easing } from  'react-native'; import { ANIMATION_DURATION } from  '../../utils/constants'; - const  Filled  = ({ filled }) => { + const  Filled  = ({ filled, start }) => **{**  const [opacityValue] =  React.useState(new  Animated.Value(0));\n**-** const [scaleValue] =  React.useState(new  Animated.Value(0)); + const [scaleValue] =  React.useState(new  Animated.Value(.8**));** + React.useEffect(() => { + start  &&  Animated.timing( + opacityValue, +     { + toValue:  1, + duration:  ANIMATION_DURATION, + easing:  Easing.linear(),\n+     } +   ).start(); + }, [start**]);**\n\n  React.useEffect(() => {    ...\n```", "```jsx\n+ const  Filled  = ({ filled, start }) => **{**  const [opacityValue] =  React.useState(new  Animated.Value(0));\n**-** const [scaleValue] =  React.useState(new  Animated.Value(0)); + const [scaleValue] =  React.useState(new  Animated.Value(.8**));** React.useEffect(() => {\n\n... React.useEffect(() => { - filled && Animated.parallel([ -   Animated.timing( -     opacityValue, -     { - toValue:  1, - duration:  ANIMATION_DURATION, - easing:  Easing.linear(),\n- } -   ),\n-   Animated.spring(\n+   filled && Animated.spring**(** scaleValue,\n      {\n  toValue:  1,\n  easing:  Easing.cubic(),\n      }\n**-    )**\n**-  ]).start()**\n**+**  ).start();  }, [filled]);\n\n...\n```", "```jsx\nimport  React  from  'react'; - import { TouchableWithoutFeedback } from  'react-native-gesture-handler'; + import { TapGestureHandler, State } from  'react-native-gesture-handler';import  styled  from  'styled-components/native'; import  Filled  from  './Filled';\n\n... const  Slot  = ({ index, filled, handleOnPress }) => (   ...\n```", "```jsx\n... const  Slot  = ({ index, filled, handleOnPress }) => {\n...\n\nreturn ( - <TouchableWithoutFeedback onPressIn={() => setStart()} onPressOut={() => !filled && handleOnPress(index)}>  + <TapGestureHandler onHandlerStateChange={onTap}**>**\n  <SlotWrapper>\n  <Filled filled={filled} start={start}  />  </SlotWrapper> - </TouchableWithoutFeedback>\n+ </TapGestureHandler**>**\n );\n}; ...\n```", "```jsx\nimport  React  from  'react'; import { View, Dimensions } from  'react-native'; import { TapGestureHandler, State } from  'react-native-gesture-handler';  import  styled  from  'styled-components/native'; import  Filled  from  './Filled';\n\n... const  Slot  = ({ index, filled, handleOnPress }) => {\n    const [start, setStart] = React.useState(false);   + const  onTap  = event => { +    if (event.nativeEvent.state === State.BEGAN) {\n+       setStart(true);\n+    }  + if (event.nativeEvent.state  ===  State.END) {  +       !filled && handleOnPress(index);\n+       setStart(false);\n+    }\n+ }\n\n  return (\n    ...\n```", "```jsx\nimport  React  from  'react'; import { View, Dimensions } from  'react-native'; import { TapGestureHandler, State } from  'react-native-gesture-handler'; import  styled  from  'styled-components/native'; import  Filled  from  './Filled';\n\n... const  Slot  = ({ index, filled, handleOnPress }) => { const [start, setStart] =  React.useState(false); +  const  doubleTapRef  =  React.useRef(null);\n\n   ...  return ( -    <TapGestureHandler onHandlerStateChange={onTap}> + <TapGestureHandler + ref={doubleTapRef} + onHandlerStateChange={onTap} **+    >**\n  <SlotWrapper>\n  <Filled  filled={filled}  start={start}  />\n  </SlotWrapper>\n  </TapGestureHandler>\n ); }; export default Slot;\n```", "```jsx\n... return (\n <TapGestureHandler\n ref={doubleTapRef}\n onHandlerStateChange={onTap}\n**+   numberOfTaps={2}**\n >  <SlotWrapper>\n  <Filled  filled={filled}  start={start}  />\n  </SlotWrapper>\n  </TapGestureHandler> );  ...\n```", "```jsx\n...\n\nconst  Slot  = ({ index, filled, handleOnPress }) => {  const [start, setStart] =  React.useState(false);\n  const  doubleTapRef  =  React.useRef(null); + const  onTap  =  event  => {**};** - const  onTap  =  event  => { + const  onDoubleTap  =  event  => **{** ... }  return ( + <TapGestureHandler + onHandlerStateChange={onTap} + waitFor={doubleTapRef} + **>**\n  <TapGestureHandler\n  ref={doubleTapRef} - onHandlerStateChange={onTap} + onHandlerStateChange={onDoubleTap**}**\n  numberOfTaps={2}\n  > \n <SlotWrapper>\n           <Filled  filled={filled}  start={start}  /> </SlotWrapper>\n      </TapGestureHandler>\n**+** </TapGestureHandler> ); }\n\n...\n```", "```jsx\n...\n\nconst  Slot  = ({ index, filled, handleOnPress }) => {  const [start, setStart] =  React.useState(false);\n  const  doubleTapRef  =  React.useRef(null);\n\n  const  onTap  =  event  => {};   const  onDoubleTap  =  event  => { - if (event.nativeEvent.state  ===  State.BEGAN) { +    if (event.nativeEvent.state  ===  State.ACTIVE) {        setStart(true);\n }     \n     if (event.nativeEvent.state  ===  State.END) {\n**+**  setTimeout(() => **{** !filled  &&  handleOnPress(index);\n         setStart(false);\n**+**  }, 100**);**\n     }  }\n\n...\n```", "```jsx\nimport  React  from  'react'; import { View, Dimensions } from  'react-native'; - import { TapGestureHandler, State } from 'react-native-gesture-handler'; + import { LongPressGestureHandler, TapGestureHandler, State } from  'react-native-gesture-handler'**;** import  styled  from  'styled-components/native'; import  Filled  from  './Filled';\n\n...\n```", "```jsx\n... const  Slot  = ({ index, filled, handleOnPress }) => {\n ... return ( +  <LongPressGestureHandler + onHandlerStateChange={onDoubleTap} + minDurationMs={500**}**\n**+  >** <TapGestureHandler\n  onHandlerStateChange={onTap}\n  waitFor={doubleTapRef}\n  >\n ...  </TapGestureHandler>  +   </LongPressGestureHandler>  ) };\n\nexport default Slot;\n```", "```jsx\nimport  React  from  'react'; - import { View, Dimensions } from 'react-native'; + import { Alert, View, Dimensions } from  'react-native'**;** import { LongPressGestureHandler, TapGestureHandler, State } from  'react-native-gesture-handler'; import  styled  from  'styled-components/native'; import  Filled  from  './Filled';\n\n... const  Slot  = ({ index, filled, handleOnPress }) => {  const [start, setStart] =  React.useState(false);\n  const  doubleTapRef  =  React.useRef(null);\n\n  const  onTap  =  event  => { + if (event.nativeEvent.state  ===  State.ACTIVE) { +     Alert.alert( + 'Hint', + 'You either need to press the slot longer to make your move', +     ); **+   }**\n }\n\n  ... \n```"]