["```jsx\nexport ANDROID_SDK=**ANDROID_SDK_LOCATION** export PATH=**ANDROID_SDK_LOCATION**/platform-tools:$PATH export PATH=**ANDROID_SDK_LOCATION**/tools:$PATH\n```", "```jsx\nnpm install && npm start\n```", "```jsx\nipconfig\n```", "```jsx\nipconfig getifaddr en0\n```", "```jsx\n192.168.1.107\n```", "```jsx\n...\n\n**- const API_URL = '';**\n**+ const API_URL = 'http://192.168.1.107/graphql';**\n\nconst  httpLink  =  new  HttpLink({\n uri: API_URL,  }); const  authLink  =  setContext(async (_, { headers }) => {\n\n  ...\n```", "```jsx\nmessaging\n|-- client\n    |-- .expo\n    |-- assets\n        |-- icon.png\n        |-- splash.png\n    |-- Components\n        |-- // ...\n    |-- node_modules\n    |-- Screens\n        |-- AddPost.js\n        |-- AuthLoading.js\n        |-- Login.js\n        |-- Notifications.js\n        |-- Post.js\n        |-- Posts.js\n        |-- Settings.js\n    |-- .watchmanconfig\n    |-- App.js\n    |-- AppContainer.js\n    |-- app.json\n    |-- babel.config.js\n    |-- package.json\n```", "```jsx\n|-- Components\n    |-- Button\n        |-- Button.js\n    |-- Comment\n        |-- Comment.js\n        |-- CommentForm.js\n    |-- Notification\n        |-- Notification.js\n    |-- Post\n        |-- PostContent.js\n        |-- PostCount.js\n        |-- PostItem.js\n    |-- TextInput\n        |-- TextInput.js\n```", "```jsx\nexport  const  GET_POST  =  gql`\n query getPost($userName: String!) { post(userName: $userName) { id userName image stars { userName } comments { id userName text } } } `;\n```", "```jsx\nmutation {\n  addPost(image: String!) {\n    image\n  }\n}\n```", "```jsx\nexport  const  GET_POSTS  =  gql`\n ... `; + export  const  ADD_POST  =  gql` +   mutation addPost($image: String!) { +     addPost(image: $image) { +       image  +     } +   } + `;\n```", "```jsx\nimport  React  from 'react';  import { Platform } from 'react-native';  import { Ionicons }  from '@expo/vector-icons';  import {  createSwitchNavigator,\n createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { createBottomTabNavigator } from 'react-navigation-tabs';  import  Posts  from './Screens/Posts';  import  Post  from './Screens/Post';  import  Settings  from './Screens/Settings';  import  Login  from './Screens/Login';  import  AuthLoading  from './Screens/AuthLoading';  + import  AddPost  from './Screens/AddPost'; ... \nconst  SwitchNavigator  =  createSwitchNavigator(\n  {\n    Main:  TabNavigator, Login, AuthLoading,\n**+** **AddPost,**\n  },\n  {\n+   mode: 'modal'**,**\n    initialRouteName: 'AuthLoading',\n  },\n);\n\nexport  default  createAppContainer(SwitchNavigator);\n```", "```jsx\n...\n\n**+ Posts**.navigationOptions  = ({ navigation}) => ({ +   headerRight: ( +     <Button  onPress={() =>  navigation.navigate('AddPost')}  title='Add Post'  /> +   ), **+ });** export  default  Posts;\n```", "```jsx\nexpo install expo-permissions\n```", "```jsx\nimport  React  from 'react';  import { Dimensions, TouchableOpacity, Text, View } from 'react-native';  + import { Dimensions, Platform, TouchableOpacity, Text, View } from 'react-native'; import  styled  from 'styled-components/native';  import  Button  from '../Components/Button/Button';  + import * as Permissions from 'expo-permissions'; ...\n\nconst AddPost = ({ navigation }) => { +  const  getPermissionAsync  =  async () => { +    if (Platform.OS  === 'ios') { +      const { status } =  await  Permissions.askAsync(Permissions.CAMERA_ROLL);\n+ +      if (status  !== 'granted') { +        alert('Sorry, you need camera roll permissions! Go to 'Settings > Expo' to enable these.'); +      } +    } **+ };**   ...\n```", "```jsx\n...\n\nconst  AddPost  = ({ navigation }) => { const  getPermissionAsync  =  async () => { if (Platform.OS  === 'ios') {\n const { status } =  await  Permissions.askAsync(Permissions.CAMERA_ROLL);\n\n if (status  !== 'granted') {\n alert('Sorry, you need camera roll permissions! Go to 'Settings > Expo' to enable these.');\n } } };  return ( <AddPostWrapper>\n <AddPostText>Add Post</AddPostText> +     <UploadImage  onPress={() =>  getPermissionAsync()}> +       <AddPostText>Upload image</AddPostText> +     </UploadImage**>**\n <Button  onPress={() =>  navigation.navigate('Main')}  title='Cancel'  />\n  </AddPostWrapper>\n ); };\n\n...\n```", "```jsx\nexpo install expo-image-picker\n```", "```jsx\nimport  React  from 'react';  import { Dimensions, Platform, TouchableOpacity, Text, View } from 'react-native';  import  styled  from 'styled-components/native';  import  Button  from '../Components/Button/Button'; **+ import * as ImagePicker from 'expo-image-picker';** import * as Permissions from 'expo-permissions';  ...\n\nconst  AddPost  = ({ navigation }) => { +  const [imageUrl, setImageUrl] = React.useState(false); \n+  const  pickImageAsync  =  async () => { +    const  result  =  await  ImagePicker.launchImageLibraryAsync({ +      mediaTypes:  ImagePicker.MediaTypeOptions.All, +      allowsEditing:  true, +      aspect: [4, 4], +    });\n+    if (!result.cancelled) { +      setImageUrl(result.uri); +    }\n+  };\n\n return (\n     ... \n```", "```jsx\n...\n\nconst  AddPost  = ({ navigation }) => { ...\n\n  const  getPermissionAsync  =  async () => { if (Platform.OS  === 'ios') {\n const { status } =  await  Permissions.askAsync(Permissions.CAMERA_ROLL);\n\n if (status  !== 'granted') {\n alert('Sorry, you need camera roll permissions! Go to 'Settings > Expo' to enable these.');\n**+     } else {**\n**+       pickImageAsync();**\n } } };  return (\n```", "```jsx\n...\n\n  return ( <AddPostWrapper>\n <AddPostText>Add Post</AddPostText>\n\n <UploadImage  onPress={() =>  getPermissionAsync()}>\n**+       {imageUrl ? (**\n**+** <Image +           source={{ uri:  imageUrl }} +           style={{ width: '100%', height: '100%' }} +         />\n+       ) : (\n          <AddPostText>Upload image</AddPostText>\n**+       )}**\n </UploadImage>\n <Button  onPress={() =>  navigation.navigate('Main')}  title='Cancel'  />\n  </AddPostWrapper>\n ); };\n\n...\n```", "```jsx\n...\n\n  const  getPermissionAsync  =  async () => {  if (Platform.OS  === 'ios') { -   const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\n-   if (status !== 'granted') {\n+     const { status: statusCamera } =  await  Permissions.askAsync(Permissions.CAMERA); +     const { status: statusCameraRoll } =  await  Permissions.askAsync(Permissions.CAMERA_ROLL); +     if (statusCamera  !== 'granted'  ||  statusCameraRoll  !== 'granted'**) {**\n        alert(\n          `Sorry, you need camera roll permissions! Go to 'Settings > Expo' to enable these.`\n        );\n      } else {        pickImageAsync();\n      }\n    }\n  };\n\n  return (\n    ... \n```", "```jsx\nconst  AddPost  = ({ navigation }) => { const [imageUrl, setImageUrl] =  React.useState(false);\n **-  const** pickImageAsync  =  async () => {  +  const addImageAsync  =  async (camera = false) => { -    const  result  =  await  ImagePicker.launchCameraAsync({ -      mediaTypes:  ImagePicker.MediaTypeOptions.All, -      allowsEditing:  true, -      aspect: [4, 4]\n-    }); +    const  result  = !camera \n+      ? await  ImagePicker.launchImageLibraryAsync({ +          mediaTypes:  ImagePicker.MediaTypeOptions.All, +          allowsEditing:  true, +          aspect: [4, 4] +        })\n+      : await  ImagePicker.launchCameraAsync({  +          allowsEditing:  true, +          aspect: [4, 4] **+        })**\n if (!result.cancelled) { setImageUrl(result.uri);\n } };\n```", "```jsx\nnpm install @expo/react-native-action-sheet\n```", "```jsx\nimport React from 'react';\nimport { AsyncStorage } from 'react-native';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\n+ import { ActionSheetProvider } from '@expo/react-native-action-sheet';\nimport AppContainer from './AppContainer';\n\n...\n\nconst  App  = () => (  <ApolloProvider  client={client}> +   <ActionSheetProvider>       <AppContainer  /> +   </ActionSheetProvider**>**\n  </ApolloProvider> );\n\nexport  default  App;\n```", "```jsx\nimport  React  from 'react';  import { Dimensions,\n Image,\n Platform,\n  TouchableOpacity,\n  Text,\n  View } from 'react-native';  import  styled  from 'styled-components/native';  import  *  as  ImagePicker  from 'expo-image-picker';  import  *  as  Permissions  from 'expo-permissions';  + import { connectActionSheet } from  '@expo/react-native-action-sheet'; import  Button  from '../Components/Button/Button'; ... - const  AddPost  = ({ navigation }) => { + const  AddPost  = ({ navigation, showActionSheetWithOptions }) => **{**\n\n    ... \n- export default AddPost;\n+ const  ConnectedApp  =  connectActionSheet(AddPost); + export  default  ConnectedApp;\n```", "```jsx\n...\n\n+  const openActionSheet = () => { +    const  options  = ['Camera', 'Camera roll', 'Cancel']; +    const  cancelButtonIndex  =  2; + \n+    showActionSheetWithOptions( +      {\n+        options, +        cancelButtonIndex\n+      },\n+      buttonIndex  => { +        if (buttonIndex  ===  0  ||  buttonIndex  ===  1) { +          addImageAsync(buttonIndex  ===  0); +        }\n+      },\n+    );\n+   };\n\n  const  getPermissionAsync  =  async () => {    if (Platform.OS  === 'ios') {\n      const { status: statusCamera } =  await  Permissions.askAsync(Permissions.CAMERA);\n      const { status: statusCameraRoll } =  await  Permissions.askAsync(Permissions.CAMERA_ROLL);\n\n      if (statusCamera  !== 'granted'  ||  statusCameraRoll  !== 'granted') {\n        alert(\n          `Sorry, you need camera roll permissions! Go to 'Settings > Expo' to enable these.`\n        );\n      } else { -       pickImageAsync**();**\n**+       openActionSheet();**\n      }\n    }\n  };\n\n  return (\n    ...\n```", "```jsx\nimport  React  from 'react';  import { Dimensions,\n Image,\n Platform,\n  TouchableOpacity,\n  Text,\n  View } from 'react-native';  import  styled  from 'styled-components/native';  import  *  as  ImagePicker  from 'expo-image-picker';  import  *  as  Permissions  from 'expo-permissions';  import { connectActionSheet } from '@expo/react-native-action-sheet';\n**+ import { useMutation } from '@apollo/react-hooks';** **+ import { ADD_POST } from '../constants';** import  Button  from '../Components/Button/Button';  \n...\n\nconst  AddPost  = ({ navigation, showActionSheetWithOptions }) => { + const [addPost] = useMutation(ADD_POST);\n  const [imageUrl, setImageUrl] =  React.useState(false); ... \n  return (    <AddPostWrapper>\n      <AddPostText>Add Post</AddPostText>\n        <UploadImage  onPress={() =>  getPermissionAsync()}> {imageUrl ? ( <Image source={{ uri:  imageUrl }} style={{ width: '100%', height: '100%' }} />\n          ) : (\n            <AddPostText>Upload image</AddPostText> )} </UploadImage> +       {imageUrl && ( +         <Button +           onPress={() => { +             addPost({ variables: { image:  imageUrl } }).then(() => \n+ navigation.navigate('Main') +             );\n+           }} +           title='Submit' +         />\n+       )}  <Button  onPress={() =>  navigation.navigate('Main')}  title='Cancel'  /> </AddPostWrapper>\n   );\n };\n\nexport default AddPost;\n```", "```jsx\nimport  React  from 'react';  import { Dimensions,\n Image,\n Platform,\n  TouchableOpacity,\n  Text,\n  View } from 'react-native';  import  styled  from 'styled-components/native';  import  *  as  ImagePicker  from 'expo-image-picker';  import  *  as  Permissions  from 'expo-permissions';  import { connectActionSheet } from '@expo/react-native-action-sheet';\nimport { useMutation } from '@apollo/react-hooks'; **- import { ADD_POST } from '../constants';** **+ import { ADD_POST, GET_POSTS } from '../constants';** import  Button  from '../Components/Button/Button';  \n...\n\nconst  AddPost  = ({ navigation, showActionSheetWithOptions }) => { - const [addPost] = useMutation(ADD_POST);\n+ const [addPost] =  useMutation(ADD_POST, { +   refetchQueries: [{ query:  GET_POSTS }] + });\n  const [imageUrl, setImageUrl] =  React.useState(false);\n ... \n return (   <AddPostWrapper>\n     ...\n```", "```jsx\n...\n\nconst  Posts  = ({ navigation }) => {\n**- const { loading, data } = useQuery(GET_POSTS);**\n**+ const { loading, data } = useQuery(GET_POSTS, { pollInterval: 2000 });**\n\n  return ( <PostsWrapper> {loading ? (  <PostsText>Loading...</PostsText>;\n      ) : ( ...\n```", "```jsx\n...\n\nconst  Posts  = ({ navigation }) => {\n**- const { loading, data } = useQuery(GET_POSTS, { pollInterval: 2000 });**\n**+ const { loading, data, refetch } = useQuery(GET_POSTS, { pollInterval: 0 });**\n  return ( <PostsWrapper> {loading ? (  <PostsText>Loading...</PostsText>;\n      ) : ( ...\n```", "```jsx\nimport  React  from 'react';  import { useQuery } from '@apollo/react-hooks';  - import { FlatList, Text, View } from 'react-native';  + import { FlatList, Text, View, ScrollView, RefreshControl } from 'react-native';  import  styled  from 'styled-components/native';  import { GET_POSTS } from '../constants';  import  PostItem  from '../Components/Post/PostItem'; ... const  Posts  = ({ navigation }) => {  ...\n```", "```jsx\nconst Posts = ({ navigation }) => {\n  const { loading, data, refetch } = useQuery(GET_POSTS, { pollInterval: 0 });\n  return (\n    <PostsWrapper>\n      {loading ? (\n        <PostsText>Loading...</PostsText>;\n      ) : (\n+       <ScrollView\n+         style={{ width: '100%' }}\n+         refreshControl={\n+           <RefreshControl />\n+         }\n+       >\n         <PostsList\n           data={data.posts}\n           keyExtractor={item => String(item.id)}\n           renderItem={({ item }) => (\n             <PostItem item={item} navigation={navigation} />\n           )}\n         />\n+       </ScrollView>\n      )}\n    </PostsWrapper>\n  );\n};\n```", "```jsx\n...\nconst Posts = ({ navigation }) => {\n  const { loading, data, refetch } = useQuery(GET_POSTS, { pollInterval: 0 });\n+ const [refreshing, setRefreshing] = React.useState(false);\n\n+ const handleRefresh = (refetch) => {\n+   setRefreshing(true);\n+\n+   refetch().then(() => setRefreshing(false));\n+ }\n\n  return(\n    <PostsWrapper>\n    {loading ? (\n      <PostsText>Loading...</PostsText>;\n    ) : (\n      <ScrollView\n        style={{ width: '100%' }}\n        refreshControl={\n-         <RefreshControl />\n+         <RefreshControl\n+           refreshing={refreshing}\n+           onRefresh={() => handleRefresh(refetch)}\n+         />\n        }\n      >\n        <PostsList\n          ...\n```", "```jsx\n...\nconst Posts = ({ navigation }) => {\n  const { loading, data, refetch } = useQuery(GET_POSTS, { pollInterval: 0 });\n  const [refreshing, setRefreshing] = React.useState(false);\n\n  const handleRefresh = (refetch) => {\n    setRefreshing(true);\n\n    refetch().then(() => setRefreshing(false));\n  }\n\n  return(\n    <PostsWrapper>\n-     {loading ? (\n+     {loading && !refreshing ? (\n        <PostsText>Loading...</PostsText>      ) : (\n\n        ...\n```", "```jsx\nimport { Notifications } from 'expo';  import  *  as  Permissions  from 'expo-permissions';  async  function  registerForPushNotificationsAsync() {\n const { status: existingStatus } =  await  Permissions.getAsync(\n Permissions.NOTIFICATIONS\n ); let  finalStatus  =  existingStatus;\n   if (existingStatus  !== 'granted') {\n  const { status } =  await  Permissions.askAsync(Permissions.NOTIFICATIONS);\n finalStatus  =  status;\n }  if (finalStatus  !== 'granted') {\n return;\n } const  token  =  await  Notifications.getExpoPushTokenAsync();\n return  token; }\n\nexport default registerForPushNotificationsAsync;\n```", "```jsx\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport {\n  Button,\n  FlatList,\n  Text,\n  View,\n  ScrollView,\n  RefreshControl\n} from 'react-native';\nimport styled from 'styled-components/native';\nimport { GET_POSTS } from '../constants';\nimport PostItem from '../Components/Post/PostItem';\n+ import registerForPushNotificationsAsync from '../utils/registerForPushNotificationsAsync';\n\n... const Posts = ({ navigation }) => {\n  const { loading, data, refetch } = useQuery(GET_POSTS, { pollInterval: 0 });\n  const [refreshing, setRefreshing] = React.useState(false);\n+ React.useEffect(() => {\n+   registerForPushNotificationsAsync();\n+ });\n\n...\n```", "```jsx\n...\n\n const  client  =  new  ApolloClient({\n  link:  authLink.concat(link),\n cache, +  typeDefs:  ` +    type Notification { +      id: Number! +      title: String! +      body: String! +    } +    extend type Query { +      notifications: [Notification]! +    } +  `\n }); + cache.writeData({ +  data: { +    notifications: [] +  } **+ });** const  App  = () => {\n\n  ...\n```", "```jsx\n...\n\nexport  const  ADD_POST  =  gql`\n mutation addPost($image: String!) { addPost(image: $image) { image } } `; + export  const  GET_NOTIFICATIONS  =  gql` +   query getNotifications { +     notifications { +       id @client +       title @client +       body @client +     } +   } + `;\n```", "```jsx\nimport  React  from 'react';  import { Platform } from 'react-native';  import { Ionicons }  from '@expo/vector-icons';  import {   createSwitchNavigator,\n createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { createBottomTabNavigator } from 'react-navigation-tabs';  import  Posts  from './Screens/Posts';  import  Post  from './Screens/Post';  import  Settings  from './Screens/Settings';  import  Login  from './Screens/Login';  import  AuthLoading  from './Screens/AuthLoading';  import  AddPost  from './Screens/AddPost';  + import  Notifications  from './Screens/Notifications';  ...\n\n+ const  NotificationsStack  =  createStackNavigator({ +   Notifications: { +     screen:  Notifications, +     navigationOptions: { title: 'Notifications' }, +   } **+ });**\n```", "```jsx\n...\n\nconst  TabNavigator  =  createBottomTabNavigator(\n { Posts:  PostsStack, +   Notifications:  NotificationsStack,  Settings }, { initialRouteName: 'Posts',\n defaultNavigationOptions: ({ navigation }) => ({ tabBarIcon: ({ tintColor }) => { const { routeName } =  navigation.state;\n  let  iconName;\n  if (routeName  === 'Posts') { iconName  =  `${Platform.OS === 'ios' ? 'ios' : 'md'}-home`; } else  if (routeName  === 'Settings') {\n iconName  =  `${Platform.OS === 'ios' ? 'ios' : 'md'}-settings`; +     } else  if (routeName  === 'Notifications') { +       iconName  =  `${Platform.OS === 'ios' ? 'ios' : 'md'}-notifications`; **+     }** return  <Ionicons  name={iconName}  size={20}  color={tintColor}  />;\n },  ...\n```", "```jsx\n...\n\nimport AppContainer from './AppContainer';\n**+ import { GET_NOTIFICATIONS } from './constants';**\n\n...\n\nconst  client  =  new  ApolloClient({\n link:  authLink.concat(link),\n cache, + resolvers: { +   Mutation: { +     addNotification:  async (_, { id, title, body }) => { +       const { data } =  await  client.query({ query:  GET_NOTIFICATIONS })\n+ +       cache.writeData({ +         data: { +           notifications: [ +             ...data.notifications, +             { id, title, body, __typename: 'notifications' }, +           ], +         }, +       }); +     } +   } **+ },**\n typeDefs:  `\n type Notification { id: Number! title: String! body: String! } extend type Query { notifications: [Notification]! } ` });\n\n...\n```", "```jsx\n...\n\nexport  const  GET_NOTIFICATIONS  =  gql`\n query getNotifications { notifications { id @client title @client body @client } } `; + export  const  ADD_NOTIFICATION  =  gql`\n+ mutation { +     addNotification(id: $id, title: $title, body: $body) @client +   } + `;\n```", "```jsx\n...\n\nimport { ActionSheetProvider } from '@expo/react-native-action-sheet';  + import { Notifications } from 'expo'; import AppContainer from './AppContainer';\n- import { GET_NOTIFICATIONS } from './constants'; + import { ADD_NOTIFICATIONS, GET_NOTIFICATIONS } from './constants'; \n...\n\nconst  App  = () => { + React.useEffect(() => { +   Notifications.addListener(handleNotification); + });\n\n+ const  handleNotification  = ({ data }) => { +   client.mutate({ +     mutation:  ADD_NOTIFICATION, +     variables: { +       id:  Math.floor(Math.random() *  500) +  1, +       title:  data.title, +       body:  data.body, +     },\n+   });\n+ };\n\n  return (\n\n    ...\n```", "```jsx\nimport  gql  from 'graphql-tag';  export  const  LOGIN_USER  =  gql`\n mutation loginUser($userName: String!, $password: String!) { loginUser(userName: $userName, password: $password) { userName token } } `; + export  const  STORE_EXPO_TOKEN  =  gql` +   mutation storeExpoToken($expoToken: String!) { +     storeExpoToken(expoToken: $expoToken) { +       expoToken +     } +   } + `**;**\n\n...\n```", "```jsx\nimport  React  from 'react';  - import { useQuery } from '@apollo/react-hooks'; **+ import { useQuery, useMutation } from '@apollo/react-hooks';**  ... - import { GET_POSTS } from '../constants';  + import { GET_POSTS, STORE_EXPO_TOKEN } from '../constants';  import  PostItem  from '../Components/Post/PostItem';  import  registerForPushNotificationsAsync  from '../utils/registerForPushNotificationsAsync';  ...\n```", "```jsx\n...\n\nconst  Posts  = ({ client, navigation }) => {\n**+ const [storeExpoToken] = useMutation(STORE_EXPO_TOKEN);** const [refreshing, setRefreshing] =  React.useState(false);\n\n React.useEffect(() => { -   registerForPushNotificationsAsync(); +   registerForPushNotificationsAsync().then(expoToken  => { +     return storeExpoToken({ variables: { expoToken } }); +   });  }, []);\n\n...\n```"]