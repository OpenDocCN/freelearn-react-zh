["```jsx\nnpm install && npm start\n```", "```jsx\necommerce-store\n|-- client\n    |-- node_modules\n    |-- public\n        |-- favicon.ico\n        |-- index.html\n        |-- manifest.json\n    |-- src\n        |-- components\n            |-- Button\n                |-- Button.js\n            |-- Cart\n                |-- Cart.js\n                |-- CartButton.js\n                |-- Totals.js\n            |-- Header\n                |-- Header.js\n                |-- SubHeader.js\n            |-- Products\n                |-- ProductItem.js\n                |-- Products.js\n            |-- App.js\n        |-- index.js\n        |-- serviceWorker.js\n    |-- package.json\n```", "```jsx\nquery {\n  products {\n    id\n    title\n    thumbnail\n  }\n}\n```", "```jsx\n{\n  \"data\": {\n    \"products\": [\n      {\n        \"id\": 16608,\n        \"title\": \"Awesome Rubber Shoes\",\n        \"thumbnail\": \"http://lorempixel.com/400/400/technics\"\n      },\n      {\n        \"id\": 20684,\n        \"title\": \"Refined Soft Table\",\n        \"thumbnail\": \"http://lorempixel.com/400/400/fashion\"\n      }\n    ]\n  }\n}\n```", "```jsx\nnpm install apollo-client apollo-link-http react-apollo graphql graphql-tag\n```", "```jsx\nimport React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { Route, Switch } from 'react-router-dom';\nimport Header from './Header/Header';\nimport Products from './Products/Products';\nimport Cart from './Cart/Cart';\n\nimport ApolloClient from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from 'react-apollo';\n\nconst GlobalStyle = createGlobalStyle`\n    ...\n```", "```jsx\nimport React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { Route, Switch } from 'react-router-dom';\nimport Header from './Header/Header';\nimport Products from './Products/Products';\nimport Cart from './Cart/Cart';\n\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from 'react-apollo';\n\nconst client = () => new ApolloClient({\n link: new HttpLink({\n uri: 'http://localhost:6000',\n }),\n});\n\nconst GlobalStyle = createGlobalStyle`\n    ...\n```", "```jsx\n...\nconst App = () => (\n-  <>\n+  <ApolloProvider client={client}>\n     <GlobalStyle />\n       <AppWrapper>\n       <Header />\n       <Switch>\n         <Route exact path='/' component={Products} />\n         <Route path='/cart' component={Cart} />\n       </Switch>\n     </AppWrapper>\n-  </>\n+  </ApolloProvider>\n);\n\nexport default App;\n```", "```jsx\nquery {\n  products {\n    id\n    title\n    thumbnail\n  }\n}\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport SubHeader from '../Header/SubHeader';\nimport ProductItem from './ProductItem';\n\nconst GET_PRODUCTS = gql`\n query getProducts {\n products {\n id\n title\n thumbnail\n }\n }\n`;\n\nexport const ProductItemsWrapper = styled.div`\n    ...\n```", "```jsx\n...\nconst Products = ({ match, history, loading, error, products }) => {\n-  const isEmpty = products.length === 0 ? 'No products available' : false;\n\n  return (\n    <>\n      {history && (\n        <SubHeader title='Available products' goToCart={() => history.push('/cart')} />\n      )} -      {!loading && !error && !isEmpty ? (\n+      <Query query={GET_PRODUCTS}>\n+        {({ data }) => {\n+          return (             <ProductItemsWrapper>\n               {data.products && data.products.map(product => (\n                 <ProductItem key={product.id} data={product} />\n               ))}\n             </ProductItemsWrapper> +          );\n+        }}\n+      </Query>\n-      ) : (\n-        <Alert>{loading ? 'Loading...' : error || isEmpty}</Alert>\n-      )}\n    </>\n  );\n};\n...\n```", "```jsx\n- const Products = ({ match, history, loading, error, products }) => {\n-   return (\n+ const Products = ({ match, history }) => (\n  <>\n    {history && (\n      <SubHeader title='Available products' goToCart={() => history.push('/cart')} />\n    )}\n    <Query query={GET_PRODUCTS}>\n-       {({ data }) => {\n+       {({ loading, error, data }) => {\n+         if (loading || error) {\n+           return <Alert>{loading ? 'Loading...' : error}</Alert>;\n+         }\n          return (\n            <ProductItemsWrapper>\n              {data.products && data.products.map(product => (\n                <ProductItem key={product.id} data={product} />\n              ))}\n            </ProductItemsWrapper>\n          );\n        }}\n      </Query>\n  </>\n);\n- };\n\n- Products.defaultProps = {\n-   loading: false,\n-   error: '',\n-   products: [],\n- }\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n+ import { Query } from 'react-apollo';\n+ import gql from 'graphql-tag';\nimport SubHeader from '../Header/SubHeader';\nimport ProductItem from '../Products/ProductItem';\nimport Totals from './Totals';\n\nconst CartWrapper = styled.div`\n    ...\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport SubHeader from '../Header/SubHeader';\nimport ProductItem from '../Products/ProductItem';\nimport Totals from './Totals';\n\n+ const GET_CART = gql`\n+  query getCart {\n+    cart {\n+      total\n+      products {\n+        id\n+        title\n+        thumbnail\n+      }\n+    }\n+  } + `; const CartWrapper = styled.div`\n    ...\n```", "```jsx\n...\n\n- const Cart = ...\n\n+ const Cart = ({ match, history }) => (\n+  <>\n+    {history && (\n+      <SubHeader goBack={() => history.goBack()} title='Cart' />\n+    )}\n+    <Query query={GET_CART}>\n+      {({ loading, error, data }) => {\n+        if (loading || error) {\n+          return <Alert>{loading ? 'Loading...' : error}</Alert>;\n+        }\n+        return (\n+          <CartWrapper>\n+            <CartItemsWrapper>\n+              {data.cart && data.cart.products.map(product => (\n+                <ProductItem key={product.id} data={product} />\n+              ))}\n+            </CartItemsWrapper>\n+            <Totals count={data.cart.total} />\n+          </CartWrapper>\n+        );\n+      }}\n+    </Query>\n+  </>\n+ );\n\nexport default Cart;\n\n...\n```", "```jsx\nimport React from 'react'\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Button from '../Button/Button';\n\nconst GET_CART_TOTAL = gql`\n  query getCartTotal {\n    cart {\n      total\n    }\n  }\n`;\n\nconst CartButton = ({ onClick }) => (\n  <Query query={GET_CART_TOTAL}>\n    {({ data, loading, error }) => (\n      <Button onClick={onClick}>\n        {`Cart (${(loading || error) ? 0 : data && data.cart.total})`}\n      </Button>\n    )}\n  </Query>\n);\n\nexport default CartButton\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '../Button/Button';\n+ import CartButton from '../Cart/CartButton'; ...\n\nconst SubHeader = ({ goBack, title, goToCart = false }) => (\n  <SubHeaderWrapper>\n    {goBack && <SubHeaderButton onClick={goBack}>{`< Go Back`}</SubHeaderButton>}\n    <Title>{ title }</Title>\n-    {goToCart && <SubHeaderButton onClick={goToCart}>{`Cart (0)`}</SubHeaderButton>}\n+    {goToCart && <CartButton onClick={goToCart} />}\n  </SubHeaderWrapper>\n);\n\nexport default SubHeader;\n```", "```jsx\nimport gql from 'graphql-tag';\n\nexport const GET_CART_TOTAL = gql`\n  query getCartTotal {\n    cart {\n      total\n    }\n  }\n`;\n\nconst GET_CART = gql`\n  query getCart {\n    cart {\n      total\n      products {\n        id\n        title\n        thumbnail\n      }\n    }\n  }\n`;\n\nexport default GET_CART\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Query } from 'react-apollo';\n- import gql from 'graphql-tag';\nimport SubHeader from '../Header/SubHeader';\nimport ProductItem from '../Products/ProductItem';\nimport Totals from './Totals';\n+ import { GET_CART } from '../../constants';\n\n- const GET_CART = gql`\n-  query getCart {\n-    cart {\n-      total\n-      products {\n-        id\n-        title\n-        thumbnail\n-      }\n-    }\n-  }\n- `;\n\nconst CartWrapper = styled.div`\n  ...\n```", "```jsx\nimport React from 'react'\nimport { Query } from 'react-apollo';\n- import gql from 'graphql-tag';\nimport Button from '../Button/Button';\n+ import { GET_CART_TOTAL } from '../../constants';\n\n- const GET_CART_TOTAL = gql`\n-   query getCartTotal {\n-    cart {\n-      total\n-    }\n-  }\n- `;\n\nconst CartButton = ({ onClick }) => (\n  ...\n```", "```jsx\nmutation addToCart($productId: Int!) {\n    addToCart(input: { productId: $productId }) {\n        total\n    }\n  }\n```", "```jsx\nimport gql from 'graphql-tag';\n\n+ export const ADD_TO_CART = gql`\n+  mutation addToCart($productId: Int!) {\n+    addToCart(input: { productId: $productId }) {\n+        total\n+    }\n+  }\n+ `;\n\nexport const GET_CART_TOTAL = gql`\n    ...\n```", "```jsx\nimport React from 'react'\nimport { Mutation } from 'react-apollo';\nimport Button from '../Button/Button';\nimport { ADD_TO_CART } from '../../constants';\n\nconst AddToCartButton = ({ productId }) => (\n  <Mutation mutation={ADD_TO_CART}>\n    {addToCart => (\n      <Button onClick={() => addToCart({ variables: { productId }})}>\n        {`+ Add to cart`}\n      </Button>\n    )}\n  </Mutation>\n);\n\nexport default AddToCartButton;\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n+ import AddToCartButton from '../Cart/AddToCartButton';\n\n...\n\nconst ProductItem = ({ data }) => (\n  <ProductItemWrapper>\n    <Thumbnail src={data.thumbnail} width={200} />\n    <Title>{data.title}</Title>\n+   <AddToCartButton productId={data.id} />\n  </ProductItemWrapper>\n);\n\nexport default ProductItem;\n```", "```jsx\nimport React from 'react'\nimport { Mutation } from 'react-apollo';\nimport Button from '../Button/Button';\n- import { ADD_TO_CART, GET_CART_TOTAL } from '../../constants';\n+ import { GET_CART, ADD_TO_CART, GET_CART_TOTAL } from '../../constants';\n\nconst AddToCartButton = ({ productId }) => (\n-  <Mutation mutation={ADD_TO_CART}>\n+  <Mutation mutation={ADD_TO_CART} refetchQueries={[{ query: GET_CART }, { query: GET_CART_TOTAL }]}>\n    {addToCart => (\n      <Button onClick={() => addToCart({ variables: { productId }})}>\n        {`+ Add to cart`}\n      </Button>\n    )}\n  </Mutation>\n);\n\nexport default AddToCartButton;\n```", "```jsx\n+ const cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n   link: new HttpLink({\n     uri: 'http://localhost:4000/',\n   }),\n-  cache,\n+  resolvers: {},\n+  typeDefs: `\n+    extend type Query {\n+        limit: Int!\n+    }\n+  `,\n});\n\n+ cache.writeData({\n+  data: {\n+      limit: 5,\n+  },\n+ });\n```", "```jsx\nimport gql from 'graphql-tag';\n\n...\n\n+ export const GET_LIMIT = gql`\n+  query getLimit {\n+    limit @client\n+  }\n+ `;\n\n+ export const GET_PRODUCTS = gql`\n+  query getProducts {\n+    products {\n+      id\n+      title\n+      thumbnail\n+    }\n+  }\n+ `;\n```", "```jsx\n...\n\nconst GET_PRODUCTS = gql`\n- query getProducts { + query getProducts($limit: Int) { -   products {\n+   products(limit: $limit) {\n      id\n      title\n      thumbnail\n    }\n  }\n`;\n\nexport default GET_PRODUCTS;\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport {Query} from 'react-apollo';\n- import gql from 'graphql-tag';\nimport SubHeader from '../Header/SubHeader';\nimport ProductItem from './ProductItem';\n+ import { GET_PRODUCTS, GET_LIMIT } from '../../constants';\n\n- const GET_PRODUCTS = gql`\n- query getProducts {\n-    products {\n- id\n- title\n-       thumbnail\n-    }\n- }\n- `;\n\n...\n\nconst Products = ({ match, history }) => (\n  <>\n    {history && (\n      <SubHeader title='Available products' goToCart={() => history.push('/cart')} />\n    )}\n    <Query query={GET_LIMIT}>\n      {({ loading, error, data }) => (\n-       <Query query={GET_PRODUCTS}>\n+       <Query query={GET_PRODUCTS} variables={{ limit: parseInt(data.limit) }}>\n          {({ loading, error, data }) => {\n            if (loading || error) {\n              return <Alert>{loading ? 'Loading...' : error}</Alert>;\n            }\n            return (\n              <ProductItemsWrapper>\n                {data.products && data.products.map(product => (\n                  <ProductItem key={product.id} data={product} />\n                ))}\n              </ProductItemsWrapper>\n            );\n          }}\n        </Query>\n      )}\n    </Query>\n  </>\n);\n\nexport default Products;\n```", "```jsx\nimport React from 'react';\nimport { ApolloConsumer } from 'react-apollo';\n\nconst Filters = ({ limit }) => (\n  <ApolloConsumer>\n      {client => (\n        <>\n        <label for='limit'>Number of products: </label>\n        <select id='limit' value={limit} onChange={e => client.writeData({ data: { limit: e.target.value } })}>\n          <option value={5}>5</option>\n          <option value={10}>10</option>\n          <option value={20}>20</option>\n        </select>\n        </>\n      )}\n    </ApolloConsumer>\n);\n\nexport default Filters;\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Query } from 'react-apollo';\nimport SubHeader from '../Header/SubHeader';\nimport ProductItem from './ProductItem';\n+ import Filters from './Filters';\nimport { GET_PRODUCTS, GET_LIMIT } from '../../constants';\n\n...\n\nconst Products = ({ match, history }) => (\n  <>\n    {history && (\n      <SubHeader title='Available products' goToCart={() => history.push('/cart')} />\n    )}\n    <Query query={GET_LIMIT}>\n      {({ loading, error, data }) => (\n+       <>\n+         <Filters limit={parseInt(data.limit)} />\n          <Query query={GET_PRODUCTS} variables={{ limit: parseInt(data.limit) }}>\n            {({ loading, error, data }) => {\n              if (loading || error) {\n                return <Alert>{loading ? 'Loading...' : error}</Alert>;\n              }\n              return (\n                <ProductItemsWrapper>\n                  {data.products && data.products.map(product => (\n                    <ProductItem key={product.id} data={product} />\n                  ))}\n                </ProductItemsWrapper>\n              );\n            }}\n          </Query>\n+       </>\n      )}\n    </Query>\n  </>\n);\n\nexport default Products;\n```", "```jsx\nimport  React  from 'react'; import  styled, { createGlobalStyle } from 'styled-components'; - import { Route, Switch } from 'react-router-dom'**;**\n**+ import { Route, Switch, Redirect } from 'react-router-dom';** import  Header  from './Header/Header'; import  Products  from './Products/Products'; import  Cart  from './Cart/Cart'; + import  Login  from './Checkout/Login'; + import  Checkout  from '**./Checkout/Checkout';**\n\n...\n```", "```jsx\nconst  App  = () => (  <ApolloProvider  client={client}>\n <GlobalStyle  />\n <AppWrapper>\n <Header  />\n <Switch>\n <Route  exact  path='/'  component={Products}  /> <Route  path='/cart'  component={Cart}  /> +       <Route  path='/checkout'  component={Checkout}  /> +       <Route  path='/login/  component={Login} **/>** </Switch> </AppWrapper>\n </ApolloProvider> ); export  default  App;\n```", "```jsx\n...\n\n**+ const** isAuthenticated  =  sessionStorage.getItem('token'**);** const  cache  =  new  InMemoryCache(); const  client  =  new  ApolloClient({\n\n  ...\n```", "```jsx\nconst  App  = () => (  <ApolloProvider  client={client}>\n <GlobalStyle  />\n <AppWrapper>\n <Header  />\n <Switch>\n <Route  exact  path='/'  component={Products}  /> <Route  path='/cart'  component={Cart}  /> -       <Route  path='/checkout'  component={Checkout}  />\n+       <Route \n+         path='/checkout' \n+         render={props => \n+           isAuthenticated() \n+             ? <Checkout /> \n+             : <Redirect to='/login' />\n+         } \n+       />  <Route  path='/login'  component={Login}  /> </Switch>\n    <AppWrapper>\n </ApolloProvider> ); export  default  App;\n```", "```jsx\nimport gql from 'graphql-tag';\n\n... + export  const  LOGIN_USER  =  gql`\n+   mutation loginUser($userName: String!, $password: String!) {\n+     loginUser(userName: $userName, password: $password) {\n+       userName\n+       token\n+     }\n+   }\n+ `;\n```", "```jsx\nimport  React  from 'react'; import  styled  from 'styled-components'; + import { useMutation } from 'react-apollo'; import  Button  from '../Button/Button'; + import { LOGIN_USER } from **'../../constants';**\n\n... const  Login  = () => { + const [loginUser] =  useMutation(LOGIN_USER);   const [userName, setUserName] =  React.useState('');\n  const [password, setPassword] =  React.useState('');\n\n  return (\n\n    ...\n```", "```jsx\nreturn ( <LoginWrapper>\n <TextInput\n onChange={e  =>  setUserName(e.target.value)} value={userName} placeholder='Your username' /> <TextInput onChange={e  =>  setPassword(e.target.value)} value={password} placeholder='Your password' />\n**-   <Button color='royalBlue'>**\n**+** <Button\n+ color='royalBlue'\n+ onClick={() =>  loginUser({ variables: { userName, password } })}\n+ **>**\n Login </Button>\n </LoginWrapper> );\n```", "```jsx\n...  <Button\n color='royalBlue'\n**-** onClick={() =>  loginUser({ variables: { userName, password } })} + onClick={async () => { +   const { data } = await  loginUser({ +     variables: { userName, password } +   });\n+ +   if (data.loginUser && data.loginUser.token) { +     sessionStorage.setItem('token', data.loginUser.token); +   } else { +     alert('Please provide (valid) authentication details'); +   } + }**}** >\n Login </Button> ...\n```", "```jsx\n...\n\n- const Login = () => {\n**+ const Login = ({ history }) => {**\n\n  ...\n\n  return (\n\n    ...\n <Button\n color='royalBlue'\n onClick={async () => { ...        if (data.loginUser && data.loginUser.token) {\n sessionStorage.setItem('token', data.loginUser.token); +         return history.push('/checkout');        } else {\n          alert('Please provide (valid) authentication details');\n        }         \n     ...\n\n```", "```jsx\nimport  React  from 'react'; import  styled  from 'styled-components'; import { Query } from 'react-apollo'; + import { Link } from 'react-router-dom'; import  SubHeader  from '../Header/SubHeader'; import  ProductItem  from '../Products/ProductItem'; + import  Button  from '../Button/Button'; import  Totals  from './Totals'; import { GET_CART } from '../../constants';\n\n... const  Cart  = ({ history }) => (\n\n  ... return (    <CartWrapper>\n      <CartItemsWrapper>\n        {data.cart && data.cart.products.map(product  => (          <ProductItem  key={product.id}  data={product}  />\n        ))}\n      </CartItemsWrapper>\n      <Totals  count={data.cart.total}  />\n**+** {data.cart && data.cart.products.length > 0 && (  +       <Link  to='/checkout'> +         <Button  color='royalBlue'>Checkout</Button> +       </Link**>\n+     )}**\n    </CartWrapper>\n  );\n\n  ...\n```", "```jsx\nnpm install apollo-link-Context\n```", "```jsx\n...\n\nimport { ApolloClient } from 'apollo-client'; import { InMemoryCache } from 'apollo-cache-inmemory'; import { HttpLink } from 'apollo-link-http'; import { ApolloProvider } from 'react-apollo';\n**+ import { setContext } from 'apollo-link-Context';** const  isAuthenticated  =  sessionStorage.getItem('token');\n\n**+ const httpLink = new HttpLink({**\n**+   uri: 'http://localhost:4000/graphql',**\n**+ });** const  cache  =  new  InMemoryCache(); const  client  =  new  ApolloClient({\n link:  new  HttpLink({\n uri: 'http://localhost:4000/graphql',\n }), cache,\n resolvers: {\n\n    ... \n```", "```jsx\n... const  httpLink  =  new  HttpLink({\n uri: 'http://localhost:4000/graphql', }) + const  authLink  =  setContext((_, { headers }) => { +   const  token  =  isAuthenticated; +\n+   return { +     headers: { +       ...headers, +       authorization:  token  ?  `Bearer ${token}`  : '',  +     }, +   }; **+ });** const  cache  =  new  InMemoryCache(); const  client  =  new  ApolloClient({\n\n  ...\n```", "```jsx\n...\n\nconst  client  =  new  ApolloClient({ - link:  new  HttpLink({ -   uri: 'http://localhost:4000/graphql', - }),\n**+ l**ink:  authLink.concat(httpLink),  cache,\n resolvers: {\n\n    ...\n```", "```jsx\nexport  const  COMPLETE_CART  =  gql`\n mutation completeCart { completeCart { complete } } `;\n```", "```jsx\nimport  React  from 'react'; import  styled  from 'styled-components'; import  Button  from '../Button/Button'; + import { COMPLETE_CART } from '**../../constants';** \n... const  Checkout  = () => {\n  ...\n```", "```jsx\nimport  React  from 'react'; import  styled  from 'styled-components';\n**+ import { useMutation } from 'react-apollo';** import  Button  from '../Button/Button'; import { COMPLETE_CART } from '../../constants';\n\n... const  Checkout  = () => {\n**+ [completeCart, { data }] = useMutation(COMPLETE_CART);**\n\n  ...\n```", "```jsx\n...\n\nconst  Checkout  = () => {  const [completeCart, { data }] =  useMutation(COMPLETE_CART);\n return ( <CheckoutWrapper> +     {data && data.completeCart.complete ? ( +       <p>Completed checkout!</p> +     ) : ( **+       <>**\n <p>This is the checkout, press the button below to complete:</p> -         <Button  color='royalBlue'**>**\n**+         <Button color='royalBlue' onClick={completeCart}>**\n Complete checkout </Button> +       </> +     )**}**\n </CheckoutWrapper>\n ); };\n\n...\n```"]