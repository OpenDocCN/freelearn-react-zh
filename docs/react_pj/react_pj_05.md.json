["```jsx\nshopping-list\n|-- node_modules\n|-- public\n    |-- favicon.ico\n    |-- index.html\n    |-- manifest.json\n|-- src\n    |-- components\n        |-- Button\n            |-- Button.js\n        |-- FormItem\n            |-- FormItem.js\n        |-- Header\n            |-- Header.js\n            |-- Subheader.js\n         |-- ListItem\n             |-- ListItem.js\n |-- containers\n    |-- App.js\n    |-- Form.js\n    |-- List.js\n    |-- Lists.js\n |-- index.js\n |-- serviceWorker.js\n.gitignore\ndb.json\npackage.json\n```", "```jsx\nimport React from 'react';\nimport withDataFetching from '../withDataFetching';\n\nexport const ListsContext = React.createContext();\nconst ListsContextProvider = ({ children, data }) => (\n  <ListsContext.Provider value={{ lists: data }}>\n    {children}\n  </ListsContext.Provider>\n);\n\nexport default withDataFetching({\n  dataSource: 'https://my-json-server.typicode.com/PacktPublishing/React-Projects/lists',\n})(ListsContextProvider);\n```", "```jsx\nimport React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { Route, Switch } from 'react-router-dom';\n+ import ListsContextProvider, { ListsContext } from '../Context/ListsContextProvider';\n\n...\n\nconst App = () => (\n <>\n   <GlobalStyle />\n   <AppWrapper>\n     <Header />\n+    <ListsContextProvider>\n       <Switch>\n         <Route exact path='/' component={Lists} />\n         <Route path='/list/:id/new' component={Form} />\n         <Route path='/list/:id' component={List} />\n       </Switch>\n+    </ListsContextProvider>\n </AppWrapper>\n </>\n);\n\nexport default App;\n```", "```jsx\n...\n\nconst App = () => (\n  <>\n    <GlobalStyle />\n      <AppWrapper>\n      <Header />\n        <ListsContextProvider>\n+         <ListsContext.Consumer>\n+           {({ lists }) => (\n              <Switch>\n                <Route exact path='/' component={Lists} />\n                <Route path='/list/:id/new' component={Form} />\n                <Route path='/list/:id' component={List} />\n              </Switch>\n+           )}\n+         </ListsContext.Consumer>\n        </ListsContextProvider>\n    </AppWrapper>\n  </>\n);\n\nexport default App;\n```", "```jsx\n...\n<ListsContextProvider>                       \n  <ListsContext.Consumer>\n    {({ lists }) => (\n      <Switch>\n-       <Route exact path='/' component={Lists} />\n+       <Route exact path='/' render={props => lists && <Lists lists={lists} {...props} /> } />\n        <Route path='/list/:id/new' component={Form} />\n        <Route path='/list/:id' component={List} />\n      </Switch>\n    )}\n  </ListsContext.Consumer>\n</ListsContextProvider>\n...\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n- import withDataFetching from '../withDataFetching';\nimport SubHeader from '../components/SubHeader/SubHeader';\n\n...\n\n- const Lists = ({ data, loading, error, match, history }) => (\n+ const Lists = ({ lists, loading = false, error = false, match, history }) => (\n  <>\n    {history && <SubHeader title='Your Lists' openForm={() => history.push('/new')} /> }\n    <ListWrapper>\n      {(loading || error) && <Alert>{loading ? 'Loading...' : error}</Alert>}\n-     {data.lists && data.lists.map(list => (\n+     {lists && lists.map(list => (\n        <ListLink key={list.id} to={`list/${list.id}`}>\n          <Title>{ list.title }</Title>\n        </ListLink>\n      ))}\n    </ListWrapper>\n  </>\n);\n\n- export default withDataFetching({\n-   dataSource: 'https://github.com/PacktPublishing/React-Projects/lists',\n})(Lists); + export default Lists;\n```", "```jsx\n...\n<ListsContextProvider>                       \n  <ListsContext.Consumer>\n    {({ lists }) => (\n      <Switch>\n        <Route exact path='/' render={props => lists && <Lists lists={lists} {...props} /> } />\n        <Route path='/list/:id/new' component={Form} />\n-       <Route path='/list/:id' component={List} />\n+       <Route path='/list/:id' render={props => lists && <List lists={lists} {...props} />} />\n      </Switch>\n    )}\n  </ListsContext.Consumer>\n</ListsContextProvider>\n...\n```", "```jsx\n- const List = ({ data, loading, error, match, history }) => {\n+ const List = ({ data, loading, error, lists, match, history }) => {\n    const items = data && data.filter(item => item.listId === parseInt(match.params.id))\n+   const list = lists && lists.find(list => list.id === parseInt(match.params.id));\n\n  return (\n    <>\n-     {history && <SubHeader goBack={() => history.goBack()} openForm={() => history.push(`${match.url}/new`)} />}\n+     {history && list && <SubHeader goBack={() => history.goBack()} title={list.title} openForm={() => history.push(`${match.url}/new`)} />}\n      <ListItemWrapper>\n        {items && items.map(item => <ListItem key={item.id} data={item} />)}\n      </ListItemWrapper>\n    </>\n  )\n};\n\nexport default withDataFetching({\n  dataSource: 'https://my-json-server.typicode.com/PacktPublishing/React-Projects/items',\n})(List);\n```", "```jsx\nimport React from 'react';\nimport withDataFetching from '../withDataFetching';\n\nexport const ItemsContext = React.createContext();\n\nconst ItemsContextProvider = ({ children, data }) => (\n  <ItemsContext.Provider value={{ items: data }}>\n    { children }\n  </ItemsContext.Provider>\n);\n\nexport default withDataFetching({\n  dataSource: 'https://my-json-server.typicode.com/PacktPublishing/React-Projects/items', \n})(ItemsContextProvider);\n```", "```jsx\nimport React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { Route, Switch } from 'react-router-dom';\nimport ListsContextProvider, { ListsContext } from '../Context/ListsContextProvider';\n+ import ItemsContextProvider, { ItemsContext } from '../Context/ItemsContextProvider';\n\n...\n\nconst App = () => (\n  <>\n    <GlobalStyle />\n    <AppWrapper>\n     <Header />\n     <ListsContextProvider>\n+    <ItemsContextProvider>\n     <ListsContext.Consumer>\n        ...\n```", "```jsx\n<ListsContextProvider>\n  <ItemsContextProvider>\n    <ListsContext.Consumer>\n      {({ lists }) => (\n+       <ItemsContext.Consumer>\n+         {({ items }) => (\n            <Switch>\n              <Route exact path='/' render={props => lists && <Lists lists={lists} {...props} />} />\n              <Route path='/new' component={Form} />\n              <Route path='/list/:id/new' component={Form} />\n-             <Route path='/list/:id' render={props => lists && <List lists={lists} {...props} />\n+             <Route path='/list/:id' render={props => lists && items && <List lists={lists} listItems={items} {...props} />}/>\n             </Switch>\n+          )}\n+        </ItemsContext.Consumer>\n       )}\n     </ListsContext.Consumer>\n   </ItemsContextProvider>\n </ListsContextProvider>\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n- import withDataFetching from '../withDataFetching';\nimport SubHeader from '../components/SubHeader/SubHeader';\nimport ListItem from '../components/ListItem/ListItem';\n\n...\n\n- const List = ({ data, lists, loading, error, match, history }) => {\n+ const List = ({ lists, listItems, loading = false, error = false, match, history }) => {\n-   const items = data && data.filter(item => item.listId === parseInt(match.params.id))\n+   const items = listItems && listItems.filter(item => item.listId === parseInt(match.params.id))\n\n    const list = lists && lists.find(list => list.id === parseInt(match.params.id));\n    return (\n      <>\n        {history && <SubHeader goBack={() => history.goBack()} title={list.title} openForm={() => history.push(`${match.url}/new`)} />}\n        <ListItemWrapper>\n          {items && items.map(item => <ListItem key={item.id} data={ item } />) }\n        </ListItemWrapper>\n      </>\n    )\n};\n\n- export default withDataFetching({\n    dataSource: 'https://my-json-server.typicode.com/PacktPublishing/React-Projects/items',\n  })(List);\n+ export default List;\n```", "```jsx\nimport React from 'react';\n\nexport const ListsContext = React.createContext();\n\nasync function fetchData(dataSource) {\n try {\n const data = await fetch(dataSource);\n const dataJSON = await data.json();\n\n if (dataJSON) {\n return await ({ data: dataJSON, error: false });\n }\n } catch(error) {\n return ({ data: false, error: error.message });\n }\n};\n\n....\n```", "```jsx\n...\nasync function fetchData(dataSource) {\n  try {\n    const data = await fetch(dataSource);\n    const dataJSON = await data.json();\n\n    if (dataJSON) {\n      return await ({ data: dataJSON, error: false });\n    }\n  } catch(error) {\n      return ({ data: false, error: error.message });\n  }\n};\n\n- const ListsContextProvider = ({ children, data }) => ( + const ListsContextProvider = ({ children }) => {\n+    const [lists, setLists] = React.useState([]);\n+    return (\n-       <ListsContext.Provider value={{ lists: data }}>\n+       <ListsContext.Provider value={{ lists }}>\n          {children}\n        </ListsContext.Provider>\n      ) + };\n\n- export default withDataFetching({\n    dataSource: 'https://my-json-server.typicode.com/PacktPublishing/React-Projects/items', \n  })(ListsContextProvider);\n+ export default ListsContextProvider; \n```", "```jsx\n...\nconst ListsContextProvider = ({ children }) => {\nconst [lists, setLists] = React.useState([]); React.useEffect(() => {\n    const asyncFetchData = async dataSource => {\n      const result = await fetchData(dataSource);\n\n      setLists([...result.data]);\n    };\n\n    asyncFetchData('https://my-json-server.typicode.com/PacktPublishing/React-Projects/lists');\n\n  }, [fetchData, setLists]);  return (    <ListsContext.Provider value={{ lists }}>\n      {children}\n    </ListsContext.Provider>\n  )\n};\n\nexport default ListsContextProvider;\n```", "```jsx\nimport React from 'react';\n\nexport const ListsContext = React.createContext();\n\nconst initialValue = {\n lists: [],\n loading: true,\n  error: '',\n},\n\n... \n```", "```jsx\nimport React from 'react';\n\nexport const ListsContext = React.createContext();\n\nconst initialValue = {\n  lists: [],\n  loading: true,\n  error: '',\n};\n\nconst reducer = (value, action) => {\n switch (action.type) {\n case 'GET_LISTS_SUCCESS':\n return {\n ...value,\n lists: action.payload,\n loading: false,\n };\n case 'GET_LISTS_ERROR':\n return {\n        ...value,\n lists: [],\n        loading: false,\n error: action.payload,\n };\n default:\n return value;\n }\n};\n\n...\n```", "```jsx\n...\n\nconst ListsContextProvider = ({ children }) => { \n-    const [lists, setLists] = React.useState([]);\n+    const [value, dispatch] = React.useReducer(reducer, initialValue);\n\n...\n```", "```jsx\n...\nconst ListsContextProvider = ({ children }) => {\n  const [value, dispatch] = React.useReducer(reducer, initialValue);\n\n const getListsRequest = async () => {\n    const result = await fetchData('https://my-json-server.typicode.com/PacktPublishing/React-Projects/lists');\n\n    if (result.data && result.data.length) {\n      dispatch({ type: 'GET_LISTS_SUCCESS', payload: result.data });\n    } else {\n      dispatch({ type: 'GET_LISTS_ERROR', payload: result.error });\n    }\n  } ...\n```", "```jsx\n...  \n\n-  React.useEffect(() => {\n-    const asyncFetchData = async (dataSource) => {\n-      const result = await fetchData(dataSource);\n-\n-      setLists([...result.data]);\n-    }\n-\n-    asyncFetchData('https://my-json-server.typicode.com/PacktPublishing/React-Projects/lists');\n-  }, [setLists]);\n\n  return (\n-   <ListsContext.Provider value={{ lists: state }}>               \n+   <ListsContext.Provider value={{ ...value, getListsRequest }}>\n      {children}\n    </ListsContext.Provider>\n  );\n};\n\nexport default ListsContextProvider;\n```", "```jsx\n...\nconst App = () => (\n  <>\n    <GlobalStyle />\n      <AppWrapper>\n      <Header />\n        <ListsContextProvider>\n          <ItemsContextProvider>\n            <ListsContext.Consumer>\n-             {({ lists }) => (\n+             {({ lists, loading: listsLoading, error: listsError, getListsRequest }) => (\n                <ItemsContext.Consumer>\n                  {({ items }) => (\n                    <Switch>\n-                     <Route exact path='/' render={props => lists && <Lists lists={lists} {...props} />} />\n+                     <Route exact path='/' render={props => lists && <Lists lists={lists} loading={listsLoading} error={listsError} getListsRequest={getListsRequest} {...props} />} />\n...\n```", "```jsx\n- const Lists = ({lists, loading = false, error = '', match, history}) => !loading && !error ? (\n+ const Lists = ({lists, loading, error, getListsRequest, match, history}) => {\n+  React.useEffect(() => {\n+    if (!lists.length) {\n+      getListsRequest();\n+    }\n+  }, [lists, getListsRequest]);\n\n+ return !loading && !error ? (\n  <>\n    {history && <SubHeader title='Your Lists' openForm={() => history.push('/new')} /> }\n    <ListWrapper>\n      {lists && lists.map(list => (\n        <ListLink key={list.id} to={`list/${list.id}`}>\n          <Title>{list.title}</Title>\n        </ListLink>\n      ))}\n    </ListWrapper>\n  </>\n- );\n+  ) : <Alert>{loading ? 'Loading...' : error}</Alert>;\n+ } export default Lists;\n```", "```jsx\nimport React from 'react';\n- import withDataFetching from '../withDataFetching';\n\n+ const initialValue = {\n+  items: [],\n+  loading: true,\n+  error: '',\n+ }\n\nexport const ItemsContext = React.createContext();\n\n- const ItemsContextProvider = ({ children, data }) => (\n+ const ItemsContextProvider = ({ children }) => {\n    + const [value, dispatch] = React.useReducer(reducer, initialValue);\n\n+ return (\n  <ItemsContext.Provider value={{ items: data }}>\n    {children}\n  </ItemsContext.Provider>\n);\n+ };\n\n...\n```", "```jsx\nimport React from 'react';\nimport withDataFetching from '../withDataFetching';\n\nexport const ItemsContext = React.createContext();\n\nconst initialValue = {\n  items: [],\n  loading: true,\n  error: '',\n}\n\n+ const reducer = (value, action) => {\n+  switch (action.type) {\n+    case 'GET_ITEMS_SUCCESS':\n+      return {\n+        ...value,\n+        items: action.payload,\n+        loading: false,\n+      };\n+    case 'GET_ITEMS_ERROR':\n+      return {\n+        ...value,\n+        items: [],\n+        loading: false,\n+        error: action.payload,\n+      };\n+    default:\n+      return value;\n+  }\n+ };\n\n+ async function fetchData(dataSource) {\n+  try {\n+    const data = await fetch(dataSource);\n+    const dataJSON = await data.json();\n+\n+    if (dataJSON) {\n+      return await ({ data: dataJSON, error: false })\n+    }\n+  } catch(error) {\n+      return ({ data: false, error: error.message })\n+  }\n+ };\n\nconst ItemsContextProvider = ({ children }) => {\n    ...\n```", "```jsx\n...\nconst ItemsContextProvider = ({ children }) => {\n  const [value, dispatch] = React.useReducer(reducer, initialValue);\n\n+  const getItemsRequest = async (id) => {\n+    const result = await fetchData(`\n+      https://my-json-server.typicode.com/PacktPublishing/React-Projects/items/${id}/items\n+    `);\n\n+    if (result.data && result.data.length) {\n+      dispatch({ type: 'GET_ITEMS_SUCCESS', payload: result.data });\n+    } else {\n+      dispatch({ type: 'GET_ITEMS_ERROR', payload: result.error });\n+    }\n+  }\n\n  return (\n-    <ItemsContext.Provider value={{ items: data }}>            \n+    <ItemsContext.Provider value={{ ...value, getItemsRequest }}>\n      {children}\n    </ItemsContext.Provider>\n  );\n}\n\n- export default withDataFetching({\n    dataSource: 'https://my-json-server.typicode.com/PacktPublishing/React-Projects/items', \n  })(ItemsContextProvider);\n+ export default ItemsContextProvider;\n```", "```jsx\n...\nconst App = () => (\n  <>\n    <GlobalStyle />\n      <AppWrapper>\n      <Header />\n        <ListsContextProvider>\n          <ItemsContextProvider>\n            <ListsContext.Consumer>\n              {({ lists, loading: listsLoading, error: listsError, getListsRequest }) => (\n                <ItemsContext.Consumer>\n-                 {({ items }) => (\n+                 ({ items, loading: itemsLoading, error: itemsError, getItemsRequest }) => (\n                    <Switch>\n                      <Route exact path='/' render={props => lists && <Lists lists={lists} loading={listsLoading} error={listsError} getListsRequest={getListsRequest} {...props} />} />\n                      <Route path='/list/:id/new' component={Form} />\n-                     <Route path='list/:id' render={props => lists && items && <List lists={lists} listItems={items} {...props} /> \n+                     <Route path='/list/:id' render={props => lists && items && <List lists={lists} items={items} loading={itemsLoading} error={itemsError} getItemsRequest={getItemsRequest} {...props} /> } />\n                    </Switch>\n                  )}\n                </ItemsContext.Consumer>\n              )}\n           </ListsContext.Consumer>\n         </ItemsContextProvider>\n       </ListsContextProvider>\n    </AppWrapper>\n  </>\n);\n\nexport default App;\n```", "```jsx\n...\n- const List = ({ listItems, loading = false, error = '', lists, match, history }) => {\n+ const List = ({ items, loading, error, lists, getItemsRequest, match, history }) => {\n-  const items = listItems && listItems.filter(item => item.listId === parseInt(match.params.id));\n  const list = lists && lists.find(list => list.id === parseInt(match.params.id));\n\n+  React.useEffect(() => {\n+   if (!items.length > 0) {\n+     getItemsRequest(match.params.id);\n+   };\n+ }, [items, match.params.id, getItemsRequest]);\n\n  return !loading && !error ? (\n    <>\n      {(history && list) && <SubHeader goBack={() => history.goBack()} title={list.title} openForm={() => history.push(`${match.url}/new`)} />}\n      <ListItemWrapper>\n        {items && items.map(item => <ListItem key={item.id} data={ item } />)}\n      </ListItemWrapper>\n    </>\n) : <Alert>{loading ? 'Loading... : error}</Alert>\n};\n\nexport default List;\n```", "```jsx\nimport React from 'react';\n\nexport const ListsContext = React.createContext();\n\nconst initialValue = {\n  lists: [],\n+ list: {},\n  loading: true,\n  erorr: '',\n}\n\nconst reducer = (value, action) => {\n...\n```", "```jsx\n...\n\nconst reducer = (value, action) => {\n  switch (action.type) {\n    case 'GET_LISTS_SUCCESS':\n      return {\n        ...value,\n        lists: action.payload,\n        loading: false,\n      };\n    case 'GET_LISTS_ERROR':\n      return {\n        ...value,\n        lists: [],\n        loading: false,\n        error: action.payload,\n      };\n+   case 'GET_LIST_SUCCESS':\n+     return {\n+       ...value,\n+       list: action.payload,\n+       loading: false,\n+     };\n+   case 'GET_LIST_ERROR':\n+     return {\n+       ...value,\n+       list: {},\n+       loading: false,\n+       error: action.payload,\n+     };\n    default:\n      return value;\n  }\n};\n\nasync function fetchData(dataSource) {\n...\n```", "```jsx\n...\nconst ListsContextProvider = ({ children }) => {\n  const [value, dispatch] = React.useReducer(reducer, initialValue);\n\n  const getListsRequest = async () => {\n    const result = await fetchData('https://my-json-server.typicode.com/PacktPublishing/React-Projects/lists');\n\n    if (result.data && result.data.length) {\n      dispatch({ type: 'GET_LISTS_SUCCESS', payload: result.data });\n    } else {\n      dispatch({ type: 'GET_LISTS_ERROR', payload: result.error });\n    }\n  }\n\n+  const getListRequest = async id => {\n+    const result = await fetchData(`https://my-json-server.typicode.com/PacktPublishing/React-Projects/lists/${id}`);\n\n+    if (result.data && result.data.hasOwnProperty('id')) {\n+      dispatch({ type: 'GET_LIST_SUCCESS', payload: result.data });\n+    } else {\n+      dispatch({ type: 'GET_LIST_ERROR', payload: result.error });\n+    }\n+  }\n\n  return (\n-   <ListsContext.Provider value={{ ...value, getListsRequest }}>\n+   <ListsContext.Provider value={{ ...value, getListsRequest, getListRequest }}>\n        ...\n```", "```jsx\n<ListsContext.Consumer>\n-  {({ lists, loading: listsLoading, error: listsError, getListsRequest }) => (\n+  {({ list, lists, loading: listsLoading, error: listsError, getListsRequest, getListRequest }) => (\n     <ItemsContext.Consumer>\n       {({ items, loading: itemsLoading, error: itemsError, getItemsRequest }) => (\n         <Switch>\n           <Route exact path='/' render={props => lists && <Lists lists={lists} loading={listsLoading} error={listsError} getListsRequest={getListsRequest} {...props} />} />\n           <Route path='/list/:id/new' component={Form} />\n-          <Route path='/list/:id' render={props => lists && items && <List lists={lists} items={items} loading={itemsLoading} error={itemsError} getItemsRequest={getItemsRequest} {...props} /> } />\n+          <Route path='/list/:id' render={props => list && items && <List list={list} items={items} loading={itemsLoading} error={itemsError} getListRequest={getListRequest} getItemsRequest={getItemsRequest} {...props} /> } />\n         </Switch>\n       )}\n     </ItemsContext.Consumer>\n   )}\n</ListsContext.Consumer>\n\n...\n```", "```jsx\n...\n- const List = ({ items, loading, error, lists, getItemsRequest, match, history }) => {\n+ const List = ({ items, loading, error, list, getListRequest, getItemsRequest, match, history }) => {\n-   const list = lists && lists.find(list => list.id === parseInt(match.params.id));\n\n  React.useEffect(() => {\n+   if (!list.id) {\n+     getListRequest(match.params.id);\n+   }\n\n    if (!items.length > 0) {\n      getItemsRequest(match.params.id);\n    }\n- }, [items, match.params.id, getItemsRequest]);\n+ }, [items, list, match.params.id, getItemsRequest, getListRequest]);\n\n  return !loading && !error ? (\n    ...\n```", "```jsx\n...\nasync function fetchData(dataSource) {\n  try {\n    const data = await fetch(dataSource);\n    const dataJSON = await data.json();\n\n    if (dataJSON) {\n      return await ({ data: dataJSON, error: false });\n    }\n  } catch(error) {\n      return ({ data: false, error: error.message });\n  }\n};\n\nasync function postData(dataSource, content) {\n try {\n const data = await fetch(dataSource, {\n method: 'POST',\n body: JSON.stringify(content),\n });\n const dataJSON = await data.json();\n\n if (dataJSON) {\n return await ({ data: dataJSON, error: false });\n }\n } catch(error) {\n return ({ data: false, error: error.message });\n }\n};\n\nconst ItemsContextProvider = ({ children }) => {\n    ...\n```", "```jsx\n...\nconst reducer = (value, action) => {\n  switch (action.type) {\n    case 'GET_ITEMS_SUCCESS':\n      return {\n        ...value,\n        items: action.payload,\n        loading: false,\n      };\n    case 'GET_ITEMS_ERROR':\n      return {\n        ...value,\n        items: [],\n        loading: action.payload,\n      };\n+   case 'ADD_ITEM_SUCCESS':\n+     return {\n+       ...value,\n+       items: [\n+         ...value.items,\n+         action.payload,\n+       ],\n+       loading: false,\n+     };\n+   case 'ADD_ITEM_ERROR':\n+     return {\n+       ...value,\n+       loading: false,\n+       error: 'Something went wrong...',\n+     };\n    default:\n      return value;\n  }\n};\n\nasync function fetchData(dataSource) {\n...\n\n```", "```jsx\n...\nconst ItemsContextProvider = ({ children }) => {\n  const [value, dispatch] = React.useReducer(reducer, initialValue);\n\n  const getItemsRequest = async (id) => {\n    const result = await fetchData(`\n      https://my-json-server.typicode.com/PacktPublishing/React-Projects/items/${id}/items\n    `);\n\n    if (result.data && result.data.length) {\n      dispatch({ type: 'GET_ITEMS_SUCCESS', payload: result.data });\n    } else {\n      dispatch({ type: 'GET_ITEMS_ERROR', payload: result.error });\n    }\n  }\n\n+  const addItemRequest = async (content) => {\n+    const result = await postData('https://my-json-server.typicode.com/PacktPublishing/React-Projects/items', content);\n\n+    if (result.data && result.data.hasOwnProperty('id')) {\n+      dispatch({ type: 'ADD_ITEM_SUCCESS', payload: content });\n+    } else {\n+      dispatch({ type: 'ADD_ITEM_ERROR' });\n+    }\n+  }\n\n  return (\n-   <ItemsContext.Provider value={{ ...value, getItemsRequest }}>\n+   <ItemsContext.Provider value={{ ...value, getItemsRequest, addItemRequest }}>\n    ...\n```", "```jsx\n...\n  const getListsRequest = () => {\n    actionDispatch({ \n      type: 'GET_LISTS_REQUEST', \n      payload: 'https://my-json-server.typicode.com/PacktPublishing/React-Projects/items',\n    });\n  };\n\n+  const addListRequest = (content) => {\n+    actionDispatch({\n+      type: 'ADD_LIST_REQUEST',\n+      payload: { \n+        dataSource: 'https://my-json-server.typicode.com/PacktPublishing/React-Projects/items', \n+        content, \n+       } \n+     });\n+  };\n\n  return (\n-    <ListsContext.Provider value={{ ...value, getListsRequest }}>\n+    <ListsContext.Provider value={{ ...value, getListsRequest, addListRequest }}>\n      {children}\n    </ListsContext.Provider>\n  )\n};\n\nexport default ListsContextProvider;\n```", "```jsx\n...\n<ListsContext.Consumer>\n  {({ list, lists, loading: listsLoading, error: listsError, getListsRequest, getListRequest }) => (\n    <ItemsContext.Consumer>\n-     {({ items, loading: itemsLoading, error: itemsError, getItemsRequest }) => (\n+     {({ items, loading: itemsLoading, error: itemsError, getItemsRequest, addItemRequest }) => (\n        <Switch>\n          <Route exact path='/' render={props => lists && <Lists lists={lists} loading={listsLoading} error={listsError} getListsRequest={getListsRequest} {...props} />} />\n-         <Route path='/list/:id/new' component={Form} />\n+         <Route path='/list/:id/new' render={props => <Form addItemRequest={addItemRequest} {...props} />} />\n          <Route path='/list/:id' render={props => list && items && <List list={list} items={items} loading={itemsLoading} error={itemsError} getListRequest={getListRequest} getItemsRequest={getItemsRequest} {...props} /> } />\n        </Switch>\n      )}\n    </ItemsContext.Consumer>\n  )}\n</ListsContext.Consumer>\n\n...\n```", "```jsx\n...\n- const Form = ({ match, history }) => (\n+ const Form = ({ addItemRequest, match, history }) => {  \n+  const [title, setTitle] = React.useState('');\n+  const [quantity, setQuantity] = React.useState('');\n+  const [price, setPrice] = React.useState('');\n\n+  return (\n  <>\n    {history && <SubHeader goBack={() => history.goBack()} title='Add Item' />}\n    <FormWrapper>\n      <form>\n        <FormItem id='title' label='Title' placeholder='Insert title' />\n        <FormItem id='quantity' label='Quantity' type='number' placeholder='0' />\n        <FormItem id='price' label='Price' type='number' placeholder='0.00' />\n        <SubmitButton>Add Item</SubmitButton>\n      </form>\n    </FormWrapper>\n  </>\n);\n+ }\n\nexport default Form;\n```", "```jsx\n...\n\n  return (\n    <>\n      {history && <SubHeader goBack={() => history.goBack()} title='Add item' /> }\n      <FormWrapper>\n        <form>\n-         <FormItem id='title' label='Title' placeholder='Insert title' />\n+         <FormItem id='title' label='Title' placeholder='Insert title' value={title} handleOnChange={setTitle} />\n-         <FormItem id='quantity' label='Quantity' type='number' placeholder='0' />\n+         <FormItem id='quantity' label='Quantity' type='number' placeholder='0' value={quantity} handleOnChange={setQuantity} />\n-         <FormItem id='price' label='Price' type='number' placeholder='0.00' />\n+         <FormItem id='price' label='Price' type='number' placeholder='0.00' value={price} handleOnChange={setPrice} />\n          <SubmitButton>Add Item</SubmitButton>\n        </form>\n      </FormWrapper>\n    </>\n  )\n};\n\nexport default Form;\n\n```", "```jsx\n...\n- const FormItem = ({ id, label, type = 'text', placeholder = '' }) => (\n+ const FormItem = ({ id, label, type = 'text', placeholder = '', value, handleOnChange }) => (\n  <FormItemWrapper>\n    <Label htmlFor={id}>{label}</Label>\n-    <Input type={type} name={id} id={id} placeholder={placeholder} />\n+    <Input type={type} name={id} id={id} placeholder={placeholder} value={value} onChange={e => handleOnChange(e.target.value)} />\n  </FormItemWrapper>\n);\n\nexport default FormItem;\n```", "```jsx\n...\nconst Form = ({ addItemRequest, match, history }) => {\n  ...\n\n+ const handleOnSubmit = e => {\n+    e.preventDefault();\n+    addItemRequest({\n+      title, \n+      quantity,\n+      price,\n+      id: Math.floor(Math.random() * 100), \n+      listId: parseInt(match.params.id) \n+    });\n+    history.goBack();\n+  };\n\n  return (\n    <>\n      {history && <SubHeader goBack={() => history.goBack()} title={title} />}\n      <FormWrapper>\n-        <form>\n+        <form onSubmit={handleOnSubmit}>\n\n...\n```", "```jsx\nimport React from 'react';\nimport ListsContextProvider from './ListsContextProvider';\nimport ItemsContextProvider from './ItemsContextProvider';\n\nconst GlobalContext = ({ children }) => {\n  return (\n    <ListsContextProvider>\n      <ItemsContextProvider>\n        {children}\n      </ItemsContextProvider>\n    </ListsContextProvider>\n  );\n};\n\nexport default GlobalContext;\n```", "```jsx\nimport React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { Route, Switch } from 'react-router-dom';\n- import ListsContextProvider, { ListsContext } from '../Context/ListsContextProvider';\n- import ItemsContextProvider, { ItemsContext } from '../Context/ItemsContextProvider';\n+ import GlobalContext from '../Context/GlobalContext';\n...\n```", "```jsx\nconst App = () => (\n  <>\n    <GlobalStyle />\n      <AppWrapper>\n      <Header />\n+      <GlobalContext>\n-      <ListsContextProvider>\n-        <ItemsContextProvider>\n          <ListsContext.Consumer>\n            {({ list, lists, loading: listsLoading, error: listsErorr, getListsRequest, getListRequest }) => (\n              <ItemsContext.Consumer>\n                {({ items, loading: itemsLoading, error: itemsError, getItemsRequest, addItemRequest }) => (\n                  <Switch>\n                    <Route exact path='/' render={props => lists && <Lists lists={lists} loading={listsLoading} error={listsError} getListsRequest={getListsRequest} {...props} />} />\n                    <Route path='/list/:id/new' render={props => <Form addItemRequest={addItemRequest} {...props} />} />\n                    <Route path='/list/:id' render={props => list && items && <List list={list} items={items} loading={itemsLoading} error={itemsError} getListRequest={getListRequest} getItemsRequest={getItemsRequest} {...props} /> } />\n                  </Switch>\n                )}\n              </ItemsContext.Consumer>\n            )}\n          </ListsContext.Consumer>\n-       </ItemsContextProvider>\n-     </ListsContextProvider>\n+     </GlobalContext>\n    </AppWrapper>\n  </>\n);\n\nexport default App;\n```", "```jsx\n...\n        <GlobalContext>\n-         <ListsContext.Consumer>\n-           {({ list, lists, loading: listsLoading, error: listsError, getListsRequest, getListRequest }) => (\n-             <ItemsContext.Consumer>\n-               {({ items, loading: itemsLoading, error: itemsError, getItemsRequest, addItemRequest }) => (\n                  <Switch>\n-                   <Route exact path='/' render={props => lists && <Lists lists={lists} loading={listsLoading} error={listsError} getListsRequest={getListsRequest} {...props} />} />\n+                   <Route exact path='/' component={Lists} />\n-                   <Route path='/list/:id/new' render={props => <Form addItemRequest={addItemRequest} {...props} />} />\n+                   <Route path='/list/:id/new' component={Form} />\n-                   <Route path='/list/:id' render={props => list && items && <List list={list} items={items} loading={itemsLoading} error={itemsError} getListRequest={getListRequest} getItemsRequest={getItemsRequest} {...props} /> } />\n+                   <Route path='/list/:id' component={List} />\n                  </Switch>\n-               )}\n-             </ItemsContext.Consumer>\n-           )}\n-        </ListsContext.Consumer>\n       </GlobalContext>\n...\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n+ import { ListsContext } from '../Context/ListsContextProvider';\nimport SubHeader from '../components/Header/SubHeader';\n\n...\n\n- const Lists = ({lists, loading, error, getListsRequest, match, history}) => {\n+ const Lists = ({ match, history }) => {\n+  const { lists, loading, error, getListsRequest } =    React.useContext(ListsContext);\n  React.useEffect(() => {\n    if (!lists.length) {\n      getListsRequest();\n    }\n  }, [lists, getListsRequest]);\n\n  return !loading && !error ? (\n    <>\n      {history && <SubHeader title='Your Lists' />}\n      <ListWrapper>\n        {lists && lists.map((list) => (\n          <ListLink key={list.id} to={`list/${list.id}`}>\n            <Title>{list.title}</Title>\n          </ListLink>\n        ))}\n      </ListWrapper>\n    </>\n  ) : <Alert>{loading ? 'Loading...' : error}</Alert>;\n}\nexport default Lists;\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport { ListsContext } from '../Context/ListsContextProvider';\nimport { ItemsContext } from '../Context/ItemsContextProvider';\nimport SubHeader from '../components/Header/SubHeader';\nimport ListItem from '../components/ListItem/ListItem';\n\n...\n\n- const List = ({ items, loading, error, list, getListRequest, getItemsRequest, match, history }) => {\n+ const List = ({ match, history }) => {\n+  const { list, getListRequest } = React.useContext(ListsContext);\n+  const { loading, error, items, getItemsRequest } = React.useContext(ItemsContext);\n\n  React.useEffect(() => {    ...\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n+ import { ItemsContext } from '../Context/ItemsContextProvider';\nimport SubHeader from '../components/Header/SubHeader';\nimport FormItem from '../components/FormItem/FormItem';\nimport Button from '../components/Button/Button';\n\n...\n\n- const Form = ({ addItemRequest, match, history }) => {\n+ const Form = ({ match, history }) => {\n+  const { addItemRequest } = React.useContext(ItemsContext);\n\n...\n```"]