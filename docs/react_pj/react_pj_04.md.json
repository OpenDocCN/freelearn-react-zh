["```jsx\ncommunity-feed\n|-- node_modules\n|-- public\n    |-- favicon.ico\n    |-- index.html\n    |-- manifest.json\n|-- src\n    |-- components\n        |-- Header\n            |-- Header.js\n        |-- Card\n            |-- Card.js\n        |-- Owner\n            |-- Owner.js\n    |-- containers\n        |-- App.js\n        |-- Feed.js\n    |-- index.js\n    |-- serviceWorker.js\n.gitignore\npackage.json\n```", "```jsx\nnpm install react-router-dom\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\n+ import { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from '../components/Header/Header';\nimport Feed from './Feed';\n\nconst GlobalStyle = createGlobalStyle`...`;\n\nconst AppWrapper = styled.div`...`;\n\nclass App extends Component {\n    ...\n```", "```jsx\n...\nclass App extends Component {\n  render() {\n    return (\n        <>\n          <GlobalStyle />\n          <AppWrapper>\n            <Header />\n+           <Router>\n+             <Route path='/' component={Feed} />\n+           </Router>\n          </AppWrapper>\n        </>\n    );\n  }\n}\n\nexport default App;\n```", "```jsx\n...\nclass App extends Component {\n  render() {\n    return (\n        <>\n          <GlobalStyle />\n          <AppWrapper>\n            <Header />\n            <Router>\n-             <Route path='/' component={Feed} />\n+             <Route exact path='/' component={Feed} />\n            </Router>\n          </AppWrapper>\n        </>\n    );\n  }\n}\n\nexport default App;\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst QuestionWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  margin: 5%;\n`;\n\nconst Alert = styled.div`\n  text-align: center;\n`;\n\nclass Question extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      loading: true,\n      error: '',\n    };\n  }\n\n  render() {\n    const { data, loading, error } = this.state;\n\n    if (loading || error) {\n      return <Alert>{loading ? 'Loading...' : error}</Alert>;\n    }\n\n    return (\n      <QuestionWrapper></QuestionWrapper>\n    );\n  }\n}\n\nexport default Question;\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from '../components/Header/Header';\nimport Feed from './Feed';\n+ import Question from './Question';\n...\nclass App extends Component {\n  render() {\n    return (\n        <>\n          <GlobalStyle />\n          <AppWrapper>\n            <Header />\n            <Router>\n              <Route exact path='/' component={Feed} />\n+             <Route path='/questions/:id' component={Question} />\n            </Router>\n          </AppWrapper>\n        </>\n    );\n  }\n}\n\nexport default App;\n```", "```jsx\n...\n\n+ const ROOT_API = 'https://api.stackexchange.com/2.2/';\n\nclass Question extends Component {\n  constructor(props) { ... }\n\n+ async componentDidMount() {\n+   const { match } = this.props;\n+   try {\n+     const data = await fetch(\n+       `${ROOT_API}questions/${match.params.id}?site=stackoverflow`,\n+     );\n+     const dataJSON = await data.json();\n\n+     if (dataJSON) {\n+       this.setState({\n+         data: dataJSON,\n+         loading: false,\n+       });\n+     }\n+   } catch(error) {\n+     this.setState({\n+       loading: true,\n+       error: error.message,\n+     });\n+   }\n+ }\n\n  render() {\n    ...\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\n+ import Card from '../components/Card/Card';\n\n...\n\nclass Question extends Component {\n  ...\n  render() {\n    const { data, loading, error } = this.state;\n\n    if (loading || error) {\n      return <Alert>{loading ? 'Loading...' : error}</Alert>;\n    }\n\n    return (\n      <QuestionWrapper>\n+       <Card key={data.items[0].question_id} data={data.items[0]} />\n      </QuestionWrapper>\n    );\n  }\n}\n\nexport default Question;\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\n+ import { Link } from 'react-router-dom';\nimport Card from '../components/Card/Card';\n\n...\n\nclass Feed extends Component {\n  ...\n  render() {\n    const { data, loading, error } = this.state;\n\n    if (loading || error) {\n      return <Alert>{loading ? 'Loading...' : error}</Alert>;\n    }\n\n    return (\n      <FeedWrapper>   \n        {data.items.map(item =>\n+         <Link key={item.question_id} to={`/questions/${item.question_id}`}>\n-            <Card key={item.question_id} data={item} />\n+            <Card data={item} />\n+          </Link>\n+ )}\n       </FeedWrapper>\n     );\n   }\n}\n\nexport default Feed;\n```", "```jsx\n...\n+ const CardLink = styled(Link)`\n+  text-decoration: none;\n+  color: inherit;\n+ `; \nconst  ROOT_API  =  'https://api.stackexchange.com/2.2/'; \nclass Feed extends Component {\n  ...\n  render() {\n    const { data, loading, error } = this.state;\n\n    if (loading || error) {\n      return <Alert>{loading ? 'Loading...' : error}</Alert>;\n    }\n\n    return (\n      <FeedWrapper>\n        {data.items.map(item => (\n-         <Link key={item.question_id} to={`/questions/${item.question_id}`}>\n+         <CardLink key={item.question_id} to={`/questions/${item.question_id}`}>\n            <Card data={item} />\n-         </Link>\n+         </CardLink>\n        ))}\n      </FeedWrapper>\n    );\n  }\n}\n\nexport default Feed;\n```", "```jsx\n...\nclass App extends Component {\n  render() {\n    return (\n       <>\n         <GlobalStyle />\n         <AppWrapper>\n           <Header />\n           <Router>\n             <Route exact path='/' component={Feed} />\n+            <Route path='/questions' component={Feed} />\n             <Route path='/questions/:id' component={Question} />\n           </Router>\n          </AppWrapper>\n        </>\n     );\n   }\n }\n\n export default App;\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\n- import { BrowserRouter as Router, Route } from 'react-router-dom';\n+ import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; \n...\n```", "```jsx\n...\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <GlobalStyle />\n        <AppWrapper>\n          <Header />\n          <Router>\n+         <Switch>\n            <Route exact path='/' component={Feed} />\n-           <Route path='/questions' component={Feed} />\n            <Route path='/questions/:id' component={Question} />\n+           <Route path='/questions' component={Feed} />\n+         </Switch>\n          </Router>\n        </AppWrapper>\n       </>\n     );\n   }\n }\n\n export default App;\n```", "```jsx\nnpm install query-string\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\n+ import queryString from 'query-string';\n\n...\n```", "```jsx\n...\nclass Feed extends Component {\n- constructor() {\n-   super();\n+ constructor(props) {\n+   super(props);\n+   const query = queryString.parse(props.location.search);\n    this.state = {\n      data: [],\n+     page: (query.page) ? parseInt(query.page) : 1,\n      loading: true,\n      error: '',\n    };\n}\n...\n```", "```jsx\n...\nasync componentDidMount() {\n+ const { page } = this.state;\n  try {\n-   const data = await fetch(\n-     `${ROOT_API}questions/${match.params.id}?site=stackoverflow`,\n-   );\n+   const data = await fetch(\n+     `${ROOT_API}questions?order=desc&sort=activity&tagged=reactjs&site=stackoverflow${(page) ? `&page=${page}` : ''}`,\n+   );\n    const dataJSON = await data.json();\n\n    if (dataJSON) {\n      this.setState({\n        data: dataJSON,\n        loading: false,\n      });\n    }\n  } catch(error) {\n    this.setState({\n      loading: false,\n      error: error.message,\n    });\n  }\n}\n...\n```", "```jsx\n...\n + const PaginationBar = styled.div`\n+  width: 100%;\n+  display: flex;\n+  justify-content: space-between;\n+ `;\n\n+ const PaginationLink = styled(Link)`\n+  padding: 1%;\n+  background: lightBlue;\n+  color: white;\n+  text-decoration: none\n+  border-radius: 5px;\n+ `;\n\nconst  ROOT_API  =  'https://api.stackexchange.com/2.2/'; class Feed extends Component {\n  ...\n```", "```jsx\n...\nrender() {\n  const { data, loading, error } = this.state;\n\n    if (loading || error) {\n      return <Alert>{loading ? 'Loading...' : error}</Alert>;\n    }\n\n    return (\n      <FeedWrapper>\n        {data.items.map(item => (\n          <CardLink key={item.question_id} to={`/questions/${item.question_id}`}>\n            <Card data={item} />\n          </CardLink>\n        ))} +       <PaginationBar>\n+         <PaginationLink>Previous</PaginationLink>\n+         <PaginationLink>Next</PaginationLink>\n+       </PaginationBar>\n      </FeedWrapper>\n    );\n  }\n}\n\nexport default Feed;\n```", "```jsx\n...\n\nrender() {\n- const { data, loading } = this.state; \n+ const { data, page, loading } = this.state;\n+ const { match } = this.props;\n\n  if (loading || error) {\n    return <Alert>{loading ? 'Loading...' : error}</Alert>;\n  }\n\n  return (\n    <FeedWrapper>\n      {data.items.map(item => (\n        <CardLink key={item.question_id} to={`/questions/${item.question_id}`}>\n          <Card data={item} />\n        </CardLink>\n      ))}\n      <PaginationBar>\n-       <PaginationLink>Previous</PaginationLink>\n-       <PaginationLink>Next</PaginationLink>\n+       {page > 1 && <PaginationLink to={`${match.url}?page=${page - 1}`}>Previous</PaginationLink>}\n+       {data.has_more && <PaginationLink to={`${match.url}?page=${page + 1}`}>Next</PaginationLink>}\n      </PaginationBar>\n     </FeedWrapper>\n    );\n  }\n}\n\nexport default Feed;\n```", "```jsx\n...\n+ async fetchAPI(page) {\n+   try {\n+     const data = await fetch(`${ROOT_API}questions?order=desc&sort=activity&tagged=reactjs&site=stackoverflow${(page) ? `&page=${page}` : ''}`);\n+     const dataJSON = await data.json();\n+\n+     if (dataJSON) {\n+       this.setState({\n+         data: dataJSON,\n+         loading: false,\n+       });\n+     }\n+   } catch(error) {\n+     this.setState({\n+      loading: false,\n+      error: error.message,\n+    });\n+  }\n+ }\n\nasync componentDidMount() {\n  ...\n```", "```jsx\n...\n - async componentDidMount() { ... }\n\n+ componentDidMount() {\n+  const { page } = this.state;\n+  this.fetchAPI(page);\n+ } render() {\n  ...\n```", "```jsx\n...  \ncomponentDidMount() {\n  const { page } = this.state;\n  this.fetchAPI(page);\n}\n\n+ componentDidUpdate(prevProps) {\n+  if (prevProps.location.search !== this.props.location.search) {\n+    const query = queryString.parse(this.props.location.search);\n+    this.setState({ page: parseInt(query.page) }, () => \n+      this.fetchAPI(this.state.page),\n+    );\n+  }\n+ }\n\nrender() {\n...\n```", "```jsx\nnpm install express\n```", "```jsx\nimport path from 'path';\nimport fs from 'fs';\nimport express from 'express';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n```", "```jsx\nimport path from 'path';\nimport fs from 'fs';\nimport express from 'express';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\n+ import App from '../src/containers/App';\n```", "```jsx\n...\nconst PORT = 8080;\nconst app = express();\n\napp.get('/*', (req, res) => {\n  const context = {};\n  const app = ReactDOMServer.renderToString(<App />);\n\n  const indexFile = path.resolve('./build/index.html');\n  fs.readFile(indexFile, 'utf8', (err, data) => {\n    if (err) {\n      console.error('Something went wrong:', err);\n      return res.status(500).send('Oops, better luck next time!');\n    }\n\n    data = data.replace('<div id=\"root\"></div>', `<div id=\"root\">${app}</div>`);\n\n    return res.send(data);\n  });\n});\n```", "```jsx\n...\napp.listen(PORT, () => {\n  console.log(`Server-Side Rendered application running on port ${PORT}`);\n});\n```", "```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n+ ReactDOM.hydrate(<App />, document.getElementById('root'));\n\n...\n```", "```jsx\nnpm install @babel/polyfill @babel/register @babel/preset-env @babel/preset-react\n```", "```jsx\nrequire('@babel/polyfill');\n\nrequire('@babel/register')({\n presets: ['@babel/preset-env', '@babel/preset-react'],\n});\n\nrequire('./server');\n```", "```jsx\n...  \n\"scripts\": {\n  \"start\": \"react-scripts start\",\n  \"build\": \"react-scripts build\",\n  \"test\": \"react-scripts test\",\n  \"eject\": \"react-scripts eject\",\n+  \"ssr\": \"node server/index.js\"\n},\n```", "```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n+ import { BrowserRouter as Router } from 'react-router-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.hydrate(\n+  <Router>\n     <App />\n+  </Router>,\n  document.getElementById('root'),\n);\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\n- import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n+ import { Route, Switch } from 'react-router-dom';\nimport Header from '../components/Header/Header';\nimport Feed from './Feed';\nimport Question from './Question';\n\n...\n\nclass App extends Component {\n  render() {\n    return (\n       <>\n        <GlobalStyle />\n        <AppWrapper>\n          <Header />\n-         <Router>\n          <Switch>\n            <Route exact path='/' component={Feed} />\n            <Route path='/questions/:id' component={Question} />\n            <Route path='/questions' component={Feed} />\n          </Switch>\n-         </Router>\n        </AppWrapper>\n      </>\n    );\n  }\n}\n\nexport default App;\n```", "```jsx\nimport path from 'path';\nimport fs from 'fs';\nimport express from 'express';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n+ import { StaticRouter } from 'react-router-dom';\n\nimport App from '../src/containers/App';\n\nconst PORT = 8080;\nconst app = express();\n\napp.get('/*', (req, res) => {\n  const context = {};\n  const app = ReactDOMServer.renderToString(\n-   <Router>\n+   <Router location={req.url} context={context}>\n      <App />\n    </Router>,\n  );\n\n  ...\n```", "```jsx\nnpm install react-helmet\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n+ import Helmet from 'react-helmet';\n\n...\n\nconst Header = () => (\n+  <>\n+    <Helmet>\n+      <title>Q&A Feed</title>\n+      <meta name='description' content='This is a Community Feed project build with React' />\n+    </Helmet>\n    <HeaderWrapper>\n      <Title>Q&A Feed</Title>\n    </HeaderWrapper>\n+  </>\n);\n\nexport default Header;\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport queryString from 'query-string'\nimport { Link } from 'react-router-dom';\n+ import Helmet from 'react-helmet';\nimport Card from '../components/Card/Card';\n\n  ...\n\n  render() {\n    const { data, page, loading, error } = this.state;\n    const { match } = this.props;\n\n    if (loading || error) {\n      return \n+       <>\n+         <Helmet>\n+           <title>Q&A Feed - Questions</title>\n+         </Helmet>\n          <Alert>{loading ? 'Loading...' : error}</Alert>\n+       </>\n    }\n    ...\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\n+ import Helmet from 'react-helmet';\nimport Card from '../components/Card/Card';\n\n  ...\n\n  render() {\n+   const { match } = this.props;\n    const { data, loading, error } = this.state;\n\n    if (loading || error) {\n      return \n+       <>\n+         <Helmet>\n+           <title>{`Q&A Feed - Question #${match.params.id}`}</title>\n+         </Helmet>\n          <Alert>{loading ? 'Loading...' : error}</Alert>\n+       </>\n    }\n\n    ...\n```", "```jsx\nimport path from 'path';\nimport fs from 'fs';\nimport express from 'express';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { StaticRouter as Router } from 'react-router-dom';\n+ import Helmet from 'react-helmet';\n\n...\n\napp.get('/*', (req, res) => {\n  const context = {};\n  const app = ReactDOMServer.renderToString(\n    <Router location={req.url} context={context}>\n      <App />\n    </Router>,\n  );\n+  const helmet = Helmet.renderStatic();\n\n  const indexFile = path.resolve('./build/index.html');\n  fs.readFile(indexFile, 'utf8', (err, data) => {\n    if (err) {\n      console.error('Something went wrong:', err);\n      return res.status(500).send('Oops, better luck next time!');\n    }\n\n    data = data.replace('<div id=\"root\"></div>', `<div id=\"root\">${app}</div>`);\n+   data = data.replace('<meta name=\"helmet\"/>', `${helmet.title.toString()}${helmet.meta.toString()}`);\n\n    return res.send(data);\n  });\n});\n\n...\n```", "```jsx\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n+   <meta name=\"helmet\" />\n-   <title>React App</title>\n  </head>\n...\n```"]