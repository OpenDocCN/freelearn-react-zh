["```jsx\nproject-management-board\n|-- assets\n    |-- data.json\n|-- node_modules\n|-- public\n    |-- favicon.ico\n    |-- index.html\n    |-- manifest.json\n|-- src\n    |-- components\n        |-- Header\n            |-- Header.js\n        |-- Lane\n            |-- Lane.js\n    |-- containers\n        |-- App.js\n        |-- Board.js\n    |-- index.js\n    |-- serviceWorker.js\n.gitignore\npackage.json\n```", "```jsx\n...\nclass Board extends Component {\n+ constructor() {\n+   super();\n+   this.state = {\n+     data: [],\n+     loading: true,\n+     error: '',\n+   }\n+ }\n\n+ async componentDidMount() {\n+   try {\n+     const tickets = await fetch('../../assets/data.json');\n+     const ticketsJSON = await tickets.json();\n\n+     if (ticketsJSON) {\n+       this.setState({\n+         data: ticketsJSON,\n+         loading: false,\n+       });\n+     }\n+   } catch(error) {\n+     this.setState({\n+      loading: false,\n+      error: error.message,\n+    });\n+   }\n+ }\n\n  render() {\n    ...\n  }\n}\n\nexport default Board;\n```", "```jsx\n...\nclass Board extends Component {\n  ...\n  render() {\n+   const { data, loading, error } = this.state;\n\n    const lanes = [\n      { id: 1, title: 'To Do' },\n      { id: 2, title: 'In Progress' },\n      { id: 3, title: 'Review' },\n      { id: 4, title: 'Done' },\n    ];\n\n    return (\n      <BoardWrapper>\n        {lanes.map(lane =>\n          <Lane\n            key={lane.id}\n            title={lane.title}\n+           loading={loading}\n+           error={error}\n+           tickets={data.filter(ticket => ticket.lane === \n            lane.id)}\n          />\n        )}\n      </BoardWrapper>\n    );\n  }\n}\n\nexport default Board;\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n+ import Ticket from '../Ticket/Ticket';\n\n...\n\n+ const TicketsWrapper = styled.div`\n+  padding: 5%;\n+ `;\n\n+ const Alert = styled.div`\n+  text-align: center;\n+ `;\n\n- const Lane = ({ title }) => (\n+ const Lane = ({ tickets, loading, error, title }) => (\n    <LaneWrapper>\n      <Title>{title}</Title>\n+     {(loading || error) && <Alert>{loading ? 'Loading...' : \n       error}</Alert>}\n+     <TicketsWrapper>\n+       {tickets.map(ticket => <Ticket key={ticket.id} \n         ticket={ticket} />)}\n+     </TicketsWrapper>\n    </LaneWrapper>\n);\n\nexport default Lane;\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst TicketWrapper = styled.div`\n  background: darkGray;\n  padding: 20px;\n  border-radius: 20px;\n\n  &:not(:last-child) {\n    margin-bottom: 5%;\n  }\n`;\n\nconst Title = styled.h3`\n  width: 100%;\n  margin: 0px;\n`;\n\nconst Body = styled.p`\n  width: 100%;\n`;\n\nconst Ticket = ({ ticket }) => (\n  <TicketWrapper>\n    <Title>{ticket.title}</Title>\n    <Body>{ticket.body}</Body>\n  </TicketWrapper>\n);\n\nexport default Ticket;\n```", "```jsx\n+ import React from 'react';\n\n+ export default function withDataFetching(WrappedComponent) {\n+   return class extends React.Component {\n\n+ }\n```", "```jsx\n...\n\nexport default function withDataFetching(WrappedComponent) {\n  return class extends React.Component {\n+   constructor(props) {\n+     super(props);\n+     this.state = {\n+       data: [],\n+       loading: true,\n+       error: '',\n+     };\n+   }\n...\n```", "```jsx\nexport default function withDataFetching(WrappedComponent) {\n  return class extends React.Component {\n\n  ...\n\n+ async componentDidMount() {\n+   try {\n+     const data = await fetch(this.props.dataSource);\n+     const dataJSON = await data.json();\n\n+     if (dataJSON) {\n+       this.setState({\n+         data: dataJSON,\n+         loading: false,\n+       });\n+     }\n+   } catch(error) {\n+     this.setState({\n+       loading: false,\n+       error: error.message,\n+     });\n+   }\n+ }\n\n ...\n```", "```jsx\nexport default function withDataFetching(WrappedComponent) {\n  return class extends React.Component {\n\n    ...\n\n+   render() {\n+     const { data, loading, error } = this.state;\n\n+     return (\n+       <WrappedComponent \n+         data={data} \n+         loading={loading} \n+         error={error}\n+         {...this.props} \n+       />\n+     );\n+   }\n  };\n}\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\n+ import withDataFetching from '../withDataFetching';\nimport Lane from '../components/Lane/Lane';\n\nconst BoardWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  margin: 5%;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\n...\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport withDataFetching from '../withDataFetching';\nimport Lane from '../components/Lane/Lane';\n\nconst BoardWrapper = ...;\n\n+ const Board = ({ lanes, loading, error, data }) => (\n+  <BoardWrapper>\n+    {lanes.map(lane =>\n+      <Lane\n+        key={lane.id}\n+        title={lane.title}\n+        loading={loading}\n+        error={error}\n+        tickets={data.filter(ticket => ticket.lane === lane.id)}\n+      />\n+    )}\n+  </BoardWrapper>\n+ ); export default Board;\n```", "```jsx\n...\nconst Board = ({ lanes, loading, error, data }) => (\n  <BoardWrapper>\n    {boards.map(lane =>\n      <Lane\n        key={lane.id}\n        title={lane.title}\n        loading={loading}\n        error={error}\n        tickets={data.filter(ticket => ticket.lane === lane.id)}\n      />\n    )}\n  </BoardWrapper>\n);\n\n- export default Board;\n+ export default withDataFetching(Board);\n```", "```jsx\nTypeError: Cannot read property 'map' of undefined\n```", "```jsx\n...\n\nclass App extends Component {\n  render() {\n+   const lanes = [\n+     { id: 1, title: 'To Do' },\n+     { id: 2, title: 'In Progress' },\n+     { id: 3, title: 'Review' },\n+     { id: 4, title: 'Done' },\n+   ]\n\n    return (\n        <>\n          <GlobalStyle />\n            <AppWrapper>\n            <Header />\n-           <Board />\n+           <Board lanes={lanes} />\n          </AppWrapper>\n        </>\n    );\n  }\n}\n\nexport default App;\n```", "```jsx\n...\nclass App extends Component {\n  render() {\n\n    ...\n\n    return (\n        <>\n          <GlobalStyle />\n            <AppWrapper>\n            <Header />\n-           <Board lanes={lanes} />\n+           <Board lanes={lanes} dataSource={'../../assets/data.json'} />\n          </AppWrapper>\n        </>\n    );\n  }\n}\n\nexport default App;\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport withDataFetching from '../withDataFetching';\nimport Ticket from '../components/Ticket/Ticket';\n\nconst TicketsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  margin: 5%;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst Alert = styled.div`\n    text-align: center;\n`;\n\nconst Tickets = ({ loading, data, error }) => (\n  <TicketsWrapper>\n    {(loading || error) && <Alert>{loading ? 'Loading... : \n     error}</Alert>}\n    {data.map(ticket => <Ticket key={ticket.id} ticket={ticket} />)}\n  </TicketsWrapper>\n);\n\nexport default withDataFetching(Tickets);\n```", "```jsx\nimport React, { Component } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Board from './Board';\n+ import Tickets from './Tickets';\nimport Header from '../components/Header/Header';\n\n...\n\nclass App extends Component {\n  render() {\n    ...\n    return (\n        <>\n          <GlobalStyle />\n            <AppWrapper>\n            <Header />\n            <Board boards={boards} \n             dataSource={'../../assets/data.json'} />\n+           <Tickets dataSource={'../../assets/data.json'} />                    \n            </AppWrapper>\n       </>\n    );\n  }\n}\n\nexport default App;\n```", "```jsx\n...\n\nconst Tickets = ({ loading, data, error }) => (\n  <TicketsWrapper>\n    {(loading || error) && <Alert>{loading ? 'Loading...' : \n      error}</Alert>}\n-   {data.map(ticket => <Ticket key={ticket.id} ticket={ticket} />)}\n+   {data.map(ticket => <Ticket key={ticket.id} marginRight ticket={ticket} />)}\n  </TicketsWrapper>\n);\n\nexport default withDataFetching(Tickets);\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst TicketWrapper = styled.div`\n  background: darkGray;\n  padding: 20px;\n  border-radius: 20px;\n\n  &:not(:last-child) {\n    margin-bottom: 5%;\n+   margin-right: ${props => !!props.marginRight ? '1%' : '0'};\n  }\n`;\n\n...\n\n- const Ticket = ({ ticket }) => (\n+ const Ticket = ({ marginRight, ticket }) => (\n-   <TicketWrapper>\n+   <TicketWrapper marginRight={marginRight}>\n      <Title>{ticket.title}</Title>\n      <Body>{ticket.body}</Body>\n    </TicketWrapper>\n);\n\nexport default Ticket;\n```", "```jsx\nimport React from 'react';\n\nexport default function withDataFetching(WrappedComponent) {\n- return class extends React.Component {\n+ class WithDataFetching extends React.Component {\n  ...\n```", "```jsx\nimport React from 'react';\n\nexport default function withDataFetching(WrappedComponent) {\n  class WithDataFetching extends React.Component {\n\n    ...\n\n    render() {\n      const { data, loading, error } = this.state;\n\n      return (\n        <WrappedComponent \n          data={data} \n          loading={loading} \n          error={error} \n          {...this.props} \n        />\n      );\n    }\n  };\n\n+ WithDataFetching.displayName = `WithDataFetching(${WrappedComponent.name})`;\n\n+ return WithDataFetching;\n}\n```", "```jsx\n...\n - const Board = ({ lanes, loading, data, error }) => (\n+ class Board extends React.Component {\n+   render() {\n+     const { lanes, loading, data, error } = this.props;\n\n+     return (\n        <BoardWrapper>\n          {lanes.map(lane =>\n            <Lane\n              key={lane.id}\n              title={lane.title}\n              loading={loading}\n              error={error}\n              tickets={data.filter(ticket => ticket.lane ===  \n              lane.id)}\n            />\n          )}\n        </BoardWrapper>\n      );\n+   }\n+ }\n\nexport default withDataFetching(Board);\n```", "```jsx\n...\nclass Board extends React.Component {\n+ constructor() {\n+   super();\n+   this.state = {\n+     tickets: [],\n+   };\n+ } \n  render() {\n  ...\n```", "```jsx\n...\n\nclass Board extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      tickets: [],\n    };\n  }\n\n+ componentDidUpdate(prevProps) {\n+   if (prevProps.data !== this.props.data) {\n+     this.setState({ tickets: this.props.data });\n+   }\n+ } \n  render() {\n  ...\n```", "```jsx\n...  \nrender() {\n-   const { lanes, data, loading, error } = this.props; \n+   const { lanes, loading, error } = this.props;\n\n    return (\n      <BoardWrapper>\n        {lanes.map(lane =>\n          <Lane\n            key={lane.id}\n            title={lane.title}\n            loading={loading}\n            error={error}\n-           tickets={data.filter(ticket => ticket.lane === \n            lane.id)}\n+           tickets={this.state.tickets.filter(ticket => \n            ticket.lane === lane.id)}\n          />\n        )}\n      </BoardWrapper>\n    );\n  }\n}\n\nexport default withDataFetching(Board);\n```", "```jsx\n...\nclass Board extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      tickets: [],\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.data !== this.props.data) {\n        this.setState({ tickets: this.props.data });\n    }\n  }\n\n+ onDragStart = (e, id) => {\n+   e.dataTransfer.setData('id', id);\n+ }; \n  render() {\n    const { lanes, loading, error } = this.props;\n\n    return (\n      <BoardWrapper>\n        {lanes.map(lane =>\n          <Lane\n            key={lane.id}\n            title={lane.title}\n            loading={loading}\n            error={error}\n+           onDragStart={this.onDragStart}\n            tickets={this.state.tickets.filter(ticket => \n            ticket.lane === lane.id)}\n          />\n        )}\n      </BoardWrapper>\n    );\n  }\n}\n\nexport default withDataFetching(Board);\n```", "```jsx\n...\n- const Lane = ({ tickets, loading, error, title }) => (\n+ const Lane = ({ tickets, loading, error, onDragStart, title }) => (\n  <LaneWrapper>\n    <Title>{title}</Title>\n    {(loading || error) && <Alert>{loading ? 'Loading...' : \n     error}</Alert>}\n    <TicketsWrapper>\n-     {tickets.map(ticket => <Ticket key={ticket.id} \n       ticket={ticket} />)}\n+     {tickets.map(ticket => <Ticket key={ticket.id} \n       onDragStart={onDragStart} ticket={ticket} />)}\n    </TicketsWrapper>\n  </LaneWrapper>\n);\n\nexport default Lane;\n```", "```jsx\n...\n- const Ticket = ({ marginRight, ticket }) => (\n+ const Ticket = ({ marginRight, onDragStart, ticket }) => (\n  <TicketWrapper\n+   draggable\n+   onDragStart={e => onDragStart(e, ticket.id)}\n    marginRight={marginRight}\n  >\n    <Title>{ticket.title}</Title>\n    <Body>{ticket.body}</Body>\n  </TicketWrapper>\n);\n\nexport default Ticket;\n```", "```jsx\n...\n +  onDragOver = e => {\n+   e.preventDefault();\n+ };\n\n render() {\n    const { lanes, loading, error } = this.props;\n\n    return (\n      <BoardWrapper>\n        {lanes.map(lane =>\n          <Lane\n            key={lane.id}\n            title={lane.title}\n            loading={loading}\n            error={error}\n            onDragStart={this.onDragStart}\n+           onDragOver={this.onDragOver}\n            tickets={this.state.tickets.filter(ticket => \n            ticket.lane === lane.id)}\n          />\n        )}\n      </BoardWrapper>\n    );\n  }\n}\n```", "```jsx\n...\n- const Lane = ({ tickets, loading, error, title }) => (\n+ const Lane = ({ tickets, loading, error, onDragOver, title }) => (\n-   <LaneWrapper>\n+   <LaneWrapper\n+     onDragOver={onDragOver}\n+   >\n      <Title>{title}</Title>\n      {(loading || error) && <Alert>{loading ? 'Loading...' : \n       error}</Alert>}\n      <TicketsWrapper>\n        {tickets.map(ticket => <Ticket onDragStart={onDragStart}   \n         ticket={ticket} />)}\n      </TicketsWrapper>\n    </LaneWrapper>\n);\n\nexport default Lane;\n```", "```jsx\n...  \n+  onDrop = (e, laneId) => {\n+   const id = e.dataTransfer.getData('id');\n+\n+   const tickets = this.state.tickets.filter(ticket => {\n+     if (ticket.id === id) {\n+       ticket.board = boardId;\n+     }\n+     return ticket;\n+   });\n+\n+   this.setState({\n+     ...this.state,\n+     tickets,\n+   });\n+ }; \n  render() {\n    const { lanes, loading, error } = this.props;\n\n    return (\n      <BoardWrapper>\n        {lanes.map(lane =>\n          <Lane\n            key={lane.id}\n+           laneId={lane.id}\n            title={lane.title}\n            loading={loading}\n            error={error}\n            onDragStart={this.onDragStart}\n            onDragOver={this.onDragOver}\n+           onDrop={this.onDrop}\n            tickets={this.state.tickets.filter(ticket => ticket.lane === \n            lane.id)}\n          />\n        )}\n      </BoardWrapper>\n    );\n  }\n}\n\nexport default withDataFetching(Board);\n```", "```jsx\n...\n- const Lane = ({ tickets, loading, error, onDragStart, onDragOver, title }) => (\n+ const Lane = ({ laneId, tickets, loading, error, onDragStart, onDragOver, onDrop, title }) => (\n  <LaneWrapper\n    onDragOver={onDragOver}\n+   onDrop={e => onDrop(e, laneId)}\n  >\n    <Title>{title}</Title>\n    {(loading || error) && <Alert>{loading ? 'Loading...' : error}</Alert>}\n    <TicketsWrapper>\n      { tickets.map(ticket => <Ticket onDragStart={onDragStart} \n        ticket={ticket} />)}\n    </TicketsWrapper>\n  </LaneWrapper>\n);\n\nexport default Lane;\n```"]