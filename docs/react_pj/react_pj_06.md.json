["```jsx\nhotel-review\n|-- node_modules\n|-- public\n    |-- assets\n        |-- beachfront-hotel.jpg\n        |-- forest-apartments.jpg\n        |-- favicon.ico\n        |-- index.html\n        |-- manifest.json\n|-- src\n    |-- components\n        |-- Button\n            |-- Button.js\n        |-- Detail\n            |-- Detail.js\n            |-- ReviewItem.js\n        |-- Form\n            |-- Form.js\n            |-- FormItem.js\n        |-- Header\n            |-- Header.js\n            |-- SubHeader.js\n        |-- Hotels\n            |-- Hotels.js\n            |-- HotelItem.js\n        |-- App.js\n    |-- Context\n        |-- GlobalContext.js\n        |-- HotelsContextProvider.js\n        |-- ReviewsContextProvider.js\n    |-- api.js\n    |-- index.js\n    |-- serviceWorker.js\n.gitignore\npackage.json\n```", "```jsx\nnpm run test \n```", "```jsx\nNo tests found\n 26 files checked.\n testMatch: /hotel-review/src/**/__tests__/**/*.{js,jsx,ts,tsx},/hotel-review/src/**/?(*.)(spec|test).{js,jsx,ts,tsx} - 0 matches\n testPathIgnorePatterns: /node_modules/ - 26 matches\nPattern: - 0 matches\n```", "```jsx\ndescribe('the <SubHeader /> component', () => {\n  it('should render', () => {\n\n  });\n});\n```", "```jsx\ndescribe('the <SubHeader /> component', () => {\n  it('should render', () => {\n+   expect(1+2).toBe(3);\n  });\n});\n```", "```jsx\ndescribe('the <SubHeader /> component', () => {\n  it('should render', () => {\n-    expect(1+2).toBe(3);\n+    expect(1+2).toBe('3');\n  });\n});\n```", "```jsx\nnpm install react-test-renderer --save-dev\n```", "```jsx\n+ import React from 'react';\n+ import ShallowRenderer from 'react-test-renderer/shallow';\n+ import SubHeader from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n ....\n```", "```jsx\nimport React from 'react';\nimport ShallowRenderer from 'react-test-renderer/shallow';\nimport SubHeader from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n  it('should render', () => {\n-   expect(1+2).toBe('3');\n+    const renderer = new ShallowRenderer();\n+    renderer.render(<SubHeader />);\n+    const component = renderer.getRenderOutput();\n\n+    expect(component).toMatchSnapshot();\n  });\n});\n```", "```jsx\n// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`the <SubHeader /> component should render 1`] = `\n<ForwardRef>\n  <ForwardRef />\n</ForwardRef>\n`;\n```", "```jsx\nimport React from 'react';\nimport ShallowRenderer from 'react-test-renderer/shallow';\nimport SubHeader from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n+  const renderer = new ShallowRenderer();\n\n  it('should render', () => {\n-   const renderer = new ShallowRenderer(); \n    renderer.render(<SubHeader />);\n    const component = renderer.getRenderOutput();\n\n    expect(component).toMatchSnapshot();\n  });\n\n+  it('should render with a dynamic title', () => {\n+    renderer.render(<SubHeader title='Test Application' />);\n+    const component = renderer.getRenderOutput();\n\n+    expect(component).toMatchSnapshot();\n+  }); });\n```", "```jsx\nimport React from 'react';\nimport ShallowRenderer from 'react-test-renderer/shallow';\nimport SubHeader from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n  const renderer = new ShallowRenderer();\n\n  ...\n\n  it('should render with a dynamic title', () => {\n-   renderer.render(<SubHeader title='Test Application' />);\n+   renderer.render(<SubHeader title='Test Application Test' />);\n    const component = renderer.getRenderOutput();\n\n    expect(component).toMatchSnapshot();\n  });\n});\n```", "```jsx\n \u2022 the <SubHeader /> component \u203a should render\n\n expect(value).toMatchSnapshot()\n\n Received value does not match stored snapshot \"the <SubHeader /> component should render 1\".\n\n - Snapshot\n + Received\n\n <ForwardRef>\n <ForwardRef>\n - Test Application\n + Test Application Title\n </ForwardRef>\n </ForwardRef>\n...\n```", "```jsx\nimport React from 'react';\nimport ShallowRenderer from 'react-test-renderer/shallow';\nimport SubHeader from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n  const renderer = new ShallowRenderer();\n\n  ...\n\n+  it('should render with a goback button', () => {\n+   renderer.render(<SubHeader goBack={() => {}} />);\n+    const component = renderer.getRenderOutput();\n+\n+    expect(component).toMatchSnapshot();\n+  });\n\n+  it('should render with a form button', () => {\n+   renderer.render(<SubHeader openForm={() => {}} />);\n+    const result = renderer.getRenderOutput();\n+\n+    expect(component).toMatchSnapshot();\n+  });\n});\n```", "```jsx\nnpm run test --coverage\n```", "```jsx\n PASS src/components/Header/SubHeader.test.js\n----------------------------|----------|----------|----------|----------|-------------------|\nFile | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s |\n----------------------------|----------|----------|----------|----------|-------------------|\nAll files | 5 | 6.74 | 4.26 | 5.21 | |\n src | 0 | 0 | 0 | 0 | |\n api.js | 0 | 0 | 0 | 0 |... 20,22,23,26,30 |\n index.js | 0 | 100 | 100 | 0 | 1,2,3,4,5,17 |\n serviceWorker.js | 0 | 0 | 0 | 0 |... 23,130,131,132 |\n src/components | 0 | 100 | 0 | 0 | |\n App.js | 0 | 100 | 0 | 0 |... ,8,10,22,26,27 |\n src/components/Button | 0 | 100 | 0 | 0 | |\n Button.js | 0 | 100 | 0 | 0 | 20 |\n src/components/Detail | 0 | 0 | 0 | 0 | |\n Detail.js | 0 | 0 | 0 | 0 |... 26,27,31,33,35 |\n ReviewItem.js | 0 | 100 | 0 | 0 |... 15,21,26,30,31 |\n src/components/Form | 0 | 0 | 0 | 0 | |\n Form.js | 0 | 0 | 0 | 0 |... 29,30,31,34,36 |\n FormInput.js | 0 | 0 | 0 | 0 |... 17,26,35,40,41 |\n src/components/Header | 100 | 100 | 100 | 100 | |\n Header.js | 100 | 100 | 100 | 100 | |\n SubHeader.js | 100 | 100 | 100 | 100 | |\n...\n```", "```jsx\nimport React from 'react';\nimport ShallowRenderer from 'react-test-renderer/shallow';\nimport Button from './Button';\n\ndescribe('the <Button /> component', () => {\n  const renderer = new ShallowRenderer();\n\n  it('should render', () => {\n    const children = 'This is a button';\n    renderer.render(<Button>{children</Button>);\n    const result = renderer.getRenderOutput();\n\n    expect(result).toMatchSnapshot();\n  });\n});\n```", "```jsx\nnpm run test --coverage\n```", "```jsx\n PASS src/components/Header/SubHeader.test.js\n PASS src/components/Button/Button.test.js\n \u203a 1 snapshot written.\n PASS src/components/Header/Header.test.js\n----------------------------|----------|----------|----------|----------|-------------------|\nFile | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s |\n----------------------------|----------|----------|----------|----------|-------------------|\nAll files | 5.45 | 6.74 | 6.38 | 5.69 | |\n src | 0 | 0 | 0 | 0 | |\n api.js | 0 | 0 | 0 | 0 |... 20,22,23,26,30 |\n index.js | 0 | 100 | 100 | 0 | 1,2,3,4,5,17 |\n serviceWorker.js | 0 | 0 | 0 | 0 |... 23,130,131,132 |\n src/components | 0 | 100 | 0 | 0 | |\n App.js | 0 | 100 | 0 | 0 |... ,8,10,22,26,27 |\n src/components/Button | 100 | 100 | 100 | 100 | |\n Button.js | 100 | 100 | 100 | 100 | |\n```", "```jsx\n// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`the <Button /> component should render 1`] = `\n<ForwardRef>\n  This is a button\n</ForwardRef>\n`;\n```", "```jsx\nimport React from 'react';\nimport ShallowRenderer from 'react-test-renderer/shallow';\nimport Button from './Button';\n\ndescribe('the <Button /> component', () => {\n  const renderer = new ShallowRenderer();\n\n-  it('should render', () => {\n-    const children = 'This is a button';\n-    renderer.render(<Button>{children}</Button>);\n-    const result = renderer.getRenderOutput();\n\n-    expect(result).toMatchSnapshot();\n-  })\n\n+  it('should render the correct children', () => {\n+    const children = 'This is a button';\n+    renderer.render(<Button>{children}</Button>);\n+    const component = renderer.getRenderOutput();\n\n+    expect(component.props.children).toEqual(children);\n+  });\n});\n```", "```jsx\n PASS src/components/Header/Header.test.js\n PASS src/components/Header/SubHeader.test.js\n PASS src/components/Button/Button.test.js\n \u203a 1 snapshot obsolete.\n \u2022 the <Button /> component should render 1\n----------------------------|----------|----------|----------|----------|-------------------|\nFile | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s |\n----------------------------|----------|----------|----------|----------|-------------------|\nAll files | 5.45 | 6.74 | 6.38 | 5.69 | |\n src | 0 | 0 | 0 | 0 | |\n api.js | 0 | 0 | 0 | 0 |... 20,22,23,26,30 |\n index.js | 0 | 100 | 100 | 0 | 1,2,3,4,5,17 |\n serviceWorker.js | 0 | 0 | 0 | 0 |... 23,130,131,132 |\n src/components | 0 | 100 | 0 | 0 | |\n App.js | 0 | 100 | 0 | 0 |... ,8,10,22,26,27 |\n src/components/Button | 100 | 100 | 100 | 100 | |\n Button.js | 100 | 100 | 100 | 100 | |\n...\n```", "```jsx\nnpm run test -u\n```", "```jsx\n PASS src/components/Button/Button.test.js\n \u203a snapshot file removed.\n\nSnapshot Summary\n \u203a 1 snapshot file removed from 1 test suite.\n```", "```jsx\nnpm install enzyme enzyme-adapter-react-16 --save-dev\n```", "```jsx\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\n```", "```jsx\nimport React from 'react';\n- import ShallowRenderer from 'react-test-renderer/shallow';\n+ import { shallow } from 'enzyme';\nimport SubHeader from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n-  const renderer = new ShallowRenderer();\n  it('should render', () => {\n    ...\n```", "```jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport SubHeader from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n  it('should render', () => {\n-    renderer.render(<SubHeader />);\n-    const component = renderer.getRenderOutput();\n+    const component = shallow(<SubHeader />);\n\n    expect(component).toMatchSnapshot();\n  });\n\n  ...\n```", "```jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport SubHeader from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n  ...\n\n  it('should render with a dynamic title', () => {\n-    renderer.render(<SubHeader title='Test Application' />);\n-    const component = renderer.getRenderOutput();\n+    const component = shallow(<SubHeader title='Test Application' />);\n\n    expect(component).toMatchSnapshot();\n  });\n\n  it('should render with a goback button', () => {\n-    renderer.render(<SubHeader goBack={() => {}} />);\n-    const component = renderer.getRenderOutput();\n+    const component = shallow(<SubHeader goBack={() => {}} />);\n\n    expect(component).toMatchSnapshot();\n  });\n\n  it('should render with a form button', () => {\n-    renderer.render(<SubHeader openForm={() => {}} />);\n-    const component = renderer.getRenderOutput();\n+    const component = shallow(<SubHeader openForm={() => {}} />);\n\n    expect(component).toMatchSnapshot();\n  });\n});\n```", "```jsx\n FAIL src/components/Header/SubHeader.test.js\n the <SubHeader /> component\n \u03a7 should render (27ms)\n \u03a7 should render with a dynamic title (4ms)\n \u03a7 should render with a goback button (4ms)\n \u03a7 should render with a form button (4ms)\n\n \u2022 the <SubHeader /> component \u203a should render\n\n expect(value).toMatchSnapshot()\n\n Received value does not match stored snapshot \"the <SubHeader /> component should render 1\".\n\n - Snapshot\n + Received\n\n - <ForwardRef>\n - <ForwardRef />\n - </ForwardRef>\n + <styled.div>\n + <styled.h2 />\n + </styled.div>\n```", "```jsx\nimport React from 'react';\n- import ShallowRenderer from 'react-test-renderer/shallow';\n+ import { shallow } from 'enzyme';\nimport Button from './Button';\n\ndescribe('the <Button /> component', () => {\n-  const renderer = new ShallowRenderer();\n\n  it('should render the correct children', () => {\n    const children = 'This is a button';\n-   renderer.render(<Button>{children}</Button>);\n-   const component = renderer.getRenderOutput();\n+   const component = shallow(<Button>{children}</Button>)\n\n-   expect(component.props.children).toEqual(children)\n+   expect(component.props().children).toEqual(children)\n  })\n})\n```", "```jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport Button from './Button';\n\ndescribe('the <Button /> component', () => {\n  ...\n\n+  it('should handle the onClick event', () => {\n+    const mockOnClick = jest.fn();\n+    const component = shallow(<Button onClick={mockOnClick} />);\n\n+    component.simulate('click');\n\n+    expect(mockOnClick).toHaveBeenCalled();\n+  });\n});\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '../Button/Button';\n\nconst SubHeaderWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  background: cornflowerBlue;\n`;\n\n- const Title = styled.h2`\n+ export const Title = styled.h2`\n  text-align: center;\n  flex-basis: 60%;\n\n  &:first-child {\n    margin-left: 20%;\n  }\n\n  &:last-child {\n    margin-right: 20%;\n  }\n`;\n\n- const SubHeaderButton = styled(Button)`\n+ export const SubHeaderButton = styled(Button)`\n  margin: 10px 5%;\n`;\n\n...\n```", "```jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\n- import SubHeader from './SubHeader';\n+ import SubHeader, { Title, SubHeaderButton } from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n    ...\n```", "```jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport SubHeader, { Title, SubHeaderButton } from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n  it('should render with a dynamic title', () => {\n+    const title = 'Test Application';\n-    const component = shallow(<SubHeader title='Test Application' />);\n+    const component = shallow(<SubHeader title={title} />);\n\n-    expect(component).toMatchSnapshot();\n\n+    expect(component.find(Title).text()).toEqual(title);\n  });\n\n  ...\n```", "```jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport SubHeader, { Title, SubHeaderButton } from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n  ...\n\n  it('should render with a goback button and handle the onClick event', () => {\n+    const mockGoBack = jest.fn();\n-    const component = shallow(<SubHeader goBack={() => {}} />);\n+    const component = shallow(<SubHeader goBack={mockGoBack} />);\n\n-    expect(component).toMatchSnapshot();\n\n+    const goBackButton = component.find(SubHeaderButton);\n+    expect(goBackButton.exists()).toBe(true);\n  });\n  ...\n```", "```jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport SubHeader, { Title, SubHeaderButton } from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n  ...\n\n  it('should render with a goback button and handle the onClick event', () => {\n    const mockGoBack = jest.fn();\n    const component = shallow(<SubHeader goBack={mockGoBack} />);\n\n    const goBackButton = component.find(SubHeaderButton);\n    expect(goBackButton.exists()).toBe(true);\n\n+    goBackButton.simulate('click');\n+    expect(mockGoBack).toHaveBeenCalled();\n  })\n  ...\n```", "```jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport SubHeader, { Title, SubHeaderButton } from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n  ...\n\n-   it('should render with a goback button and handle the onClick event', () => {\n+   it('should render with a buttons and handle the onClick events', () => {\n    const mockGoBack = jest.fn();\n+    const mockOpenForm = jest.fn();\n-    //const component = shallow(<SubHeader goBack={mockGoBack} />);\n+    const component = shallow(<SubHeader goBack={mockGoBack} openForm={mockOpenForm} />);\n\n    ...\n  });\n\n-  it('should render with a form button', () => {\n-    const component = shallow(<SubHeader openForm={() => {}} />);\n\n-    expect(component).toMatchSnapshot();\n-  });\n});\n```", "```jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport SubHeader, { Title, SubHeaderButton } from './SubHeader';\n\ndescribe('the <SubHeader /> component', () => {\n  ...\n\n  it('should render with buttons and handle the onClick events', () => {\n    const mockGoBack = jest.fn();\n    const mockOpenForm = jest.fn();\n    const component = shallow(<SubHeader goBack={mockGoBack} openForm={mockOpenForm} />);\n\n-   const goBackButton = component.find(SubHeaderButton);\n+   const goBackButton = component.find(SubHeaderButton).at(0);\n    expect(goBackButton.exists()).toBe(true);\n\n+   const openFormButton = component.find(SubHeaderButton).at(1);\n+   expect(openFormButton.exists()).toBe(true)\n\n    goBackButton.simulate('click');\n    expect(mockGoBack).toHaveBeenCalled();\n\n+    openFormButton.simulate('click');\n+    expect(mockOpenForm).toHaveBeenCalled();\n  });\n  ...\n```", "```jsx\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport Hotels from './Hotels';\n\ndescribe('the <Hotels /> component', () => {\n\n});\n```", "```jsx\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport Hotels from './Hotels';\n\n+ let useContextMock;\n\n+ beforeEach(() => {\n+  useContextMock = React.useContext = jest.fn();\n+ });\n\n+ afterEach(() => {\n+  useContextMock.mockReset();\n+ });\n\ndescribe('the <Hotels /> component', () => {\n    ...\n```", "```jsx\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport Hotels from './Hotels';\n\n...\n\ndescribe('the <Hotels /> component', () => {\n  it('should handle the first mount', () => {\n+    const mockContext = { \n+      loading: true,\n+      error: '', \n+      hotels: [], \n+      getHotelsRequest: jest.fn(),\n+    }\n+    useContextMock.mockReturnValue(mockContext);\n+    const wrapper = mount(<Hotels />);\n+\n+    expect(mockContext.getHotelsRequest).toHaveBeenCalled();\n  });\n});\n```", "```jsx\n...\n\n- const Alert = styled.span`\n+ export const Alert = styled.span`\n  width: 100%;\n  text-align: center;\n`;\n\nconst Hotels = ({ match, history }) => {\n    ...\n```", "```jsx\nimport React from 'react';\nimport { mount } from 'enzyme';\n- import Hotels from './Hotels';\n+ import Hotels, { Alert } from './Hotels';\n\n...\n\ndescribe('the <Hotels /> component', () => {\n  it('should handle the first mount', () => {\n    const mockContext = { \n      loading: true,\n      error: '',\n      hotels: [], \n      getHotelsRequest: jest.fn(), \n    }\n    useContextMock.mockReturnValue(mockContext);\n    const wrapper = mount(<Hotels />);\n\n    expect(mockContext.getHotelsRequest).toHaveBeenCalled();\n+   expect(wrapper.find(Alert).text()).toBe('Loading...');\n  });\n```", "```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { HotelsContext } from '../../Context/HotelsContextProvider';\nimport SubHeader from '../Header/SubHeader';\nimport HotelItem from './HotelItem';\n\n- const HotelItemsWrapper = styled.div`\n+ export const HotelItemsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  margin: 2% 5%;\n`;\n\n...\n```", "```jsx\nimport React from 'react';\nimport { mount } from 'enzyme';\n- import Hotels, { Alert } from './Hotels';\n+ import Hotels, { Alert, HotelItemsWrapper } from './Hotels';\n\ndescribe('the <Hotels /> component', () => {\n  ...\n\n+  it('should render the list of hotels', () => {\n+    const mockContext = {\n+      loading: false,\n+      error: '',\n+      hotels: [{\n+        id: 123,\n+        title: 'Test Hotel',\n+        thumbnail: 'test.jpg',\n+      }],\n+      getHotelsRequest: jest.fn(),\n+    }\n+    useContextMock.mockReturnValue(mockContext);\n+    const wrapper = mount(<Hotels />);\n\n+    expect(wrapper.find(HotelItemsWrapper).exists()).toBe(true);\n+  });\n});\n```", "```jsx\nimport React from 'react';\nimport { mount } from 'enzyme';\n+ import { BrowserRouter as Router } from 'react-router-dom';\nimport Hotels, { Alert, HotelItemsWrapper } from './Hotels';\n\n...\n\ndescribe('the <Hotels /> component', () => {\n  ...\n\n  it('should render the list of hotels', () => {\n    const mockContext = {\n      loading: false,\n      alert: '',\n      hotels: [{\n        id: 123,\n        title: 'Test Hotel',\n        thumbnail: 'test.jpg',\n      }],\n      getHotelsRequest: jest.fn(),\n    }\n    useContextMock.mockReturnValue(mockContext);\n-    const wrapper = mount(<Hotels />);\n+    const wrapper = mount(<Router><Hotels /></Router>);\n\n    expect(wrapper.find(HotelItemsWrapper).exists()).toBe(true);\n  });\n});\n```", "```jsx\n- const Title = styled.h3`\n+ export const Title = styled.h3`\n  margin-left: 2%;\n`\n```", "```jsx\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Hotels, { Alert, HotelItemsWrapper } from './Hotels';\n+ import HotelItem, { Title } from './HotelItem';\n\n...\n\ndescribe('the <Hotels /> component', () => {\n  ...\n\n  it('should render the list of hotels', () => {\n    const mockContext = {\n      loading: false,\n      alert: '',\n      hotels: [{\n        id: 123,\n        title: 'Test Hotel',\n        thumbnail: 'test.jpg',\n      }],\n      getHotelsRequest: jest.fn(),\n    }\n    useContextMock.mockReturnValue(mockContext);\n    const wrapper = mount(<Router><Hotels /></Router>);\n\n    expect(wrapper.find(HotelItemsWrapper).exists()).toBe(true);\n\n+   expect(wrapper.find(HotelItem).exists()).toBe(true);\n+ expect(wrapper.find(HotelItem).at(0).find(Title).text()).toBe(mockContext.hotels[0].title);\n  });\n});\n```", "```jsx\n PASS src/components/Button/Button.test.js\n PASS src/components/Header/SubHeader.test.js\n PASS src/components/Hotels/Hotels.test.js\n----------------------------|----------|----------|----------|----------|-------------------|\nFile | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s |\n----------------------------|----------|----------|----------|----------|-------------------|\nAll files | 13.27 | 11.24 | 12.77 | 13.73 | |\n ...\n src/components/Hotels | 100 | 83.33 | 100 | 100 | |\n HotelItem.js | 100 | 100 | 100 | 100 | |\n Hotels.js | 100 | 83.33 | 100 | 100 | 33 |\n```"]